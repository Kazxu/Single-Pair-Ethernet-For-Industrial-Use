
EVAL-ADIN1110EBZ_ST_uC_cubeADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005734  08005734  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800573c  0800573c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800573c  0800573c  0001573c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  080057a0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080057a0  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de83  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e24  00000000  00000000  0002df52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009aa  00000000  00000000  00030a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c8a0  00000000  00000000  000313ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d50a  00000000  00000000  0005dc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011940c  00000000  00000000  0006b164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003934  00000000  00000000  00184570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00187ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005670 	.word	0x08005670

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08005670 	.word	0x08005670

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fb6f 	bl	8000c92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f83a 	bl	800062c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
 // MX_FMC_Init();
  MX_ADC1_Init();
 80005b8:	f000 f87e 	bl	80006b8 <MX_ADC1_Init>
//  MX_I2C3_Init();
 // MX_OCTOSPI1_Init();
 // MX_SPI1_Init();
 // MX_SPI2_Init();
 // MX_SPI3_Init();
  MX_UART4_Init();
 80005bc:	f000 f8e0 	bl	8000780 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 f92a 	bl	8000818 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 80005c4:	4814      	ldr	r0, [pc, #80]	; (8000618 <main+0x6c>)
 80005c6:	f000 ff71 	bl	80014ac <HAL_ADC_Start>
	          // Poll for conversion completion
	        HAL_ADC_PollForConversion(&hadc1, 500);
 80005ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <main+0x6c>)
 80005d0:	f001 f802 	bl	80015d8 <HAL_ADC_PollForConversion>
	              // Get the ADC value
	        adcValue = HAL_ADC_GetValue(&hadc1);
 80005d4:	4810      	ldr	r0, [pc, #64]	; (8000618 <main+0x6c>)
 80005d6:	f001 f88e 	bl	80016f6 <HAL_ADC_GetValue>
 80005da:	4603      	mov	r3, r0
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <main+0x70>)
 80005e0:	801a      	strh	r2, [r3, #0]
	        HAL_ADC_Stop(&hadc1);
 80005e2:	480d      	ldr	r0, [pc, #52]	; (8000618 <main+0x6c>)
 80005e4:	f000 ffc5 	bl	8001572 <HAL_ADC_Stop>
	        //toStringValue(adcValue, buffer, sizeof(buffer));
	        snprintf(buffer, sizeof(buffer), "%hu \r\n", adcValue); //convert integer to string
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <main+0x70>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <main+0x74>)
 80005ee:	2114      	movs	r1, #20
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <main+0x78>)
 80005f2:	f004 fb85 	bl	8004d00 <sniprintf>

	        HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <main+0x78>)
 80005f8:	f7ff fe02 	bl	8000200 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000604:	4907      	ldr	r1, [pc, #28]	; (8000624 <main+0x78>)
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <main+0x7c>)
 8000608:	f003 fd76 	bl	80040f8 <HAL_UART_Transmit>
	        HAL_Delay(500);
 800060c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000610:	f000 fbb4 	bl	8000d7c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000614:	e7d6      	b.n	80005c4 <main+0x18>
 8000616:	bf00      	nop
 8000618:	20000078 	.word	0x20000078
 800061c:	20000200 	.word	0x20000200
 8000620:	08005688 	.word	0x08005688
 8000624:	20000204 	.word	0x20000204
 8000628:	20000170 	.word	0x20000170

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b096      	sub	sp, #88	; 0x58
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2244      	movs	r2, #68	; 0x44
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fb94 	bl	8004d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000652:	f002 f86d 	bl	8002730 <HAL_PWREx_ControlVoltageScaling>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800065c:	f000 f928 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000660:	2310      	movs	r3, #16
 8000662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800066c:	2360      	movs	r3, #96	; 0x60
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4618      	mov	r0, r3
 800067a:	f002 f8fd 	bl	8002878 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000684:	f000 f914 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fd0f 	bl	80030c4 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006ac:	f000 f900 	bl	80008b0 <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3758      	adds	r7, #88	; 0x58
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006d0:	4a29      	ldr	r2, [pc, #164]	; (8000778 <MX_ADC1_Init+0xc0>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ADC1_Init+0xbc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000700:	2201      	movs	r2, #1
 8000702:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_ADC1_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_ADC1_Init+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000722:	2200      	movs	r2, #0
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072e:	4811      	ldr	r0, [pc, #68]	; (8000774 <MX_ADC1_Init+0xbc>)
 8000730:	f000 fd70 	bl	8001214 <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x86>
  {

	  Error_Handler();
 800073a:	f000 f8b9 	bl	80008b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_ADC1_Init+0xc4>)
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000742:	2306      	movs	r3, #6
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074a:	237f      	movs	r3, #127	; 0x7f
 800074c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074e:	2304      	movs	r3, #4
 8000750:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_ADC1_Init+0xbc>)
 800075c:	f000 ffd8 	bl	8001710 <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000766:	f000 f8a3 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000078 	.word	0x20000078
 8000778:	50040000 	.word	0x50040000
 800077c:	04300002 	.word	0x04300002

08000780 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <MX_UART4_Init+0x90>)
 8000786:	4a23      	ldr	r2, [pc, #140]	; (8000814 <MX_UART4_Init+0x94>)
 8000788:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_UART4_Init+0x90>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_UART4_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <MX_UART4_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_UART4_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_UART4_Init+0x90>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_UART4_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_UART4_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_UART4_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_UART4_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_UART4_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007c8:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_UART4_Init+0x90>)
 80007ca:	f003 fc45 	bl	8004058 <HAL_UART_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80007d4:	f000 f86c 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_UART4_Init+0x90>)
 80007dc:	f004 f9c6 	bl	8004b6c <HAL_UARTEx_SetTxFifoThreshold>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80007e6:	f000 f863 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <MX_UART4_Init+0x90>)
 80007ee:	f004 f9fb 	bl	8004be8 <HAL_UARTEx_SetRxFifoThreshold>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f85a 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_UART4_Init+0x90>)
 80007fe:	f004 f97c 	bl	8004afa <HAL_UARTEx_DisableFifoMode>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000808:	f000 f852 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000e0 	.word	0x200000e0
 8000814:	40004c00 	.word	0x40004c00

08000818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 800081e:	4a23      	ldr	r2, [pc, #140]	; (80008ac <MX_USART1_UART_Init+0x94>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000860:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 8000862:	f003 fbf9 	bl	8004058 <HAL_UART_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800086c:	f000 f820 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 8000874:	f004 f97a 	bl	8004b6c <HAL_UARTEx_SetTxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800087e:	f000 f817 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 8000886:	f004 f9af 	bl	8004be8 <HAL_UARTEx_SetRxFifoThreshold>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000890:	f000 f80e 	bl	80008b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_USART1_UART_Init+0x90>)
 8000896:	f004 f930 	bl	8004afa <HAL_UARTEx_DisableFifoMode>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008a0:	f000 f806 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000170 	.word	0x20000170
 80008ac:	40013800 	.word	0x40013800

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_MspInit+0x44>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c6:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <HAL_MspInit+0x44>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6613      	str	r3, [r2, #96]	; 0x60
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <HAL_MspInit+0x44>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008de:	4a08      	ldr	r2, [pc, #32]	; (8000900 <HAL_MspInit+0x44>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e4:	6593      	str	r3, [r2, #88]	; 0x58
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0ae      	sub	sp, #184	; 0xb8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	2294      	movs	r2, #148	; 0x94
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f004 fa1f 	bl	8004d68 <memset>
  if(hadc->Instance==ADC1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a27      	ldr	r2, [pc, #156]	; (80009cc <HAL_ADC_MspInit+0xc8>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d146      	bne.n	80009c2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000938:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800093a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800093e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000942:	2301      	movs	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800094a:	2310      	movs	r3, #16
 800094c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800095a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fe5f 	bl	8003628 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000970:	f7ff ff9e 	bl	80008b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_ADC_MspInit+0xcc>)
 8000976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000978:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <HAL_ADC_MspInit+0xcc>)
 800097a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800097e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <HAL_ADC_MspInit+0xcc>)
 8000982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_ADC_MspInit+0xcc>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_ADC_MspInit+0xcc>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_ADC_MspInit+0xcc>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009a4:	233f      	movs	r3, #63	; 0x3f
 80009a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009aa:	230b      	movs	r3, #11
 80009ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_ADC_MspInit+0xd0>)
 80009be:	f001 fd05 	bl	80023cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	37b8      	adds	r7, #184	; 0xb8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	50040000 	.word	0x50040000
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000800 	.word	0x48000800

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b0b0      	sub	sp, #192	; 0xc0
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	f107 0318 	add.w	r3, r7, #24
 80009f4:	2294      	movs	r2, #148	; 0x94
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f004 f9b5 	bl	8004d68 <memset>
  if(huart->Instance==UART4)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a43      	ldr	r2, [pc, #268]	; (8000b10 <HAL_UART_MspInit+0x138>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d13c      	bne.n	8000a82 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fe07 	bl	8003628 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a20:	f7ff ff46 	bl	80008b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a24:	4b3b      	ldr	r3, [pc, #236]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a28:	4a3a      	ldr	r2, [pc, #232]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000a2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a30:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	4a34      	ldr	r2, [pc, #208]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a48:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = D01_TX_Pin|D00_RX_Pin;
 8000a54:	2303      	movs	r3, #3
 8000a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f001 fca6 	bl	80023cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a80:	e041      	b.n	8000b06 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <HAL_UART_MspInit+0x140>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d13c      	bne.n	8000b06 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a90:	2300      	movs	r3, #0
 8000a92:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fdc5 	bl	8003628 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000aa4:	f7ff ff04 	bl	80008b0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_UART_MspInit+0x13c>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USB_UART_RX_Pin|USB_UART_TX_Pin;
 8000ad8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af2:	2307      	movs	r3, #7
 8000af4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f001 fc63 	bl	80023cc <HAL_GPIO_Init>
}
 8000b06:	bf00      	nop
 8000b08:	37c0      	adds	r7, #192	; 0xc0
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40004c00 	.word	0x40004c00
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40013800 	.word	0x40013800

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f8e8 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f004 f8ea 	bl	8004d78 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200a0000 	.word	0x200a0000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	20000218 	.word	0x20000218
 8000bd8:	20000368 	.word	0x20000368

08000bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <SystemInit+0x5c>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <SystemInit+0x5c>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <SystemInit+0x60>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <SystemInit+0x60>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <SystemInit+0x60>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <SystemInit+0x60>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <SystemInit+0x60>)
 8000c08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <SystemInit+0x60>)
 8000c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <SystemInit+0x60>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <SystemInit+0x60>)
 8000c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SystemInit+0x60>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00
 8000c3c:	40021000 	.word	0x40021000

08000c40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c44:	f7ff ffca 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c4a:	e003      	b.n	8000c54 <LoopCopyDataInit>

08000c4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c52:	3104      	adds	r1, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c54:	480a      	ldr	r0, [pc, #40]	; (8000c80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c5c:	d3f6      	bcc.n	8000c4c <CopyDataInit>
	ldr	r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c60:	e002      	b.n	8000c68 <LoopFillZerobss>

08000c62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c64:	f842 3b04 	str.w	r3, [r2], #4

08000c68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <LoopForever+0x16>)
	cmp	r2, r3
 8000c6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c6c:	d3f9      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f004 f889 	bl	8004d84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c72:	f7ff fc9b 	bl	80005ac <main>

08000c76 <LoopForever>:

LoopForever:
    b LoopForever
 8000c76:	e7fe      	b.n	8000c76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c78:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000c7c:	08005744 	.word	0x08005744
	ldr	r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c84:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8000c88:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8000c8c:	20000368 	.word	0x20000368

08000c90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_IRQHandler>

08000c92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f001 fb61 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f80e 	bl	8000cc4 <HAL_InitTick>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	e001      	b.n	8000cb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb4:	f7ff fe02 	bl	80008bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_InitTick+0x6c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d023      	beq.n	8000d20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_InitTick+0x70>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_InitTick+0x6c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fb5f 	bl	80023b2 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10f      	bne.n	8000d1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d809      	bhi.n	8000d14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d08:	f001 fb37 	bl	800237a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_InitTick+0x74>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	73fb      	strb	r3, [r7, #15]
 8000d18:	e004      	b.n	8000d24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	73fb      	strb	r3, [r7, #15]
 8000d1e:	e001      	b.n	8000d24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	2000021c 	.word	0x2000021c

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000021c 	.word	0x2000021c

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3360      	adds	r3, #96	; 0x60
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <LL_ADC_SetOffset+0x44>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e64:	bf00      	nop
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	03fff000 	.word	0x03fff000

08000e74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3360      	adds	r3, #96	; 0x60
 8000e82:	461a      	mov	r2, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3360      	adds	r3, #96	; 0x60
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000eca:	bf00      	nop
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	615a      	str	r2, [r3, #20]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b087      	sub	sp, #28
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3330      	adds	r3, #48	; 0x30
 8000f32:	461a      	mov	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	0a1b      	lsrs	r3, r3, #8
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	4413      	add	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	f003 031f 	and.w	r3, r3, #31
 8000f4c:	211f      	movs	r1, #31
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	401a      	ands	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	0e9b      	lsrs	r3, r3, #26
 8000f5a:	f003 011f 	and.w	r1, r3, #31
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f6e:	bf00      	nop
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b087      	sub	sp, #28
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3314      	adds	r3, #20
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	0e5b      	lsrs	r3, r3, #25
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	4413      	add	r3, r2
 8000f98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	0d1b      	lsrs	r3, r3, #20
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	2107      	movs	r1, #7
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	401a      	ands	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	0d1b      	lsrs	r3, r3, #20
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fc4:	bf00      	nop
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	401a      	ands	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0318 	and.w	r3, r3, #24
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ff4:	40d9      	lsrs	r1, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	400b      	ands	r3, r1
 8000ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ffe:	431a      	orrs	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	0007ffff 	.word	0x0007ffff

08001018 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001028:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6093      	str	r3, [r2, #8]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800104c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001050:	d101      	bne.n	8001056 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010a0:	d101      	bne.n	80010a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010c8:	f043 0201 	orr.w	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f0:	f043 0202 	orr.w	r2, r3, #2
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <LL_ADC_IsEnabled+0x18>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <LL_ADC_IsEnabled+0x1a>
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b02      	cmp	r3, #2
 800113c:	d101      	bne.n	8001142 <LL_ADC_IsDisableOngoing+0x18>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_ADC_IsDisableOngoing+0x1a>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001164:	f043 0204 	orr.w	r2, r3, #4
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800118c:	f043 0210 	orr.w	r2, r3, #16
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d101      	bne.n	80011b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011da:	f043 0220 	orr.w	r2, r3, #32
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d101      	bne.n	8001206 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e12f      	b.n	800148e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fb61 	bl	8000904 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fef1 	bl	800103c <LL_ADC_IsDeepPowerDownEnabled>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fed7 	bl	8001018 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff0c 	bl	800108c <LL_ADC_IsInternalRegulatorEnabled>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d115      	bne.n	80012a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fef0 	bl	8001064 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001284:	4b84      	ldr	r3, [pc, #528]	; (8001498 <HAL_ADC_Init+0x284>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	099b      	lsrs	r3, r3, #6
 800128a:	4a84      	ldr	r2, [pc, #528]	; (800149c <HAL_ADC_Init+0x288>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	099b      	lsrs	r3, r3, #6
 8001292:	3301      	adds	r3, #1
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001298:	e002      	b.n	80012a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	3b01      	subs	r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff feee 	bl	800108c <LL_ADC_IsInternalRegulatorEnabled>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	f043 0210 	orr.w	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff62 	bl	80011a0 <LL_ADC_REG_IsConversionOngoing>
 80012dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 80c8 	bne.w	800147c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 80c4 	bne.w	800147c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012fc:	f043 0202 	orr.w	r2, r3, #2
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fefb 	bl	8001104 <LL_ADC_IsEnabled>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10b      	bne.n	800132c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001314:	4862      	ldr	r0, [pc, #392]	; (80014a0 <HAL_ADC_Init+0x28c>)
 8001316:	f7ff fef5 	bl	8001104 <LL_ADC_IsEnabled>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d105      	bne.n	800132c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4619      	mov	r1, r3
 8001326:	485f      	ldr	r0, [pc, #380]	; (80014a4 <HAL_ADC_Init+0x290>)
 8001328:	f7ff fd4c 	bl	8000dc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7e5b      	ldrb	r3, [r3, #25]
 8001330:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001336:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800133c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001342:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d106      	bne.n	8001368 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	3b01      	subs	r3, #1
 8001360:	045b      	lsls	r3, r3, #17
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	2b00      	cmp	r3, #0
 800136e:	d009      	beq.n	8001384 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <HAL_ADC_Init+0x294>)
 800138c:	4013      	ands	r3, r2
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	430b      	orrs	r3, r1
 8001396:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff feff 	bl	80011a0 <LL_ADC_REG_IsConversionOngoing>
 80013a2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff20 	bl	80011ee <LL_ADC_INJ_IsConversionOngoing>
 80013ae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d140      	bne.n	8001438 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d13d      	bne.n	8001438 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7e1b      	ldrb	r3, [r3, #24]
 80013c4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013c6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013ce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013de:	f023 0306 	bic.w	r3, r3, #6
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d118      	bne.n	8001428 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001400:	f023 0304 	bic.w	r3, r3, #4
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800140c:	4311      	orrs	r1, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001412:	4311      	orrs	r1, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001418:	430a      	orrs	r2, r1
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	611a      	str	r2, [r3, #16]
 8001426:	e007      	b.n	8001438 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d10c      	bne.n	800145a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f023 010f 	bic.w	r1, r3, #15
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	1e5a      	subs	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
 8001458:	e007      	b.n	800146a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 020f 	bic.w	r2, r2, #15
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	659a      	str	r2, [r3, #88]	; 0x58
 800147a:	e007      	b.n	800148c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f043 0210 	orr.w	r2, r3, #16
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800148c:	7ffb      	ldrb	r3, [r7, #31]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000
 800149c:	053e2d63 	.word	0x053e2d63
 80014a0:	50040000 	.word	0x50040000
 80014a4:	50040300 	.word	0x50040300
 80014a8:	fff0c007 	.word	0xfff0c007

080014ac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe71 	bl	80011a0 <LL_ADC_REG_IsConversionOngoing>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d14f      	bne.n	8001564 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Start+0x26>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e04b      	b.n	800156a <HAL_ADC_Start+0xbe>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fdce 	bl	800207c <ADC_Enable>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d137      	bne.n	800155a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800150a:	d106      	bne.n	800151a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	f023 0206 	bic.w	r2, r3, #6
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	65da      	str	r2, [r3, #92]	; 0x5c
 8001518:	e002      	b.n	8001520 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	221c      	movs	r2, #28
 8001526:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001546:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fdfc 	bl	8001150 <LL_ADC_REG_StartConversion>
 8001558:	e006      	b.n	8001568 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001562:	e001      	b.n	8001568 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001564:	2302      	movs	r3, #2
 8001566:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_ADC_Stop+0x16>
 8001584:	2302      	movs	r3, #2
 8001586:	e023      	b.n	80015d0 <HAL_ADC_Stop+0x5e>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001590:	2103      	movs	r1, #3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 fcb6 	bl	8001f04 <ADC_ConversionStop>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d111      	bne.n	80015c6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fdcc 	bl	8002140 <ADC_Disable>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d102      	bne.n	80015f0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015ea:	2308      	movs	r3, #8
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e010      	b.n	8001612 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f043 0220 	orr.w	r2, r3, #32
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e06f      	b.n	80016ee <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800160e:	2304      	movs	r3, #4
 8001610:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001612:	f7ff fba7 	bl	8000d64 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001618:	e021      	b.n	800165e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001620:	d01d      	beq.n	800165e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001622:	f7ff fb9f 	bl	8000d64 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d302      	bcc.n	8001638 <HAL_ADC_PollForConversion+0x60>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d112      	bne.n	800165e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10b      	bne.n	800165e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	f043 0204 	orr.w	r2, r3, #4
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e047      	b.n	80016ee <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0d6      	beq.n	800161a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fc3d 	bl	8000efc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01c      	beq.n	80016c2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7e5b      	ldrb	r3, [r3, #25]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d118      	bne.n	80016c2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b08      	cmp	r3, #8
 800169c:	d111      	bne.n	80016c2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d105      	bne.n	80016c2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d104      	bne.n	80016da <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2208      	movs	r2, #8
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e008      	b.n	80016ec <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	220c      	movs	r2, #12
 80016ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b0b6      	sub	sp, #216	; 0xd8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x22>
 800172e:	2302      	movs	r3, #2
 8001730:	e3d3      	b.n	8001eda <HAL_ADC_ConfigChannel+0x7ca>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fd2e 	bl	80011a0 <LL_ADC_REG_IsConversionOngoing>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 83b8 	bne.w	8001ebc <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b05      	cmp	r3, #5
 8001752:	d824      	bhi.n	800179e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	3b02      	subs	r3, #2
 800175a:	2b03      	cmp	r3, #3
 800175c:	d81b      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x86>
 800175e:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <HAL_ADC_ConfigChannel+0x54>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	08001775 	.word	0x08001775
 8001768:	0800177d 	.word	0x0800177d
 800176c:	08001785 	.word	0x08001785
 8001770:	0800178d 	.word	0x0800178d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	220c      	movs	r2, #12
 8001778:	605a      	str	r2, [r3, #4]
          break;
 800177a:	e010      	b.n	800179e <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2212      	movs	r2, #18
 8001780:	605a      	str	r2, [r3, #4]
          break;
 8001782:	e00c      	b.n	800179e <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2218      	movs	r2, #24
 8001788:	605a      	str	r2, [r3, #4]
          break;
 800178a:	e008      	b.n	800179e <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001792:	605a      	str	r2, [r3, #4]
          break;
 8001794:	e003      	b.n	800179e <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2206      	movs	r2, #6
 800179a:	605a      	str	r2, [r3, #4]
          break;
 800179c:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	f7ff fbb9 	bl	8000f22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fcf3 	bl	80011a0 <LL_ADC_REG_IsConversionOngoing>
 80017ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fd13 	bl	80011ee <LL_ADC_INJ_IsConversionOngoing>
 80017c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f040 81c1 	bne.w	8001b58 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 81bc 	bne.w	8001b58 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017e8:	d10f      	bne.n	800180a <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff fbc0 	bl	8000f7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fb67 	bl	8000ed6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001808:	e00e      	b.n	8001828 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6819      	ldr	r1, [r3, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	461a      	mov	r2, r3
 8001818:	f7ff fbaf 	bl	8000f7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fb57 	bl	8000ed6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	08db      	lsrs	r3, r3, #3
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b04      	cmp	r3, #4
 8001848:	d00a      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	6919      	ldr	r1, [r3, #16]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800185a:	f7ff fae7 	bl	8000e2c <LL_ADC_SetOffset>
 800185e:	e17b      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb04 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10a      	bne.n	800188c <HAL_ADC_ConfigChannel+0x17c>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff faf9 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	0e9b      	lsrs	r3, r3, #26
 8001886:	f003 021f 	and.w	r2, r3, #31
 800188a:	e01e      	b.n	80018ca <HAL_ADC_ConfigChannel+0x1ba>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff faee 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80018ba:	2320      	movs	r3, #32
 80018bc:	e004      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80018be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d105      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x1d2>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	0e9b      	lsrs	r3, r3, #26
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	e018      	b.n	8001914 <HAL_ADC_ConfigChannel+0x204>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 8001906:	2320      	movs	r3, #32
 8001908:	e004      	b.n	8001914 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 800190a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001914:	429a      	cmp	r2, r3
 8001916:	d106      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fabd 	bl	8000ea0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2101      	movs	r1, #1
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff faa1 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10a      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x242>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fa96 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	0e9b      	lsrs	r3, r3, #26
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	e01e      	b.n	8001990 <HAL_ADC_ConfigChannel+0x280>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fa8b 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001970:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8001980:	2320      	movs	r3, #32
 8001982:	e004      	b.n	800198e <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8001984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x298>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	e018      	b.n	80019da <HAL_ADC_ConfigChannel+0x2ca>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80019cc:	2320      	movs	r3, #32
 80019ce:	e004      	b.n	80019da <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80019d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019da:	429a      	cmp	r2, r3
 80019dc:	d106      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	2101      	movs	r1, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fa5a 	bl	8000ea0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2102      	movs	r1, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fa3e 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10a      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x308>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2102      	movs	r1, #2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fa33 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	0e9b      	lsrs	r3, r3, #26
 8001a12:	f003 021f 	and.w	r2, r3, #31
 8001a16:	e01e      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x346>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fa28 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8001a46:	2320      	movs	r3, #32
 8001a48:	e004      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8001a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x35e>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	e016      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x38c>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8001a8e:	2320      	movs	r3, #32
 8001a90:	e004      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 8001a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d106      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f9f9 	bl	8000ea0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2103      	movs	r1, #3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f9dd 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10a      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x3ca>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2103      	movs	r1, #3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f9d2 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	0e9b      	lsrs	r3, r3, #26
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	e017      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x3fa>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2103      	movs	r1, #3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f9c7 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001af4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8001afc:	2320      	movs	r3, #32
 8001afe:	e003      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8001b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x412>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0e9b      	lsrs	r3, r3, #26
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	e011      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x436>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e003      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8001b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d106      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2103      	movs	r1, #3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f9a4 	bl	8000ea0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fad1 	bl	8001104 <LL_ADC_IsEnabled>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f040 813f 	bne.w	8001de8 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	461a      	mov	r2, r3
 8001b78:	f7ff fa2a 	bl	8000fd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4a8e      	ldr	r2, [pc, #568]	; (8001dbc <HAL_ADC_ConfigChannel+0x6ac>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	f040 8130 	bne.w	8001de8 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x4a0>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	e019      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x4d4>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bc0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	e003      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8001bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2b09      	cmp	r3, #9
 8001bdc:	bf94      	ite	ls
 8001bde:	2301      	movls	r3, #1
 8001be0:	2300      	movhi	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d079      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x4f4>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0e9b      	lsrs	r3, r3, #26
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	069b      	lsls	r3, r3, #26
 8001bfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c02:	e015      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x520>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c14:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	e003      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8001c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	069b      	lsls	r3, r3, #26
 8001c2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x540>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0e9b      	lsrs	r3, r3, #26
 8001c42:	3301      	adds	r3, #1
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	e017      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x570>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	e003      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8001c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	ea42 0103 	orr.w	r1, r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x596>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	3301      	adds	r3, #1
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	051b      	lsls	r3, r3, #20
 8001ca4:	e018      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x5c8>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	e003      	b.n	8001cca <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	e080      	b.n	8001dde <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d107      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x5e8>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	3301      	adds	r3, #1
 8001cf0:	069b      	lsls	r3, r3, #26
 8001cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf6:	e015      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x614>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8001d10:	2320      	movs	r3, #32
 8001d12:	e003      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8001d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	069b      	lsls	r3, r3, #26
 8001d20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x634>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0e9b      	lsrs	r3, r3, #26
 8001d36:	3301      	adds	r3, #1
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	e017      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x664>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	61fb      	str	r3, [r7, #28]
  return result;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e003      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x690>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0e9b      	lsrs	r3, r3, #26
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	3b1e      	subs	r3, #30
 8001d98:	051b      	lsls	r3, r3, #20
 8001d9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	e01d      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x6cc>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	613b      	str	r3, [r7, #16]
  return result;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e005      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x6b8>
 8001dbc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f003 021f 	and.w	r2, r3, #31
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b1e      	subs	r3, #30
 8001dd6:	051b      	lsls	r3, r3, #20
 8001dd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	6892      	ldr	r2, [r2, #8]
 8001de2:	4619      	mov	r1, r3
 8001de4:	f7ff f8c9 	bl	8000f7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d06c      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df4:	483c      	ldr	r0, [pc, #240]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001df6:	f7ff f80b 	bl	8000e10 <LL_ADC_GetCommonPathInternalCh>
 8001dfa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a3a      	ldr	r2, [pc, #232]	; (8001eec <HAL_ADC_ConfigChannel+0x7dc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d127      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d121      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a35      	ldr	r2, [pc, #212]	; (8001ef0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d157      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e26:	4619      	mov	r1, r3
 8001e28:	482f      	ldr	r0, [pc, #188]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e2a:	f7fe ffde 	bl	8000dea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_ADC_ConfigChannel+0x7e4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	4a30      	ldr	r2, [pc, #192]	; (8001ef8 <HAL_ADC_ConfigChannel+0x7e8>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e48:	e002      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f9      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e56:	e03a      	b.n	8001ece <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <HAL_ADC_ConfigChannel+0x7ec>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d113      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x77a>
 8001e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d12a      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e80:	4619      	mov	r1, r3
 8001e82:	4819      	ldr	r0, [pc, #100]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e84:	f7fe ffb1 	bl	8000dea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e88:	e021      	b.n	8001ece <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_ADC_ConfigChannel+0x7f0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d11c      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d116      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d111      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001eb6:	f7fe ff98 	bl	8000dea <LL_ADC_SetCommonPathInternalCh>
 8001eba:	e008      	b.n	8001ece <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ed6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	37d8      	adds	r7, #216	; 0xd8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	80080000 	.word	0x80080000
 8001ee8:	50040300 	.word	0x50040300
 8001eec:	c7520000 	.word	0xc7520000
 8001ef0:	50040000 	.word	0x50040000
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	053e2d63 	.word	0x053e2d63
 8001efc:	cb840000 	.word	0xcb840000
 8001f00:	80000001 	.word	0x80000001

08001f04 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f940 	bl	80011a0 <LL_ADC_REG_IsConversionOngoing>
 8001f20:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff f961 	bl	80011ee <LL_ADC_INJ_IsConversionOngoing>
 8001f2c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d103      	bne.n	8001f3c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8098 	beq.w	800206c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d02a      	beq.n	8001fa0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7e5b      	ldrb	r3, [r3, #25]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d126      	bne.n	8001fa0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7e1b      	ldrb	r3, [r3, #24]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d122      	bne.n	8001fa0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f5e:	e014      	b.n	8001f8a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	4a45      	ldr	r2, [pc, #276]	; (8002078 <ADC_ConversionStop+0x174>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d90d      	bls.n	8001f84 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f043 0210 	orr.w	r2, r3, #16
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e074      	b.n	800206e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3301      	adds	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d1e3      	bne.n	8001f60 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2240      	movs	r2, #64	; 0x40
 8001f9e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d014      	beq.n	8001fd0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f8f8 	bl	80011a0 <LL_ADC_REG_IsConversionOngoing>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00c      	beq.n	8001fd0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff f8b5 	bl	800112a <LL_ADC_IsDisableOngoing>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d104      	bne.n	8001fd0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f8d4 	bl	8001178 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d014      	beq.n	8002000 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f907 	bl	80011ee <LL_ADC_INJ_IsConversionOngoing>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f89d 	bl	800112a <LL_ADC_IsDisableOngoing>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d104      	bne.n	8002000 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff f8e3 	bl	80011c6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d005      	beq.n	8002012 <ADC_ConversionStop+0x10e>
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d105      	bne.n	8002018 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800200c:	230c      	movs	r3, #12
 800200e:	617b      	str	r3, [r7, #20]
        break;
 8002010:	e005      	b.n	800201e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002012:	2308      	movs	r3, #8
 8002014:	617b      	str	r3, [r7, #20]
        break;
 8002016:	e002      	b.n	800201e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002018:	2304      	movs	r3, #4
 800201a:	617b      	str	r3, [r7, #20]
        break;
 800201c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800201e:	f7fe fea1 	bl	8000d64 <HAL_GetTick>
 8002022:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002024:	e01b      	b.n	800205e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002026:	f7fe fe9d 	bl	8000d64 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b05      	cmp	r3, #5
 8002032:	d914      	bls.n	800205e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00d      	beq.n	800205e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e007      	b.n	800206e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1dc      	bne.n	8002026 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	a33fffff 	.word	0xa33fffff

0800207c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff f83b 	bl	8001104 <LL_ADC_IsEnabled>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d14d      	bne.n	8002130 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <ADC_Enable+0xc0>)
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00d      	beq.n	80020be <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	f043 0210 	orr.w	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e039      	b.n	8002132 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fff6 	bl	80010b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020c8:	f7fe fe4c 	bl	8000d64 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020ce:	e028      	b.n	8002122 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f815 	bl	8001104 <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d104      	bne.n	80020ea <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe ffe5 	bl	80010b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020ea:	f7fe fe3b 	bl	8000d64 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d914      	bls.n	8002122 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d00d      	beq.n	8002122 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f043 0210 	orr.w	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	f043 0201 	orr.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e007      	b.n	8002132 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d1cf      	bne.n	80020d0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	8000003f 	.word	0x8000003f

08002140 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe ffec 	bl	800112a <LL_ADC_IsDisableOngoing>
 8002152:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe ffd3 	bl	8001104 <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d047      	beq.n	80021f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d144      	bne.n	80021f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030d 	and.w	r3, r3, #13
 8002174:	2b01      	cmp	r3, #1
 8002176:	d10c      	bne.n	8002192 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe ffad 	bl	80010dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2203      	movs	r2, #3
 8002188:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800218a:	f7fe fdeb 	bl	8000d64 <HAL_GetTick>
 800218e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002190:	e029      	b.n	80021e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f043 0210 	orr.w	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	f043 0201 	orr.w	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e023      	b.n	80021f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021ae:	f7fe fdd9 	bl	8000d64 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d914      	bls.n	80021e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f043 0210 	orr.w	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	f043 0201 	orr.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e007      	b.n	80021f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1dc      	bne.n	80021ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db0a      	blt.n	800228e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	490c      	ldr	r1, [pc, #48]	; (80022b0 <__NVIC_SetPriority+0x4c>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800228c:	e00a      	b.n	80022a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4908      	ldr	r1, [pc, #32]	; (80022b4 <__NVIC_SetPriority+0x50>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3b04      	subs	r3, #4
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	761a      	strb	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f1c3 0307 	rsb	r3, r3, #7
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	bf28      	it	cs
 80022d6:	2304      	movcs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3304      	adds	r3, #4
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d902      	bls.n	80022e8 <NVIC_EncodePriority+0x30>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b03      	subs	r3, #3
 80022e6:	e000      	b.n	80022ea <NVIC_EncodePriority+0x32>
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002300:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43d9      	mvns	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	4313      	orrs	r3, r2
         );
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002330:	d301      	bcc.n	8002336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002332:	2301      	movs	r3, #1
 8002334:	e00f      	b.n	8002356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <SysTick_Config+0x40>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233e:	210f      	movs	r1, #15
 8002340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002344:	f7ff ff8e 	bl	8002264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <SysTick_Config+0x40>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <SysTick_Config+0x40>)
 8002350:	2207      	movs	r2, #7
 8002352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	e000e010 	.word	0xe000e010

08002364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff47 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b086      	sub	sp, #24
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800238c:	f7ff ff5c 	bl	8002248 <__NVIC_GetPriorityGrouping>
 8002390:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f7ff ff8e 	bl	80022b8 <NVIC_EncodePriority>
 800239c:	4602      	mov	r2, r0
 800239e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff5d 	bl	8002264 <__NVIC_SetPriority>
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffb0 	bl	8002320 <SysTick_Config>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023da:	e166      	b.n	80026aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8158 	beq.w	80026a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d00b      	beq.n	8002414 <HAL_GPIO_Init+0x48>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d007      	beq.n	8002414 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002408:	2b11      	cmp	r3, #17
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b12      	cmp	r3, #18
 8002412:	d130      	bne.n	8002476 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800244a:	2201      	movs	r2, #1
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 0201 	and.w	r2, r3, #1
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0xea>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b12      	cmp	r3, #18
 80024b4:	d123      	bne.n	80024fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	08da      	lsrs	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3208      	adds	r2, #8
 80024be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	6939      	ldr	r1, [r7, #16]
 80024fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0203 	and.w	r2, r3, #3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80b2 	beq.w	80026a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_GPIO_Init+0x2fc>)
 8002542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002544:	4a60      	ldr	r2, [pc, #384]	; (80026c8 <HAL_GPIO_Init+0x2fc>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6613      	str	r3, [r2, #96]	; 0x60
 800254c:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <HAL_GPIO_Init+0x2fc>)
 800254e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002558:	4a5c      	ldr	r2, [pc, #368]	; (80026cc <HAL_GPIO_Init+0x300>)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	3302      	adds	r3, #2
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002582:	d02b      	beq.n	80025dc <HAL_GPIO_Init+0x210>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_GPIO_Init+0x304>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d025      	beq.n	80025d8 <HAL_GPIO_Init+0x20c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a51      	ldr	r2, [pc, #324]	; (80026d4 <HAL_GPIO_Init+0x308>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d01f      	beq.n	80025d4 <HAL_GPIO_Init+0x208>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a50      	ldr	r2, [pc, #320]	; (80026d8 <HAL_GPIO_Init+0x30c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d019      	beq.n	80025d0 <HAL_GPIO_Init+0x204>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a4f      	ldr	r2, [pc, #316]	; (80026dc <HAL_GPIO_Init+0x310>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d013      	beq.n	80025cc <HAL_GPIO_Init+0x200>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a4e      	ldr	r2, [pc, #312]	; (80026e0 <HAL_GPIO_Init+0x314>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00d      	beq.n	80025c8 <HAL_GPIO_Init+0x1fc>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a4d      	ldr	r2, [pc, #308]	; (80026e4 <HAL_GPIO_Init+0x318>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d007      	beq.n	80025c4 <HAL_GPIO_Init+0x1f8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a4c      	ldr	r2, [pc, #304]	; (80026e8 <HAL_GPIO_Init+0x31c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_GPIO_Init+0x1f4>
 80025bc:	2307      	movs	r3, #7
 80025be:	e00e      	b.n	80025de <HAL_GPIO_Init+0x212>
 80025c0:	2308      	movs	r3, #8
 80025c2:	e00c      	b.n	80025de <HAL_GPIO_Init+0x212>
 80025c4:	2306      	movs	r3, #6
 80025c6:	e00a      	b.n	80025de <HAL_GPIO_Init+0x212>
 80025c8:	2305      	movs	r3, #5
 80025ca:	e008      	b.n	80025de <HAL_GPIO_Init+0x212>
 80025cc:	2304      	movs	r3, #4
 80025ce:	e006      	b.n	80025de <HAL_GPIO_Init+0x212>
 80025d0:	2303      	movs	r3, #3
 80025d2:	e004      	b.n	80025de <HAL_GPIO_Init+0x212>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e002      	b.n	80025de <HAL_GPIO_Init+0x212>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_GPIO_Init+0x212>
 80025dc:	2300      	movs	r3, #0
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	f002 0203 	and.w	r2, r2, #3
 80025e4:	0092      	lsls	r2, r2, #2
 80025e6:	4093      	lsls	r3, r2
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ee:	4937      	ldr	r1, [pc, #220]	; (80026cc <HAL_GPIO_Init+0x300>)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025fc:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_GPIO_Init+0x320>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002620:	4a32      	ldr	r2, [pc, #200]	; (80026ec <HAL_GPIO_Init+0x320>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002626:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_GPIO_Init+0x320>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800264a:	4a28      	ldr	r2, [pc, #160]	; (80026ec <HAL_GPIO_Init+0x320>)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_GPIO_Init+0x320>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	43db      	mvns	r3, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002674:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <HAL_GPIO_Init+0x320>)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <HAL_GPIO_Init+0x320>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_GPIO_Init+0x320>)
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3301      	adds	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f47f ae91 	bne.w	80023dc <HAL_GPIO_Init+0x10>
  }
}
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40010000 	.word	0x40010000
 80026d0:	48000400 	.word	0x48000400
 80026d4:	48000800 	.word	0x48000800
 80026d8:	48000c00 	.word	0x48000c00
 80026dc:	48001000 	.word	0x48001000
 80026e0:	48001400 	.word	0x48001400
 80026e4:	48001800 	.word	0x48001800
 80026e8:	48001c00 	.word	0x48001c00
 80026ec:	40010400 	.word	0x40010400

080026f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_PWREx_GetVoltageRange+0x3c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002700:	d102      	bne.n	8002708 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002706:	e00b      	b.n	8002720 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <HAL_PWREx_GetVoltageRange+0x3c>)
 800270a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002716:	d102      	bne.n	800271e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800271c:	e000      	b.n	8002720 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800271e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40007000 	.word	0x40007000

08002730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d141      	bne.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800273e:	4b4b      	ldr	r3, [pc, #300]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d131      	bne.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800274c:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800274e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002752:	4a46      	ldr	r2, [pc, #280]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002764:	4a41      	ldr	r2, [pc, #260]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800276c:	4b40      	ldr	r3, [pc, #256]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2232      	movs	r2, #50	; 0x32
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	4a3f      	ldr	r2, [pc, #252]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	0c9b      	lsrs	r3, r3, #18
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002782:	e002      	b.n	800278a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3b01      	subs	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278a:	4b38      	ldr	r3, [pc, #224]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002796:	d102      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f2      	bne.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800279e:	4b33      	ldr	r3, [pc, #204]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d158      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e057      	b.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027b0:	4b2e      	ldr	r3, [pc, #184]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b6:	4a2d      	ldr	r2, [pc, #180]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027c0:	e04d      	b.n	800285e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c8:	d141      	bne.n	800284e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ca:	4b28      	ldr	r3, [pc, #160]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d131      	bne.n	800283c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027d8:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027de:	4a23      	ldr	r2, [pc, #140]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027e8:	4b20      	ldr	r3, [pc, #128]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027f0:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2232      	movs	r2, #50	; 0x32
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	0c9b      	lsrs	r3, r3, #18
 800280a:	3301      	adds	r3, #1
 800280c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800280e:	e002      	b.n	8002816 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3b01      	subs	r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002822:	d102      	bne.n	800282a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f2      	bne.n	8002810 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002836:	d112      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e011      	b.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800283e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800284c:	e007      	b.n	800285e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800285c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40007000 	.word	0x40007000
 8002870:	20000000 	.word	0x20000000
 8002874:	431bde83 	.word	0x431bde83

08002878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f000 bc16 	b.w	80030b8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288c:	4b96      	ldr	r3, [pc, #600]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002896:	4b94      	ldr	r3, [pc, #592]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80e4 	beq.w	8002a76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4c>
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	f040 808b 	bne.w	80029d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 8087 	bne.w	80029d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028c4:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_OscConfig+0x64>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e3ed      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1a      	ldr	r2, [r3, #32]
 80028e0:	4b81      	ldr	r3, [pc, #516]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_RCC_OscConfig+0x7e>
 80028ec:	4b7e      	ldr	r3, [pc, #504]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f4:	e005      	b.n	8002902 <HAL_RCC_OscConfig+0x8a>
 80028f6:	4b7c      	ldr	r3, [pc, #496]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 80028f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002902:	4293      	cmp	r3, r2
 8002904:	d223      	bcs.n	800294e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fdca 	bl	80034a4 <RCC_SetFlashLatencyFromMSIRange>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e3ce      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800291a:	4b73      	ldr	r3, [pc, #460]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a72      	ldr	r2, [pc, #456]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002920:	f043 0308 	orr.w	r3, r3, #8
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	496d      	ldr	r1, [pc, #436]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002938:	4b6b      	ldr	r3, [pc, #428]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	4968      	ldr	r1, [pc, #416]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
 800294c:	e025      	b.n	800299a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002954:	f043 0308 	orr.w	r3, r3, #8
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4960      	ldr	r1, [pc, #384]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800296c:	4b5e      	ldr	r3, [pc, #376]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	495b      	ldr	r1, [pc, #364]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fd8a 	bl	80034a4 <RCC_SetFlashLatencyFromMSIRange>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e38e      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800299a:	f000 fcbf 	bl	800331c <HAL_RCC_GetSysClockFreq>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	4950      	ldr	r1, [pc, #320]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80029ac:	5ccb      	ldrb	r3, [r1, r3]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	4a4e      	ldr	r2, [pc, #312]	; (8002af0 <HAL_RCC_OscConfig+0x278>)
 80029b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029ba:	4b4e      	ldr	r3, [pc, #312]	; (8002af4 <HAL_RCC_OscConfig+0x27c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f980 	bl	8000cc4 <HAL_InitTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d052      	beq.n	8002a74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	e372      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d032      	beq.n	8002a40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029da:	4b43      	ldr	r3, [pc, #268]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a42      	ldr	r2, [pc, #264]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029e6:	f7fe f9bd 	bl	8000d64 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ee:	f7fe f9b9 	bl	8000d64 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e35b      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a00:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a0c:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a35      	ldr	r2, [pc, #212]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a12:	f043 0308 	orr.w	r3, r3, #8
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b33      	ldr	r3, [pc, #204]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4930      	ldr	r1, [pc, #192]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	492b      	ldr	r1, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
 8002a3e:	e01a      	b.n	8002a76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a40:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe f98a 	bl	8000d64 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a54:	f7fe f986 	bl	8000d64 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e328      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x1dc>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d073      	beq.n	8002b6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x21c>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d10e      	bne.n	8002aac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d063      	beq.n	8002b68 <HAL_RCC_OscConfig+0x2f0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d15f      	bne.n	8002b68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e305      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e025      	b.n	8002b10 <HAL_RCC_OscConfig+0x298>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d114      	bne.n	8002af8 <HAL_RCC_OscConfig+0x280>
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a02      	ldr	r2, [pc, #8]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e013      	b.n	8002b10 <HAL_RCC_OscConfig+0x298>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08005690 	.word	0x08005690
 8002af0:	20000000 	.word	0x20000000
 8002af4:	20000004 	.word	0x20000004
 8002af8:	4ba0      	ldr	r3, [pc, #640]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a9f      	ldr	r2, [pc, #636]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b9d      	ldr	r3, [pc, #628]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a9c      	ldr	r2, [pc, #624]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe f924 	bl	8000d64 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe f920 	bl	8000d64 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e2c2      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b32:	4b92      	ldr	r3, [pc, #584]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x2a8>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe f910 	bl	8000d64 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe f90c 	bl	8000d64 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e2ae      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5a:	4b88      	ldr	r3, [pc, #544]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2d0>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d060      	beq.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_OscConfig+0x310>
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d119      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d116      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b88:	4b7c      	ldr	r3, [pc, #496]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x328>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e28b      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b76      	ldr	r3, [pc, #472]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	4973      	ldr	r1, [pc, #460]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bb4:	e040      	b.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d023      	beq.n	8002c06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbe:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6e      	ldr	r2, [pc, #440]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe f8cb 	bl	8000d64 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fe f8c7 	bl	8000d64 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e269      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be4:	4b65      	ldr	r3, [pc, #404]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b62      	ldr	r3, [pc, #392]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	495f      	ldr	r1, [pc, #380]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
 8002c04:	e018      	b.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c06:	4b5d      	ldr	r3, [pc, #372]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a5c      	ldr	r2, [pc, #368]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7fe f8a7 	bl	8000d64 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7fe f8a3 	bl	8000d64 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e245      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f0      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d03c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01c      	beq.n	8002c86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c4c:	4b4b      	ldr	r3, [pc, #300]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c52:	4a4a      	ldr	r2, [pc, #296]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe f882 	bl	8000d64 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe f87e 	bl	8000d64 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e220      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ef      	beq.n	8002c64 <HAL_RCC_OscConfig+0x3ec>
 8002c84:	e01b      	b.n	8002cbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8c:	4a3b      	ldr	r2, [pc, #236]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fe f865 	bl	8000d64 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9e:	f7fe f861 	bl	8000d64 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e203      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb0:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1ef      	bne.n	8002c9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80a6 	beq.w	8002e18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10d      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_RCC_OscConfig+0x508>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d118      	bne.n	8002d36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d04:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_RCC_OscConfig+0x508>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <HAL_RCC_OscConfig+0x508>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d10:	f7fe f828 	bl	8000d64 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fe f824 	bl	8000d64 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1c6      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_RCC_OscConfig+0x508>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d108      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4d8>
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d4e:	e029      	b.n	8002da4 <HAL_RCC_OscConfig+0x52c>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d115      	bne.n	8002d84 <HAL_RCC_OscConfig+0x50c>
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <HAL_RCC_OscConfig+0x504>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x52c>
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40007000 	.word	0x40007000
 8002d84:	4b9d      	ldr	r3, [pc, #628]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	4a9c      	ldr	r2, [pc, #624]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002d8c:	f023 0301 	bic.w	r3, r3, #1
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d94:	4b99      	ldr	r3, [pc, #612]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	4a98      	ldr	r2, [pc, #608]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d016      	beq.n	8002dda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fd ffda 	bl	8000d64 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fd ffd6 	bl	8000d64 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e176      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dca:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ed      	beq.n	8002db4 <HAL_RCC_OscConfig+0x53c>
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7fd ffc3 	bl	8000d64 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fd ffbf 	bl	8000d64 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e15f      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002df8:	4b80      	ldr	r3, [pc, #512]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ed      	bne.n	8002de2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e06:	7ffb      	ldrb	r3, [r7, #31]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0c:	4b7b      	ldr	r3, [pc, #492]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	4a7a      	ldr	r2, [pc, #488]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d03c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01c      	beq.n	8002e66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e2c:	4b73      	ldr	r3, [pc, #460]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e32:	4a72      	ldr	r2, [pc, #456]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fd ff92 	bl	8000d64 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e44:	f7fd ff8e 	bl	8000d64 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e130      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e56:	4b69      	ldr	r3, [pc, #420]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ef      	beq.n	8002e44 <HAL_RCC_OscConfig+0x5cc>
 8002e64:	e01b      	b.n	8002e9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e66:	4b65      	ldr	r3, [pc, #404]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002e68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e6c:	4a63      	ldr	r2, [pc, #396]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fd ff75 	bl	8000d64 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e7e:	f7fd ff71 	bl	8000d64 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e113      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e90:	4b5a      	ldr	r3, [pc, #360]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1ef      	bne.n	8002e7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8107 	beq.w	80030b6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	f040 80cf 	bne.w	8003050 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002eb2:	4b52      	ldr	r3, [pc, #328]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0203 	and.w	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d12c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d123      	bne.n	8002f20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d11b      	bne.n	8002f20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d113      	bne.n	8002f20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	3b01      	subs	r3, #1
 8002f06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d109      	bne.n	8002f20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d071      	beq.n	8003004 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d068      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f26:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f32:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0ba      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f42:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2d      	ldr	r2, [pc, #180]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002f48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f4e:	f7fd ff09 	bl	8000d64 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fd ff05 	bl	8000d64 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0a7      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f68:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	4b21      	ldr	r3, [pc, #132]	; (8003000 <HAL_RCC_OscConfig+0x788>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f84:	3a01      	subs	r2, #1
 8002f86:	0112      	lsls	r2, r2, #4
 8002f88:	4311      	orrs	r1, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f8e:	0212      	lsls	r2, r2, #8
 8002f90:	4311      	orrs	r1, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f96:	0852      	lsrs	r2, r2, #1
 8002f98:	3a01      	subs	r2, #1
 8002f9a:	0552      	lsls	r2, r2, #21
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fa2:	0852      	lsrs	r2, r2, #1
 8002fa4:	3a01      	subs	r2, #1
 8002fa6:	0652      	lsls	r2, r2, #25
 8002fa8:	4311      	orrs	r1, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fae:	06d2      	lsls	r2, r2, #27
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	4912      	ldr	r1, [pc, #72]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0f      	ldr	r2, [pc, #60]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fc4:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fd0:	f7fd fec8 	bl	8000d64 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fd fec4 	bl	8000d64 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e066      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fea:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <HAL_RCC_OscConfig+0x784>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff6:	e05e      	b.n	80030b6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e05d      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003004:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d152      	bne.n	80030b6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800301c:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 8003022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003026:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003028:	f7fd fe9c 	bl	8000d64 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fd fe98 	bl	8000d64 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e03a      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003042:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x7b8>
 800304e:	e032      	b.n	80030b6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d02d      	beq.n	80030b2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 800305c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003060:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 8003074:	f023 0303 	bic.w	r3, r3, #3
 8003078:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 8003080:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003088:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fd fe6b 	bl	8000d64 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003092:	f7fd fe67 	bl	8000d64 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e009      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCC_OscConfig+0x848>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x81a>
 80030b0:	e001      	b.n	80030b6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e10f      	b.n	80032fc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b89      	ldr	r3, [pc, #548]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b86      	ldr	r3, [pc, #536]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	4984      	ldr	r1, [pc, #528]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b82      	ldr	r3, [pc, #520]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0f7      	b.n	80032fc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8089 	beq.w	800322c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d133      	bne.n	800318a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003122:	4b79      	ldr	r3, [pc, #484]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0e4      	b.n	80032fc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003132:	f000 fa11 	bl	8003558 <RCC_GetSysClockFreqFromPLLSource>
 8003136:	4603      	mov	r3, r0
 8003138:	4a74      	ldr	r2, [pc, #464]	; (800330c <HAL_RCC_ClockConfig+0x248>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d955      	bls.n	80031ea <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800313e:	4b72      	ldr	r3, [pc, #456]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800314a:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003152:	4a6d      	ldr	r2, [pc, #436]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003158:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	e044      	b.n	80031ea <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d03e      	beq.n	80031ea <HAL_RCC_ClockConfig+0x126>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d13a      	bne.n	80031ea <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003174:	4b64      	ldr	r3, [pc, #400]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800317c:	4a62      	ldr	r2, [pc, #392]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800317e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003182:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	e02f      	b.n	80031ea <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003192:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d115      	bne.n	80031ca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0ac      	b.n	80032fc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031aa:	4b57      	ldr	r3, [pc, #348]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e0a0      	b.n	80032fc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ba:	4b53      	ldr	r3, [pc, #332]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e098      	b.n	80032fc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80031ca:	f000 f8a7 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a4e      	ldr	r2, [pc, #312]	; (800330c <HAL_RCC_ClockConfig+0x248>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d909      	bls.n	80031ea <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031d6:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031de:	4a4a      	ldr	r2, [pc, #296]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f023 0203 	bic.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4944      	ldr	r1, [pc, #272]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fc:	f7fd fdb2 	bl	8000d64 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	e00a      	b.n	800321a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003204:	f7fd fdae 	bl	8000d64 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e070      	b.n	80032fc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 020c 	and.w	r2, r3, #12
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	429a      	cmp	r2, r3
 800322a:	d1eb      	bne.n	8003204 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b33      	ldr	r3, [pc, #204]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4930      	ldr	r1, [pc, #192]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
 800324a:	e008      	b.n	800325e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d105      	bne.n	800325e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	4a2c      	ldr	r2, [pc, #176]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800325c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800325e:	4b29      	ldr	r3, [pc, #164]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d210      	bcs.n	800328e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 020f 	bic.w	r2, r3, #15
 8003274:	4923      	ldr	r1, [pc, #140]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327c:	4b21      	ldr	r3, [pc, #132]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d001      	beq.n	800328e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e036      	b.n	80032fc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4918      	ldr	r1, [pc, #96]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4910      	ldr	r1, [pc, #64]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032cc:	f000 f826 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	490c      	ldr	r1, [pc, #48]	; (8003310 <HAL_RCC_ClockConfig+0x24c>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_RCC_ClockConfig+0x250>)
 80032ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x254>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd fce7 	bl	8000cc4 <HAL_InitTick>
 80032f6:	4603      	mov	r3, r0
 80032f8:	73fb      	strb	r3, [r7, #15]

  return status;
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40022000 	.word	0x40022000
 8003308:	40021000 	.word	0x40021000
 800330c:	04c4b400 	.word	0x04c4b400
 8003310:	08005690 	.word	0x08005690
 8003314:	20000000 	.word	0x20000000
 8003318:	20000004 	.word	0x20000004

0800331c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003334:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x34>
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d121      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d11e      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003350:	4b34      	ldr	r3, [pc, #208]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800335c:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	e005      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800336c:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003378:	4a2b      	ldr	r2, [pc, #172]	; (8003428 <HAL_RCC_GetSysClockFreq+0x10c>)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d102      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_RCC_GetSysClockFreq+0x110>)
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	e004      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <HAL_RCC_GetSysClockFreq+0x114>)
 80033a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d134      	bne.n	8003414 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033aa:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d003      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d003      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0xac>
 80033c0:	e005      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_RCC_GetSysClockFreq+0x110>)
 80033c4:	617b      	str	r3, [r7, #20]
      break;
 80033c6:	e005      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ca:	617b      	str	r3, [r7, #20]
      break;
 80033cc:	e002      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	617b      	str	r3, [r7, #20]
      break;
 80033d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d4:	4b13      	ldr	r3, [pc, #76]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	3301      	adds	r3, #1
 80033e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	fb03 f202 	mul.w	r2, r3, r2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_RCC_GetSysClockFreq+0x108>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	0e5b      	lsrs	r3, r3, #25
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	3301      	adds	r3, #1
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003414:	69bb      	ldr	r3, [r7, #24]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3724      	adds	r7, #36	; 0x24
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	080056a8 	.word	0x080056a8
 800342c:	00f42400 	.word	0x00f42400
 8003430:	007a1200 	.word	0x007a1200

08003434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_RCC_GetHCLKFreq+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000000 	.word	0x20000000

0800344c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003450:	f7ff fff0 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4904      	ldr	r1, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	080056a0 	.word	0x080056a0

08003478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800347c:	f7ff ffda 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	0adb      	lsrs	r3, r3, #11
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	4904      	ldr	r1, [pc, #16]	; (80034a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	080056a0 	.word	0x080056a0

080034a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034bc:	f7ff f918 	bl	80026f0 <HAL_PWREx_GetVoltageRange>
 80034c0:	6178      	str	r0, [r7, #20]
 80034c2:	e014      	b.n	80034ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b22      	ldr	r3, [pc, #136]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	4a21      	ldr	r2, [pc, #132]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
 80034d0:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034dc:	f7ff f908 	bl	80026f0 <HAL_PWREx_GetVoltageRange>
 80034e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	4a1a      	ldr	r2, [pc, #104]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f4:	d10b      	bne.n	800350e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d913      	bls.n	8003524 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2ba0      	cmp	r3, #160	; 0xa0
 8003500:	d902      	bls.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003502:	2302      	movs	r3, #2
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	e00d      	b.n	8003524 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003508:	2301      	movs	r3, #1
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	e00a      	b.n	8003524 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b7f      	cmp	r3, #127	; 0x7f
 8003512:	d902      	bls.n	800351a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003514:	2302      	movs	r3, #2
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	e004      	b.n	8003524 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b70      	cmp	r3, #112	; 0x70
 800351e:	d101      	bne.n	8003524 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003520:	2301      	movs	r3, #1
 8003522:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 020f 	bic.w	r2, r3, #15
 800352c:	4909      	ldr	r1, [pc, #36]	; (8003554 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d001      	beq.n	8003546 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021000 	.word	0x40021000
 8003554:	40022000 	.word	0x40022000

08003558 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003562:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d118      	bne.n	80035a0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800356e:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d107      	bne.n	800358a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800357a:	4b27      	ldr	r3, [pc, #156]	; (8003618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800357c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e005      	b.n	8003596 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003596:	4a21      	ldr	r2, [pc, #132]	; (800361c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d003      	beq.n	80035b8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d003      	beq.n	80035be <RCC_GetSysClockFreqFromPLLSource+0x66>
 80035b6:	e005      	b.n	80035c4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80035ba:	613b      	str	r3, [r7, #16]
    break;
 80035bc:	e005      	b.n	80035ca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80035c0:	613b      	str	r3, [r7, #16]
    break;
 80035c2:	e002      	b.n	80035ca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	613b      	str	r3, [r7, #16]
    break;
 80035c8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	3301      	adds	r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035d8:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	0a1b      	lsrs	r3, r3, #8
 80035de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	fb03 f202 	mul.w	r2, r3, r2
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035f0:	4b09      	ldr	r3, [pc, #36]	; (8003618 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	0e5b      	lsrs	r3, r3, #25
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	3301      	adds	r3, #1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800360a:	683b      	ldr	r3, [r7, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40021000 	.word	0x40021000
 800361c:	080056a8 	.word	0x080056a8
 8003620:	00f42400 	.word	0x00f42400
 8003624:	007a1200 	.word	0x007a1200

08003628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003630:	2300      	movs	r3, #0
 8003632:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003634:	2300      	movs	r3, #0
 8003636:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003640:	2b00      	cmp	r3, #0
 8003642:	d040      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d02a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d825      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003650:	2b60      	cmp	r3, #96	; 0x60
 8003652:	d026      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003654:	2b60      	cmp	r3, #96	; 0x60
 8003656:	d821      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	d006      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d81d      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003664:	2b20      	cmp	r3, #32
 8003666:	d010      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003668:	e018      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800366a:	4b89      	ldr	r3, [pc, #548]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a88      	ldr	r2, [pc, #544]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003676:	e015      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fb02 	bl	8003c88 <RCCEx_PLLSAI1_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003688:	e00c      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3320      	adds	r3, #32
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fbed 	bl	8003e70 <RCCEx_PLLSAI2_Config>
 8003696:	4603      	mov	r3, r0
 8003698:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	74fb      	strb	r3, [r7, #19]
      break;
 80036a0:	e000      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80036a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036aa:	4b79      	ldr	r3, [pc, #484]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036b0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b8:	4975      	ldr	r1, [pc, #468]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80036c0:	e001      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d047      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036da:	d030      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80036dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e0:	d82a      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80036e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036e6:	d02a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80036e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ec:	d824      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80036ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f2:	d008      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f8:	d81e      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80036fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003702:	d010      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003704:	e018      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003706:	4b62      	ldr	r3, [pc, #392]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4a61      	ldr	r2, [pc, #388]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003712:	e015      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fab4 	bl	8003c88 <RCCEx_PLLSAI1_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003724:	e00c      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3320      	adds	r3, #32
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fb9f 	bl	8003e70 <RCCEx_PLLSAI2_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003736:	e003      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	74fb      	strb	r3, [r7, #19]
      break;
 800373c:	e000      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800373e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10b      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003746:	4b52      	ldr	r3, [pc, #328]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003748:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800374c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	494e      	ldr	r1, [pc, #312]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800375c:	e001      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 809f 	beq.w	80038ae <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003770:	2300      	movs	r3, #0
 8003772:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003774:	4b46      	ldr	r3, [pc, #280]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003784:	2300      	movs	r3, #0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00d      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	4a40      	ldr	r2, [pc, #256]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	6593      	str	r3, [r2, #88]	; 0x58
 8003796:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a3a      	ldr	r2, [pc, #232]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037b2:	f7fd fad7 	bl	8000d64 <HAL_GetTick>
 80037b6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b8:	e009      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fd fad3 	bl	8000d64 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	74fb      	strb	r3, [r7, #19]
        break;
 80037cc:	e005      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037ce:	4b31      	ldr	r3, [pc, #196]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ef      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d15b      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037e0:	4b2b      	ldr	r3, [pc, #172]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01f      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d019      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800380a:	4b21      	ldr	r3, [pc, #132]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800381c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003820:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800382a:	4a19      	ldr	r2, [pc, #100]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d016      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd fa92 	bl	8000d64 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003842:	e00b      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003844:	f7fd fa8e 	bl	8000d64 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d902      	bls.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	74fb      	strb	r3, [r7, #19]
            break;
 800385a:	e006      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ec      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10c      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003880:	4903      	ldr	r1, [pc, #12]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003888:	e008      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	74bb      	strb	r3, [r7, #18]
 800388e:	e005      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003890:	40021000 	.word	0x40021000
 8003894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389c:	7c7b      	ldrb	r3, [r7, #17]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a2:	4ba0      	ldr	r3, [pc, #640]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	4a9f      	ldr	r2, [pc, #636]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ba:	4b9a      	ldr	r3, [pc, #616]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f023 0203 	bic.w	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	4996      	ldr	r1, [pc, #600]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038dc:	4b91      	ldr	r3, [pc, #580]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f023 020c 	bic.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	498e      	ldr	r1, [pc, #568]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038fe:	4b89      	ldr	r3, [pc, #548]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	4985      	ldr	r1, [pc, #532]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003920:	4b80      	ldr	r3, [pc, #512]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392e:	497d      	ldr	r1, [pc, #500]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003942:	4b78      	ldr	r3, [pc, #480]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003950:	4974      	ldr	r1, [pc, #464]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003964:	4b6f      	ldr	r3, [pc, #444]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003972:	496c      	ldr	r1, [pc, #432]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003986:	4b67      	ldr	r3, [pc, #412]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003994:	4963      	ldr	r1, [pc, #396]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039a8:	4b5e      	ldr	r3, [pc, #376]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039b6:	495b      	ldr	r1, [pc, #364]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ca:	4b56      	ldr	r3, [pc, #344]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	4952      	ldr	r1, [pc, #328]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ec:	4b4d      	ldr	r3, [pc, #308]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	494a      	ldr	r1, [pc, #296]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a0e:	4b45      	ldr	r3, [pc, #276]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	4941      	ldr	r1, [pc, #260]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a30:	4b3c      	ldr	r3, [pc, #240]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a36:	f023 0203 	bic.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	4939      	ldr	r1, [pc, #228]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d028      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a60:	4930      	ldr	r1, [pc, #192]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a70:	d106      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a72:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7c:	60d3      	str	r3, [r2, #12]
 8003a7e:	e011      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	2101      	movs	r1, #1
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f8f9 	bl	8003c88 <RCCEx_PLLSAI1_Config>
 8003a96:	4603      	mov	r3, r0
 8003a98:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a9a:	7cfb      	ldrb	r3, [r7, #19]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d04d      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab8:	d108      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003aba:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003aca:	e012      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003acc:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ad2:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ad8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003adc:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aea:	490e      	ldr	r1, [pc, #56]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003afa:	d106      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b06:	60d3      	str	r3, [r2, #12]
 8003b08:	e020      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b12:	d109      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b14:	4b03      	ldr	r3, [pc, #12]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a02      	ldr	r2, [pc, #8]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1e:	60d3      	str	r3, [r2, #12]
 8003b20:	e014      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2101      	movs	r1, #1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f8a5 	bl	8003c88 <RCCEx_PLLSAI1_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d028      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b58:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b66:	4947      	ldr	r1, [pc, #284]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b76:	d106      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b78:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a41      	ldr	r2, [pc, #260]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b82:	60d3      	str	r3, [r2, #12]
 8003b84:	e011      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b8e:	d10c      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f876 	bl	8003c88 <RCCEx_PLLSAI1_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba0:	7cfb      	ldrb	r3, [r7, #19]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01e      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bb6:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc6:	492f      	ldr	r1, [pc, #188]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	2102      	movs	r1, #2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f851 	bl	8003c88 <RCCEx_PLLSAI1_Config>
 8003be6:	4603      	mov	r3, r0
 8003be8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bea:	7cfb      	ldrb	r3, [r7, #19]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00b      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c06:	f023 0204 	bic.w	r2, r3, #4
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c10:	491c      	ldr	r1, [pc, #112]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c24:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c2a:	f023 0218 	bic.w	r2, r3, #24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	4913      	ldr	r1, [pc, #76]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d017      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c58:	490a      	ldr	r1, [pc, #40]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c78:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000

08003c88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c96:	4b72      	ldr	r3, [pc, #456]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00e      	beq.n	8003cc0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ca2:	4b6f      	ldr	r3, [pc, #444]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0203 	and.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d103      	bne.n	8003cba <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d142      	bne.n	8003d40 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
 8003cbe:	e03f      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d018      	beq.n	8003cfa <RCCEx_PLLSAI1_Config+0x72>
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d825      	bhi.n	8003d18 <RCCEx_PLLSAI1_Config+0x90>
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d002      	beq.n	8003cd6 <RCCEx_PLLSAI1_Config+0x4e>
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d009      	beq.n	8003ce8 <RCCEx_PLLSAI1_Config+0x60>
 8003cd4:	e020      	b.n	8003d18 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cd6:	4b62      	ldr	r3, [pc, #392]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d11d      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce6:	e01a      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce8:	4b5d      	ldr	r3, [pc, #372]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d116      	bne.n	8003d22 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf8:	e013      	b.n	8003d22 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cfa:	4b59      	ldr	r3, [pc, #356]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d06:	4b56      	ldr	r3, [pc, #344]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d16:	e006      	b.n	8003d26 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1c:	e004      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e002      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003d26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003d2e:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4949      	ldr	r1, [pc, #292]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 8086 	bne.w	8003e54 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d48:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a44      	ldr	r2, [pc, #272]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d54:	f7fd f806 	bl	8000d64 <HAL_GetTick>
 8003d58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d5a:	e009      	b.n	8003d70 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d5c:	f7fd f802 	bl	8000d64 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d902      	bls.n	8003d70 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d6e:	e005      	b.n	8003d7c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d70:	4b3b      	ldr	r3, [pc, #236]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ef      	bne.n	8003d5c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d168      	bne.n	8003e54 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d113      	bne.n	8003db0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d88:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	4b35      	ldr	r3, [pc, #212]	; (8003e64 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6892      	ldr	r2, [r2, #8]
 8003d94:	0211      	lsls	r1, r2, #8
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68d2      	ldr	r2, [r2, #12]
 8003d9a:	06d2      	lsls	r2, r2, #27
 8003d9c:	4311      	orrs	r1, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6852      	ldr	r2, [r2, #4]
 8003da2:	3a01      	subs	r2, #1
 8003da4:	0112      	lsls	r2, r2, #4
 8003da6:	430a      	orrs	r2, r1
 8003da8:	492d      	ldr	r1, [pc, #180]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	610b      	str	r3, [r1, #16]
 8003dae:	e02d      	b.n	8003e0c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d115      	bne.n	8003de2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db6:	4b2a      	ldr	r3, [pc, #168]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	4b2b      	ldr	r3, [pc, #172]	; (8003e68 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6892      	ldr	r2, [r2, #8]
 8003dc2:	0211      	lsls	r1, r2, #8
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6912      	ldr	r2, [r2, #16]
 8003dc8:	0852      	lsrs	r2, r2, #1
 8003dca:	3a01      	subs	r2, #1
 8003dcc:	0552      	lsls	r2, r2, #21
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6852      	ldr	r2, [r2, #4]
 8003dd4:	3a01      	subs	r2, #1
 8003dd6:	0112      	lsls	r2, r2, #4
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	4921      	ldr	r1, [pc, #132]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	610b      	str	r3, [r1, #16]
 8003de0:	e014      	b.n	8003e0c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003de2:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6892      	ldr	r2, [r2, #8]
 8003dee:	0211      	lsls	r1, r2, #8
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6952      	ldr	r2, [r2, #20]
 8003df4:	0852      	lsrs	r2, r2, #1
 8003df6:	3a01      	subs	r2, #1
 8003df8:	0652      	lsls	r2, r2, #25
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6852      	ldr	r2, [r2, #4]
 8003e00:	3a01      	subs	r2, #1
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	430a      	orrs	r2, r1
 8003e06:	4916      	ldr	r1, [pc, #88]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e0c:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e18:	f7fc ffa4 	bl	8000d64 <HAL_GetTick>
 8003e1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e1e:	e009      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e20:	f7fc ffa0 	bl	8000d64 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d902      	bls.n	8003e34 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	73fb      	strb	r3, [r7, #15]
          break;
 8003e32:	e005      	b.n	8003e40 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e34:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ef      	beq.n	8003e20 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	4904      	ldr	r1, [pc, #16]	; (8003e60 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	07ff800f 	.word	0x07ff800f
 8003e68:	ff9f800f 	.word	0xff9f800f
 8003e6c:	f9ff800f 	.word	0xf9ff800f

08003e70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e7e:	4b72      	ldr	r3, [pc, #456]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00e      	beq.n	8003ea8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e8a:	4b6f      	ldr	r3, [pc, #444]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0203 	and.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d103      	bne.n	8003ea2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d142      	bne.n	8003f28 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	e03f      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d018      	beq.n	8003ee2 <RCCEx_PLLSAI2_Config+0x72>
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d825      	bhi.n	8003f00 <RCCEx_PLLSAI2_Config+0x90>
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d002      	beq.n	8003ebe <RCCEx_PLLSAI2_Config+0x4e>
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d009      	beq.n	8003ed0 <RCCEx_PLLSAI2_Config+0x60>
 8003ebc:	e020      	b.n	8003f00 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ebe:	4b62      	ldr	r3, [pc, #392]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11d      	bne.n	8003f06 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ece:	e01a      	b.n	8003f06 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ed0:	4b5d      	ldr	r3, [pc, #372]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d116      	bne.n	8003f0a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee0:	e013      	b.n	8003f0a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ee2:	4b59      	ldr	r3, [pc, #356]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10f      	bne.n	8003f0e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eee:	4b56      	ldr	r3, [pc, #344]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003efe:	e006      	b.n	8003f0e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
      break;
 8003f04:	e004      	b.n	8003f10 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003f06:	bf00      	nop
 8003f08:	e002      	b.n	8003f10 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003f0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d108      	bne.n	8003f28 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003f16:	4b4c      	ldr	r3, [pc, #304]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f023 0203 	bic.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4949      	ldr	r1, [pc, #292]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f040 8086 	bne.w	800403c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f30:	4b45      	ldr	r3, [pc, #276]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a44      	ldr	r2, [pc, #272]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f3c:	f7fc ff12 	bl	8000d64 <HAL_GetTick>
 8003f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f42:	e009      	b.n	8003f58 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f44:	f7fc ff0e 	bl	8000d64 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d902      	bls.n	8003f58 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	73fb      	strb	r3, [r7, #15]
        break;
 8003f56:	e005      	b.n	8003f64 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f58:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ef      	bne.n	8003f44 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d168      	bne.n	800403c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d113      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f70:	4b35      	ldr	r3, [pc, #212]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	4b35      	ldr	r3, [pc, #212]	; (800404c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6892      	ldr	r2, [r2, #8]
 8003f7c:	0211      	lsls	r1, r2, #8
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68d2      	ldr	r2, [r2, #12]
 8003f82:	06d2      	lsls	r2, r2, #27
 8003f84:	4311      	orrs	r1, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6852      	ldr	r2, [r2, #4]
 8003f8a:	3a01      	subs	r2, #1
 8003f8c:	0112      	lsls	r2, r2, #4
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	492d      	ldr	r1, [pc, #180]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	614b      	str	r3, [r1, #20]
 8003f96:	e02d      	b.n	8003ff4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d115      	bne.n	8003fca <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6892      	ldr	r2, [r2, #8]
 8003faa:	0211      	lsls	r1, r2, #8
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6912      	ldr	r2, [r2, #16]
 8003fb0:	0852      	lsrs	r2, r2, #1
 8003fb2:	3a01      	subs	r2, #1
 8003fb4:	0552      	lsls	r2, r2, #21
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6852      	ldr	r2, [r2, #4]
 8003fbc:	3a01      	subs	r2, #1
 8003fbe:	0112      	lsls	r2, r2, #4
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	4921      	ldr	r1, [pc, #132]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	614b      	str	r3, [r1, #20]
 8003fc8:	e014      	b.n	8003ff4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	4b21      	ldr	r3, [pc, #132]	; (8004054 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6892      	ldr	r2, [r2, #8]
 8003fd6:	0211      	lsls	r1, r2, #8
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6952      	ldr	r2, [r2, #20]
 8003fdc:	0852      	lsrs	r2, r2, #1
 8003fde:	3a01      	subs	r2, #1
 8003fe0:	0652      	lsls	r2, r2, #25
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6852      	ldr	r2, [r2, #4]
 8003fe8:	3a01      	subs	r2, #1
 8003fea:	0112      	lsls	r2, r2, #4
 8003fec:	430a      	orrs	r2, r1
 8003fee:	4916      	ldr	r1, [pc, #88]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ff4:	4b14      	ldr	r3, [pc, #80]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fc feb0 	bl	8000d64 <HAL_GetTick>
 8004004:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004006:	e009      	b.n	800401c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004008:	f7fc feac 	bl	8000d64 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d902      	bls.n	800401c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	73fb      	strb	r3, [r7, #15]
          break;
 800401a:	e005      	b.n	8004028 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0ef      	beq.n	8004008 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	4904      	ldr	r1, [pc, #16]	; (8004048 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004038:	4313      	orrs	r3, r2
 800403a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800403c:	7bfb      	ldrb	r3, [r7, #15]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40021000 	.word	0x40021000
 800404c:	07ff800f 	.word	0x07ff800f
 8004050:	ff9f800f 	.word	0xff9f800f
 8004054:	f9ff800f 	.word	0xf9ff800f

08004058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e042      	b.n	80040f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fc fcab 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2224      	movs	r2, #36	; 0x24
 8004086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0201 	bic.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f8c4 	bl	8004228 <UART_SetConfig>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e022      	b.n	80040f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fbb4 	bl	8004820 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fc3b 	bl	8004964 <UART_CheckIdleState>
 80040ee:	4603      	mov	r3, r0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410e:	2b20      	cmp	r3, #32
 8004110:	f040 8084 	bne.w	800421c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_UART_Transmit+0x28>
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e07c      	b.n	800421e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_UART_Transmit+0x3a>
 800412e:	2302      	movs	r3, #2
 8004130:	e075      	b.n	800421e <HAL_UART_Transmit+0x126>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2221      	movs	r2, #33	; 0x21
 8004146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800414a:	f7fc fe0b 	bl	8000d64 <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004168:	d108      	bne.n	800417c <HAL_UART_Transmit+0x84>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d104      	bne.n	800417c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	e003      	b.n	8004184 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004180:	2300      	movs	r3, #0
 8004182:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800418c:	e02d      	b.n	80041ea <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	2180      	movs	r1, #128	; 0x80
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fc2e 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e03a      	b.n	800421e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	881a      	ldrh	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ba:	b292      	uxth	r2, r2
 80041bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	3302      	adds	r3, #2
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	e008      	b.n	80041d8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	781a      	ldrb	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	b292      	uxth	r2, r2
 80041d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3301      	adds	r3, #1
 80041d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1cb      	bne.n	800418e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2200      	movs	r2, #0
 80041fe:	2140      	movs	r1, #64	; 0x40
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fbfa 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e006      	b.n	800421e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	e000      	b.n	800421e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800421c:	2302      	movs	r3, #2
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800422c:	b08c      	sub	sp, #48	; 0x30
 800422e:	af00      	add	r7, sp, #0
 8004230:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	431a      	orrs	r2, r3
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	431a      	orrs	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	4313      	orrs	r3, r2
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4baa      	ldr	r3, [pc, #680]	; (8004500 <UART_SetConfig+0x2d8>)
 8004258:	4013      	ands	r3, r2
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004260:	430b      	orrs	r3, r1
 8004262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a9f      	ldr	r2, [pc, #636]	; (8004504 <UART_SetConfig+0x2dc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004290:	4313      	orrs	r3, r2
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800429e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	f023 010f 	bic.w	r1, r3, #15
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a90      	ldr	r2, [pc, #576]	; (8004508 <UART_SetConfig+0x2e0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d125      	bne.n	8004318 <UART_SetConfig+0xf0>
 80042cc:	4b8f      	ldr	r3, [pc, #572]	; (800450c <UART_SetConfig+0x2e4>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d81a      	bhi.n	8004310 <UART_SetConfig+0xe8>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0xb8>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	08004301 	.word	0x08004301
 80042e8:	080042f9 	.word	0x080042f9
 80042ec:	08004309 	.word	0x08004309
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042f6:	e116      	b.n	8004526 <UART_SetConfig+0x2fe>
 80042f8:	2302      	movs	r3, #2
 80042fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042fe:	e112      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004300:	2304      	movs	r3, #4
 8004302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004306:	e10e      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004308:	2308      	movs	r3, #8
 800430a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800430e:	e10a      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004310:	2310      	movs	r3, #16
 8004312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004316:	e106      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a7c      	ldr	r2, [pc, #496]	; (8004510 <UART_SetConfig+0x2e8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d138      	bne.n	8004394 <UART_SetConfig+0x16c>
 8004322:	4b7a      	ldr	r3, [pc, #488]	; (800450c <UART_SetConfig+0x2e4>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b0c      	cmp	r3, #12
 800432e:	d82d      	bhi.n	800438c <UART_SetConfig+0x164>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <UART_SetConfig+0x110>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	0800436d 	.word	0x0800436d
 800433c:	0800438d 	.word	0x0800438d
 8004340:	0800438d 	.word	0x0800438d
 8004344:	0800438d 	.word	0x0800438d
 8004348:	0800437d 	.word	0x0800437d
 800434c:	0800438d 	.word	0x0800438d
 8004350:	0800438d 	.word	0x0800438d
 8004354:	0800438d 	.word	0x0800438d
 8004358:	08004375 	.word	0x08004375
 800435c:	0800438d 	.word	0x0800438d
 8004360:	0800438d 	.word	0x0800438d
 8004364:	0800438d 	.word	0x0800438d
 8004368:	08004385 	.word	0x08004385
 800436c:	2300      	movs	r3, #0
 800436e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004372:	e0d8      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004374:	2302      	movs	r3, #2
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800437a:	e0d4      	b.n	8004526 <UART_SetConfig+0x2fe>
 800437c:	2304      	movs	r3, #4
 800437e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004382:	e0d0      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004384:	2308      	movs	r3, #8
 8004386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800438a:	e0cc      	b.n	8004526 <UART_SetConfig+0x2fe>
 800438c:	2310      	movs	r3, #16
 800438e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004392:	e0c8      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5e      	ldr	r2, [pc, #376]	; (8004514 <UART_SetConfig+0x2ec>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d125      	bne.n	80043ea <UART_SetConfig+0x1c2>
 800439e:	4b5b      	ldr	r3, [pc, #364]	; (800450c <UART_SetConfig+0x2e4>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d016      	beq.n	80043da <UART_SetConfig+0x1b2>
 80043ac:	2b30      	cmp	r3, #48	; 0x30
 80043ae:	d818      	bhi.n	80043e2 <UART_SetConfig+0x1ba>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d00a      	beq.n	80043ca <UART_SetConfig+0x1a2>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d814      	bhi.n	80043e2 <UART_SetConfig+0x1ba>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <UART_SetConfig+0x19a>
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d008      	beq.n	80043d2 <UART_SetConfig+0x1aa>
 80043c0:	e00f      	b.n	80043e2 <UART_SetConfig+0x1ba>
 80043c2:	2300      	movs	r3, #0
 80043c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043c8:	e0ad      	b.n	8004526 <UART_SetConfig+0x2fe>
 80043ca:	2302      	movs	r3, #2
 80043cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043d0:	e0a9      	b.n	8004526 <UART_SetConfig+0x2fe>
 80043d2:	2304      	movs	r3, #4
 80043d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043d8:	e0a5      	b.n	8004526 <UART_SetConfig+0x2fe>
 80043da:	2308      	movs	r3, #8
 80043dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e0:	e0a1      	b.n	8004526 <UART_SetConfig+0x2fe>
 80043e2:	2310      	movs	r3, #16
 80043e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e8:	e09d      	b.n	8004526 <UART_SetConfig+0x2fe>
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a4a      	ldr	r2, [pc, #296]	; (8004518 <UART_SetConfig+0x2f0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d125      	bne.n	8004440 <UART_SetConfig+0x218>
 80043f4:	4b45      	ldr	r3, [pc, #276]	; (800450c <UART_SetConfig+0x2e4>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004400:	d016      	beq.n	8004430 <UART_SetConfig+0x208>
 8004402:	2bc0      	cmp	r3, #192	; 0xc0
 8004404:	d818      	bhi.n	8004438 <UART_SetConfig+0x210>
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	d00a      	beq.n	8004420 <UART_SetConfig+0x1f8>
 800440a:	2b80      	cmp	r3, #128	; 0x80
 800440c:	d814      	bhi.n	8004438 <UART_SetConfig+0x210>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <UART_SetConfig+0x1f0>
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d008      	beq.n	8004428 <UART_SetConfig+0x200>
 8004416:	e00f      	b.n	8004438 <UART_SetConfig+0x210>
 8004418:	2300      	movs	r3, #0
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800441e:	e082      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004420:	2302      	movs	r3, #2
 8004422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004426:	e07e      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800442e:	e07a      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004436:	e076      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443e:	e072      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a35      	ldr	r2, [pc, #212]	; (800451c <UART_SetConfig+0x2f4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d12a      	bne.n	80044a0 <UART_SetConfig+0x278>
 800444a:	4b30      	ldr	r3, [pc, #192]	; (800450c <UART_SetConfig+0x2e4>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004458:	d01a      	beq.n	8004490 <UART_SetConfig+0x268>
 800445a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800445e:	d81b      	bhi.n	8004498 <UART_SetConfig+0x270>
 8004460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004464:	d00c      	beq.n	8004480 <UART_SetConfig+0x258>
 8004466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446a:	d815      	bhi.n	8004498 <UART_SetConfig+0x270>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <UART_SetConfig+0x250>
 8004470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004474:	d008      	beq.n	8004488 <UART_SetConfig+0x260>
 8004476:	e00f      	b.n	8004498 <UART_SetConfig+0x270>
 8004478:	2300      	movs	r3, #0
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800447e:	e052      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004480:	2302      	movs	r3, #2
 8004482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004486:	e04e      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800448e:	e04a      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004496:	e046      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449e:	e042      	b.n	8004526 <UART_SetConfig+0x2fe>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a17      	ldr	r2, [pc, #92]	; (8004504 <UART_SetConfig+0x2dc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d13a      	bne.n	8004520 <UART_SetConfig+0x2f8>
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <UART_SetConfig+0x2e4>)
 80044ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044b8:	d01a      	beq.n	80044f0 <UART_SetConfig+0x2c8>
 80044ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044be:	d81b      	bhi.n	80044f8 <UART_SetConfig+0x2d0>
 80044c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c4:	d00c      	beq.n	80044e0 <UART_SetConfig+0x2b8>
 80044c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ca:	d815      	bhi.n	80044f8 <UART_SetConfig+0x2d0>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <UART_SetConfig+0x2b0>
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d4:	d008      	beq.n	80044e8 <UART_SetConfig+0x2c0>
 80044d6:	e00f      	b.n	80044f8 <UART_SetConfig+0x2d0>
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044de:	e022      	b.n	8004526 <UART_SetConfig+0x2fe>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044e6:	e01e      	b.n	8004526 <UART_SetConfig+0x2fe>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ee:	e01a      	b.n	8004526 <UART_SetConfig+0x2fe>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f6:	e016      	b.n	8004526 <UART_SetConfig+0x2fe>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044fe:	e012      	b.n	8004526 <UART_SetConfig+0x2fe>
 8004500:	cfff69f3 	.word	0xcfff69f3
 8004504:	40008000 	.word	0x40008000
 8004508:	40013800 	.word	0x40013800
 800450c:	40021000 	.word	0x40021000
 8004510:	40004400 	.word	0x40004400
 8004514:	40004800 	.word	0x40004800
 8004518:	40004c00 	.word	0x40004c00
 800451c:	40005000 	.word	0x40005000
 8004520:	2310      	movs	r3, #16
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4aae      	ldr	r2, [pc, #696]	; (80047e4 <UART_SetConfig+0x5bc>)
 800452c:	4293      	cmp	r3, r2
 800452e:	f040 8097 	bne.w	8004660 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004536:	2b08      	cmp	r3, #8
 8004538:	d823      	bhi.n	8004582 <UART_SetConfig+0x35a>
 800453a:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART_SetConfig+0x318>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004565 	.word	0x08004565
 8004544:	08004583 	.word	0x08004583
 8004548:	0800456d 	.word	0x0800456d
 800454c:	08004583 	.word	0x08004583
 8004550:	08004573 	.word	0x08004573
 8004554:	08004583 	.word	0x08004583
 8004558:	08004583 	.word	0x08004583
 800455c:	08004583 	.word	0x08004583
 8004560:	0800457b 	.word	0x0800457b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004564:	f7fe ff72 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8004568:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800456a:	e010      	b.n	800458e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800456c:	4b9e      	ldr	r3, [pc, #632]	; (80047e8 <UART_SetConfig+0x5c0>)
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004570:	e00d      	b.n	800458e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004572:	f7fe fed3 	bl	800331c <HAL_RCC_GetSysClockFreq>
 8004576:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004578:	e009      	b.n	800458e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004580:	e005      	b.n	800458e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800458c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8130 	beq.w	80047f6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	4a94      	ldr	r2, [pc, #592]	; (80047ec <UART_SetConfig+0x5c4>)
 800459c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	4413      	add	r3, r2
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d305      	bcc.n	80045c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d903      	bls.n	80045ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045cc:	e113      	b.n	80047f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	2200      	movs	r2, #0
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	60fa      	str	r2, [r7, #12]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	4a84      	ldr	r2, [pc, #528]	; (80047ec <UART_SetConfig+0x5c4>)
 80045dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2200      	movs	r2, #0
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045f0:	f7fb fe5e 	bl	80002b0 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	020b      	lsls	r3, r1, #8
 8004606:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800460a:	0202      	lsls	r2, r0, #8
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	6849      	ldr	r1, [r1, #4]
 8004610:	0849      	lsrs	r1, r1, #1
 8004612:	2000      	movs	r0, #0
 8004614:	460c      	mov	r4, r1
 8004616:	4605      	mov	r5, r0
 8004618:	eb12 0804 	adds.w	r8, r2, r4
 800461c:	eb43 0905 	adc.w	r9, r3, r5
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	469a      	mov	sl, r3
 8004628:	4693      	mov	fp, r2
 800462a:	4652      	mov	r2, sl
 800462c:	465b      	mov	r3, fp
 800462e:	4640      	mov	r0, r8
 8004630:	4649      	mov	r1, r9
 8004632:	f7fb fe3d 	bl	80002b0 <__aeabi_uldivmod>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4613      	mov	r3, r2
 800463c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004644:	d308      	bcc.n	8004658 <UART_SetConfig+0x430>
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464c:	d204      	bcs.n	8004658 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a3a      	ldr	r2, [r7, #32]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e0ce      	b.n	80047f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800465e:	e0ca      	b.n	80047f6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004668:	d167      	bne.n	800473a <UART_SetConfig+0x512>
  {
    switch (clocksource)
 800466a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800466e:	2b08      	cmp	r3, #8
 8004670:	d827      	bhi.n	80046c2 <UART_SetConfig+0x49a>
 8004672:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <UART_SetConfig+0x450>)
 8004674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004678:	0800469d 	.word	0x0800469d
 800467c:	080046a5 	.word	0x080046a5
 8004680:	080046ad 	.word	0x080046ad
 8004684:	080046c3 	.word	0x080046c3
 8004688:	080046b3 	.word	0x080046b3
 800468c:	080046c3 	.word	0x080046c3
 8004690:	080046c3 	.word	0x080046c3
 8004694:	080046c3 	.word	0x080046c3
 8004698:	080046bb 	.word	0x080046bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800469c:	f7fe fed6 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 80046a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046a2:	e014      	b.n	80046ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a4:	f7fe fee8 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046aa:	e010      	b.n	80046ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046ac:	4b4e      	ldr	r3, [pc, #312]	; (80047e8 <UART_SetConfig+0x5c0>)
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046b0:	e00d      	b.n	80046ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046b2:	f7fe fe33 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80046b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046b8:	e009      	b.n	80046ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046c0:	e005      	b.n	80046ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80046cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8090 	beq.w	80047f6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	4a44      	ldr	r2, [pc, #272]	; (80047ec <UART_SetConfig+0x5c4>)
 80046dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80046e8:	005a      	lsls	r2, r3, #1
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	441a      	add	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2b0f      	cmp	r3, #15
 8004702:	d916      	bls.n	8004732 <UART_SetConfig+0x50a>
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470a:	d212      	bcs.n	8004732 <UART_SetConfig+0x50a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	b29b      	uxth	r3, r3
 8004710:	f023 030f 	bic.w	r3, r3, #15
 8004714:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	b29b      	uxth	r3, r3
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	b29a      	uxth	r2, r3
 8004722:	8bfb      	ldrh	r3, [r7, #30]
 8004724:	4313      	orrs	r3, r2
 8004726:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	8bfa      	ldrh	r2, [r7, #30]
 800472e:	60da      	str	r2, [r3, #12]
 8004730:	e061      	b.n	80047f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004738:	e05d      	b.n	80047f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800473a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800473e:	2b08      	cmp	r3, #8
 8004740:	d827      	bhi.n	8004792 <UART_SetConfig+0x56a>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0x520>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	0800476d 	.word	0x0800476d
 800474c:	08004775 	.word	0x08004775
 8004750:	0800477d 	.word	0x0800477d
 8004754:	08004793 	.word	0x08004793
 8004758:	08004783 	.word	0x08004783
 800475c:	08004793 	.word	0x08004793
 8004760:	08004793 	.word	0x08004793
 8004764:	08004793 	.word	0x08004793
 8004768:	0800478b 	.word	0x0800478b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800476c:	f7fe fe6e 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8004770:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004772:	e014      	b.n	800479e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe fe80 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 8004778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800477a:	e010      	b.n	800479e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477c:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <UART_SetConfig+0x5c0>)
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004780:	e00d      	b.n	800479e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004782:	f7fe fdcb 	bl	800331c <HAL_RCC_GetSysClockFreq>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004788:	e009      	b.n	800479e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004790:	e005      	b.n	800479e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800479c:	bf00      	nop
    }

    if (pclk != 0U)
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d028      	beq.n	80047f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	4a10      	ldr	r2, [pc, #64]	; (80047ec <UART_SetConfig+0x5c4>)
 80047aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ae:	461a      	mov	r2, r3
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	441a      	add	r2, r3
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	2b0f      	cmp	r3, #15
 80047ce:	d90f      	bls.n	80047f0 <UART_SetConfig+0x5c8>
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d6:	d20b      	bcs.n	80047f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = usartdiv;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	60da      	str	r2, [r3, #12]
 80047e0:	e009      	b.n	80047f6 <UART_SetConfig+0x5ce>
 80047e2:	bf00      	nop
 80047e4:	40008000 	.word	0x40008000
 80047e8:	00f42400 	.word	0x00f42400
 80047ec:	080056d8 	.word	0x080056d8
      }
      else
      {
        ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2201      	movs	r2, #1
 8004802:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2200      	movs	r2, #0
 8004810:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004812:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004816:	4618      	mov	r0, r3
 8004818:	3730      	adds	r7, #48	; 0x30
 800481a:	46bd      	mov	sp, r7
 800481c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01a      	beq.n	8004936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491e:	d10a      	bne.n	8004936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]
  }
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af02      	add	r7, sp, #8
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004974:	f7fc f9f6 	bl	8000d64 <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b08      	cmp	r3, #8
 8004986:	d10e      	bne.n	80049a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f82f 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e025      	b.n	80049f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d10e      	bne.n	80049d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f819 	bl	80049fa <UART_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e00f      	b.n	80049f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	4613      	mov	r3, r2
 8004a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0a:	e062      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a12:	d05e      	beq.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a14:	f7fc f9a6 	bl	8000d64 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d302      	bcc.n	8004a2a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d11d      	bne.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a38:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e045      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d02e      	beq.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a82:	d126      	bne.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a9c:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0201 	bic.w	r2, r2, #1
 8004aac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e00f      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4013      	ands	r3, r2
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	2300      	movne	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d08d      	beq.n	8004a0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e027      	b.n	8004b60 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2224      	movs	r2, #36	; 0x24
 8004b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e02d      	b.n	8004be0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2224      	movs	r2, #36	; 0x24
 8004b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f84f 	bl	8004c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e02d      	b.n	8004c5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2224      	movs	r2, #36	; 0x24
 8004c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f811 	bl	8004c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d108      	bne.n	8004c86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c84:	e031      	b.n	8004cea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c86:	2308      	movs	r3, #8
 8004c88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c8a:	2308      	movs	r3, #8
 8004c8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	0e5b      	lsrs	r3, r3, #25
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	0f5b      	lsrs	r3, r3, #29
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cae:	7bbb      	ldrb	r3, [r7, #14]
 8004cb0:	7b3a      	ldrb	r2, [r7, #12]
 8004cb2:	4911      	ldr	r1, [pc, #68]	; (8004cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8004cb4:	5c8a      	ldrb	r2, [r1, r2]
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004cba:	7b3a      	ldrb	r2, [r7, #12]
 8004cbc:	490f      	ldr	r1, [pc, #60]	; (8004cfc <UARTEx_SetNbDataToProcess+0x98>)
 8004cbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	7b7a      	ldrb	r2, [r7, #13]
 8004cd0:	4909      	ldr	r1, [pc, #36]	; (8004cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8004cd2:	5c8a      	ldrb	r2, [r1, r2]
 8004cd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cd8:	7b7a      	ldrb	r2, [r7, #13]
 8004cda:	4908      	ldr	r1, [pc, #32]	; (8004cfc <UARTEx_SetNbDataToProcess+0x98>)
 8004cdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cde:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	080056f0 	.word	0x080056f0
 8004cfc:	080056f8 	.word	0x080056f8

08004d00 <sniprintf>:
 8004d00:	b40c      	push	{r2, r3}
 8004d02:	b530      	push	{r4, r5, lr}
 8004d04:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <sniprintf+0x64>)
 8004d06:	1e0c      	subs	r4, r1, #0
 8004d08:	681d      	ldr	r5, [r3, #0]
 8004d0a:	b09d      	sub	sp, #116	; 0x74
 8004d0c:	da08      	bge.n	8004d20 <sniprintf+0x20>
 8004d0e:	238b      	movs	r3, #139	; 0x8b
 8004d10:	602b      	str	r3, [r5, #0]
 8004d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d16:	b01d      	add	sp, #116	; 0x74
 8004d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d1c:	b002      	add	sp, #8
 8004d1e:	4770      	bx	lr
 8004d20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d28:	bf14      	ite	ne
 8004d2a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004d2e:	4623      	moveq	r3, r4
 8004d30:	9304      	str	r3, [sp, #16]
 8004d32:	9307      	str	r3, [sp, #28]
 8004d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d38:	9002      	str	r0, [sp, #8]
 8004d3a:	9006      	str	r0, [sp, #24]
 8004d3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d42:	ab21      	add	r3, sp, #132	; 0x84
 8004d44:	a902      	add	r1, sp, #8
 8004d46:	4628      	mov	r0, r5
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	f000 f993 	bl	8005074 <_svfiprintf_r>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	bfbc      	itt	lt
 8004d52:	238b      	movlt	r3, #139	; 0x8b
 8004d54:	602b      	strlt	r3, [r5, #0]
 8004d56:	2c00      	cmp	r4, #0
 8004d58:	d0dd      	beq.n	8004d16 <sniprintf+0x16>
 8004d5a:	9b02      	ldr	r3, [sp, #8]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e7d9      	b.n	8004d16 <sniprintf+0x16>
 8004d62:	bf00      	nop
 8004d64:	20000058 	.word	0x20000058

08004d68 <memset>:
 8004d68:	4402      	add	r2, r0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d100      	bne.n	8004d72 <memset+0xa>
 8004d70:	4770      	bx	lr
 8004d72:	f803 1b01 	strb.w	r1, [r3], #1
 8004d76:	e7f9      	b.n	8004d6c <memset+0x4>

08004d78 <__errno>:
 8004d78:	4b01      	ldr	r3, [pc, #4]	; (8004d80 <__errno+0x8>)
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000058 	.word	0x20000058

08004d84 <__libc_init_array>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	4d0d      	ldr	r5, [pc, #52]	; (8004dbc <__libc_init_array+0x38>)
 8004d88:	4c0d      	ldr	r4, [pc, #52]	; (8004dc0 <__libc_init_array+0x3c>)
 8004d8a:	1b64      	subs	r4, r4, r5
 8004d8c:	10a4      	asrs	r4, r4, #2
 8004d8e:	2600      	movs	r6, #0
 8004d90:	42a6      	cmp	r6, r4
 8004d92:	d109      	bne.n	8004da8 <__libc_init_array+0x24>
 8004d94:	4d0b      	ldr	r5, [pc, #44]	; (8004dc4 <__libc_init_array+0x40>)
 8004d96:	4c0c      	ldr	r4, [pc, #48]	; (8004dc8 <__libc_init_array+0x44>)
 8004d98:	f000 fc6a 	bl	8005670 <_init>
 8004d9c:	1b64      	subs	r4, r4, r5
 8004d9e:	10a4      	asrs	r4, r4, #2
 8004da0:	2600      	movs	r6, #0
 8004da2:	42a6      	cmp	r6, r4
 8004da4:	d105      	bne.n	8004db2 <__libc_init_array+0x2e>
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dac:	4798      	blx	r3
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7ee      	b.n	8004d90 <__libc_init_array+0xc>
 8004db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db6:	4798      	blx	r3
 8004db8:	3601      	adds	r6, #1
 8004dba:	e7f2      	b.n	8004da2 <__libc_init_array+0x1e>
 8004dbc:	0800573c 	.word	0x0800573c
 8004dc0:	0800573c 	.word	0x0800573c
 8004dc4:	0800573c 	.word	0x0800573c
 8004dc8:	08005740 	.word	0x08005740

08004dcc <__retarget_lock_acquire_recursive>:
 8004dcc:	4770      	bx	lr

08004dce <__retarget_lock_release_recursive>:
 8004dce:	4770      	bx	lr

08004dd0 <_free_r>:
 8004dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dd2:	2900      	cmp	r1, #0
 8004dd4:	d044      	beq.n	8004e60 <_free_r+0x90>
 8004dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dda:	9001      	str	r0, [sp, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f1a1 0404 	sub.w	r4, r1, #4
 8004de2:	bfb8      	it	lt
 8004de4:	18e4      	addlt	r4, r4, r3
 8004de6:	f000 f8df 	bl	8004fa8 <__malloc_lock>
 8004dea:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <_free_r+0x94>)
 8004dec:	9801      	ldr	r0, [sp, #4]
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	b933      	cbnz	r3, 8004e00 <_free_r+0x30>
 8004df2:	6063      	str	r3, [r4, #4]
 8004df4:	6014      	str	r4, [r2, #0]
 8004df6:	b003      	add	sp, #12
 8004df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dfc:	f000 b8da 	b.w	8004fb4 <__malloc_unlock>
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	d908      	bls.n	8004e16 <_free_r+0x46>
 8004e04:	6825      	ldr	r5, [r4, #0]
 8004e06:	1961      	adds	r1, r4, r5
 8004e08:	428b      	cmp	r3, r1
 8004e0a:	bf01      	itttt	eq
 8004e0c:	6819      	ldreq	r1, [r3, #0]
 8004e0e:	685b      	ldreq	r3, [r3, #4]
 8004e10:	1949      	addeq	r1, r1, r5
 8004e12:	6021      	streq	r1, [r4, #0]
 8004e14:	e7ed      	b.n	8004df2 <_free_r+0x22>
 8004e16:	461a      	mov	r2, r3
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	b10b      	cbz	r3, 8004e20 <_free_r+0x50>
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d9fa      	bls.n	8004e16 <_free_r+0x46>
 8004e20:	6811      	ldr	r1, [r2, #0]
 8004e22:	1855      	adds	r5, r2, r1
 8004e24:	42a5      	cmp	r5, r4
 8004e26:	d10b      	bne.n	8004e40 <_free_r+0x70>
 8004e28:	6824      	ldr	r4, [r4, #0]
 8004e2a:	4421      	add	r1, r4
 8004e2c:	1854      	adds	r4, r2, r1
 8004e2e:	42a3      	cmp	r3, r4
 8004e30:	6011      	str	r1, [r2, #0]
 8004e32:	d1e0      	bne.n	8004df6 <_free_r+0x26>
 8004e34:	681c      	ldr	r4, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	6053      	str	r3, [r2, #4]
 8004e3a:	440c      	add	r4, r1
 8004e3c:	6014      	str	r4, [r2, #0]
 8004e3e:	e7da      	b.n	8004df6 <_free_r+0x26>
 8004e40:	d902      	bls.n	8004e48 <_free_r+0x78>
 8004e42:	230c      	movs	r3, #12
 8004e44:	6003      	str	r3, [r0, #0]
 8004e46:	e7d6      	b.n	8004df6 <_free_r+0x26>
 8004e48:	6825      	ldr	r5, [r4, #0]
 8004e4a:	1961      	adds	r1, r4, r5
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	bf04      	itt	eq
 8004e50:	6819      	ldreq	r1, [r3, #0]
 8004e52:	685b      	ldreq	r3, [r3, #4]
 8004e54:	6063      	str	r3, [r4, #4]
 8004e56:	bf04      	itt	eq
 8004e58:	1949      	addeq	r1, r1, r5
 8004e5a:	6021      	streq	r1, [r4, #0]
 8004e5c:	6054      	str	r4, [r2, #4]
 8004e5e:	e7ca      	b.n	8004df6 <_free_r+0x26>
 8004e60:	b003      	add	sp, #12
 8004e62:	bd30      	pop	{r4, r5, pc}
 8004e64:	20000360 	.word	0x20000360

08004e68 <sbrk_aligned>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	4e0e      	ldr	r6, [pc, #56]	; (8004ea4 <sbrk_aligned+0x3c>)
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	6831      	ldr	r1, [r6, #0]
 8004e70:	4605      	mov	r5, r0
 8004e72:	b911      	cbnz	r1, 8004e7a <sbrk_aligned+0x12>
 8004e74:	f000 fba6 	bl	80055c4 <_sbrk_r>
 8004e78:	6030      	str	r0, [r6, #0]
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f000 fba1 	bl	80055c4 <_sbrk_r>
 8004e82:	1c43      	adds	r3, r0, #1
 8004e84:	d00a      	beq.n	8004e9c <sbrk_aligned+0x34>
 8004e86:	1cc4      	adds	r4, r0, #3
 8004e88:	f024 0403 	bic.w	r4, r4, #3
 8004e8c:	42a0      	cmp	r0, r4
 8004e8e:	d007      	beq.n	8004ea0 <sbrk_aligned+0x38>
 8004e90:	1a21      	subs	r1, r4, r0
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 fb96 	bl	80055c4 <_sbrk_r>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d101      	bne.n	8004ea0 <sbrk_aligned+0x38>
 8004e9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	20000364 	.word	0x20000364

08004ea8 <_malloc_r>:
 8004ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eac:	1ccd      	adds	r5, r1, #3
 8004eae:	f025 0503 	bic.w	r5, r5, #3
 8004eb2:	3508      	adds	r5, #8
 8004eb4:	2d0c      	cmp	r5, #12
 8004eb6:	bf38      	it	cc
 8004eb8:	250c      	movcc	r5, #12
 8004eba:	2d00      	cmp	r5, #0
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	db01      	blt.n	8004ec4 <_malloc_r+0x1c>
 8004ec0:	42a9      	cmp	r1, r5
 8004ec2:	d905      	bls.n	8004ed0 <_malloc_r+0x28>
 8004ec4:	230c      	movs	r3, #12
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	2600      	movs	r6, #0
 8004eca:	4630      	mov	r0, r6
 8004ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004fa4 <_malloc_r+0xfc>
 8004ed4:	f000 f868 	bl	8004fa8 <__malloc_lock>
 8004ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8004edc:	461c      	mov	r4, r3
 8004ede:	bb5c      	cbnz	r4, 8004f38 <_malloc_r+0x90>
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	f7ff ffc0 	bl	8004e68 <sbrk_aligned>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	4604      	mov	r4, r0
 8004eec:	d155      	bne.n	8004f9a <_malloc_r+0xf2>
 8004eee:	f8d8 4000 	ldr.w	r4, [r8]
 8004ef2:	4626      	mov	r6, r4
 8004ef4:	2e00      	cmp	r6, #0
 8004ef6:	d145      	bne.n	8004f84 <_malloc_r+0xdc>
 8004ef8:	2c00      	cmp	r4, #0
 8004efa:	d048      	beq.n	8004f8e <_malloc_r+0xe6>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	4631      	mov	r1, r6
 8004f00:	4638      	mov	r0, r7
 8004f02:	eb04 0903 	add.w	r9, r4, r3
 8004f06:	f000 fb5d 	bl	80055c4 <_sbrk_r>
 8004f0a:	4581      	cmp	r9, r0
 8004f0c:	d13f      	bne.n	8004f8e <_malloc_r+0xe6>
 8004f0e:	6821      	ldr	r1, [r4, #0]
 8004f10:	1a6d      	subs	r5, r5, r1
 8004f12:	4629      	mov	r1, r5
 8004f14:	4638      	mov	r0, r7
 8004f16:	f7ff ffa7 	bl	8004e68 <sbrk_aligned>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d037      	beq.n	8004f8e <_malloc_r+0xe6>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	442b      	add	r3, r5
 8004f22:	6023      	str	r3, [r4, #0]
 8004f24:	f8d8 3000 	ldr.w	r3, [r8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d038      	beq.n	8004f9e <_malloc_r+0xf6>
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	42a2      	cmp	r2, r4
 8004f30:	d12b      	bne.n	8004f8a <_malloc_r+0xe2>
 8004f32:	2200      	movs	r2, #0
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	e00f      	b.n	8004f58 <_malloc_r+0xb0>
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	1b52      	subs	r2, r2, r5
 8004f3c:	d41f      	bmi.n	8004f7e <_malloc_r+0xd6>
 8004f3e:	2a0b      	cmp	r2, #11
 8004f40:	d917      	bls.n	8004f72 <_malloc_r+0xca>
 8004f42:	1961      	adds	r1, r4, r5
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	6025      	str	r5, [r4, #0]
 8004f48:	bf18      	it	ne
 8004f4a:	6059      	strne	r1, [r3, #4]
 8004f4c:	6863      	ldr	r3, [r4, #4]
 8004f4e:	bf08      	it	eq
 8004f50:	f8c8 1000 	streq.w	r1, [r8]
 8004f54:	5162      	str	r2, [r4, r5]
 8004f56:	604b      	str	r3, [r1, #4]
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f104 060b 	add.w	r6, r4, #11
 8004f5e:	f000 f829 	bl	8004fb4 <__malloc_unlock>
 8004f62:	f026 0607 	bic.w	r6, r6, #7
 8004f66:	1d23      	adds	r3, r4, #4
 8004f68:	1af2      	subs	r2, r6, r3
 8004f6a:	d0ae      	beq.n	8004eca <_malloc_r+0x22>
 8004f6c:	1b9b      	subs	r3, r3, r6
 8004f6e:	50a3      	str	r3, [r4, r2]
 8004f70:	e7ab      	b.n	8004eca <_malloc_r+0x22>
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	6862      	ldr	r2, [r4, #4]
 8004f76:	d1dd      	bne.n	8004f34 <_malloc_r+0x8c>
 8004f78:	f8c8 2000 	str.w	r2, [r8]
 8004f7c:	e7ec      	b.n	8004f58 <_malloc_r+0xb0>
 8004f7e:	4623      	mov	r3, r4
 8004f80:	6864      	ldr	r4, [r4, #4]
 8004f82:	e7ac      	b.n	8004ede <_malloc_r+0x36>
 8004f84:	4634      	mov	r4, r6
 8004f86:	6876      	ldr	r6, [r6, #4]
 8004f88:	e7b4      	b.n	8004ef4 <_malloc_r+0x4c>
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	e7cc      	b.n	8004f28 <_malloc_r+0x80>
 8004f8e:	230c      	movs	r3, #12
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	4638      	mov	r0, r7
 8004f94:	f000 f80e 	bl	8004fb4 <__malloc_unlock>
 8004f98:	e797      	b.n	8004eca <_malloc_r+0x22>
 8004f9a:	6025      	str	r5, [r4, #0]
 8004f9c:	e7dc      	b.n	8004f58 <_malloc_r+0xb0>
 8004f9e:	605b      	str	r3, [r3, #4]
 8004fa0:	deff      	udf	#255	; 0xff
 8004fa2:	bf00      	nop
 8004fa4:	20000360 	.word	0x20000360

08004fa8 <__malloc_lock>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__malloc_lock+0x8>)
 8004faa:	f7ff bf0f 	b.w	8004dcc <__retarget_lock_acquire_recursive>
 8004fae:	bf00      	nop
 8004fb0:	2000035c 	.word	0x2000035c

08004fb4 <__malloc_unlock>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__malloc_unlock+0x8>)
 8004fb6:	f7ff bf0a 	b.w	8004dce <__retarget_lock_release_recursive>
 8004fba:	bf00      	nop
 8004fbc:	2000035c 	.word	0x2000035c

08004fc0 <__ssputs_r>:
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	688e      	ldr	r6, [r1, #8]
 8004fc6:	461f      	mov	r7, r3
 8004fc8:	42be      	cmp	r6, r7
 8004fca:	680b      	ldr	r3, [r1, #0]
 8004fcc:	4682      	mov	sl, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	4690      	mov	r8, r2
 8004fd2:	d82c      	bhi.n	800502e <__ssputs_r+0x6e>
 8004fd4:	898a      	ldrh	r2, [r1, #12]
 8004fd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fda:	d026      	beq.n	800502a <__ssputs_r+0x6a>
 8004fdc:	6965      	ldr	r5, [r4, #20]
 8004fde:	6909      	ldr	r1, [r1, #16]
 8004fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fe4:	eba3 0901 	sub.w	r9, r3, r1
 8004fe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fec:	1c7b      	adds	r3, r7, #1
 8004fee:	444b      	add	r3, r9
 8004ff0:	106d      	asrs	r5, r5, #1
 8004ff2:	429d      	cmp	r5, r3
 8004ff4:	bf38      	it	cc
 8004ff6:	461d      	movcc	r5, r3
 8004ff8:	0553      	lsls	r3, r2, #21
 8004ffa:	d527      	bpl.n	800504c <__ssputs_r+0x8c>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	f7ff ff53 	bl	8004ea8 <_malloc_r>
 8005002:	4606      	mov	r6, r0
 8005004:	b360      	cbz	r0, 8005060 <__ssputs_r+0xa0>
 8005006:	6921      	ldr	r1, [r4, #16]
 8005008:	464a      	mov	r2, r9
 800500a:	f000 faeb 	bl	80055e4 <memcpy>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005018:	81a3      	strh	r3, [r4, #12]
 800501a:	6126      	str	r6, [r4, #16]
 800501c:	6165      	str	r5, [r4, #20]
 800501e:	444e      	add	r6, r9
 8005020:	eba5 0509 	sub.w	r5, r5, r9
 8005024:	6026      	str	r6, [r4, #0]
 8005026:	60a5      	str	r5, [r4, #8]
 8005028:	463e      	mov	r6, r7
 800502a:	42be      	cmp	r6, r7
 800502c:	d900      	bls.n	8005030 <__ssputs_r+0x70>
 800502e:	463e      	mov	r6, r7
 8005030:	6820      	ldr	r0, [r4, #0]
 8005032:	4632      	mov	r2, r6
 8005034:	4641      	mov	r1, r8
 8005036:	f000 faab 	bl	8005590 <memmove>
 800503a:	68a3      	ldr	r3, [r4, #8]
 800503c:	1b9b      	subs	r3, r3, r6
 800503e:	60a3      	str	r3, [r4, #8]
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	4433      	add	r3, r6
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	2000      	movs	r0, #0
 8005048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504c:	462a      	mov	r2, r5
 800504e:	f000 fad7 	bl	8005600 <_realloc_r>
 8005052:	4606      	mov	r6, r0
 8005054:	2800      	cmp	r0, #0
 8005056:	d1e0      	bne.n	800501a <__ssputs_r+0x5a>
 8005058:	6921      	ldr	r1, [r4, #16]
 800505a:	4650      	mov	r0, sl
 800505c:	f7ff feb8 	bl	8004dd0 <_free_r>
 8005060:	230c      	movs	r3, #12
 8005062:	f8ca 3000 	str.w	r3, [sl]
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800506c:	81a3      	strh	r3, [r4, #12]
 800506e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005072:	e7e9      	b.n	8005048 <__ssputs_r+0x88>

08005074 <_svfiprintf_r>:
 8005074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005078:	4698      	mov	r8, r3
 800507a:	898b      	ldrh	r3, [r1, #12]
 800507c:	061b      	lsls	r3, r3, #24
 800507e:	b09d      	sub	sp, #116	; 0x74
 8005080:	4607      	mov	r7, r0
 8005082:	460d      	mov	r5, r1
 8005084:	4614      	mov	r4, r2
 8005086:	d50e      	bpl.n	80050a6 <_svfiprintf_r+0x32>
 8005088:	690b      	ldr	r3, [r1, #16]
 800508a:	b963      	cbnz	r3, 80050a6 <_svfiprintf_r+0x32>
 800508c:	2140      	movs	r1, #64	; 0x40
 800508e:	f7ff ff0b 	bl	8004ea8 <_malloc_r>
 8005092:	6028      	str	r0, [r5, #0]
 8005094:	6128      	str	r0, [r5, #16]
 8005096:	b920      	cbnz	r0, 80050a2 <_svfiprintf_r+0x2e>
 8005098:	230c      	movs	r3, #12
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a0:	e0d0      	b.n	8005244 <_svfiprintf_r+0x1d0>
 80050a2:	2340      	movs	r3, #64	; 0x40
 80050a4:	616b      	str	r3, [r5, #20]
 80050a6:	2300      	movs	r3, #0
 80050a8:	9309      	str	r3, [sp, #36]	; 0x24
 80050aa:	2320      	movs	r3, #32
 80050ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80050b4:	2330      	movs	r3, #48	; 0x30
 80050b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800525c <_svfiprintf_r+0x1e8>
 80050ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050be:	f04f 0901 	mov.w	r9, #1
 80050c2:	4623      	mov	r3, r4
 80050c4:	469a      	mov	sl, r3
 80050c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ca:	b10a      	cbz	r2, 80050d0 <_svfiprintf_r+0x5c>
 80050cc:	2a25      	cmp	r2, #37	; 0x25
 80050ce:	d1f9      	bne.n	80050c4 <_svfiprintf_r+0x50>
 80050d0:	ebba 0b04 	subs.w	fp, sl, r4
 80050d4:	d00b      	beq.n	80050ee <_svfiprintf_r+0x7a>
 80050d6:	465b      	mov	r3, fp
 80050d8:	4622      	mov	r2, r4
 80050da:	4629      	mov	r1, r5
 80050dc:	4638      	mov	r0, r7
 80050de:	f7ff ff6f 	bl	8004fc0 <__ssputs_r>
 80050e2:	3001      	adds	r0, #1
 80050e4:	f000 80a9 	beq.w	800523a <_svfiprintf_r+0x1c6>
 80050e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050ea:	445a      	add	r2, fp
 80050ec:	9209      	str	r2, [sp, #36]	; 0x24
 80050ee:	f89a 3000 	ldrb.w	r3, [sl]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80a1 	beq.w	800523a <_svfiprintf_r+0x1c6>
 80050f8:	2300      	movs	r3, #0
 80050fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005102:	f10a 0a01 	add.w	sl, sl, #1
 8005106:	9304      	str	r3, [sp, #16]
 8005108:	9307      	str	r3, [sp, #28]
 800510a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800510e:	931a      	str	r3, [sp, #104]	; 0x68
 8005110:	4654      	mov	r4, sl
 8005112:	2205      	movs	r2, #5
 8005114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005118:	4850      	ldr	r0, [pc, #320]	; (800525c <_svfiprintf_r+0x1e8>)
 800511a:	f7fb f879 	bl	8000210 <memchr>
 800511e:	9a04      	ldr	r2, [sp, #16]
 8005120:	b9d8      	cbnz	r0, 800515a <_svfiprintf_r+0xe6>
 8005122:	06d0      	lsls	r0, r2, #27
 8005124:	bf44      	itt	mi
 8005126:	2320      	movmi	r3, #32
 8005128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800512c:	0711      	lsls	r1, r2, #28
 800512e:	bf44      	itt	mi
 8005130:	232b      	movmi	r3, #43	; 0x2b
 8005132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005136:	f89a 3000 	ldrb.w	r3, [sl]
 800513a:	2b2a      	cmp	r3, #42	; 0x2a
 800513c:	d015      	beq.n	800516a <_svfiprintf_r+0xf6>
 800513e:	9a07      	ldr	r2, [sp, #28]
 8005140:	4654      	mov	r4, sl
 8005142:	2000      	movs	r0, #0
 8005144:	f04f 0c0a 	mov.w	ip, #10
 8005148:	4621      	mov	r1, r4
 800514a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800514e:	3b30      	subs	r3, #48	; 0x30
 8005150:	2b09      	cmp	r3, #9
 8005152:	d94d      	bls.n	80051f0 <_svfiprintf_r+0x17c>
 8005154:	b1b0      	cbz	r0, 8005184 <_svfiprintf_r+0x110>
 8005156:	9207      	str	r2, [sp, #28]
 8005158:	e014      	b.n	8005184 <_svfiprintf_r+0x110>
 800515a:	eba0 0308 	sub.w	r3, r0, r8
 800515e:	fa09 f303 	lsl.w	r3, r9, r3
 8005162:	4313      	orrs	r3, r2
 8005164:	9304      	str	r3, [sp, #16]
 8005166:	46a2      	mov	sl, r4
 8005168:	e7d2      	b.n	8005110 <_svfiprintf_r+0x9c>
 800516a:	9b03      	ldr	r3, [sp, #12]
 800516c:	1d19      	adds	r1, r3, #4
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	9103      	str	r1, [sp, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	bfbb      	ittet	lt
 8005176:	425b      	neglt	r3, r3
 8005178:	f042 0202 	orrlt.w	r2, r2, #2
 800517c:	9307      	strge	r3, [sp, #28]
 800517e:	9307      	strlt	r3, [sp, #28]
 8005180:	bfb8      	it	lt
 8005182:	9204      	strlt	r2, [sp, #16]
 8005184:	7823      	ldrb	r3, [r4, #0]
 8005186:	2b2e      	cmp	r3, #46	; 0x2e
 8005188:	d10c      	bne.n	80051a4 <_svfiprintf_r+0x130>
 800518a:	7863      	ldrb	r3, [r4, #1]
 800518c:	2b2a      	cmp	r3, #42	; 0x2a
 800518e:	d134      	bne.n	80051fa <_svfiprintf_r+0x186>
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	1d1a      	adds	r2, r3, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	9203      	str	r2, [sp, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	bfb8      	it	lt
 800519c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80051a0:	3402      	adds	r4, #2
 80051a2:	9305      	str	r3, [sp, #20]
 80051a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800526c <_svfiprintf_r+0x1f8>
 80051a8:	7821      	ldrb	r1, [r4, #0]
 80051aa:	2203      	movs	r2, #3
 80051ac:	4650      	mov	r0, sl
 80051ae:	f7fb f82f 	bl	8000210 <memchr>
 80051b2:	b138      	cbz	r0, 80051c4 <_svfiprintf_r+0x150>
 80051b4:	9b04      	ldr	r3, [sp, #16]
 80051b6:	eba0 000a 	sub.w	r0, r0, sl
 80051ba:	2240      	movs	r2, #64	; 0x40
 80051bc:	4082      	lsls	r2, r0
 80051be:	4313      	orrs	r3, r2
 80051c0:	3401      	adds	r4, #1
 80051c2:	9304      	str	r3, [sp, #16]
 80051c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c8:	4825      	ldr	r0, [pc, #148]	; (8005260 <_svfiprintf_r+0x1ec>)
 80051ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051ce:	2206      	movs	r2, #6
 80051d0:	f7fb f81e 	bl	8000210 <memchr>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d038      	beq.n	800524a <_svfiprintf_r+0x1d6>
 80051d8:	4b22      	ldr	r3, [pc, #136]	; (8005264 <_svfiprintf_r+0x1f0>)
 80051da:	bb1b      	cbnz	r3, 8005224 <_svfiprintf_r+0x1b0>
 80051dc:	9b03      	ldr	r3, [sp, #12]
 80051de:	3307      	adds	r3, #7
 80051e0:	f023 0307 	bic.w	r3, r3, #7
 80051e4:	3308      	adds	r3, #8
 80051e6:	9303      	str	r3, [sp, #12]
 80051e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ea:	4433      	add	r3, r6
 80051ec:	9309      	str	r3, [sp, #36]	; 0x24
 80051ee:	e768      	b.n	80050c2 <_svfiprintf_r+0x4e>
 80051f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80051f4:	460c      	mov	r4, r1
 80051f6:	2001      	movs	r0, #1
 80051f8:	e7a6      	b.n	8005148 <_svfiprintf_r+0xd4>
 80051fa:	2300      	movs	r3, #0
 80051fc:	3401      	adds	r4, #1
 80051fe:	9305      	str	r3, [sp, #20]
 8005200:	4619      	mov	r1, r3
 8005202:	f04f 0c0a 	mov.w	ip, #10
 8005206:	4620      	mov	r0, r4
 8005208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800520c:	3a30      	subs	r2, #48	; 0x30
 800520e:	2a09      	cmp	r2, #9
 8005210:	d903      	bls.n	800521a <_svfiprintf_r+0x1a6>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0c6      	beq.n	80051a4 <_svfiprintf_r+0x130>
 8005216:	9105      	str	r1, [sp, #20]
 8005218:	e7c4      	b.n	80051a4 <_svfiprintf_r+0x130>
 800521a:	fb0c 2101 	mla	r1, ip, r1, r2
 800521e:	4604      	mov	r4, r0
 8005220:	2301      	movs	r3, #1
 8005222:	e7f0      	b.n	8005206 <_svfiprintf_r+0x192>
 8005224:	ab03      	add	r3, sp, #12
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	462a      	mov	r2, r5
 800522a:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <_svfiprintf_r+0x1f4>)
 800522c:	a904      	add	r1, sp, #16
 800522e:	4638      	mov	r0, r7
 8005230:	f3af 8000 	nop.w
 8005234:	1c42      	adds	r2, r0, #1
 8005236:	4606      	mov	r6, r0
 8005238:	d1d6      	bne.n	80051e8 <_svfiprintf_r+0x174>
 800523a:	89ab      	ldrh	r3, [r5, #12]
 800523c:	065b      	lsls	r3, r3, #25
 800523e:	f53f af2d 	bmi.w	800509c <_svfiprintf_r+0x28>
 8005242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005244:	b01d      	add	sp, #116	; 0x74
 8005246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524a:	ab03      	add	r3, sp, #12
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	462a      	mov	r2, r5
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <_svfiprintf_r+0x1f4>)
 8005252:	a904      	add	r1, sp, #16
 8005254:	4638      	mov	r0, r7
 8005256:	f000 f879 	bl	800534c <_printf_i>
 800525a:	e7eb      	b.n	8005234 <_svfiprintf_r+0x1c0>
 800525c:	08005700 	.word	0x08005700
 8005260:	0800570a 	.word	0x0800570a
 8005264:	00000000 	.word	0x00000000
 8005268:	08004fc1 	.word	0x08004fc1
 800526c:	08005706 	.word	0x08005706

08005270 <_printf_common>:
 8005270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005274:	4616      	mov	r6, r2
 8005276:	4699      	mov	r9, r3
 8005278:	688a      	ldr	r2, [r1, #8]
 800527a:	690b      	ldr	r3, [r1, #16]
 800527c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005280:	4293      	cmp	r3, r2
 8005282:	bfb8      	it	lt
 8005284:	4613      	movlt	r3, r2
 8005286:	6033      	str	r3, [r6, #0]
 8005288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800528c:	4607      	mov	r7, r0
 800528e:	460c      	mov	r4, r1
 8005290:	b10a      	cbz	r2, 8005296 <_printf_common+0x26>
 8005292:	3301      	adds	r3, #1
 8005294:	6033      	str	r3, [r6, #0]
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	0699      	lsls	r1, r3, #26
 800529a:	bf42      	ittt	mi
 800529c:	6833      	ldrmi	r3, [r6, #0]
 800529e:	3302      	addmi	r3, #2
 80052a0:	6033      	strmi	r3, [r6, #0]
 80052a2:	6825      	ldr	r5, [r4, #0]
 80052a4:	f015 0506 	ands.w	r5, r5, #6
 80052a8:	d106      	bne.n	80052b8 <_printf_common+0x48>
 80052aa:	f104 0a19 	add.w	sl, r4, #25
 80052ae:	68e3      	ldr	r3, [r4, #12]
 80052b0:	6832      	ldr	r2, [r6, #0]
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	42ab      	cmp	r3, r5
 80052b6:	dc26      	bgt.n	8005306 <_printf_common+0x96>
 80052b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052bc:	1e13      	subs	r3, r2, #0
 80052be:	6822      	ldr	r2, [r4, #0]
 80052c0:	bf18      	it	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	0692      	lsls	r2, r2, #26
 80052c6:	d42b      	bmi.n	8005320 <_printf_common+0xb0>
 80052c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052cc:	4649      	mov	r1, r9
 80052ce:	4638      	mov	r0, r7
 80052d0:	47c0      	blx	r8
 80052d2:	3001      	adds	r0, #1
 80052d4:	d01e      	beq.n	8005314 <_printf_common+0xa4>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	6922      	ldr	r2, [r4, #16]
 80052da:	f003 0306 	and.w	r3, r3, #6
 80052de:	2b04      	cmp	r3, #4
 80052e0:	bf02      	ittt	eq
 80052e2:	68e5      	ldreq	r5, [r4, #12]
 80052e4:	6833      	ldreq	r3, [r6, #0]
 80052e6:	1aed      	subeq	r5, r5, r3
 80052e8:	68a3      	ldr	r3, [r4, #8]
 80052ea:	bf0c      	ite	eq
 80052ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f0:	2500      	movne	r5, #0
 80052f2:	4293      	cmp	r3, r2
 80052f4:	bfc4      	itt	gt
 80052f6:	1a9b      	subgt	r3, r3, r2
 80052f8:	18ed      	addgt	r5, r5, r3
 80052fa:	2600      	movs	r6, #0
 80052fc:	341a      	adds	r4, #26
 80052fe:	42b5      	cmp	r5, r6
 8005300:	d11a      	bne.n	8005338 <_printf_common+0xc8>
 8005302:	2000      	movs	r0, #0
 8005304:	e008      	b.n	8005318 <_printf_common+0xa8>
 8005306:	2301      	movs	r3, #1
 8005308:	4652      	mov	r2, sl
 800530a:	4649      	mov	r1, r9
 800530c:	4638      	mov	r0, r7
 800530e:	47c0      	blx	r8
 8005310:	3001      	adds	r0, #1
 8005312:	d103      	bne.n	800531c <_printf_common+0xac>
 8005314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531c:	3501      	adds	r5, #1
 800531e:	e7c6      	b.n	80052ae <_printf_common+0x3e>
 8005320:	18e1      	adds	r1, r4, r3
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	2030      	movs	r0, #48	; 0x30
 8005326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800532a:	4422      	add	r2, r4
 800532c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005334:	3302      	adds	r3, #2
 8005336:	e7c7      	b.n	80052c8 <_printf_common+0x58>
 8005338:	2301      	movs	r3, #1
 800533a:	4622      	mov	r2, r4
 800533c:	4649      	mov	r1, r9
 800533e:	4638      	mov	r0, r7
 8005340:	47c0      	blx	r8
 8005342:	3001      	adds	r0, #1
 8005344:	d0e6      	beq.n	8005314 <_printf_common+0xa4>
 8005346:	3601      	adds	r6, #1
 8005348:	e7d9      	b.n	80052fe <_printf_common+0x8e>
	...

0800534c <_printf_i>:
 800534c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005350:	7e0f      	ldrb	r7, [r1, #24]
 8005352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005354:	2f78      	cmp	r7, #120	; 0x78
 8005356:	4691      	mov	r9, r2
 8005358:	4680      	mov	r8, r0
 800535a:	460c      	mov	r4, r1
 800535c:	469a      	mov	sl, r3
 800535e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005362:	d807      	bhi.n	8005374 <_printf_i+0x28>
 8005364:	2f62      	cmp	r7, #98	; 0x62
 8005366:	d80a      	bhi.n	800537e <_printf_i+0x32>
 8005368:	2f00      	cmp	r7, #0
 800536a:	f000 80d4 	beq.w	8005516 <_printf_i+0x1ca>
 800536e:	2f58      	cmp	r7, #88	; 0x58
 8005370:	f000 80c0 	beq.w	80054f4 <_printf_i+0x1a8>
 8005374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800537c:	e03a      	b.n	80053f4 <_printf_i+0xa8>
 800537e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005382:	2b15      	cmp	r3, #21
 8005384:	d8f6      	bhi.n	8005374 <_printf_i+0x28>
 8005386:	a101      	add	r1, pc, #4	; (adr r1, 800538c <_printf_i+0x40>)
 8005388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800538c:	080053e5 	.word	0x080053e5
 8005390:	080053f9 	.word	0x080053f9
 8005394:	08005375 	.word	0x08005375
 8005398:	08005375 	.word	0x08005375
 800539c:	08005375 	.word	0x08005375
 80053a0:	08005375 	.word	0x08005375
 80053a4:	080053f9 	.word	0x080053f9
 80053a8:	08005375 	.word	0x08005375
 80053ac:	08005375 	.word	0x08005375
 80053b0:	08005375 	.word	0x08005375
 80053b4:	08005375 	.word	0x08005375
 80053b8:	080054fd 	.word	0x080054fd
 80053bc:	08005425 	.word	0x08005425
 80053c0:	080054b7 	.word	0x080054b7
 80053c4:	08005375 	.word	0x08005375
 80053c8:	08005375 	.word	0x08005375
 80053cc:	0800551f 	.word	0x0800551f
 80053d0:	08005375 	.word	0x08005375
 80053d4:	08005425 	.word	0x08005425
 80053d8:	08005375 	.word	0x08005375
 80053dc:	08005375 	.word	0x08005375
 80053e0:	080054bf 	.word	0x080054bf
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	1d1a      	adds	r2, r3, #4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	602a      	str	r2, [r5, #0]
 80053ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053f4:	2301      	movs	r3, #1
 80053f6:	e09f      	b.n	8005538 <_printf_i+0x1ec>
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	682b      	ldr	r3, [r5, #0]
 80053fc:	0607      	lsls	r7, r0, #24
 80053fe:	f103 0104 	add.w	r1, r3, #4
 8005402:	6029      	str	r1, [r5, #0]
 8005404:	d501      	bpl.n	800540a <_printf_i+0xbe>
 8005406:	681e      	ldr	r6, [r3, #0]
 8005408:	e003      	b.n	8005412 <_printf_i+0xc6>
 800540a:	0646      	lsls	r6, r0, #25
 800540c:	d5fb      	bpl.n	8005406 <_printf_i+0xba>
 800540e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005412:	2e00      	cmp	r6, #0
 8005414:	da03      	bge.n	800541e <_printf_i+0xd2>
 8005416:	232d      	movs	r3, #45	; 0x2d
 8005418:	4276      	negs	r6, r6
 800541a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800541e:	485a      	ldr	r0, [pc, #360]	; (8005588 <_printf_i+0x23c>)
 8005420:	230a      	movs	r3, #10
 8005422:	e012      	b.n	800544a <_printf_i+0xfe>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	6820      	ldr	r0, [r4, #0]
 8005428:	1d19      	adds	r1, r3, #4
 800542a:	6029      	str	r1, [r5, #0]
 800542c:	0605      	lsls	r5, r0, #24
 800542e:	d501      	bpl.n	8005434 <_printf_i+0xe8>
 8005430:	681e      	ldr	r6, [r3, #0]
 8005432:	e002      	b.n	800543a <_printf_i+0xee>
 8005434:	0641      	lsls	r1, r0, #25
 8005436:	d5fb      	bpl.n	8005430 <_printf_i+0xe4>
 8005438:	881e      	ldrh	r6, [r3, #0]
 800543a:	4853      	ldr	r0, [pc, #332]	; (8005588 <_printf_i+0x23c>)
 800543c:	2f6f      	cmp	r7, #111	; 0x6f
 800543e:	bf0c      	ite	eq
 8005440:	2308      	moveq	r3, #8
 8005442:	230a      	movne	r3, #10
 8005444:	2100      	movs	r1, #0
 8005446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800544a:	6865      	ldr	r5, [r4, #4]
 800544c:	60a5      	str	r5, [r4, #8]
 800544e:	2d00      	cmp	r5, #0
 8005450:	bfa2      	ittt	ge
 8005452:	6821      	ldrge	r1, [r4, #0]
 8005454:	f021 0104 	bicge.w	r1, r1, #4
 8005458:	6021      	strge	r1, [r4, #0]
 800545a:	b90e      	cbnz	r6, 8005460 <_printf_i+0x114>
 800545c:	2d00      	cmp	r5, #0
 800545e:	d04b      	beq.n	80054f8 <_printf_i+0x1ac>
 8005460:	4615      	mov	r5, r2
 8005462:	fbb6 f1f3 	udiv	r1, r6, r3
 8005466:	fb03 6711 	mls	r7, r3, r1, r6
 800546a:	5dc7      	ldrb	r7, [r0, r7]
 800546c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005470:	4637      	mov	r7, r6
 8005472:	42bb      	cmp	r3, r7
 8005474:	460e      	mov	r6, r1
 8005476:	d9f4      	bls.n	8005462 <_printf_i+0x116>
 8005478:	2b08      	cmp	r3, #8
 800547a:	d10b      	bne.n	8005494 <_printf_i+0x148>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	07de      	lsls	r6, r3, #31
 8005480:	d508      	bpl.n	8005494 <_printf_i+0x148>
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	6861      	ldr	r1, [r4, #4]
 8005486:	4299      	cmp	r1, r3
 8005488:	bfde      	ittt	le
 800548a:	2330      	movle	r3, #48	; 0x30
 800548c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005490:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005494:	1b52      	subs	r2, r2, r5
 8005496:	6122      	str	r2, [r4, #16]
 8005498:	f8cd a000 	str.w	sl, [sp]
 800549c:	464b      	mov	r3, r9
 800549e:	aa03      	add	r2, sp, #12
 80054a0:	4621      	mov	r1, r4
 80054a2:	4640      	mov	r0, r8
 80054a4:	f7ff fee4 	bl	8005270 <_printf_common>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d14a      	bne.n	8005542 <_printf_i+0x1f6>
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054b0:	b004      	add	sp, #16
 80054b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	f043 0320 	orr.w	r3, r3, #32
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	4833      	ldr	r0, [pc, #204]	; (800558c <_printf_i+0x240>)
 80054c0:	2778      	movs	r7, #120	; 0x78
 80054c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	6829      	ldr	r1, [r5, #0]
 80054ca:	061f      	lsls	r7, r3, #24
 80054cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80054d0:	d402      	bmi.n	80054d8 <_printf_i+0x18c>
 80054d2:	065f      	lsls	r7, r3, #25
 80054d4:	bf48      	it	mi
 80054d6:	b2b6      	uxthmi	r6, r6
 80054d8:	07df      	lsls	r7, r3, #31
 80054da:	bf48      	it	mi
 80054dc:	f043 0320 	orrmi.w	r3, r3, #32
 80054e0:	6029      	str	r1, [r5, #0]
 80054e2:	bf48      	it	mi
 80054e4:	6023      	strmi	r3, [r4, #0]
 80054e6:	b91e      	cbnz	r6, 80054f0 <_printf_i+0x1a4>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	f023 0320 	bic.w	r3, r3, #32
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	2310      	movs	r3, #16
 80054f2:	e7a7      	b.n	8005444 <_printf_i+0xf8>
 80054f4:	4824      	ldr	r0, [pc, #144]	; (8005588 <_printf_i+0x23c>)
 80054f6:	e7e4      	b.n	80054c2 <_printf_i+0x176>
 80054f8:	4615      	mov	r5, r2
 80054fa:	e7bd      	b.n	8005478 <_printf_i+0x12c>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	6826      	ldr	r6, [r4, #0]
 8005500:	6961      	ldr	r1, [r4, #20]
 8005502:	1d18      	adds	r0, r3, #4
 8005504:	6028      	str	r0, [r5, #0]
 8005506:	0635      	lsls	r5, r6, #24
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	d501      	bpl.n	8005510 <_printf_i+0x1c4>
 800550c:	6019      	str	r1, [r3, #0]
 800550e:	e002      	b.n	8005516 <_printf_i+0x1ca>
 8005510:	0670      	lsls	r0, r6, #25
 8005512:	d5fb      	bpl.n	800550c <_printf_i+0x1c0>
 8005514:	8019      	strh	r1, [r3, #0]
 8005516:	2300      	movs	r3, #0
 8005518:	6123      	str	r3, [r4, #16]
 800551a:	4615      	mov	r5, r2
 800551c:	e7bc      	b.n	8005498 <_printf_i+0x14c>
 800551e:	682b      	ldr	r3, [r5, #0]
 8005520:	1d1a      	adds	r2, r3, #4
 8005522:	602a      	str	r2, [r5, #0]
 8005524:	681d      	ldr	r5, [r3, #0]
 8005526:	6862      	ldr	r2, [r4, #4]
 8005528:	2100      	movs	r1, #0
 800552a:	4628      	mov	r0, r5
 800552c:	f7fa fe70 	bl	8000210 <memchr>
 8005530:	b108      	cbz	r0, 8005536 <_printf_i+0x1ea>
 8005532:	1b40      	subs	r0, r0, r5
 8005534:	6060      	str	r0, [r4, #4]
 8005536:	6863      	ldr	r3, [r4, #4]
 8005538:	6123      	str	r3, [r4, #16]
 800553a:	2300      	movs	r3, #0
 800553c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005540:	e7aa      	b.n	8005498 <_printf_i+0x14c>
 8005542:	6923      	ldr	r3, [r4, #16]
 8005544:	462a      	mov	r2, r5
 8005546:	4649      	mov	r1, r9
 8005548:	4640      	mov	r0, r8
 800554a:	47d0      	blx	sl
 800554c:	3001      	adds	r0, #1
 800554e:	d0ad      	beq.n	80054ac <_printf_i+0x160>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	079b      	lsls	r3, r3, #30
 8005554:	d413      	bmi.n	800557e <_printf_i+0x232>
 8005556:	68e0      	ldr	r0, [r4, #12]
 8005558:	9b03      	ldr	r3, [sp, #12]
 800555a:	4298      	cmp	r0, r3
 800555c:	bfb8      	it	lt
 800555e:	4618      	movlt	r0, r3
 8005560:	e7a6      	b.n	80054b0 <_printf_i+0x164>
 8005562:	2301      	movs	r3, #1
 8005564:	4632      	mov	r2, r6
 8005566:	4649      	mov	r1, r9
 8005568:	4640      	mov	r0, r8
 800556a:	47d0      	blx	sl
 800556c:	3001      	adds	r0, #1
 800556e:	d09d      	beq.n	80054ac <_printf_i+0x160>
 8005570:	3501      	adds	r5, #1
 8005572:	68e3      	ldr	r3, [r4, #12]
 8005574:	9903      	ldr	r1, [sp, #12]
 8005576:	1a5b      	subs	r3, r3, r1
 8005578:	42ab      	cmp	r3, r5
 800557a:	dcf2      	bgt.n	8005562 <_printf_i+0x216>
 800557c:	e7eb      	b.n	8005556 <_printf_i+0x20a>
 800557e:	2500      	movs	r5, #0
 8005580:	f104 0619 	add.w	r6, r4, #25
 8005584:	e7f5      	b.n	8005572 <_printf_i+0x226>
 8005586:	bf00      	nop
 8005588:	08005711 	.word	0x08005711
 800558c:	08005722 	.word	0x08005722

08005590 <memmove>:
 8005590:	4288      	cmp	r0, r1
 8005592:	b510      	push	{r4, lr}
 8005594:	eb01 0402 	add.w	r4, r1, r2
 8005598:	d902      	bls.n	80055a0 <memmove+0x10>
 800559a:	4284      	cmp	r4, r0
 800559c:	4623      	mov	r3, r4
 800559e:	d807      	bhi.n	80055b0 <memmove+0x20>
 80055a0:	1e43      	subs	r3, r0, #1
 80055a2:	42a1      	cmp	r1, r4
 80055a4:	d008      	beq.n	80055b8 <memmove+0x28>
 80055a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ae:	e7f8      	b.n	80055a2 <memmove+0x12>
 80055b0:	4402      	add	r2, r0
 80055b2:	4601      	mov	r1, r0
 80055b4:	428a      	cmp	r2, r1
 80055b6:	d100      	bne.n	80055ba <memmove+0x2a>
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055c2:	e7f7      	b.n	80055b4 <memmove+0x24>

080055c4 <_sbrk_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4d06      	ldr	r5, [pc, #24]	; (80055e0 <_sbrk_r+0x1c>)
 80055c8:	2300      	movs	r3, #0
 80055ca:	4604      	mov	r4, r0
 80055cc:	4608      	mov	r0, r1
 80055ce:	602b      	str	r3, [r5, #0]
 80055d0:	f7fb face 	bl	8000b70 <_sbrk>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_sbrk_r+0x1a>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	b103      	cbz	r3, 80055de <_sbrk_r+0x1a>
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	20000358 	.word	0x20000358

080055e4 <memcpy>:
 80055e4:	440a      	add	r2, r1
 80055e6:	4291      	cmp	r1, r2
 80055e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80055ec:	d100      	bne.n	80055f0 <memcpy+0xc>
 80055ee:	4770      	bx	lr
 80055f0:	b510      	push	{r4, lr}
 80055f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055fa:	4291      	cmp	r1, r2
 80055fc:	d1f9      	bne.n	80055f2 <memcpy+0xe>
 80055fe:	bd10      	pop	{r4, pc}

08005600 <_realloc_r>:
 8005600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005604:	4680      	mov	r8, r0
 8005606:	4614      	mov	r4, r2
 8005608:	460e      	mov	r6, r1
 800560a:	b921      	cbnz	r1, 8005616 <_realloc_r+0x16>
 800560c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005610:	4611      	mov	r1, r2
 8005612:	f7ff bc49 	b.w	8004ea8 <_malloc_r>
 8005616:	b92a      	cbnz	r2, 8005624 <_realloc_r+0x24>
 8005618:	f7ff fbda 	bl	8004dd0 <_free_r>
 800561c:	4625      	mov	r5, r4
 800561e:	4628      	mov	r0, r5
 8005620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005624:	f000 f81b 	bl	800565e <_malloc_usable_size_r>
 8005628:	4284      	cmp	r4, r0
 800562a:	4607      	mov	r7, r0
 800562c:	d802      	bhi.n	8005634 <_realloc_r+0x34>
 800562e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005632:	d812      	bhi.n	800565a <_realloc_r+0x5a>
 8005634:	4621      	mov	r1, r4
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff fc36 	bl	8004ea8 <_malloc_r>
 800563c:	4605      	mov	r5, r0
 800563e:	2800      	cmp	r0, #0
 8005640:	d0ed      	beq.n	800561e <_realloc_r+0x1e>
 8005642:	42bc      	cmp	r4, r7
 8005644:	4622      	mov	r2, r4
 8005646:	4631      	mov	r1, r6
 8005648:	bf28      	it	cs
 800564a:	463a      	movcs	r2, r7
 800564c:	f7ff ffca 	bl	80055e4 <memcpy>
 8005650:	4631      	mov	r1, r6
 8005652:	4640      	mov	r0, r8
 8005654:	f7ff fbbc 	bl	8004dd0 <_free_r>
 8005658:	e7e1      	b.n	800561e <_realloc_r+0x1e>
 800565a:	4635      	mov	r5, r6
 800565c:	e7df      	b.n	800561e <_realloc_r+0x1e>

0800565e <_malloc_usable_size_r>:
 800565e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005662:	1f18      	subs	r0, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	bfbc      	itt	lt
 8005668:	580b      	ldrlt	r3, [r1, r0]
 800566a:	18c0      	addlt	r0, r0, r3
 800566c:	4770      	bx	lr
	...

08005670 <_init>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr

0800567c <_fini>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr
