
EVAL-ADIN1110EBZ_ST_uC_cubeddddddd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057ac  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a18  08005a18  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a20  08005a20  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a20  08005a20  00015a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  08005a84  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08005a84  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dea0  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e24  00000000  00000000  0002df6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002fd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009aa  00000000  00000000  00030a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c8a0  00000000  00000000  000313da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d59e  00000000  00000000  0005dc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001193bd  00000000  00000000  0006b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003938  00000000  00000000  001845d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00187f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005954 	.word	0x08005954

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08005954 	.word	0x08005954

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fcb9 	bl	8000f26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f83c 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f97c 	bl	80008b4 <MX_GPIO_Init>
 // MX_FMC_Init();
  MX_ADC1_Init();
 80005bc:	f000 f87e 	bl	80006bc <MX_ADC1_Init>
//  MX_I2C3_Init();
 // MX_OCTOSPI1_Init();
 // MX_SPI1_Init();
 // MX_SPI2_Init();
 // MX_SPI3_Init();
  MX_UART4_Init();
 80005c0:	f000 f8e0 	bl	8000784 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005c4:	f000 f92a 	bl	800081c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 80005c8:	4814      	ldr	r0, [pc, #80]	; (800061c <main+0x70>)
 80005ca:	f001 f8b9 	bl	8001740 <HAL_ADC_Start>
	          // Poll for conversion completion
	        HAL_ADC_PollForConversion(&hadc1, 500);
 80005ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <main+0x70>)
 80005d4:	f001 f94a 	bl	800186c <HAL_ADC_PollForConversion>
	              // Get the ADC value
	        adcValue = HAL_ADC_GetValue(&hadc1);
 80005d8:	4810      	ldr	r0, [pc, #64]	; (800061c <main+0x70>)
 80005da:	f001 f9d6 	bl	800198a <HAL_ADC_GetValue>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <main+0x74>)
 80005e4:	801a      	strh	r2, [r3, #0]
	        HAL_ADC_Stop(&hadc1);
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <main+0x70>)
 80005e8:	f001 f90d 	bl	8001806 <HAL_ADC_Stop>
	        //toStringValue(adcValue, buffer, sizeof(buffer));
	        snprintf(buffer, sizeof(buffer), "%hu \r\n", adcValue); //convert integer to string
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <main+0x74>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <main+0x78>)
 80005f2:	2114      	movs	r1, #20
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <main+0x7c>)
 80005f6:	f004 fcf5 	bl	8004fe4 <sniprintf>

	        HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <main+0x7c>)
 80005fc:	f7ff fe00 	bl	8000200 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000608:	4907      	ldr	r1, [pc, #28]	; (8000628 <main+0x7c>)
 800060a:	4808      	ldr	r0, [pc, #32]	; (800062c <main+0x80>)
 800060c:	f003 fee6 	bl	80043dc <HAL_UART_Transmit>
	        HAL_Delay(500);
 8000610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000614:	f000 fcfc 	bl	8001010 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000618:	e7d6      	b.n	80005c8 <main+0x1c>
 800061a:	bf00      	nop
 800061c:	20000078 	.word	0x20000078
 8000620:	20000200 	.word	0x20000200
 8000624:	0800596c 	.word	0x0800596c
 8000628:	20000204 	.word	0x20000204
 800062c:	20000170 	.word	0x20000170

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	; 0x58
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2244      	movs	r2, #68	; 0x44
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fd04 	bl	800504c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000652:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000656:	f002 f9cd 	bl	80029f4 <HAL_PWREx_ControlVoltageScaling>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000660:	f000 fa70 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000664:	2310      	movs	r3, #16
 8000666:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000670:	2360      	movs	r3, #96	; 0x60
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fa6d 	bl	8002b5c <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000688:	f000 fa5c 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fe7f 	bl	80033a8 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006b0:	f000 fa48 	bl	8000b44 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3758      	adds	r7, #88	; 0x58
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d2:	4b29      	ldr	r3, [pc, #164]	; (8000778 <MX_ADC1_Init+0xbc>)
 80006d4:	4a29      	ldr	r2, [pc, #164]	; (800077c <MX_ADC1_Init+0xc0>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <MX_ADC1_Init+0xbc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <MX_ADC1_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_ADC1_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_ADC1_Init+0xbc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_ADC1_Init+0xbc>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_ADC1_Init+0xbc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_ADC1_Init+0xbc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_ADC1_Init+0xbc>)
 8000704:	2201      	movs	r2, #1
 8000706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_ADC1_Init+0xbc>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_ADC1_Init+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_ADC1_Init+0xbc>)
 8000718:	2200      	movs	r2, #0
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_ADC1_Init+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_ADC1_Init+0xbc>)
 8000726:	2200      	movs	r2, #0
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_ADC1_Init+0xbc>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000732:	4811      	ldr	r0, [pc, #68]	; (8000778 <MX_ADC1_Init+0xbc>)
 8000734:	f000 feb8 	bl	80014a8 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800073e:	f000 fa01 	bl	8000b44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_ADC1_Init+0xc4>)
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2306      	movs	r3, #6
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074e:	237f      	movs	r3, #127	; 0x7f
 8000750:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000752:	2304      	movs	r3, #4
 8000754:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_ADC1_Init+0xbc>)
 8000760:	f001 f920 	bl	80019a4 <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800076a:	f000 f9eb 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000078 	.word	0x20000078
 800077c:	50040000 	.word	0x50040000
 8000780:	04300002 	.word	0x04300002

08000784 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_UART4_Init+0x90>)
 800078a:	4a23      	ldr	r2, [pc, #140]	; (8000818 <MX_UART4_Init+0x94>)
 800078c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_UART4_Init+0x90>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_UART4_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_UART4_Init+0x90>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_UART4_Init+0x90>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_UART4_Init+0x90>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_UART4_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_UART4_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_UART4_Init+0x90>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_UART4_Init+0x90>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_UART4_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <MX_UART4_Init+0x90>)
 80007ce:	f003 fdb5 	bl	800433c <HAL_UART_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80007d8:	f000 f9b4 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_UART4_Init+0x90>)
 80007e0:	f004 fb36 	bl	8004e50 <HAL_UARTEx_SetTxFifoThreshold>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80007ea:	f000 f9ab 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <MX_UART4_Init+0x90>)
 80007f2:	f004 fb6b 	bl	8004ecc <HAL_UARTEx_SetRxFifoThreshold>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80007fc:	f000 f9a2 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_UART4_Init+0x90>)
 8000802:	f004 faec 	bl	8004dde <HAL_UARTEx_DisableFifoMode>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800080c:	f000 f99a 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000e0 	.word	0x200000e0
 8000818:	40004c00 	.word	0x40004c00

0800081c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <MX_USART1_UART_Init+0x90>)
 8000822:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <MX_USART1_UART_Init+0x94>)
 8000824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_USART1_UART_Init+0x90>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_USART1_UART_Init+0x90>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_USART1_UART_Init+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_USART1_UART_Init+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_USART1_UART_Init+0x90>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_USART1_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_USART1_UART_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_USART1_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USART1_UART_Init+0x90>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART1_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000864:	4811      	ldr	r0, [pc, #68]	; (80008ac <MX_USART1_UART_Init+0x90>)
 8000866:	f003 fd69 	bl	800433c <HAL_UART_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000870:	f000 f968 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000874:	2100      	movs	r1, #0
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_USART1_UART_Init+0x90>)
 8000878:	f004 faea 	bl	8004e50 <HAL_UARTEx_SetTxFifoThreshold>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000882:	f000 f95f 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <MX_USART1_UART_Init+0x90>)
 800088a:	f004 fb1f 	bl	8004ecc <HAL_UARTEx_SetRxFifoThreshold>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000894:	f000 f956 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_USART1_UART_Init+0x90>)
 800089a:	f004 faa0 	bl	8004dde <HAL_UARTEx_DisableFifoMode>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008a4:	f000 f94e 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000170 	.word	0x20000170
 80008b0:	40013800 	.word	0x40013800

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	; 0x38
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ca:	4b95      	ldr	r3, [pc, #596]	; (8000b20 <MX_GPIO_Init+0x26c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a94      	ldr	r2, [pc, #592]	; (8000b20 <MX_GPIO_Init+0x26c>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b92      	ldr	r3, [pc, #584]	; (8000b20 <MX_GPIO_Init+0x26c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	623b      	str	r3, [r7, #32]
 80008e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b8f      	ldr	r3, [pc, #572]	; (8000b20 <MX_GPIO_Init+0x26c>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a8e      	ldr	r2, [pc, #568]	; (8000b20 <MX_GPIO_Init+0x26c>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b8c      	ldr	r3, [pc, #560]	; (8000b20 <MX_GPIO_Init+0x26c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
 80008f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	4b89      	ldr	r3, [pc, #548]	; (8000b20 <MX_GPIO_Init+0x26c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a88      	ldr	r2, [pc, #544]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b86      	ldr	r3, [pc, #536]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b83      	ldr	r3, [pc, #524]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a82      	ldr	r2, [pc, #520]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b80      	ldr	r3, [pc, #512]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b7d      	ldr	r3, [pc, #500]	; (8000b20 <MX_GPIO_Init+0x26c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a7c      	ldr	r2, [pc, #496]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b7a      	ldr	r3, [pc, #488]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b77      	ldr	r3, [pc, #476]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a76      	ldr	r2, [pc, #472]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b74      	ldr	r3, [pc, #464]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	4b71      	ldr	r3, [pc, #452]	; (8000b20 <MX_GPIO_Init+0x26c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a70      	ldr	r2, [pc, #448]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b6e      	ldr	r3, [pc, #440]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000972:	f002 f8e3 	bl	8002b3c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000976:	4b6a      	ldr	r3, [pc, #424]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a69      	ldr	r2, [pc, #420]	; (8000b20 <MX_GPIO_Init+0x26c>)
 800097c:	f043 0320 	orr.w	r3, r3, #32
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b67      	ldr	r3, [pc, #412]	; (8000b20 <MX_GPIO_Init+0x26c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_uC2_Pin|LED_uC3_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2144      	movs	r1, #68	; 0x44
 8000992:	4864      	ldr	r0, [pc, #400]	; (8000b24 <MX_GPIO_Init+0x270>)
 8000994:	f001 fff6 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_uC1_Pin|T1L_RESET_N_Pin|T1L_TS_CAPTURE_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 800099e:	4862      	ldr	r0, [pc, #392]	; (8000b28 <MX_GPIO_Init+0x274>)
 80009a0:	f001 fff0 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_uC4_GPIO_Port, LED_uC4_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009aa:	4860      	ldr	r0, [pc, #384]	; (8000b2c <MX_GPIO_Init+0x278>)
 80009ac:	f001 ffea 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D06_Pin D07_Pin D05_Pin D09_Pin
                           D08_Pin CFG_uC0_Pin */
  GPIO_InitStruct.Pin = D06_Pin|D07_Pin|D05_Pin|D09_Pin
 80009b0:	f44f 7379 	mov.w	r3, #996	; 0x3e4
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |D08_Pin|CFG_uC0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	485a      	ldr	r0, [pc, #360]	; (8000b30 <MX_GPIO_Init+0x27c>)
 80009c6:	f001 fe4b 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : uC_BOOT_Pin */
  GPIO_InitStruct.Pin = uC_BOOT_Pin;
 80009ca:	2308      	movs	r3, #8
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uC_BOOT_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4855      	ldr	r0, [pc, #340]	; (8000b34 <MX_GPIO_Init+0x280>)
 80009de:	f001 fe3f 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_uC2_Pin LED_uC3_Pin */
  GPIO_InitStruct.Pin = LED_uC2_Pin|LED_uC3_Pin;
 80009e2:	2344      	movs	r3, #68	; 0x44
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f6:	4619      	mov	r1, r3
 80009f8:	484a      	ldr	r0, [pc, #296]	; (8000b24 <MX_GPIO_Init+0x270>)
 80009fa:	f001 fe31 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : D04_Pin D03_Pin */
  GPIO_InitStruct.Pin = D04_Pin|D03_Pin;
 80009fe:	2344      	movs	r3, #68	; 0x44
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4849      	ldr	r0, [pc, #292]	; (8000b38 <MX_GPIO_Init+0x284>)
 8000a12:	f001 fe25 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : RAM_octospi_Pin */
  GPIO_InitStruct.Pin = RAM_octospi_Pin;
 8000a16:	2308      	movs	r3, #8
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P2;
 8000a26:	230a      	movs	r3, #10
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RAM_octospi_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4841      	ldr	r0, [pc, #260]	; (8000b38 <MX_GPIO_Init+0x284>)
 8000a32:	f001 fe15 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_uC1_Pin T1L_RESET_N_Pin T1L_TS_CAPTURE_Pin */
  GPIO_InitStruct.Pin = LED_uC1_Pin|T1L_RESET_N_Pin|T1L_TS_CAPTURE_Pin;
 8000a36:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4836      	ldr	r0, [pc, #216]	; (8000b28 <MX_GPIO_Init+0x274>)
 8000a50:	f001 fe06 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : RAM_octospiG10_Pin */
  GPIO_InitStruct.Pin = RAM_octospiG10_Pin;
 8000a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000a66:	2305      	movs	r3, #5
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RAM_octospiG10_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	482e      	ldr	r0, [pc, #184]	; (8000b2c <MX_GPIO_Init+0x278>)
 8000a72:	f001 fdf5 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : T1L_LINK_ST_Pin D02_Pin */
  GPIO_InitStruct.Pin = T1L_LINK_ST_Pin|D02_Pin;
 8000a76:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f001 fde7 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : T1L_CFG1_Pin T1L_CFG0_Pin */
  GPIO_InitStruct.Pin = T1L_CFG1_Pin|T1L_CFG0_Pin;
 8000a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4820      	ldr	r0, [pc, #128]	; (8000b28 <MX_GPIO_Init+0x274>)
 8000aa8:	f001 fdda 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : CFG_uC3_Pin CFG_uC2_Pin */
  GPIO_InitStruct.Pin = CFG_uC3_Pin|CFG_uC2_Pin;
 8000aac:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481a      	ldr	r0, [pc, #104]	; (8000b2c <MX_GPIO_Init+0x278>)
 8000ac2:	f001 fdcd 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_uC4_Pin */
  GPIO_InitStruct.Pin = LED_uC4_Pin;
 8000ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_uC4_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	4813      	ldr	r0, [pc, #76]	; (8000b2c <MX_GPIO_Init+0x278>)
 8000ae0:	f001 fdbe 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : CFG_uC1_Pin */
  GPIO_InitStruct.Pin = CFG_uC1_Pin;
 8000ae4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CFG_uC1_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af6:	4619      	mov	r1, r3
 8000af8:	4810      	ldr	r0, [pc, #64]	; (8000b3c <MX_GPIO_Init+0x288>)
 8000afa:	f001 fdb1 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : T1L_TS_TIMER_Pin T1L_INT_N_Pin */
  GPIO_InitStruct.Pin = T1L_TS_TIMER_Pin|T1L_INT_N_Pin;
 8000afe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_GPIO_Init+0x28c>)
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <MX_GPIO_Init+0x27c>)
 8000b14:	f001 fda4 	bl	8002660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b18:	bf00      	nop
 8000b1a:	3738      	adds	r7, #56	; 0x38
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48001000 	.word	0x48001000
 8000b28:	48000800 	.word	0x48000800
 8000b2c:	48001800 	.word	0x48001800
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48001c00 	.word	0x48001c00
 8000b38:	48000c00 	.word	0x48000c00
 8000b3c:	48001400 	.word	0x48001400
 8000b40:	10110000 	.word	0x10110000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>
	...

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_MspInit+0x44>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_MspInit+0x44>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6613      	str	r3, [r2, #96]	; 0x60
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_MspInit+0x44>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_MspInit+0x44>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0ae      	sub	sp, #184	; 0xb8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	2294      	movs	r2, #148	; 0x94
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fa47 	bl	800504c <memset>
  if(hadc->Instance==ADC1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <HAL_ADC_MspInit+0xc8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d146      	bne.n	8000c56 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bcc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000bde:	2310      	movs	r3, #16
 8000be0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 fe87 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000c04:	f7ff ff9e 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_ADC_MspInit+0xcc>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <HAL_ADC_MspInit+0xcc>)
 8000c0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_ADC_MspInit+0xcc>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_ADC_MspInit+0xcc>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c24:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_ADC_MspInit+0xcc>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_ADC_MspInit+0xcc>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c38:	233f      	movs	r3, #63	; 0x3f
 8000c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c3e:	230b      	movs	r3, #11
 8000c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_ADC_MspInit+0xd0>)
 8000c52:	f001 fd05 	bl	8002660 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	37b8      	adds	r7, #184	; 0xb8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	50040000 	.word	0x50040000
 8000c64:	40021000 	.word	0x40021000
 8000c68:	48000800 	.word	0x48000800

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0b0      	sub	sp, #192	; 0xc0
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	f107 0318 	add.w	r3, r7, #24
 8000c88:	2294      	movs	r2, #148	; 0x94
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 f9dd 	bl	800504c <memset>
  if(huart->Instance==UART4)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a43      	ldr	r2, [pc, #268]	; (8000da4 <HAL_UART_MspInit+0x138>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d13c      	bne.n	8000d16 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca4:	f107 0318 	add.w	r3, r7, #24
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fe2f 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb4:	f7ff ff46 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cb8:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbc:	4a3a      	ldr	r2, [pc, #232]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000cbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc4:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	4a34      	ldr	r2, [pc, #208]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cdc:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = D01_TX_Pin|D00_RX_Pin;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d00:	2308      	movs	r3, #8
 8000d02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d10:	f001 fca6 	bl	8002660 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d14:	e041      	b.n	8000d9a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a24      	ldr	r2, [pc, #144]	; (8000dac <HAL_UART_MspInit+0x140>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d13c      	bne.n	8000d9a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d24:	2300      	movs	r3, #0
 8000d26:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 fded 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000d38:	f7ff ff04 	bl	8000b44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d46:	6613      	str	r3, [r2, #96]	; 0x60
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_UART_MspInit+0x13c>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USB_UART_RX_Pin|USB_UART_TX_Pin;
 8000d6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d86:	2307      	movs	r3, #7
 8000d88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f001 fc63 	bl	8002660 <HAL_GPIO_Init>
}
 8000d9a:	bf00      	nop
 8000d9c:	37c0      	adds	r7, #192	; 0xc0
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004c00 	.word	0x40004c00
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40013800 	.word	0x40013800

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f8e8 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <_sbrk+0x5c>)
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <_sbrk+0x60>)
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e18:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <_sbrk+0x64>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <_sbrk+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d207      	bcs.n	8000e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e34:	f004 f912 	bl	800505c <__errno>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e42:	e009      	b.n	8000e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4a:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <_sbrk+0x64>)
 8000e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200a0000 	.word	0x200a0000
 8000e64:	00000400 	.word	0x00000400
 8000e68:	20000218 	.word	0x20000218
 8000e6c:	20000368 	.word	0x20000368

08000e70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <SystemInit+0x5c>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7a:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <SystemInit+0x5c>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <SystemInit+0x60>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <SystemInit+0x60>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <SystemInit+0x60>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <SystemInit+0x60>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <SystemInit+0x60>)
 8000e9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ea0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ea4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <SystemInit+0x60>)
 8000ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <SystemInit+0x60>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <SystemInit+0x60>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SystemInit+0x60>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed8:	f7ff ffca 	bl	8000e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000edc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ede:	e003      	b.n	8000ee8 <LoopCopyDataInit>

08000ee0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ee2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ee4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ee6:	3104      	adds	r1, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000eec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ef0:	d3f6      	bcc.n	8000ee0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ef4:	e002      	b.n	8000efc <LoopFillZerobss>

08000ef6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ef6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ef8:	f842 3b04 	str.w	r3, [r2], #4

08000efc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <LoopForever+0x16>)
	cmp	r2, r3
 8000efe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f00:	d3f9      	bcc.n	8000ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f004 f8b1 	bl	8005068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f06:	f7ff fb51 	bl	80005ac <main>

08000f0a <LoopForever>:

LoopForever:
    b LoopForever
 8000f0a:	e7fe      	b.n	8000f0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f0c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000f10:	08005a28 	.word	0x08005a28
	ldr	r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f18:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8000f1c:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8000f20:	20000368 	.word	0x20000368

08000f24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_IRQHandler>

08000f26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f001 fb61 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f80e 	bl	8000f58 <HAL_InitTick>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	e001      	b.n	8000f4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f48:	f7ff fe02 	bl	8000b50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_InitTick+0x6c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d023      	beq.n	8000fb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_InitTick+0x70>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_InitTick+0x6c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 fb5f 	bl	8002646 <HAL_SYSTICK_Config>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10f      	bne.n	8000fae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d809      	bhi.n	8000fa8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	f001 fb37 	bl	800260e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_InitTick+0x74>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e007      	b.n	8000fb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e004      	b.n	8000fb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e001      	b.n	8000fb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	2000021c 	.word	0x2000021c

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000021c 	.word	0x2000021c

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008

08001058 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	609a      	str	r2, [r3, #8]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	609a      	str	r2, [r3, #8]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3360      	adds	r3, #96	; 0x60
 80010d2:	461a      	mov	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <LL_ADC_SetOffset+0x44>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	4313      	orrs	r3, r2
 80010f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	03fff000 	.word	0x03fff000

08001108 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3360      	adds	r3, #96	; 0x60
 8001116:	461a      	mov	r2, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001134:	b480      	push	{r7}
 8001136:	b087      	sub	sp, #28
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3360      	adds	r3, #96	; 0x60
 8001144:	461a      	mov	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	431a      	orrs	r2, r3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800115e:	bf00      	nop
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	615a      	str	r2, [r3, #20]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b087      	sub	sp, #28
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3330      	adds	r3, #48	; 0x30
 80011c6:	461a      	mov	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	4413      	add	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	211f      	movs	r1, #31
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	401a      	ands	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	0e9b      	lsrs	r3, r3, #26
 80011ee:	f003 011f 	and.w	r1, r3, #31
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f003 031f 	and.w	r3, r3, #31
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	431a      	orrs	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001202:	bf00      	nop
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800120e:	b480      	push	{r7}
 8001210:	b087      	sub	sp, #28
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3314      	adds	r3, #20
 800121e:	461a      	mov	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	0e5b      	lsrs	r3, r3, #25
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	4413      	add	r3, r2
 800122c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	0d1b      	lsrs	r3, r3, #20
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	2107      	movs	r1, #7
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	0d1b      	lsrs	r3, r3, #20
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	431a      	orrs	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800127c:	43db      	mvns	r3, r3
 800127e:	401a      	ands	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0318 	and.w	r3, r3, #24
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001288:	40d9      	lsrs	r1, r3
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	400b      	ands	r3, r1
 800128e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001292:	431a      	orrs	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	0007ffff 	.word	0x0007ffff

080012ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6093      	str	r3, [r2, #8]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012e4:	d101      	bne.n	80012ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001308:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800130c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001334:	d101      	bne.n	800133a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001358:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800135c:	f043 0201 	orr.w	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001380:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001384:	f043 0202 	orr.w	r2, r3, #2
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <LL_ADC_IsEnabled+0x18>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <LL_ADC_IsEnabled+0x1a>
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d101      	bne.n	80013d6 <LL_ADC_IsDisableOngoing+0x18>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <LL_ADC_IsDisableOngoing+0x1a>
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013f8:	f043 0204 	orr.w	r2, r3, #4
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800141c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001420:	f043 0210 	orr.w	r2, r3, #16
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b04      	cmp	r3, #4
 8001446:	d101      	bne.n	800144c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800146a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800146e:	f043 0220 	orr.w	r2, r3, #32
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b08      	cmp	r3, #8
 8001494:	d101      	bne.n	800149a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e12f      	b.n	8001722 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d109      	bne.n	80014e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff fb61 	bl	8000b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fef1 	bl	80012d0 <LL_ADC_IsDeepPowerDownEnabled>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fed7 	bl	80012ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff0c 	bl	8001320 <LL_ADC_IsInternalRegulatorEnabled>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d115      	bne.n	800153a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fef0 	bl	80012f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001518:	4b84      	ldr	r3, [pc, #528]	; (800172c <HAL_ADC_Init+0x284>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	4a84      	ldr	r2, [pc, #528]	; (8001730 <HAL_ADC_Init+0x288>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	3301      	adds	r3, #1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800152c:	e002      	b.n	8001534 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f9      	bne.n	800152e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff feee 	bl	8001320 <LL_ADC_IsInternalRegulatorEnabled>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10d      	bne.n	8001566 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	f043 0210 	orr.w	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff62 	bl	8001434 <LL_ADC_REG_IsConversionOngoing>
 8001570:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b00      	cmp	r3, #0
 800157c:	f040 80c8 	bne.w	8001710 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 80c4 	bne.w	8001710 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001590:	f043 0202 	orr.w	r2, r3, #2
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fefb 	bl	8001398 <LL_ADC_IsEnabled>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10b      	bne.n	80015c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015a8:	4862      	ldr	r0, [pc, #392]	; (8001734 <HAL_ADC_Init+0x28c>)
 80015aa:	f7ff fef5 	bl	8001398 <LL_ADC_IsEnabled>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4619      	mov	r1, r3
 80015ba:	485f      	ldr	r0, [pc, #380]	; (8001738 <HAL_ADC_Init+0x290>)
 80015bc:	f7ff fd4c 	bl	8001058 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7e5b      	ldrb	r3, [r3, #25]
 80015c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80015d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80015d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d106      	bne.n	80015fc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	3b01      	subs	r3, #1
 80015f4:	045b      	lsls	r3, r3, #17
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	4b47      	ldr	r3, [pc, #284]	; (800173c <HAL_ADC_Init+0x294>)
 8001620:	4013      	ands	r3, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	430b      	orrs	r3, r1
 800162a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff feff 	bl	8001434 <LL_ADC_REG_IsConversionOngoing>
 8001636:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff20 	bl	8001482 <LL_ADC_INJ_IsConversionOngoing>
 8001642:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d140      	bne.n	80016cc <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d13d      	bne.n	80016cc <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7e1b      	ldrb	r3, [r3, #24]
 8001658:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800165a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001662:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001672:	f023 0306 	bic.w	r3, r3, #6
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	430b      	orrs	r3, r1
 800167e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001686:	2b01      	cmp	r3, #1
 8001688:	d118      	bne.n	80016bc <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016a0:	4311      	orrs	r1, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016a6:	4311      	orrs	r1, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016ac:	430a      	orrs	r2, r1
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0201 	orr.w	r2, r2, #1
 80016b8:	611a      	str	r2, [r3, #16]
 80016ba:	e007      	b.n	80016cc <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d10c      	bne.n	80016ee <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f023 010f 	bic.w	r1, r3, #15
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	1e5a      	subs	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30
 80016ec:	e007      	b.n	80016fe <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 020f 	bic.w	r2, r2, #15
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	f023 0303 	bic.w	r3, r3, #3
 8001706:	f043 0201 	orr.w	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	659a      	str	r2, [r3, #88]	; 0x58
 800170e:	e007      	b.n	8001720 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f043 0210 	orr.w	r2, r3, #16
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001720:	7ffb      	ldrb	r3, [r7, #31]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000
 8001730:	053e2d63 	.word	0x053e2d63
 8001734:	50040000 	.word	0x50040000
 8001738:	50040300 	.word	0x50040300
 800173c:	fff0c007 	.word	0xfff0c007

08001740 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fe71 	bl	8001434 <LL_ADC_REG_IsConversionOngoing>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d14f      	bne.n	80017f8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Start+0x26>
 8001762:	2302      	movs	r3, #2
 8001764:	e04b      	b.n	80017fe <HAL_ADC_Start+0xbe>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fdce 	bl	8002310 <ADC_Enable>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d137      	bne.n	80017ee <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800179a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800179e:	d106      	bne.n	80017ae <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	f023 0206 	bic.w	r2, r3, #6
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ac:	e002      	b.n	80017b4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	221c      	movs	r2, #28
 80017ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fdfc 	bl	80013e4 <LL_ADC_REG_StartConversion>
 80017ec:	e006      	b.n	80017fc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80017f6:	e001      	b.n	80017fc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
 80017fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_ADC_Stop+0x16>
 8001818:	2302      	movs	r3, #2
 800181a:	e023      	b.n	8001864 <HAL_ADC_Stop+0x5e>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001824:	2103      	movs	r1, #3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fcb6 	bl	8002198 <ADC_ConversionStop>
 800182c:	4603      	mov	r3, r0
 800182e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d111      	bne.n	800185a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fdcc 	bl	80023d4 <ADC_Disable>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001862:	7bfb      	ldrb	r3, [r7, #15]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	2b08      	cmp	r3, #8
 800187c:	d102      	bne.n	8001884 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800187e:	2308      	movs	r3, #8
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e010      	b.n	80018a6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	f043 0220 	orr.w	r2, r3, #32
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06f      	b.n	8001982 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80018a2:	2304      	movs	r3, #4
 80018a4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018a6:	f7ff fba7 	bl	8000ff8 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018ac:	e021      	b.n	80018f2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018b4:	d01d      	beq.n	80018f2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018b6:	f7ff fb9f 	bl	8000ff8 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d302      	bcc.n	80018cc <HAL_ADC_PollForConversion+0x60>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d112      	bne.n	80018f2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10b      	bne.n	80018f2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018de:	f043 0204 	orr.w	r2, r3, #4
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e047      	b.n	8001982 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0d6      	beq.n	80018ae <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fc3d 	bl	8001190 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01c      	beq.n	8001956 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e5b      	ldrb	r3, [r3, #25]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d118      	bne.n	8001956 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b08      	cmp	r3, #8
 8001930:	d111      	bne.n	8001956 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f043 0201 	orr.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d104      	bne.n	800196e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2208      	movs	r2, #8
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e008      	b.n	8001980 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d103      	bne.n	8001980 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	220c      	movs	r2, #12
 800197e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0b6      	sub	sp, #216	; 0xd8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x22>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e3d3      	b.n	800216e <HAL_ADC_ConfigChannel+0x7ca>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fd2e 	bl	8001434 <LL_ADC_REG_IsConversionOngoing>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 83b8 	bne.w	8002150 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d824      	bhi.n	8001a32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	3b02      	subs	r3, #2
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d81b      	bhi.n	8001a2a <HAL_ADC_ConfigChannel+0x86>
 80019f2:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <HAL_ADC_ConfigChannel+0x54>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a09 	.word	0x08001a09
 80019fc:	08001a11 	.word	0x08001a11
 8001a00:	08001a19 	.word	0x08001a19
 8001a04:	08001a21 	.word	0x08001a21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	605a      	str	r2, [r3, #4]
          break;
 8001a0e:	e010      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2212      	movs	r2, #18
 8001a14:	605a      	str	r2, [r3, #4]
          break;
 8001a16:	e00c      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2218      	movs	r2, #24
 8001a1c:	605a      	str	r2, [r3, #4]
          break;
 8001a1e:	e008      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a26:	605a      	str	r2, [r3, #4]
          break;
 8001a28:	e003      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2206      	movs	r2, #6
 8001a2e:	605a      	str	r2, [r3, #4]
          break;
 8001a30:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f7ff fbb9 	bl	80011b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fcf3 	bl	8001434 <LL_ADC_REG_IsConversionOngoing>
 8001a4e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fd13 	bl	8001482 <LL_ADC_INJ_IsConversionOngoing>
 8001a5c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 81c1 	bne.w	8001dec <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 81bc 	bne.w	8001dec <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a7c:	d10f      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff fbc0 	bl	800120e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fb67 	bl	800116a <LL_ADC_SetSamplingTimeCommonConfig>
 8001a9c:	e00e      	b.n	8001abc <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6819      	ldr	r1, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f7ff fbaf 	bl	800120e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fb57 	bl	800116a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d00a      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6919      	ldr	r1, [r3, #16]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aee:	f7ff fae7 	bl	80010c0 <LL_ADC_SetOffset>
 8001af2:	e17b      	b.n	8001dec <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fb04 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10a      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x17c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff faf9 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	0e9b      	lsrs	r3, r3, #26
 8001b1a:	f003 021f 	and.w	r2, r3, #31
 8001b1e:	e01e      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x1ba>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff faee 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	e004      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 8001b52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x1d2>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0e9b      	lsrs	r3, r3, #26
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	e018      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x204>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	e004      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 8001b9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d106      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fabd 	bl	8001134 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff faa1 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10a      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x242>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fa96 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	0e9b      	lsrs	r3, r3, #26
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	e01e      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x280>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fa8b 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e004      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8001c18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x298>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0e9b      	lsrs	r3, r3, #26
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	e018      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x2ca>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8001c60:	2320      	movs	r3, #32
 8001c62:	e004      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 8001c64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d106      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fa5a 	bl	8001134 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2102      	movs	r1, #2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fa3e 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x308>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fa33 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	f003 021f 	and.w	r2, r3, #31
 8001caa:	e01e      	b.n	8001cea <HAL_ADC_ConfigChannel+0x346>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fa28 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001cd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e004      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8001cde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x35e>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	0e9b      	lsrs	r3, r3, #26
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	e016      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x38c>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8001d22:	2320      	movs	r3, #32
 8001d24:	e004      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 8001d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d106      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f9f9 	bl	8001134 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2103      	movs	r1, #3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f9dd 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10a      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x3ca>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2103      	movs	r1, #3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f9d2 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	e017      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x3fa>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2103      	movs	r1, #3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f9c7 	bl	8001108 <LL_ADC_GetOffsetChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d88:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8001d90:	2320      	movs	r3, #32
 8001d92:	e003      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8001d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d96:	fab3 f383 	clz	r3, r3
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d105      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x412>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	0e9b      	lsrs	r3, r3, #26
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	e011      	b.n	8001dda <HAL_ADC_ConfigChannel+0x436>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e003      	b.n	8001dda <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8001dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d106      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2200      	movs	r2, #0
 8001de4:	2103      	movs	r1, #3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f9a4 	bl	8001134 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fad1 	bl	8001398 <LL_ADC_IsEnabled>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 813f 	bne.w	800207c <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6819      	ldr	r1, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f7ff fa2a 	bl	8001264 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a8e      	ldr	r2, [pc, #568]	; (8002050 <HAL_ADC_ConfigChannel+0x6ac>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	f040 8130 	bne.w	800207c <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10b      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x4a0>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	3301      	adds	r3, #1
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2b09      	cmp	r3, #9
 8001e3a:	bf94      	ite	ls
 8001e3c:	2301      	movls	r3, #1
 8001e3e:	2300      	movhi	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e019      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x4d4>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e54:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	e003      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8001e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	2b09      	cmp	r3, #9
 8001e70:	bf94      	ite	ls
 8001e72:	2301      	movls	r3, #1
 8001e74:	2300      	movhi	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d079      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x4f4>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	3301      	adds	r3, #1
 8001e90:	069b      	lsls	r3, r3, #26
 8001e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e96:	e015      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x520>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e003      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	069b      	lsls	r3, r3, #26
 8001ec0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x540>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	e017      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x570>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e003      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8001f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	ea42 0103 	orr.w	r1, r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10a      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x596>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0e9b      	lsrs	r3, r3, #26
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	051b      	lsls	r3, r3, #20
 8001f38:	e018      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x5c8>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001f52:	2320      	movs	r3, #32
 8001f54:	e003      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	e080      	b.n	8002072 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x5e8>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0e9b      	lsrs	r3, r3, #26
 8001f82:	3301      	adds	r3, #1
 8001f84:	069b      	lsls	r3, r3, #26
 8001f86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8a:	e015      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x614>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	e003      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x634>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	e017      	b.n	8002008 <HAL_ADC_ConfigChannel+0x664>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	61fb      	str	r3, [r7, #28]
  return result;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e003      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2101      	movs	r1, #1
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	ea42 0103 	orr.w	r1, r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10d      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x690>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	3301      	adds	r3, #1
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	3b1e      	subs	r3, #30
 800202c:	051b      	lsls	r3, r3, #20
 800202e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002032:	e01d      	b.n	8002070 <HAL_ADC_ConfigChannel+0x6cc>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	613b      	str	r3, [r7, #16]
  return result;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 800204c:	2320      	movs	r3, #32
 800204e:	e005      	b.n	800205c <HAL_ADC_ConfigChannel+0x6b8>
 8002050:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	3301      	adds	r3, #1
 800205e:	f003 021f 	and.w	r2, r3, #31
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	3b1e      	subs	r3, #30
 800206a:	051b      	lsls	r3, r3, #20
 800206c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002070:	430b      	orrs	r3, r1
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	6892      	ldr	r2, [r2, #8]
 8002076:	4619      	mov	r1, r3
 8002078:	f7ff f8c9 	bl	800120e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_ADC_ConfigChannel+0x7d4>)
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d06c      	beq.n	8002162 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002088:	483c      	ldr	r0, [pc, #240]	; (800217c <HAL_ADC_ConfigChannel+0x7d8>)
 800208a:	f7ff f80b 	bl	80010a4 <LL_ADC_GetCommonPathInternalCh>
 800208e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <HAL_ADC_ConfigChannel+0x7dc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d127      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800209c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d121      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a35      	ldr	r2, [pc, #212]	; (8002184 <HAL_ADC_ConfigChannel+0x7e0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d157      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ba:	4619      	mov	r1, r3
 80020bc:	482f      	ldr	r0, [pc, #188]	; (800217c <HAL_ADC_ConfigChannel+0x7d8>)
 80020be:	f7fe ffde 	bl	800107e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_ADC_ConfigChannel+0x7e4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	4a30      	ldr	r2, [pc, #192]	; (800218c <HAL_ADC_ConfigChannel+0x7e8>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020dc:	e002      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f9      	bne.n	80020de <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020ea:	e03a      	b.n	8002162 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <HAL_ADC_ConfigChannel+0x7ec>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d113      	bne.n	800211e <HAL_ADC_ConfigChannel+0x77a>
 80020f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_ADC_ConfigChannel+0x7e0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d12a      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002114:	4619      	mov	r1, r3
 8002116:	4819      	ldr	r0, [pc, #100]	; (800217c <HAL_ADC_ConfigChannel+0x7d8>)
 8002118:	f7fe ffb1 	bl	800107e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800211c:	e021      	b.n	8002162 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_ADC_ConfigChannel+0x7f0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d11c      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800212c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d116      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a12      	ldr	r2, [pc, #72]	; (8002184 <HAL_ADC_ConfigChannel+0x7e0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d111      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800213e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002142:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002146:	4619      	mov	r1, r3
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <HAL_ADC_ConfigChannel+0x7d8>)
 800214a:	f7fe ff98 	bl	800107e <LL_ADC_SetCommonPathInternalCh>
 800214e:	e008      	b.n	8002162 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f043 0220 	orr.w	r2, r3, #32
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800216a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800216e:	4618      	mov	r0, r3
 8002170:	37d8      	adds	r7, #216	; 0xd8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	80080000 	.word	0x80080000
 800217c:	50040300 	.word	0x50040300
 8002180:	c7520000 	.word	0xc7520000
 8002184:	50040000 	.word	0x50040000
 8002188:	20000000 	.word	0x20000000
 800218c:	053e2d63 	.word	0x053e2d63
 8002190:	cb840000 	.word	0xcb840000
 8002194:	80000001 	.word	0x80000001

08002198 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff f940 	bl	8001434 <LL_ADC_REG_IsConversionOngoing>
 80021b4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f961 	bl	8001482 <LL_ADC_INJ_IsConversionOngoing>
 80021c0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d103      	bne.n	80021d0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8098 	beq.w	8002300 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d02a      	beq.n	8002234 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7e5b      	ldrb	r3, [r3, #25]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d126      	bne.n	8002234 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7e1b      	ldrb	r3, [r3, #24]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d122      	bne.n	8002234 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80021f2:	e014      	b.n	800221e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4a45      	ldr	r2, [pc, #276]	; (800230c <ADC_ConversionStop+0x174>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d90d      	bls.n	8002218 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	f043 0210 	orr.w	r2, r3, #16
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e074      	b.n	8002302 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3301      	adds	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002228:	2b40      	cmp	r3, #64	; 0x40
 800222a:	d1e3      	bne.n	80021f4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d014      	beq.n	8002264 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff f8f8 	bl	8001434 <LL_ADC_REG_IsConversionOngoing>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f8b5 	bl	80013be <LL_ADC_IsDisableOngoing>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f8d4 	bl	800140c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d014      	beq.n	8002294 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f907 	bl	8001482 <LL_ADC_INJ_IsConversionOngoing>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f89d 	bl	80013be <LL_ADC_IsDisableOngoing>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff f8e3 	bl	800145a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d005      	beq.n	80022a6 <ADC_ConversionStop+0x10e>
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d105      	bne.n	80022ac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80022a0:	230c      	movs	r3, #12
 80022a2:	617b      	str	r3, [r7, #20]
        break;
 80022a4:	e005      	b.n	80022b2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80022a6:	2308      	movs	r3, #8
 80022a8:	617b      	str	r3, [r7, #20]
        break;
 80022aa:	e002      	b.n	80022b2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80022ac:	2304      	movs	r3, #4
 80022ae:	617b      	str	r3, [r7, #20]
        break;
 80022b0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80022b2:	f7fe fea1 	bl	8000ff8 <HAL_GetTick>
 80022b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022b8:	e01b      	b.n	80022f2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022ba:	f7fe fe9d 	bl	8000ff8 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b05      	cmp	r3, #5
 80022c6:	d914      	bls.n	80022f2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	f043 0210 	orr.w	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e007      	b.n	8002302 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1dc      	bne.n	80022ba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	a33fffff 	.word	0xa33fffff

08002310 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff f83b 	bl	8001398 <LL_ADC_IsEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d14d      	bne.n	80023c4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <ADC_Enable+0xc0>)
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00d      	beq.n	8002352 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	f043 0210 	orr.w	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e039      	b.n	80023c6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fff6 	bl	8001348 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800235c:	f7fe fe4c 	bl	8000ff8 <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002362:	e028      	b.n	80023b6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff f815 	bl	8001398 <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe ffe5 	bl	8001348 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800237e:	f7fe fe3b 	bl	8000ff8 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d914      	bls.n	80023b6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d00d      	beq.n	80023b6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	f043 0210 	orr.w	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e007      	b.n	80023c6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d1cf      	bne.n	8002364 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	8000003f 	.word	0x8000003f

080023d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe ffec 	bl	80013be <LL_ADC_IsDisableOngoing>
 80023e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe ffd3 	bl	8001398 <LL_ADC_IsEnabled>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d047      	beq.n	8002488 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d144      	bne.n	8002488 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030d 	and.w	r3, r3, #13
 8002408:	2b01      	cmp	r3, #1
 800240a:	d10c      	bne.n	8002426 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe ffad 	bl	8001370 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2203      	movs	r2, #3
 800241c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800241e:	f7fe fdeb 	bl	8000ff8 <HAL_GetTick>
 8002422:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002424:	e029      	b.n	800247a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	f043 0210 	orr.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e023      	b.n	800248a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002442:	f7fe fdd9 	bl	8000ff8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d914      	bls.n	800247a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f043 0210 	orr.w	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e007      	b.n	800248a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1dc      	bne.n	8002442 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff47 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff5c 	bl	80024dc <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffb0 	bl	80025b4 <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266e:	e166      	b.n	800293e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2101      	movs	r1, #1
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	4013      	ands	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8158 	beq.w	8002938 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d00b      	beq.n	80026a8 <HAL_GPIO_Init+0x48>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d007      	beq.n	80026a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800269c:	2b11      	cmp	r3, #17
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b12      	cmp	r3, #18
 80026a6:	d130      	bne.n	800270a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026de:	2201      	movs	r2, #1
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 0201 	and.w	r2, r3, #1
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	2203      	movs	r2, #3
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0xea>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b12      	cmp	r3, #18
 8002748:	d123      	bne.n	8002792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	08da      	lsrs	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3208      	adds	r2, #8
 8002752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	220f      	movs	r2, #15
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4013      	ands	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	08da      	lsrs	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3208      	adds	r2, #8
 800278c:	6939      	ldr	r1, [r7, #16]
 800278e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0203 	and.w	r2, r3, #3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80b2 	beq.w	8002938 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d4:	4b61      	ldr	r3, [pc, #388]	; (800295c <HAL_GPIO_Init+0x2fc>)
 80027d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d8:	4a60      	ldr	r2, [pc, #384]	; (800295c <HAL_GPIO_Init+0x2fc>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6613      	str	r3, [r2, #96]	; 0x60
 80027e0:	4b5e      	ldr	r3, [pc, #376]	; (800295c <HAL_GPIO_Init+0x2fc>)
 80027e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027ec:	4a5c      	ldr	r2, [pc, #368]	; (8002960 <HAL_GPIO_Init+0x300>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4013      	ands	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002816:	d02b      	beq.n	8002870 <HAL_GPIO_Init+0x210>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_GPIO_Init+0x304>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d025      	beq.n	800286c <HAL_GPIO_Init+0x20c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a51      	ldr	r2, [pc, #324]	; (8002968 <HAL_GPIO_Init+0x308>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d01f      	beq.n	8002868 <HAL_GPIO_Init+0x208>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a50      	ldr	r2, [pc, #320]	; (800296c <HAL_GPIO_Init+0x30c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d019      	beq.n	8002864 <HAL_GPIO_Init+0x204>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a4f      	ldr	r2, [pc, #316]	; (8002970 <HAL_GPIO_Init+0x310>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_GPIO_Init+0x200>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a4e      	ldr	r2, [pc, #312]	; (8002974 <HAL_GPIO_Init+0x314>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00d      	beq.n	800285c <HAL_GPIO_Init+0x1fc>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a4d      	ldr	r2, [pc, #308]	; (8002978 <HAL_GPIO_Init+0x318>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <HAL_GPIO_Init+0x1f8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a4c      	ldr	r2, [pc, #304]	; (800297c <HAL_GPIO_Init+0x31c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_GPIO_Init+0x1f4>
 8002850:	2307      	movs	r3, #7
 8002852:	e00e      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002854:	2308      	movs	r3, #8
 8002856:	e00c      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002858:	2306      	movs	r3, #6
 800285a:	e00a      	b.n	8002872 <HAL_GPIO_Init+0x212>
 800285c:	2305      	movs	r3, #5
 800285e:	e008      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002860:	2304      	movs	r3, #4
 8002862:	e006      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002864:	2303      	movs	r3, #3
 8002866:	e004      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002868:	2302      	movs	r3, #2
 800286a:	e002      	b.n	8002872 <HAL_GPIO_Init+0x212>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_GPIO_Init+0x212>
 8002870:	2300      	movs	r3, #0
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	f002 0203 	and.w	r2, r2, #3
 8002878:	0092      	lsls	r2, r2, #2
 800287a:	4093      	lsls	r3, r2
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002882:	4937      	ldr	r1, [pc, #220]	; (8002960 <HAL_GPIO_Init+0x300>)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002890:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_GPIO_Init+0x320>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028b4:	4a32      	ldr	r2, [pc, #200]	; (8002980 <HAL_GPIO_Init+0x320>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028ba:	4b31      	ldr	r3, [pc, #196]	; (8002980 <HAL_GPIO_Init+0x320>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028de:	4a28      	ldr	r2, [pc, #160]	; (8002980 <HAL_GPIO_Init+0x320>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028e4:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_GPIO_Init+0x320>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002908:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <HAL_GPIO_Init+0x320>)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800290e:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_GPIO_Init+0x320>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002932:	4a13      	ldr	r2, [pc, #76]	; (8002980 <HAL_GPIO_Init+0x320>)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	f47f ae91 	bne.w	8002670 <HAL_GPIO_Init+0x10>
  }
}
 800294e:	bf00      	nop
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	40021000 	.word	0x40021000
 8002960:	40010000 	.word	0x40010000
 8002964:	48000400 	.word	0x48000400
 8002968:	48000800 	.word	0x48000800
 800296c:	48000c00 	.word	0x48000c00
 8002970:	48001000 	.word	0x48001000
 8002974:	48001400 	.word	0x48001400
 8002978:	48001800 	.word	0x48001800
 800297c:	48001c00 	.word	0x48001c00
 8002980:	40010400 	.word	0x40010400

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029a0:	e002      	b.n	80029a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029b8:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c4:	d102      	bne.n	80029cc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ca:	e00b      	b.n	80029e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029da:	d102      	bne.n	80029e2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80029dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e0:	e000      	b.n	80029e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80029e2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40007000 	.word	0x40007000

080029f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d141      	bne.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a02:	4b4b      	ldr	r3, [pc, #300]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0e:	d131      	bne.n	8002a74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a10:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a16:	4a46      	ldr	r2, [pc, #280]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a20:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a28:	4a41      	ldr	r2, [pc, #260]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a30:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2232      	movs	r2, #50	; 0x32
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a3f      	ldr	r2, [pc, #252]	; (8002b38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	0c9b      	lsrs	r3, r3, #18
 8002a42:	3301      	adds	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a46:	e002      	b.n	8002a4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a4e:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5a:	d102      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f2      	bne.n	8002a48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a62:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6e:	d158      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e057      	b.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a74:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a7a:	4a2d      	ldr	r2, [pc, #180]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a84:	e04d      	b.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8c:	d141      	bne.n	8002b12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a8e:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d131      	bne.n	8002b00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a9c:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa2:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aac:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2232      	movs	r2, #50	; 0x32
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	0c9b      	lsrs	r3, r3, #18
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ad2:	e002      	b.n	8002ada <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae6:	d102      	bne.n	8002aee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f2      	bne.n	8002ad4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afa:	d112      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e011      	b.n	8002b24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b10:	e007      	b.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b20:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40007000 	.word	0x40007000
 8002b34:	20000000 	.word	0x20000000
 8002b38:	431bde83 	.word	0x431bde83

08002b3c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b4a:	6053      	str	r3, [r2, #4]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000

08002b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f000 bc16 	b.w	800339c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b70:	4b96      	ldr	r3, [pc, #600]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b7a:	4b94      	ldr	r3, [pc, #592]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 80e4 	beq.w	8002d5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4c>
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	f040 808b 	bne.w	8002cb6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	f040 8087 	bne.w	8002cb6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ba8:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x64>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e3ed      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1a      	ldr	r2, [r3, #32]
 8002bc4:	4b81      	ldr	r3, [pc, #516]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <HAL_RCC_OscConfig+0x7e>
 8002bd0:	4b7e      	ldr	r3, [pc, #504]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd8:	e005      	b.n	8002be6 <HAL_RCC_OscConfig+0x8a>
 8002bda:	4b7c      	ldr	r3, [pc, #496]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d223      	bcs.n	8002c32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fdca 	bl	8003788 <RCC_SetFlashLatencyFromMSIRange>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e3ce      	b.n	800339c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bfe:	4b73      	ldr	r3, [pc, #460]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a72      	ldr	r2, [pc, #456]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c04:	f043 0308 	orr.w	r3, r3, #8
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b70      	ldr	r3, [pc, #448]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	496d      	ldr	r1, [pc, #436]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c1c:	4b6b      	ldr	r3, [pc, #428]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	4968      	ldr	r1, [pc, #416]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
 8002c30:	e025      	b.n	8002c7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c32:	4b66      	ldr	r3, [pc, #408]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a65      	ldr	r2, [pc, #404]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	4960      	ldr	r1, [pc, #384]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c50:	4b5e      	ldr	r3, [pc, #376]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	495b      	ldr	r1, [pc, #364]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fd8a 	bl	8003788 <RCC_SetFlashLatencyFromMSIRange>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e38e      	b.n	800339c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c7e:	f000 fcbf 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	4950      	ldr	r1, [pc, #320]	; (8002dd0 <HAL_RCC_OscConfig+0x274>)
 8002c90:	5ccb      	ldrb	r3, [r1, r3]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a4e      	ldr	r2, [pc, #312]	; (8002dd4 <HAL_RCC_OscConfig+0x278>)
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <HAL_RCC_OscConfig+0x27c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe f958 	bl	8000f58 <HAL_InitTick>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d052      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	e372      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d032      	beq.n	8002d24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cbe:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a42      	ldr	r2, [pc, #264]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cca:	f7fe f995 	bl	8000ff8 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cd2:	f7fe f991 	bl	8000ff8 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e35b      	b.n	800339c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ce4:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a35      	ldr	r2, [pc, #212]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cf6:	f043 0308 	orr.w	r3, r3, #8
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4930      	ldr	r1, [pc, #192]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	492b      	ldr	r1, [pc, #172]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
 8002d22:	e01a      	b.n	8002d5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d30:	f7fe f962 	bl	8000ff8 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d38:	f7fe f95e 	bl	8000ff8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e328      	b.n	800339c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x1dc>
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d073      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_OscConfig+0x21c>
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d10e      	bne.n	8002d90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d10b      	bne.n	8002d90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d063      	beq.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d15f      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e305      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d106      	bne.n	8002da8 <HAL_RCC_OscConfig+0x24c>
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e025      	b.n	8002df4 <HAL_RCC_OscConfig+0x298>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db0:	d114      	bne.n	8002ddc <HAL_RCC_OscConfig+0x280>
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a02      	ldr	r2, [pc, #8]	; (8002dcc <HAL_RCC_OscConfig+0x270>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e013      	b.n	8002df4 <HAL_RCC_OscConfig+0x298>
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08005974 	.word	0x08005974
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	20000004 	.word	0x20000004
 8002ddc:	4ba0      	ldr	r3, [pc, #640]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a9f      	ldr	r2, [pc, #636]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b9d      	ldr	r3, [pc, #628]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a9c      	ldr	r2, [pc, #624]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f8fc 	bl	8000ff8 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fe f8f8 	bl	8000ff8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e2c2      	b.n	800339c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e16:	4b92      	ldr	r3, [pc, #584]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x2a8>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe f8e8 	bl	8000ff8 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe f8e4 	bl	8000ff8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e2ae      	b.n	800339c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e3e:	4b88      	ldr	r3, [pc, #544]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2d0>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d060      	beq.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x310>
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d119      	bne.n	8002e9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d116      	bne.n	8002e9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6c:	4b7c      	ldr	r3, [pc, #496]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_OscConfig+0x328>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e28b      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b76      	ldr	r3, [pc, #472]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	4973      	ldr	r1, [pc, #460]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e98:	e040      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d023      	beq.n	8002eea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea2:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6e      	ldr	r2, [pc, #440]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe f8a3 	bl	8000ff8 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7fe f89f 	bl	8000ff8 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e269      	b.n	800339c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec8:	4b65      	ldr	r3, [pc, #404]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b62      	ldr	r3, [pc, #392]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	495f      	ldr	r1, [pc, #380]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	e018      	b.n	8002f1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b5d      	ldr	r3, [pc, #372]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a5c      	ldr	r2, [pc, #368]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe f87f 	bl	8000ff8 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fe f87b 	bl	8000ff8 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e245      	b.n	800339c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f10:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f0      	bne.n	8002efe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d03c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01c      	beq.n	8002f6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f36:	4a4a      	ldr	r2, [pc, #296]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe f85a 	bl	8000ff8 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f48:	f7fe f856 	bl	8000ff8 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e220      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f5a:	4b41      	ldr	r3, [pc, #260]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ef      	beq.n	8002f48 <HAL_RCC_OscConfig+0x3ec>
 8002f68:	e01b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f70:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f83d 	bl	8000ff8 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f82:	f7fe f839 	bl	8000ff8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e203      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ef      	bne.n	8002f82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80a6 	beq.w	80030fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fb4:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10d      	bne.n	8002fdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4b27      	ldr	r3, [pc, #156]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	4a26      	ldr	r2, [pc, #152]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6593      	str	r3, [r2, #88]	; 0x58
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fdc:	4b21      	ldr	r3, [pc, #132]	; (8003064 <HAL_RCC_OscConfig+0x508>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d118      	bne.n	800301a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCC_OscConfig+0x508>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <HAL_RCC_OscConfig+0x508>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f800 	bl	8000ff8 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffc:	f7fd fffc 	bl	8000ff8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1c6      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_RCC_OscConfig+0x508>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d108      	bne.n	8003034 <HAL_RCC_OscConfig+0x4d8>
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003032:	e029      	b.n	8003088 <HAL_RCC_OscConfig+0x52c>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b05      	cmp	r3, #5
 800303a:	d115      	bne.n	8003068 <HAL_RCC_OscConfig+0x50c>
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	4a07      	ldr	r2, [pc, #28]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	4a03      	ldr	r2, [pc, #12]	; (8003060 <HAL_RCC_OscConfig+0x504>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x52c>
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
 8003068:	4b9d      	ldr	r3, [pc, #628]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	4a9c      	ldr	r2, [pc, #624]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003078:	4b99      	ldr	r3, [pc, #612]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	4a98      	ldr	r2, [pc, #608]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d016      	beq.n	80030be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fd ffb2 	bl	8000ff8 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fd ffae 	bl	8000ff8 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e176      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ae:	4b8c      	ldr	r3, [pc, #560]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ed      	beq.n	8003098 <HAL_RCC_OscConfig+0x53c>
 80030bc:	e015      	b.n	80030ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030be:	f7fd ff9b 	bl	8000ff8 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fd ff97 	bl	8000ff8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e15f      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030dc:	4b80      	ldr	r3, [pc, #512]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ed      	bne.n	80030c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ea:	7ffb      	ldrb	r3, [r7, #31]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b7b      	ldr	r3, [pc, #492]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	4a7a      	ldr	r2, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d03c      	beq.n	8003182 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01c      	beq.n	800314a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003110:	4b73      	ldr	r3, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003116:	4a72      	ldr	r2, [pc, #456]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fd ff6a 	bl	8000ff8 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003128:	f7fd ff66 	bl	8000ff8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e130      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800313a:	4b69      	ldr	r3, [pc, #420]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 800313c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ef      	beq.n	8003128 <HAL_RCC_OscConfig+0x5cc>
 8003148:	e01b      	b.n	8003182 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800314a:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 800314c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003150:	4a63      	ldr	r2, [pc, #396]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003152:	f023 0301 	bic.w	r3, r3, #1
 8003156:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fd ff4d 	bl	8000ff8 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003162:	f7fd ff49 	bl	8000ff8 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e113      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003174:	4b5a      	ldr	r3, [pc, #360]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ef      	bne.n	8003162 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8107 	beq.w	800339a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	2b02      	cmp	r3, #2
 8003192:	f040 80cf 	bne.w	8003334 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003196:	4b52      	ldr	r3, [pc, #328]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f003 0203 	and.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d12c      	bne.n	8003204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	3b01      	subs	r3, #1
 80031b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d123      	bne.n	8003204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d11b      	bne.n	8003204 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d113      	bne.n	8003204 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	3b01      	subs	r3, #1
 80031ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d109      	bne.n	8003204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d071      	beq.n	80032e8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d068      	beq.n	80032dc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800320a:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003216:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0ba      	b.n	800339c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003226:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 800322c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003230:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003232:	f7fd fee1 	bl	8000ff8 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7fd fedd 	bl	8000ff8 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0a7      	b.n	800339c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324c:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCC_OscConfig+0x788>)
 800325e:	4013      	ands	r3, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003268:	3a01      	subs	r2, #1
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	4311      	orrs	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003272:	0212      	lsls	r2, r2, #8
 8003274:	4311      	orrs	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800327a:	0852      	lsrs	r2, r2, #1
 800327c:	3a01      	subs	r2, #1
 800327e:	0552      	lsls	r2, r2, #21
 8003280:	4311      	orrs	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003286:	0852      	lsrs	r2, r2, #1
 8003288:	3a01      	subs	r2, #1
 800328a:	0652      	lsls	r2, r2, #25
 800328c:	4311      	orrs	r1, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003292:	06d2      	lsls	r2, r2, #27
 8003294:	430a      	orrs	r2, r1
 8003296:	4912      	ldr	r1, [pc, #72]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 8003298:	4313      	orrs	r3, r2
 800329a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800329c:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 80032a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 80032ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032b4:	f7fd fea0 	bl	8000ff8 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fd fe9c 	bl	8000ff8 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e066      	b.n	800339c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <HAL_RCC_OscConfig+0x784>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032da:	e05e      	b.n	800339a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e05d      	b.n	800339c <HAL_RCC_OscConfig+0x840>
 80032e0:	40021000 	.word	0x40021000
 80032e4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e8:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d152      	bne.n	800339a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032f4:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800330c:	f7fd fe74 	bl	8000ff8 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fd fe70 	bl	8000ff8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e03a      	b.n	800339c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003326:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x7b8>
 8003332:	e032      	b.n	800339a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d02d      	beq.n	8003396 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333a:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 8003340:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003344:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003346:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 8003358:	f023 0303 	bic.w	r3, r3, #3
 800335c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 8003364:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fd fe43 	bl	8000ff8 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7fd fe3f 	bl	8000ff8 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e009      	b.n	800339c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x848>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x81a>
 8003394:	e001      	b.n	800339a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021000 	.word	0x40021000

080033a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e10f      	b.n	80035e0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b89      	ldr	r3, [pc, #548]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d910      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b86      	ldr	r3, [pc, #536]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 020f 	bic.w	r2, r3, #15
 80033d6:	4984      	ldr	r1, [pc, #528]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0f7      	b.n	80035e0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8089 	beq.w	8003510 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d133      	bne.n	800346e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003406:	4b79      	ldr	r3, [pc, #484]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0e4      	b.n	80035e0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003416:	f000 fa11 	bl	800383c <RCC_GetSysClockFreqFromPLLSource>
 800341a:	4603      	mov	r3, r0
 800341c:	4a74      	ldr	r2, [pc, #464]	; (80035f0 <HAL_RCC_ClockConfig+0x248>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d955      	bls.n	80034ce <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003422:	4b72      	ldr	r3, [pc, #456]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800342e:	4b6f      	ldr	r3, [pc, #444]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003436:	4a6d      	ldr	r2, [pc, #436]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	e044      	b.n	80034ce <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d03e      	beq.n	80034ce <HAL_RCC_ClockConfig+0x126>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d13a      	bne.n	80034ce <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003458:	4b64      	ldr	r3, [pc, #400]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003460:	4a62      	ldr	r2, [pc, #392]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003466:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e02f      	b.n	80034ce <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003476:	4b5d      	ldr	r3, [pc, #372]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d115      	bne.n	80034ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0ac      	b.n	80035e0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800348e:	4b57      	ldr	r3, [pc, #348]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0a0      	b.n	80035e0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349e:	4b53      	ldr	r3, [pc, #332]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e098      	b.n	80035e0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80034ae:	f000 f8a7 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4a4e      	ldr	r2, [pc, #312]	; (80035f0 <HAL_RCC_ClockConfig+0x248>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d909      	bls.n	80034ce <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ba:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034c2:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ce:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 0203 	bic.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4944      	ldr	r1, [pc, #272]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e0:	f7fd fd8a 	bl	8000ff8 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e8:	f7fd fd86 	bl	8000ff8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e070      	b.n	80035e0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 020c 	and.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	429a      	cmp	r2, r3
 800350e:	d1eb      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d009      	beq.n	8003530 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b33      	ldr	r3, [pc, #204]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4930      	ldr	r1, [pc, #192]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
 800352e:	e008      	b.n	8003542 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d105      	bne.n	8003542 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003536:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800353c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003540:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d210      	bcs.n	8003572 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003550:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 020f 	bic.w	r2, r3, #15
 8003558:	4923      	ldr	r1, [pc, #140]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003560:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <HAL_RCC_ClockConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e036      	b.n	80035e0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	4918      	ldr	r1, [pc, #96]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4910      	ldr	r1, [pc, #64]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035b0:	f000 f826 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <HAL_RCC_ClockConfig+0x244>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <HAL_RCC_ClockConfig+0x24c>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
 80035cc:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x250>)
 80035ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_RCC_ClockConfig+0x254>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fd fcbf 	bl	8000f58 <HAL_InitTick>
 80035da:	4603      	mov	r3, r0
 80035dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40021000 	.word	0x40021000
 80035f0:	04c4b400 	.word	0x04c4b400
 80035f4:	08005974 	.word	0x08005974
 80035f8:	20000000 	.word	0x20000000
 80035fc:	20000004 	.word	0x20000004

08003600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800360e:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003618:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x34>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d121      	bne.n	8003672 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d11e      	bne.n	8003672 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003634:	4b34      	ldr	r3, [pc, #208]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e005      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003650:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800365c:	4a2b      	ldr	r2, [pc, #172]	; (800370c <HAL_RCC_GetSysClockFreq+0x10c>)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003664:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d102      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003678:	4b25      	ldr	r3, [pc, #148]	; (8003710 <HAL_RCC_GetSysClockFreq+0x110>)
 800367a:	61bb      	str	r3, [r7, #24]
 800367c:	e004      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d101      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003684:	4b23      	ldr	r3, [pc, #140]	; (8003714 <HAL_RCC_GetSysClockFreq+0x114>)
 8003686:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d134      	bne.n	80036f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d003      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0xac>
 80036a4:	e005      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036a6:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <HAL_RCC_GetSysClockFreq+0x110>)
 80036a8:	617b      	str	r3, [r7, #20]
      break;
 80036aa:	e005      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_RCC_GetSysClockFreq+0x114>)
 80036ae:	617b      	str	r3, [r7, #20]
      break;
 80036b0:	e002      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	617b      	str	r3, [r7, #20]
      break;
 80036b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b8:	4b13      	ldr	r3, [pc, #76]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	091b      	lsrs	r3, r3, #4
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	3301      	adds	r3, #1
 80036c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	fb03 f202 	mul.w	r2, r3, r2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	0e5b      	lsrs	r3, r3, #25
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	3301      	adds	r3, #1
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036f8:	69bb      	ldr	r3, [r7, #24]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
 800370c:	0800598c 	.word	0x0800598c
 8003710:	00f42400 	.word	0x00f42400
 8003714:	007a1200 	.word	0x007a1200

08003718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_RCC_GetHCLKFreq+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000000 	.word	0x20000000

08003730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003734:	f7ff fff0 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	08005984 	.word	0x08005984

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003760:	f7ff ffda 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0adb      	lsrs	r3, r3, #11
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4904      	ldr	r1, [pc, #16]	; (8003784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40021000 	.word	0x40021000
 8003784:	08005984 	.word	0x08005984

08003788 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037a0:	f7ff f908 	bl	80029b4 <HAL_PWREx_GetVoltageRange>
 80037a4:	6178      	str	r0, [r7, #20]
 80037a6:	e014      	b.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037a8:	4b22      	ldr	r3, [pc, #136]	; (8003834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ac:	4a21      	ldr	r2, [pc, #132]	; (8003834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b2:	6593      	str	r3, [r2, #88]	; 0x58
 80037b4:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037c0:	f7ff f8f8 	bl	80029b4 <HAL_PWREx_GetVoltageRange>
 80037c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037c6:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	4a1a      	ldr	r2, [pc, #104]	; (8003834 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d10b      	bne.n	80037f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b80      	cmp	r3, #128	; 0x80
 80037de:	d913      	bls.n	8003808 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2ba0      	cmp	r3, #160	; 0xa0
 80037e4:	d902      	bls.n	80037ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037e6:	2302      	movs	r3, #2
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	e00d      	b.n	8003808 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037ec:	2301      	movs	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	e00a      	b.n	8003808 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b7f      	cmp	r3, #127	; 0x7f
 80037f6:	d902      	bls.n	80037fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80037f8:	2302      	movs	r3, #2
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	e004      	b.n	8003808 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b70      	cmp	r3, #112	; 0x70
 8003802:	d101      	bne.n	8003808 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003804:	2301      	movs	r3, #1
 8003806:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 020f 	bic.w	r2, r3, #15
 8003810:	4909      	ldr	r1, [pc, #36]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003818:	4b07      	ldr	r3, [pc, #28]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	429a      	cmp	r2, r3
 8003824:	d001      	beq.n	800382a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000
 8003838:	40022000 	.word	0x40022000

0800383c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d118      	bne.n	8003884 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003852:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d107      	bne.n	800386e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800385e:	4b27      	ldr	r3, [pc, #156]	; (80038fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	e005      	b.n	800387a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800386e:	4b23      	ldr	r3, [pc, #140]	; (80038fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d003      	beq.n	800389c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d003      	beq.n	80038a2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800389a:	e005      	b.n	80038a8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800389e:	613b      	str	r3, [r7, #16]
    break;
 80038a0:	e005      	b.n	80038ae <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80038a2:	4b19      	ldr	r3, [pc, #100]	; (8003908 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80038a4:	613b      	str	r3, [r7, #16]
    break;
 80038a6:	e002      	b.n	80038ae <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	613b      	str	r3, [r7, #16]
    break;
 80038ac:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	3301      	adds	r3, #1
 80038ba:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	fb03 f202 	mul.w	r2, r3, r2
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	0e5b      	lsrs	r3, r3, #25
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	3301      	adds	r3, #1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80038ee:	683b      	ldr	r3, [r7, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40021000 	.word	0x40021000
 8003900:	0800598c 	.word	0x0800598c
 8003904:	00f42400 	.word	0x00f42400
 8003908:	007a1200 	.word	0x007a1200

0800390c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003914:	2300      	movs	r3, #0
 8003916:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003918:	2300      	movs	r3, #0
 800391a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	2b00      	cmp	r3, #0
 8003926:	d040      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392c:	2b80      	cmp	r3, #128	; 0x80
 800392e:	d02a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003930:	2b80      	cmp	r3, #128	; 0x80
 8003932:	d825      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003934:	2b60      	cmp	r3, #96	; 0x60
 8003936:	d026      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003938:	2b60      	cmp	r3, #96	; 0x60
 800393a:	d821      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d006      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d81d      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003948:	2b20      	cmp	r3, #32
 800394a:	d010      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800394c:	e018      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800394e:	4b89      	ldr	r3, [pc, #548]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	4a88      	ldr	r2, [pc, #544]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800395a:	e015      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fb02 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800396c:	e00c      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3320      	adds	r3, #32
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fbed 	bl	8004154 <RCCEx_PLLSAI2_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800397e:	e003      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	74fb      	strb	r3, [r7, #19]
      break;
 8003984:	e000      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800398e:	4b79      	ldr	r3, [pc, #484]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003990:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003994:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399c:	4975      	ldr	r1, [pc, #468]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80039a4:	e001      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d047      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039be:	d030      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c4:	d82a      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ca:	d02a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d0:	d824      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d6:	d008      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xde>
 80039d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039dc:	d81e      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80039e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e6:	d010      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80039e8:	e018      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039ea:	4b62      	ldr	r3, [pc, #392]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	4a61      	ldr	r2, [pc, #388]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039f6:	e015      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fab4 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a08:	e00c      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3320      	adds	r3, #32
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fb9f 	bl	8004154 <RCCEx_PLLSAI2_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a1a:	e003      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	74fb      	strb	r3, [r7, #19]
      break;
 8003a20:	e000      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a2a:	4b52      	ldr	r3, [pc, #328]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	494e      	ldr	r1, [pc, #312]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a40:	e001      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 809f 	beq.w	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a54:	2300      	movs	r3, #0
 8003a56:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a58:	4b46      	ldr	r3, [pc, #280]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6593      	str	r3, [r2, #88]	; 0x58
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a86:	2301      	movs	r3, #1
 8003a88:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a3a      	ldr	r2, [pc, #232]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a96:	f7fd faaf 	bl	8000ff8 <HAL_GetTick>
 8003a9a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a9c:	e009      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9e:	f7fd faab 	bl	8000ff8 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d902      	bls.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	74fb      	strb	r3, [r7, #19]
        break;
 8003ab0:	e005      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ab2:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0ef      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d15b      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ace:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01f      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d019      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aee:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003afe:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b04:	4a1b      	ldr	r2, [pc, #108]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b0e:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d016      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fa6a 	bl	8000ff8 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b26:	e00b      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fd fa66 	bl	8000ff8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d902      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b3e:	e006      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0ec      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b54:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b64:	4903      	ldr	r1, [pc, #12]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b6c:	e008      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	74bb      	strb	r3, [r7, #18]
 8003b72:	e005      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	7cfb      	ldrb	r3, [r7, #19]
 8003b7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b80:	7c7b      	ldrb	r3, [r7, #17]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d105      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b86:	4ba0      	ldr	r3, [pc, #640]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	4a9f      	ldr	r2, [pc, #636]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b9e:	4b9a      	ldr	r3, [pc, #616]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba4:	f023 0203 	bic.w	r2, r3, #3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	4996      	ldr	r1, [pc, #600]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bc0:	4b91      	ldr	r3, [pc, #580]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	f023 020c 	bic.w	r2, r3, #12
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	498e      	ldr	r1, [pc, #568]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003be2:	4b89      	ldr	r3, [pc, #548]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	4985      	ldr	r1, [pc, #532]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c04:	4b80      	ldr	r3, [pc, #512]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c12:	497d      	ldr	r1, [pc, #500]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c26:	4b78      	ldr	r3, [pc, #480]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c34:	4974      	ldr	r1, [pc, #464]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c48:	4b6f      	ldr	r3, [pc, #444]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c56:	496c      	ldr	r1, [pc, #432]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c6a:	4b67      	ldr	r3, [pc, #412]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c78:	4963      	ldr	r1, [pc, #396]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c8c:	4b5e      	ldr	r3, [pc, #376]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c9a:	495b      	ldr	r1, [pc, #364]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cae:	4b56      	ldr	r3, [pc, #344]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	4952      	ldr	r1, [pc, #328]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cd0:	4b4d      	ldr	r3, [pc, #308]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	494a      	ldr	r1, [pc, #296]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cf2:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d00:	4941      	ldr	r1, [pc, #260]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d14:	4b3c      	ldr	r3, [pc, #240]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d1a:	f023 0203 	bic.w	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d22:	4939      	ldr	r1, [pc, #228]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d028      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d36:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d44:	4930      	ldr	r1, [pc, #192]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d54:	d106      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d56:	4b2c      	ldr	r3, [pc, #176]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	4a2b      	ldr	r2, [pc, #172]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d60:	60d3      	str	r3, [r2, #12]
 8003d62:	e011      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	2101      	movs	r1, #1
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f8f9 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d04d      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9c:	d108      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003d9e:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003daa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003dae:	e012      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003db0:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003db6:	4a14      	ldr	r2, [pc, #80]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dbc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dce:	490e      	ldr	r1, [pc, #56]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dde:	d106      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dea:	60d3      	str	r3, [r2, #12]
 8003dec:	e020      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df6:	d109      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a02      	ldr	r2, [pc, #8]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e02:	60d3      	str	r3, [r2, #12]
 8003e04:	e014      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f8a5 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d028      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e3c:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4a:	4947      	ldr	r1, [pc, #284]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5c:	4b42      	ldr	r3, [pc, #264]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a41      	ldr	r2, [pc, #260]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e66:	60d3      	str	r3, [r2, #12]
 8003e68:	e011      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e72:	d10c      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	2101      	movs	r1, #1
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f876 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e84:	7cfb      	ldrb	r3, [r7, #19]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01e      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e9a:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eaa:	492f      	ldr	r1, [pc, #188]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2102      	movs	r1, #2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f851 	bl	8003f6c <RCCEx_PLLSAI1_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00b      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ee4:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eea:	f023 0204 	bic.w	r2, r3, #4
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef4:	491c      	ldr	r1, [pc, #112]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00b      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f08:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f0e:	f023 0218 	bic.w	r2, r3, #24
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	4913      	ldr	r1, [pc, #76]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d017      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f3c:	490a      	ldr	r1, [pc, #40]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000

08003f6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00e      	beq.n	8003fa4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f86:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0203 	and.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d103      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
       ||
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d142      	bne.n	8004024 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	e03f      	b.n	8004024 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d018      	beq.n	8003fde <RCCEx_PLLSAI1_Config+0x72>
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d825      	bhi.n	8003ffc <RCCEx_PLLSAI1_Config+0x90>
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d002      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0x4e>
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d009      	beq.n	8003fcc <RCCEx_PLLSAI1_Config+0x60>
 8003fb8:	e020      	b.n	8003ffc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fba:	4b62      	ldr	r3, [pc, #392]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11d      	bne.n	8004002 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fca:	e01a      	b.n	8004002 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fcc:	4b5d      	ldr	r3, [pc, #372]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d116      	bne.n	8004006 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fdc:	e013      	b.n	8004006 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fde:	4b59      	ldr	r3, [pc, #356]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fea:	4b56      	ldr	r3, [pc, #344]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ffa:	e006      	b.n	800400a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8004000:	e004      	b.n	800400c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004002:	bf00      	nop
 8004004:	e002      	b.n	800400c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004006:	bf00      	nop
 8004008:	e000      	b.n	800400c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800400a:	bf00      	nop
    }

    if(status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d108      	bne.n	8004024 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004012:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4949      	ldr	r1, [pc, #292]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004020:	4313      	orrs	r3, r2
 8004022:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 8086 	bne.w	8004138 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800402c:	4b45      	ldr	r3, [pc, #276]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a44      	ldr	r2, [pc, #272]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004032:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fc ffde 	bl	8000ff8 <HAL_GetTick>
 800403c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800403e:	e009      	b.n	8004054 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004040:	f7fc ffda 	bl	8000ff8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d902      	bls.n	8004054 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	73fb      	strb	r3, [r7, #15]
        break;
 8004052:	e005      	b.n	8004060 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004054:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ef      	bne.n	8004040 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d168      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d113      	bne.n	8004094 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800406c:	4b35      	ldr	r3, [pc, #212]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	4b35      	ldr	r3, [pc, #212]	; (8004148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004072:	4013      	ands	r3, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	0211      	lsls	r1, r2, #8
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	06d2      	lsls	r2, r2, #27
 8004080:	4311      	orrs	r1, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6852      	ldr	r2, [r2, #4]
 8004086:	3a01      	subs	r2, #1
 8004088:	0112      	lsls	r2, r2, #4
 800408a:	430a      	orrs	r2, r1
 800408c:	492d      	ldr	r1, [pc, #180]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 800408e:	4313      	orrs	r3, r2
 8004090:	610b      	str	r3, [r1, #16]
 8004092:	e02d      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d115      	bne.n	80040c6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800409a:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	4b2b      	ldr	r3, [pc, #172]	; (800414c <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6892      	ldr	r2, [r2, #8]
 80040a6:	0211      	lsls	r1, r2, #8
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6912      	ldr	r2, [r2, #16]
 80040ac:	0852      	lsrs	r2, r2, #1
 80040ae:	3a01      	subs	r2, #1
 80040b0:	0552      	lsls	r2, r2, #21
 80040b2:	4311      	orrs	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6852      	ldr	r2, [r2, #4]
 80040b8:	3a01      	subs	r2, #1
 80040ba:	0112      	lsls	r2, r2, #4
 80040bc:	430a      	orrs	r2, r1
 80040be:	4921      	ldr	r1, [pc, #132]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	610b      	str	r3, [r1, #16]
 80040c4:	e014      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040c6:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	4b21      	ldr	r3, [pc, #132]	; (8004150 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6892      	ldr	r2, [r2, #8]
 80040d2:	0211      	lsls	r1, r2, #8
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6952      	ldr	r2, [r2, #20]
 80040d8:	0852      	lsrs	r2, r2, #1
 80040da:	3a01      	subs	r2, #1
 80040dc:	0652      	lsls	r2, r2, #25
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6852      	ldr	r2, [r2, #4]
 80040e4:	3a01      	subs	r2, #1
 80040e6:	0112      	lsls	r2, r2, #4
 80040e8:	430a      	orrs	r2, r1
 80040ea:	4916      	ldr	r1, [pc, #88]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040f0:	4b14      	ldr	r3, [pc, #80]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fc ff7c 	bl	8000ff8 <HAL_GetTick>
 8004100:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004102:	e009      	b.n	8004118 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004104:	f7fc ff78 	bl	8000ff8 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d902      	bls.n	8004118 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	73fb      	strb	r3, [r7, #15]
          break;
 8004116:	e005      	b.n	8004124 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ef      	beq.n	8004104 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4904      	ldr	r1, [pc, #16]	; (8004144 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	07ff800f 	.word	0x07ff800f
 800414c:	ff9f800f 	.word	0xff9f800f
 8004150:	f9ff800f 	.word	0xf9ff800f

08004154 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004162:	4b72      	ldr	r3, [pc, #456]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00e      	beq.n	800418c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800416e:	4b6f      	ldr	r3, [pc, #444]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f003 0203 	and.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d103      	bne.n	8004186 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
       ||
 8004182:	2b00      	cmp	r3, #0
 8004184:	d142      	bne.n	800420c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
 800418a:	e03f      	b.n	800420c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d018      	beq.n	80041c6 <RCCEx_PLLSAI2_Config+0x72>
 8004194:	2b03      	cmp	r3, #3
 8004196:	d825      	bhi.n	80041e4 <RCCEx_PLLSAI2_Config+0x90>
 8004198:	2b01      	cmp	r3, #1
 800419a:	d002      	beq.n	80041a2 <RCCEx_PLLSAI2_Config+0x4e>
 800419c:	2b02      	cmp	r3, #2
 800419e:	d009      	beq.n	80041b4 <RCCEx_PLLSAI2_Config+0x60>
 80041a0:	e020      	b.n	80041e4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041a2:	4b62      	ldr	r3, [pc, #392]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d11d      	bne.n	80041ea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b2:	e01a      	b.n	80041ea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041b4:	4b5d      	ldr	r3, [pc, #372]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d116      	bne.n	80041ee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e013      	b.n	80041ee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041c6:	4b59      	ldr	r3, [pc, #356]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10f      	bne.n	80041f2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041d2:	4b56      	ldr	r3, [pc, #344]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041e2:	e006      	b.n	80041f2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      break;
 80041e8:	e004      	b.n	80041f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80041f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80041fa:	4b4c      	ldr	r3, [pc, #304]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4949      	ldr	r1, [pc, #292]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004208:	4313      	orrs	r3, r2
 800420a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 8086 	bne.w	8004320 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004214:	4b45      	ldr	r3, [pc, #276]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a44      	ldr	r2, [pc, #272]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 800421a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004220:	f7fc feea 	bl	8000ff8 <HAL_GetTick>
 8004224:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004226:	e009      	b.n	800423c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004228:	f7fc fee6 	bl	8000ff8 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d902      	bls.n	800423c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	73fb      	strb	r3, [r7, #15]
        break;
 800423a:	e005      	b.n	8004248 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800423c:	4b3b      	ldr	r3, [pc, #236]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1ef      	bne.n	8004228 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d168      	bne.n	8004320 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d113      	bne.n	800427c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004254:	4b35      	ldr	r3, [pc, #212]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	4b35      	ldr	r3, [pc, #212]	; (8004330 <RCCEx_PLLSAI2_Config+0x1dc>)
 800425a:	4013      	ands	r3, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6892      	ldr	r2, [r2, #8]
 8004260:	0211      	lsls	r1, r2, #8
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68d2      	ldr	r2, [r2, #12]
 8004266:	06d2      	lsls	r2, r2, #27
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6852      	ldr	r2, [r2, #4]
 800426e:	3a01      	subs	r2, #1
 8004270:	0112      	lsls	r2, r2, #4
 8004272:	430a      	orrs	r2, r1
 8004274:	492d      	ldr	r1, [pc, #180]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	614b      	str	r3, [r1, #20]
 800427a:	e02d      	b.n	80042d8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d115      	bne.n	80042ae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004282:	4b2a      	ldr	r3, [pc, #168]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	0211      	lsls	r1, r2, #8
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6912      	ldr	r2, [r2, #16]
 8004294:	0852      	lsrs	r2, r2, #1
 8004296:	3a01      	subs	r2, #1
 8004298:	0552      	lsls	r2, r2, #21
 800429a:	4311      	orrs	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6852      	ldr	r2, [r2, #4]
 80042a0:	3a01      	subs	r2, #1
 80042a2:	0112      	lsls	r2, r2, #4
 80042a4:	430a      	orrs	r2, r1
 80042a6:	4921      	ldr	r1, [pc, #132]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	614b      	str	r3, [r1, #20]
 80042ac:	e014      	b.n	80042d8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042ae:	4b1f      	ldr	r3, [pc, #124]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	4b21      	ldr	r3, [pc, #132]	; (8004338 <RCCEx_PLLSAI2_Config+0x1e4>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6892      	ldr	r2, [r2, #8]
 80042ba:	0211      	lsls	r1, r2, #8
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6952      	ldr	r2, [r2, #20]
 80042c0:	0852      	lsrs	r2, r2, #1
 80042c2:	3a01      	subs	r2, #1
 80042c4:	0652      	lsls	r2, r2, #25
 80042c6:	4311      	orrs	r1, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6852      	ldr	r2, [r2, #4]
 80042cc:	3a01      	subs	r2, #1
 80042ce:	0112      	lsls	r2, r2, #4
 80042d0:	430a      	orrs	r2, r1
 80042d2:	4916      	ldr	r1, [pc, #88]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a13      	ldr	r2, [pc, #76]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fc fe88 	bl	8000ff8 <HAL_GetTick>
 80042e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042ea:	e009      	b.n	8004300 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042ec:	f7fc fe84 	bl	8000ff8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d902      	bls.n	8004300 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	73fb      	strb	r3, [r7, #15]
          break;
 80042fe:	e005      	b.n	800430c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004300:	4b0a      	ldr	r3, [pc, #40]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ef      	beq.n	80042ec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	4904      	ldr	r1, [pc, #16]	; (800432c <RCCEx_PLLSAI2_Config+0x1d8>)
 800431c:	4313      	orrs	r3, r2
 800431e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	07ff800f 	.word	0x07ff800f
 8004334:	ff9f800f 	.word	0xff9f800f
 8004338:	f9ff800f 	.word	0xf9ff800f

0800433c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e042      	b.n	80043d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fc fc83 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2224      	movs	r2, #36	; 0x24
 800436a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8c4 	bl	800450c <UART_SetConfig>
 8004384:	4603      	mov	r3, r0
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e022      	b.n	80043d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fbb4 	bl	8004b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fc3b 	bl	8004c48 <UART_CheckIdleState>
 80043d2:	4603      	mov	r3, r0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	f040 8084 	bne.w	8004500 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_UART_Transmit+0x28>
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e07c      	b.n	8004502 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_UART_Transmit+0x3a>
 8004412:	2302      	movs	r3, #2
 8004414:	e075      	b.n	8004502 <HAL_UART_Transmit+0x126>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2221      	movs	r2, #33	; 0x21
 800442a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442e:	f7fc fde3 	bl	8000ff8 <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	d108      	bne.n	8004460 <HAL_UART_Transmit+0x84>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e003      	b.n	8004468 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004470:	e02d      	b.n	80044ce <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fc2e 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e03a      	b.n	8004502 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	881a      	ldrh	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449e:	b292      	uxth	r2, r2
 80044a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3302      	adds	r3, #2
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	e008      	b.n	80044bc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	b292      	uxth	r2, r2
 80044b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3301      	adds	r3, #1
 80044ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1cb      	bne.n	8004472 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2140      	movs	r1, #64	; 0x40
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fbfa 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e006      	b.n	8004502 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e000      	b.n	8004502 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004500:	2302      	movs	r3, #2
  }
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b08c      	sub	sp, #48	; 0x30
 8004512:	af00      	add	r7, sp, #0
 8004514:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	431a      	orrs	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	431a      	orrs	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	4313      	orrs	r3, r2
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4baa      	ldr	r3, [pc, #680]	; (80047e4 <UART_SetConfig+0x2d8>)
 800453c:	4013      	ands	r3, r2
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004544:	430b      	orrs	r3, r1
 8004546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a9f      	ldr	r2, [pc, #636]	; (80047e8 <UART_SetConfig+0x2dc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004574:	4313      	orrs	r3, r2
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004582:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800458c:	430b      	orrs	r3, r1
 800458e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f023 010f 	bic.w	r1, r3, #15
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a90      	ldr	r2, [pc, #576]	; (80047ec <UART_SetConfig+0x2e0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d125      	bne.n	80045fc <UART_SetConfig+0xf0>
 80045b0:	4b8f      	ldr	r3, [pc, #572]	; (80047f0 <UART_SetConfig+0x2e4>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d81a      	bhi.n	80045f4 <UART_SetConfig+0xe8>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <UART_SetConfig+0xb8>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045e5 	.word	0x080045e5
 80045cc:	080045dd 	.word	0x080045dd
 80045d0:	080045ed 	.word	0x080045ed
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045da:	e116      	b.n	800480a <UART_SetConfig+0x2fe>
 80045dc:	2302      	movs	r3, #2
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e2:	e112      	b.n	800480a <UART_SetConfig+0x2fe>
 80045e4:	2304      	movs	r3, #4
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ea:	e10e      	b.n	800480a <UART_SetConfig+0x2fe>
 80045ec:	2308      	movs	r3, #8
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f2:	e10a      	b.n	800480a <UART_SetConfig+0x2fe>
 80045f4:	2310      	movs	r3, #16
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045fa:	e106      	b.n	800480a <UART_SetConfig+0x2fe>
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a7c      	ldr	r2, [pc, #496]	; (80047f4 <UART_SetConfig+0x2e8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d138      	bne.n	8004678 <UART_SetConfig+0x16c>
 8004606:	4b7a      	ldr	r3, [pc, #488]	; (80047f0 <UART_SetConfig+0x2e4>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b0c      	cmp	r3, #12
 8004612:	d82d      	bhi.n	8004670 <UART_SetConfig+0x164>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <UART_SetConfig+0x110>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004651 	.word	0x08004651
 8004620:	08004671 	.word	0x08004671
 8004624:	08004671 	.word	0x08004671
 8004628:	08004671 	.word	0x08004671
 800462c:	08004661 	.word	0x08004661
 8004630:	08004671 	.word	0x08004671
 8004634:	08004671 	.word	0x08004671
 8004638:	08004671 	.word	0x08004671
 800463c:	08004659 	.word	0x08004659
 8004640:	08004671 	.word	0x08004671
 8004644:	08004671 	.word	0x08004671
 8004648:	08004671 	.word	0x08004671
 800464c:	08004669 	.word	0x08004669
 8004650:	2300      	movs	r3, #0
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004656:	e0d8      	b.n	800480a <UART_SetConfig+0x2fe>
 8004658:	2302      	movs	r3, #2
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800465e:	e0d4      	b.n	800480a <UART_SetConfig+0x2fe>
 8004660:	2304      	movs	r3, #4
 8004662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004666:	e0d0      	b.n	800480a <UART_SetConfig+0x2fe>
 8004668:	2308      	movs	r3, #8
 800466a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800466e:	e0cc      	b.n	800480a <UART_SetConfig+0x2fe>
 8004670:	2310      	movs	r3, #16
 8004672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004676:	e0c8      	b.n	800480a <UART_SetConfig+0x2fe>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a5e      	ldr	r2, [pc, #376]	; (80047f8 <UART_SetConfig+0x2ec>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d125      	bne.n	80046ce <UART_SetConfig+0x1c2>
 8004682:	4b5b      	ldr	r3, [pc, #364]	; (80047f0 <UART_SetConfig+0x2e4>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d016      	beq.n	80046be <UART_SetConfig+0x1b2>
 8004690:	2b30      	cmp	r3, #48	; 0x30
 8004692:	d818      	bhi.n	80046c6 <UART_SetConfig+0x1ba>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d00a      	beq.n	80046ae <UART_SetConfig+0x1a2>
 8004698:	2b20      	cmp	r3, #32
 800469a:	d814      	bhi.n	80046c6 <UART_SetConfig+0x1ba>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <UART_SetConfig+0x19a>
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d008      	beq.n	80046b6 <UART_SetConfig+0x1aa>
 80046a4:	e00f      	b.n	80046c6 <UART_SetConfig+0x1ba>
 80046a6:	2300      	movs	r3, #0
 80046a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ac:	e0ad      	b.n	800480a <UART_SetConfig+0x2fe>
 80046ae:	2302      	movs	r3, #2
 80046b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046b4:	e0a9      	b.n	800480a <UART_SetConfig+0x2fe>
 80046b6:	2304      	movs	r3, #4
 80046b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046bc:	e0a5      	b.n	800480a <UART_SetConfig+0x2fe>
 80046be:	2308      	movs	r3, #8
 80046c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c4:	e0a1      	b.n	800480a <UART_SetConfig+0x2fe>
 80046c6:	2310      	movs	r3, #16
 80046c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046cc:	e09d      	b.n	800480a <UART_SetConfig+0x2fe>
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a4a      	ldr	r2, [pc, #296]	; (80047fc <UART_SetConfig+0x2f0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d125      	bne.n	8004724 <UART_SetConfig+0x218>
 80046d8:	4b45      	ldr	r3, [pc, #276]	; (80047f0 <UART_SetConfig+0x2e4>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046e2:	2bc0      	cmp	r3, #192	; 0xc0
 80046e4:	d016      	beq.n	8004714 <UART_SetConfig+0x208>
 80046e6:	2bc0      	cmp	r3, #192	; 0xc0
 80046e8:	d818      	bhi.n	800471c <UART_SetConfig+0x210>
 80046ea:	2b80      	cmp	r3, #128	; 0x80
 80046ec:	d00a      	beq.n	8004704 <UART_SetConfig+0x1f8>
 80046ee:	2b80      	cmp	r3, #128	; 0x80
 80046f0:	d814      	bhi.n	800471c <UART_SetConfig+0x210>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <UART_SetConfig+0x1f0>
 80046f6:	2b40      	cmp	r3, #64	; 0x40
 80046f8:	d008      	beq.n	800470c <UART_SetConfig+0x200>
 80046fa:	e00f      	b.n	800471c <UART_SetConfig+0x210>
 80046fc:	2300      	movs	r3, #0
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004702:	e082      	b.n	800480a <UART_SetConfig+0x2fe>
 8004704:	2302      	movs	r3, #2
 8004706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800470a:	e07e      	b.n	800480a <UART_SetConfig+0x2fe>
 800470c:	2304      	movs	r3, #4
 800470e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004712:	e07a      	b.n	800480a <UART_SetConfig+0x2fe>
 8004714:	2308      	movs	r3, #8
 8004716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800471a:	e076      	b.n	800480a <UART_SetConfig+0x2fe>
 800471c:	2310      	movs	r3, #16
 800471e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004722:	e072      	b.n	800480a <UART_SetConfig+0x2fe>
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a35      	ldr	r2, [pc, #212]	; (8004800 <UART_SetConfig+0x2f4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d12a      	bne.n	8004784 <UART_SetConfig+0x278>
 800472e:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <UART_SetConfig+0x2e4>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800473c:	d01a      	beq.n	8004774 <UART_SetConfig+0x268>
 800473e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004742:	d81b      	bhi.n	800477c <UART_SetConfig+0x270>
 8004744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004748:	d00c      	beq.n	8004764 <UART_SetConfig+0x258>
 800474a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474e:	d815      	bhi.n	800477c <UART_SetConfig+0x270>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <UART_SetConfig+0x250>
 8004754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004758:	d008      	beq.n	800476c <UART_SetConfig+0x260>
 800475a:	e00f      	b.n	800477c <UART_SetConfig+0x270>
 800475c:	2300      	movs	r3, #0
 800475e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004762:	e052      	b.n	800480a <UART_SetConfig+0x2fe>
 8004764:	2302      	movs	r3, #2
 8004766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800476a:	e04e      	b.n	800480a <UART_SetConfig+0x2fe>
 800476c:	2304      	movs	r3, #4
 800476e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004772:	e04a      	b.n	800480a <UART_SetConfig+0x2fe>
 8004774:	2308      	movs	r3, #8
 8004776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800477a:	e046      	b.n	800480a <UART_SetConfig+0x2fe>
 800477c:	2310      	movs	r3, #16
 800477e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004782:	e042      	b.n	800480a <UART_SetConfig+0x2fe>
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <UART_SetConfig+0x2dc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d13a      	bne.n	8004804 <UART_SetConfig+0x2f8>
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <UART_SetConfig+0x2e4>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004798:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800479c:	d01a      	beq.n	80047d4 <UART_SetConfig+0x2c8>
 800479e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a2:	d81b      	bhi.n	80047dc <UART_SetConfig+0x2d0>
 80047a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a8:	d00c      	beq.n	80047c4 <UART_SetConfig+0x2b8>
 80047aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ae:	d815      	bhi.n	80047dc <UART_SetConfig+0x2d0>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <UART_SetConfig+0x2b0>
 80047b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b8:	d008      	beq.n	80047cc <UART_SetConfig+0x2c0>
 80047ba:	e00f      	b.n	80047dc <UART_SetConfig+0x2d0>
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047c2:	e022      	b.n	800480a <UART_SetConfig+0x2fe>
 80047c4:	2302      	movs	r3, #2
 80047c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ca:	e01e      	b.n	800480a <UART_SetConfig+0x2fe>
 80047cc:	2304      	movs	r3, #4
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047d2:	e01a      	b.n	800480a <UART_SetConfig+0x2fe>
 80047d4:	2308      	movs	r3, #8
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047da:	e016      	b.n	800480a <UART_SetConfig+0x2fe>
 80047dc:	2310      	movs	r3, #16
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e2:	e012      	b.n	800480a <UART_SetConfig+0x2fe>
 80047e4:	cfff69f3 	.word	0xcfff69f3
 80047e8:	40008000 	.word	0x40008000
 80047ec:	40013800 	.word	0x40013800
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40004400 	.word	0x40004400
 80047f8:	40004800 	.word	0x40004800
 80047fc:	40004c00 	.word	0x40004c00
 8004800:	40005000 	.word	0x40005000
 8004804:	2310      	movs	r3, #16
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4aae      	ldr	r2, [pc, #696]	; (8004ac8 <UART_SetConfig+0x5bc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	f040 8097 	bne.w	8004944 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004816:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800481a:	2b08      	cmp	r3, #8
 800481c:	d823      	bhi.n	8004866 <UART_SetConfig+0x35a>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0x318>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004849 	.word	0x08004849
 8004828:	08004867 	.word	0x08004867
 800482c:	08004851 	.word	0x08004851
 8004830:	08004867 	.word	0x08004867
 8004834:	08004857 	.word	0x08004857
 8004838:	08004867 	.word	0x08004867
 800483c:	08004867 	.word	0x08004867
 8004840:	08004867 	.word	0x08004867
 8004844:	0800485f 	.word	0x0800485f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7fe ff72 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 800484c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800484e:	e010      	b.n	8004872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004850:	4b9e      	ldr	r3, [pc, #632]	; (8004acc <UART_SetConfig+0x5c0>)
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004854:	e00d      	b.n	8004872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004856:	f7fe fed3 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 800485a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800485c:	e009      	b.n	8004872 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004864:	e005      	b.n	8004872 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004870:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8130 	beq.w	8004ada <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	4a94      	ldr	r2, [pc, #592]	; (8004ad0 <UART_SetConfig+0x5c4>)
 8004880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004884:	461a      	mov	r2, r3
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	fbb3 f3f2 	udiv	r3, r3, r2
 800488c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4413      	add	r3, r2
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	429a      	cmp	r2, r3
 800489c:	d305      	bcc.n	80048aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d903      	bls.n	80048b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048b0:	e113      	b.n	8004ada <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	2200      	movs	r2, #0
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	60fa      	str	r2, [r7, #12]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	4a84      	ldr	r2, [pc, #528]	; (8004ad0 <UART_SetConfig+0x5c4>)
 80048c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2200      	movs	r2, #0
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048d4:	f7fb fcec 	bl	80002b0 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	020b      	lsls	r3, r1, #8
 80048ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048ee:	0202      	lsls	r2, r0, #8
 80048f0:	6979      	ldr	r1, [r7, #20]
 80048f2:	6849      	ldr	r1, [r1, #4]
 80048f4:	0849      	lsrs	r1, r1, #1
 80048f6:	2000      	movs	r0, #0
 80048f8:	460c      	mov	r4, r1
 80048fa:	4605      	mov	r5, r0
 80048fc:	eb12 0804 	adds.w	r8, r2, r4
 8004900:	eb43 0905 	adc.w	r9, r3, r5
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	469a      	mov	sl, r3
 800490c:	4693      	mov	fp, r2
 800490e:	4652      	mov	r2, sl
 8004910:	465b      	mov	r3, fp
 8004912:	4640      	mov	r0, r8
 8004914:	4649      	mov	r1, r9
 8004916:	f7fb fccb 	bl	80002b0 <__aeabi_uldivmod>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4613      	mov	r3, r2
 8004920:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004928:	d308      	bcc.n	800493c <UART_SetConfig+0x430>
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004930:	d204      	bcs.n	800493c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6a3a      	ldr	r2, [r7, #32]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	e0ce      	b.n	8004ada <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004942:	e0ca      	b.n	8004ada <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494c:	d167      	bne.n	8004a1e <UART_SetConfig+0x512>
  {
    switch (clocksource)
 800494e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004952:	2b08      	cmp	r3, #8
 8004954:	d827      	bhi.n	80049a6 <UART_SetConfig+0x49a>
 8004956:	a201      	add	r2, pc, #4	; (adr r2, 800495c <UART_SetConfig+0x450>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004997 	.word	0x08004997
 8004970:	080049a7 	.word	0x080049a7
 8004974:	080049a7 	.word	0x080049a7
 8004978:	080049a7 	.word	0x080049a7
 800497c:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7fe fed6 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 8004984:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004986:	e014      	b.n	80049b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7fe fee8 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 800498c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800498e:	e010      	b.n	80049b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b4e      	ldr	r3, [pc, #312]	; (8004acc <UART_SetConfig+0x5c0>)
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004994:	e00d      	b.n	80049b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe fe33 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800499c:	e009      	b.n	80049b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049a4:	e005      	b.n	80049b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8090 	beq.w	8004ada <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	4a44      	ldr	r2, [pc, #272]	; (8004ad0 <UART_SetConfig+0x5c4>)
 80049c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049c4:	461a      	mov	r2, r3
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049cc:	005a      	lsls	r2, r3, #1
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	441a      	add	r2, r3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	fbb2 f3f3 	udiv	r3, r2, r3
 80049de:	b29b      	uxth	r3, r3
 80049e0:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	2b0f      	cmp	r3, #15
 80049e6:	d916      	bls.n	8004a16 <UART_SetConfig+0x50a>
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ee:	d212      	bcs.n	8004a16 <UART_SetConfig+0x50a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f023 030f 	bic.w	r3, r3, #15
 80049f8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	8bfb      	ldrh	r3, [r7, #30]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	8bfa      	ldrh	r2, [r7, #30]
 8004a12:	60da      	str	r2, [r3, #12]
 8004a14:	e061      	b.n	8004ada <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a1c:	e05d      	b.n	8004ada <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d827      	bhi.n	8004a76 <UART_SetConfig+0x56a>
 8004a26:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <UART_SetConfig+0x520>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a59 	.word	0x08004a59
 8004a34:	08004a61 	.word	0x08004a61
 8004a38:	08004a77 	.word	0x08004a77
 8004a3c:	08004a67 	.word	0x08004a67
 8004a40:	08004a77 	.word	0x08004a77
 8004a44:	08004a77 	.word	0x08004a77
 8004a48:	08004a77 	.word	0x08004a77
 8004a4c:	08004a6f 	.word	0x08004a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a50:	f7fe fe6e 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 8004a54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a56:	e014      	b.n	8004a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a58:	f7fe fe80 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 8004a5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a5e:	e010      	b.n	8004a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a60:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <UART_SetConfig+0x5c0>)
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a64:	e00d      	b.n	8004a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a66:	f7fe fdcb 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 8004a6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a6c:	e009      	b.n	8004a82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a74:	e005      	b.n	8004a82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a80:	bf00      	nop
    }

    if (pclk != 0U)
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d028      	beq.n	8004ada <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	4a10      	ldr	r2, [pc, #64]	; (8004ad0 <UART_SetConfig+0x5c4>)
 8004a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	441a      	add	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	2b0f      	cmp	r3, #15
 8004ab2:	d90f      	bls.n	8004ad4 <UART_SetConfig+0x5c8>
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aba:	d20b      	bcs.n	8004ad4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = usartdiv;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a3a      	ldr	r2, [r7, #32]
 8004ac2:	60da      	str	r2, [r3, #12]
 8004ac4:	e009      	b.n	8004ada <UART_SetConfig+0x5ce>
 8004ac6:	bf00      	nop
 8004ac8:	40008000 	.word	0x40008000
 8004acc:	00f42400 	.word	0x00f42400
 8004ad0:	080059bc 	.word	0x080059bc
      }
      else
      {
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2200      	movs	r2, #0
 8004af4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004af6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3730      	adds	r7, #48	; 0x30
 8004afe:	46bd      	mov	sp, r7
 8004b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01a      	beq.n	8004c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c02:	d10a      	bne.n	8004c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c58:	f7fc f9ce 	bl	8000ff8 <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d10e      	bne.n	8004c8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f82f 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e025      	b.n	8004cd6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d10e      	bne.n	8004cb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f819 	bl	8004cde <UART_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e00f      	b.n	8004cd6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	4613      	mov	r3, r2
 8004cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cee:	e062      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cf6:	d05e      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf8:	f7fc f97e 	bl	8000ff8 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d302      	bcc.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d11d      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d1c:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0201 	bic.w	r2, r2, #1
 8004d2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e045      	b.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02e      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d66:	d126      	bne.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d80:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e00f      	b.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69da      	ldr	r2, [r3, #28]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	bf0c      	ite	eq
 8004dc6:	2301      	moveq	r3, #1
 8004dc8:	2300      	movne	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d08d      	beq.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e027      	b.n	8004e44 <HAL_UARTEx_DisableFifoMode+0x66>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2224      	movs	r2, #36	; 0x24
 8004e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0201 	bic.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e02d      	b.n	8004ec4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2224      	movs	r2, #36	; 0x24
 8004e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f84f 	bl	8004f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e02d      	b.n	8004f40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2224      	movs	r2, #36	; 0x24
 8004ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f811 	bl	8004f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d108      	bne.n	8004f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f68:	e031      	b.n	8004fce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f6e:	2308      	movs	r3, #8
 8004f70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	0e5b      	lsrs	r3, r3, #25
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	0f5b      	lsrs	r3, r3, #29
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f92:	7bbb      	ldrb	r3, [r7, #14]
 8004f94:	7b3a      	ldrb	r2, [r7, #12]
 8004f96:	4911      	ldr	r1, [pc, #68]	; (8004fdc <UARTEx_SetNbDataToProcess+0x94>)
 8004f98:	5c8a      	ldrb	r2, [r1, r2]
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f9e:	7b3a      	ldrb	r2, [r7, #12]
 8004fa0:	490f      	ldr	r1, [pc, #60]	; (8004fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8004fa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	7b7a      	ldrb	r2, [r7, #13]
 8004fb4:	4909      	ldr	r1, [pc, #36]	; (8004fdc <UARTEx_SetNbDataToProcess+0x94>)
 8004fb6:	5c8a      	ldrb	r2, [r1, r2]
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fbc:	7b7a      	ldrb	r2, [r7, #13]
 8004fbe:	4908      	ldr	r1, [pc, #32]	; (8004fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8004fc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	080059d4 	.word	0x080059d4
 8004fe0:	080059dc 	.word	0x080059dc

08004fe4 <sniprintf>:
 8004fe4:	b40c      	push	{r2, r3}
 8004fe6:	b530      	push	{r4, r5, lr}
 8004fe8:	4b17      	ldr	r3, [pc, #92]	; (8005048 <sniprintf+0x64>)
 8004fea:	1e0c      	subs	r4, r1, #0
 8004fec:	681d      	ldr	r5, [r3, #0]
 8004fee:	b09d      	sub	sp, #116	; 0x74
 8004ff0:	da08      	bge.n	8005004 <sniprintf+0x20>
 8004ff2:	238b      	movs	r3, #139	; 0x8b
 8004ff4:	602b      	str	r3, [r5, #0]
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ffa:	b01d      	add	sp, #116	; 0x74
 8004ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005000:	b002      	add	sp, #8
 8005002:	4770      	bx	lr
 8005004:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005008:	f8ad 3014 	strh.w	r3, [sp, #20]
 800500c:	bf14      	ite	ne
 800500e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005012:	4623      	moveq	r3, r4
 8005014:	9304      	str	r3, [sp, #16]
 8005016:	9307      	str	r3, [sp, #28]
 8005018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800501c:	9002      	str	r0, [sp, #8]
 800501e:	9006      	str	r0, [sp, #24]
 8005020:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005024:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005026:	ab21      	add	r3, sp, #132	; 0x84
 8005028:	a902      	add	r1, sp, #8
 800502a:	4628      	mov	r0, r5
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	f000 f993 	bl	8005358 <_svfiprintf_r>
 8005032:	1c43      	adds	r3, r0, #1
 8005034:	bfbc      	itt	lt
 8005036:	238b      	movlt	r3, #139	; 0x8b
 8005038:	602b      	strlt	r3, [r5, #0]
 800503a:	2c00      	cmp	r4, #0
 800503c:	d0dd      	beq.n	8004ffa <sniprintf+0x16>
 800503e:	9b02      	ldr	r3, [sp, #8]
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e7d9      	b.n	8004ffa <sniprintf+0x16>
 8005046:	bf00      	nop
 8005048:	20000058 	.word	0x20000058

0800504c <memset>:
 800504c:	4402      	add	r2, r0
 800504e:	4603      	mov	r3, r0
 8005050:	4293      	cmp	r3, r2
 8005052:	d100      	bne.n	8005056 <memset+0xa>
 8005054:	4770      	bx	lr
 8005056:	f803 1b01 	strb.w	r1, [r3], #1
 800505a:	e7f9      	b.n	8005050 <memset+0x4>

0800505c <__errno>:
 800505c:	4b01      	ldr	r3, [pc, #4]	; (8005064 <__errno+0x8>)
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000058 	.word	0x20000058

08005068 <__libc_init_array>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	4d0d      	ldr	r5, [pc, #52]	; (80050a0 <__libc_init_array+0x38>)
 800506c:	4c0d      	ldr	r4, [pc, #52]	; (80050a4 <__libc_init_array+0x3c>)
 800506e:	1b64      	subs	r4, r4, r5
 8005070:	10a4      	asrs	r4, r4, #2
 8005072:	2600      	movs	r6, #0
 8005074:	42a6      	cmp	r6, r4
 8005076:	d109      	bne.n	800508c <__libc_init_array+0x24>
 8005078:	4d0b      	ldr	r5, [pc, #44]	; (80050a8 <__libc_init_array+0x40>)
 800507a:	4c0c      	ldr	r4, [pc, #48]	; (80050ac <__libc_init_array+0x44>)
 800507c:	f000 fc6a 	bl	8005954 <_init>
 8005080:	1b64      	subs	r4, r4, r5
 8005082:	10a4      	asrs	r4, r4, #2
 8005084:	2600      	movs	r6, #0
 8005086:	42a6      	cmp	r6, r4
 8005088:	d105      	bne.n	8005096 <__libc_init_array+0x2e>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005090:	4798      	blx	r3
 8005092:	3601      	adds	r6, #1
 8005094:	e7ee      	b.n	8005074 <__libc_init_array+0xc>
 8005096:	f855 3b04 	ldr.w	r3, [r5], #4
 800509a:	4798      	blx	r3
 800509c:	3601      	adds	r6, #1
 800509e:	e7f2      	b.n	8005086 <__libc_init_array+0x1e>
 80050a0:	08005a20 	.word	0x08005a20
 80050a4:	08005a20 	.word	0x08005a20
 80050a8:	08005a20 	.word	0x08005a20
 80050ac:	08005a24 	.word	0x08005a24

080050b0 <__retarget_lock_acquire_recursive>:
 80050b0:	4770      	bx	lr

080050b2 <__retarget_lock_release_recursive>:
 80050b2:	4770      	bx	lr

080050b4 <_free_r>:
 80050b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050b6:	2900      	cmp	r1, #0
 80050b8:	d044      	beq.n	8005144 <_free_r+0x90>
 80050ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050be:	9001      	str	r0, [sp, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f1a1 0404 	sub.w	r4, r1, #4
 80050c6:	bfb8      	it	lt
 80050c8:	18e4      	addlt	r4, r4, r3
 80050ca:	f000 f8df 	bl	800528c <__malloc_lock>
 80050ce:	4a1e      	ldr	r2, [pc, #120]	; (8005148 <_free_r+0x94>)
 80050d0:	9801      	ldr	r0, [sp, #4]
 80050d2:	6813      	ldr	r3, [r2, #0]
 80050d4:	b933      	cbnz	r3, 80050e4 <_free_r+0x30>
 80050d6:	6063      	str	r3, [r4, #4]
 80050d8:	6014      	str	r4, [r2, #0]
 80050da:	b003      	add	sp, #12
 80050dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050e0:	f000 b8da 	b.w	8005298 <__malloc_unlock>
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d908      	bls.n	80050fa <_free_r+0x46>
 80050e8:	6825      	ldr	r5, [r4, #0]
 80050ea:	1961      	adds	r1, r4, r5
 80050ec:	428b      	cmp	r3, r1
 80050ee:	bf01      	itttt	eq
 80050f0:	6819      	ldreq	r1, [r3, #0]
 80050f2:	685b      	ldreq	r3, [r3, #4]
 80050f4:	1949      	addeq	r1, r1, r5
 80050f6:	6021      	streq	r1, [r4, #0]
 80050f8:	e7ed      	b.n	80050d6 <_free_r+0x22>
 80050fa:	461a      	mov	r2, r3
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b10b      	cbz	r3, 8005104 <_free_r+0x50>
 8005100:	42a3      	cmp	r3, r4
 8005102:	d9fa      	bls.n	80050fa <_free_r+0x46>
 8005104:	6811      	ldr	r1, [r2, #0]
 8005106:	1855      	adds	r5, r2, r1
 8005108:	42a5      	cmp	r5, r4
 800510a:	d10b      	bne.n	8005124 <_free_r+0x70>
 800510c:	6824      	ldr	r4, [r4, #0]
 800510e:	4421      	add	r1, r4
 8005110:	1854      	adds	r4, r2, r1
 8005112:	42a3      	cmp	r3, r4
 8005114:	6011      	str	r1, [r2, #0]
 8005116:	d1e0      	bne.n	80050da <_free_r+0x26>
 8005118:	681c      	ldr	r4, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	6053      	str	r3, [r2, #4]
 800511e:	440c      	add	r4, r1
 8005120:	6014      	str	r4, [r2, #0]
 8005122:	e7da      	b.n	80050da <_free_r+0x26>
 8005124:	d902      	bls.n	800512c <_free_r+0x78>
 8005126:	230c      	movs	r3, #12
 8005128:	6003      	str	r3, [r0, #0]
 800512a:	e7d6      	b.n	80050da <_free_r+0x26>
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	1961      	adds	r1, r4, r5
 8005130:	428b      	cmp	r3, r1
 8005132:	bf04      	itt	eq
 8005134:	6819      	ldreq	r1, [r3, #0]
 8005136:	685b      	ldreq	r3, [r3, #4]
 8005138:	6063      	str	r3, [r4, #4]
 800513a:	bf04      	itt	eq
 800513c:	1949      	addeq	r1, r1, r5
 800513e:	6021      	streq	r1, [r4, #0]
 8005140:	6054      	str	r4, [r2, #4]
 8005142:	e7ca      	b.n	80050da <_free_r+0x26>
 8005144:	b003      	add	sp, #12
 8005146:	bd30      	pop	{r4, r5, pc}
 8005148:	20000360 	.word	0x20000360

0800514c <sbrk_aligned>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4e0e      	ldr	r6, [pc, #56]	; (8005188 <sbrk_aligned+0x3c>)
 8005150:	460c      	mov	r4, r1
 8005152:	6831      	ldr	r1, [r6, #0]
 8005154:	4605      	mov	r5, r0
 8005156:	b911      	cbnz	r1, 800515e <sbrk_aligned+0x12>
 8005158:	f000 fba6 	bl	80058a8 <_sbrk_r>
 800515c:	6030      	str	r0, [r6, #0]
 800515e:	4621      	mov	r1, r4
 8005160:	4628      	mov	r0, r5
 8005162:	f000 fba1 	bl	80058a8 <_sbrk_r>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	d00a      	beq.n	8005180 <sbrk_aligned+0x34>
 800516a:	1cc4      	adds	r4, r0, #3
 800516c:	f024 0403 	bic.w	r4, r4, #3
 8005170:	42a0      	cmp	r0, r4
 8005172:	d007      	beq.n	8005184 <sbrk_aligned+0x38>
 8005174:	1a21      	subs	r1, r4, r0
 8005176:	4628      	mov	r0, r5
 8005178:	f000 fb96 	bl	80058a8 <_sbrk_r>
 800517c:	3001      	adds	r0, #1
 800517e:	d101      	bne.n	8005184 <sbrk_aligned+0x38>
 8005180:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005184:	4620      	mov	r0, r4
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	20000364 	.word	0x20000364

0800518c <_malloc_r>:
 800518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005190:	1ccd      	adds	r5, r1, #3
 8005192:	f025 0503 	bic.w	r5, r5, #3
 8005196:	3508      	adds	r5, #8
 8005198:	2d0c      	cmp	r5, #12
 800519a:	bf38      	it	cc
 800519c:	250c      	movcc	r5, #12
 800519e:	2d00      	cmp	r5, #0
 80051a0:	4607      	mov	r7, r0
 80051a2:	db01      	blt.n	80051a8 <_malloc_r+0x1c>
 80051a4:	42a9      	cmp	r1, r5
 80051a6:	d905      	bls.n	80051b4 <_malloc_r+0x28>
 80051a8:	230c      	movs	r3, #12
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	2600      	movs	r6, #0
 80051ae:	4630      	mov	r0, r6
 80051b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005288 <_malloc_r+0xfc>
 80051b8:	f000 f868 	bl	800528c <__malloc_lock>
 80051bc:	f8d8 3000 	ldr.w	r3, [r8]
 80051c0:	461c      	mov	r4, r3
 80051c2:	bb5c      	cbnz	r4, 800521c <_malloc_r+0x90>
 80051c4:	4629      	mov	r1, r5
 80051c6:	4638      	mov	r0, r7
 80051c8:	f7ff ffc0 	bl	800514c <sbrk_aligned>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	4604      	mov	r4, r0
 80051d0:	d155      	bne.n	800527e <_malloc_r+0xf2>
 80051d2:	f8d8 4000 	ldr.w	r4, [r8]
 80051d6:	4626      	mov	r6, r4
 80051d8:	2e00      	cmp	r6, #0
 80051da:	d145      	bne.n	8005268 <_malloc_r+0xdc>
 80051dc:	2c00      	cmp	r4, #0
 80051de:	d048      	beq.n	8005272 <_malloc_r+0xe6>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	4631      	mov	r1, r6
 80051e4:	4638      	mov	r0, r7
 80051e6:	eb04 0903 	add.w	r9, r4, r3
 80051ea:	f000 fb5d 	bl	80058a8 <_sbrk_r>
 80051ee:	4581      	cmp	r9, r0
 80051f0:	d13f      	bne.n	8005272 <_malloc_r+0xe6>
 80051f2:	6821      	ldr	r1, [r4, #0]
 80051f4:	1a6d      	subs	r5, r5, r1
 80051f6:	4629      	mov	r1, r5
 80051f8:	4638      	mov	r0, r7
 80051fa:	f7ff ffa7 	bl	800514c <sbrk_aligned>
 80051fe:	3001      	adds	r0, #1
 8005200:	d037      	beq.n	8005272 <_malloc_r+0xe6>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	442b      	add	r3, r5
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	f8d8 3000 	ldr.w	r3, [r8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d038      	beq.n	8005282 <_malloc_r+0xf6>
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	42a2      	cmp	r2, r4
 8005214:	d12b      	bne.n	800526e <_malloc_r+0xe2>
 8005216:	2200      	movs	r2, #0
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	e00f      	b.n	800523c <_malloc_r+0xb0>
 800521c:	6822      	ldr	r2, [r4, #0]
 800521e:	1b52      	subs	r2, r2, r5
 8005220:	d41f      	bmi.n	8005262 <_malloc_r+0xd6>
 8005222:	2a0b      	cmp	r2, #11
 8005224:	d917      	bls.n	8005256 <_malloc_r+0xca>
 8005226:	1961      	adds	r1, r4, r5
 8005228:	42a3      	cmp	r3, r4
 800522a:	6025      	str	r5, [r4, #0]
 800522c:	bf18      	it	ne
 800522e:	6059      	strne	r1, [r3, #4]
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	bf08      	it	eq
 8005234:	f8c8 1000 	streq.w	r1, [r8]
 8005238:	5162      	str	r2, [r4, r5]
 800523a:	604b      	str	r3, [r1, #4]
 800523c:	4638      	mov	r0, r7
 800523e:	f104 060b 	add.w	r6, r4, #11
 8005242:	f000 f829 	bl	8005298 <__malloc_unlock>
 8005246:	f026 0607 	bic.w	r6, r6, #7
 800524a:	1d23      	adds	r3, r4, #4
 800524c:	1af2      	subs	r2, r6, r3
 800524e:	d0ae      	beq.n	80051ae <_malloc_r+0x22>
 8005250:	1b9b      	subs	r3, r3, r6
 8005252:	50a3      	str	r3, [r4, r2]
 8005254:	e7ab      	b.n	80051ae <_malloc_r+0x22>
 8005256:	42a3      	cmp	r3, r4
 8005258:	6862      	ldr	r2, [r4, #4]
 800525a:	d1dd      	bne.n	8005218 <_malloc_r+0x8c>
 800525c:	f8c8 2000 	str.w	r2, [r8]
 8005260:	e7ec      	b.n	800523c <_malloc_r+0xb0>
 8005262:	4623      	mov	r3, r4
 8005264:	6864      	ldr	r4, [r4, #4]
 8005266:	e7ac      	b.n	80051c2 <_malloc_r+0x36>
 8005268:	4634      	mov	r4, r6
 800526a:	6876      	ldr	r6, [r6, #4]
 800526c:	e7b4      	b.n	80051d8 <_malloc_r+0x4c>
 800526e:	4613      	mov	r3, r2
 8005270:	e7cc      	b.n	800520c <_malloc_r+0x80>
 8005272:	230c      	movs	r3, #12
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	4638      	mov	r0, r7
 8005278:	f000 f80e 	bl	8005298 <__malloc_unlock>
 800527c:	e797      	b.n	80051ae <_malloc_r+0x22>
 800527e:	6025      	str	r5, [r4, #0]
 8005280:	e7dc      	b.n	800523c <_malloc_r+0xb0>
 8005282:	605b      	str	r3, [r3, #4]
 8005284:	deff      	udf	#255	; 0xff
 8005286:	bf00      	nop
 8005288:	20000360 	.word	0x20000360

0800528c <__malloc_lock>:
 800528c:	4801      	ldr	r0, [pc, #4]	; (8005294 <__malloc_lock+0x8>)
 800528e:	f7ff bf0f 	b.w	80050b0 <__retarget_lock_acquire_recursive>
 8005292:	bf00      	nop
 8005294:	2000035c 	.word	0x2000035c

08005298 <__malloc_unlock>:
 8005298:	4801      	ldr	r0, [pc, #4]	; (80052a0 <__malloc_unlock+0x8>)
 800529a:	f7ff bf0a 	b.w	80050b2 <__retarget_lock_release_recursive>
 800529e:	bf00      	nop
 80052a0:	2000035c 	.word	0x2000035c

080052a4 <__ssputs_r>:
 80052a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a8:	688e      	ldr	r6, [r1, #8]
 80052aa:	461f      	mov	r7, r3
 80052ac:	42be      	cmp	r6, r7
 80052ae:	680b      	ldr	r3, [r1, #0]
 80052b0:	4682      	mov	sl, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	4690      	mov	r8, r2
 80052b6:	d82c      	bhi.n	8005312 <__ssputs_r+0x6e>
 80052b8:	898a      	ldrh	r2, [r1, #12]
 80052ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052be:	d026      	beq.n	800530e <__ssputs_r+0x6a>
 80052c0:	6965      	ldr	r5, [r4, #20]
 80052c2:	6909      	ldr	r1, [r1, #16]
 80052c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052c8:	eba3 0901 	sub.w	r9, r3, r1
 80052cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052d0:	1c7b      	adds	r3, r7, #1
 80052d2:	444b      	add	r3, r9
 80052d4:	106d      	asrs	r5, r5, #1
 80052d6:	429d      	cmp	r5, r3
 80052d8:	bf38      	it	cc
 80052da:	461d      	movcc	r5, r3
 80052dc:	0553      	lsls	r3, r2, #21
 80052de:	d527      	bpl.n	8005330 <__ssputs_r+0x8c>
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7ff ff53 	bl	800518c <_malloc_r>
 80052e6:	4606      	mov	r6, r0
 80052e8:	b360      	cbz	r0, 8005344 <__ssputs_r+0xa0>
 80052ea:	6921      	ldr	r1, [r4, #16]
 80052ec:	464a      	mov	r2, r9
 80052ee:	f000 faeb 	bl	80058c8 <memcpy>
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	6126      	str	r6, [r4, #16]
 8005300:	6165      	str	r5, [r4, #20]
 8005302:	444e      	add	r6, r9
 8005304:	eba5 0509 	sub.w	r5, r5, r9
 8005308:	6026      	str	r6, [r4, #0]
 800530a:	60a5      	str	r5, [r4, #8]
 800530c:	463e      	mov	r6, r7
 800530e:	42be      	cmp	r6, r7
 8005310:	d900      	bls.n	8005314 <__ssputs_r+0x70>
 8005312:	463e      	mov	r6, r7
 8005314:	6820      	ldr	r0, [r4, #0]
 8005316:	4632      	mov	r2, r6
 8005318:	4641      	mov	r1, r8
 800531a:	f000 faab 	bl	8005874 <memmove>
 800531e:	68a3      	ldr	r3, [r4, #8]
 8005320:	1b9b      	subs	r3, r3, r6
 8005322:	60a3      	str	r3, [r4, #8]
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	4433      	add	r3, r6
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	2000      	movs	r0, #0
 800532c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005330:	462a      	mov	r2, r5
 8005332:	f000 fad7 	bl	80058e4 <_realloc_r>
 8005336:	4606      	mov	r6, r0
 8005338:	2800      	cmp	r0, #0
 800533a:	d1e0      	bne.n	80052fe <__ssputs_r+0x5a>
 800533c:	6921      	ldr	r1, [r4, #16]
 800533e:	4650      	mov	r0, sl
 8005340:	f7ff feb8 	bl	80050b4 <_free_r>
 8005344:	230c      	movs	r3, #12
 8005346:	f8ca 3000 	str.w	r3, [sl]
 800534a:	89a3      	ldrh	r3, [r4, #12]
 800534c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005356:	e7e9      	b.n	800532c <__ssputs_r+0x88>

08005358 <_svfiprintf_r>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	4698      	mov	r8, r3
 800535e:	898b      	ldrh	r3, [r1, #12]
 8005360:	061b      	lsls	r3, r3, #24
 8005362:	b09d      	sub	sp, #116	; 0x74
 8005364:	4607      	mov	r7, r0
 8005366:	460d      	mov	r5, r1
 8005368:	4614      	mov	r4, r2
 800536a:	d50e      	bpl.n	800538a <_svfiprintf_r+0x32>
 800536c:	690b      	ldr	r3, [r1, #16]
 800536e:	b963      	cbnz	r3, 800538a <_svfiprintf_r+0x32>
 8005370:	2140      	movs	r1, #64	; 0x40
 8005372:	f7ff ff0b 	bl	800518c <_malloc_r>
 8005376:	6028      	str	r0, [r5, #0]
 8005378:	6128      	str	r0, [r5, #16]
 800537a:	b920      	cbnz	r0, 8005386 <_svfiprintf_r+0x2e>
 800537c:	230c      	movs	r3, #12
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005384:	e0d0      	b.n	8005528 <_svfiprintf_r+0x1d0>
 8005386:	2340      	movs	r3, #64	; 0x40
 8005388:	616b      	str	r3, [r5, #20]
 800538a:	2300      	movs	r3, #0
 800538c:	9309      	str	r3, [sp, #36]	; 0x24
 800538e:	2320      	movs	r3, #32
 8005390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005394:	f8cd 800c 	str.w	r8, [sp, #12]
 8005398:	2330      	movs	r3, #48	; 0x30
 800539a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005540 <_svfiprintf_r+0x1e8>
 800539e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053a2:	f04f 0901 	mov.w	r9, #1
 80053a6:	4623      	mov	r3, r4
 80053a8:	469a      	mov	sl, r3
 80053aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053ae:	b10a      	cbz	r2, 80053b4 <_svfiprintf_r+0x5c>
 80053b0:	2a25      	cmp	r2, #37	; 0x25
 80053b2:	d1f9      	bne.n	80053a8 <_svfiprintf_r+0x50>
 80053b4:	ebba 0b04 	subs.w	fp, sl, r4
 80053b8:	d00b      	beq.n	80053d2 <_svfiprintf_r+0x7a>
 80053ba:	465b      	mov	r3, fp
 80053bc:	4622      	mov	r2, r4
 80053be:	4629      	mov	r1, r5
 80053c0:	4638      	mov	r0, r7
 80053c2:	f7ff ff6f 	bl	80052a4 <__ssputs_r>
 80053c6:	3001      	adds	r0, #1
 80053c8:	f000 80a9 	beq.w	800551e <_svfiprintf_r+0x1c6>
 80053cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ce:	445a      	add	r2, fp
 80053d0:	9209      	str	r2, [sp, #36]	; 0x24
 80053d2:	f89a 3000 	ldrb.w	r3, [sl]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80a1 	beq.w	800551e <_svfiprintf_r+0x1c6>
 80053dc:	2300      	movs	r3, #0
 80053de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053e6:	f10a 0a01 	add.w	sl, sl, #1
 80053ea:	9304      	str	r3, [sp, #16]
 80053ec:	9307      	str	r3, [sp, #28]
 80053ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053f2:	931a      	str	r3, [sp, #104]	; 0x68
 80053f4:	4654      	mov	r4, sl
 80053f6:	2205      	movs	r2, #5
 80053f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053fc:	4850      	ldr	r0, [pc, #320]	; (8005540 <_svfiprintf_r+0x1e8>)
 80053fe:	f7fa ff07 	bl	8000210 <memchr>
 8005402:	9a04      	ldr	r2, [sp, #16]
 8005404:	b9d8      	cbnz	r0, 800543e <_svfiprintf_r+0xe6>
 8005406:	06d0      	lsls	r0, r2, #27
 8005408:	bf44      	itt	mi
 800540a:	2320      	movmi	r3, #32
 800540c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005410:	0711      	lsls	r1, r2, #28
 8005412:	bf44      	itt	mi
 8005414:	232b      	movmi	r3, #43	; 0x2b
 8005416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800541a:	f89a 3000 	ldrb.w	r3, [sl]
 800541e:	2b2a      	cmp	r3, #42	; 0x2a
 8005420:	d015      	beq.n	800544e <_svfiprintf_r+0xf6>
 8005422:	9a07      	ldr	r2, [sp, #28]
 8005424:	4654      	mov	r4, sl
 8005426:	2000      	movs	r0, #0
 8005428:	f04f 0c0a 	mov.w	ip, #10
 800542c:	4621      	mov	r1, r4
 800542e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005432:	3b30      	subs	r3, #48	; 0x30
 8005434:	2b09      	cmp	r3, #9
 8005436:	d94d      	bls.n	80054d4 <_svfiprintf_r+0x17c>
 8005438:	b1b0      	cbz	r0, 8005468 <_svfiprintf_r+0x110>
 800543a:	9207      	str	r2, [sp, #28]
 800543c:	e014      	b.n	8005468 <_svfiprintf_r+0x110>
 800543e:	eba0 0308 	sub.w	r3, r0, r8
 8005442:	fa09 f303 	lsl.w	r3, r9, r3
 8005446:	4313      	orrs	r3, r2
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	46a2      	mov	sl, r4
 800544c:	e7d2      	b.n	80053f4 <_svfiprintf_r+0x9c>
 800544e:	9b03      	ldr	r3, [sp, #12]
 8005450:	1d19      	adds	r1, r3, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	9103      	str	r1, [sp, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	bfbb      	ittet	lt
 800545a:	425b      	neglt	r3, r3
 800545c:	f042 0202 	orrlt.w	r2, r2, #2
 8005460:	9307      	strge	r3, [sp, #28]
 8005462:	9307      	strlt	r3, [sp, #28]
 8005464:	bfb8      	it	lt
 8005466:	9204      	strlt	r2, [sp, #16]
 8005468:	7823      	ldrb	r3, [r4, #0]
 800546a:	2b2e      	cmp	r3, #46	; 0x2e
 800546c:	d10c      	bne.n	8005488 <_svfiprintf_r+0x130>
 800546e:	7863      	ldrb	r3, [r4, #1]
 8005470:	2b2a      	cmp	r3, #42	; 0x2a
 8005472:	d134      	bne.n	80054de <_svfiprintf_r+0x186>
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	9203      	str	r2, [sp, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	bfb8      	it	lt
 8005480:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005484:	3402      	adds	r4, #2
 8005486:	9305      	str	r3, [sp, #20]
 8005488:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005550 <_svfiprintf_r+0x1f8>
 800548c:	7821      	ldrb	r1, [r4, #0]
 800548e:	2203      	movs	r2, #3
 8005490:	4650      	mov	r0, sl
 8005492:	f7fa febd 	bl	8000210 <memchr>
 8005496:	b138      	cbz	r0, 80054a8 <_svfiprintf_r+0x150>
 8005498:	9b04      	ldr	r3, [sp, #16]
 800549a:	eba0 000a 	sub.w	r0, r0, sl
 800549e:	2240      	movs	r2, #64	; 0x40
 80054a0:	4082      	lsls	r2, r0
 80054a2:	4313      	orrs	r3, r2
 80054a4:	3401      	adds	r4, #1
 80054a6:	9304      	str	r3, [sp, #16]
 80054a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ac:	4825      	ldr	r0, [pc, #148]	; (8005544 <_svfiprintf_r+0x1ec>)
 80054ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054b2:	2206      	movs	r2, #6
 80054b4:	f7fa feac 	bl	8000210 <memchr>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d038      	beq.n	800552e <_svfiprintf_r+0x1d6>
 80054bc:	4b22      	ldr	r3, [pc, #136]	; (8005548 <_svfiprintf_r+0x1f0>)
 80054be:	bb1b      	cbnz	r3, 8005508 <_svfiprintf_r+0x1b0>
 80054c0:	9b03      	ldr	r3, [sp, #12]
 80054c2:	3307      	adds	r3, #7
 80054c4:	f023 0307 	bic.w	r3, r3, #7
 80054c8:	3308      	adds	r3, #8
 80054ca:	9303      	str	r3, [sp, #12]
 80054cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ce:	4433      	add	r3, r6
 80054d0:	9309      	str	r3, [sp, #36]	; 0x24
 80054d2:	e768      	b.n	80053a6 <_svfiprintf_r+0x4e>
 80054d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80054d8:	460c      	mov	r4, r1
 80054da:	2001      	movs	r0, #1
 80054dc:	e7a6      	b.n	800542c <_svfiprintf_r+0xd4>
 80054de:	2300      	movs	r3, #0
 80054e0:	3401      	adds	r4, #1
 80054e2:	9305      	str	r3, [sp, #20]
 80054e4:	4619      	mov	r1, r3
 80054e6:	f04f 0c0a 	mov.w	ip, #10
 80054ea:	4620      	mov	r0, r4
 80054ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054f0:	3a30      	subs	r2, #48	; 0x30
 80054f2:	2a09      	cmp	r2, #9
 80054f4:	d903      	bls.n	80054fe <_svfiprintf_r+0x1a6>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0c6      	beq.n	8005488 <_svfiprintf_r+0x130>
 80054fa:	9105      	str	r1, [sp, #20]
 80054fc:	e7c4      	b.n	8005488 <_svfiprintf_r+0x130>
 80054fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005502:	4604      	mov	r4, r0
 8005504:	2301      	movs	r3, #1
 8005506:	e7f0      	b.n	80054ea <_svfiprintf_r+0x192>
 8005508:	ab03      	add	r3, sp, #12
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	462a      	mov	r2, r5
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <_svfiprintf_r+0x1f4>)
 8005510:	a904      	add	r1, sp, #16
 8005512:	4638      	mov	r0, r7
 8005514:	f3af 8000 	nop.w
 8005518:	1c42      	adds	r2, r0, #1
 800551a:	4606      	mov	r6, r0
 800551c:	d1d6      	bne.n	80054cc <_svfiprintf_r+0x174>
 800551e:	89ab      	ldrh	r3, [r5, #12]
 8005520:	065b      	lsls	r3, r3, #25
 8005522:	f53f af2d 	bmi.w	8005380 <_svfiprintf_r+0x28>
 8005526:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005528:	b01d      	add	sp, #116	; 0x74
 800552a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552e:	ab03      	add	r3, sp, #12
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	462a      	mov	r2, r5
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <_svfiprintf_r+0x1f4>)
 8005536:	a904      	add	r1, sp, #16
 8005538:	4638      	mov	r0, r7
 800553a:	f000 f879 	bl	8005630 <_printf_i>
 800553e:	e7eb      	b.n	8005518 <_svfiprintf_r+0x1c0>
 8005540:	080059e4 	.word	0x080059e4
 8005544:	080059ee 	.word	0x080059ee
 8005548:	00000000 	.word	0x00000000
 800554c:	080052a5 	.word	0x080052a5
 8005550:	080059ea 	.word	0x080059ea

08005554 <_printf_common>:
 8005554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005558:	4616      	mov	r6, r2
 800555a:	4699      	mov	r9, r3
 800555c:	688a      	ldr	r2, [r1, #8]
 800555e:	690b      	ldr	r3, [r1, #16]
 8005560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005564:	4293      	cmp	r3, r2
 8005566:	bfb8      	it	lt
 8005568:	4613      	movlt	r3, r2
 800556a:	6033      	str	r3, [r6, #0]
 800556c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005570:	4607      	mov	r7, r0
 8005572:	460c      	mov	r4, r1
 8005574:	b10a      	cbz	r2, 800557a <_printf_common+0x26>
 8005576:	3301      	adds	r3, #1
 8005578:	6033      	str	r3, [r6, #0]
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	0699      	lsls	r1, r3, #26
 800557e:	bf42      	ittt	mi
 8005580:	6833      	ldrmi	r3, [r6, #0]
 8005582:	3302      	addmi	r3, #2
 8005584:	6033      	strmi	r3, [r6, #0]
 8005586:	6825      	ldr	r5, [r4, #0]
 8005588:	f015 0506 	ands.w	r5, r5, #6
 800558c:	d106      	bne.n	800559c <_printf_common+0x48>
 800558e:	f104 0a19 	add.w	sl, r4, #25
 8005592:	68e3      	ldr	r3, [r4, #12]
 8005594:	6832      	ldr	r2, [r6, #0]
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	42ab      	cmp	r3, r5
 800559a:	dc26      	bgt.n	80055ea <_printf_common+0x96>
 800559c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055a0:	1e13      	subs	r3, r2, #0
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	bf18      	it	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	0692      	lsls	r2, r2, #26
 80055aa:	d42b      	bmi.n	8005604 <_printf_common+0xb0>
 80055ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055b0:	4649      	mov	r1, r9
 80055b2:	4638      	mov	r0, r7
 80055b4:	47c0      	blx	r8
 80055b6:	3001      	adds	r0, #1
 80055b8:	d01e      	beq.n	80055f8 <_printf_common+0xa4>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	6922      	ldr	r2, [r4, #16]
 80055be:	f003 0306 	and.w	r3, r3, #6
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	bf02      	ittt	eq
 80055c6:	68e5      	ldreq	r5, [r4, #12]
 80055c8:	6833      	ldreq	r3, [r6, #0]
 80055ca:	1aed      	subeq	r5, r5, r3
 80055cc:	68a3      	ldr	r3, [r4, #8]
 80055ce:	bf0c      	ite	eq
 80055d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055d4:	2500      	movne	r5, #0
 80055d6:	4293      	cmp	r3, r2
 80055d8:	bfc4      	itt	gt
 80055da:	1a9b      	subgt	r3, r3, r2
 80055dc:	18ed      	addgt	r5, r5, r3
 80055de:	2600      	movs	r6, #0
 80055e0:	341a      	adds	r4, #26
 80055e2:	42b5      	cmp	r5, r6
 80055e4:	d11a      	bne.n	800561c <_printf_common+0xc8>
 80055e6:	2000      	movs	r0, #0
 80055e8:	e008      	b.n	80055fc <_printf_common+0xa8>
 80055ea:	2301      	movs	r3, #1
 80055ec:	4652      	mov	r2, sl
 80055ee:	4649      	mov	r1, r9
 80055f0:	4638      	mov	r0, r7
 80055f2:	47c0      	blx	r8
 80055f4:	3001      	adds	r0, #1
 80055f6:	d103      	bne.n	8005600 <_printf_common+0xac>
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005600:	3501      	adds	r5, #1
 8005602:	e7c6      	b.n	8005592 <_printf_common+0x3e>
 8005604:	18e1      	adds	r1, r4, r3
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	2030      	movs	r0, #48	; 0x30
 800560a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800560e:	4422      	add	r2, r4
 8005610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005618:	3302      	adds	r3, #2
 800561a:	e7c7      	b.n	80055ac <_printf_common+0x58>
 800561c:	2301      	movs	r3, #1
 800561e:	4622      	mov	r2, r4
 8005620:	4649      	mov	r1, r9
 8005622:	4638      	mov	r0, r7
 8005624:	47c0      	blx	r8
 8005626:	3001      	adds	r0, #1
 8005628:	d0e6      	beq.n	80055f8 <_printf_common+0xa4>
 800562a:	3601      	adds	r6, #1
 800562c:	e7d9      	b.n	80055e2 <_printf_common+0x8e>
	...

08005630 <_printf_i>:
 8005630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	7e0f      	ldrb	r7, [r1, #24]
 8005636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005638:	2f78      	cmp	r7, #120	; 0x78
 800563a:	4691      	mov	r9, r2
 800563c:	4680      	mov	r8, r0
 800563e:	460c      	mov	r4, r1
 8005640:	469a      	mov	sl, r3
 8005642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005646:	d807      	bhi.n	8005658 <_printf_i+0x28>
 8005648:	2f62      	cmp	r7, #98	; 0x62
 800564a:	d80a      	bhi.n	8005662 <_printf_i+0x32>
 800564c:	2f00      	cmp	r7, #0
 800564e:	f000 80d4 	beq.w	80057fa <_printf_i+0x1ca>
 8005652:	2f58      	cmp	r7, #88	; 0x58
 8005654:	f000 80c0 	beq.w	80057d8 <_printf_i+0x1a8>
 8005658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800565c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005660:	e03a      	b.n	80056d8 <_printf_i+0xa8>
 8005662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005666:	2b15      	cmp	r3, #21
 8005668:	d8f6      	bhi.n	8005658 <_printf_i+0x28>
 800566a:	a101      	add	r1, pc, #4	; (adr r1, 8005670 <_printf_i+0x40>)
 800566c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005670:	080056c9 	.word	0x080056c9
 8005674:	080056dd 	.word	0x080056dd
 8005678:	08005659 	.word	0x08005659
 800567c:	08005659 	.word	0x08005659
 8005680:	08005659 	.word	0x08005659
 8005684:	08005659 	.word	0x08005659
 8005688:	080056dd 	.word	0x080056dd
 800568c:	08005659 	.word	0x08005659
 8005690:	08005659 	.word	0x08005659
 8005694:	08005659 	.word	0x08005659
 8005698:	08005659 	.word	0x08005659
 800569c:	080057e1 	.word	0x080057e1
 80056a0:	08005709 	.word	0x08005709
 80056a4:	0800579b 	.word	0x0800579b
 80056a8:	08005659 	.word	0x08005659
 80056ac:	08005659 	.word	0x08005659
 80056b0:	08005803 	.word	0x08005803
 80056b4:	08005659 	.word	0x08005659
 80056b8:	08005709 	.word	0x08005709
 80056bc:	08005659 	.word	0x08005659
 80056c0:	08005659 	.word	0x08005659
 80056c4:	080057a3 	.word	0x080057a3
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	1d1a      	adds	r2, r3, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	602a      	str	r2, [r5, #0]
 80056d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056d8:	2301      	movs	r3, #1
 80056da:	e09f      	b.n	800581c <_printf_i+0x1ec>
 80056dc:	6820      	ldr	r0, [r4, #0]
 80056de:	682b      	ldr	r3, [r5, #0]
 80056e0:	0607      	lsls	r7, r0, #24
 80056e2:	f103 0104 	add.w	r1, r3, #4
 80056e6:	6029      	str	r1, [r5, #0]
 80056e8:	d501      	bpl.n	80056ee <_printf_i+0xbe>
 80056ea:	681e      	ldr	r6, [r3, #0]
 80056ec:	e003      	b.n	80056f6 <_printf_i+0xc6>
 80056ee:	0646      	lsls	r6, r0, #25
 80056f0:	d5fb      	bpl.n	80056ea <_printf_i+0xba>
 80056f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056f6:	2e00      	cmp	r6, #0
 80056f8:	da03      	bge.n	8005702 <_printf_i+0xd2>
 80056fa:	232d      	movs	r3, #45	; 0x2d
 80056fc:	4276      	negs	r6, r6
 80056fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005702:	485a      	ldr	r0, [pc, #360]	; (800586c <_printf_i+0x23c>)
 8005704:	230a      	movs	r3, #10
 8005706:	e012      	b.n	800572e <_printf_i+0xfe>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	6820      	ldr	r0, [r4, #0]
 800570c:	1d19      	adds	r1, r3, #4
 800570e:	6029      	str	r1, [r5, #0]
 8005710:	0605      	lsls	r5, r0, #24
 8005712:	d501      	bpl.n	8005718 <_printf_i+0xe8>
 8005714:	681e      	ldr	r6, [r3, #0]
 8005716:	e002      	b.n	800571e <_printf_i+0xee>
 8005718:	0641      	lsls	r1, r0, #25
 800571a:	d5fb      	bpl.n	8005714 <_printf_i+0xe4>
 800571c:	881e      	ldrh	r6, [r3, #0]
 800571e:	4853      	ldr	r0, [pc, #332]	; (800586c <_printf_i+0x23c>)
 8005720:	2f6f      	cmp	r7, #111	; 0x6f
 8005722:	bf0c      	ite	eq
 8005724:	2308      	moveq	r3, #8
 8005726:	230a      	movne	r3, #10
 8005728:	2100      	movs	r1, #0
 800572a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800572e:	6865      	ldr	r5, [r4, #4]
 8005730:	60a5      	str	r5, [r4, #8]
 8005732:	2d00      	cmp	r5, #0
 8005734:	bfa2      	ittt	ge
 8005736:	6821      	ldrge	r1, [r4, #0]
 8005738:	f021 0104 	bicge.w	r1, r1, #4
 800573c:	6021      	strge	r1, [r4, #0]
 800573e:	b90e      	cbnz	r6, 8005744 <_printf_i+0x114>
 8005740:	2d00      	cmp	r5, #0
 8005742:	d04b      	beq.n	80057dc <_printf_i+0x1ac>
 8005744:	4615      	mov	r5, r2
 8005746:	fbb6 f1f3 	udiv	r1, r6, r3
 800574a:	fb03 6711 	mls	r7, r3, r1, r6
 800574e:	5dc7      	ldrb	r7, [r0, r7]
 8005750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005754:	4637      	mov	r7, r6
 8005756:	42bb      	cmp	r3, r7
 8005758:	460e      	mov	r6, r1
 800575a:	d9f4      	bls.n	8005746 <_printf_i+0x116>
 800575c:	2b08      	cmp	r3, #8
 800575e:	d10b      	bne.n	8005778 <_printf_i+0x148>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	07de      	lsls	r6, r3, #31
 8005764:	d508      	bpl.n	8005778 <_printf_i+0x148>
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	6861      	ldr	r1, [r4, #4]
 800576a:	4299      	cmp	r1, r3
 800576c:	bfde      	ittt	le
 800576e:	2330      	movle	r3, #48	; 0x30
 8005770:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005774:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005778:	1b52      	subs	r2, r2, r5
 800577a:	6122      	str	r2, [r4, #16]
 800577c:	f8cd a000 	str.w	sl, [sp]
 8005780:	464b      	mov	r3, r9
 8005782:	aa03      	add	r2, sp, #12
 8005784:	4621      	mov	r1, r4
 8005786:	4640      	mov	r0, r8
 8005788:	f7ff fee4 	bl	8005554 <_printf_common>
 800578c:	3001      	adds	r0, #1
 800578e:	d14a      	bne.n	8005826 <_printf_i+0x1f6>
 8005790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005794:	b004      	add	sp, #16
 8005796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	f043 0320 	orr.w	r3, r3, #32
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	4833      	ldr	r0, [pc, #204]	; (8005870 <_printf_i+0x240>)
 80057a4:	2778      	movs	r7, #120	; 0x78
 80057a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	6829      	ldr	r1, [r5, #0]
 80057ae:	061f      	lsls	r7, r3, #24
 80057b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80057b4:	d402      	bmi.n	80057bc <_printf_i+0x18c>
 80057b6:	065f      	lsls	r7, r3, #25
 80057b8:	bf48      	it	mi
 80057ba:	b2b6      	uxthmi	r6, r6
 80057bc:	07df      	lsls	r7, r3, #31
 80057be:	bf48      	it	mi
 80057c0:	f043 0320 	orrmi.w	r3, r3, #32
 80057c4:	6029      	str	r1, [r5, #0]
 80057c6:	bf48      	it	mi
 80057c8:	6023      	strmi	r3, [r4, #0]
 80057ca:	b91e      	cbnz	r6, 80057d4 <_printf_i+0x1a4>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	f023 0320 	bic.w	r3, r3, #32
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	2310      	movs	r3, #16
 80057d6:	e7a7      	b.n	8005728 <_printf_i+0xf8>
 80057d8:	4824      	ldr	r0, [pc, #144]	; (800586c <_printf_i+0x23c>)
 80057da:	e7e4      	b.n	80057a6 <_printf_i+0x176>
 80057dc:	4615      	mov	r5, r2
 80057de:	e7bd      	b.n	800575c <_printf_i+0x12c>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	6826      	ldr	r6, [r4, #0]
 80057e4:	6961      	ldr	r1, [r4, #20]
 80057e6:	1d18      	adds	r0, r3, #4
 80057e8:	6028      	str	r0, [r5, #0]
 80057ea:	0635      	lsls	r5, r6, #24
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	d501      	bpl.n	80057f4 <_printf_i+0x1c4>
 80057f0:	6019      	str	r1, [r3, #0]
 80057f2:	e002      	b.n	80057fa <_printf_i+0x1ca>
 80057f4:	0670      	lsls	r0, r6, #25
 80057f6:	d5fb      	bpl.n	80057f0 <_printf_i+0x1c0>
 80057f8:	8019      	strh	r1, [r3, #0]
 80057fa:	2300      	movs	r3, #0
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	4615      	mov	r5, r2
 8005800:	e7bc      	b.n	800577c <_printf_i+0x14c>
 8005802:	682b      	ldr	r3, [r5, #0]
 8005804:	1d1a      	adds	r2, r3, #4
 8005806:	602a      	str	r2, [r5, #0]
 8005808:	681d      	ldr	r5, [r3, #0]
 800580a:	6862      	ldr	r2, [r4, #4]
 800580c:	2100      	movs	r1, #0
 800580e:	4628      	mov	r0, r5
 8005810:	f7fa fcfe 	bl	8000210 <memchr>
 8005814:	b108      	cbz	r0, 800581a <_printf_i+0x1ea>
 8005816:	1b40      	subs	r0, r0, r5
 8005818:	6060      	str	r0, [r4, #4]
 800581a:	6863      	ldr	r3, [r4, #4]
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	2300      	movs	r3, #0
 8005820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005824:	e7aa      	b.n	800577c <_printf_i+0x14c>
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	462a      	mov	r2, r5
 800582a:	4649      	mov	r1, r9
 800582c:	4640      	mov	r0, r8
 800582e:	47d0      	blx	sl
 8005830:	3001      	adds	r0, #1
 8005832:	d0ad      	beq.n	8005790 <_printf_i+0x160>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	079b      	lsls	r3, r3, #30
 8005838:	d413      	bmi.n	8005862 <_printf_i+0x232>
 800583a:	68e0      	ldr	r0, [r4, #12]
 800583c:	9b03      	ldr	r3, [sp, #12]
 800583e:	4298      	cmp	r0, r3
 8005840:	bfb8      	it	lt
 8005842:	4618      	movlt	r0, r3
 8005844:	e7a6      	b.n	8005794 <_printf_i+0x164>
 8005846:	2301      	movs	r3, #1
 8005848:	4632      	mov	r2, r6
 800584a:	4649      	mov	r1, r9
 800584c:	4640      	mov	r0, r8
 800584e:	47d0      	blx	sl
 8005850:	3001      	adds	r0, #1
 8005852:	d09d      	beq.n	8005790 <_printf_i+0x160>
 8005854:	3501      	adds	r5, #1
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	9903      	ldr	r1, [sp, #12]
 800585a:	1a5b      	subs	r3, r3, r1
 800585c:	42ab      	cmp	r3, r5
 800585e:	dcf2      	bgt.n	8005846 <_printf_i+0x216>
 8005860:	e7eb      	b.n	800583a <_printf_i+0x20a>
 8005862:	2500      	movs	r5, #0
 8005864:	f104 0619 	add.w	r6, r4, #25
 8005868:	e7f5      	b.n	8005856 <_printf_i+0x226>
 800586a:	bf00      	nop
 800586c:	080059f5 	.word	0x080059f5
 8005870:	08005a06 	.word	0x08005a06

08005874 <memmove>:
 8005874:	4288      	cmp	r0, r1
 8005876:	b510      	push	{r4, lr}
 8005878:	eb01 0402 	add.w	r4, r1, r2
 800587c:	d902      	bls.n	8005884 <memmove+0x10>
 800587e:	4284      	cmp	r4, r0
 8005880:	4623      	mov	r3, r4
 8005882:	d807      	bhi.n	8005894 <memmove+0x20>
 8005884:	1e43      	subs	r3, r0, #1
 8005886:	42a1      	cmp	r1, r4
 8005888:	d008      	beq.n	800589c <memmove+0x28>
 800588a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800588e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005892:	e7f8      	b.n	8005886 <memmove+0x12>
 8005894:	4402      	add	r2, r0
 8005896:	4601      	mov	r1, r0
 8005898:	428a      	cmp	r2, r1
 800589a:	d100      	bne.n	800589e <memmove+0x2a>
 800589c:	bd10      	pop	{r4, pc}
 800589e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058a6:	e7f7      	b.n	8005898 <memmove+0x24>

080058a8 <_sbrk_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d06      	ldr	r5, [pc, #24]	; (80058c4 <_sbrk_r+0x1c>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	602b      	str	r3, [r5, #0]
 80058b4:	f7fb faa6 	bl	8000e04 <_sbrk>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_sbrk_r+0x1a>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_sbrk_r+0x1a>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20000358 	.word	0x20000358

080058c8 <memcpy>:
 80058c8:	440a      	add	r2, r1
 80058ca:	4291      	cmp	r1, r2
 80058cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058d0:	d100      	bne.n	80058d4 <memcpy+0xc>
 80058d2:	4770      	bx	lr
 80058d4:	b510      	push	{r4, lr}
 80058d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058de:	4291      	cmp	r1, r2
 80058e0:	d1f9      	bne.n	80058d6 <memcpy+0xe>
 80058e2:	bd10      	pop	{r4, pc}

080058e4 <_realloc_r>:
 80058e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	4680      	mov	r8, r0
 80058ea:	4614      	mov	r4, r2
 80058ec:	460e      	mov	r6, r1
 80058ee:	b921      	cbnz	r1, 80058fa <_realloc_r+0x16>
 80058f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058f4:	4611      	mov	r1, r2
 80058f6:	f7ff bc49 	b.w	800518c <_malloc_r>
 80058fa:	b92a      	cbnz	r2, 8005908 <_realloc_r+0x24>
 80058fc:	f7ff fbda 	bl	80050b4 <_free_r>
 8005900:	4625      	mov	r5, r4
 8005902:	4628      	mov	r0, r5
 8005904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005908:	f000 f81b 	bl	8005942 <_malloc_usable_size_r>
 800590c:	4284      	cmp	r4, r0
 800590e:	4607      	mov	r7, r0
 8005910:	d802      	bhi.n	8005918 <_realloc_r+0x34>
 8005912:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005916:	d812      	bhi.n	800593e <_realloc_r+0x5a>
 8005918:	4621      	mov	r1, r4
 800591a:	4640      	mov	r0, r8
 800591c:	f7ff fc36 	bl	800518c <_malloc_r>
 8005920:	4605      	mov	r5, r0
 8005922:	2800      	cmp	r0, #0
 8005924:	d0ed      	beq.n	8005902 <_realloc_r+0x1e>
 8005926:	42bc      	cmp	r4, r7
 8005928:	4622      	mov	r2, r4
 800592a:	4631      	mov	r1, r6
 800592c:	bf28      	it	cs
 800592e:	463a      	movcs	r2, r7
 8005930:	f7ff ffca 	bl	80058c8 <memcpy>
 8005934:	4631      	mov	r1, r6
 8005936:	4640      	mov	r0, r8
 8005938:	f7ff fbbc 	bl	80050b4 <_free_r>
 800593c:	e7e1      	b.n	8005902 <_realloc_r+0x1e>
 800593e:	4635      	mov	r5, r6
 8005940:	e7df      	b.n	8005902 <_realloc_r+0x1e>

08005942 <_malloc_usable_size_r>:
 8005942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005946:	1f18      	subs	r0, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	bfbc      	itt	lt
 800594c:	580b      	ldrlt	r3, [r1, r0]
 800594e:	18c0      	addlt	r0, r0, r3
 8005950:	4770      	bx	lr
	...

08005954 <_init>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr

08005960 <_fini>:
 8005960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005962:	bf00      	nop
 8005964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005966:	bc08      	pop	{r3}
 8005968:	469e      	mov	lr, r3
 800596a:	4770      	bx	lr
