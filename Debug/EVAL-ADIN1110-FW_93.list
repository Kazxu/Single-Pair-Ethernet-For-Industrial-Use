
EVAL-ADIN1110-FW_93.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b9f0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000178c  0801bbb0  0801bbb0  0002bbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d33c  0801d33c  000301a4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d33c  0801d33c  0002d33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d344  0801d344  000301a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d344  0801d344  0002d344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d348  0801d348  0002d348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0801d34c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007978  200001a4  0801d4f0  000301a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007b1c  0801d4f0  00037b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034764  00000000  00000000  00030217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000082f2  00000000  00000000  0006497b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002498  00000000  00000000  0006cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c86  00000000  00000000  0006f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000437c2  00000000  00000000  00070d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ba12  00000000  00000000  000b4550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001532e9  00000000  00000000  000eff62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a19c  00000000  00000000  0024324c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0024d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001a4 	.word	0x200001a4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801bb98 	.word	0x0801bb98

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001a8 	.word	0x200001a8
 80001fc:	0801bb98 	.word	0x0801bb98

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000aca:	f000 b9bb 	b.w	8000e44 <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f84d 	bl	8000b7c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f840 	bl	8000b7c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f82f 	bl	8000b7c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f821 	bl	8000b7c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b60:	f000 b970 	b.w	8000e44 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9e08      	ldr	r6, [sp, #32]
 8000b82:	460d      	mov	r5, r1
 8000b84:	4604      	mov	r4, r0
 8000b86:	460f      	mov	r7, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14a      	bne.n	8000c22 <__udivmoddi4+0xa6>
 8000b8c:	428a      	cmp	r2, r1
 8000b8e:	4694      	mov	ip, r2
 8000b90:	d965      	bls.n	8000c5e <__udivmoddi4+0xe2>
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	b143      	cbz	r3, 8000baa <__udivmoddi4+0x2e>
 8000b98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ba0:	409f      	lsls	r7, r3
 8000ba2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba6:	4317      	orrs	r7, r2
 8000ba8:	409c      	lsls	r4, r3
 8000baa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bae:	fa1f f58c 	uxth.w	r5, ip
 8000bb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc0:	fb01 f005 	mul.w	r0, r1, r5
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x62>
 8000bc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bcc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bd0:	f080 811c 	bcs.w	8000e0c <__udivmoddi4+0x290>
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	f240 8119 	bls.w	8000e0c <__udivmoddi4+0x290>
 8000bda:	3902      	subs	r1, #2
 8000bdc:	4462      	add	r2, ip
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	b2a4      	uxth	r4, r4
 8000be2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bee:	fb00 f505 	mul.w	r5, r0, r5
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x90>
 8000bf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bfe:	f080 8107 	bcs.w	8000e10 <__udivmoddi4+0x294>
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	f240 8104 	bls.w	8000e10 <__udivmoddi4+0x294>
 8000c08:	4464      	add	r4, ip
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c10:	1b64      	subs	r4, r4, r5
 8000c12:	2100      	movs	r1, #0
 8000c14:	b11e      	cbz	r6, 8000c1e <__udivmoddi4+0xa2>
 8000c16:	40dc      	lsrs	r4, r3
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0xbc>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	f000 80ed 	beq.w	8000e06 <__udivmoddi4+0x28a>
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c32:	4608      	mov	r0, r1
 8000c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c38:	fab3 f183 	clz	r1, r3
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	d149      	bne.n	8000cd4 <__udivmoddi4+0x158>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	d302      	bcc.n	8000c4a <__udivmoddi4+0xce>
 8000c44:	4282      	cmp	r2, r0
 8000c46:	f200 80f8 	bhi.w	8000e3a <__udivmoddi4+0x2be>
 8000c4a:	1a84      	subs	r4, r0, r2
 8000c4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c50:	2001      	movs	r0, #1
 8000c52:	4617      	mov	r7, r2
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d0e2      	beq.n	8000c1e <__udivmoddi4+0xa2>
 8000c58:	e9c6 4700 	strd	r4, r7, [r6]
 8000c5c:	e7df      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xe6>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f382 	clz	r3, r2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x210>
 8000c6c:	1a8a      	subs	r2, r1, r2
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	2101      	movs	r1, #1
 8000c78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c80:	0c22      	lsrs	r2, r4, #16
 8000c82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c86:	fb0e f005 	mul.w	r0, lr, r5
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x124>
 8000c8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c92:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x122>
 8000c98:	4290      	cmp	r0, r2
 8000c9a:	f200 80cb 	bhi.w	8000e34 <__udivmoddi4+0x2b8>
 8000c9e:	4645      	mov	r5, r8
 8000ca0:	1a12      	subs	r2, r2, r0
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x14e>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cc0:	d202      	bcs.n	8000cc8 <__udivmoddi4+0x14c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f200 80bb 	bhi.w	8000e3e <__udivmoddi4+0x2c2>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	eba4 040e 	sub.w	r4, r4, lr
 8000cce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd2:	e79f      	b.n	8000c14 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0720 	rsb	r7, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	40fd      	lsrs	r5, r7
 8000cec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d04:	fb08 f50e 	mul.w	r5, r8, lr
 8000d08:	42a5      	cmp	r5, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d12:	d90b      	bls.n	8000d2c <__udivmoddi4+0x1b0>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d1c:	f080 8088 	bcs.w	8000e30 <__udivmoddi4+0x2b4>
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	f240 8085 	bls.w	8000e30 <__udivmoddi4+0x2b4>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	4464      	add	r4, ip
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	b29d      	uxth	r5, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1da>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d4c:	d26c      	bcs.n	8000e28 <__udivmoddi4+0x2ac>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	d96a      	bls.n	8000e28 <__udivmoddi4+0x2ac>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	4464      	add	r4, ip
 8000d56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	46c8      	mov	r8, r9
 8000d66:	46ae      	mov	lr, r5
 8000d68:	d356      	bcc.n	8000e18 <__udivmoddi4+0x29c>
 8000d6a:	d053      	beq.n	8000e14 <__udivmoddi4+0x298>
 8000d6c:	b156      	cbz	r6, 8000d84 <__udivmoddi4+0x208>
 8000d6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d72:	eb64 040e 	sbc.w	r4, r4, lr
 8000d76:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7a:	40ca      	lsrs	r2, r1
 8000d7c:	40cc      	lsrs	r4, r1
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	e9c6 7400 	strd	r7, r4, [r6]
 8000d84:	4618      	mov	r0, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8c:	f1c3 0120 	rsb	r1, r3, #32
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	fa20 f201 	lsr.w	r2, r0, r1
 8000d98:	fa25 f101 	lsr.w	r1, r5, r1
 8000d9c:	409d      	lsls	r5, r3
 8000d9e:	432a      	orrs	r2, r5
 8000da0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1510 	mls	r5, r7, r0, r1
 8000db0:	0c11      	lsrs	r1, r2, #16
 8000db2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dba:	428d      	cmp	r5, r1
 8000dbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x258>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dca:	d22f      	bcs.n	8000e2c <__udivmoddi4+0x2b0>
 8000dcc:	428d      	cmp	r5, r1
 8000dce:	d92d      	bls.n	8000e2c <__udivmoddi4+0x2b0>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1b49      	subs	r1, r1, r5
 8000dd6:	b292      	uxth	r2, r2
 8000dd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ddc:	fb07 1115 	mls	r1, r7, r5, r1
 8000de0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de4:	fb05 f10e 	mul.w	r1, r5, lr
 8000de8:	4291      	cmp	r1, r2
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x282>
 8000dec:	eb1c 0202 	adds.w	r2, ip, r2
 8000df0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df4:	d216      	bcs.n	8000e24 <__udivmoddi4+0x2a8>
 8000df6:	4291      	cmp	r1, r2
 8000df8:	d914      	bls.n	8000e24 <__udivmoddi4+0x2a8>
 8000dfa:	3d02      	subs	r5, #2
 8000dfc:	4462      	add	r2, ip
 8000dfe:	1a52      	subs	r2, r2, r1
 8000e00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e04:	e738      	b.n	8000c78 <__udivmoddi4+0xfc>
 8000e06:	4631      	mov	r1, r6
 8000e08:	4630      	mov	r0, r6
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000e0c:	4639      	mov	r1, r7
 8000e0e:	e6e6      	b.n	8000bde <__udivmoddi4+0x62>
 8000e10:	4610      	mov	r0, r2
 8000e12:	e6fb      	b.n	8000c0c <__udivmoddi4+0x90>
 8000e14:	4548      	cmp	r0, r9
 8000e16:	d2a9      	bcs.n	8000d6c <__udivmoddi4+0x1f0>
 8000e18:	ebb9 0802 	subs.w	r8, r9, r2
 8000e1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e20:	3b01      	subs	r3, #1
 8000e22:	e7a3      	b.n	8000d6c <__udivmoddi4+0x1f0>
 8000e24:	4645      	mov	r5, r8
 8000e26:	e7ea      	b.n	8000dfe <__udivmoddi4+0x282>
 8000e28:	462b      	mov	r3, r5
 8000e2a:	e794      	b.n	8000d56 <__udivmoddi4+0x1da>
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	e7d1      	b.n	8000dd4 <__udivmoddi4+0x258>
 8000e30:	46d0      	mov	r8, sl
 8000e32:	e77b      	b.n	8000d2c <__udivmoddi4+0x1b0>
 8000e34:	3d02      	subs	r5, #2
 8000e36:	4462      	add	r2, ip
 8000e38:	e732      	b.n	8000ca0 <__udivmoddi4+0x124>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e70a      	b.n	8000c54 <__udivmoddi4+0xd8>
 8000e3e:	4464      	add	r4, ip
 8000e40:	3802      	subs	r0, #2
 8000e42:	e742      	b.n	8000cca <__udivmoddi4+0x14e>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <queueInit>:
/****************************************/

/* Implementation of Tx/Rx queues used by the MAC driver. */

void queueInit(adi_mac_Queue_t *pQueue, adi_mac_FrameStruct_t *pEntries, uint32_t numEntries)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
    /* This is the _RAW value */
    pQueue->pEntries = pEntries;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	601a      	str	r2, [r3, #0]
    pQueue->numEntries = numEntries;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	605a      	str	r2, [r3, #4]
    pQueue->head = 0;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
    pQueue->tail = 0;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]

    for (uint32_t i = 0; i < numEntries; i++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e010      	b.n	8000e94 <queueInit+0x4c>
    {
        pQueue->pEntries[i].header.VALUE16 = 0x0000;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	801a      	strh	r2, [r3, #0]
        pQueue->pEntries[i].pBufDesc = NULL;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4413      	add	r3, r2
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
    for (uint32_t i = 0; i < numEntries; i++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d3ea      	bcc.n	8000e72 <queueInit+0x2a>
    }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	371c      	adds	r7, #28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <queueCount>:

static inline uint32_t queueCount(adi_mac_Queue_t *pQueue)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b087      	sub	sp, #28
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
    uint32_t head = pQueue->head;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	617b      	str	r3, [r7, #20]
    uint32_t tail = pQueue->tail;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	613b      	str	r3, [r7, #16]
    uint32_t n = head + pQueue->numEntries - tail;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	441a      	add	r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	60fb      	str	r3, [r7, #12]

    return PSEUDO_MODULO(n, pQueue->numEntries);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d304      	bcc.n	8000ee0 <queueCount+0x36>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	e000      	b.n	8000ee2 <queueCount+0x38>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <queueIsFull>:
{
    return (pQueue->numEntries - 1) - queueCount(pQueue);
}

bool queueIsFull(adi_mac_Queue_t *pQueue)
{
 8000eee:	b590      	push	{r4, r7, lr}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
    return (pQueue->numEntries - 1) == queueCount(pQueue);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	1e5c      	subs	r4, r3, #1
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffd4 	bl	8000eaa <queueCount>
 8000f02:	4603      	mov	r3, r0
 8000f04:	429c      	cmp	r4, r3
 8000f06:	bf0c      	ite	eq
 8000f08:	2301      	moveq	r3, #1
 8000f0a:	2300      	movne	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd90      	pop	{r4, r7, pc}

08000f16 <queueIsEmpty>:

bool queueIsEmpty(adi_mac_Queue_t *pQueue)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
    uint32_t head = pQueue->head;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	60fb      	str	r3, [r7, #12]
    uint32_t tail = pQueue->tail;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]

    return head == tail;
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	bf0c      	ite	eq
 8000f32:	2301      	moveq	r3, #1
 8000f34:	2300      	movne	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <queueAdd>:

void queueAdd(adi_mac_Queue_t *pQueue)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    uint32_t n = pQueue->head + 1;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	3301      	adds	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
    pQueue->head = PSEUDO_MODULO(n, pQueue->numEntries);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d304      	bcc.n	8000f68 <queueAdd+0x24>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	e000      	b.n	8000f6a <queueAdd+0x26>
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6093      	str	r3, [r2, #8]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <queueRemove>:

void queueRemove(adi_mac_Queue_t *pQueue)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
    uint32_t n = pQueue->tail + 1;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	3301      	adds	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
    pQueue->tail = PSEUDO_MODULO(n, pQueue->numEntries);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d304      	bcc.n	8000f9e <queueRemove+0x24>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	e000      	b.n	8000fa0 <queueRemove+0x26>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <macCallback>:

}
#else

static void macCallback(void *pCBParam, uint32_t Event, void *pArg)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
    adi_mac_Device_t    *hDevice = (adi_mac_Device_t *)pCBParam;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	617b      	str	r3, [r7, #20]

    (void)Event;
    (void)pArg;

    oaIrqHandler(hDevice);
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f003 fa71 	bl	80044a8 <oaIrqHandler>

}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <MAC_Init>:
/***                                  ***/
/****************************************/
/****************************************/

adi_eth_Result_e MAC_Init(adi_mac_Device_t **phDevice, adi_mac_DriverConfig_t *cfg, void *adinDevice)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	77fb      	strb	r3, [r7, #31]
    adi_mac_Device_t    *hDevice;

    if (cfg->devMemSize < sizeof(adi_mac_Device_t))
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f5b3 7f6c 	cmp.w	r3, #944	; 0x3b0
 8000fe8:	d202      	bcs.n	8000ff0 <MAC_Init+0x20>
    {
        result = ADI_ETH_INVALID_PARAM;
 8000fea:	2308      	movs	r3, #8
 8000fec:	77fb      	strb	r3, [r7, #31]
        goto end;
 8000fee:	e0e0      	b.n	80011b2 <MAC_Init+0x1e2>
    }

    /* Disable IRQ for situations when this is called after device initialization */
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8000ff0:	f005 fb86 	bl	8006700 <HAL_DisableIrq>

    /* Implies state is uninitialized */
    memset(cfg->pDevMem, 0, cfg->devMemSize);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	f019 fe1f 	bl	801ac42 <memset>

    *phDevice = (adi_mac_Device_t *)cfg->pDevMem;
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	601a      	str	r2, [r3, #0]
    hDevice = *phDevice;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	617b      	str	r3, [r7, #20]
    hDevice->state = ADI_MAC_STATE_UNINITIALIZED;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    hDevice->adinDevice = adinDevice;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
    hDevice->spiState = ADI_MAC_SPI_STATE_READY;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2200      	movs	r2, #0
 8001022:	705a      	strb	r2, [r3, #1]
    hDevice->spiErr = 0;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]

    for (uint32_t i = 0; i < ADI_MAC_EVT_MAX; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	e00f      	b.n	8001050 <MAC_Init+0x80>
    {
        hDevice->cbFunc[i] = NULL;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	3202      	adds	r2, #2
 8001036:	2100      	movs	r1, #0
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        hDevice->cbParam[i] = NULL;
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	3306      	adds	r3, #6
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
    for (uint32_t i = 0; i < ADI_MAC_EVT_MAX; i++)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	3301      	adds	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b04      	cmp	r3, #4
 8001054:	d9ec      	bls.n	8001030 <MAC_Init+0x60>
    }

    hDevice->pendingCtrl = false;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

    hDevice->addrFilterActive = 0;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2200      	movs	r2, #0
 8001062:	871a      	strh	r2, [r3, #56]	; 0x38
    hDevice->configSync = false;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
    hDevice->fcsCheckEn = cfg->fcsCheckEn;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	7a1a      	ldrb	r2, [r3, #8]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    hDevice->timestampFormat = ADI_MAC_TS_FORMAT_NONE;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3

    hDevice->statusRegisters.status0Masked = 0;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2200      	movs	r2, #0
 8001082:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    hDevice->statusRegisters.status0 = 0;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2200      	movs	r2, #0
 800108a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    hDevice->statusRegisters.status1Masked = 0;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2200      	movs	r2, #0
 8001092:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    hDevice->statusRegisters.status1 = 0;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    hDevice->statusRegisters.p1StatusMasked = ADI_MAC_PHY_STATUS_INIT_VAL;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f06f 2280 	mvn.w	r2, #2147516416	; 0x80008000
 80010a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    hDevice->statusRegisters.p1Status = ADI_MAC_PHY_STATUS_INIT_VAL;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f06f 2280 	mvn.w	r2, #2147516416	; 0x80008000
 80010ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    hDevice->statusRegisters.p2StatusMasked = ADI_MAC_PHY_STATUS_INIT_VAL;
    hDevice->statusRegisters.p2Status = ADI_MAC_PHY_STATUS_INIT_VAL;
#endif

    /* Initialize both queues. */
    queueInit(&hDevice->txQueue, &hDevice->txQueueFrames[0], TX_QUEUE_NUM_ENTRIES_RAW);
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3344      	adds	r3, #68	; 0x44
 80010bc:	2205      	movs	r2, #5
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fec2 	bl	8000e48 <queueInit>
    queueInit(&hDevice->rxQueueLp, &hDevice->rxQueueLpFrames[0], RX_QUEUE_NUM_ENTRIES_RAW);
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3380      	adds	r3, #128	; 0x80
 80010ce:	2205      	movs	r2, #5
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff feb9 	bl	8000e48 <queueInit>
#if defined(ADI_MAC_ENABLE_RX_QUEUE_HI_PRIO)
    queueInit(&hDevice->rxQueueHp, &hDevice->rxQueueHpFrames[0], RX_QUEUE_NUM_ENTRIES_RAW);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	33b8      	adds	r3, #184	; 0xb8
 80010e0:	2205      	movs	r2, #5
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff feb0 	bl	8000e48 <queueInit>
#endif
    /* Default Rx queue is always the low priority */
    hDevice->pRxQueue = &hDevice->rxQueueLp;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	67da      	str	r2, [r3, #124]	; 0x7c

    result = (adi_eth_Result_e)ADI_HAL_SPI_REGISTER_CALLBACK(hDevice->adinDevice, (HAL_Callback_t const *)spiCallback, hDevice);
 80010f2:	6979      	ldr	r1, [r7, #20]
 80010f4:	4831      	ldr	r0, [pc, #196]	; (80011bc <MAC_Init+0x1ec>)
 80010f6:	f005 fb39 	bl	800676c <HAL_SpiRegisterCallback>
 80010fa:	4603      	mov	r3, r0
 80010fc:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d153      	bne.n	80011ac <MAC_Init+0x1dc>
    {
        goto end;
    }

    /* State needs to advance from uninitialized */
    hDevice->state = ADI_MAC_STATE_INITIALIZED;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]

#if defined(SPI_OA_EN)
    /* Initialize with maximum number of Tx credits */
    hDevice->oaTxc = 31;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	221f      	movs	r2, #31
 800110e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    /* Initialize with no Rx chunks available */
    hDevice->oaRca = 0;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2200      	movs	r2, #0
 8001116:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    /* The index in the buffer is 0 */
    hDevice->oaTxCurBufByteOffset = 0;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2200      	movs	r2, #0
 800111e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    hDevice->oaRxCurBufByteOffset = 0;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2200      	movs	r2, #0
 8001126:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    hDevice->oaTxCurBufIdx = 0;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2200      	movs	r2, #0
 800112e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    hDevice->oaRxCurBufIdx = 0;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    hDevice->oaCps = 6;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2206      	movs	r2, #6
 800113e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    hDevice->oaMaxChunkCount = ADI_OA_MAX_CHUNK64_COUNT;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2210      	movs	r2, #16
 8001146:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    hDevice->oaRxUseBackupBuf = false;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    hDevice->oaValidFlag = ADI_MAC_OA_VALID_FLAG_NONE;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    hDevice->oaTimestampSplit = false;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    hDevice->oaErrorStats.fdCount = 0;
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2200      	movs	r2, #0
 8001166:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    hDevice->oaErrorStats.invalidSvCount = 0;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2200      	movs	r2, #0
 800116e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    hDevice->oaErrorStats.invalidEvCount = 0;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2200      	movs	r2, #0
 8001176:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    hDevice->oaErrorStats.ftrParityErrorCount = 0;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2200      	movs	r2, #0
 800117e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    hDevice->oaErrorStats.hdrParityErrorCount = 0;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2200      	movs	r2, #0
 8001186:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    hDevice->oaErrorStats.syncErrorCount = 0;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2200      	movs	r2, #0
 800118e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
#endif

    /* Perform a software reset of the MAC. */
    result = MAC_Reset(hDevice, ADI_ETH_RESET_TYPE_MAC_PHY);
 8001192:	2101      	movs	r1, #1
 8001194:	6978      	ldr	r0, [r7, #20]
 8001196:	f000 f8e7 	bl	8001368 <MAC_Reset>
 800119a:	4603      	mov	r3, r0
 800119c:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 800119e:	7ffb      	ldrb	r3, [r7, #31]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <MAC_Init+0x1e0>
    {
        goto end;
    }

    hDevice->state = ADI_MAC_STATE_READY;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2202      	movs	r2, #2
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e002      	b.n	80011b2 <MAC_Init+0x1e2>
        goto end;
 80011ac:	bf00      	nop
 80011ae:	e000      	b.n	80011b2 <MAC_Init+0x1e2>
        goto end;
 80011b0:	bf00      	nop

end:
    return result;
 80011b2:	7ffb      	ldrb	r3, [r7, #31]

}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	080044d3 	.word	0x080044d3

080011c0 <macInit>:

static adi_eth_Result_e macInit(adi_mac_Device_t *hDevice)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]

    /* IMASK0 */
    /* All interrupt sources are unmasked, writing them individually for clarity */
    /* Exception is the PHY interrupt, it is too early to enable it here as this */
    /* is run before the PHY initialization.                                     */
    hDevice->irqMask0 = 0xFFFFFFFF;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
    hDevice->irqMask0 &= ~(BITM_MAC_IMASK0_TXPEM |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d8:	f423 53c3 	bic.w	r3, r3, #6240	; 0x1860
 80011dc:	f023 031f 	bic.w	r3, r3, #31
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	63d3      	str	r3, [r2, #60]	; 0x3c
                           BITM_MAC_IMASK0_HDREM |
                           BITM_MAC_IMASK0_RESETCM |
                           BITM_MAC_IMASK0_TXFCSEM |
                           BITM_MAC_IMASK0_CDPEM);

    result = MAC_WriteRegister(hDevice, ADDR_MAC_IMASK0, hDevice->irqMask0);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e8:	461a      	mov	r2, r3
 80011ea:	210c      	movs	r1, #12
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fa13 	bl	8001618 <MAC_WriteRegister>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]

    /* IMASK1 */
    hDevice->irqMask1 = 0xFFFFFFFF;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
    hDevice->irqMask1 &= ~(
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f423 52e8 	bic.w	r2, r3, #7424	; 0x1d00
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(ADIN2111)
                            | BITM_MAC_IMASK1_P2_TXFCSEM
#endif
                            );

    result = MAC_WriteRegister(hDevice, ADDR_MAC_IMASK1, hDevice->irqMask1);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	461a      	mov	r2, r3
 8001210:	210d      	movs	r1, #13
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 fa00 	bl	8001618 <MAC_WriteRegister>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]

    if (result != ADI_ETH_SUCCESS)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d176      	bne.n	8001310 <macInit+0x150>
    {
        goto end;
    }

    /* Although the callback is registered here,  */
    result = (adi_eth_Result_e)ADI_HAL_REGISTER_CALLBACK(hDevice->adinDevice, (HAL_Callback_t const *)macCallback, hDevice);
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4844      	ldr	r0, [pc, #272]	; (8001338 <macInit+0x178>)
 8001226:	f005 fa81 	bl	800672c <HAL_RegisterCallback>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d16f      	bne.n	8001314 <macInit+0x154>
    {
        goto end;
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_STATUS0, &val32);
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	461a      	mov	r2, r3
 800123a:	2108      	movs	r1, #8
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f975 	bl	800152c <MAC_ReadRegister>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d165      	bne.n	8001318 <macInit+0x158>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, ADDR_MAC_STATUS1, &val32);
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	461a      	mov	r2, r3
 8001252:	2109      	movs	r1, #9
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f969 	bl	800152c <MAC_ReadRegister>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d15b      	bne.n	800131c <macInit+0x15c>
    {
        goto end;
    }

    /* Configure the MAC to generate and append FCS to the frame, or expect the FCS to be appended by the host */
    if (hDevice->fcsCheckEn)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d006      	beq.n	800127c <macInit+0xbc>
    {
        result = (adi_eth_Result_e)ADI_HAL_FCS_INIT(hDevice->adinDevice);
 800126e:	f005 f819 	bl	80062a4 <HAL_FcsInit>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d151      	bne.n	8001320 <macInit+0x160>
        {
            goto end;
        }
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_CONFIG0, &val32);
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	461a      	mov	r2, r3
 8001282:	2104      	movs	r1, #4
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f951 	bl	800152c <MAC_ReadRegister>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d147      	bne.n	8001324 <macInit+0x164>
    {
        goto end;
    }

    if (hDevice->fcsCheckEn)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d004      	beq.n	80012a8 <macInit+0xe8>
    {
        val32 |= BITM_MAC_CONFIG0_TXFCSVE;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	e003      	b.n	80012b0 <macInit+0xf0>

    }
    else
    {
        val32 &= ~BITM_MAC_CONFIG0_TXFCSVE;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012ae:	60bb      	str	r3, [r7, #8]
    }
    result = MAC_WriteRegister(hDevice, ADDR_MAC_CONFIG0, val32);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	461a      	mov	r2, r3
 80012b4:	2104      	movs	r1, #4
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f9ae 	bl	8001618 <MAC_WriteRegister>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d130      	bne.n	8001328 <macInit+0x168>
    {
        goto end;
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_CONFIG2, &val32);
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	461a      	mov	r2, r3
 80012cc:	2106      	movs	r1, #6
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f92c 	bl	800152c <MAC_ReadRegister>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d126      	bne.n	800132c <macInit+0x16c>
    {
        goto end;
    }

    if (hDevice->fcsCheckEn)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <macInit+0x132>
    {
        val32 &= ~BITM_MAC_CONFIG2_CRC_APPEND;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f023 0320 	bic.w	r3, r3, #32
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	e003      	b.n	80012fa <macInit+0x13a>
    }
    else
    {
        val32 |= BITM_MAC_CONFIG2_CRC_APPEND;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f043 0320 	orr.w	r3, r3, #32
 80012f8:	60bb      	str	r3, [r7, #8]
    }
    result = MAC_WriteRegister(hDevice, ADDR_MAC_CONFIG2, val32);
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	461a      	mov	r2, r3
 80012fe:	2106      	movs	r1, #6
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f989 	bl	8001618 <MAC_WriteRegister>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 800130e:	e00e      	b.n	800132e <macInit+0x16e>
        goto end;
 8001310:	bf00      	nop
 8001312:	e00c      	b.n	800132e <macInit+0x16e>
        goto end;
 8001314:	bf00      	nop
 8001316:	e00a      	b.n	800132e <macInit+0x16e>
        goto end;
 8001318:	bf00      	nop
 800131a:	e008      	b.n	800132e <macInit+0x16e>
        goto end;
 800131c:	bf00      	nop
 800131e:	e006      	b.n	800132e <macInit+0x16e>
            goto end;
 8001320:	bf00      	nop
 8001322:	e004      	b.n	800132e <macInit+0x16e>
        goto end;
 8001324:	bf00      	nop
 8001326:	e002      	b.n	800132e <macInit+0x16e>
        goto end;
 8001328:	bf00      	nop
 800132a:	e000      	b.n	800132e <macInit+0x16e>
        goto end;
 800132c:	bf00      	nop
    return result;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08000fb1 	.word	0x08000fb1

0800133c <MAC_UnInit>:
 *
 * @return 0 in case of success, positive error code otherwise.
 *
 */
adi_eth_Result_e MAC_UnInit(adi_mac_Device_t *hDevice)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]

    if (hDevice == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <MAC_UnInit+0x18>
    {
        result = ADI_ETH_INVALID_HANDLE;
 800134e:	230a      	movs	r3, #10
 8001350:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001352:	e004      	b.n	800135e <MAC_UnInit+0x22>
    }

    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8001354:	f005 f9d4 	bl	8006700 <HAL_DisableIrq>

    hDevice->state = ADI_MAC_STATE_UNINITIALIZED;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]

end:
    return result;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <MAC_Reset>:
 * @param [in] dev - Pointer to the HW driver.
 *
 * @return 0 in case of success, positive error code otherwise.
*/
adi_eth_Result_e MAC_Reset(adi_mac_Device_t *hDevice, adi_eth_ResetType_e resetType)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001374:	2300      	movs	r3, #0
 8001376:	75fb      	strb	r3, [r7, #23]
    uint16_t            keys[2];
    uint32_t            retryCount;

    if (hDevice == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <MAC_Reset+0x1c>
    {
        result = ADI_ETH_INVALID_HANDLE;
 800137e:	230a      	movs	r3, #10
 8001380:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001382:	e060      	b.n	8001446 <MAC_Reset+0xde>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <MAC_Reset+0x2c>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 800138e:	2306      	movs	r3, #6
 8001390:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001392:	e058      	b.n	8001446 <MAC_Reset+0xde>

    /* Disable IRQ here to prevent RESETC from being cleared in the IRQ handler */
    /* Because a reset needs to be followed up by reconfiguration of the device */
    /* and a call to SyncConfig(), the IRQ will be enabled by the latter so it  */
    /* can be left in a disabled state by this reset function.                  */
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8001394:	f005 f9b4 	bl	8006700 <HAL_DisableIrq>
    /* To prevent a premature exit with an error, the reset is repeated several */
    /* times if the register write is not successful. This is particularly      */
    /* important when using OPEN Alliance protocol, because the comparison      */
    /* between the control header and the echoed control header will fail       */
    /* immediately if the device is sending invalid data (all 0s) to the host.  */
    retryCount = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
    do
    {
        switch (resetType)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <MAC_Reset+0x40>
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d01a      	beq.n	80013dc <MAC_Reset+0x74>
 80013a6:	e021      	b.n	80013ec <MAC_Reset+0x84>
        {
            case ADI_ETH_RESET_TYPE_MAC_ONLY:
                keys[0] = RST_MAC_ONLY_KEY1;
 80013a8:	f644 731c 	movw	r3, #20252	; 0x4f1c
 80013ac:	81bb      	strh	r3, [r7, #12]
                keys[1] = RST_MAC_ONLY_KEY2;
 80013ae:	f24c 13f4 	movw	r3, #49652	; 0xc1f4
 80013b2:	81fb      	strh	r3, [r7, #14]

                /* No checking of results, see comment above. */
                result = MAC_WriteRegister(hDevice, ADDR_MAC_SOFT_RST, keys[0]);
 80013b4:	89bb      	ldrh	r3, [r7, #12]
 80013b6:	461a      	mov	r2, r3
 80013b8:	213c      	movs	r1, #60	; 0x3c
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f92c 	bl	8001618 <MAC_WriteRegister>
 80013c0:	4603      	mov	r3, r0
 80013c2:	75fb      	strb	r3, [r7, #23]
                if (result == ADI_ETH_SUCCESS)
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d113      	bne.n	80013f2 <MAC_Reset+0x8a>
                {
                    result = MAC_WriteRegister(hDevice, ADDR_MAC_SOFT_RST, keys[1]);
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	461a      	mov	r2, r3
 80013ce:	213c      	movs	r1, #60	; 0x3c
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f921 	bl	8001618 <MAC_WriteRegister>
 80013d6:	4603      	mov	r3, r0
 80013d8:	75fb      	strb	r3, [r7, #23]
                }

                break;
 80013da:	e00a      	b.n	80013f2 <MAC_Reset+0x8a>

            case ADI_ETH_RESET_TYPE_MAC_PHY:

                /* No checking of results, see comment above. */
                result = MAC_WriteRegister(hDevice, ADDR_MAC_RESET, (1 << BITP_MAC_RESET_SWRESET));
 80013dc:	2201      	movs	r2, #1
 80013de:	2103      	movs	r1, #3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f919 	bl	8001618 <MAC_WriteRegister>
 80013e6:	4603      	mov	r3, r0
 80013e8:	75fb      	strb	r3, [r7, #23]
                break;
 80013ea:	e003      	b.n	80013f4 <MAC_Reset+0x8c>

            default:
                result = ADI_ETH_INVALID_PARAM;
 80013ec:	2308      	movs	r3, #8
 80013ee:	75fb      	strb	r3, [r7, #23]
                goto end;
 80013f0:	e029      	b.n	8001446 <MAC_Reset+0xde>
                break;
 80013f2:	bf00      	nop
        }
    } while ((result != ADI_ETH_SUCCESS) && (retryCount++ < ADI_MAC_IF_UP_MAX_RETRIES));
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <MAC_Reset+0xa0>
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	613a      	str	r2, [r7, #16]
 8001400:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001404:	4293      	cmp	r3, r2
 8001406:	d9c9      	bls.n	800139c <MAC_Reset+0x34>

    if (result != ADI_ETH_SUCCESS)
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <MAC_Reset+0xac>
    {
        result = ADI_ETH_SW_RESET_TIMEOUT;
 800140e:	231a      	movs	r3, #26
 8001410:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001412:	e018      	b.n	8001446 <MAC_Reset+0xde>
    }

    if ((resetType == ADI_ETH_RESET_TYPE_MAC_ONLY) || (resetType == ADI_ETH_RESET_TYPE_MAC_PHY))
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <MAC_Reset+0xb8>
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <MAC_Reset+0xca>
    {
        /* Wait for MAC reset to finish */
        result = waitDeviceReady(hDevice);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f9af 	bl	8001784 <waitDeviceReady>
 8001426:	4603      	mov	r3, r0
 8001428:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <MAC_Reset+0xd0>
        {
            goto end;
 8001430:	e009      	b.n	8001446 <MAC_Reset+0xde>
        }
    }
    else
    {
        result = ADI_ETH_INVALID_PARAM;
 8001432:	2308      	movs	r3, #8
 8001434:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001436:	e006      	b.n	8001446 <MAC_Reset+0xde>
    }

    /* After reset, the configuration is no longer synchronized */
    hDevice->configSync = false;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
    /* Initialize IRQs and other registers */
    macInit(hDevice);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff febd 	bl	80011c0 <macInit>

end:
    return result;
 8001446:	7dfb      	ldrb	r3, [r7, #23]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <MAC_RegisterCallback>:
 *
 * @return 0 in case of success, positive error code otherwise.
 *
 */
adi_eth_Result_e MAC_RegisterCallback(adi_mac_Device_t *hDevice, adi_eth_Callback_t cbFunc, adi_mac_InterruptEvt_e cbEvent, void *cbParam)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	4613      	mov	r3, r2
 800145e:	71fb      	strb	r3, [r7, #7]
    adi_eth_Result_e            result = ADI_ETH_SUCCESS;
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]
    bool                        irqMaskModified = false;
 8001464:	2300      	movs	r3, #0
 8001466:	75bb      	strb	r3, [r7, #22]

    hDevice->cbFunc[cbEvent] = cbFunc;
 8001468:	79fa      	ldrb	r2, [r7, #7]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3202      	adds	r2, #2
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    hDevice->cbParam[cbEvent] = cbParam;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	3306      	adds	r3, #6
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	605a      	str	r2, [r3, #4]

    switch (cbEvent)
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <MAC_RegisterCallback+0x3e>
 8001488:	2b04      	cmp	r3, #4
 800148a:	d00f      	beq.n	80014ac <MAC_RegisterCallback+0x5c>
 800148c:	e025      	b.n	80014da <MAC_RegisterCallback+0x8a>
    {
        case ADI_MAC_EVT_LINK_CHANGE:
             /* Link status and link status change behave differently in ADIN2111 */
#if !defined(ADIN2111)
            if (hDevice->irqMask1 & BITM_MAC_IMASK1_LINK_CHANGE_MASK)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d022      	beq.n	80014e0 <MAC_RegisterCallback+0x90>
            {
                hDevice->irqMask1 &= ~BITM_MAC_IMASK1_LINK_CHANGE_MASK;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f023 0202 	bic.w	r2, r3, #2
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
                irqMaskModified = true;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75bb      	strb	r3, [r7, #22]
            }
#endif
            break;
 80014aa:	e019      	b.n	80014e0 <MAC_RegisterCallback+0x90>

        case ADI_MAC_EVT_TIMESTAMP_RDY:
            if (hDevice->timestampFormat == ADI_MAC_TS_FORMAT_NONE)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <MAC_RegisterCallback+0x6c>
            {
                result = ADI_ETH_NO_TS_FORMAT;
 80014b6:	231f      	movs	r3, #31
 80014b8:	75fb      	strb	r3, [r7, #23]
                goto end;
 80014ba:	e031      	b.n	8001520 <MAC_RegisterCallback+0xd0>
            {
                hDevice->irqMask1 &= ~(BITM_MAC_IMASK1_P2_TTSCAAM | BITM_MAC_IMASK1_P2_TTSCABM | BITM_MAC_IMASK1_P2_TTSCACM);
                irqMaskModified = true;
            }
#endif
            if (hDevice->irqMask0 & (BITM_MAC_IMASK0_TTSCAAM | BITM_MAC_IMASK0_TTSCABM | BITM_MAC_IMASK0_TTSCACM))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00d      	beq.n	80014e4 <MAC_RegisterCallback+0x94>
            {
                hDevice->irqMask0 &= ~(BITM_MAC_IMASK0_TTSCAAM | BITM_MAC_IMASK0_TTSCABM | BITM_MAC_IMASK0_TTSCACM);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c
                irqMaskModified = true;
 80014d4:	2301      	movs	r3, #1
 80014d6:	75bb      	strb	r3, [r7, #22]
            }
            break;
 80014d8:	e004      	b.n	80014e4 <MAC_RegisterCallback+0x94>

        default:
            irqMaskModified = false;
 80014da:	2300      	movs	r3, #0
 80014dc:	75bb      	strb	r3, [r7, #22]
 80014de:	e002      	b.n	80014e6 <MAC_RegisterCallback+0x96>
            break;
 80014e0:	bf00      	nop
 80014e2:	e000      	b.n	80014e6 <MAC_RegisterCallback+0x96>
            break;
 80014e4:	bf00      	nop
    }

    if (irqMaskModified)
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d016      	beq.n	800151a <MAC_RegisterCallback+0xca>
    {
        result = MAC_WriteRegister(hDevice, ADDR_MAC_IMASK0, hDevice->irqMask0);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f0:	461a      	mov	r2, r3
 80014f2:	210c      	movs	r1, #12
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f88f 	bl	8001618 <MAC_WriteRegister>
 80014fa:	4603      	mov	r3, r0
 80014fc:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10c      	bne.n	800151e <MAC_RegisterCallback+0xce>
        {
            goto end;
        }
        result = MAC_WriteRegister(hDevice, ADDR_MAC_IMASK1, hDevice->irqMask1);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	461a      	mov	r2, r3
 800150a:	210d      	movs	r1, #13
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 f883 	bl	8001618 <MAC_WriteRegister>
 8001512:	4603      	mov	r3, r0
 8001514:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	2b00      	cmp	r3, #0
        {
            goto end;
        }
    }

end:
 800151a:	bf00      	nop
 800151c:	e000      	b.n	8001520 <MAC_RegisterCallback+0xd0>
            goto end;
 800151e:	bf00      	nop
    return result;
 8001520:	7dfb      	ldrb	r3, [r7, #23]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <MAC_ReadRegister>:

adi_eth_Result_e MAC_ReadRegister(adi_mac_Device_t *hDevice, uint16_t regAddr, uint32_t *regData)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	460b      	mov	r3, r1
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	817b      	strh	r3, [r7, #10]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800153a:	2300      	movs	r3, #0
 800153c:	77fb      	strb	r3, [r7, #31]
    uint8_t             buf[ADI_MAC_SPI_ACCESS_SIZE];
    uint32_t            backup = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
    uint32_t            timeout;

    if (hDevice == NULL)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <MAC_ReadRegister+0x22>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001548:	230a      	movs	r3, #10
 800154a:	77fb      	strb	r3, [r7, #31]
        goto end;
 800154c:	e054      	b.n	80015f8 <MAC_ReadRegister+0xcc>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <MAC_ReadRegister+0x32>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001558:	2306      	movs	r3, #6
 800155a:	77fb      	strb	r3, [r7, #31]
        goto end;
 800155c:	e04c      	b.n	80015f8 <MAC_ReadRegister+0xcc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155e:	b672      	cpsid	i
}
 8001560:	bf00      	nop
    }

    ADI_HAL_ENTER_CRITICAL_SECTION();
    if (hDevice->spiState != ADI_MAC_SPI_STATE_READY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <MAC_ReadRegister+0x46>
    {
        /* Function was called while a SPI transaction is ongoing (non-blocking, using DMA).        */
        /* In this situation we want to re-enable the IRQ, it will always be disabled at this point.*/
        backup = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	e002      	b.n	8001578 <MAC_ReadRegister+0x4c>
    }
    else
    {
        backup = ADI_HAL_GET_ENABLE_IRQ(hDevice->adinDevice);
 8001572:	f005 f8d3 	bl	800671c <HAL_GetEnableIrq>
 8001576:	61b8      	str	r0, [r7, #24]
    }
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8001578:	f005 f8c2 	bl	8006700 <HAL_DisableIrq>
    hDevice->pendingCtrl = true;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  __ASM volatile ("cpsie i" : : : "memory");
 8001584:	b662      	cpsie	i
}
 8001586:	bf00      	nop
    ADI_HAL_EXIT_CRITICAL_SECTION();

    /* Wait for ongoing SPI transaction to finish, with a timeout. */
    timeout = ADI_SPI_TIMEOUT;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MAC_ReadRegister+0xe8>)
 800158a:	617b      	str	r3, [r7, #20]
    while (timeout && (hDevice->spiState != ADI_MAC_SPI_STATE_READY))
 800158c:	e002      	b.n	8001594 <MAC_ReadRegister+0x68>
    {
        timeout--;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3b01      	subs	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
    while (timeout && (hDevice->spiState != ADI_MAC_SPI_STATE_READY))
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <MAC_ReadRegister+0x78>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	785b      	ldrb	r3, [r3, #1]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f4      	bne.n	800158e <MAC_ReadRegister+0x62>
    }

    if (!timeout)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <MAC_ReadRegister+0x84>
    {
        result = ADI_ETH_COMM_TIMEOUT;
 80015aa:	2304      	movs	r3, #4
 80015ac:	77fb      	strb	r3, [r7, #31]
        goto end;
 80015ae:	e023      	b.n	80015f8 <MAC_ReadRegister+0xcc>

#else

    (void)buf;

    hDevice->wnr = ADI_MAC_SPI_READ;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    hDevice->regAddr = regAddr;
 80015b8:	897a      	ldrh	r2, [r7, #10]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hDevice->pRegData = regData;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    hDevice->cnt = 1;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

    hDevice->state = ADI_MAC_STATE_CONTROL_START;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2205      	movs	r2, #5
 80015d4:	701a      	strb	r2, [r3, #0]

    oaStateMachine(hDevice);
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f002 ff8a 	bl	80044f0 <oaStateMachine>

    while (hDevice->state != ADI_MAC_STATE_READY)
 80015dc:	bf00      	nop
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d1fa      	bne.n	80015de <MAC_ReadRegister+0xb2>
      ;

    if (hDevice->spiErr)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <MAC_ReadRegister+0xca>
    {
        result = ADI_ETH_SPI_ERROR;
 80015f0:	2319      	movs	r3, #25
 80015f2:	77fb      	strb	r3, [r7, #31]
 80015f4:	e000      	b.n	80015f8 <MAC_ReadRegister+0xcc>
    }

#endif

end:
 80015f6:	bf00      	nop

    hDevice->pendingCtrl = false;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

    if (backup)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MAC_ReadRegister+0xde>
    {
        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8001606:	f005 f882 	bl	800670e <HAL_EnableIrq>
    }

    return result;
 800160a:	7ffb      	ldrb	r3, [r7, #31]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	000186a0 	.word	0x000186a0

08001618 <MAC_WriteRegister>:

adi_eth_Result_e MAC_WriteRegister(adi_mac_Device_t *hDevice, uint16_t regAddr, uint32_t regData)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	460b      	mov	r3, r1
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	817b      	strh	r3, [r7, #10]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001626:	2300      	movs	r3, #0
 8001628:	77fb      	strb	r3, [r7, #31]
    uint8_t             buf[ADI_MAC_SPI_ACCESS_SIZE];
    uint32_t            backup = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
    uint32_t            timeout;

    if (hDevice == NULL)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <MAC_WriteRegister+0x22>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001634:	230a      	movs	r3, #10
 8001636:	77fb      	strb	r3, [r7, #31]
        goto end;
 8001638:	e054      	b.n	80016e4 <MAC_WriteRegister+0xcc>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <MAC_WriteRegister+0x32>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001644:	2306      	movs	r3, #6
 8001646:	77fb      	strb	r3, [r7, #31]
        goto end;
 8001648:	e04c      	b.n	80016e4 <MAC_WriteRegister+0xcc>
  __ASM volatile ("cpsid i" : : : "memory");
 800164a:	b672      	cpsid	i
}
 800164c:	bf00      	nop
    }

    ADI_HAL_ENTER_CRITICAL_SECTION();
    if (hDevice->spiState != ADI_MAC_SPI_STATE_READY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	785b      	ldrb	r3, [r3, #1]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <MAC_WriteRegister+0x46>
    {
        /* Function was called while a SPI transaction is ongoing (non-blocking, using DMA).        */
        /* In this situation we want to re-enable the IRQ, it will always be disabled at this point.*/
        backup = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	e002      	b.n	8001664 <MAC_WriteRegister+0x4c>
    }
    else
    {
        backup = ADI_HAL_GET_ENABLE_IRQ(hDevice->adinDevice);
 800165e:	f005 f85d 	bl	800671c <HAL_GetEnableIrq>
 8001662:	61b8      	str	r0, [r7, #24]
    }
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8001664:	f005 f84c 	bl	8006700 <HAL_DisableIrq>
    hDevice->pendingCtrl = true;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  __ASM volatile ("cpsie i" : : : "memory");
 8001670:	b662      	cpsie	i
}
 8001672:	bf00      	nop
    ADI_HAL_EXIT_CRITICAL_SECTION();

    /* Wait for ongoing SPI transaction to finish, with a timeout. */
    timeout = ADI_SPI_TIMEOUT;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MAC_WriteRegister+0xe8>)
 8001676:	617b      	str	r3, [r7, #20]
    while (timeout && (hDevice->spiState != ADI_MAC_SPI_STATE_READY))
 8001678:	e002      	b.n	8001680 <MAC_WriteRegister+0x68>
    {
        timeout--;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3b01      	subs	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
    while (timeout && (hDevice->spiState != ADI_MAC_SPI_STATE_READY))
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d004      	beq.n	8001690 <MAC_WriteRegister+0x78>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	785b      	ldrb	r3, [r3, #1]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f4      	bne.n	800167a <MAC_WriteRegister+0x62>
    }

    if (!timeout)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <MAC_WriteRegister+0x84>
    {
        result = ADI_ETH_COMM_TIMEOUT;
 8001696:	2304      	movs	r3, #4
 8001698:	77fb      	strb	r3, [r7, #31]
        goto end;
 800169a:	e023      	b.n	80016e4 <MAC_WriteRegister+0xcc>

#else

    (void)buf;

    hDevice->wnr = ADI_MAC_SPI_WRITE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    hDevice->regAddr = regAddr;
 80016a4:	897a      	ldrh	r2, [r7, #10]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hDevice->pRegData = &regData;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1d3a      	adds	r2, r7, #4
 80016b0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    hDevice->cnt = 1;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    hDevice->state = ADI_MAC_STATE_CONTROL_START;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2205      	movs	r2, #5
 80016c0:	701a      	strb	r2, [r3, #0]

    oaStateMachine(hDevice);
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f002 ff14 	bl	80044f0 <oaStateMachine>

    while (hDevice->state != ADI_MAC_STATE_READY)
 80016c8:	bf00      	nop
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d1fa      	bne.n	80016ca <MAC_WriteRegister+0xb2>
      ;

    if (hDevice->spiErr)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <MAC_WriteRegister+0xca>
    {
        result = ADI_ETH_SPI_ERROR;
 80016dc:	2319      	movs	r3, #25
 80016de:	77fb      	strb	r3, [r7, #31]
 80016e0:	e000      	b.n	80016e4 <MAC_WriteRegister+0xcc>
    }

#endif

end:
 80016e2:	bf00      	nop
    hDevice->pendingCtrl = false;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    if (backup)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MAC_WriteRegister+0xde>
    {
        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 80016f2:	f005 f80c 	bl	800670e <HAL_EnableIrq>
    }

    return result;
 80016f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	000186a0 	.word	0x000186a0

08001704 <waitMdioReady>:

adi_eth_Result_e waitMdioReady(adi_mac_Device_t *hDevice, uint16_t addrOffset)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
    adi_eth_Result_e        result = ADI_ETH_SUCCESS;
 8001710:	2300      	movs	r3, #0
 8001712:	74bb      	strb	r3, [r7, #18]
    ADI_MAC_MDIOACC_0__t    mdioCmd;
    uint32_t                retryCount = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
    bool                    mdioRdy = false;
 8001718:	2300      	movs	r3, #0
 800171a:	74fb      	strb	r3, [r7, #19]

    do
    {
        result = MAC_ReadRegister(hDevice, addrOffset, &mdioCmd.VALUE32);
 800171c:	f107 020c 	add.w	r2, r7, #12
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	4619      	mov	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff01 	bl	800152c <MAC_ReadRegister>
 800172a:	4603      	mov	r3, r0
 800172c:	74bb      	strb	r3, [r7, #18]
        if (result != ADI_ETH_SUCCESS)
 800172e:	7cbb      	ldrb	r3, [r7, #18]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d116      	bne.n	8001762 <waitMdioReady+0x5e>
        {
            break;
        }
        else if (mdioCmd.MDIO_TRDONE)
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <waitMdioReady+0x40>
        {
            mdioRdy = true;
 8001740:	2301      	movs	r3, #1
 8001742:	74fb      	strb	r3, [r7, #19]
        }
    } while (((result != ADI_ETH_SUCCESS) || !mdioRdy) && (retryCount++ < ADI_MAC_MDIO_MAX_RETRIES));
 8001744:	7cbb      	ldrb	r3, [r7, #18]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <waitMdioReady+0x52>
 800174a:	7cfb      	ldrb	r3, [r7, #19]
 800174c:	f083 0301 	eor.w	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <waitMdioReady+0x60>
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	617a      	str	r2, [r7, #20]
 800175c:	2b09      	cmp	r3, #9
 800175e:	d9dd      	bls.n	800171c <waitMdioReady+0x18>
 8001760:	e000      	b.n	8001764 <waitMdioReady+0x60>
            break;
 8001762:	bf00      	nop

    result = ((result == ADI_ETH_SUCCESS) && mdioRdy) ? ADI_ETH_SUCCESS: ADI_ETH_MDIO_TIMEOUT;
 8001764:	7cbb      	ldrb	r3, [r7, #18]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <waitMdioReady+0x6c>
 800176a:	7cfb      	ldrb	r3, [r7, #19]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <waitMdioReady+0x70>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <waitMdioReady+0x72>
 8001774:	2300      	movs	r3, #0
 8001776:	74bb      	strb	r3, [r7, #18]

    return result;
 8001778:	7cbb      	ldrb	r3, [r7, #18]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <waitDeviceReady>:

adi_eth_Result_e waitDeviceReady(adi_mac_Device_t *hDevice)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800178c:	2300      	movs	r3, #0
 800178e:	77fb      	strb	r3, [r7, #31]
    uint32_t            retryCount = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
    bool                resetDone = false;
 8001794:	2300      	movs	r3, #0
 8001796:	75fb      	strb	r3, [r7, #23]
    uint32_t            status0;
    bool                commOk = false;
 8001798:	2300      	movs	r3, #0
 800179a:	75bb      	strb	r3, [r7, #22]
    uint32_t            phyId;

    /* Poll PHYID register to establish the device has been brought up (powered up, out of reset). */
    retryCount = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
    commOk = false;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75bb      	strb	r3, [r7, #22]
    while ((!commOk) && (retryCount++ < ADI_MAC_INIT_MAX_RETRIES))
 80017a4:	e011      	b.n	80017ca <waitDeviceReady+0x46>
    {
        result = MAC_ReadRegister(hDevice, ADDR_MAC_PHYID, &phyId);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	461a      	mov	r2, r3
 80017ac:	2101      	movs	r1, #1
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff febc 	bl	800152c <MAC_ReadRegister>
 80017b4:	4603      	mov	r3, r0
 80017b6:	77fb      	strb	r3, [r7, #31]
        if ((result == ADI_ETH_SUCCESS) && (phyId == RSTVAL_MAC_PHYID))
 80017b8:	7ffb      	ldrb	r3, [r7, #31]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d105      	bne.n	80017ca <waitDeviceReady+0x46>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4a28      	ldr	r2, [pc, #160]	; (8001864 <waitDeviceReady+0xe0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <waitDeviceReady+0x46>
        {
            commOk = true;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75bb      	strb	r3, [r7, #22]
    while ((!commOk) && (retryCount++ < ADI_MAC_INIT_MAX_RETRIES))
 80017ca:	7dbb      	ldrb	r3, [r7, #22]
 80017cc:	f083 0301 	eor.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <waitDeviceReady+0x60>
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	61ba      	str	r2, [r7, #24]
 80017dc:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d9e0      	bls.n	80017a6 <waitDeviceReady+0x22>
        }
    }

    if (!commOk)
 80017e4:	7dbb      	ldrb	r3, [r7, #22]
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d01c      	beq.n	800182a <waitDeviceReady+0xa6>
    {
        result = ADI_ETH_COMM_TIMEOUT;
 80017f0:	2304      	movs	r3, #4
 80017f2:	77fb      	strb	r3, [r7, #31]
        goto end;
 80017f4:	e030      	b.n	8001858 <waitDeviceReady+0xd4>
    }

    /* Now we can check RESETC without worrying about status0 comming back as all 0xF due to MAC-PHY still in reset. */
    while ((!resetDone) && (retryCount++ < ADI_MAC_IF_UP_MAX_RETRIES))
    {
        result = MAC_ReadRegister(hDevice, ADDR_MAC_STATUS0, &status0);
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	461a      	mov	r2, r3
 80017fc:	2108      	movs	r1, #8
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe94 	bl	800152c <MAC_ReadRegister>
 8001804:	4603      	mov	r3, r0
 8001806:	77fb      	strb	r3, [r7, #31]
        if ((result == ADI_ETH_SUCCESS) && ((status0 & BITM_MAC_STATUS0_RESETC) == BITM_MAC_STATUS0_RESETC))
 8001808:	7ffb      	ldrb	r3, [r7, #31]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <waitDeviceReady+0xa6>
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <waitDeviceReady+0xa6>
        {
            resetDone = true;
 8001818:	2301      	movs	r3, #1
 800181a:	75fb      	strb	r3, [r7, #23]
            result = MAC_WriteRegister(hDevice, ADDR_MAC_STATUS0, BITM_MAC_STATUS0_RESETC);
 800181c:	2240      	movs	r2, #64	; 0x40
 800181e:	2108      	movs	r1, #8
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fef9 	bl	8001618 <MAC_WriteRegister>
 8001826:	4603      	mov	r3, r0
 8001828:	77fb      	strb	r3, [r7, #31]
    while ((!resetDone) && (retryCount++ < ADI_MAC_IF_UP_MAX_RETRIES))
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	f083 0301 	eor.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <waitDeviceReady+0xc0>
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	61ba      	str	r2, [r7, #24]
 800183c:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001840:	4293      	cmp	r3, r2
 8001842:	d9d8      	bls.n	80017f6 <waitDeviceReady+0x72>
        }
    }
    if (!resetDone)
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	f083 0301 	eor.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <waitDeviceReady+0xd2>
    {
        result = ADI_ETH_SW_RESET_TIMEOUT;
 8001850:	231a      	movs	r3, #26
 8001852:	77fb      	strb	r3, [r7, #31]
 8001854:	e000      	b.n	8001858 <waitDeviceReady+0xd4>
    }

end:
 8001856:	bf00      	nop
    return result;
 8001858:	7ffb      	ldrb	r3, [r7, #31]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	0283bc91 	.word	0x0283bc91

08001868 <MAC_PhyRead>:
 * @param [out] data - Pointer to the data buffer.
 *
 * @return 0 in case of success, positive error code otherwise.
*/
adi_eth_Result_e MAC_PhyRead(adi_mac_Device_t *hDevice,  uint8_t hwAddr, uint32_t regAddr, uint16_t *regData)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	460b      	mov	r3, r1
 8001876:	72fb      	strb	r3, [r7, #11]
    adi_eth_Result_e       result = ADI_ETH_SUCCESS;
 8001878:	2300      	movs	r3, #0
 800187a:	75fb      	strb	r3, [r7, #23]
    ADI_MAC_MDIOACC_0__t   mdioCmd;

    /* Use the first MDIO register for the address operation.   */
    /* MDIO Speed defaults to 2.5MHz per CONFIG2.MSPEED.        */
    mdioCmd.MDIO_DEVAD = DEVTYPE(regAddr);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	b2da      	uxtb	r2, r3
 8001886:	7cbb      	ldrb	r3, [r7, #18]
 8001888:	f362 0304 	bfi	r3, r2, #0, #5
 800188c:	74bb      	strb	r3, [r7, #18]
    mdioCmd.MDIO_ST = ENUM_MAC_MDIOACC_N__MDIO_ST_CLAUSE45;
 800188e:	7cfb      	ldrb	r3, [r7, #19]
 8001890:	f36f 1305 	bfc	r3, #4, #2
 8001894:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_PRTAD = hwAddr;
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	b2da      	uxtb	r2, r3
 800189e:	8a7b      	ldrh	r3, [r7, #18]
 80018a0:	f362 1349 	bfi	r3, r2, #5, #5
 80018a4:	827b      	strh	r3, [r7, #18]
    mdioCmd.MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_ADDR;
 80018a6:	7cfb      	ldrb	r3, [r7, #19]
 80018a8:	f36f 0383 	bfc	r3, #2, #2
 80018ac:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_DATA = REGADDR(regAddr);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	823b      	strh	r3, [r7, #16]
    mdioCmd.MDIO_TRDONE = 0;
 80018b4:	7cfb      	ldrb	r3, [r7, #19]
 80018b6:	f36f 13c7 	bfc	r3, #7, #1
 80018ba:	74fb      	strb	r3, [r7, #19]
    if((result = MAC_WriteRegister(hDevice, ADDR_MAC_MDIOACC_0_, mdioCmd.VALUE32)) != ADI_ETH_SUCCESS)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	461a      	mov	r2, r3
 80018c0:	2120      	movs	r1, #32
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff fea8 	bl	8001618 <MAC_WriteRegister>
 80018c8:	4603      	mov	r3, r0
 80018ca:	75fb      	strb	r3, [r7, #23]
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d12a      	bne.n	8001928 <MAC_PhyRead+0xc0>
    {
        goto end;
    }

    /* Use the next MDIO register for the read operation.       */
    mdioCmd.MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_RD;
 80018d2:	7cfb      	ldrb	r3, [r7, #19]
 80018d4:	f043 030c 	orr.w	r3, r3, #12
 80018d8:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_DATA = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	823b      	strh	r3, [r7, #16]
    mdioCmd.MDIO_TRDONE = 0;
 80018de:	7cfb      	ldrb	r3, [r7, #19]
 80018e0:	f36f 13c7 	bfc	r3, #7, #1
 80018e4:	74fb      	strb	r3, [r7, #19]
    if ((result = MAC_WriteRegister(hDevice, ADDR_MAC_MDIOACC_1_, mdioCmd.VALUE32)) != ADI_ETH_SUCCESS)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	461a      	mov	r2, r3
 80018ea:	2121      	movs	r1, #33	; 0x21
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff fe93 	bl	8001618 <MAC_WriteRegister>
 80018f2:	4603      	mov	r3, r0
 80018f4:	75fb      	strb	r3, [r7, #23]
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d117      	bne.n	800192c <MAC_PhyRead+0xc4>
    {
        goto end;
    }

    result = waitMdioReady(hDevice, ADDR_MAC_MDIOACC_1_);
 80018fc:	2121      	movs	r1, #33	; 0x21
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff ff00 	bl	8001704 <waitMdioReady>
 8001904:	4603      	mov	r3, r0
 8001906:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d110      	bne.n	8001930 <MAC_PhyRead+0xc8>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, ADDR_MAC_MDIOACC_1_, &mdioCmd.VALUE32);
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	461a      	mov	r2, r3
 8001914:	2121      	movs	r1, #33	; 0x21
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7ff fe08 	bl	800152c <MAC_ReadRegister>
 800191c:	4603      	mov	r3, r0
 800191e:	75fb      	strb	r3, [r7, #23]
    *regData = mdioCmd.MDIO_DATA;
 8001920:	8a3a      	ldrh	r2, [r7, #16]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	801a      	strh	r2, [r3, #0]
 8001926:	e004      	b.n	8001932 <MAC_PhyRead+0xca>
        goto end;
 8001928:	bf00      	nop
 800192a:	e002      	b.n	8001932 <MAC_PhyRead+0xca>
        goto end;
 800192c:	bf00      	nop
 800192e:	e000      	b.n	8001932 <MAC_PhyRead+0xca>
        goto end;
 8001930:	bf00      	nop

end:
    return result;
 8001932:	7dfb      	ldrb	r3, [r7, #23]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <MAC_PhyWrite>:

adi_eth_Result_e MAC_PhyWrite(adi_mac_Device_t *hDevice,  uint8_t hwAddr, uint32_t regAddr, uint16_t data)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	460b      	mov	r3, r1
 800194a:	72fb      	strb	r3, [r7, #11]
 800194c:	4613      	mov	r3, r2
 800194e:	813b      	strh	r3, [r7, #8]
    adi_eth_Result_e       result = ADI_ETH_SUCCESS;
 8001950:	2300      	movs	r3, #0
 8001952:	75fb      	strb	r3, [r7, #23]
    ADI_MAC_MDIOACC_0__t   mdioCmd;

    /* Use the first MDIO register for the address operation.   */
    /* MDIO Speed defaults to 2.5MHz per CONFIG2.MSPEED.        */
    mdioCmd.MDIO_DEVAD = DEVTYPE(regAddr);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	b2da      	uxtb	r2, r3
 800195e:	7cbb      	ldrb	r3, [r7, #18]
 8001960:	f362 0304 	bfi	r3, r2, #0, #5
 8001964:	74bb      	strb	r3, [r7, #18]
    mdioCmd.MDIO_ST = ENUM_MAC_MDIOACC_N__MDIO_ST_CLAUSE45;
 8001966:	7cfb      	ldrb	r3, [r7, #19]
 8001968:	f36f 1305 	bfc	r3, #4, #2
 800196c:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_PRTAD = hwAddr;
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	b2da      	uxtb	r2, r3
 8001976:	8a7b      	ldrh	r3, [r7, #18]
 8001978:	f362 1349 	bfi	r3, r2, #5, #5
 800197c:	827b      	strh	r3, [r7, #18]
    mdioCmd.MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_ADDR;
 800197e:	7cfb      	ldrb	r3, [r7, #19]
 8001980:	f36f 0383 	bfc	r3, #2, #2
 8001984:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_DATA = REGADDR(regAddr);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	b29b      	uxth	r3, r3
 800198a:	823b      	strh	r3, [r7, #16]
    mdioCmd.MDIO_TRDONE = 0;
 800198c:	7cfb      	ldrb	r3, [r7, #19]
 800198e:	f36f 13c7 	bfc	r3, #7, #1
 8001992:	74fb      	strb	r3, [r7, #19]
    if((result = MAC_WriteRegister(hDevice, ADDR_MAC_MDIOACC_0_, mdioCmd.VALUE32)) != ADI_ETH_SUCCESS)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	461a      	mov	r2, r3
 8001998:	2120      	movs	r1, #32
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff fe3c 	bl	8001618 <MAC_WriteRegister>
 80019a0:	4603      	mov	r3, r0
 80019a2:	75fb      	strb	r3, [r7, #23]
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11e      	bne.n	80019e8 <MAC_PhyWrite+0xac>
    {
        goto end;
    }

    /* Use the next MDIO register for the write operation.      */
    mdioCmd.MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_WR;
 80019aa:	7cfb      	ldrb	r3, [r7, #19]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f362 0383 	bfi	r3, r2, #2, #2
 80019b2:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_DATA = data;
 80019b4:	893b      	ldrh	r3, [r7, #8]
 80019b6:	823b      	strh	r3, [r7, #16]
    mdioCmd.MDIO_TRDONE = 0;
 80019b8:	7cfb      	ldrb	r3, [r7, #19]
 80019ba:	f36f 13c7 	bfc	r3, #7, #1
 80019be:	74fb      	strb	r3, [r7, #19]
    if ((result = MAC_WriteRegister(hDevice, ADDR_MAC_MDIOACC_1_, mdioCmd.VALUE32)) != ADI_ETH_SUCCESS)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	461a      	mov	r2, r3
 80019c4:	2121      	movs	r1, #33	; 0x21
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff fe26 	bl	8001618 <MAC_WriteRegister>
 80019cc:	4603      	mov	r3, r0
 80019ce:	75fb      	strb	r3, [r7, #23]
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <MAC_PhyWrite+0xb0>
    {
        goto end;
    }

    result = waitMdioReady(hDevice, ADDR_MAC_MDIOACC_1_);
 80019d6:	2121      	movs	r1, #33	; 0x21
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fe93 	bl	8001704 <waitMdioReady>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
 80019e4:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 80019e6:	e002      	b.n	80019ee <MAC_PhyWrite+0xb2>
        goto end;
 80019e8:	bf00      	nop
 80019ea:	e000      	b.n	80019ee <MAC_PhyWrite+0xb2>
        goto end;
 80019ec:	bf00      	nop
    return result;
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <MAC_SubmitTxBuffer>:

adi_eth_Result_e MAC_SubmitTxBuffer(adi_mac_Device_t *hDevice, adi_mac_FrameHeader_t header, adi_eth_BufDesc_t *pBufDesc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	8139      	strh	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e          result = ADI_ETH_SUCCESS;
 8001a04:	2300      	movs	r3, #0
 8001a06:	75fb      	strb	r3, [r7, #23]

    if (hDevice == NULL)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <MAC_SubmitTxBuffer+0x1c>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001a0e:	230a      	movs	r3, #10
 8001a10:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001a12:	e06a      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <MAC_SubmitTxBuffer+0x2c>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001a1e:	2306      	movs	r3, #6
 8001a20:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001a22:	e062      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
    }

    if (pBufDesc == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <MAC_SubmitTxBuffer+0x38>
    {
        result = ADI_ETH_INVALID_PARAM;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001a2e:	e05c      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
    }

    if ((pBufDesc->trxSize < MIN_FRAME_SIZE) || (pBufDesc->trxSize > MAX_FRAME_SIZE))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b3b      	cmp	r3, #59	; 0x3b
 8001a36:	d905      	bls.n	8001a44 <MAC_SubmitTxBuffer+0x4c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f240 52ee 	movw	r2, #1518	; 0x5ee
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d902      	bls.n	8001a4a <MAC_SubmitTxBuffer+0x52>
    {
        result = ADI_ETH_PARAM_OUT_OF_RANGE;
 8001a44:	2309      	movs	r3, #9
 8001a46:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001a48:	e04f      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
    }

    /* If FCS is calculated on the host, the buffer needs 4 bytes more to store the FCS. */
    if (hDevice->fcsCheckEn)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00f      	beq.n	8001a74 <MAC_SubmitTxBuffer+0x7c>
    {
        if ((pBufDesc->bufSize < pBufDesc->trxSize) || (pBufDesc->bufSize - pBufDesc->trxSize < FCS_SIZE))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d306      	bcc.n	8001a6e <MAC_SubmitTxBuffer+0x76>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d802      	bhi.n	8001a74 <MAC_SubmitTxBuffer+0x7c>
        {
            result = ADI_ETH_PARAM_OUT_OF_RANGE;
 8001a6e:	2309      	movs	r3, #9
 8001a70:	75fb      	strb	r3, [r7, #23]
            goto end;
 8001a72:	e03a      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
        }
    }

    if (queueIsFull(&hDevice->txQueue))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	336c      	adds	r3, #108	; 0x6c
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fa38 	bl	8000eee <queueIsFull>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <MAC_SubmitTxBuffer+0x92>
    {
        result = ADI_ETH_QUEUE_FULL;
 8001a84:	2312      	movs	r3, #18
 8001a86:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001a88:	e02f      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
    }

    hDevice->txQueue.pEntries[hDevice->txQueue.head].header.VALUE16 = header.VALUE16;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	893a      	ldrh	r2, [r7, #8]
 8001a98:	801a      	strh	r2, [r3, #0]

    if (hDevice->fcsCheckEn)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d015      	beq.n	8001ad0 <MAC_SubmitTxBuffer+0xd8>
    {
        uint32_t fcs = ADI_HAL_FCS_CALCULATE(hDevice->adinDevice, &pBufDesc->pBuf[0], pBufDesc->trxSize);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f004 fc00 	bl	80062b4 <HAL_FcsCalculate>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]
        memcpy(&pBufDesc->pBuf[pBufDesc->trxSize], &fcs , FCS_SIZE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	601a      	str	r2, [r3, #0]
        pBufDesc->trxSize += FCS_SIZE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	1d1a      	adds	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
    }
    hDevice->txQueue.pEntries[hDevice->txQueue.head].pBufDesc = pBufDesc;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	605a      	str	r2, [r3, #4]

    queueAdd(&hDevice->txQueue);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	336c      	adds	r3, #108	; 0x6c
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fa2d 	bl	8000f44 <queueAdd>

end:

    if (!queueIsEmpty(&hDevice->txQueue))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	336c      	adds	r3, #108	; 0x6c
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fa11 	bl	8000f16 <queueIsEmpty>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f083 0301 	eor.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <MAC_SubmitTxBuffer+0x118>
    {
        if (hDevice->state == ADI_MAC_STATE_READY)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d102      	bne.n	8001b10 <MAC_SubmitTxBuffer+0x118>
        {
            MAC_ProcessTxQueue(hDevice);
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f8ad 	bl	8001c6a <MAC_ProcessTxQueue>
        }
    }

    return result;
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <MAC_SubmitRxBuffer>:


adi_eth_Result_e MAC_SubmitRxBuffer(adi_mac_Device_t *hDevice, adi_eth_BufDesc_t *pBufDesc)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
#if ADI_PAUSE_RX_IF_NO_BUFFERS
    uint32_t            rxRdyMask;
#endif
#endif

    if (hDevice == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <MAC_SubmitRxBuffer+0x1a>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001b2e:	230a      	movs	r3, #10
 8001b30:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001b32:	e041      	b.n	8001bb8 <MAC_SubmitRxBuffer+0x9e>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <MAC_SubmitRxBuffer+0x2a>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001b3e:	2306      	movs	r3, #6
 8001b40:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001b42:	e039      	b.n	8001bb8 <MAC_SubmitRxBuffer+0x9e>
    }

    /* For Rx we only need to check for minimum size. */
    /* The buffer will always have the FCS appended. */
    if (pBufDesc->bufSize < MIN_FRAME_SIZE + FCS_SIZE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b3f      	cmp	r3, #63	; 0x3f
 8001b4a:	d802      	bhi.n	8001b52 <MAC_SubmitRxBuffer+0x38>
    {
        result = ADI_ETH_PARAM_OUT_OF_RANGE;
 8001b4c:	2309      	movs	r3, #9
 8001b4e:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001b50:	e032      	b.n	8001bb8 <MAC_SubmitRxBuffer+0x9e>
    }

    if (queueIsFull(&hDevice->rxQueueLp))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	33a8      	adds	r3, #168	; 0xa8
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f9c9 	bl	8000eee <queueIsFull>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <MAC_SubmitRxBuffer+0x4e>
    {
        result = ADI_ETH_QUEUE_FULL;
 8001b62:	2312      	movs	r3, #18
 8001b64:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001b66:	e027      	b.n	8001bb8 <MAC_SubmitRxBuffer+0x9e>
    }

    hDevice->rxQueueLp.pEntries[hDevice->rxQueueLp.head].header.VALUE16 = 0x0000;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	2200      	movs	r2, #0
 8001b7a:	801a      	strh	r2, [r3, #0]
    hDevice->rxQueueLp.pEntries[hDevice->rxQueueLp.head].pBufDesc = pBufDesc;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

    queueAdd(&hDevice->rxQueueLp);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	33a8      	adds	r3, #168	; 0xa8
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f9d5 	bl	8000f44 <queueAdd>
    }
#endif
#else

    /* If idle, try to start a data transaction. */
    if (hDevice->state == ADI_MAC_STATE_READY)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d108      	bne.n	8001bb6 <MAC_SubmitRxBuffer+0x9c>
    {
        hDevice->state = ADI_MAC_STATE_DATA_START;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	701a      	strb	r2, [r3, #0]
        result = oaStateMachine(hDevice);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f002 fca0 	bl	80044f0 <oaStateMachine>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e000      	b.n	8001bb8 <MAC_SubmitRxBuffer+0x9e>
    }
#endif

end:
 8001bb6:	bf00      	nop
    return result;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <MAC_SubmitRxBufferHp>:

#if defined(ADI_MAC_ENABLE_RX_QUEUE_HI_PRIO)
adi_eth_Result_e MAC_SubmitRxBufferHp(adi_mac_Device_t *hDevice, adi_eth_BufDesc_t *pBufDesc)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]
#if ADI_PAUSE_RX_IF_NO_BUFFERS
    uint32_t            rxRdyMask;
#endif
#endif

    if (hDevice == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <MAC_SubmitRxBufferHp+0x1a>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001bda:	e041      	b.n	8001c60 <MAC_SubmitRxBufferHp+0x9e>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <MAC_SubmitRxBufferHp+0x2a>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001be6:	2306      	movs	r3, #6
 8001be8:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001bea:	e039      	b.n	8001c60 <MAC_SubmitRxBufferHp+0x9e>
    }

    /* For Rx we only need to check for minimum size. */
    /* The buffer will always have the FCS appended. */
    if (pBufDesc->bufSize < MIN_FRAME_SIZE + FCS_SIZE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b3f      	cmp	r3, #63	; 0x3f
 8001bf2:	d802      	bhi.n	8001bfa <MAC_SubmitRxBufferHp+0x38>
    {
        result = ADI_ETH_PARAM_OUT_OF_RANGE;
 8001bf4:	2309      	movs	r3, #9
 8001bf6:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001bf8:	e032      	b.n	8001c60 <MAC_SubmitRxBufferHp+0x9e>
    }

    if (queueIsFull(&hDevice->rxQueueHp))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	33e0      	adds	r3, #224	; 0xe0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f975 	bl	8000eee <queueIsFull>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <MAC_SubmitRxBufferHp+0x4e>
    {
        result = ADI_ETH_QUEUE_FULL;
 8001c0a:	2312      	movs	r3, #18
 8001c0c:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001c0e:	e027      	b.n	8001c60 <MAC_SubmitRxBufferHp+0x9e>
    }

    hDevice->rxQueueHp.pEntries[hDevice->rxQueueHp.head].header.VALUE16 = 0x0000;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	2200      	movs	r2, #0
 8001c22:	801a      	strh	r2, [r3, #0]
    hDevice->rxQueueHp.pEntries[hDevice->rxQueueHp.head].pBufDesc = pBufDesc;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	605a      	str	r2, [r3, #4]

    queueAdd(&hDevice->rxQueueHp);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	33e0      	adds	r3, #224	; 0xe0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f981 	bl	8000f44 <queueAdd>
    }
#endif
#else

    /* If idle, try to start a data transaction. */
    if (hDevice->state == ADI_MAC_STATE_READY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d108      	bne.n	8001c5e <MAC_SubmitRxBufferHp+0x9c>
    {
        hDevice->state = ADI_MAC_STATE_DATA_START;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2207      	movs	r2, #7
 8001c50:	701a      	strb	r2, [r3, #0]
        result = oaStateMachine(hDevice);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f002 fc4c 	bl	80044f0 <oaStateMachine>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e000      	b.n	8001c60 <MAC_SubmitRxBufferHp+0x9e>
    }
#endif

end:
 8001c5e:	bf00      	nop
    return result;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <MAC_ProcessTxQueue>:
#endif

adi_eth_Result_e MAC_ProcessTxQueue(adi_mac_Device_t *hDevice)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e        result = ADI_ETH_SUCCESS;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c76:	b672      	cpsid	i
}
 8001c78:	bf00      	nop
    uint32_t                backup;

    ADI_HAL_ENTER_CRITICAL_SECTION(hDevice->adinDevice);
    backup = ADI_HAL_GET_ENABLE_IRQ(hDevice->adinDevice);
 8001c7a:	f004 fd4f 	bl	800671c <HAL_GetEnableIrq>
 8001c7e:	60b8      	str	r0, [r7, #8]
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8001c80:	f004 fd3e 	bl	8006700 <HAL_DisableIrq>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c84:	b662      	cpsie	i
}
 8001c86:	bf00      	nop
    ADI_HAL_EXIT_CRITICAL_SECTION(hDevice->adinDevice);

    if (!queueIsEmpty(&hDevice->txQueue))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	336c      	adds	r3, #108	; 0x6c
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f942 	bl	8000f16 <queueIsEmpty>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <MAC_ProcessTxQueue+0x62>
    {
        if (hDevice->state == ADI_MAC_STATE_READY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d10b      	bne.n	8001cc0 <MAC_ProcessTxQueue+0x56>
        {
            result = MAC_SendFrame(hDevice, &hDevice->txQueue.pEntries[hDevice->txQueue.tail]);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f003 ffff 	bl	8005cba <MAC_SendFrame>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]
        }

        if (result != ADI_ETH_SUCCESS)
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <MAC_ProcessTxQueue+0x6c>
        {
            ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8001cc6:	f004 fd22 	bl	800670e <HAL_EnableIrq>
 8001cca:	e004      	b.n	8001cd6 <MAC_ProcessTxQueue+0x6c>
        }
    }
    else
    {
        if (backup)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MAC_ProcessTxQueue+0x6c>
        {
            ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8001cd2:	f004 fd1c 	bl	800670e <HAL_EnableIrq>
        }
    }

    return result;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <MAC_GetStatCounters>:
 * @param [out] stat - statistics counters.
 *
 * @return 0 in case of success, positive error code otherwise.
*/
adi_eth_Result_e MAC_GetStatCounters(adi_mac_Device_t *hDevice, uint32_t port, adi_eth_MacStatCounters_t *stat)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e            result      = ADI_ETH_SUCCESS;
 8001cec:	2300      	movs	r3, #0
 8001cee:	75fb      	strb	r3, [r7, #23]
    uint16_t                    baseAddr    = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	82bb      	strh	r3, [r7, #20]

    if (hDevice == NULL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <MAC_GetStatCounters+0x20>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001cfe:	e0e8      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <MAC_GetStatCounters+0x30>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001d0e:	e0e0      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
    else
    {
        baseAddr = 0;
    }
#endif
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_FRM_CNT, &stat->RX_FRM_CNT);
 8001d10:	8abb      	ldrh	r3, [r7, #20]
 8001d12:	33a0      	adds	r3, #160	; 0xa0
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff fc06 	bl	800152c <MAC_ReadRegister>
 8001d20:	4603      	mov	r3, r0
 8001d22:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 80ba 	bne.w	8001ea0 <MAC_GetStatCounters+0x1c0>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_BCAST_CNT, &stat->RX_BCAST_CNT);
 8001d2c:	8abb      	ldrh	r3, [r7, #20]
 8001d2e:	33a1      	adds	r3, #161	; 0xa1
 8001d30:	b299      	uxth	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	461a      	mov	r2, r3
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7ff fbf7 	bl	800152c <MAC_ReadRegister>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 80ad 	bne.w	8001ea4 <MAC_GetStatCounters+0x1c4>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_MCAST_CNT, &stat->RX_MCAST_CNT);
 8001d4a:	8abb      	ldrh	r3, [r7, #20]
 8001d4c:	33a2      	adds	r3, #162	; 0xa2
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3308      	adds	r3, #8
 8001d54:	461a      	mov	r2, r3
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff fbe8 	bl	800152c <MAC_ReadRegister>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 80a0 	bne.w	8001ea8 <MAC_GetStatCounters+0x1c8>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_UCAST_CNT, &stat->RX_UCAST_CNT);
 8001d68:	8abb      	ldrh	r3, [r7, #20]
 8001d6a:	33a3      	adds	r3, #163	; 0xa3
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	330c      	adds	r3, #12
 8001d72:	461a      	mov	r2, r3
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff fbd9 	bl	800152c <MAC_ReadRegister>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 8093 	bne.w	8001eac <MAC_GetStatCounters+0x1cc>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_CRC_ERR_CNT, &stat->RX_CRC_ERR_CNT);
 8001d86:	8abb      	ldrh	r3, [r7, #20]
 8001d88:	33a4      	adds	r3, #164	; 0xa4
 8001d8a:	b299      	uxth	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3310      	adds	r3, #16
 8001d90:	461a      	mov	r2, r3
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff fbca 	bl	800152c <MAC_ReadRegister>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8086 	bne.w	8001eb0 <MAC_GetStatCounters+0x1d0>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_ALGN_ERR_CNT, &stat->RX_ALGN_ERR_CNT);
 8001da4:	8abb      	ldrh	r3, [r7, #20]
 8001da6:	33a5      	adds	r3, #165	; 0xa5
 8001da8:	b299      	uxth	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3314      	adds	r3, #20
 8001dae:	461a      	mov	r2, r3
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff fbbb 	bl	800152c <MAC_ReadRegister>
 8001db6:	4603      	mov	r3, r0
 8001db8:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d179      	bne.n	8001eb4 <MAC_GetStatCounters+0x1d4>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_LS_ERR_CNT, &stat->RX_LS_ERR_CNT);
 8001dc0:	8abb      	ldrh	r3, [r7, #20]
 8001dc2:	33a6      	adds	r3, #166	; 0xa6
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3318      	adds	r3, #24
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff fbad 	bl	800152c <MAC_ReadRegister>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d16d      	bne.n	8001eb8 <MAC_GetStatCounters+0x1d8>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_PHY_ERR_CNT, &stat->RX_PHY_ERR_CNT);
 8001ddc:	8abb      	ldrh	r3, [r7, #20]
 8001dde:	33a7      	adds	r3, #167	; 0xa7
 8001de0:	b299      	uxth	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	331c      	adds	r3, #28
 8001de6:	461a      	mov	r2, r3
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff fb9f 	bl	800152c <MAC_ReadRegister>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d161      	bne.n	8001ebc <MAC_GetStatCounters+0x1dc>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_TX_FRM_CNT, &stat->TX_FRM_CNT);
 8001df8:	8abb      	ldrh	r3, [r7, #20]
 8001dfa:	33a8      	adds	r3, #168	; 0xa8
 8001dfc:	b299      	uxth	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3320      	adds	r3, #32
 8001e02:	461a      	mov	r2, r3
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fb91 	bl	800152c <MAC_ReadRegister>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d155      	bne.n	8001ec0 <MAC_GetStatCounters+0x1e0>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_TX_BCAST_CNT, &stat->TX_BCAST_CNT);
 8001e14:	8abb      	ldrh	r3, [r7, #20]
 8001e16:	33a9      	adds	r3, #169	; 0xa9
 8001e18:	b299      	uxth	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3324      	adds	r3, #36	; 0x24
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fb83 	bl	800152c <MAC_ReadRegister>
 8001e26:	4603      	mov	r3, r0
 8001e28:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d149      	bne.n	8001ec4 <MAC_GetStatCounters+0x1e4>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_TX_MCAST_CNT, &stat->TX_MCAST_CNT);
 8001e30:	8abb      	ldrh	r3, [r7, #20]
 8001e32:	33aa      	adds	r3, #170	; 0xaa
 8001e34:	b299      	uxth	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3328      	adds	r3, #40	; 0x28
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff fb75 	bl	800152c <MAC_ReadRegister>
 8001e42:	4603      	mov	r3, r0
 8001e44:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d13d      	bne.n	8001ec8 <MAC_GetStatCounters+0x1e8>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_TX_UCAST_CNT, &stat->TX_UCAST_CNT);
 8001e4c:	8abb      	ldrh	r3, [r7, #20]
 8001e4e:	33ab      	adds	r3, #171	; 0xab
 8001e50:	b299      	uxth	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	332c      	adds	r3, #44	; 0x2c
 8001e56:	461a      	mov	r2, r3
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff fb67 	bl	800152c <MAC_ReadRegister>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d131      	bne.n	8001ecc <MAC_GetStatCounters+0x1ec>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_DROP_FULL_CNT, &stat->RX_DROP_FULL_CNT);
 8001e68:	8abb      	ldrh	r3, [r7, #20]
 8001e6a:	33ac      	adds	r3, #172	; 0xac
 8001e6c:	b299      	uxth	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3330      	adds	r3, #48	; 0x30
 8001e72:	461a      	mov	r2, r3
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff fb59 	bl	800152c <MAC_ReadRegister>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d125      	bne.n	8001ed0 <MAC_GetStatCounters+0x1f0>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_DROP_FILT_CNT, &stat->RX_DROP_FILT_CNT);
 8001e84:	8abb      	ldrh	r3, [r7, #20]
 8001e86:	33ad      	adds	r3, #173	; 0xad
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3334      	adds	r3, #52	; 0x34
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f7ff fb4b 	bl	800152c <MAC_ReadRegister>
 8001e96:	4603      	mov	r3, r0
 8001e98:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
 8001e9c:	2b00      	cmp	r3, #0
    stat->TX_UCAST_CNT       = HTON32(locStat.TX_UCAST_CNT);
    stat->RX_DROP_FULL_CNT   = HTON32(locStat.RX_DROP_FULL_CNT);
    stat->RX_DROP_FILT_CNT   = HTON32(locStat.RX_DROP_FILT_CNT);
#endif

end:
 8001e9e:	e018      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ea0:	bf00      	nop
 8001ea2:	e016      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ea4:	bf00      	nop
 8001ea6:	e014      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ea8:	bf00      	nop
 8001eaa:	e012      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001eac:	bf00      	nop
 8001eae:	e010      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001eb0:	bf00      	nop
 8001eb2:	e00e      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001eb4:	bf00      	nop
 8001eb6:	e00c      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001eb8:	bf00      	nop
 8001eba:	e00a      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ebc:	bf00      	nop
 8001ebe:	e008      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ec0:	bf00      	nop
 8001ec2:	e006      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ec4:	bf00      	nop
 8001ec6:	e004      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ec8:	bf00      	nop
 8001eca:	e002      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ecc:	bf00      	nop
 8001ece:	e000      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ed0:	bf00      	nop
    return result;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <MAC_AddAddressFilter>:

adi_eth_Result_e MAC_AddAddressFilter(adi_mac_Device_t *hDevice, uint8_t *macAddr, uint8_t *macAddrMask, uint16_t addrRule)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	807b      	strh	r3, [r7, #2]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t            addrIndex = ADI_MAC_ADDR_NUM_ENTRIES;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	623b      	str	r3, [r7, #32]
    uint32_t            maxAddrIndex;
    uint16_t            addrOffset;
    uint32_t            val32;

    if (hDevice == NULL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <MAC_AddAddressFilter+0x26>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001efa:	230a      	movs	r3, #10
 8001efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto end;
 8001f00:	e0ca      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d103      	bne.n	8001f14 <MAC_AddAddressFilter+0x38>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto end;
 8001f12:	e0c1      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
    }

    maxAddrIndex = ADI_MAC_ADDR_NUM_ENTRIES;
 8001f14:	2310      	movs	r3, #16
 8001f16:	61fb      	str	r3, [r7, #28]
    if (macAddrMask != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MAC_AddAddressFilter+0x46>
    {
        maxAddrIndex = ADI_MAC_ADDR_MASK_MAX;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61fb      	str	r3, [r7, #28]
    }

    for (uint32_t i = 0; i < maxAddrIndex; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e00f      	b.n	8001f48 <MAC_AddAddressFilter+0x6c>
    {
        if (!(hDevice->addrFilterActive & (1 << i)))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fa42 f303 	asr.w	r3, r2, r3
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <MAC_AddAddressFilter+0x66>
        {
            addrIndex = i;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	623b      	str	r3, [r7, #32]
            break;
 8001f40:	e006      	b.n	8001f50 <MAC_AddAddressFilter+0x74>
    for (uint32_t i = 0; i < maxAddrIndex; i++)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3eb      	bcc.n	8001f28 <MAC_AddAddressFilter+0x4c>
        }
    }

    if (addrIndex == maxAddrIndex)
 8001f50:	6a3a      	ldr	r2, [r7, #32]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d103      	bne.n	8001f60 <MAC_AddAddressFilter+0x84>
    {
        result = ADI_ETH_ADDRESS_FILTER_TABLE_FULL;
 8001f58:	2316      	movs	r3, #22
 8001f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto end;
 8001f5e:	e09b      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
    }

    addrOffset = addrIndex * (ADDR_MAC_ADDR_FILT_UPR_1_ - ADDR_MAC_ADDR_FILT_UPR_0_);
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	827b      	strh	r3, [r7, #18]

    /* Write MAC address and address rules. Note MAC_ADDR_FILT_UPR needs to be written before MAC_ADDR_FILT_LWR. */
    val32 = (addrRule << 16) | (macAddr[0] << 8) | macAddr[1];
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	041a      	lsls	r2, r3, #16
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	4313      	orrs	r3, r2
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	3201      	adds	r2, #1
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
    result = MAC_WriteRegister(hDevice, addrOffset + ADDR_MAC_ADDR_FILT_UPR_0_, val32);
 8001f7e:	8a7b      	ldrh	r3, [r7, #18]
 8001f80:	3350      	adds	r3, #80	; 0x50
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f7ff fb45 	bl	8001618 <MAC_WriteRegister>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(result != ADI_ETH_SUCCESS)
 8001f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d176      	bne.n	800208a <MAC_AddAddressFilter+0x1ae>
    {
        goto end;
    }

    val32 = (macAddr[2] << 24) | (macAddr[3] << 16) | (macAddr[4] << 8) | macAddr[5];
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	061a      	lsls	r2, r3, #24
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	3303      	adds	r3, #3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	431a      	orrs	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	3205      	adds	r2, #5
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
    result = MAC_WriteRegister(hDevice, addrOffset + ADDR_MAC_ADDR_FILT_LWR_0_, val32);
 8001fc2:	8a7b      	ldrh	r3, [r7, #18]
 8001fc4:	3351      	adds	r3, #81	; 0x51
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff fb23 	bl	8001618 <MAC_WriteRegister>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(result != ADI_ETH_SUCCESS)
 8001fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d156      	bne.n	800208e <MAC_AddAddressFilter+0x1b2>
        goto end;
    }

    /* Write MAC address mask. Note MAC_ADDR_MSK_UPR needs to be written before MAC_ADDR_MSK_LWR. */
    /* Allow special case of NULL translating to a mask of all 1s. */
    if (macAddrMask == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <MAC_AddAddressFilter+0x112>
    {
        val32 = 0xFFFF;
 8001fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	e007      	b.n	8001ffe <MAC_AddAddressFilter+0x122>
    }
    else
    {
        val32 = (macAddrMask[0] << 8) | macAddrMask[1];
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	3201      	adds	r2, #1
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
    }
    result = MAC_WriteRegister(hDevice, addrOffset + ADDR_MAC_ADDR_MSK_UPR_0_, val32);
 8001ffe:	8a7b      	ldrh	r3, [r7, #18]
 8002000:	3370      	adds	r3, #112	; 0x70
 8002002:	b29b      	uxth	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4619      	mov	r1, r3
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7ff fb05 	bl	8001618 <MAC_WriteRegister>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(result != ADI_ETH_SUCCESS)
 8002014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002018:	2b00      	cmp	r3, #0
 800201a:	d13a      	bne.n	8002092 <MAC_AddAddressFilter+0x1b6>
    {
        goto end;
    }

    if (macAddrMask == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d103      	bne.n	800202a <MAC_AddAddressFilter+0x14e>
    {
        val32 = 0xFFFFFFFF;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	e012      	b.n	8002050 <MAC_AddAddressFilter+0x174>
    }
    else
    {
        val32 = (macAddrMask[2] << 24) | (macAddrMask[3] << 16) | (macAddrMask[4] << 8) | macAddrMask[5];
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3302      	adds	r3, #2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	061a      	lsls	r2, r3, #24
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3303      	adds	r3, #3
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3304      	adds	r3, #4
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4313      	orrs	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	3205      	adds	r2, #5
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
    }
    result = MAC_WriteRegister(hDevice, addrOffset + ADDR_MAC_ADDR_MSK_LWR_0_, val32);
 8002050:	8a7b      	ldrh	r3, [r7, #18]
 8002052:	3371      	adds	r3, #113	; 0x71
 8002054:	b29b      	uxth	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4619      	mov	r1, r3
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fadc 	bl	8001618 <MAC_WriteRegister>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(result != ADI_ETH_SUCCESS)
 8002066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800206a:	2b00      	cmp	r3, #0
 800206c:	d113      	bne.n	8002096 <MAC_AddAddressFilter+0x1ba>
    {
        goto end;
    }

    /* Mark the address filter entry as used. */
    hDevice->addrFilterActive |= (1 << addrIndex);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002072:	b21a      	sxth	r2, r3
 8002074:	2101      	movs	r1, #1
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	b21b      	sxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b21b      	sxth	r3, r3
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	871a      	strh	r2, [r3, #56]	; 0x38
 8002088:	e006      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
        goto end;
 800208a:	bf00      	nop
 800208c:	e004      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
        goto end;
 800208e:	bf00      	nop
 8002090:	e002      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
        goto end;
 8002092:	bf00      	nop
 8002094:	e000      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
        goto end;
 8002096:	bf00      	nop

end:
    return result;
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800209c:	4618      	mov	r0, r3
 800209e:	3728      	adds	r7, #40	; 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <MAC_ClearAddressFilter>:

adi_eth_Result_e MAC_ClearAddressFilter(adi_mac_Device_t *hDevice, uint32_t addrIndex)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e        result = ADI_ETH_SUCCESS;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
    uint16_t                addrOffset;

    if (hDevice == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <MAC_ClearAddressFilter+0x1a>
    {
        result = ADI_ETH_INVALID_HANDLE;
 80020b8:	230a      	movs	r3, #10
 80020ba:	73fb      	strb	r3, [r7, #15]
        goto end;
 80020bc:	e02f      	b.n	800211e <MAC_ClearAddressFilter+0x7a>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <MAC_ClearAddressFilter+0x2a>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 80020c8:	2306      	movs	r3, #6
 80020ca:	73fb      	strb	r3, [r7, #15]
        goto end;
 80020cc:	e027      	b.n	800211e <MAC_ClearAddressFilter+0x7a>
    }

    if (addrIndex >= ADI_MAC_ADDR_NUM_ENTRIES)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	d902      	bls.n	80020da <MAC_ClearAddressFilter+0x36>
    {
        result = ADI_ETH_PARAM_OUT_OF_RANGE;
 80020d4:	2309      	movs	r3, #9
 80020d6:	73fb      	strb	r3, [r7, #15]
        goto end;
 80020d8:	e021      	b.n	800211e <MAC_ClearAddressFilter+0x7a>
    }

    addrOffset = addrIndex * (ADDR_MAC_ADDR_FILT_UPR_1_ - ADDR_MAC_ADDR_FILT_UPR_0_);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	81bb      	strh	r3, [r7, #12]

    result = MAC_WriteRegister(hDevice, addrOffset + ADDR_MAC_ADDR_FILT_UPR_0_, 0);
 80020e2:	89bb      	ldrh	r3, [r7, #12]
 80020e4:	3350      	adds	r3, #80	; 0x50
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fa93 	bl	8001618 <MAC_WriteRegister>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73fb      	strb	r3, [r7, #15]
    if(result != ADI_ETH_SUCCESS)
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10f      	bne.n	800211c <MAC_ClearAddressFilter+0x78>
    {
        goto end;
    }

    hDevice->addrFilterActive &= ~(1 << addrIndex);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002100:	b21a      	sxth	r2, r3
 8002102:	2101      	movs	r1, #1
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	b21b      	sxth	r3, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	b21b      	sxth	r3, r3
 8002110:	4013      	ands	r3, r2
 8002112:	b21b      	sxth	r3, r3
 8002114:	b29a      	uxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	871a      	strh	r2, [r3, #56]	; 0x38
 800211a:	e000      	b.n	800211e <MAC_ClearAddressFilter+0x7a>
        goto end;
 800211c:	bf00      	nop

end:

    return result;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <MAC_GetLinkStatus>:

adi_eth_Result_e MAC_GetLinkStatus(adi_mac_Device_t *hDevice, uint32_t port, adi_eth_LinkStatus_e *linkStatus)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002134:	2300      	movs	r3, #0
 8002136:	75fb      	strb	r3, [r7, #23]
#else
    uint32_t            val32;

    (void)port;

    result = MAC_ReadRegister(hDevice, ADDR_MAC_STATUS1, &val32);
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	461a      	mov	r2, r3
 800213e:	2109      	movs	r1, #9
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7ff f9f3 	bl	800152c <MAC_ReadRegister>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]
    if(result != ADI_ETH_SUCCESS)
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <MAC_GetLinkStatus+0x38>
    {
        goto end;
    }

    *linkStatus = (adi_eth_LinkStatus_e)((val32 & BITM_MAC_STATUS1_P1_LINK_STATUS) >> BITP_MAC_STATUS1_P1_LINK_STATUS);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e000      	b.n	8002162 <MAC_GetLinkStatus+0x3a>
        goto end;
 8002160:	bf00      	nop

end:
#endif
    return result;
 8002162:	7dfb      	ldrb	r3, [r7, #23]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <MAC_SetChunkSize>:

#if defined(SPI_OA_EN)
adi_eth_Result_e MAC_SetChunkSize(adi_mac_Device_t *hDevice, adi_mac_OaCps_e cps)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002178:	2300      	movs	r3, #0
 800217a:	75fb      	strb	r3, [r7, #23]
    uint16_t            addr = ADDR_MAC_CONFIG0;
 800217c:	2304      	movs	r3, #4
 800217e:	82bb      	strh	r3, [r7, #20]
    uint32_t            mask = BITM_MAC_CONFIG0_CPS;
 8002180:	2307      	movs	r3, #7
 8002182:	613b      	str	r3, [r7, #16]
    uint32_t            val;

    if (hDevice->configSync)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <MAC_SetChunkSize+0x28>
    {
        result = ADI_ETH_CONFIG_SYNC_ERROR;
 800218e:	231b      	movs	r3, #27
 8002190:	75fb      	strb	r3, [r7, #23]
        goto end;
 8002192:	e030      	b.n	80021f6 <MAC_SetChunkSize+0x8a>
    }

    result = MAC_ReadRegister(hDevice, addr, &val);
 8002194:	f107 020c 	add.w	r2, r7, #12
 8002198:	8abb      	ldrh	r3, [r7, #20]
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff f9c5 	bl	800152c <MAC_ReadRegister>
 80021a2:	4603      	mov	r3, r0
 80021a4:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d121      	bne.n	80021f0 <MAC_SetChunkSize+0x84>
    {
        goto end;
    }

    val = (val & ~mask) | (cps & mask);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	401a      	ands	r2, r3
 80021b4:	78f9      	ldrb	r1, [r7, #3]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	400b      	ands	r3, r1
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

    result = MAC_WriteRegister(hDevice, addr, val);
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	8abb      	ldrh	r3, [r7, #20]
 80021c2:	4619      	mov	r1, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fa27 	bl	8001618 <MAC_WriteRegister>
 80021ca:	4603      	mov	r3, r0
 80021cc:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10f      	bne.n	80021f4 <MAC_SetChunkSize+0x88>
    {
        goto end;
    }

    hDevice->oaMaxChunkCount = (cps == ADI_MAC_OA_CPS_64BYTE) ? ADI_OA_MAX_CHUNK64_COUNT : ADI_OA_MAX_CHUNK_COUNT;
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d101      	bne.n	80021de <MAC_SetChunkSize+0x72>
 80021da:	2210      	movs	r2, #16
 80021dc:	e000      	b.n	80021e0 <MAC_SetChunkSize+0x74>
 80021de:	221f      	movs	r2, #31
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    hDevice->oaCps = (uint32_t)cps;
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80021ee:	e002      	b.n	80021f6 <MAC_SetChunkSize+0x8a>
        goto end;
 80021f0:	bf00      	nop
 80021f2:	e000      	b.n	80021f6 <MAC_SetChunkSize+0x8a>
        goto end;
 80021f4:	bf00      	nop
end:
    return result;
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <MAC_GetChunkSize>:

adi_eth_Result_e MAC_GetChunkSize(adi_mac_Device_t *hDevice, adi_mac_OaCps_e *pCps)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
    uint16_t            addr = ADDR_MAC_CONFIG0;
 800220e:	2304      	movs	r3, #4
 8002210:	82bb      	strh	r3, [r7, #20]
    uint32_t            mask = BITM_MAC_CONFIG0_CPS;
 8002212:	2307      	movs	r3, #7
 8002214:	613b      	str	r3, [r7, #16]
    uint32_t            val;

    result = MAC_ReadRegister(hDevice, addr, &val);
 8002216:	f107 020c 	add.w	r2, r7, #12
 800221a:	8abb      	ldrh	r3, [r7, #20]
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff f984 	bl	800152c <MAC_ReadRegister>
 8002224:	4603      	mov	r3, r0
 8002226:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d110      	bne.n	8002250 <MAC_GetChunkSize+0x50>
    {
        goto end;
    }

    val &= mask;
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
    *pCps = (adi_mac_OaCps_e)val;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	701a      	strb	r2, [r3, #0]

    if (val != hDevice->oaCps)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	429a      	cmp	r2, r3
 8002248:	d004      	beq.n	8002254 <MAC_GetChunkSize+0x54>
    {
        result = ADI_ETH_VALUE_MISMATCH_ERROR;
 800224a:	231c      	movs	r3, #28
 800224c:	75fb      	strb	r3, [r7, #23]
        goto end;
 800224e:	e002      	b.n	8002256 <MAC_GetChunkSize+0x56>
        goto end;
 8002250:	bf00      	nop
 8002252:	e000      	b.n	8002256 <MAC_GetChunkSize+0x56>
    }

end:
 8002254:	bf00      	nop
    return result;
 8002256:	7dfb      	ldrb	r3, [r7, #23]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <MAC_SetCutThroughMode>:
#endif

adi_eth_Result_e MAC_SetCutThroughMode(adi_mac_Device_t *hDevice, bool txcte, bool rxcte)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
 800226c:	4613      	mov	r3, r2
 800226e:	70bb      	strb	r3, [r7, #2]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002270:	2300      	movs	r3, #0
 8002272:	75fb      	strb	r3, [r7, #23]
    uint16_t            addr = ADDR_MAC_CONFIG0;
 8002274:	2304      	movs	r3, #4
 8002276:	82bb      	strh	r3, [r7, #20]
    uint32_t            setMask = (rxcte << BITP_MAC_CONFIG0_RXCTE) | (txcte << BITP_MAC_CONFIG0_TXCTE);
 8002278:	78bb      	ldrb	r3, [r7, #2]
 800227a:	021a      	lsls	r2, r3, #8
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	025b      	lsls	r3, r3, #9
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
    uint32_t            clearMask = (BITM_MAC_CONFIG0_RXCTE | BITM_MAC_CONFIG0_TXCTE);
 8002284:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002288:	60fb      	str	r3, [r7, #12]
    {
        return ADI_ETH_NOT_IMPLEMENTED;
    }
#endif

    if (hDevice->configSync)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <MAC_SetCutThroughMode+0x3a>
    {
        result = ADI_ETH_CONFIG_SYNC_ERROR;
 8002294:	231b      	movs	r3, #27
 8002296:	75fb      	strb	r3, [r7, #23]
        goto end;
 8002298:	e01c      	b.n	80022d4 <MAC_SetCutThroughMode+0x74>
    }

    result = MAC_ReadRegister(hDevice, addr, &val);
 800229a:	f107 0208 	add.w	r2, r7, #8
 800229e:	8abb      	ldrh	r3, [r7, #20]
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff f942 	bl	800152c <MAC_ReadRegister>
 80022a8:	4603      	mov	r3, r0
 80022aa:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <MAC_SetCutThroughMode+0x72>
    {
        goto end;
    }

    val = (val & ~clearMask) | setMask;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	43da      	mvns	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	401a      	ands	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]

    result = MAC_WriteRegister(hDevice, addr, val);
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	8abb      	ldrh	r3, [r7, #20]
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff f9a6 	bl	8001618 <MAC_WriteRegister>
 80022cc:	4603      	mov	r3, r0
 80022ce:	75fb      	strb	r3, [r7, #23]
 80022d0:	e000      	b.n	80022d4 <MAC_SetCutThroughMode+0x74>
        goto end;
 80022d2:	bf00      	nop

end:
    return result;
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <MAC_GetCutThroughMode>:

adi_eth_Result_e MAC_GetCutThroughMode(adi_mac_Device_t *hDevice, bool *pTxcte, bool *pRxcte)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b088      	sub	sp, #32
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80022ea:	2300      	movs	r3, #0
 80022ec:	77fb      	strb	r3, [r7, #31]
    uint16_t            addr    = ADDR_MAC_CONFIG0;
 80022ee:	2304      	movs	r3, #4
 80022f0:	83bb      	strh	r3, [r7, #28]
    uint32_t            rxMask  = BITM_MAC_CONFIG0_RXCTE;
 80022f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f6:	61bb      	str	r3, [r7, #24]
    uint32_t            txMask  = BITM_MAC_CONFIG0_TXCTE;
 80022f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fc:	617b      	str	r3, [r7, #20]
    uint32_t            val;

    result = MAC_ReadRegister(hDevice, addr, &val);
 80022fe:	f107 0210 	add.w	r2, r7, #16
 8002302:	8bbb      	ldrh	r3, [r7, #28]
 8002304:	4619      	mov	r1, r3
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff f910 	bl	800152c <MAC_ReadRegister>
 800230c:	4603      	mov	r3, r0
 800230e:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002310:	7ffb      	ldrb	r3, [r7, #31]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d114      	bne.n	8002340 <MAC_GetCutThroughMode+0x62>
    {
        goto end;
    }

    *pRxcte = (bool)(val & rxMask);
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf14      	ite	ne
 8002320:	2301      	movne	r3, #1
 8002322:	2300      	moveq	r3, #0
 8002324:	b2da      	uxtb	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	701a      	strb	r2, [r3, #0]
    *pTxcte = (bool)(val & txMask);
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e000      	b.n	8002342 <MAC_GetCutThroughMode+0x64>
        goto end;
 8002340:	bf00      	nop

end:
    return result;
 8002342:	7ffb      	ldrb	r3, [r7, #31]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <MAC_SetFifoSizes>:

adi_eth_Result_e MAC_SetFifoSizes(adi_mac_Device_t *hDevice, uint32_t writeVal)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result  = ADI_ETH_SUCCESS;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]

    if (hDevice->configSync)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <MAC_SetFifoSizes+0x1e>
    {
        result = ADI_ETH_CONFIG_SYNC_ERROR;
 8002364:	231b      	movs	r3, #27
 8002366:	73fb      	strb	r3, [r7, #15]
        goto end;
 8002368:	e006      	b.n	8002378 <MAC_SetFifoSizes+0x2c>
    }

    result = MAC_WriteRegister(hDevice, ADDR_MAC_FIFO_SIZE, writeVal);
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	213e      	movs	r1, #62	; 0x3e
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff f952 	bl	8001618 <MAC_WriteRegister>
 8002374:	4603      	mov	r3, r0
 8002376:	73fb      	strb	r3, [r7, #15]

end:
    return result;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <MAC_GetFifoSizes>:

adi_eth_Result_e MAC_GetFifoSizes(adi_mac_Device_t *hDevice, uint32_t *readVal)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
    return MAC_ReadRegister(hDevice, ADDR_MAC_FIFO_SIZE, readVal);
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	213e      	movs	r1, #62	; 0x3e
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff f8cb 	bl	800152c <MAC_ReadRegister>
 8002396:	4603      	mov	r3, r0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <MAC_ClearFifos>:

adi_eth_Result_e MAC_ClearFifos(adi_mac_Device_t *hDevice, adi_mac_FifoClrMode_e clearMode)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result  = ADI_ETH_SUCCESS;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]
    uint16_t            addr    = ADDR_MAC_FIFO_CLR;
 80023b0:	2336      	movs	r3, #54	; 0x36
 80023b2:	81bb      	strh	r3, [r7, #12]

    result = MAC_WriteRegister(hDevice, addr, (uint32_t)clearMode);
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	89bb      	ldrh	r3, [r7, #12]
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff f92c 	bl	8001618 <MAC_WriteRegister>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 80023c8:	bf00      	nop
    return result;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <MAC_SetPromiscuousMode>:

adi_eth_Result_e MAC_SetPromiscuousMode(adi_mac_Device_t *hDevice, bool bFlag)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80023e0:	2300      	movs	r3, #0
 80023e2:	75fb      	strb	r3, [r7, #23]
    uint16_t            addr = ADDR_MAC_CONFIG2;
 80023e4:	2306      	movs	r3, #6
 80023e6:	82bb      	strh	r3, [r7, #20]
    uint32_t            mask = BITM_MAC_CONFIG2_P1_FWD_UNK2HOST;;
 80023e8:	2304      	movs	r3, #4
 80023ea:	613b      	str	r3, [r7, #16]
    uint32_t            val;

    result = MAC_ReadRegister(hDevice, addr, &val);
 80023ec:	f107 020c 	add.w	r2, r7, #12
 80023f0:	8abb      	ldrh	r3, [r7, #20]
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff f899 	bl	800152c <MAC_ReadRegister>
 80023fa:	4603      	mov	r3, r0
 80023fc:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d117      	bne.n	8002434 <MAC_SetPromiscuousMode+0x60>
    {
        goto end;
    }

    if (bFlag)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <MAC_SetPromiscuousMode+0x40>
    {
        val |= mask;
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e004      	b.n	800241e <MAC_SetPromiscuousMode+0x4a>
    }
    else
    {
        val &= ~mask;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43da      	mvns	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4013      	ands	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
    }

    result = MAC_WriteRegister(hDevice, addr, val);
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	8abb      	ldrh	r3, [r7, #20]
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff f8f7 	bl	8001618 <MAC_WriteRegister>
 800242a:	4603      	mov	r3, r0
 800242c:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 8002432:	e000      	b.n	8002436 <MAC_SetPromiscuousMode+0x62>
        goto end;
 8002434:	bf00      	nop
    return result;
 8002436:	7dfb      	ldrb	r3, [r7, #23]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <MAC_GetPromiscuousMode>:

adi_eth_Result_e MAC_GetPromiscuousMode(adi_mac_Device_t *hDevice, bool *pFlag)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    uint16_t            addr = ADDR_MAC_CONFIG2;
 800244e:	2306      	movs	r3, #6
 8002450:	82bb      	strh	r3, [r7, #20]
    uint32_t            mask = BITM_MAC_CONFIG2_P1_FWD_UNK2HOST;;
 8002452:	2304      	movs	r3, #4
 8002454:	613b      	str	r3, [r7, #16]
    uint32_t            val;

    result = MAC_ReadRegister(hDevice, addr, &val);
 8002456:	f107 020c 	add.w	r2, r7, #12
 800245a:	8abb      	ldrh	r3, [r7, #20]
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff f864 	bl	800152c <MAC_ReadRegister>
 8002464:	4603      	mov	r3, r0
 8002466:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <MAC_GetPromiscuousMode+0x44>
    {
        goto end;
    }

    *pFlag = (val & mask) ? true: false;
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2da      	uxtb	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	e000      	b.n	8002486 <MAC_GetPromiscuousMode+0x46>
        goto end;
 8002484:	bf00      	nop

end:
    return result;
 8002486:	7dfb      	ldrb	r3, [r7, #23]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <MAC_TsEnable>:


adi_eth_Result_e MAC_TsEnable(adi_mac_Device_t *hDevice, adi_mac_TsFormat_e format)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e     result = ADI_ETH_SUCCESS;
 800249c:	2300      	movs	r3, #0
 800249e:	75fb      	strb	r3, [r7, #23]
    uint32_t             tsCfg;
    uint32_t             config0;

    if (hDevice->configSync)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <MAC_TsEnable+0x20>
    {
        result = ADI_ETH_CONFIG_SYNC_ERROR;
 80024aa:	231b      	movs	r3, #27
 80024ac:	75fb      	strb	r3, [r7, #23]
        goto end;
 80024ae:	e076      	b.n	800259e <MAC_TsEnable+0x10e>
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_CFG, &tsCfg);
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	461a      	mov	r2, r3
 80024b6:	2184      	movs	r1, #132	; 0x84
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff f837 	bl	800152c <MAC_ReadRegister>
 80024be:	4603      	mov	r3, r0
 80024c0:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d163      	bne.n	8002590 <MAC_TsEnable+0x100>
    {
        goto end;
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_CONFIG0, &config0);
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	461a      	mov	r2, r3
 80024ce:	2104      	movs	r1, #4
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff f82b 	bl	800152c <MAC_ReadRegister>
 80024d6:	4603      	mov	r3, r0
 80024d8:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d159      	bne.n	8002594 <MAC_TsEnable+0x104>
    {
        goto end;
    }

    config0 |= BITM_MAC_CONFIG0_FTSE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e6:	60fb      	str	r3, [r7, #12]
    switch(format)
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d82e      	bhi.n	800254c <MAC_TsEnable+0xbc>
 80024ee:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <MAC_TsEnable+0x64>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	08002505 	.word	0x08002505
 80024f8:	08002517 	.word	0x08002517
 80024fc:	08002529 	.word	0x08002529
 8002500:	0800253b 	.word	0x0800253b
    {
        case ADI_MAC_TS_FORMAT_NONE:
            tsCfg &= ~BITM_MAC_TS_CFG_TS_CAPT_FREE_CNT;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f023 0310 	bic.w	r3, r3, #16
 800250a:	613b      	str	r3, [r7, #16]
            config0 &= ~BITM_MAC_CONFIG0_FTSE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002512:	60fb      	str	r3, [r7, #12]
            break;
 8002514:	e01d      	b.n	8002552 <MAC_TsEnable+0xc2>
        case ADI_MAC_TS_FORMAT_32B_FREE:
            tsCfg |= BITM_MAC_TS_CFG_TS_CAPT_FREE_CNT;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	613b      	str	r3, [r7, #16]
            config0 &= ~BITM_MAC_CONFIG0_FTSS;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002524:	60fb      	str	r3, [r7, #12]
            break;
 8002526:	e014      	b.n	8002552 <MAC_TsEnable+0xc2>
        case ADI_MAC_TS_FORMAT_32B_1588:
            tsCfg &= ~BITM_MAC_TS_CFG_TS_CAPT_FREE_CNT;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f023 0310 	bic.w	r3, r3, #16
 800252e:	613b      	str	r3, [r7, #16]
            config0 &= ~BITM_MAC_CONFIG0_FTSS;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002536:	60fb      	str	r3, [r7, #12]
            break;
 8002538:	e00b      	b.n	8002552 <MAC_TsEnable+0xc2>
        case ADI_MAC_TS_FORMAT_64B_1588:
            tsCfg &= ~BITM_MAC_TS_CFG_TS_CAPT_FREE_CNT;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f023 0310 	bic.w	r3, r3, #16
 8002540:	613b      	str	r3, [r7, #16]
            config0 |= BITM_MAC_CONFIG0_FTSS;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002548:	60fb      	str	r3, [r7, #12]
            break;
 800254a:	e002      	b.n	8002552 <MAC_TsEnable+0xc2>
        default:
            result = ADI_ETH_INVALID_PARAM;
 800254c:	2308      	movs	r3, #8
 800254e:	75fb      	strb	r3, [r7, #23]
            goto end;
 8002550:	e025      	b.n	800259e <MAC_TsEnable+0x10e>
    }

    result = MAC_WriteRegister(hDevice, ADDR_MAC_CONFIG0, config0);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	461a      	mov	r2, r3
 8002556:	2104      	movs	r1, #4
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff f85d 	bl	8001618 <MAC_WriteRegister>
 800255e:	4603      	mov	r3, r0
 8002560:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d117      	bne.n	8002598 <MAC_TsEnable+0x108>
    {
        goto end;
    }

    tsCfg |= BITM_MAC_TS_CFG_TS_EN;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	613b      	str	r3, [r7, #16]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_CFG, tsCfg);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	461a      	mov	r2, r3
 8002574:	2184      	movs	r1, #132	; 0x84
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff f84e 	bl	8001618 <MAC_WriteRegister>
 800257c:	4603      	mov	r3, r0
 800257e:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <MAC_TsEnable+0x10c>
    {
        goto end;
    }

    hDevice->timestampFormat = format;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 800258e:	e006      	b.n	800259e <MAC_TsEnable+0x10e>
        goto end;
 8002590:	bf00      	nop
 8002592:	e004      	b.n	800259e <MAC_TsEnable+0x10e>
        goto end;
 8002594:	bf00      	nop
 8002596:	e002      	b.n	800259e <MAC_TsEnable+0x10e>
        goto end;
 8002598:	bf00      	nop
 800259a:	e000      	b.n	800259e <MAC_TsEnable+0x10e>
        goto end;
 800259c:	bf00      	nop

end:
    return result;
 800259e:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <MAC_TsClear>:

adi_eth_Result_e MAC_TsClear(adi_mac_Device_t *hDevice)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e     result = ADI_ETH_SUCCESS;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
    uint32_t             tsCfg;

    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_CFG, &tsCfg);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	461a      	mov	r2, r3
 80025ba:	2184      	movs	r1, #132	; 0x84
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe ffb5 	bl	800152c <MAC_ReadRegister>
 80025c2:	4603      	mov	r3, r0
 80025c4:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10c      	bne.n	80025e6 <MAC_TsClear+0x3e>
    {
        goto end;
    }

    tsCfg |= BITM_MAC_TS_CFG_TS_CLR;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	60bb      	str	r3, [r7, #8]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_CFG, tsCfg);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	461a      	mov	r2, r3
 80025d8:	2184      	movs	r1, #132	; 0x84
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff f81c 	bl	8001618 <MAC_WriteRegister>
 80025e0:	4603      	mov	r3, r0
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e000      	b.n	80025e8 <MAC_TsClear+0x40>
        goto end;
 80025e6:	bf00      	nop

end:
    return result;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <MAC_TsTimerStart>:

adi_eth_Result_e MAC_TsTimerStart(adi_mac_Device_t *hDevice, adi_mac_TsTimerConfig_t *pTimerConfig)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b088      	sub	sp, #32
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e     result = ADI_ETH_SUCCESS;
 80025fc:	2300      	movs	r3, #0
 80025fe:	77fb      	strb	r3, [r7, #31]
    uint32_t             timeHi;
    uint32_t             timeLo;
    uint32_t             tsCfg;

    /* TS_TIMER register values must be greater than or equal to ADI_MAC_TS_MIN_NS */
    if (pTimerConfig->startTimeNs < ADI_MAC_TS_MIN_NS)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b0f      	cmp	r3, #15
 8002606:	d802      	bhi.n	800260e <MAC_TsTimerStart+0x1c>
    {
        pTimerConfig->startTimeNs = ADDR_MAC_TS_NS_CNT;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2283      	movs	r2, #131	; 0x83
 800260c:	60da      	str	r2, [r3, #12]
    }
    if (pTimerConfig->periodNs < (2 * ADI_MAC_TS_MIN_NS))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b1f      	cmp	r3, #31
 8002614:	d802      	bhi.n	800261c <MAC_TsTimerStart+0x2a>
    {
        pTimerConfig->periodNs = 2 * ADI_MAC_TS_MIN_NS;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2220      	movs	r2, #32
 800261a:	601a      	str	r2, [r3, #0]
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_CFG, &tsCfg);
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	461a      	mov	r2, r3
 8002622:	2184      	movs	r1, #132	; 0x84
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7fe ff81 	bl	800152c <MAC_ReadRegister>
 800262a:	4603      	mov	r3, r0
 800262c:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d169      	bne.n	8002708 <MAC_TsTimerStart+0x116>
    {
        goto end;
    }

    if (!(tsCfg & BITM_MAC_TS_CFG_TS_EN))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <MAC_TsTimerStart+0x52>
    {
        result = ADI_ETH_TS_COUNTERS_DISABLED;
 800263e:	231e      	movs	r3, #30
 8002640:	77fb      	strb	r3, [r7, #31]
        goto end;
 8002642:	e06a      	b.n	800271a <MAC_TsTimerStart+0x128>
    }

    tsCfg = (tsCfg & ~BITM_MAC_TS_CFG_TS_TIMER_DEF) | ((uint32_t)pTimerConfig->idleState << BITP_MAC_TS_CFG_TS_TIMER_DEF);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0204 	bic.w	r2, r3, #4
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	7a1b      	ldrb	r3, [r3, #8]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_CFG, tsCfg);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	2184      	movs	r1, #132	; 0x84
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe ffdc 	bl	8001618 <MAC_WriteRegister>
 8002660:	4603      	mov	r3, r0
 8002662:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002664:	7ffb      	ldrb	r3, [r7, #31]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d150      	bne.n	800270c <MAC_TsTimerStart+0x11a>
    {
        goto end;
    }

    /* Need to use quantization error correction if the period is not a multiple of ADI_MAC_TS_MIN_NS */
    remainder16 = pTimerConfig->periodNs & ADI_MAC_TS_QE_MASK;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	61bb      	str	r3, [r7, #24]
    if (remainder16)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <MAC_TsTimerStart+0x9c>
    {
        result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_TIMER_QE_CORR, remainder16);
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	2187      	movs	r1, #135	; 0x87
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe ffca 	bl	8001618 <MAC_WriteRegister>
 8002684:	4603      	mov	r3, r0
 8002686:	77fb      	strb	r3, [r7, #31]
        if (result != ADI_ETH_SUCCESS)
 8002688:	7ffb      	ldrb	r3, [r7, #31]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d140      	bne.n	8002710 <MAC_TsTimerStart+0x11e>
        {
            goto end;
        }
    }

    timeHi = (uint32_t)((pTimerConfig->periodNs & ~ADI_MAC_TS_QE_MASK) * pTimerConfig->dutyCycle);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 030f 	bic.w	r3, r3, #15
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ac:	ee17 3a90 	vmov	r3, s15
 80026b0:	617b      	str	r3, [r7, #20]
    timeLo = (pTimerConfig->periodNs & ~ADI_MAC_TS_QE_MASK) - timeHi;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 020f 	bic.w	r2, r3, #15
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	613b      	str	r3, [r7, #16]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_TIMER_HI, timeHi & ~ADI_MAC_TS_QE_MASK);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f023 030f 	bic.w	r3, r3, #15
 80026c6:	461a      	mov	r2, r3
 80026c8:	2185      	movs	r1, #133	; 0x85
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe ffa4 	bl	8001618 <MAC_WriteRegister>
 80026d0:	4603      	mov	r3, r0
 80026d2:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d11c      	bne.n	8002714 <MAC_TsTimerStart+0x122>
    {
        goto end;
    }
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_TIMER_LO, timeLo & ~ADI_MAC_TS_QE_MASK);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f023 030f 	bic.w	r3, r3, #15
 80026e0:	461a      	mov	r2, r3
 80026e2:	2186      	movs	r1, #134	; 0x86
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7fe ff97 	bl	8001618 <MAC_WriteRegister>
 80026ea:	4603      	mov	r3, r0
 80026ec:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 80026ee:	7ffb      	ldrb	r3, [r7, #31]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <MAC_TsTimerStart+0x126>
    {
        goto end;
    }

    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_TIMER_START, pTimerConfig->startTimeNs);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	461a      	mov	r2, r3
 80026fa:	2188      	movs	r1, #136	; 0x88
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7fe ff8b 	bl	8001618 <MAC_WriteRegister>
 8002702:	4603      	mov	r3, r0
 8002704:	77fb      	strb	r3, [r7, #31]
 8002706:	e008      	b.n	800271a <MAC_TsTimerStart+0x128>
        goto end;
 8002708:	bf00      	nop
 800270a:	e006      	b.n	800271a <MAC_TsTimerStart+0x128>
        goto end;
 800270c:	bf00      	nop
 800270e:	e004      	b.n	800271a <MAC_TsTimerStart+0x128>
            goto end;
 8002710:	bf00      	nop
 8002712:	e002      	b.n	800271a <MAC_TsTimerStart+0x128>
        goto end;
 8002714:	bf00      	nop
 8002716:	e000      	b.n	800271a <MAC_TsTimerStart+0x128>
        goto end;
 8002718:	bf00      	nop

end:
    return result;
 800271a:	7ffb      	ldrb	r3, [r7, #31]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <MAC_TsTimerStop>:

adi_eth_Result_e MAC_TsTimerStop(adi_mac_Device_t *hDevice)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
    uint32_t            val32;

    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_CFG, &val32);
 8002730:	f107 0308 	add.w	r3, r7, #8
 8002734:	461a      	mov	r2, r3
 8002736:	2184      	movs	r1, #132	; 0x84
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7fe fef7 	bl	800152c <MAC_ReadRegister>
 800273e:	4603      	mov	r3, r0
 8002740:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10c      	bne.n	8002762 <MAC_TsTimerStop+0x3e>
    {
        goto end;
    }

    val32 |= BITM_MAC_TS_CFG_TS_TIMER_STOP;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	60bb      	str	r3, [r7, #8]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_CFG, val32);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	461a      	mov	r2, r3
 8002754:	2184      	movs	r1, #132	; 0x84
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe ff5e 	bl	8001618 <MAC_WriteRegister>
 800275c:	4603      	mov	r3, r0
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e000      	b.n	8002764 <MAC_TsTimerStop+0x40>
        goto end;
 8002762:	bf00      	nop

end:
    return result;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <MAC_TsConvert>:

adi_eth_Result_e MAC_TsConvert(uint32_t timestampLowWord, uint32_t timestampHighWord, adi_mac_TsFormat_e format, adi_mac_TsTimespec_t *pTimespec)
{
 8002770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002774:	b088      	sub	sp, #32
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	71fb      	strb	r3, [r7, #7]
    adi_eth_Result_e result = ADI_ETH_SUCCESS;
 8002782:	2300      	movs	r3, #0
 8002784:	77fb      	strb	r3, [r7, #31]
    /* Floating point nanoseconds value for free-running counter conversion. Double to reduce rounding errors.  */
    double nsecF;

    switch(format)
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d053      	beq.n	8002834 <MAC_TsConvert+0xc4>
 800278c:	2b03      	cmp	r3, #3
 800278e:	dc5a      	bgt.n	8002846 <MAC_TsConvert+0xd6>
 8002790:	2b01      	cmp	r3, #1
 8002792:	d002      	beq.n	800279a <MAC_TsConvert+0x2a>
 8002794:	2b02      	cmp	r3, #2
 8002796:	d041      	beq.n	800281c <MAC_TsConvert+0xac>
 8002798:	e055      	b.n	8002846 <MAC_TsConvert+0xd6>
    {
        case ADI_MAC_TS_FORMAT_32B_FREE:
            /* Convert LSB to nanoseconds. */
            nsecF = timestampLowWord * ADI_MAC_TS_FREE_CNT_LSB_IN_NS;
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7fd feda 	bl	8000554 <__aeabi_ui2d>
 80027a0:	a32e      	add	r3, pc, #184	; (adr r3, 800285c <MAC_TsConvert+0xec>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff4f 	bl	8000648 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
            /* Extract number of whole seconds. */
            pTimespec->sec = (uint32_t)(nsecF / ADI_MAC_TS_ONE_SECOND_IN_NS);
 80027b2:	a32c      	add	r3, pc, #176	; (adr r3, 8002864 <MAC_TsConvert+0xf4>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027bc:	f7fe f86e 	bl	800089c <__aeabi_ddiv>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe f950 	bl	8000a6c <__aeabi_d2uiz>
 80027cc:	4602      	mov	r2, r0
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	601a      	str	r2, [r3, #0]
            /* Subtract off number of whole seconds to get number of whole nanoseconds. Fractional value is lost. */
            pTimespec->nsec = (uint32_t)(nsecF - (pTimespec->sec * ADI_MAC_TS_ONE_SECOND_IN_NS));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	4698      	mov	r8, r3
 80027da:	4691      	mov	r9, r2
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <MAC_TsConvert+0xe8>)
 80027de:	fb03 f209 	mul.w	r2, r3, r9
 80027e2:	2300      	movs	r3, #0
 80027e4:	fb03 f308 	mul.w	r3, r3, r8
 80027e8:	4413      	add	r3, r2
 80027ea:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <MAC_TsConvert+0xe8>)
 80027ec:	fba8 4502 	umull	r4, r5, r8, r2
 80027f0:	442b      	add	r3, r5
 80027f2:	461d      	mov	r5, r3
 80027f4:	4620      	mov	r0, r4
 80027f6:	4629      	mov	r1, r5
 80027f8:	f7fd fef0 	bl	80005dc <__aeabi_ul2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002804:	f7fd fd68 	bl	80002d8 <__aeabi_dsub>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f7fe f92c 	bl	8000a6c <__aeabi_d2uiz>
 8002814:	4602      	mov	r2, r0
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	605a      	str	r2, [r3, #4]
            break;
 800281a:	e017      	b.n	800284c <MAC_TsConvert+0xdc>
        case ADI_MAC_TS_FORMAT_32B_1588:
            /* Mask and shift to get number of seconds (2 bits). */
            pTimespec->sec = (timestampLowWord & ADI_MAC_TS_1588_SEC_MASK) >> ADI_MAC_TS_1588_SEC_POS;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	0f1b      	lsrs	r3, r3, #28
 8002820:	f003 020c 	and.w	r2, r3, #12
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	601a      	str	r2, [r3, #0]
            /* Mask to get number of nanoseconds (30 bits). */
            pTimespec->nsec = timestampLowWord & ADI_MAC_TS_1588_NS_MASK;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	605a      	str	r2, [r3, #4]
            break;
 8002832:	e00b      	b.n	800284c <MAC_TsConvert+0xdc>
        case ADI_MAC_TS_FORMAT_64B_1588:
            /* All 32b of upper words are whole seconds. */
            pTimespec->sec = timestampHighWord;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	601a      	str	r2, [r3, #0]
            /* Mask to get number of nanoseconds (30 bits). */
            pTimespec->nsec = timestampLowWord & ADI_MAC_TS_1588_NS_MASK;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	605a      	str	r2, [r3, #4]
            break;
 8002844:	e002      	b.n	800284c <MAC_TsConvert+0xdc>
        default:
            result = ADI_ETH_NO_TS_FORMAT;
 8002846:	231f      	movs	r3, #31
 8002848:	77fb      	strb	r3, [r7, #31]
            break;
 800284a:	bf00      	nop
    }

    return result;
 800284c:	7ffb      	ldrb	r3, [r7, #31]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002858:	3b9aca00 	.word	0x3b9aca00
 800285c:	aaaaaaab 	.word	0xaaaaaaab
 8002860:	4020aaaa 	.word	0x4020aaaa
 8002864:	00000000 	.word	0x00000000
 8002868:	41cdcd65 	.word	0x41cdcd65

0800286c <MAC_TsGetExtCaptTimestamp>:

adi_eth_Result_e MAC_TsGetExtCaptTimestamp(adi_mac_Device_t *hDevice, adi_mac_TsTimespec_t *pCapturedTimespec)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e result = ADI_ETH_SUCCESS;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]
    uint32_t timestampLowWord;
    uint32_t timestampHighWord;

    /* 64b timestamp and free-running counter are both always captured. Return only one depending on the configured format. */
    if ((hDevice->timestampFormat == ADI_MAC_TS_FORMAT_32B_1588) || (hDevice->timestampFormat == ADI_MAC_TS_FORMAT_64B_1588))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d004      	beq.n	800288e <MAC_TsGetExtCaptTimestamp+0x22>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 800288a:	2b03      	cmp	r3, #3
 800288c:	d120      	bne.n	80028d0 <MAC_TsGetExtCaptTimestamp+0x64>
    {
        result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_EXT_CAPT0, &timestampLowWord);
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	461a      	mov	r2, r3
 8002894:	2189      	movs	r1, #137	; 0x89
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fe48 	bl	800152c <MAC_ReadRegister>
 800289c:	4603      	mov	r3, r0
 800289e:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d135      	bne.n	8002912 <MAC_TsGetExtCaptTimestamp+0xa6>
        {
            goto end;
        }
        result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_EXT_CAPT1, &timestampHighWord);
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	461a      	mov	r2, r3
 80028ac:	218a      	movs	r1, #138	; 0x8a
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fe3c 	bl	800152c <MAC_ReadRegister>
 80028b4:	4603      	mov	r3, r0
 80028b6:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d12b      	bne.n	8002916 <MAC_TsGetExtCaptTimestamp+0xaa>
        {
            goto end;
        }
        result = MAC_TsConvert(timestampLowWord, timestampHighWord, ADI_MAC_TS_FORMAT_64B_1588, pCapturedTimespec);
 80028be:	6938      	ldr	r0, [r7, #16]
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2203      	movs	r2, #3
 80028c6:	f7ff ff53 	bl	8002770 <MAC_TsConvert>
 80028ca:	4603      	mov	r3, r0
 80028cc:	75fb      	strb	r3, [r7, #23]
 80028ce:	e025      	b.n	800291c <MAC_TsGetExtCaptTimestamp+0xb0>
    }
    else if (hDevice->timestampFormat == ADI_MAC_TS_FORMAT_32B_FREE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d118      	bne.n	800290c <MAC_TsGetExtCaptTimestamp+0xa0>
    {
        timestampHighWord = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
        result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_FREECNT_CAPT, &timestampLowWord);
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	461a      	mov	r2, r3
 80028e4:	218b      	movs	r1, #139	; 0x8b
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fe20 	bl	800152c <MAC_ReadRegister>
 80028ec:	4603      	mov	r3, r0
 80028ee:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d111      	bne.n	800291a <MAC_TsGetExtCaptTimestamp+0xae>
        {
            goto end;
        }
        result = MAC_TsConvert(timestampLowWord, timestampHighWord, hDevice->timestampFormat, pCapturedTimespec);
 80028f6:	6938      	ldr	r0, [r7, #16]
 80028f8:	68f9      	ldr	r1, [r7, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f7ff ff35 	bl	8002770 <MAC_TsConvert>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]
 800290a:	e007      	b.n	800291c <MAC_TsGetExtCaptTimestamp+0xb0>
    }
    else
    {
        result = ADI_ETH_NO_TS_FORMAT;
 800290c:	231f      	movs	r3, #31
 800290e:	75fb      	strb	r3, [r7, #23]
 8002910:	e004      	b.n	800291c <MAC_TsGetExtCaptTimestamp+0xb0>
            goto end;
 8002912:	bf00      	nop
 8002914:	e002      	b.n	800291c <MAC_TsGetExtCaptTimestamp+0xb0>
            goto end;
 8002916:	bf00      	nop
 8002918:	e000      	b.n	800291c <MAC_TsGetExtCaptTimestamp+0xb0>
            goto end;
 800291a:	bf00      	nop
    }

end:
    return result;
 800291c:	7dfb      	ldrb	r3, [r7, #23]

}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <MAC_TsGetEgressTimestamp>:

adi_eth_Result_e MAC_TsGetEgressTimestamp(adi_mac_Device_t *hDevice, adi_mac_EgressCapture_e egressReg, adi_mac_TsTimespec_t *pCapturedTimespec)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b08a      	sub	sp, #40	; 0x28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	460b      	mov	r3, r1
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	72fb      	strb	r3, [r7, #11]
    adi_eth_Result_e result = ADI_ETH_SUCCESS;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t timestampLowWord;
    uint32_t timestampHighWord;
    uint32_t regAddrL;
    uint32_t regAddrH;

    switch(egressReg)
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d010      	beq.n	8002962 <MAC_TsGetEgressTimestamp+0x3c>
 8002940:	2b03      	cmp	r3, #3
 8002942:	dc13      	bgt.n	800296c <MAC_TsGetEgressTimestamp+0x46>
 8002944:	2b01      	cmp	r3, #1
 8002946:	d002      	beq.n	800294e <MAC_TsGetEgressTimestamp+0x28>
 8002948:	2b02      	cmp	r3, #2
 800294a:	d005      	beq.n	8002958 <MAC_TsGetEgressTimestamp+0x32>
 800294c:	e00e      	b.n	800296c <MAC_TsGetEgressTimestamp+0x46>
    {
        case ADI_MAC_EGRESS_CAPTURE_A:
            regAddrL = ADDR_MAC_TTSCAL;
 800294e:	2311      	movs	r3, #17
 8002950:	623b      	str	r3, [r7, #32]
            regAddrH = ADDR_MAC_TTSCAH;
 8002952:	2310      	movs	r3, #16
 8002954:	61fb      	str	r3, [r7, #28]
            break;
 8002956:	e00d      	b.n	8002974 <MAC_TsGetEgressTimestamp+0x4e>
        case ADI_MAC_EGRESS_CAPTURE_B:
            regAddrL = ADDR_MAC_TTSCBL;
 8002958:	2313      	movs	r3, #19
 800295a:	623b      	str	r3, [r7, #32]
            regAddrH = ADDR_MAC_TTSCBH;
 800295c:	2312      	movs	r3, #18
 800295e:	61fb      	str	r3, [r7, #28]
            break;
 8002960:	e008      	b.n	8002974 <MAC_TsGetEgressTimestamp+0x4e>
        case ADI_MAC_EGRESS_CAPTURE_C:
            regAddrL = ADDR_MAC_TTSCCL;
 8002962:	2315      	movs	r3, #21
 8002964:	623b      	str	r3, [r7, #32]
            regAddrH = ADDR_MAC_TTSCCH;
 8002966:	2314      	movs	r3, #20
 8002968:	61fb      	str	r3, [r7, #28]
            break;
 800296a:	e003      	b.n	8002974 <MAC_TsGetEgressTimestamp+0x4e>
        default:
            result = ADI_ETH_NO_TS_FORMAT;
 800296c:	231f      	movs	r3, #31
 800296e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002972:	bf00      	nop
    }

    if (result == ADI_ETH_SUCCESS)
 8002974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002978:	2b00      	cmp	r3, #0
 800297a:	d129      	bne.n	80029d0 <MAC_TsGetEgressTimestamp+0xaa>
    {
        result = MAC_ReadRegister(hDevice, regAddrL, &timestampLowWord);
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	b29b      	uxth	r3, r3
 8002980:	f107 0218 	add.w	r2, r7, #24
 8002984:	4619      	mov	r1, r3
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7fe fdd0 	bl	800152c <MAC_ReadRegister>
 800298c:	4603      	mov	r3, r0
 800298e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (result != ADI_ETH_SUCCESS)
 8002992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11c      	bne.n	80029d4 <MAC_TsGetEgressTimestamp+0xae>
        {
            goto end;
        }
        result = MAC_ReadRegister(hDevice, regAddrH, &timestampHighWord);
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	b29b      	uxth	r3, r3
 800299e:	f107 0214 	add.w	r2, r7, #20
 80029a2:	4619      	mov	r1, r3
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7fe fdc1 	bl	800152c <MAC_ReadRegister>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (result != ADI_ETH_SUCCESS)
 80029b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10f      	bne.n	80029d8 <MAC_TsGetEgressTimestamp+0xb2>
        {
            goto end;
        }
        result = MAC_TsConvert(timestampLowWord, timestampHighWord, hDevice->timestampFormat, pCapturedTimespec);
 80029b8:	69b8      	ldr	r0, [r7, #24]
 80029ba:	6979      	ldr	r1, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f7ff fed4 	bl	8002770 <MAC_TsConvert>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029ce:	e004      	b.n	80029da <MAC_TsGetEgressTimestamp+0xb4>
    }
end:
 80029d0:	bf00      	nop
 80029d2:	e002      	b.n	80029da <MAC_TsGetEgressTimestamp+0xb4>
            goto end;
 80029d4:	bf00      	nop
 80029d6:	e000      	b.n	80029da <MAC_TsGetEgressTimestamp+0xb4>
            goto end;
 80029d8:	bf00      	nop
    return result;
 80029da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3728      	adds	r7, #40	; 0x28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <MAC_TsSetTimerAbsolute>:

adi_eth_Result_e MAC_TsSetTimerAbsolute(adi_mac_Device_t *hDevice, uint32_t seconds, uint32_t nanoseconds)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e result = ADI_ETH_SUCCESS;
 80029f4:	2300      	movs	r3, #0
 80029f6:	75fb      	strb	r3, [r7, #23]
    uint32_t addend;

    /* Stop clock while updating. */
    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_ADDEND, &addend);
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	461a      	mov	r2, r3
 80029fe:	2180      	movs	r1, #128	; 0x80
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7fe fd93 	bl	800152c <MAC_ReadRegister>
 8002a06:	4603      	mov	r3, r0
 8002a08:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d134      	bne.n	8002a7a <MAC_TsSetTimerAbsolute+0x92>
    {
        goto end;
    }
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_ADDEND, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7fe fdff 	bl	8001618 <MAC_WriteRegister>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d12c      	bne.n	8002a7e <MAC_TsSetTimerAbsolute+0x96>
    {
        goto end;
    }

    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_SEC_CNT, seconds);
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	2182      	movs	r1, #130	; 0x82
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7fe fdf5 	bl	8001618 <MAC_WriteRegister>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d124      	bne.n	8002a82 <MAC_TsSetTimerAbsolute+0x9a>
    {
        goto end;
    }

    /* Nanoseconds value must be greater than ADI_MAC_TS_MIN_NS and divisible by ADI_MAC_TS_MIN_NS. */
    if (nanoseconds < ADI_MAC_TS_MIN_NS)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	d801      	bhi.n	8002a42 <MAC_TsSetTimerAbsolute+0x5a>
    {
        nanoseconds = ADI_MAC_TS_MIN_NS;
 8002a3e:	2310      	movs	r3, #16
 8002a40:	607b      	str	r3, [r7, #4]
    }
    /* Nanoseconds value must be less than the number of nanoseconds in a second. */
    if (nanoseconds >= ADI_MAC_TS_ONE_SECOND_IN_NS)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <MAC_TsSetTimerAbsolute+0xac>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <MAC_TsSetTimerAbsolute+0x66>
    {
        nanoseconds = ADI_MAC_TS_ONE_SECOND_IN_NS - 1;
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <MAC_TsSetTimerAbsolute+0xac>)
 8002a4c:	607b      	str	r3, [r7, #4]
    }
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_NS_CNT, nanoseconds & ~ADI_MAC_TS_QE_MASK);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f023 030f 	bic.w	r3, r3, #15
 8002a54:	461a      	mov	r2, r3
 8002a56:	2183      	movs	r1, #131	; 0x83
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7fe fddd 	bl	8001618 <MAC_WriteRegister>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10e      	bne.n	8002a86 <MAC_TsSetTimerAbsolute+0x9e>
    {
        goto end;
    }

    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_ADDEND, addend);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7fe fdd2 	bl	8001618 <MAC_WriteRegister>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
 8002a78:	e006      	b.n	8002a88 <MAC_TsSetTimerAbsolute+0xa0>
        goto end;
 8002a7a:	bf00      	nop
 8002a7c:	e004      	b.n	8002a88 <MAC_TsSetTimerAbsolute+0xa0>
        goto end;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <MAC_TsSetTimerAbsolute+0xa0>
        goto end;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <MAC_TsSetTimerAbsolute+0xa0>
        goto end;
 8002a86:	bf00      	nop

end:
    return result;
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	3b9ac9ff 	.word	0x3b9ac9ff

08002a98 <MAC_TsSyncClock>:

adi_eth_Result_e MAC_TsSyncClock(adi_mac_Device_t *hDevice, int64_t tError, uint64_t referenceTimeNsDiff, uint64_t localTimeNsDiff)
{
 8002a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a9c:	b08e      	sub	sp, #56	; 0x38
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	e9c7 2300 	strd	r2, r3, [r7]
    adi_eth_Result_e result = ADI_ETH_SUCCESS;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int64_t localNsDiff;
    int64_t val64;
    uint32_t addend;

    /* Adjust to prevent overflow in computation */
    referenceNsDiff = referenceTimeNsDiff;
 8002aac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ab0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    localNsDiff = localTimeNsDiff;
 8002ab4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ab8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    while (referenceNsDiff > 0x7FFFFFFF)
 8002abc:	e017      	b.n	8002aee <MAC_TsSyncClock+0x56>
    {
        referenceNsDiff >>= 1;
 8002abe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	0842      	lsrs	r2, r0, #1
 8002acc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002ad0:	104b      	asrs	r3, r1, #1
 8002ad2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        localNsDiff >>= 1;
 8002ad6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	0842      	lsrs	r2, r0, #1
 8002ae4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002ae8:	104b      	asrs	r3, r1, #1
 8002aea:	e9c7 2308 	strd	r2, r3, [r7, #32]
    while (referenceNsDiff > 0x7FFFFFFF)
 8002aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002af2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002af6:	f173 0300 	sbcs.w	r3, r3, #0
 8002afa:	dae0      	bge.n	8002abe <MAC_TsSyncClock+0x26>
    }

    /* Compute syntonization factor. */
    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_ADDEND, &addend);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	461a      	mov	r2, r3
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7fe fd11 	bl	800152c <MAC_ReadRegister>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (result != ADI_ETH_SUCCESS)
 8002b10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d13c      	bne.n	8002b92 <MAC_TsSyncClock+0xfa>
    {
        goto end;
    }
    val64 = (int64_t) addend;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	469a      	mov	sl, r3
 8002b1e:	4693      	mov	fp, r2
 8002b20:	e9c7 ab06 	strd	sl, fp, [r7, #24]
    if ((referenceNsDiff != 0) && (localNsDiff != 0)) {
 8002b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	d01c      	beq.n	8002b66 <MAC_TsSyncClock+0xce>
 8002b2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	d018      	beq.n	8002b66 <MAC_TsSyncClock+0xce>
        val64 = ((referenceNsDiff * val64) / localNsDiff);
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	fb03 f202 	mul.w	r2, r3, r2
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	fba1 4502 	umull	r4, r5, r1, r2
 8002b4e:	442b      	add	r3, r5
 8002b50:	461d      	mov	r5, r3
 8002b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b56:	4620      	mov	r0, r4
 8002b58:	4629      	mov	r1, r5
 8002b5a:	f7fd ffa7 	bl	8000aac <__aeabi_ldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }

    /* Apply correction. */
    val64 += tError;
 8002b66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b6e:	eb10 0802 	adds.w	r8, r0, r2
 8002b72:	eb41 0903 	adc.w	r9, r1, r3
 8002b76:	e9c7 8906 	strd	r8, r9, [r7, #24]

    /* Coerce to register limits and write. */
    addend = (uint32_t)val64;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	617b      	str	r3, [r7, #20]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_ADDEND, addend);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	461a      	mov	r2, r3
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7fe fd47 	bl	8001618 <MAC_WriteRegister>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002b90:	e000      	b.n	8002b94 <MAC_TsSyncClock+0xfc>
        goto end;
 8002b92:	bf00      	nop

end:
    return result;
 8002b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3738      	adds	r7, #56	; 0x38
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002ba4 <MAC_TsSubtract>:

int64_t MAC_TsSubtract(adi_mac_TsTimespec_t *pTsA, adi_mac_TsTimespec_t *pTsB)
{
 8002ba4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ba8:	b093      	sub	sp, #76	; 0x4c
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6378      	str	r0, [r7, #52]	; 0x34
 8002bae:	6339      	str	r1, [r7, #48]	; 0x30
    int64_t tsAns;
    int64_t tsBns;

    /* Convert s to ns and add in ns */
    tsAns = pTsA->sec;
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	469a      	mov	sl, r3
 8002bb8:	4693      	mov	fp, r2
 8002bba:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
    tsAns *= ADI_MAC_TS_ONE_SECOND_IN_NS;
 8002bbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bc2:	4931      	ldr	r1, [pc, #196]	; (8002c88 <MAC_TsSubtract+0xe4>)
 8002bc4:	fb01 f003 	mul.w	r0, r1, r3
 8002bc8:	2100      	movs	r1, #0
 8002bca:	fb02 f101 	mul.w	r1, r2, r1
 8002bce:	4408      	add	r0, r1
 8002bd0:	492d      	ldr	r1, [pc, #180]	; (8002c88 <MAC_TsSubtract+0xe4>)
 8002bd2:	fba2 4501 	umull	r4, r5, r2, r1
 8002bd6:	1943      	adds	r3, r0, r5
 8002bd8:	461d      	mov	r5, r3
 8002bda:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
    tsAns += pTsA->nsec;
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bec:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	1851      	adds	r1, r2, r1
 8002bf4:	6139      	str	r1, [r7, #16]
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	eb43 0101 	adc.w	r1, r3, r1
 8002bfc:	6179      	str	r1, [r7, #20]
 8002bfe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002c02:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

    /* Convert s to ns and add in ns */
    tsBns = pTsB->sec;
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	60fa      	str	r2, [r7, #12]
 8002c10:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c14:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    tsBns *= ADI_MAC_TS_ONE_SECOND_IN_NS;
 8002c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c1c:	491a      	ldr	r1, [pc, #104]	; (8002c88 <MAC_TsSubtract+0xe4>)
 8002c1e:	fb01 f003 	mul.w	r0, r1, r3
 8002c22:	2100      	movs	r1, #0
 8002c24:	fb02 f101 	mul.w	r1, r2, r1
 8002c28:	4401      	add	r1, r0
 8002c2a:	4817      	ldr	r0, [pc, #92]	; (8002c88 <MAC_TsSubtract+0xe4>)
 8002c2c:	fba2 8900 	umull	r8, r9, r2, r0
 8002c30:	eb01 0309 	add.w	r3, r1, r9
 8002c34:	4699      	mov	r9, r3
 8002c36:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
    tsBns += pTsB->nsec;
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	623b      	str	r3, [r7, #32]
 8002c42:	627a      	str	r2, [r7, #36]	; 0x24
 8002c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c48:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	1851      	adds	r1, r2, r1
 8002c50:	6039      	str	r1, [r7, #0]
 8002c52:	4629      	mov	r1, r5
 8002c54:	eb43 0101 	adc.w	r1, r3, r1
 8002c58:	6079      	str	r1, [r7, #4]
 8002c5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c5e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

    /* Return the difference in ns */
    return tsAns - tsBns;
 8002c62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c66:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c6a:	1a84      	subs	r4, r0, r2
 8002c6c:	61bc      	str	r4, [r7, #24]
 8002c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	374c      	adds	r7, #76	; 0x4c
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	3b9aca00 	.word	0x3b9aca00

08002c8c <MAC_SyncConfig>:


adi_eth_Result_e MAC_SyncConfig(adi_mac_Device_t *hDevice)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
    uint32_t            val32;

    result = MAC_ReadRegister(hDevice, ADDR_MAC_CONFIG0, &val32);
 8002c98:	f107 0308 	add.w	r3, r7, #8
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7fe fc43 	bl	800152c <MAC_ReadRegister>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d115      	bne.n	8002cdc <MAC_SyncConfig+0x50>
    {
        goto end;
    }

    val32 |= BITM_MAC_CONFIG0_SYNC;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb6:	60bb      	str	r3, [r7, #8]

    result = MAC_WriteRegister(hDevice, ADDR_MAC_CONFIG0, val32);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe fcaa 	bl	8001618 <MAC_WriteRegister>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d108      	bne.n	8002ce0 <MAC_SyncConfig+0x54>
    {
        goto end;
    }

    /* CONFIG0.SYNC is set, we can now enable the IRQ. */
    ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8002cce:	f003 fd1e 	bl	800670e <HAL_EnableIrq>
    hDevice->configSync = true;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8002cda:	e002      	b.n	8002ce2 <MAC_SyncConfig+0x56>
        goto end;
 8002cdc:	bf00      	nop
 8002cde:	e000      	b.n	8002ce2 <MAC_SyncConfig+0x56>
        goto end;
 8002ce0:	bf00      	nop

end:
    return result;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <MAC_CalculateParity>:
 *                  header/footer parity fields defined by the OPEN Alliance specification
 *                  and for timestamp parity checking in both SPI protocols.
 *
 */
uint8_t MAC_CalculateParity(uint8_t *p, uint32_t nBytes)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
    uint32_t i;

    uint8_t parity = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	74fb      	strb	r3, [r7, #19]
    for (i = 0; i < nBytes; i++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e009      	b.n	8002d14 <MAC_CalculateParity+0x28>
    {
        parity ^= p[i];
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	4413      	add	r3, r2
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	7cfb      	ldrb	r3, [r7, #19]
 8002d0a:	4053      	eors	r3, r2
 8002d0c:	74fb      	strb	r3, [r7, #19]
    for (i = 0; i < nBytes; i++)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d3f1      	bcc.n	8002d00 <MAC_CalculateParity+0x14>
    }

    uint8_t prt = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	74bb      	strb	r3, [r7, #18]
    for (uint32_t i = 0; i < 8; i++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e00f      	b.n	8002d46 <MAC_CalculateParity+0x5a>
    {
        prt = prt ^ (parity & 0x1);
 8002d26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	b25a      	sxtb	r2, r3
 8002d30:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002d34:	4053      	eors	r3, r2
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	74bb      	strb	r3, [r7, #18]
        parity >>= 1;
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	74fb      	strb	r3, [r7, #19]
    for (uint32_t i = 0; i < 8; i++)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b07      	cmp	r3, #7
 8002d4a:	d9ec      	bls.n	8002d26 <MAC_CalculateParity+0x3a>
    }

    return prt & 0x1;
 8002d4c:	7cbb      	ldrb	r3, [r7, #18]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <PHY_Init>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_Init(adi_phy_Device_t **phDevice, adi_phy_DriverConfig_t *cfg, void *adinDevice, HAL_ReadFn_t readFn, HAL_WriteFn_t writeFn)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]
    adi_phy_Device_t    *hDevice;

    if (cfg->devMemSize < sizeof(adi_phy_Device_t))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b2f      	cmp	r3, #47	; 0x2f
 8002d78:	d801      	bhi.n	8002d7e <PHY_Init+0x1e>
    {
        return ADI_ETH_INVALID_PARAM;
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	e048      	b.n	8002e10 <PHY_Init+0xb0>
    }

    /* Implies state is uninitialized */
    memset(cfg->pDevMem, 0, cfg->devMemSize);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6858      	ldr	r0, [r3, #4]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	461a      	mov	r2, r3
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f017 ff5a 	bl	801ac42 <memset>

    *phDevice = (adi_phy_Device_t *)cfg->pDevMem;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	601a      	str	r2, [r3, #0]
    hDevice = *phDevice;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	613b      	str	r3, [r7, #16]
    hDevice->phyAddr = cfg->addr;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	601a      	str	r2, [r3, #0]
    hDevice->irqPending = false;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    hDevice->readFn = readFn;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	609a      	str	r2, [r3, #8]
    hDevice->writeFn = writeFn;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	60da      	str	r2, [r3, #12]

    /* Reset callback settings */
    hDevice->cbFunc = NULL;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	615a      	str	r2, [r3, #20]
    hDevice->cbEvents = 0;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]

    hDevice->adinDevice = adinDevice;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	621a      	str	r2, [r3, #32]

    /* Disable IRQ whether the interrupt is enabled or not */
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8002dca:	f003 fc99 	bl	8006700 <HAL_DisableIrq>

    /* Only required if the driver is configured to use the PHY interrupt */
    if (cfg->enableIrq)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	7b1b      	ldrb	r3, [r3, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <PHY_Init+0x7e>
    {
        ADI_HAL_REGISTER_CALLBACK(hDevice->adinDevice, (HAL_Callback_t const *)(irqCb), hDevice );
 8002dd6:	6939      	ldr	r1, [r7, #16]
 8002dd8:	480f      	ldr	r0, [pc, #60]	; (8002e18 <PHY_Init+0xb8>)
 8002dda:	f003 fca7 	bl	800672c <HAL_RegisterCallback>
    }

    result = phyInit(hDevice);
 8002dde:	6938      	ldr	r0, [r7, #16]
 8002de0:	f000 f83e 	bl	8002e60 <phyInit>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <PHY_Init+0x96>
    {
        hDevice->state = ADI_PHY_STATE_ERROR;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2205      	movs	r2, #5
 8002df2:	711a      	strb	r2, [r3, #4]
        goto end;
 8002df4:	e00b      	b.n	8002e0e <PHY_Init+0xae>
    }

    if (cfg->enableIrq)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	7b1b      	ldrb	r3, [r3, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <PHY_Init+0xac>
    {
        /* Enable IRQ */
        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8002dfe:	f003 fc86 	bl	800670e <HAL_EnableIrq>

        /* We may have a pending IRQ that will be services as soon as the IRQ is enabled, */
        /* set pending IRQ to false and if needed, service it here. */
        hDevice->irqPending = false;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002e0a:	e000      	b.n	8002e0e <PHY_Init+0xae>
    }

end:
 8002e0c:	bf00      	nop
    return result;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	08003055 	.word	0x08003055

08002e1c <PHY_UnInit>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_UnInit(adi_phy_Device_t *hDevice)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]

    if (hDevice == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <PHY_UnInit+0x18>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8002e2e:	230a      	movs	r3, #10
 8002e30:	73fb      	strb	r3, [r7, #15]
        goto end;
 8002e32:	e004      	b.n	8002e3e <PHY_UnInit+0x22>
    }

    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8002e34:	f003 fc64 	bl	8006700 <HAL_DisableIrq>

    hDevice->state = ADI_PHY_STATE_UNINITIALIZED;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	711a      	strb	r2, [r3, #4]

end:
    return result;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <PHY_ReInitPhy>:


adi_eth_Result_e PHY_ReInitPhy(adi_phy_Device_t *hDevice)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    return phyInit(hDevice);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f805 	bl	8002e60 <phyInit>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <phyInit>:
 * @details
 *
 * @sa
 */
static adi_eth_Result_e phyInit(adi_phy_Device_t *hDevice)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	77fb      	strb	r3, [r7, #31]
    bool                flag;
    int32_t             iter;
    uint32_t            modelNum;
    uint32_t            revNum;

    hDevice->state = ADI_PHY_STATE_UNINITIALIZED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	711a      	strb	r2, [r3, #4]
    }
#endif

    /* Checks the identity of the device based on reading of hardware ID registers */
    /* Ensures the device is supported by the driver, otherwise an error is reported. */
    result = checkIdentity(hDevice, &modelNum, &revNum);
 8002e72:	f107 0208 	add.w	r2, r7, #8
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f001 fac9 	bl	8004414 <checkIdentity>
 8002e82:	4603      	mov	r3, r0
 8002e84:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <phyInit+0x34>
    {
        hDevice->state = ADI_PHY_STATE_ERROR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2205      	movs	r2, #5
 8002e90:	711a      	strb	r2, [r3, #4]
        goto end;
 8002e92:	e094      	b.n	8002fbe <phyInit+0x15e>
    }

    /* Go to software powerdown, this may already be achieved through pin strap options. */
    /* Note this is not using the driver function because we use a different timeout     */
    /* scheme to account for the powerup sequence of the system included in this step.   */
    val16 = 1 << BITP_CRSM_SFT_PD_CNTRL_CRSM_SFT_PD;
 8002e94:	2301      	movs	r3, #1
 8002e96:	827b      	strh	r3, [r7, #18]
    result = PHY_Write(hDevice, ADDR_CRSM_SFT_PD_CNTRL, val16);
 8002e98:	8a7b      	ldrh	r3, [r7, #18]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	494a      	ldr	r1, [pc, #296]	; (8002fc8 <phyInit+0x168>)
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 ffc6 	bl	8003e30 <PHY_Write>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002ea8:	7ffb      	ldrb	r3, [r7, #31]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d17a      	bne.n	8002fa4 <phyInit+0x144>
    {
        goto end;
    }

    iter = ADI_PHY_SYS_RDY_ITER;
 8002eae:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002eb2:	61bb      	str	r3, [r7, #24]
    do
    {
        result = PHY_GetSoftwarePowerdown(hDevice, &flag);
 8002eb4:	f107 0311 	add.w	r3, r7, #17
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fb50 	bl	8003560 <PHY_GetSoftwarePowerdown>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	77fb      	strb	r3, [r7, #31]
        if (result != ADI_ETH_SUCCESS)
 8002ec4:	7ffb      	ldrb	r3, [r7, #31]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d16e      	bne.n	8002fa8 <phyInit+0x148>
        {
            goto end;
        }
    } while (!flag && (--iter));
 8002eca:	7c7b      	ldrb	r3, [r7, #17]
 8002ecc:	f083 0301 	eor.w	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <phyInit+0x82>
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	61bb      	str	r3, [r7, #24]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e8      	bne.n	8002eb4 <phyInit+0x54>

    /* Values of event enums are identical to respective interrupt masks */
    /* Hardware reset and hardware error interrupts are always enabled   */
    irqMask = ADI_PHY_CRSM_HW_ERROR | BITM_CRSM_IRQ_MASK_CRSM_HRD_RST_IRQ_EN | hDevice->cbEvents;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f443 536f 	orr.w	r3, r3, #15296	; 0x3bc0
 8002eea:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002eee:	617b      	str	r3, [r7, #20]
    result = PHY_Write(hDevice, ADDR_CRSM_IRQ_MASK, (irqMask & 0xFFFF));
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4935      	ldr	r1, [pc, #212]	; (8002fcc <phyInit+0x16c>)
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 ff99 	bl	8003e30 <PHY_Write>
 8002efe:	4603      	mov	r3, r0
 8002f00:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f02:	7ffb      	ldrb	r3, [r7, #31]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d151      	bne.n	8002fac <phyInit+0x14c>
    {
        goto end;
    }
    result = PHY_Write(hDevice, ADDR_PHY_SUBSYS_IRQ_MASK, ((irqMask >> 16) & 0xFFFF));
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	492f      	ldr	r1, [pc, #188]	; (8002fd0 <phyInit+0x170>)
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 ff8c 	bl	8003e30 <PHY_Write>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f1c:	7ffb      	ldrb	r3, [r7, #31]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d146      	bne.n	8002fb0 <phyInit+0x150>
    }

    /* Read IRQ status bits to clear them before enabling IRQ. */
    /* Hardware errors could be asserted if for, we don't care about the contents */
    /* so we just discard the read values. */
    result = PHY_Read(hDevice, ADDR_CRSM_IRQ_STATUS, &val16);
 8002f22:	f107 0312 	add.w	r3, r7, #18
 8002f26:	461a      	mov	r2, r3
 8002f28:	492a      	ldr	r1, [pc, #168]	; (8002fd4 <phyInit+0x174>)
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 ffa5 	bl	8003e7a <PHY_Read>
 8002f30:	4603      	mov	r3, r0
 8002f32:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f34:	7ffb      	ldrb	r3, [r7, #31]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d13c      	bne.n	8002fb4 <phyInit+0x154>
    {
        goto end;
    }
    if (val16 & ADI_PHY_CRSM_HW_ERROR)
 8002f3a:	8a7b      	ldrh	r3, [r7, #18]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f642 33ff 	movw	r3, #11263	; 0x2bff
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <phyInit+0xee>
    {
        result = ADI_ETH_HW_ERROR;
 8002f48:	2307      	movs	r3, #7
 8002f4a:	77fb      	strb	r3, [r7, #31]
        goto end;
 8002f4c:	e037      	b.n	8002fbe <phyInit+0x15e>
    }

    result = PHY_Read(hDevice, ADDR_PHY_SUBSYS_IRQ_STATUS, &val16);
 8002f4e:	f107 0312 	add.w	r3, r7, #18
 8002f52:	461a      	mov	r2, r3
 8002f54:	4920      	ldr	r1, [pc, #128]	; (8002fd8 <phyInit+0x178>)
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 ff8f 	bl	8003e7a <PHY_Read>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d128      	bne.n	8002fb8 <phyInit+0x158>
    {
        goto end;
    }

    hDevice->irqPending = false;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    /* Static configuration: default settings that are different from hardware reset values */
    result = phyStaticConfig(hDevice, modelNum, revNum);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	4619      	mov	r1, r3
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fb6d 	bl	8003654 <phyStaticConfig>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f7e:	7ffb      	ldrb	r3, [r7, #31]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <phyInit+0x12a>
    {
        result = ADI_ETH_PLACEHOLDER_ERROR;
 8002f84:	2323      	movs	r3, #35	; 0x23
 8002f86:	77fb      	strb	r3, [r7, #31]
        goto end;
 8002f88:	e019      	b.n	8002fbe <phyInit+0x15e>
    }

    /* Make sure auto-negotiation is enabled. */
    result = PHY_AnEnable(hDevice, true);
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f96d 	bl	800326c <PHY_AnEnable>
 8002f92:	4603      	mov	r3, r0
 8002f94:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f96:	7ffb      	ldrb	r3, [r7, #31]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10f      	bne.n	8002fbc <phyInit+0x15c>
    {
        goto end;
    }

    /* At then end of successful initialization, the PHY is in software powerdown. */
    hDevice->state = ADI_PHY_STATE_SOFTWARE_POWERDOWN;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	711a      	strb	r2, [r3, #4]
 8002fa2:	e00c      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fa4:	bf00      	nop
 8002fa6:	e00a      	b.n	8002fbe <phyInit+0x15e>
            goto end;
 8002fa8:	bf00      	nop
 8002faa:	e008      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fac:	bf00      	nop
 8002fae:	e006      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fb0:	bf00      	nop
 8002fb2:	e004      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fb4:	bf00      	nop
 8002fb6:	e002      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fb8:	bf00      	nop
 8002fba:	e000      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fbc:	bf00      	nop

end:
    return result;
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	001e8812 	.word	0x001e8812
 8002fcc:	001e0020 	.word	0x001e0020
 8002fd0:	001f0021 	.word	0x001f0021
 8002fd4:	001e0010 	.word	0x001e0010
 8002fd8:	001f0011 	.word	0x001f0011

08002fdc <PHY_RegisterCallback>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_RegisterCallback(adi_phy_Device_t *hDevice, adi_eth_Callback_t cbFunc, uint32_t cbEvents, void *cbParam)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]

    hDevice->cbFunc = cbFunc;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	615a      	str	r2, [r3, #20]
    hDevice->cbEvents = cbEvents;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
    hDevice->cbParam = cbParam;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	61da      	str	r2, [r3, #28]

    /* Values of event enums are identical to respective interrupt masks */
    /* Hardware reset and hardware error interrupts are always enabled   */
    uint32_t irqMask = ADI_PHY_CRSM_HW_ERROR | BITM_CRSM_IRQ_MASK_CRSM_HRD_RST_IRQ_EN | hDevice->cbEvents;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f443 536f 	orr.w	r3, r3, #15296	; 0x3bc0
 8003008:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800300c:	613b      	str	r3, [r7, #16]

    result = PHY_Write(hDevice, ADDR_CRSM_IRQ_MASK, (irqMask & 0xFFFF));
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	b29b      	uxth	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	490d      	ldr	r1, [pc, #52]	; (800304c <PHY_RegisterCallback+0x70>)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 ff0a 	bl	8003e30 <PHY_Write>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10c      	bne.n	8003040 <PHY_RegisterCallback+0x64>
    {
        goto end;
    }
    result = PHY_Write(hDevice, ADDR_PHY_SUBSYS_IRQ_MASK, ((irqMask >> 16) & 0xFFFF));
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	4908      	ldr	r1, [pc, #32]	; (8003050 <PHY_RegisterCallback+0x74>)
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fefd 	bl	8003e30 <PHY_Write>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 800303e:	e000      	b.n	8003042 <PHY_RegisterCallback+0x66>
        goto end;
 8003040:	bf00      	nop
    return result;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	001e0020 	.word	0x001e0020
 8003050:	001f0021 	.word	0x001f0021

08003054 <irqCb>:
 * @details
 *
 * @sa
 */
static void irqCb(void *pCBParam, uint32_t Event, void *pArg)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
    adi_phy_Device_t    *hDevice = (adi_phy_Device_t *)pCBParam;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	617b      	str	r3, [r7, #20]
    /* Set this flag to ensure the IRQ is handled before other actions are taken */
    /* The interrupt may be triggered by a hardware reset, in which case the PHY */
    /* will likely need to be reconfigured.                                      */
    /* The flag is cleared when interrupt status registers are read. Taking      */
    /* appropriate action is the responsibility of the caller.                   */
    hDevice->irqPending = true;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hDevice->cbFunc != NULL)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d006      	beq.n	8003082 <irqCb+0x2e>
    {
        hDevice->cbFunc(hDevice->cbParam, 0, NULL);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	69d0      	ldr	r0, [r2, #28]
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	4798      	blx	r3
    }
}
 8003082:	bf00      	nop
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <PHY_ReadIrqStatus>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_ReadIrqStatus(adi_phy_Device_t *hDevice, uint32_t *status)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    *status = 0;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

    result = PHY_Read(hDevice, ADDR_CRSM_IRQ_STATUS, &val16);
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	461a      	mov	r2, r3
 80030a6:	4916      	ldr	r1, [pc, #88]	; (8003100 <PHY_ReadIrqStatus+0x74>)
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fee6 	bl	8003e7a <PHY_Read>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11d      	bne.n	80030f4 <PHY_ReadIrqStatus+0x68>
    {
        goto end;
    }
    else
    {
        *status = val16;
 80030b8:	89bb      	ldrh	r3, [r7, #12]
 80030ba:	461a      	mov	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	601a      	str	r2, [r3, #0]

        result = PHY_Read(hDevice, ADDR_PHY_SUBSYS_IRQ_STATUS, &val16);
 80030c0:	f107 030c 	add.w	r3, r7, #12
 80030c4:	461a      	mov	r2, r3
 80030c6:	490f      	ldr	r1, [pc, #60]	; (8003104 <PHY_ReadIrqStatus+0x78>)
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fed6 	bl	8003e7a <PHY_Read>
 80030ce:	4603      	mov	r3, r0
 80030d0:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <PHY_ReadIrqStatus+0x50>
        {
            /* Only CRSM_IRQ_STATUS values returned are valid */
            result = ADI_ETH_COMM_ERROR_SECOND;
 80030d8:	2303      	movs	r3, #3
 80030da:	73fb      	strb	r3, [r7, #15]
        }
        *status |= (val16 << 16);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	89ba      	ldrh	r2, [r7, #12]
 80030e2:	0412      	lsls	r2, r2, #16
 80030e4:	431a      	orrs	r2, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	601a      	str	r2, [r3, #0]

        hDevice->irqPending = false;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80030f2:	e000      	b.n	80030f6 <PHY_ReadIrqStatus+0x6a>
        goto end;
 80030f4:	bf00      	nop
    }

end:
    return result;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	001e0010 	.word	0x001e0010
 8003104:	001f0011 	.word	0x001f0011

08003108 <PHY_AnAdvTxMode>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_AnAdvTxMode(adi_phy_Device_t *hDevice, adi_phy_AnAdvTxMode_e txMode)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <PHY_AnAdvTxMode+0x20>
    {
        result = ADI_ETH_IRQ_PENDING;
 8003122:	230b      	movs	r3, #11
 8003124:	73fb      	strb	r3, [r7, #15]
        goto end;
 8003126:	e02f      	b.n	8003188 <PHY_AnAdvTxMode+0x80>
    }

    result = PHY_Read(hDevice, ADDR_AN_ADV_ABILITY_H, &val16);
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	461a      	mov	r2, r3
 800312e:	4919      	ldr	r1, [pc, #100]	; (8003194 <PHY_AnAdvTxMode+0x8c>)
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fea2 	bl	8003e7a <PHY_Read>
 8003136:	4603      	mov	r3, r0
 8003138:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d122      	bne.n	8003186 <PHY_AnAdvTxMode+0x7e>
    {
        goto end;
    }
    val16 &= ~(BITM_AN_ADV_ABILITY_H_AN_ADV_B10L_TX_LVL_HI_REQ | BITM_AN_ADV_ABILITY_H_AN_ADV_B10L_TX_LVL_HI_ABL);
 8003140:	89bb      	ldrh	r3, [r7, #12]
 8003142:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003146:	b29b      	uxth	r3, r3
 8003148:	81bb      	strh	r3, [r7, #12]
    if ((txMode == ADI_PHY_AN_ADV_TX_REQ_2P4V) || (txMode == ADI_PHY_AN_ADV_TX_REQ_1P0V_ABLE_2P4V))
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d002      	beq.n	8003156 <PHY_AnAdvTxMode+0x4e>
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d104      	bne.n	8003160 <PHY_AnAdvTxMode+0x58>
    {
      val16 |= (1 << BITP_AN_ADV_ABILITY_H_AN_ADV_B10L_TX_LVL_HI_ABL);
 8003156:	89bb      	ldrh	r3, [r7, #12]
 8003158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800315c:	b29b      	uxth	r3, r3
 800315e:	81bb      	strh	r3, [r7, #12]
    }
    if (txMode == ADI_PHY_AN_ADV_TX_REQ_2P4V)
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d104      	bne.n	8003170 <PHY_AnAdvTxMode+0x68>
    {
      val16 |= (1 << BITP_AN_ADV_ABILITY_H_AN_ADV_B10L_TX_LVL_HI_REQ);
 8003166:	89bb      	ldrh	r3, [r7, #12]
 8003168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800316c:	b29b      	uxth	r3, r3
 800316e:	81bb      	strh	r3, [r7, #12]
    }
    result = PHY_Write(hDevice, ADDR_AN_ADV_ABILITY_H, val16);
 8003170:	89bb      	ldrh	r3, [r7, #12]
 8003172:	461a      	mov	r2, r3
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <PHY_AnAdvTxMode+0x8c>)
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fe5a 	bl	8003e30 <PHY_Write>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
    {
        goto end;
    }
end:
 8003184:	e000      	b.n	8003188 <PHY_AnAdvTxMode+0x80>
        goto end;
 8003186:	bf00      	nop
    return result;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	00070204 	.word	0x00070204

08003198 <PHY_AnAdvMstSlvCfg>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_AnAdvMstSlvCfg(adi_phy_Device_t *hDevice, adi_phy_AnAdvMasterSlaveCfg_e msCfg)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <PHY_AnAdvMstSlvCfg+0x20>
    {
        result = ADI_ETH_IRQ_PENDING;
 80031b2:	230b      	movs	r3, #11
 80031b4:	73fb      	strb	r3, [r7, #15]
        goto end;
 80031b6:	e050      	b.n	800325a <PHY_AnAdvMstSlvCfg+0xc2>
    }

    /* Forced/Preferred */
    result = PHY_Read(hDevice, ADDR_AN_ADV_ABILITY_L, &val16);
 80031b8:	f107 030c 	add.w	r3, r7, #12
 80031bc:	461a      	mov	r2, r3
 80031be:	4929      	ldr	r1, [pc, #164]	; (8003264 <PHY_AnAdvMstSlvCfg+0xcc>)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fe5a 	bl	8003e7a <PHY_Read>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d13f      	bne.n	8003250 <PHY_AnAdvMstSlvCfg+0xb8>
    {
        goto end;
    }
    val16 &= ~BITM_AN_ADV_ABILITY_L_AN_ADV_FORCE_MS;
 80031d0:	89bb      	ldrh	r3, [r7, #12]
 80031d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	81bb      	strh	r3, [r7, #12]
    if ((msCfg == ADI_PHY_AN_ADV_FORCED_MASTER) || (msCfg == ADI_PHY_AN_ADV_FORCED_SLAVE))
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <PHY_AnAdvMstSlvCfg+0x4e>
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d104      	bne.n	80031f0 <PHY_AnAdvMstSlvCfg+0x58>
    {
        val16 |= (1 << BITP_AN_ADV_ABILITY_L_AN_ADV_FORCE_MS);
 80031e6:	89bb      	ldrh	r3, [r7, #12]
 80031e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	81bb      	strh	r3, [r7, #12]
    }
    result = PHY_Write(hDevice, ADDR_AN_ADV_ABILITY_L, val16);
 80031f0:	89bb      	ldrh	r3, [r7, #12]
 80031f2:	461a      	mov	r2, r3
 80031f4:	491b      	ldr	r1, [pc, #108]	; (8003264 <PHY_AnAdvMstSlvCfg+0xcc>)
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fe1a 	bl	8003e30 <PHY_Write>
 80031fc:	4603      	mov	r3, r0
 80031fe:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d126      	bne.n	8003254 <PHY_AnAdvMstSlvCfg+0xbc>
    {
        goto end;
    }

    /* Master/Slave */
    result = PHY_Read(hDevice, ADDR_AN_ADV_ABILITY_M, &val16);
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	461a      	mov	r2, r3
 800320c:	4916      	ldr	r1, [pc, #88]	; (8003268 <PHY_AnAdvMstSlvCfg+0xd0>)
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fe33 	bl	8003e7a <PHY_Read>
 8003214:	4603      	mov	r3, r0
 8003216:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d11c      	bne.n	8003258 <PHY_AnAdvMstSlvCfg+0xc0>
    {
        goto end;
    }
    val16 &= ~BITM_AN_ADV_ABILITY_M_AN_ADV_MST;
 800321e:	89bb      	ldrh	r3, [r7, #12]
 8003220:	f023 0310 	bic.w	r3, r3, #16
 8003224:	b29b      	uxth	r3, r3
 8003226:	81bb      	strh	r3, [r7, #12]
    if ((msCfg == ADI_PHY_AN_ADV_FORCED_MASTER) || (msCfg == ADI_PHY_AN_ADV_PREFFERED_MASTER))
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <PHY_AnAdvMstSlvCfg+0x9c>
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d104      	bne.n	800323e <PHY_AnAdvMstSlvCfg+0xa6>
    {
        val16 |= (1 << BITP_AN_ADV_ABILITY_M_AN_ADV_MST);
 8003234:	89bb      	ldrh	r3, [r7, #12]
 8003236:	f043 0310 	orr.w	r3, r3, #16
 800323a:	b29b      	uxth	r3, r3
 800323c:	81bb      	strh	r3, [r7, #12]
    }
    result = PHY_Write(hDevice, ADDR_AN_ADV_ABILITY_M, val16);
 800323e:	89bb      	ldrh	r3, [r7, #12]
 8003240:	461a      	mov	r2, r3
 8003242:	4909      	ldr	r1, [pc, #36]	; (8003268 <PHY_AnAdvMstSlvCfg+0xd0>)
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fdf3 	bl	8003e30 <PHY_Write>
 800324a:	4603      	mov	r3, r0
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	e004      	b.n	800325a <PHY_AnAdvMstSlvCfg+0xc2>
        goto end;
 8003250:	bf00      	nop
 8003252:	e002      	b.n	800325a <PHY_AnAdvMstSlvCfg+0xc2>
        goto end;
 8003254:	bf00      	nop
 8003256:	e000      	b.n	800325a <PHY_AnAdvMstSlvCfg+0xc2>
        goto end;
 8003258:	bf00      	nop

end:
    return result;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	00070202 	.word	0x00070202
 8003268:	00070203 	.word	0x00070203

0800326c <PHY_AnEnable>:
 * @details         It is STRONGLY recommended to never disable auto-negotiation!
 *
 * @sa
 */
adi_eth_Result_e PHY_AnEnable(adi_phy_Device_t *hDevice, bool enable)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <PHY_AnEnable+0x20>
    {
        result = ADI_ETH_IRQ_PENDING;
 8003286:	230b      	movs	r3, #11
 8003288:	73fb      	strb	r3, [r7, #15]
        goto end;
 800328a:	e00f      	b.n	80032ac <PHY_AnEnable+0x40>
    }

    /* The only other bit in this register is AN_RESTART, need to write 0 to it */
    val16 = (enable? 1: 0) << BITP_AN_CONTROL_AN_EN;
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <PHY_AnEnable+0x2c>
 8003292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003296:	e000      	b.n	800329a <PHY_AnEnable+0x2e>
 8003298:	2300      	movs	r3, #0
 800329a:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_AN_CONTROL, val16);
 800329c:	89bb      	ldrh	r3, [r7, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	4905      	ldr	r1, [pc, #20]	; (80032b8 <PHY_AnEnable+0x4c>)
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fdc4 	bl	8003e30 <PHY_Write>
 80032a8:	4603      	mov	r3, r0
 80032aa:	73fb      	strb	r3, [r7, #15]

end:
    return result;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	00070200 	.word	0x00070200

080032bc <PHY_Renegotiate>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_Renegotiate(adi_phy_Device_t *hDevice)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <PHY_Renegotiate+0x1c>
    {
        result = ADI_ETH_IRQ_PENDING;
 80032d2:	230b      	movs	r3, #11
 80032d4:	73fb      	strb	r3, [r7, #15]
        goto end;
 80032d6:	e00a      	b.n	80032ee <PHY_Renegotiate+0x32>
    }

    /* AN_EN should be 1 or AN_RESTART is ignored. Instead of read-modify-write */
    /* and/or reporting an error, we force AN_EN=1.                             */
    val16 = (1 << BITP_AN_CONTROL_AN_EN) |
 80032d8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80032dc:	81bb      	strh	r3, [r7, #12]
            (1 << BITP_AN_CONTROL_AN_RESTART);
    result = PHY_Write(hDevice, ADDR_AN_CONTROL, val16);
 80032de:	89bb      	ldrh	r3, [r7, #12]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4905      	ldr	r1, [pc, #20]	; (80032f8 <PHY_Renegotiate+0x3c>)
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fda3 	bl	8003e30 <PHY_Write>
 80032ea:	4603      	mov	r3, r0
 80032ec:	73fb      	strb	r3, [r7, #15]

end:
    return result;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	00070200 	.word	0x00070200

080032fc <PHY_GetAnStatus>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_GetAnStatus(adi_phy_Device_t *hDevice, adi_phy_AnStatus_t *status)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    result = PHY_Read(hDevice, ADDR_AN_STATUS, &val16);
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	461a      	mov	r2, r3
 8003310:	493d      	ldr	r1, [pc, #244]	; (8003408 <PHY_GetAnStatus+0x10c>)
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fdb1 	bl	8003e7a <PHY_Read>
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d168      	bne.n	80033f4 <PHY_GetAnStatus+0xf8>
    {
        goto end;
    }

    status->anComplete = (val16 & BITM_AN_STATUS_AN_COMPLETE) >> BITP_AN_STATUS_AN_COMPLETE;
 8003322:	89bb      	ldrh	r3, [r7, #12]
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	b2da      	uxtb	r2, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	701a      	strb	r2, [r3, #0]
    if (!status->anComplete)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	f083 0301 	eor.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d158      	bne.n	80033f8 <PHY_GetAnStatus+0xfc>
        goto end;
    }

    /* Use the LL value for the link status. If it indicatesthe link is down,   */
    /* the application will read the link status on its own use GetLinkStatus() */
    status->anLinkStatus = (val16 & BITM_AN_STATUS_AN_LINK_STATUS)? ADI_PHY_LINK_STATUS_UP: ADI_PHY_LINK_STATUS_DOWN;
 8003346:	89bb      	ldrh	r3, [r7, #12]
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	705a      	strb	r2, [r3, #1]

    /* Master/slave resolution */
    result = PHY_Read(hDevice, ADDR_AN_STATUS_EXTRA, &val16);
 8003356:	f107 030c 	add.w	r3, r7, #12
 800335a:	461a      	mov	r2, r3
 800335c:	492b      	ldr	r1, [pc, #172]	; (800340c <PHY_GetAnStatus+0x110>)
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fd8b 	bl	8003e7a <PHY_Read>
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d146      	bne.n	80033fc <PHY_GetAnStatus+0x100>
    {
        goto end;
    }
    switch ((val16 & BITM_AN_STATUS_EXTRA_AN_MS_CONFIG_RSLTN) >> BITP_AN_STATUS_EXTRA_AN_MS_CONFIG_RSLTN)
 800336e:	89bb      	ldrh	r3, [r7, #12]
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d81a      	bhi.n	80033b0 <PHY_GetAnStatus+0xb4>
 800337a:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <PHY_GetAnStatus+0x84>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	08003399 	.word	0x08003399
 8003388:	080033a1 	.word	0x080033a1
 800338c:	080033a9 	.word	0x080033a9
    {
        case 0:
            status->anMsResolution = ADI_PHY_AN_MS_RESOLUTION_NOT_RUN;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	709a      	strb	r2, [r3, #2]
            break;
 8003396:	e00b      	b.n	80033b0 <PHY_GetAnStatus+0xb4>

        case 1:
            status->anMsResolution = ADI_PHY_AN_MS_RESOLUTION_FAULT;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	709a      	strb	r2, [r3, #2]
            break;
 800339e:	e007      	b.n	80033b0 <PHY_GetAnStatus+0xb4>

        case 2:
            status->anMsResolution = ADI_PHY_AN_MS_RESOLUTION_SLAVE;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2202      	movs	r2, #2
 80033a4:	709a      	strb	r2, [r3, #2]
            break;
 80033a6:	e003      	b.n	80033b0 <PHY_GetAnStatus+0xb4>

        case 3:
            status->anMsResolution = ADI_PHY_AN_MS_RESOLUTION_MASTER;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2203      	movs	r2, #3
 80033ac:	709a      	strb	r2, [r3, #2]
            break;
 80033ae:	bf00      	nop
    }

    switch ((val16 & BITM_AN_STATUS_EXTRA_AN_TX_LVL_RSLTN) >> BITP_AN_STATUS_EXTRA_AN_TX_LVL_RSLTN)
 80033b0:	89bb      	ldrh	r3, [r7, #12]
 80033b2:	09db      	lsrs	r3, r3, #7
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d820      	bhi.n	80033fe <PHY_GetAnStatus+0x102>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <PHY_GetAnStatus+0xc8>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033d5 	.word	0x080033d5
 80033c8:	080033dd 	.word	0x080033dd
 80033cc:	080033e5 	.word	0x080033e5
 80033d0:	080033ed 	.word	0x080033ed
    {
        case 0:
            status->anTxMode = ADI_PHY_AN_TX_LEVEL_RESOLUTION_NOT_RUN;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	70da      	strb	r2, [r3, #3]
            break;
 80033da:	e010      	b.n	80033fe <PHY_GetAnStatus+0x102>

        case 1:
            status->anTxMode = ADI_PHY_AN_TX_LEVEL_RESERVED;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	70da      	strb	r2, [r3, #3]
            break;
 80033e2:	e00c      	b.n	80033fe <PHY_GetAnStatus+0x102>

      case 2:
            status->anTxMode = ADI_PHY_AN_TX_LEVEL_1P0V;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2202      	movs	r2, #2
 80033e8:	70da      	strb	r2, [r3, #3]
            break;
 80033ea:	e008      	b.n	80033fe <PHY_GetAnStatus+0x102>

        case 3:
            status->anTxMode = ADI_PHY_AN_TX_LEVEL_2P4V;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2203      	movs	r2, #3
 80033f0:	70da      	strb	r2, [r3, #3]
            break;
 80033f2:	e004      	b.n	80033fe <PHY_GetAnStatus+0x102>
        goto end;
 80033f4:	bf00      	nop
 80033f6:	e002      	b.n	80033fe <PHY_GetAnStatus+0x102>
        goto end;
 80033f8:	bf00      	nop
 80033fa:	e000      	b.n	80033fe <PHY_GetAnStatus+0x102>
        goto end;
 80033fc:	bf00      	nop
    }

end:
    return result;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	00070201 	.word	0x00070201
 800340c:	00078001 	.word	0x00078001

08003410 <PHY_GetCapabilities>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_GetCapabilities(adi_phy_Device_t *hDevice, uint16_t *capabilities)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <PHY_GetCapabilities+0x1e>
    {
        result = ADI_ETH_IRQ_PENDING;
 8003428:	230b      	movs	r3, #11
 800342a:	73fb      	strb	r3, [r7, #15]
        goto end;
 800342c:	e028      	b.n	8003480 <PHY_GetCapabilities+0x70>
    }

    /* Read capabilities and store in driver struct */
    *capabilities = ADI_PHY_CAP_NONE;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	801a      	strh	r2, [r3, #0]
    result = PHY_Read(hDevice, ADDR_B10L_PMA_STAT, &val16);
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	461a      	mov	r2, r3
 800343a:	4914      	ldr	r1, [pc, #80]	; (800348c <PHY_GetCapabilities+0x7c>)
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fd1c 	bl	8003e7a <PHY_Read>
 8003442:	4603      	mov	r3, r0
 8003444:	73fb      	strb	r3, [r7, #15]
    if (result == ADI_ETH_SUCCESS)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d118      	bne.n	800347e <PHY_GetCapabilities+0x6e>
    {
        if (val16 & BITM_B10L_PMA_STAT_B10L_TX_LVL_HI_ABLE)
 800344c:	89bb      	ldrh	r3, [r7, #12]
 800344e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d006      	beq.n	8003464 <PHY_GetCapabilities+0x54>
        {
            *capabilities |= ADI_PHY_CAP_TX_HIGH_LEVEL;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	f043 0302 	orr.w	r3, r3, #2
 800345e:	b29a      	uxth	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	801a      	strh	r2, [r3, #0]
        }
        if (val16 & BITM_B10L_PMA_STAT_B10L_LB_PMA_LOC_ABLE)
 8003464:	89bb      	ldrh	r3, [r7, #12]
 8003466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <PHY_GetCapabilities+0x6e>
        {
            *capabilities |= ADI_PHY_CAP_PMA_LOCAL_LOOPBACK;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	b29a      	uxth	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	801a      	strh	r2, [r3, #0]
 800347c:	e000      	b.n	8003480 <PHY_GetCapabilities+0x70>
        }
    }

end:
 800347e:	bf00      	nop
    return result;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	000108f7 	.word	0x000108f7

08003490 <setSoftwarePowerdown>:

static adi_eth_Result_e setSoftwarePowerdown(adi_phy_Device_t *hDevice, bool enable)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]
    uint16_t            val16;
    uint16_t            bitval;
    bool                swpd;
    int32_t             iter = ADI_PHY_SOFT_PD_ITER;
 80034a0:	230a      	movs	r3, #10
 80034a2:	613b      	str	r3, [r7, #16]

    if (hDevice->irqPending)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <setSoftwarePowerdown+0x24>
    {
        result = ADI_ETH_IRQ_PENDING;
 80034ae:	230b      	movs	r3, #11
 80034b0:	75fb      	strb	r3, [r7, #23]
        goto end;
 80034b2:	e033      	b.n	800351c <setSoftwarePowerdown+0x8c>
    }

    bitval = (enable)? 1: 0;
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	81fb      	strh	r3, [r7, #14]
    val16 = bitval << BITP_CRSM_SFT_PD_CNTRL_CRSM_SFT_PD;
 80034b8:	89fb      	ldrh	r3, [r7, #14]
 80034ba:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_CRSM_SFT_PD_CNTRL, val16);
 80034bc:	89bb      	ldrh	r3, [r7, #12]
 80034be:	461a      	mov	r2, r3
 80034c0:	4919      	ldr	r1, [pc, #100]	; (8003528 <setSoftwarePowerdown+0x98>)
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fcb4 	bl	8003e30 <PHY_Write>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d123      	bne.n	800351a <setSoftwarePowerdown+0x8a>
    }

    /* Wait with timeout for the PHY device to enter the desired state before returning. */
    do
    {
        result = PHY_GetSoftwarePowerdown(hDevice, &swpd);
 80034d2:	f107 030b 	add.w	r3, r7, #11
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f841 	bl	8003560 <PHY_GetSoftwarePowerdown>
 80034de:	4603      	mov	r3, r0
 80034e0:	75fb      	strb	r3, [r7, #23]
    } while ((val16 != (uint16_t)swpd) && (--iter));
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	89ba      	ldrh	r2, [r7, #12]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d005      	beq.n	80034f8 <setSoftwarePowerdown+0x68>
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ec      	bne.n	80034d2 <setSoftwarePowerdown+0x42>

    if (iter <= 0)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	dc02      	bgt.n	8003504 <setSoftwarePowerdown+0x74>
    {
        result = ADI_ETH_READ_STATUS_TIMEOUT;
 80034fe:	230c      	movs	r3, #12
 8003500:	75fb      	strb	r3, [r7, #23]
        goto end;
 8003502:	e00b      	b.n	800351c <setSoftwarePowerdown+0x8c>
    }

    if (enable)
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <setSoftwarePowerdown+0x82>
    {
        hDevice->state = ADI_PHY_STATE_SOFTWARE_POWERDOWN;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	711a      	strb	r2, [r3, #4]
 8003510:	e004      	b.n	800351c <setSoftwarePowerdown+0x8c>
    }
    else
    {
        hDevice->state = ADI_PHY_STATE_OPERATION;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2203      	movs	r2, #3
 8003516:	711a      	strb	r2, [r3, #4]
 8003518:	e000      	b.n	800351c <setSoftwarePowerdown+0x8c>
        goto end;
 800351a:	bf00      	nop
    }

end:
    return result;
 800351c:	7dfb      	ldrb	r3, [r7, #23]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	001e8812 	.word	0x001e8812

0800352c <PHY_EnterSoftwarePowerdown>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_EnterSoftwarePowerdown(adi_phy_Device_t *hDevice)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    return setSoftwarePowerdown(hDevice, true);
 8003534:	2101      	movs	r1, #1
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffaa 	bl	8003490 <setSoftwarePowerdown>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <PHY_ExitSoftwarePowerdown>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_ExitSoftwarePowerdown(adi_phy_Device_t *hDevice)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
    return setSoftwarePowerdown(hDevice, false);
 800354e:	2100      	movs	r1, #0
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff9d 	bl	8003490 <setSoftwarePowerdown>
 8003556:	4603      	mov	r3, r0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <PHY_GetSoftwarePowerdown>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_GetSoftwarePowerdown(adi_phy_Device_t *hDevice, bool *enable)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <PHY_GetSoftwarePowerdown+0x1e>
    {
        result = ADI_ETH_IRQ_PENDING;
 8003578:	230b      	movs	r3, #11
 800357a:	73fb      	strb	r3, [r7, #15]
        goto end;
 800357c:	e019      	b.n	80035b2 <PHY_GetSoftwarePowerdown+0x52>
    }

    val16 = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	81bb      	strh	r3, [r7, #12]
    result = PHY_Read(hDevice, ADDR_CRSM_STAT, &val16);
 8003582:	f107 030c 	add.w	r3, r7, #12
 8003586:	461a      	mov	r2, r3
 8003588:	490c      	ldr	r1, [pc, #48]	; (80035bc <PHY_GetSoftwarePowerdown+0x5c>)
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fc75 	bl	8003e7a <PHY_Read>
 8003590:	4603      	mov	r3, r0
 8003592:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <PHY_GetSoftwarePowerdown+0x3e>
    {
        return ADI_ETH_COMM_ERROR;
 800359a:	2302      	movs	r3, #2
 800359c:	e00a      	b.n	80035b4 <PHY_GetSoftwarePowerdown+0x54>
    }

    *enable = ((val16 & BITM_CRSM_STAT_CRSM_SFT_PD_RDY) == (1 << BITP_CRSM_STAT_CRSM_SFT_PD_RDY));
 800359e:	89bb      	ldrh	r3, [r7, #12]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	701a      	strb	r2, [r3, #0]

end:
    return result;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	001e8818 	.word	0x001e8818

080035c0 <PHY_GetLinkStatus>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_GetLinkStatus(adi_phy_Device_t *hDevice, adi_phy_LinkStatus_e *status)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <PHY_GetLinkStatus+0x1e>
    {
        result = ADI_ETH_IRQ_PENDING;
 80035d8:	230b      	movs	r3, #11
 80035da:	73fb      	strb	r3, [r7, #15]
        goto end;
 80035dc:	e032      	b.n	8003644 <PHY_GetLinkStatus+0x84>
    }

    /* Default to link down, applicable when there are errors, */
    /* such as MDIO communication errors.                      */
    *status = ADI_PHY_LINK_STATUS_DOWN;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]

    /* Reading AN_STATUS register clears all latched bits, take this into account */
    result = PHY_Read(hDevice, ADDR_AN_STATUS, &val16);
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	461a      	mov	r2, r3
 80035ea:	4919      	ldr	r1, [pc, #100]	; (8003650 <PHY_GetLinkStatus+0x90>)
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fc44 	bl	8003e7a <PHY_Read>
 80035f2:	4603      	mov	r3, r0
 80035f4:	73fb      	strb	r3, [r7, #15]
    if (result == ADI_ETH_SUCCESS)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d122      	bne.n	8003642 <PHY_GetLinkStatus+0x82>
    {
        if (val16 & BITM_AN_STATUS_AN_LINK_STATUS)
 80035fc:	89bb      	ldrh	r3, [r7, #12]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <PHY_GetLinkStatus+0x4e>
        {
            *status = ADI_PHY_LINK_STATUS_UP;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e01a      	b.n	8003644 <PHY_GetLinkStatus+0x84>
        }
        else
        {
            /* Read it again, first record the dropped link in the stats  */
            hDevice->stats.linkDropped++;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
            result = PHY_Read(hDevice, ADDR_AN_STATUS, &val16);
 8003618:	f107 030c 	add.w	r3, r7, #12
 800361c:	461a      	mov	r2, r3
 800361e:	490c      	ldr	r1, [pc, #48]	; (8003650 <PHY_GetLinkStatus+0x90>)
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fc2a 	bl	8003e7a <PHY_Read>
 8003626:	4603      	mov	r3, r0
 8003628:	73fb      	strb	r3, [r7, #15]
            if (result == ADI_ETH_SUCCESS)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d108      	bne.n	8003642 <PHY_GetLinkStatus+0x82>
            {
                *status = (val16 & BITM_AN_STATUS_AN_LINK_STATUS)? ADI_PHY_LINK_STATUS_UP: ADI_PHY_LINK_STATUS_DOWN;
 8003630:	89bb      	ldrh	r3, [r7, #12]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	e000      	b.n	8003644 <PHY_GetLinkStatus+0x84>
            }
        }
    }

end:
 8003642:	bf00      	nop
    return result;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	00070201 	.word	0x00070201

08003654 <phyStaticConfig>:
 *                  to change the default behaviour of the device, increase performance, etc.
 *
 * @sa
 */
static adi_eth_Result_e phyStaticConfig(adi_phy_Device_t *hDevice, uint32_t modelNum, uint32_t revNum)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003660:	2300      	movs	r3, #0
 8003662:	75fb      	strb	r3, [r7, #23]

    if (revNum == 0)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 80e9 	bne.w	800383e <phyStaticConfig+0x1ea>
    {

        result = PHY_Write(hDevice, 0x1E8C81, 0x0001);
 800366c:	2201      	movs	r2, #1
 800366e:	498a      	ldr	r1, [pc, #552]	; (8003898 <phyStaticConfig+0x244>)
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fbdd 	bl	8003e30 <PHY_Write>
 8003676:	4603      	mov	r3, r0
 8003678:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f040 80e0 	bne.w	8003842 <phyStaticConfig+0x1ee>
        {
            goto end;
        }

        if (modelNum == 10)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b0a      	cmp	r3, #10
 8003686:	d107      	bne.n	8003698 <phyStaticConfig+0x44>
        {
            result = PHY_Write(hDevice, 0x1E8C80, 0x0001);
 8003688:	2201      	movs	r2, #1
 800368a:	4984      	ldr	r1, [pc, #528]	; (800389c <phyStaticConfig+0x248>)
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fbcf 	bl	8003e30 <PHY_Write>
 8003692:	4603      	mov	r3, r0
 8003694:	75fb      	strb	r3, [r7, #23]
 8003696:	e007      	b.n	80036a8 <phyStaticConfig+0x54>
        }
        else
        {
            result = PHY_Write(hDevice, 0x1E8C80, 0x3636);
 8003698:	f243 6236 	movw	r2, #13878	; 0x3636
 800369c:	497f      	ldr	r1, [pc, #508]	; (800389c <phyStaticConfig+0x248>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fbc6 	bl	8003e30 <PHY_Write>
 80036a4:	4603      	mov	r3, r0
 80036a6:	75fb      	strb	r3, [r7, #23]
        }
        if (result != ADI_ETH_SUCCESS)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f040 80cb 	bne.w	8003846 <phyStaticConfig+0x1f2>
        {
            goto end;
        }

        result = PHY_Write(hDevice, 0x1E881F, 0x0000);
 80036b0:	2200      	movs	r2, #0
 80036b2:	497b      	ldr	r1, [pc, #492]	; (80038a0 <phyStaticConfig+0x24c>)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fbbb 	bl	8003e30 <PHY_Write>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f040 80c2 	bne.w	800384a <phyStaticConfig+0x1f6>
        {
            goto end;
        }

        result = PHY_Write(hDevice, 0x018154, 0x00F9);
 80036c6:	22f9      	movs	r2, #249	; 0xf9
 80036c8:	4976      	ldr	r1, [pc, #472]	; (80038a4 <phyStaticConfig+0x250>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fbb0 	bl	8003e30 <PHY_Write>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f040 80b9 	bne.w	800384e <phyStaticConfig+0x1fa>
        {
            goto end;
        }

        result = PHY_Write(hDevice, 0x1E8C40, 0x000B);
 80036dc:	220b      	movs	r2, #11
 80036de:	4972      	ldr	r1, [pc, #456]	; (80038a8 <phyStaticConfig+0x254>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fba5 	bl	8003e30 <PHY_Write>
 80036e6:	4603      	mov	r3, r0
 80036e8:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 80b0 	bne.w	8003852 <phyStaticConfig+0x1fe>
        {
            goto end;
        }

        result = PHY_Write(hDevice, 0x018008, 0x0003);
 80036f2:	2203      	movs	r2, #3
 80036f4:	496d      	ldr	r1, [pc, #436]	; (80038ac <phyStaticConfig+0x258>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fb9a 	bl	8003e30 <PHY_Write>
 80036fc:	4603      	mov	r3, r0
 80036fe:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 80a7 	bne.w	8003856 <phyStaticConfig+0x202>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x018009, 0x0008);
 8003708:	2208      	movs	r2, #8
 800370a:	4969      	ldr	r1, [pc, #420]	; (80038b0 <phyStaticConfig+0x25c>)
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fb8f 	bl	8003e30 <PHY_Write>
 8003712:	4603      	mov	r3, r0
 8003714:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 809e 	bne.w	800385a <phyStaticConfig+0x206>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x018167, 0x2000);
 800371e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003722:	4964      	ldr	r1, [pc, #400]	; (80038b4 <phyStaticConfig+0x260>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fb83 	bl	8003e30 <PHY_Write>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 8094 	bne.w	800385e <phyStaticConfig+0x20a>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x018168, 0x0008);
 8003736:	2208      	movs	r2, #8
 8003738:	495f      	ldr	r1, [pc, #380]	; (80038b8 <phyStaticConfig+0x264>)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fb78 	bl	8003e30 <PHY_Write>
 8003740:	4603      	mov	r3, r0
 8003742:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 808b 	bne.w	8003862 <phyStaticConfig+0x20e>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x01816B, 0x0400);
 800374c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003750:	495a      	ldr	r1, [pc, #360]	; (80038bc <phyStaticConfig+0x268>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fb6c 	bl	8003e30 <PHY_Write>
 8003758:	4603      	mov	r3, r0
 800375a:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 8081 	bne.w	8003866 <phyStaticConfig+0x212>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181BD, 0x2000);
 8003764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003768:	4955      	ldr	r1, [pc, #340]	; (80038c0 <phyStaticConfig+0x26c>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fb60 	bl	8003e30 <PHY_Write>
 8003770:	4603      	mov	r3, r0
 8003772:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d177      	bne.n	800386a <phyStaticConfig+0x216>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181BE, 0x0008);
 800377a:	2208      	movs	r2, #8
 800377c:	4951      	ldr	r1, [pc, #324]	; (80038c4 <phyStaticConfig+0x270>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fb56 	bl	8003e30 <PHY_Write>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d16f      	bne.n	800386e <phyStaticConfig+0x21a>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181C2, 0x0400);
 800378e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003792:	494d      	ldr	r1, [pc, #308]	; (80038c8 <phyStaticConfig+0x274>)
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fb4b 	bl	8003e30 <PHY_Write>
 800379a:	4603      	mov	r3, r0
 800379c:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d166      	bne.n	8003872 <phyStaticConfig+0x21e>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181DB, 0x0400);
 80037a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a8:	4948      	ldr	r1, [pc, #288]	; (80038cc <phyStaticConfig+0x278>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fb40 	bl	8003e30 <PHY_Write>
 80037b0:	4603      	mov	r3, r0
 80037b2:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d15d      	bne.n	8003876 <phyStaticConfig+0x222>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181E1, 0x0400);
 80037ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037be:	4944      	ldr	r1, [pc, #272]	; (80038d0 <phyStaticConfig+0x27c>)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fb35 	bl	8003e30 <PHY_Write>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d154      	bne.n	800387a <phyStaticConfig+0x226>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181E7, 0x0400);
 80037d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037d4:	493f      	ldr	r1, [pc, #252]	; (80038d4 <phyStaticConfig+0x280>)
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fb2a 	bl	8003e30 <PHY_Write>
 80037dc:	4603      	mov	r3, r0
 80037de:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d14b      	bne.n	800387e <phyStaticConfig+0x22a>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181EB, 0x0400);
 80037e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ea:	493b      	ldr	r1, [pc, #236]	; (80038d8 <phyStaticConfig+0x284>)
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fb1f 	bl	8003e30 <PHY_Write>
 80037f2:	4603      	mov	r3, r0
 80037f4:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d142      	bne.n	8003882 <phyStaticConfig+0x22e>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x018143, 0x0400);
 80037fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003800:	4936      	ldr	r1, [pc, #216]	; (80038dc <phyStaticConfig+0x288>)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fb14 	bl	8003e30 <PHY_Write>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d139      	bne.n	8003886 <phyStaticConfig+0x232>
        {
            goto end;
        }

        if (modelNum == 10)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b0a      	cmp	r3, #10
 8003816:	d112      	bne.n	800383e <phyStaticConfig+0x1ea>
        {
            result = PHY_Write(hDevice, 0x1EA400, 0x0001);
 8003818:	2201      	movs	r2, #1
 800381a:	4931      	ldr	r1, [pc, #196]	; (80038e0 <phyStaticConfig+0x28c>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fb07 	bl	8003e30 <PHY_Write>
 8003822:	4603      	mov	r3, r0
 8003824:	75fb      	strb	r3, [r7, #23]
            if (result != ADI_ETH_SUCCESS)
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d12e      	bne.n	800388a <phyStaticConfig+0x236>
            {
                goto end;
            }
            result = PHY_Write(hDevice, 0x1EA407, 0x0001);
 800382c:	2201      	movs	r2, #1
 800382e:	492d      	ldr	r1, [pc, #180]	; (80038e4 <phyStaticConfig+0x290>)
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fafd 	bl	8003e30 <PHY_Write>
 8003836:	4603      	mov	r3, r0
 8003838:	75fb      	strb	r3, [r7, #23]
            if (result != ADI_ETH_SUCCESS)
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	2b00      	cmp	r3, #0
            }
        }

    }

end:
 800383e:	bf00      	nop
 8003840:	e024      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003842:	bf00      	nop
 8003844:	e022      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003846:	bf00      	nop
 8003848:	e020      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800384a:	bf00      	nop
 800384c:	e01e      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800384e:	bf00      	nop
 8003850:	e01c      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003852:	bf00      	nop
 8003854:	e01a      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003856:	bf00      	nop
 8003858:	e018      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800385a:	bf00      	nop
 800385c:	e016      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800385e:	bf00      	nop
 8003860:	e014      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003862:	bf00      	nop
 8003864:	e012      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003866:	bf00      	nop
 8003868:	e010      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800386a:	bf00      	nop
 800386c:	e00e      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800386e:	bf00      	nop
 8003870:	e00c      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003872:	bf00      	nop
 8003874:	e00a      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003876:	bf00      	nop
 8003878:	e008      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800387a:	bf00      	nop
 800387c:	e006      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800387e:	bf00      	nop
 8003880:	e004      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003882:	bf00      	nop
 8003884:	e002      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <phyStaticConfig+0x238>
                goto end;
 800388a:	bf00      	nop
    return result;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	001e8c81 	.word	0x001e8c81
 800389c:	001e8c80 	.word	0x001e8c80
 80038a0:	001e881f 	.word	0x001e881f
 80038a4:	00018154 	.word	0x00018154
 80038a8:	001e8c40 	.word	0x001e8c40
 80038ac:	00018008 	.word	0x00018008
 80038b0:	00018009 	.word	0x00018009
 80038b4:	00018167 	.word	0x00018167
 80038b8:	00018168 	.word	0x00018168
 80038bc:	0001816b 	.word	0x0001816b
 80038c0:	000181bd 	.word	0x000181bd
 80038c4:	000181be 	.word	0x000181be
 80038c8:	000181c2 	.word	0x000181c2
 80038cc:	000181db 	.word	0x000181db
 80038d0:	000181e1 	.word	0x000181e1
 80038d4:	000181e7 	.word	0x000181e7
 80038d8:	000181eb 	.word	0x000181eb
 80038dc:	00018143 	.word	0x00018143
 80038e0:	001ea400 	.word	0x001ea400
 80038e4:	001ea407 	.word	0x001ea407

080038e8 <PHY_Reset>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_Reset(adi_phy_Device_t *hDevice, adi_phy_ResetType_e resetType)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80038f4:	2300      	movs	r3, #0
 80038f6:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <PHY_Reset+0x20>
    {
        result = ADI_ETH_IRQ_PENDING;
 8003902:	230b      	movs	r3, #11
 8003904:	73fb      	strb	r3, [r7, #15]
        goto end;
 8003906:	e01a      	b.n	800393e <PHY_Reset+0x56>
    }

    switch (resetType)
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d115      	bne.n	800393a <PHY_Reset+0x52>
    {
        case ADI_PHY_RESET_TYPE_SW:

            val16 = (1 << BITP_CRSM_SFT_RST_CRSM_SFT_RST);
 800390e:	2301      	movs	r3, #1
 8003910:	81bb      	strh	r3, [r7, #12]
            result = PHY_Write(hDevice, ADDR_CRSM_SFT_RST, val16);
 8003912:	89bb      	ldrh	r3, [r7, #12]
 8003914:	461a      	mov	r2, r3
 8003916:	490c      	ldr	r1, [pc, #48]	; (8003948 <PHY_Reset+0x60>)
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fa89 	bl	8003e30 <PHY_Write>
 800391e:	4603      	mov	r3, r0
 8003920:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <PHY_Reset+0x46>
            {
                result = ADI_ETH_COMM_ERROR;
 8003928:	2302      	movs	r3, #2
 800392a:	73fb      	strb	r3, [r7, #15]
            else
            {
                result = phyInit(hDevice);
            }

            break;
 800392c:	e007      	b.n	800393e <PHY_Reset+0x56>
                result = phyInit(hDevice);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fa96 	bl	8002e60 <phyInit>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]
            break;
 8003938:	e001      	b.n	800393e <PHY_Reset+0x56>

        default:
            result = ADI_ETH_UNSUPPORTED_FEATURE;
 800393a:	2322      	movs	r3, #34	; 0x22
 800393c:	73fb      	strb	r3, [r7, #15]
    }

end:
    return result;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	001e8810 	.word	0x001e8810

0800394c <PHY_SetLoopbackMode>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_SetLoopbackMode(adi_phy_Device_t *hDevice, adi_phy_LoopbackMode_e loopbackMode)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003958:	2300      	movs	r3, #0
 800395a:	73fb      	strb	r3, [r7, #15]
    uint16_t            valMacIfLoopback;
    uint16_t            valB10lPcsCntrl;
    uint16_t            valB10lPmaCntrl;
    bool                prevModePmaPcs = false;
 800395c:	2300      	movs	r3, #0
 800395e:	73bb      	strb	r3, [r7, #14]

    result = PHY_Read(hDevice, ADDR_MAC_IF_LOOPBACK, &valMacIfLoopback);
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	461a      	mov	r2, r3
 8003966:	4987      	ldr	r1, [pc, #540]	; (8003b84 <PHY_SetLoopbackMode+0x238>)
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fa86 	bl	8003e7a <PHY_Read>
 800396e:	4603      	mov	r3, r0
 8003970:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 80eb 	bne.w	8003b50 <PHY_SetLoopbackMode+0x204>
    {
        goto end;
    }
    /* Disable loopback */
    valMacIfLoopback &= ~((1 << BITP_MAC_IF_LOOPBACK_MAC_IF_LB_EN) | (1 << BITP_MAC_IF_LOOPBACK_MAC_IF_REM_LB_EN));
 800397a:	89bb      	ldrh	r3, [r7, #12]
 800397c:	f023 0305 	bic.w	r3, r3, #5
 8003980:	b29b      	uxth	r3, r3
 8003982:	81bb      	strh	r3, [r7, #12]

    result = PHY_Read(hDevice, ADDR_B10L_PCS_CNTRL, &valB10lPcsCntrl);
 8003984:	f107 030a 	add.w	r3, r7, #10
 8003988:	461a      	mov	r2, r3
 800398a:	497f      	ldr	r1, [pc, #508]	; (8003b88 <PHY_SetLoopbackMode+0x23c>)
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fa74 	bl	8003e7a <PHY_Read>
 8003992:	4603      	mov	r3, r0
 8003994:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f040 80db 	bne.w	8003b54 <PHY_SetLoopbackMode+0x208>
    {
        goto end;
    }
    if (valB10lPcsCntrl & BITM_B10L_PCS_CNTRL_B10L_LB_PCS_EN)
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <PHY_SetLoopbackMode+0x60>
    {
        prevModePmaPcs = true;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73bb      	strb	r3, [r7, #14]
    }
    /* Disable loopback */
    valB10lPcsCntrl &= ~(1 << BITP_B10L_PCS_CNTRL_B10L_LB_PCS_EN);
 80039ac:	897b      	ldrh	r3, [r7, #10]
 80039ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	817b      	strh	r3, [r7, #10]

    result = PHY_Read(hDevice, ADDR_B10L_PMA_CNTRL, &valB10lPmaCntrl);
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	461a      	mov	r2, r3
 80039bc:	4973      	ldr	r1, [pc, #460]	; (8003b8c <PHY_SetLoopbackMode+0x240>)
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa5b 	bl	8003e7a <PHY_Read>
 80039c4:	4603      	mov	r3, r0
 80039c6:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80c4 	bne.w	8003b58 <PHY_SetLoopbackMode+0x20c>
    {
        goto end;
    }
    if (valB10lPmaCntrl & BITM_B10L_PMA_CNTRL_B10L_LB_PMA_LOC_EN)
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <PHY_SetLoopbackMode+0x92>
    {
        prevModePmaPcs = true;
 80039da:	2301      	movs	r3, #1
 80039dc:	73bb      	strb	r3, [r7, #14]
    }
    /* Disable loopback */
    valB10lPmaCntrl &= ~(1 << BITP_B10L_PMA_CNTRL_B10L_LB_PMA_LOC_EN);
 80039de:	893b      	ldrh	r3, [r7, #8]
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	813b      	strh	r3, [r7, #8]

    if (prevModePmaPcs || (loopbackMode == ADI_PHY_LOOPBACK_PCS) || (loopbackMode == ADI_PHY_LOOPBACK_PMA))
 80039e8:	7bbb      	ldrb	r3, [r7, #14]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <PHY_SetLoopbackMode+0xae>
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <PHY_SetLoopbackMode+0xae>
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d13b      	bne.n	8003a72 <PHY_SetLoopbackMode+0x126>
    {
        result = PHY_EnterSoftwarePowerdown(hDevice);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fd96 	bl	800352c <PHY_EnterSoftwarePowerdown>
 8003a00:	4603      	mov	r3, r0
 8003a02:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 80a8 	bne.w	8003b5c <PHY_SetLoopbackMode+0x210>
        {
            goto end;
        }

        if ((loopbackMode == ADI_PHY_LOOPBACK_PCS) || (loopbackMode == ADI_PHY_LOOPBACK_PMA))
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d002      	beq.n	8003a18 <PHY_SetLoopbackMode+0xcc>
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d116      	bne.n	8003a46 <PHY_SetLoopbackMode+0xfa>
        {
            result = PHY_Write(hDevice, ADDR_AN_CONTROL, 0);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	495d      	ldr	r1, [pc, #372]	; (8003b90 <PHY_SetLoopbackMode+0x244>)
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fa07 	bl	8003e30 <PHY_Write>
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 8099 	bne.w	8003b60 <PHY_SetLoopbackMode+0x214>
            {
                goto end;
            }
            result = PHY_Write(hDevice, ADDR_AN_FRC_MODE_EN, 1);
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f44f 21f0 	mov.w	r1, #491520	; 0x78000
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f9fb 	bl	8003e30 <PHY_Write>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d016      	beq.n	8003a72 <PHY_SetLoopbackMode+0x126>
            {
                goto end;
 8003a44:	e099      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
            }
        }
        else
        {
            result = PHY_Write(hDevice, ADDR_AN_FRC_MODE_EN, 0);
 8003a46:	2200      	movs	r2, #0
 8003a48:	f44f 21f0 	mov.w	r1, #491520	; 0x78000
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f9ef 	bl	8003e30 <PHY_Write>
 8003a52:	4603      	mov	r3, r0
 8003a54:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f040 8083 	bne.w	8003b64 <PHY_SetLoopbackMode+0x218>
            {
                goto end;
            }
            result = PHY_Write(hDevice, ADDR_AN_CONTROL, 1);
 8003a5e:	2201      	movs	r2, #1
 8003a60:	494b      	ldr	r1, [pc, #300]	; (8003b90 <PHY_SetLoopbackMode+0x244>)
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9e4 	bl	8003e30 <PHY_Write>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d17a      	bne.n	8003b68 <PHY_SetLoopbackMode+0x21c>
            }
        }

    }

    switch (loopbackMode)
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	2b06      	cmp	r3, #6
 8003a76:	d835      	bhi.n	8003ae4 <PHY_SetLoopbackMode+0x198>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <PHY_SetLoopbackMode+0x134>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003aeb 	.word	0x08003aeb
 8003a84:	08003a9d 	.word	0x08003a9d
 8003a88:	08003aa9 	.word	0x08003aa9
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003ac1 	.word	0x08003ac1
 8003a94:	08003acd 	.word	0x08003acd
 8003a98:	08003ad9 	.word	0x08003ad9
    {
        case ADI_PHY_LOOPBACK_NONE:
            break;
        case ADI_PHY_LOOPBACK_PCS:
            valB10lPcsCntrl |= (1 << BITP_B10L_PCS_CNTRL_B10L_LB_PCS_EN);
 8003a9c:	897b      	ldrh	r3, [r7, #10]
 8003a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	817b      	strh	r3, [r7, #10]
            break;
 8003aa6:	e021      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        case ADI_PHY_LOOPBACK_PMA:
            valB10lPmaCntrl |= (1 << BITP_B10L_PMA_CNTRL_B10L_LB_PMA_LOC_EN);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	813b      	strh	r3, [r7, #8]
            break;
 8003ab2:	e01b      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        case ADI_PHY_LOOPBACK_MACIF:
            valMacIfLoopback |= (1 << BITP_MAC_IF_LOOPBACK_MAC_IF_LB_EN);
 8003ab4:	89bb      	ldrh	r3, [r7, #12]
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	81bb      	strh	r3, [r7, #12]
            break;
 8003abe:	e015      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        case ADI_PHY_LOOPBACK_MACIF_SUPPRESS_TX:
            valMacIfLoopback |= ((1 << BITP_MAC_IF_LOOPBACK_MAC_IF_LB_EN) | (1 << BITP_MAC_IF_LOOPBACK_MAC_IF_LB_TX_SUP_EN));
 8003ac0:	89bb      	ldrh	r3, [r7, #12]
 8003ac2:	f043 0303 	orr.w	r3, r3, #3
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	81bb      	strh	r3, [r7, #12]
            break;
 8003aca:	e00f      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        case ADI_PHY_LOOPBACK_MACIF_REMOTE:
            valMacIfLoopback |= (1 << BITP_MAC_IF_LOOPBACK_MAC_IF_REM_LB_EN);
 8003acc:	89bb      	ldrh	r3, [r7, #12]
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	81bb      	strh	r3, [r7, #12]
            break;
 8003ad6:	e009      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        case ADI_PHY_LOOPBACK_MACIF_REMOTE_SUPPRESS_RX:
            valMacIfLoopback |= ((1 << BITP_MAC_IF_LOOPBACK_MAC_IF_REM_LB_EN) | (1 << BITP_MAC_IF_LOOPBACK_MAC_IF_REM_LB_RX_SUP_EN));
 8003ad8:	89bb      	ldrh	r3, [r7, #12]
 8003ada:	f043 030c 	orr.w	r3, r3, #12
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	81bb      	strh	r3, [r7, #12]
            break;
 8003ae2:	e003      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        default:
            result = ADI_ETH_INVALID_PARAM;
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	73fb      	strb	r3, [r7, #15]
            goto end;
 8003ae8:	e047      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
            break;
 8003aea:	bf00      	nop

    }

    result = PHY_Write(hDevice, ADDR_MAC_IF_LOOPBACK, valMacIfLoopback);
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	461a      	mov	r2, r3
 8003af0:	4924      	ldr	r1, [pc, #144]	; (8003b84 <PHY_SetLoopbackMode+0x238>)
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f99c 	bl	8003e30 <PHY_Write>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d134      	bne.n	8003b6c <PHY_SetLoopbackMode+0x220>
    {
        goto end;
    }

    result = PHY_Write(hDevice, ADDR_B10L_PCS_CNTRL, valB10lPcsCntrl);
 8003b02:	897b      	ldrh	r3, [r7, #10]
 8003b04:	461a      	mov	r2, r3
 8003b06:	4920      	ldr	r1, [pc, #128]	; (8003b88 <PHY_SetLoopbackMode+0x23c>)
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f991 	bl	8003e30 <PHY_Write>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d12b      	bne.n	8003b70 <PHY_SetLoopbackMode+0x224>
    {
        goto end;
    }

    result = PHY_Write(hDevice, ADDR_B10L_PMA_CNTRL, valB10lPmaCntrl);
 8003b18:	893b      	ldrh	r3, [r7, #8]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	491b      	ldr	r1, [pc, #108]	; (8003b8c <PHY_SetLoopbackMode+0x240>)
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f986 	bl	8003e30 <PHY_Write>
 8003b24:	4603      	mov	r3, r0
 8003b26:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d122      	bne.n	8003b74 <PHY_SetLoopbackMode+0x228>
    {
        goto end;
    }

    if (prevModePmaPcs || (loopbackMode == ADI_PHY_LOOPBACK_PCS) || (loopbackMode == ADI_PHY_LOOPBACK_PMA))
 8003b2e:	7bbb      	ldrb	r3, [r7, #14]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <PHY_SetLoopbackMode+0x1f4>
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d002      	beq.n	8003b40 <PHY_SetLoopbackMode+0x1f4>
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d11b      	bne.n	8003b78 <PHY_SetLoopbackMode+0x22c>
    {
        result = PHY_ExitSoftwarePowerdown(hDevice);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fd00 	bl	8003546 <PHY_ExitSoftwarePowerdown>
 8003b46:	4603      	mov	r3, r0
 8003b48:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b00      	cmp	r3, #0
        {
            goto end;
        }
    }
end:
 8003b4e:	e013      	b.n	8003b78 <PHY_SetLoopbackMode+0x22c>
        goto end;
 8003b50:	bf00      	nop
 8003b52:	e012      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
        goto end;
 8003b54:	bf00      	nop
 8003b56:	e010      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
        goto end;
 8003b58:	bf00      	nop
 8003b5a:	e00e      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
            goto end;
 8003b5c:	bf00      	nop
 8003b5e:	e00c      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
                goto end;
 8003b60:	bf00      	nop
 8003b62:	e00a      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
                goto end;
 8003b64:	bf00      	nop
 8003b66:	e008      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
                goto end;
 8003b68:	bf00      	nop
 8003b6a:	e006      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
        goto end;
 8003b6c:	bf00      	nop
 8003b6e:	e004      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
        goto end;
 8003b70:	bf00      	nop
 8003b72:	e002      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
        goto end;
 8003b74:	bf00      	nop
 8003b76:	e000      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
end:
 8003b78:	bf00      	nop
    return result;
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	001f8055 	.word	0x001f8055
 8003b88:	000308e6 	.word	0x000308e6
 8003b8c:	000108f6 	.word	0x000108f6
 8003b90:	00070200 	.word	0x00070200

08003b94 <PHY_SetTestMode>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_SetTestMode(adi_phy_Device_t *hDevice, adi_phy_TestMode_e testMode)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]
    uint16_t            b10lPmaCntrl;
    uint16_t            testModeCntrl;

    if ((testMode != ADI_PHY_TEST_MODE_NONE) && (testMode != ADI_PHY_TEST_MODE_1) &&
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00e      	beq.n	8003bc8 <PHY_SetTestMode+0x34>
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d00b      	beq.n	8003bc8 <PHY_SetTestMode+0x34>
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d008      	beq.n	8003bc8 <PHY_SetTestMode+0x34>
        (testMode != ADI_PHY_TEST_MODE_2) && (testMode != ADI_PHY_TEST_MODE_3) &&
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d005      	beq.n	8003bc8 <PHY_SetTestMode+0x34>
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d002      	beq.n	8003bc8 <PHY_SetTestMode+0x34>
        (testMode != ADI_PHY_TEST_MODE_TX_DISABLE))
    {
        result = ADI_ETH_INVALID_PARAM;
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	73fb      	strb	r3, [r7, #15]
        goto end;
 8003bc6:	e09d      	b.n	8003d04 <PHY_SetTestMode+0x170>
    }

    result = PHY_EnterSoftwarePowerdown(hDevice);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fcaf 	bl	800352c <PHY_EnterSoftwarePowerdown>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f040 8086 	bne.w	8003ce6 <PHY_SetTestMode+0x152>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_B10L_PMA_CNTRL, &b10lPmaCntrl);
 8003bda:	f107 030a 	add.w	r3, r7, #10
 8003bde:	461a      	mov	r2, r3
 8003be0:	494b      	ldr	r1, [pc, #300]	; (8003d10 <PHY_SetTestMode+0x17c>)
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f949 	bl	8003e7a <PHY_Read>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d17b      	bne.n	8003cea <PHY_SetTestMode+0x156>
    {
        goto end;
    }

    /* For most test modes we want to disable the transmit disable mode */
    b10lPmaCntrl &= ~BITM_B10L_PMA_CNTRL_B10L_TX_DIS_MODE_EN;
 8003bf2:	897b      	ldrh	r3, [r7, #10]
 8003bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	817b      	strh	r3, [r7, #10]

    if (testMode == ADI_PHY_TEST_MODE_NONE)
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11f      	bne.n	8003c42 <PHY_SetTestMode+0xae>
    {
        /* No need for read-modify-write, register has only one bitfield */
        result = PHY_Write(hDevice, ADDR_B10L_TEST_MODE_CNTRL, ENUM_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE_IEEE_TX_TM_NONE);
 8003c02:	2200      	movs	r2, #0
 8003c04:	4943      	ldr	r1, [pc, #268]	; (8003d14 <PHY_SetTestMode+0x180>)
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f912 	bl	8003e30 <PHY_Write>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d16b      	bne.n	8003cee <PHY_SetTestMode+0x15a>
        {
            goto end;
        }

        result = PHY_Write(hDevice, ADDR_AN_FRC_MODE_EN, 0);
 8003c16:	2200      	movs	r2, #0
 8003c18:	f44f 21f0 	mov.w	r1, #491520	; 0x78000
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f907 	bl	8003e30 <PHY_Write>
 8003c22:	4603      	mov	r3, r0
 8003c24:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d162      	bne.n	8003cf2 <PHY_SetTestMode+0x15e>
        {
            goto end;
        }

        result = PHY_Write(hDevice, ADDR_AN_CONTROL, 1);
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	493a      	ldr	r1, [pc, #232]	; (8003d18 <PHY_SetTestMode+0x184>)
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8fd 	bl	8003e30 <PHY_Write>
 8003c36:	4603      	mov	r3, r0
 8003c38:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d03f      	beq.n	8003cc0 <PHY_SetTestMode+0x12c>
        {
            goto end;
 8003c40:	e060      	b.n	8003d04 <PHY_SetTestMode+0x170>
        }

    }
    else
    {
        result = PHY_Write(hDevice, ADDR_AN_CONTROL, 0);
 8003c42:	2200      	movs	r2, #0
 8003c44:	4934      	ldr	r1, [pc, #208]	; (8003d18 <PHY_SetTestMode+0x184>)
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8f2 	bl	8003e30 <PHY_Write>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d14f      	bne.n	8003cf6 <PHY_SetTestMode+0x162>
        {
            goto end;
        }

        result = PHY_Write(hDevice, ADDR_AN_FRC_MODE_EN, 1);
 8003c56:	2201      	movs	r2, #1
 8003c58:	f44f 21f0 	mov.w	r1, #491520	; 0x78000
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f8e7 	bl	8003e30 <PHY_Write>
 8003c62:	4603      	mov	r3, r0
 8003c64:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d146      	bne.n	8003cfa <PHY_SetTestMode+0x166>
        {
            goto end;
        }

        if (testMode == ADI_PHY_TEST_MODE_TX_DISABLE)
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d105      	bne.n	8003c7e <PHY_SetTestMode+0xea>
        {
            b10lPmaCntrl |= BITM_B10L_PMA_CNTRL_B10L_TX_DIS_MODE_EN;
 8003c72:	897b      	ldrh	r3, [r7, #10]
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	817b      	strh	r3, [r7, #10]
 8003c7c:	e020      	b.n	8003cc0 <PHY_SetTestMode+0x12c>
        }
        else
        {
            switch (testMode)
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d00e      	beq.n	8003ca2 <PHY_SetTestMode+0x10e>
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	dc10      	bgt.n	8003caa <PHY_SetTestMode+0x116>
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d002      	beq.n	8003c92 <PHY_SetTestMode+0xfe>
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d004      	beq.n	8003c9a <PHY_SetTestMode+0x106>
 8003c90:	e00b      	b.n	8003caa <PHY_SetTestMode+0x116>
            {
                case ADI_PHY_TEST_MODE_1:
                    testModeCntrl = (ENUM_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE_IEEE_TX_TM_JITTER << BITP_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE);
 8003c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c96:	81bb      	strh	r3, [r7, #12]
                    break;
 8003c98:	e007      	b.n	8003caa <PHY_SetTestMode+0x116>

                case ADI_PHY_TEST_MODE_2:
                    testModeCntrl = (ENUM_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE_IEEE_TX_TM_DROOP << BITP_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE);
 8003c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c9e:	81bb      	strh	r3, [r7, #12]
                    break;
 8003ca0:	e003      	b.n	8003caa <PHY_SetTestMode+0x116>

                case ADI_PHY_TEST_MODE_3:
                    testModeCntrl = (ENUM_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE_IEEE_TX_TM_IDLE << BITP_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE);
 8003ca2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003ca6:	81bb      	strh	r3, [r7, #12]
                    break;
 8003ca8:	bf00      	nop

            }

            /* No need for read-modify-write, register has only one bitfield */
            result = PHY_Write(hDevice, ADDR_B10L_TEST_MODE_CNTRL, testModeCntrl);
 8003caa:	89bb      	ldrh	r3, [r7, #12]
 8003cac:	461a      	mov	r2, r3
 8003cae:	4919      	ldr	r1, [pc, #100]	; (8003d14 <PHY_SetTestMode+0x180>)
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f8bd 	bl	8003e30 <PHY_Write>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d11e      	bne.n	8003cfe <PHY_SetTestMode+0x16a>
                goto end;
            }
        }
    }

    result = PHY_Write(hDevice, ADDR_B10L_PMA_CNTRL, b10lPmaCntrl);
 8003cc0:	897b      	ldrh	r3, [r7, #10]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4912      	ldr	r1, [pc, #72]	; (8003d10 <PHY_SetTestMode+0x17c>)
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f8b2 	bl	8003e30 <PHY_Write>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d115      	bne.n	8003d02 <PHY_SetTestMode+0x16e>
    {
        goto end;
    }

    result = PHY_ExitSoftwarePowerdown(hDevice);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fc35 	bl	8003546 <PHY_ExitSoftwarePowerdown>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 8003ce4:	e00e      	b.n	8003d04 <PHY_SetTestMode+0x170>
        goto end;
 8003ce6:	bf00      	nop
 8003ce8:	e00c      	b.n	8003d04 <PHY_SetTestMode+0x170>
        goto end;
 8003cea:	bf00      	nop
 8003cec:	e00a      	b.n	8003d04 <PHY_SetTestMode+0x170>
            goto end;
 8003cee:	bf00      	nop
 8003cf0:	e008      	b.n	8003d04 <PHY_SetTestMode+0x170>
            goto end;
 8003cf2:	bf00      	nop
 8003cf4:	e006      	b.n	8003d04 <PHY_SetTestMode+0x170>
            goto end;
 8003cf6:	bf00      	nop
 8003cf8:	e004      	b.n	8003d04 <PHY_SetTestMode+0x170>
            goto end;
 8003cfa:	bf00      	nop
 8003cfc:	e002      	b.n	8003d04 <PHY_SetTestMode+0x170>
                goto end;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <PHY_SetTestMode+0x170>
        goto end;
 8003d02:	bf00      	nop
    return result;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	000108f6 	.word	0x000108f6
 8003d14:	000108f8 	.word	0x000108f8
 8003d18:	00070200 	.word	0x00070200

08003d1c <PHY_LedEn>:
 * @details
 *
 * @sa
 */
static adi_eth_Result_e PHY_LedEn(adi_phy_Device_t *hDevice, adi_phy_LedPort_e ledSel, bool enable)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	70fb      	strb	r3, [r7, #3]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	70bb      	strb	r3, [r7, #2]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;
    uint16_t            bitval;

    bitval = (enable)? 1: 0;
 8003d30:	78bb      	ldrb	r3, [r7, #2]
 8003d32:	81bb      	strh	r3, [r7, #12]

    result = PHY_Read(hDevice, ADDR_LED_CNTRL, &val16);
 8003d34:	f107 030a 	add.w	r3, r7, #10
 8003d38:	461a      	mov	r2, r3
 8003d3a:	491a      	ldr	r1, [pc, #104]	; (8003da4 <PHY_LedEn+0x88>)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f89c 	bl	8003e7a <PHY_Read>
 8003d42:	4603      	mov	r3, r0
 8003d44:	73fb      	strb	r3, [r7, #15]

    if(ledSel == ADI_PHY_LED_0)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10d      	bne.n	8003d68 <PHY_LedEn+0x4c>
    {
      val16 &= ~BITM_LED_CNTRL_LED0_EN;
 8003d4c:	897b      	ldrh	r3, [r7, #10]
 8003d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	817b      	strh	r3, [r7, #10]
      val16 |= bitval << BITP_LED_CNTRL_LED0_EN;
 8003d56:	89bb      	ldrh	r3, [r7, #12]
 8003d58:	01db      	lsls	r3, r3, #7
 8003d5a:	b21a      	sxth	r2, r3
 8003d5c:	897b      	ldrh	r3, [r7, #10]
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b21b      	sxth	r3, r3
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	817b      	strh	r3, [r7, #10]
    }
    if(ledSel == ADI_PHY_LED_1)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10d      	bne.n	8003d8a <PHY_LedEn+0x6e>
    {
      val16 &= ~BITM_LED_CNTRL_LED1_EN;
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	817b      	strh	r3, [r7, #10]
      val16 |= bitval << BITP_LED_CNTRL_LED1_EN;
 8003d78:	89bb      	ldrh	r3, [r7, #12]
 8003d7a:	03db      	lsls	r3, r3, #15
 8003d7c:	b21a      	sxth	r2, r3
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	b21b      	sxth	r3, r3
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b21b      	sxth	r3, r3
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	817b      	strh	r3, [r7, #10]
    }
    result = PHY_Write(hDevice, ADDR_LED_CNTRL, val16);
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4905      	ldr	r1, [pc, #20]	; (8003da4 <PHY_LedEn+0x88>)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f84d 	bl	8003e30 <PHY_Write>
 8003d96:	4603      	mov	r3, r0
 8003d98:	73fb      	strb	r3, [r7, #15]

    return result;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	001e8c82 	.word	0x001e8c82

08003da8 <PHY_LedBlinkTime>:
 * @details
 *
 * @sa
 */
static adi_eth_Result_e PHY_LedBlinkTime(adi_phy_Device_t *hDevice, adi_phy_LedPort_e ledSel, uint32_t blinkOn, uint32_t blinkOff)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	460b      	mov	r3, r1
 8003db6:	72fb      	strb	r3, [r7, #11]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003db8:	2300      	movs	r3, #0
 8003dba:	75fb      	strb	r3, [r7, #23]

    uint16_t            val16;

    if ((blinkOn > 255) || (blinkOff > 255))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2bff      	cmp	r3, #255	; 0xff
 8003dc0:	d802      	bhi.n	8003dc8 <PHY_LedBlinkTime+0x20>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	d902      	bls.n	8003dce <PHY_LedBlinkTime+0x26>
    {
        result = ADI_ETH_INVALID_PARAM;
 8003dc8:	2308      	movs	r3, #8
 8003dca:	75fb      	strb	r3, [r7, #23]
        goto end;
 8003dcc:	e027      	b.n	8003e1e <PHY_LedBlinkTime+0x76>
    }

    if(ledSel == ADI_PHY_LED_0)
 8003dce:	7afb      	ldrb	r3, [r7, #11]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10f      	bne.n	8003df4 <PHY_LedBlinkTime+0x4c>
    {
      val16 = ((blinkOn << BITP_LED0_BLINK_TIME_CNTRL_LED0_ON_N4MS) | (blinkOff << BITP_LED0_BLINK_TIME_CNTRL_LED0_OFF_N4MS));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4313      	orrs	r3, r2
 8003de2:	82bb      	strh	r3, [r7, #20]
      /* Full register write, no need for read-modify-write. */
      result = PHY_Write(hDevice, ADDR_LED0_BLINK_TIME_CNTRL, val16);
 8003de4:	8abb      	ldrh	r3, [r7, #20]
 8003de6:	461a      	mov	r2, r3
 8003de8:	490f      	ldr	r1, [pc, #60]	; (8003e28 <PHY_LedBlinkTime+0x80>)
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f820 	bl	8003e30 <PHY_Write>
 8003df0:	4603      	mov	r3, r0
 8003df2:	75fb      	strb	r3, [r7, #23]
    }
    if(ledSel == ADI_PHY_LED_0)
 8003df4:	7afb      	ldrb	r3, [r7, #11]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d110      	bne.n	8003e1c <PHY_LedBlinkTime+0x74>
    {
      val16 = ((blinkOn << BITP_LED1_BLINK_TIME_CNTRL_LED1_ON_N4MS) | (blinkOff << BITP_LED1_BLINK_TIME_CNTRL_LED1_OFF_N4MS));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	4313      	orrs	r3, r2
 8003e08:	82bb      	strh	r3, [r7, #20]
      /* Full register write, no need for read-modify-write. */
      result = PHY_Write(hDevice, ADDR_LED1_BLINK_TIME_CNTRL, val16);
 8003e0a:	8abb      	ldrh	r3, [r7, #20]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4907      	ldr	r1, [pc, #28]	; (8003e2c <PHY_LedBlinkTime+0x84>)
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f80d 	bl	8003e30 <PHY_Write>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]
 8003e1a:	e000      	b.n	8003e1e <PHY_LedBlinkTime+0x76>
    }

end:
 8003e1c:	bf00      	nop
    return result;
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	001e8c80 	.word	0x001e8c80
 8003e2c:	001e8c81 	.word	0x001e8c81

08003e30 <PHY_Write>:
 * @param [out] data -  Data to write.
 *
 * @return 0 in case of success, positive error code otherwise.
*/
adi_eth_Result_e PHY_Write(adi_phy_Device_t *hDevice, uint32_t regAddr, uint16_t data)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	80fb      	strh	r3, [r7, #6]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	75fb      	strb	r3, [r7, #23]
    uint32_t            backup;

    backup = ADI_HAL_GET_ENABLE_IRQ(hDevice->adinDevice);
 8003e42:	f002 fc6b 	bl	800671c <HAL_GetEnableIrq>
 8003e46:	6138      	str	r0, [r7, #16]
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8003e48:	f002 fc5a 	bl	8006700 <HAL_DisableIrq>

    if (hDevice->writeFn(hDevice->phyAddr, regAddr, data) != ADI_HAL_SUCCESS)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	b2d0      	uxtb	r0, r2
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	4798      	blx	r3
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <PHY_Write+0x36>
    {
        result = ADI_ETH_COMM_ERROR;
 8003e62:	2302      	movs	r3, #2
 8003e64:	75fb      	strb	r3, [r7, #23]
    }

    if (backup)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <PHY_Write+0x40>
    {
        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8003e6c:	f002 fc4f 	bl	800670e <HAL_EnableIrq>
    }

    return result;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <PHY_Read>:
 * @param [out] data - Pointer to the data buffer.
 *
 * @return 0 in case of success, positive error code otherwise.
*/
adi_eth_Result_e PHY_Read(adi_phy_Device_t *hDevice, uint32_t regAddr, uint16_t *data)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b086      	sub	sp, #24
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003e86:	2300      	movs	r3, #0
 8003e88:	75fb      	strb	r3, [r7, #23]
    uint32_t            backup;

    backup = ADI_HAL_GET_ENABLE_IRQ(hDevice->adinDevice);
 8003e8a:	f002 fc47 	bl	800671c <HAL_GetEnableIrq>
 8003e8e:	6138      	str	r0, [r7, #16]
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8003e90:	f002 fc36 	bl	8006700 <HAL_DisableIrq>

    /* The only error returned by the HAL function is caused by 2nd TA bit */
    /* not being pulled low, which indicates the MDIO interface on the PHY */
    /* device is not operational.                                          */
    if (hDevice->readFn(hDevice->phyAddr, regAddr, data) != ADI_HAL_SUCCESS)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	b2d0      	uxtb	r0, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	4798      	blx	r3
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <PHY_Read+0x34>
    {
        result = ADI_ETH_COMM_ERROR;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if (backup)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <PHY_Read+0x3e>
    {
        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8003eb4:	f002 fc2b 	bl	800670e <HAL_EnableIrq>
    }

    return result;
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <PHY_GetMseLinkQuality>:

adi_eth_Result_e PHY_GetMseLinkQuality(adi_phy_Device_t *hDevice, adi_phy_MseLinkQuality_t *mseLinkQuality)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]

    result = PHY_Read(hDevice, ADDR_MSE_VAL, &mseLinkQuality->mseVal);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4920      	ldr	r1, [pc, #128]	; (8003f58 <PHY_GetMseLinkQuality+0x94>)
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ffce 	bl	8003e7a <PHY_Read>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d12f      	bne.n	8003f48 <PHY_GetMseLinkQuality+0x84>
    {
        goto end;
    }

    if (mseLinkQuality->mseVal > ADI_PHY_LINK_QUALITY_THR_POOR)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	f240 7266 	movw	r2, #1894	; 0x766
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d903      	bls.n	8003efc <PHY_GetMseLinkQuality+0x38>
    {
        mseLinkQuality->linkQuality = ADI_PHY_LINK_QUALITY_POOR;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	709a      	strb	r2, [r3, #2]
 8003efa:	e00c      	b.n	8003f16 <PHY_GetMseLinkQuality+0x52>
    }
    else
    {
        if (mseLinkQuality->mseVal > ADI_PHY_LINK_QUALITY_THR_MARGINAL)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d903      	bls.n	8003f10 <PHY_GetMseLinkQuality+0x4c>
        {
            mseLinkQuality->linkQuality = ADI_PHY_LINK_QUALITY_MARGINAL;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	709a      	strb	r2, [r3, #2]
 8003f0e:	e002      	b.n	8003f16 <PHY_GetMseLinkQuality+0x52>
        }
        else
        {
            mseLinkQuality->linkQuality = ADI_PHY_LINK_QUALITY_GOOD;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2202      	movs	r2, #2
 8003f14:	709a      	strb	r2, [r3, #2]
        }
    }

    for (mseLinkQuality->sqi = 0; mseLinkQuality->sqi < ADI_PHY_SQI_NUM_ENTRIES - 1; mseLinkQuality->sqi++)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	70da      	strb	r2, [r3, #3]
 8003f1c:	e00f      	b.n	8003f3e <PHY_GetMseLinkQuality+0x7a>
    {
        if (mseLinkQuality->mseVal > convMseToSqi[mseLinkQuality->sqi])
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	78db      	ldrb	r3, [r3, #3]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <PHY_GetMseLinkQuality+0x98>)
 8003f2a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d80c      	bhi.n	8003f4c <PHY_GetMseLinkQuality+0x88>
    for (mseLinkQuality->sqi = 0; mseLinkQuality->sqi < ADI_PHY_SQI_NUM_ENTRIES - 1; mseLinkQuality->sqi++)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	78db      	ldrb	r3, [r3, #3]
 8003f36:	3301      	adds	r3, #1
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	70da      	strb	r2, [r3, #3]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	78db      	ldrb	r3, [r3, #3]
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d9eb      	bls.n	8003f1e <PHY_GetMseLinkQuality+0x5a>
        {
            break;
        }
    }

end:
 8003f46:	e002      	b.n	8003f4e <PHY_GetMseLinkQuality+0x8a>
        goto end;
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <PHY_GetMseLinkQuality+0x8a>
            break;
 8003f4c:	bf00      	nop
    return result;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	0001830b 	.word	0x0001830b
 8003f5c:	0801bed8 	.word	0x0801bed8

08003f60 <PHY_FrameGenEn>:

adi_eth_Result_e PHY_FrameGenEn(adi_phy_Device_t *hDevice, bool enable)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]
    uint16_t            frameCntrl;

    if (enable)
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d012      	beq.n	8003f9c <PHY_FrameGenEn+0x3c>
    {
        /* Set frame counter to 0 */
        result = PHY_FrameGenSetFrameCnt(hDevice, 0);
 8003f76:	2100      	movs	r1, #0
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f861 	bl	8004040 <PHY_FrameGenSetFrameCnt>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d133      	bne.n	8003ff0 <PHY_FrameGenEn+0x90>
        {
            goto end;
        }

        /* Enable frame generator, single bitfield in the register */
        result = PHY_Write(hDevice, ADDR_FG_EN, (1 << BITP_FG_EN_FG_EN));
 8003f88:	2201      	movs	r2, #1
 8003f8a:	491f      	ldr	r1, [pc, #124]	; (8004008 <PHY_FrameGenEn+0xa8>)
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff4f 	bl	8003e30 <PHY_Write>
 8003f92:	4603      	mov	r3, r0
 8003f94:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	e030      	b.n	8003ffe <PHY_FrameGenEn+0x9e>
        }
    }
    else
    {
        /* Backup of the current value in frame control */
        result = PHY_Read(hDevice, ADDR_FG_CNTRL_RSTRT, &frameCntrl);
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	491a      	ldr	r1, [pc, #104]	; (800400c <PHY_FrameGenEn+0xac>)
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff68 	bl	8003e7a <PHY_Read>
 8003faa:	4603      	mov	r3, r0
 8003fac:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d11f      	bne.n	8003ff4 <PHY_FrameGenEn+0x94>
        {
            goto end;
        }

        /* Disable frame generation by setting frame control to NONE */
        result = PHY_FrameGenSetFramePayload(hDevice, ADI_PHY_FRAME_GEN_PAYLOAD_NONE);
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f86e 	bl	8004098 <PHY_FrameGenSetFramePayload>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d118      	bne.n	8003ff8 <PHY_FrameGenEn+0x98>
            result = PHY_FrameGenDone(hDevice, &fgDone);
        } while ((result != ADI_ETH_SUCCESS) || !fgDone);
#endif

        /* Disable frame generator and restore the frame control setting */
        result = PHY_Write(hDevice, ADDR_FG_EN, (0 << BITP_FG_EN_FG_EN));
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	490f      	ldr	r1, [pc, #60]	; (8004008 <PHY_FrameGenEn+0xa8>)
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ff30 	bl	8003e30 <PHY_Write>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d110      	bne.n	8003ffc <PHY_FrameGenEn+0x9c>
        {
            goto end;
        }

        result = PHY_Write(hDevice, ADDR_FG_CNTRL_RSTRT, frameCntrl);
 8003fda:	89bb      	ldrh	r3, [r7, #12]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	490b      	ldr	r1, [pc, #44]	; (800400c <PHY_FrameGenEn+0xac>)
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff ff25 	bl	8003e30 <PHY_Write>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
            goto end;
        }

    }

end:
 8003fee:	e006      	b.n	8003ffe <PHY_FrameGenEn+0x9e>
            goto end;
 8003ff0:	bf00      	nop
 8003ff2:	e004      	b.n	8003ffe <PHY_FrameGenEn+0x9e>
            goto end;
 8003ff4:	bf00      	nop
 8003ff6:	e002      	b.n	8003ffe <PHY_FrameGenEn+0x9e>
            goto end;
 8003ff8:	bf00      	nop
 8003ffa:	e000      	b.n	8003ffe <PHY_FrameGenEn+0x9e>
            goto end;
 8003ffc:	bf00      	nop
    return result;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	001f8020 	.word	0x001f8020
 800400c:	001f8021 	.word	0x001f8021

08004010 <PHY_FrameGenSetMode>:

adi_eth_Result_e PHY_FrameGenSetMode(adi_phy_Device_t *hDevice, adi_phy_FrameGenMode_e mode)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]

    result = PHY_Write(hDevice, ADDR_FG_CONT_MODE_EN, (mode << BITP_FG_CONT_MODE_EN_FG_CONT_MODE_EN));
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	b29b      	uxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	4905      	ldr	r1, [pc, #20]	; (800403c <PHY_FrameGenSetMode+0x2c>)
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff01 	bl	8003e30 <PHY_Write>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]

    return result;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	001f8022 	.word	0x001f8022

08004040 <PHY_FrameGenSetFrameCnt>:

adi_eth_Result_e PHY_FrameGenSetFrameCnt(adi_phy_Device_t *hDevice, uint32_t frameCnt)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    val16 = (frameCnt >> 16) & 0xFFFF;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_FG_NFRM_H, val16);
 8004054:	89bb      	ldrh	r3, [r7, #12]
 8004056:	461a      	mov	r2, r3
 8004058:	490d      	ldr	r1, [pc, #52]	; (8004090 <PHY_FrameGenSetFrameCnt+0x50>)
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fee8 	bl	8003e30 <PHY_Write>
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10c      	bne.n	8004084 <PHY_FrameGenSetFrameCnt+0x44>
    {
        goto end;
    }

    val16 = frameCnt & 0xFFFF;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_FG_NFRM_L, val16);
 800406e:	89bb      	ldrh	r3, [r7, #12]
 8004070:	461a      	mov	r2, r3
 8004072:	4908      	ldr	r1, [pc, #32]	; (8004094 <PHY_FrameGenSetFrameCnt+0x54>)
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fedb 	bl	8003e30 <PHY_Write>
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 8004082:	e000      	b.n	8004086 <PHY_FrameGenSetFrameCnt+0x46>
        goto end;
 8004084:	bf00      	nop
    return result;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	001f8027 	.word	0x001f8027
 8004094:	001f8028 	.word	0x001f8028

08004098 <PHY_FrameGenSetFramePayload>:

adi_eth_Result_e PHY_FrameGenSetFramePayload(adi_phy_Device_t *hDevice, adi_phy_FrameGenPayload_e payload)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    /* This includes setting FG_RSTRT=0 */
    val16 = 0x0000;
 80040a8:	2300      	movs	r3, #0
 80040aa:	81bb      	strh	r3, [r7, #12]
    val16 |= (payload << BITP_FG_CNTRL_RSTRT_FG_CNTRL);
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	89bb      	ldrh	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_FG_CNTRL_RSTRT, val16);
 80040b6:	89bb      	ldrh	r3, [r7, #12]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4907      	ldr	r1, [pc, #28]	; (80040d8 <PHY_FrameGenSetFramePayload+0x40>)
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff feb7 	bl	8003e30 <PHY_Write>
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 80040ca:	bf00      	nop
    return result;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	001f8021 	.word	0x001f8021

080040dc <PHY_FrameGenSetFrameLen>:

adi_eth_Result_e PHY_FrameGenSetFrameLen(adi_phy_Device_t *hDevice, uint16_t frameLen)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]

    result = PHY_Write(hDevice, ADDR_FG_FRM_LEN, (frameLen << BITP_FG_FRM_LEN_FG_FRM_LEN));
 80040ec:	887b      	ldrh	r3, [r7, #2]
 80040ee:	461a      	mov	r2, r3
 80040f0:	4905      	ldr	r1, [pc, #20]	; (8004108 <PHY_FrameGenSetFrameLen+0x2c>)
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fe9c 	bl	8003e30 <PHY_Write>
 80040f8:	4603      	mov	r3, r0
 80040fa:	73fb      	strb	r3, [r7, #15]

    return result;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	001f8025 	.word	0x001f8025

0800410c <PHY_FrameGenSetIfgLen>:

adi_eth_Result_e PHY_FrameGenSetIfgLen(adi_phy_Device_t *hDevice, uint16_t ifgLen)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004118:	2300      	movs	r3, #0
 800411a:	73fb      	strb	r3, [r7, #15]

    /* Single 16-bit bitfield */
    result = PHY_Write(hDevice, ADDR_FG_IFG_LEN, ifgLen);
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	461a      	mov	r2, r3
 8004120:	4905      	ldr	r1, [pc, #20]	; (8004138 <PHY_FrameGenSetIfgLen+0x2c>)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fe84 	bl	8003e30 <PHY_Write>
 8004128:	4603      	mov	r3, r0
 800412a:	73fb      	strb	r3, [r7, #15]

    return result;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	001f8026 	.word	0x001f8026

0800413c <PHY_FrameGenRestart>:

adi_eth_Result_e PHY_FrameGenRestart(adi_phy_Device_t *hDevice)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]
    uint16_t            frameCntrl;
    bool                fgDone;

    /* Before restart, clear FG_DONE explicitly in case it was set before and not cleared */
    /* Discard the read value, only use of the read is to clear FG_DONE */
    result = PHY_FrameGenDone(hDevice, &fgDone);
 8004148:	f107 030b 	add.w	r3, r7, #11
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f82c 	bl	80041ac <PHY_FrameGenDone>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11b      	bne.n	8004196 <PHY_FrameGenRestart+0x5a>
    {
        goto end;
    }
    (void)fgDone;

    result = PHY_Read(hDevice, ADDR_FG_CNTRL_RSTRT, &frameCntrl);
 800415e:	f107 030c 	add.w	r3, r7, #12
 8004162:	461a      	mov	r2, r3
 8004164:	4910      	ldr	r1, [pc, #64]	; (80041a8 <PHY_FrameGenRestart+0x6c>)
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fe87 	bl	8003e7a <PHY_Read>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d111      	bne.n	800419a <PHY_FrameGenRestart+0x5e>
    {
        goto end;
    }

    frameCntrl |= (1 << BITP_FG_CNTRL_RSTRT_FG_RSTRT);
 8004176:	89bb      	ldrh	r3, [r7, #12]
 8004178:	f043 0308 	orr.w	r3, r3, #8
 800417c:	b29b      	uxth	r3, r3
 800417e:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_FG_CNTRL_RSTRT, frameCntrl);
 8004180:	89bb      	ldrh	r3, [r7, #12]
 8004182:	461a      	mov	r2, r3
 8004184:	4908      	ldr	r1, [pc, #32]	; (80041a8 <PHY_FrameGenRestart+0x6c>)
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fe52 	bl	8003e30 <PHY_Write>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 8004194:	e002      	b.n	800419c <PHY_FrameGenRestart+0x60>
        goto end;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <PHY_FrameGenRestart+0x60>
        goto end;
 800419a:	bf00      	nop
    return result;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	001f8021 	.word	0x001f8021

080041ac <PHY_FrameGenDone>:

adi_eth_Result_e PHY_FrameGenDone(adi_phy_Device_t *hDevice, bool *fgDone)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    result = PHY_Read(hDevice, ADDR_FG_DONE, &val16);
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	461a      	mov	r2, r3
 80041c0:	490c      	ldr	r1, [pc, #48]	; (80041f4 <PHY_FrameGenDone+0x48>)
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fe59 	bl	8003e7a <PHY_Read>
 80041c8:	4603      	mov	r3, r0
 80041ca:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <PHY_FrameGenDone+0x3c>
    {
        goto end;
    }

    *fgDone = (BITM_FG_DONE_FG_DONE & val16);
 80041d2:	89bb      	ldrh	r3, [r7, #12]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	e000      	b.n	80041ea <PHY_FrameGenDone+0x3e>
        goto end;
 80041e8:	bf00      	nop

end:
    return result;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	001f8029 	.word	0x001f8029

080041f8 <PHY_FrameChkEn>:

adi_eth_Result_e PHY_FrameChkEn(adi_phy_Device_t *hDevice, bool enable)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004204:	2300      	movs	r3, #0
 8004206:	737b      	strb	r3, [r7, #13]
    uint16_t            val16;

    if (enable)
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <PHY_FrameChkEn+0x1c>
    {
        val16 = 1 << BITP_FC_EN_FC_EN;
 800420e:	2301      	movs	r3, #1
 8004210:	81fb      	strh	r3, [r7, #14]
 8004212:	e001      	b.n	8004218 <PHY_FrameChkEn+0x20>
    }
    else
    {
        val16 = 0 << BITP_FC_EN_FC_EN;
 8004214:	2300      	movs	r3, #0
 8004216:	81fb      	strh	r3, [r7, #14]
    }

    result = PHY_Write(hDevice, ADDR_FC_EN, val16);
 8004218:	89fb      	ldrh	r3, [r7, #14]
 800421a:	461a      	mov	r2, r3
 800421c:	4905      	ldr	r1, [pc, #20]	; (8004234 <PHY_FrameChkEn+0x3c>)
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe06 	bl	8003e30 <PHY_Write>
 8004224:	4603      	mov	r3, r0
 8004226:	737b      	strb	r3, [r7, #13]

    return result;
 8004228:	7b7b      	ldrb	r3, [r7, #13]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	001f8001 	.word	0x001f8001

08004238 <PHY_FrameChkSourceSelect>:

adi_eth_Result_e PHY_FrameChkSourceSelect(adi_phy_Device_t *hDevice, adi_phy_FrameChkSource_e source)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]

    result = PHY_Write(hDevice, ADDR_FC_TX_SEL, (source << BITP_FC_TX_SEL_FC_TX_SEL));
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	4905      	ldr	r1, [pc, #20]	; (8004264 <PHY_FrameChkSourceSelect+0x2c>)
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff fded 	bl	8003e30 <PHY_Write>
 8004256:	4603      	mov	r3, r0
 8004258:	73fb      	strb	r3, [r7, #15]

    return result;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	001f8005 	.word	0x001f8005

08004268 <PHY_FrameChkReadFrameCnt>:

adi_eth_Result_e PHY_FrameChkReadFrameCnt(adi_phy_Device_t *hDevice, uint32_t *cnt)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    result = PHY_Read(hDevice, ADDR_FC_FRM_CNT_H, &val16);
 8004276:	f107 030c 	add.w	r3, r7, #12
 800427a:	461a      	mov	r2, r3
 800427c:	4914      	ldr	r1, [pc, #80]	; (80042d0 <PHY_FrameChkReadFrameCnt+0x68>)
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fdfb 	bl	8003e7a <PHY_Read>
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d117      	bne.n	80042be <PHY_FrameChkReadFrameCnt+0x56>
    {
        goto end;
    }
    *cnt = (val16 << 16);
 800428e:	89bb      	ldrh	r3, [r7, #12]
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	461a      	mov	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	601a      	str	r2, [r3, #0]

    result = PHY_Read(hDevice, ADDR_FC_FRM_CNT_L, &val16);
 8004298:	f107 030c 	add.w	r3, r7, #12
 800429c:	461a      	mov	r2, r3
 800429e:	490d      	ldr	r1, [pc, #52]	; (80042d4 <PHY_FrameChkReadFrameCnt+0x6c>)
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff fdea 	bl	8003e7a <PHY_Read>
 80042a6:	4603      	mov	r3, r0
 80042a8:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d108      	bne.n	80042c2 <PHY_FrameChkReadFrameCnt+0x5a>
    {
        goto end;
    }
    *cnt |= val16;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	89ba      	ldrh	r2, [r7, #12]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e002      	b.n	80042c4 <PHY_FrameChkReadFrameCnt+0x5c>
        goto end;
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <PHY_FrameChkReadFrameCnt+0x5c>
        goto end;
 80042c2:	bf00      	nop

end:
    return result;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	001f8009 	.word	0x001f8009
 80042d4:	001f800a 	.word	0x001f800a

080042d8 <PHY_FrameChkReadRxErrCnt>:

adi_eth_Result_e PHY_FrameChkReadRxErrCnt(adi_phy_Device_t *hDevice, uint16_t *cnt)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]

    result = PHY_Read(hDevice, ADDR_RX_ERR_CNT, cnt);
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	4905      	ldr	r1, [pc, #20]	; (8004300 <PHY_FrameChkReadRxErrCnt+0x28>)
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff fdc5 	bl	8003e7a <PHY_Read>
 80042f0:	4603      	mov	r3, r0
 80042f2:	73fb      	strb	r3, [r7, #15]

    return result;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	001f8008 	.word	0x001f8008

08004304 <PHY_FrameChkReadErrorCnt>:

adi_eth_Result_e PHY_FrameChkReadErrorCnt(adi_phy_Device_t *hDevice, adi_phy_FrameChkErrorCounters_t *cnt)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]

    result = PHY_Read(hDevice, ADDR_FC_LEN_ERR_CNT, &cnt->LEN_ERR_CNT);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	4937      	ldr	r1, [pc, #220]	; (80043f4 <PHY_FrameChkReadErrorCnt+0xf0>)
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff fdae 	bl	8003e7a <PHY_Read>
 800431e:	4603      	mov	r3, r0
 8004320:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d153      	bne.n	80043d0 <PHY_FrameChkReadErrorCnt+0xcc>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_ALGN_ERR_CNT, &cnt->ALGN_ERR_CNT);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	3302      	adds	r3, #2
 800432c:	461a      	mov	r2, r3
 800432e:	4932      	ldr	r1, [pc, #200]	; (80043f8 <PHY_FrameChkReadErrorCnt+0xf4>)
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fda2 	bl	8003e7a <PHY_Read>
 8004336:	4603      	mov	r3, r0
 8004338:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d149      	bne.n	80043d4 <PHY_FrameChkReadErrorCnt+0xd0>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_SYMB_ERR_CNT, &cnt->SYMB_ERR_CNT);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	3304      	adds	r3, #4
 8004344:	461a      	mov	r2, r3
 8004346:	492d      	ldr	r1, [pc, #180]	; (80043fc <PHY_FrameChkReadErrorCnt+0xf8>)
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fd96 	bl	8003e7a <PHY_Read>
 800434e:	4603      	mov	r3, r0
 8004350:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d13f      	bne.n	80043d8 <PHY_FrameChkReadErrorCnt+0xd4>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_OSZ_CNT, &cnt->OSZ_CNT);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	3306      	adds	r3, #6
 800435c:	461a      	mov	r2, r3
 800435e:	4928      	ldr	r1, [pc, #160]	; (8004400 <PHY_FrameChkReadErrorCnt+0xfc>)
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff fd8a 	bl	8003e7a <PHY_Read>
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d135      	bne.n	80043dc <PHY_FrameChkReadErrorCnt+0xd8>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_USZ_CNT, &cnt->USZ_CNT);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	461a      	mov	r2, r3
 8004376:	4923      	ldr	r1, [pc, #140]	; (8004404 <PHY_FrameChkReadErrorCnt+0x100>)
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff fd7e 	bl	8003e7a <PHY_Read>
 800437e:	4603      	mov	r3, r0
 8004380:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d12b      	bne.n	80043e0 <PHY_FrameChkReadErrorCnt+0xdc>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_ODD_CNT, &cnt->ODD_CNT);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	330a      	adds	r3, #10
 800438c:	461a      	mov	r2, r3
 800438e:	491e      	ldr	r1, [pc, #120]	; (8004408 <PHY_FrameChkReadErrorCnt+0x104>)
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fd72 	bl	8003e7a <PHY_Read>
 8004396:	4603      	mov	r3, r0
 8004398:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d121      	bne.n	80043e4 <PHY_FrameChkReadErrorCnt+0xe0>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_ODD_PRE_CNT, &cnt->ODD_PRE_CNT);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	461a      	mov	r2, r3
 80043a6:	4919      	ldr	r1, [pc, #100]	; (800440c <PHY_FrameChkReadErrorCnt+0x108>)
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff fd66 	bl	8003e7a <PHY_Read>
 80043ae:	4603      	mov	r3, r0
 80043b0:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d117      	bne.n	80043e8 <PHY_FrameChkReadErrorCnt+0xe4>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_FALSE_CARRIER_CNT, &cnt->FALSE_CARRIER_CNT);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	330e      	adds	r3, #14
 80043bc:	461a      	mov	r2, r3
 80043be:	4914      	ldr	r1, [pc, #80]	; (8004410 <PHY_FrameChkReadErrorCnt+0x10c>)
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fd5a 	bl	8003e7a <PHY_Read>
 80043c6:	4603      	mov	r3, r0
 80043c8:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	2b00      	cmp	r3, #0
    {
        goto end;
    }
end:
 80043ce:	e00c      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043d0:	bf00      	nop
 80043d2:	e00a      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043d4:	bf00      	nop
 80043d6:	e008      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043d8:	bf00      	nop
 80043da:	e006      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043dc:	bf00      	nop
 80043de:	e004      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043e0:	bf00      	nop
 80043e2:	e002      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043e8:	bf00      	nop
    return result;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	001f800b 	.word	0x001f800b
 80043f8:	001f800c 	.word	0x001f800c
 80043fc:	001f800d 	.word	0x001f800d
 8004400:	001f800e 	.word	0x001f800e
 8004404:	001f800f 	.word	0x001f800f
 8004408:	001f8010 	.word	0x001f8010
 800440c:	001f8011 	.word	0x001f8011
 8004410:	001f8013 	.word	0x001f8013

08004414 <checkIdentity>:
 *                  return ADI_PHY_UNSUPPORTED_DEVID
 *
 * @sa
 */
static adi_eth_Result_e checkIdentity(adi_phy_Device_t *hDevice, uint32_t *modelNum, uint32_t *revNum)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004420:	2300      	movs	r3, #0
 8004422:	75fb      	strb	r3, [r7, #23]
    uint16_t            val16;

#if defined(MDIO_CL22)
    result = PHY_Read(hDevice, ADDR_MI_PHY_ID1, &val16);
#else
      result = PHY_Read(hDevice, ADDR_MMD1_DEV_ID1, &val16);
 8004424:	f107 0314 	add.w	r3, r7, #20
 8004428:	461a      	mov	r2, r3
 800442a:	491d      	ldr	r1, [pc, #116]	; (80044a0 <checkIdentity+0x8c>)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff fd24 	bl	8003e7a <PHY_Read>
 8004432:	4603      	mov	r3, r0
 8004434:	75fb      	strb	r3, [r7, #23]
#endif
    if (result != ADI_ETH_SUCCESS)
 8004436:	7dfb      	ldrb	r3, [r7, #23]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d128      	bne.n	800448e <checkIdentity+0x7a>
    {
        goto end;
    }
    if (val16 != ADI_PHY_DEVID1)
 800443c:	8abb      	ldrh	r3, [r7, #20]
 800443e:	f240 2283 	movw	r2, #643	; 0x283
 8004442:	4293      	cmp	r3, r2
 8004444:	d002      	beq.n	800444c <checkIdentity+0x38>
    {
        result = ADI_ETH_UNSUPPORTED_DEVICE;
 8004446:	2305      	movs	r3, #5
 8004448:	75fb      	strb	r3, [r7, #23]
        goto end;
 800444a:	e023      	b.n	8004494 <checkIdentity+0x80>
    }

#if defined(MDIO_CL22)
      result = PHY_Read(hDevice, ADDR_MI_PHY_ID2, &val16);
#else
      result = PHY_Read(hDevice, ADDR_MMD1_DEV_ID2, &val16);
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	461a      	mov	r2, r3
 8004452:	4914      	ldr	r1, [pc, #80]	; (80044a4 <checkIdentity+0x90>)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff fd10 	bl	8003e7a <PHY_Read>
 800445a:	4603      	mov	r3, r0
 800445c:	75fb      	strb	r3, [r7, #23]
#endif
    if (result != ADI_ETH_SUCCESS)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d116      	bne.n	8004492 <checkIdentity+0x7e>
    {
        goto end;
    }

    /* Check if the value of MMD1_DEV_ID2.OUI matches expected value */
    if ((val16 & BITM_MMD1_DEV_ID2_MMD1_DEV_ID2_OUI) != (ADI_PHY_DEVID2_OUI << BITP_MMD1_DEV_ID2_MMD1_DEV_ID2_OUI))
 8004464:	8abb      	ldrh	r3, [r7, #20]
 8004466:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800446a:	f5b3 4f3c 	cmp.w	r3, #48128	; 0xbc00
 800446e:	d002      	beq.n	8004476 <checkIdentity+0x62>
    {
        result = ADI_ETH_UNSUPPORTED_DEVICE;
 8004470:	2305      	movs	r3, #5
 8004472:	75fb      	strb	r3, [r7, #23]
        goto end;
 8004474:	e00e      	b.n	8004494 <checkIdentity+0x80>
    }

    *modelNum = (uint32_t)((val16 & BITM_MMD1_DEV_ID2_MMD1_MODEL_NUM) >> BITP_MMD1_DEV_ID2_MMD1_MODEL_NUM);
 8004476:	8abb      	ldrh	r3, [r7, #20]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	601a      	str	r2, [r3, #0]
    *revNum = (uint32_t)((val16 & BITM_MMD1_DEV_ID2_MMD1_REV_NUM) >> BITP_MMD1_DEV_ID2_MMD1_REV_NUM);
 8004482:	8abb      	ldrh	r3, [r7, #20]
 8004484:	f003 020f 	and.w	r2, r3, #15
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e002      	b.n	8004494 <checkIdentity+0x80>
        goto end;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <checkIdentity+0x80>
        goto end;
 8004492:	bf00      	nop

end:
    return result;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	001e0002 	.word	0x001e0002
 80044a4:	001e0003 	.word	0x001e0003

080044a8 <oaIrqHandler>:
 * @details         Called from the INT_N interrupt handler. Executes the OA state machine.
 *
 * @sa              oaStateMachine()
 */
void oaIrqHandler(adi_mac_Device_t *hDevice)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
    /* If SPI is busy, the interrupt is not required because all relevant info comes in the footer. */
    if (hDevice->spiState == ADI_MAC_SPI_STATE_READY)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <oaIrqHandler+0x22>
    {
        ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 80044ba:	f002 f921 	bl	8006700 <HAL_DisableIrq>
        hDevice->state = ADI_MAC_STATE_IRQ_START;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2209      	movs	r2, #9
 80044c2:	701a      	strb	r2, [r3, #0]

        oaStateMachine(hDevice);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f813 	bl	80044f0 <oaStateMachine>
    }
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <spiCallback>:
 *                  (if SPI uses DMA). Executes the OA state machine.
 *
 * @sa              oaStateMachine()
 */
void spiCallback(void *pCBParam, uint32_t Event, void *pArg)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
    adi_mac_Device_t        *hDevice = (adi_mac_Device_t *)pCBParam;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	617b      	str	r3, [r7, #20]

    oaStateMachine(hDevice);
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	f000 f804 	bl	80044f0 <oaStateMachine>
}
 80044e8:	bf00      	nop
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <oaStateMachine>:
 *
 * @details         Implements the OPEN Alliance SPI protocol.
 *
 */
adi_eth_Result_e oaStateMachine(adi_mac_Device_t *hDevice)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b0a9      	sub	sp, #164	; 0xa4
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e                result = ADI_ETH_SUCCESS;
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint32_t                        tail;
    uint32_t                        byteOffset;
    uint8_t                         *pRxBuf;
    volatile adi_mac_OaTxHeader_t   oaTxHeader;
    volatile adi_mac_OaRxFooter_t   oaRxFooter;
    uint32_t                        chunkSize = (1 << hDevice->oaCps);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8004504:	2201      	movs	r2, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t                        exst;
    uint32_t                        val32;
    uint32_t                        mem32;
    uint32_t                        expectedFcs = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	673b      	str	r3, [r7, #112]	; 0x70
    uint32_t                        cHdr;
    uint32_t                        eHdr;
    uint32_t                        Event = ADI_MAC_CALLBACK_STATUS_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t                         timestampBytes[8];
    static ADI_MAC_MDIOACC_0__t     mdioCmd;

    exst = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    switch (hDevice->state)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3b05      	subs	r3, #5
 8004524:	2b06      	cmp	r3, #6
 8004526:	f200 8705 	bhi.w	8005334 <oaStateMachine+0xe44>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <oaStateMachine+0x40>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	0800454d 	.word	0x0800454d
 8004534:	080045b3 	.word	0x080045b3
 8004538:	08004615 	.word	0x08004615
 800453c:	0800468f 	.word	0x0800468f
 8004540:	0800505d 	.word	0x0800505d
 8004544:	08005125 	.word	0x08005125
 8004548:	080051b7 	.word	0x080051b7
    {
        case ADI_MAC_STATE_CONTROL_START:

            len = hDevice->cnt;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c

            result = oaCtrlSetup(&hDevice->ctrlTxBuf[0], hDevice->wnr, hDevice->regAddr, hDevice->pRegData, &len);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
 800456c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	4623      	mov	r3, r4
 8004574:	f001 faa3 	bl	8005abe <oaCtrlSetup>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

            useDma = (len >= MIN_SIZE_FOR_DMA);
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	2b0f      	cmp	r3, #15
 8004582:	bf8c      	ite	hi
 8004584:	2301      	movhi	r3, #1
 8004586:	2300      	movls	r3, #0
 8004588:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            hDevice->state = ADI_MAC_STATE_CONTROL_END;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2206      	movs	r2, #6
 8004590:	701a      	strb	r2, [r3, #0]
            /* OA is full duplex, can chose either Rx or Tx */
            hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	705a      	strb	r2, [r3, #1]

            ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, &hDevice->ctrlTxBuf[0], &hDevice->ctrlRxBuf[0], len, useDma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80045a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045aa:	f002 f8cd 	bl	8006748 <HAL_SpiReadWrite>

            break;
 80045ae:	f000 becf 	b.w	8005350 <oaStateMachine+0xe60>

        case ADI_MAC_STATE_CONTROL_END:

            /* Check header vs. echoed header for errors */
            cHdr = *(uint32_t *)&hDevice->ctrlTxBuf[0];
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61fb      	str	r3, [r7, #28]
            eHdr = *(uint32_t *)&hDevice->ctrlRxBuf[ADI_SPI_HEADER_SIZE];
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	61bb      	str	r3, [r7, #24]

            if (cHdr != eHdr)
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d003      	beq.n	80045d6 <oaStateMachine+0xe6>
            {
                hDevice->spiErr = 1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	605a      	str	r2, [r3, #4]
 80045d4:	e016      	b.n	8004604 <oaStateMachine+0x114>
            }
            else
            {
                hDevice->spiErr = 0;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	605a      	str	r2, [r3, #4]
                if (hDevice->wnr == ADI_MAC_SPI_READ)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10e      	bne.n	8004604 <oaStateMachine+0x114>
                {
                    result = oaCtrlCmdReadData((uint32_t *)hDevice->pRegData, &hDevice->ctrlRxBuf[2 * ADI_SPI_HEADER_SIZE], hDevice->cnt);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 01a8 	ldr.w	r0, [r3, #424]	; 0x1a8
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80045f8:	461a      	mov	r2, r3
 80045fa:	f001 faee 	bl	8005bda <oaCtrlCmdReadData>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

                }
            }
            hDevice->spiState = ADI_MAC_SPI_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	705a      	strb	r2, [r3, #1]
            hDevice->state = ADI_MAC_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	701a      	strb	r2, [r3, #0]

            break;
 8004610:	f000 be9e 	b.w	8005350 <oaStateMachine+0xe60>

        case ADI_MAC_STATE_DATA_START:

            result = oaSpiProcess(hDevice);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f001 f831 	bl	800567c <oaSpiProcess>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

            if ((result == ADI_ETH_SUCCESS) && hDevice->oaTrxSize)
 8004620:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11e      	bne.n	8004666 <oaStateMachine+0x176>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800462e:	2b00      	cmp	r3, #0
 8004630:	d019      	beq.n	8004666 <oaStateMachine+0x176>
            {
                /* Determine if it's worth using DMA based on the transaction size. */
                useDma = (hDevice->oaTrxSize >= MIN_SIZE_FOR_DMA);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8004638:	2b0f      	cmp	r3, #15
 800463a:	bf8c      	ite	hi
 800463c:	2301      	movhi	r3, #1
 800463e:	2300      	movls	r3, #0
 8004640:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

                hDevice->state = ADI_MAC_STATE_DATA_END;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2208      	movs	r2, #8
 8004648:	701a      	strb	r2, [r3, #0]
                /* Rx/Tx are the same in OA SPI, reusing the state names from   */
                /* generic SPI. Different state names also help with debugging. */
                hDevice->spiState = ADI_MAC_SPI_STATE_TX_FRAME;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2204      	movs	r2, #4
 800464e:	705a      	strb	r2, [r3, #1]

                /* Platform dependent function*/
                ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, spiTxBuf, spiRxBuf, hDevice->oaTrxSize, useDma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8004656:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800465a:	4996      	ldr	r1, [pc, #600]	; (80048b4 <oaStateMachine+0x3c4>)
 800465c:	4896      	ldr	r0, [pc, #600]	; (80048b8 <oaStateMachine+0x3c8>)
 800465e:	f002 f873 	bl	8006748 <HAL_SpiReadWrite>
                {
                    ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
                }
            }

            break;
 8004662:	f000 be70 	b.w	8005346 <oaStateMachine+0xe56>
                hDevice->state = ADI_MAC_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	701a      	strb	r2, [r3, #0]
                hDevice->spiState = ADI_MAC_SPI_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	705a      	strb	r2, [r3, #1]
                if (!hDevice->pendingCtrl)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f083 0301 	eor.w	r3, r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8660 	beq.w	8005346 <oaStateMachine+0xe56>
                    ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8004686:	f002 f842 	bl	800670e <HAL_EnableIrq>
            break;
 800468a:	f000 be5c 	b.w	8005346 <oaStateMachine+0xe56>

        case ADI_MAC_STATE_DATA_END:

            for (uint32_t chunkStart = 0; chunkStart < hDevice->oaTrxSize; chunkStart += ADI_SPI_HEADER_SIZE + chunkSize)
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004694:	f000 bc51 	b.w	8004f3a <oaStateMachine+0xa4a>
            {
                oaRxFooter.VALUE32 = *(uint32_t *)&spiRxBuf[chunkStart + chunkSize];
 8004698:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800469c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800469e:	4413      	add	r3, r2
 80046a0:	4a84      	ldr	r2, [pc, #528]	; (80048b4 <oaStateMachine+0x3c4>)
 80046a2:	4413      	add	r3, r2
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
                oaRxFooter.VALUE32 = HTON32(oaRxFooter.VALUE32);
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 80046ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ae:	ba1b      	rev	r3, r3
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24

                if (oaRxFooter.VALUE32 == ADI_OA_HEADER_BAD)
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b8:	d108      	bne.n	80046cc <oaStateMachine+0x1dc>
                {
                    /* Parity error on transmitted header */
                    hDevice->oaErrorStats.hdrParityErrorCount++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 80046c8:	f000 bc30 	b.w	8004f2c <oaStateMachine+0xa3c>
                }
                else
                {
                    /* Ignore the chunk if the footer parity check fails. */
                    if (!MAC_CalculateParity((uint8_t *)&oaRxFooter.VALUE32, 4))
 80046cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d0:	2104      	movs	r1, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fb0a 	bl	8002cec <MAC_CalculateParity>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <oaStateMachine+0x200>
                    {
                        hDevice->oaErrorStats.ftrParityErrorCount++;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80046ec:	f000 bc1e 	b.w	8004f2c <oaStateMachine+0xa3c>
                    }
                    else
                    {
                        if (!oaRxFooter.SYNC)
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f3c3 7340 	ubfx	r3, r3, #29, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <oaStateMachine+0x21e>
                        {
                            hDevice->oaErrorStats.syncErrorCount++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800470a:	f000 bc0f 	b.w	8004f2c <oaStateMachine+0xa3c>
                        }
                        else
                        {
                            exst |= oaRxFooter.EXST;
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                            hDevice->oaTxc = oaRxFooter.TXC;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                            hDevice->oaRca = oaRxFooter.RCA;
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	f3c3 6304 	ubfx	r3, r3, #24, #5
 8004738:	b2db      	uxtb	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

                            if (oaRxFooter.DV && !hDevice->oaRxUseBackupBuf)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 83a8 	beq.w	8004ea0 <oaStateMachine+0x9b0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004756:	f083 0301 	eor.w	r3, r3, #1
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 839f 	beq.w	8004ea0 <oaStateMachine+0x9b0>
                            {
                                pRxBuf = hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->pBuf;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	66bb      	str	r3, [r7, #104]	; 0x68
                                byteOffset = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                if (hDevice->oaTimestampSplit)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8004784:	2b00      	cmp	r3, #0
 8004786:	d03c      	beq.n	8004802 <oaStateMachine+0x312>
                                {
                                    /* If the timestamp was split into two chunks, the remaining 32b will be at the start of this chunk. */
                                    hDevice->oaTimestampSplit = false;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
                                    memcpy(&mem32, &spiRxBuf[chunkStart], 4);
 8004790:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004794:	4a47      	ldr	r2, [pc, #284]	; (80048b4 <oaStateMachine+0x3c4>)
 8004796:	4413      	add	r3, r2
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	623b      	str	r3, [r7, #32]
                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestamp = HTON32(mem32);
 800479c:	6a3a      	ldr	r2, [r7, #32]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	440b      	add	r3, r1
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	647a      	str	r2, [r7, #68]	; 0x44
 80047b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b4:	ba12      	rev	r2, r2
 80047b6:	61da      	str	r2, [r3, #28]
                                    memcpy(&timestampBytes[0], &spiRxBuf[chunkStart], 4);
 80047b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047bc:	4a3d      	ldr	r2, [pc, #244]	; (80048b4 <oaStateMachine+0x3c4>)
 80047be:	4413      	add	r3, r2
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	613b      	str	r3, [r7, #16]
                                    byteOffset += 4;
 80047c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047c8:	3304      	adds	r3, #4
 80047ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                    /* MAC_CalculateParity returns 1 if timestampBytes has odd parity, and oaTimestampParity is 0 if timestampBytes has odd parity. */
                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampValid = (MAC_CalculateParity(timestampBytes, 8) != hDevice->oaTimestampParity);
 80047ce:	f107 0310 	add.w	r3, r7, #16
 80047d2:	2108      	movs	r1, #8
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fa89 	bl	8002cec <MAC_CalculateParity>
 80047da:	4603      	mov	r3, r0
 80047dc:	4618      	mov	r0, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	440b      	add	r3, r1
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4290      	cmp	r0, r2
 80047f8:	bf14      	ite	ne
 80047fa:	2201      	movne	r2, #1
 80047fc:	2200      	moveq	r2, #0
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	765a      	strb	r2, [r3, #25]
                                }

                                if (oaRxFooter.EV)
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80db 	beq.w	80049c6 <oaStateMachine+0x4d6>
                                {
                                    /* If FD = 1, frame needs to be dropped */
                                    if (oaRxFooter.FD)
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <oaStateMachine+0x344>
                                    {
                                        /* Reset the receive index to reuse current buffer for next frame */
                                        hDevice->oaRxCurBufByteOffset = 0;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

                                        hDevice->oaErrorStats.fdCount++;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8004832:	e0c8      	b.n	80049c6 <oaStateMachine+0x4d6>
                                    else
                                    {
                                        /* Special case: a full frame is sent in a single chunk, this can occur */
                                        /* when frame is 64 bytes (including FCS) and the chunk is 64 bytes.    */
                                        /* This case is handled by SV=1 case.                                   */
                                        uint32_t ebo = oaRxFooter.EBO;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	f3c3 2305 	ubfx	r3, r3, #8, #6
 800483a:	b2db      	uxtb	r3, r3
 800483c:	667b      	str	r3, [r7, #100]	; 0x64
                                        uint32_t sbo = oaRxFooter.SWO * 4;
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	f3c3 4303 	ubfx	r3, r3, #16, #4
 8004844:	b2db      	uxtb	r3, r3
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	663b      	str	r3, [r7, #96]	; 0x60
                                        if (!(oaRxFooter.SV && (ebo > sbo)))
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	f3c3 5300 	ubfx	r3, r3, #20, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <oaStateMachine+0x370>
 8004856:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800485a:	429a      	cmp	r2, r3
 800485c:	f200 80b3 	bhi.w	80049c6 <oaStateMachine+0x4d6>
                                        {
                                            if (hDevice->oaValidFlag != ADI_MAC_OA_VALID_FLAG_START)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8004866:	2b01      	cmp	r3, #1
 8004868:	d00b      	beq.n	8004882 <oaStateMachine+0x392>
                                            {
                                                /* No prior SV was received, this is an error */
                                                /* Reset the receive index to reuse current buffer for next frame */
                                                hDevice->oaRxCurBufByteOffset = 0;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

                                                hDevice->oaErrorStats.invalidEvCount++;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8004880:	e09d      	b.n	80049be <oaStateMachine+0x4ce>
                                            }
                                            else
                                            {
                                                if (hDevice->oaRxCurBufByteOffset + ebo + 1 > hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->bufSize)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488a:	4413      	add	r3, r2
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	440b      	add	r3, r1
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d90a      	bls.n	80048bc <oaStateMachine+0x3cc>
                                                {
                                                    /* Rx buffer too small for the incoming frame, notify the user. */
                                                    Event |= ADI_MAC_CALLBACK_STATUS_RX_BUF_OVF;
 80048a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048aa:	f043 0302 	orr.w	r3, r3, #2
 80048ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048b2:	e059      	b.n	8004968 <oaStateMachine+0x478>
 80048b4:	200001c0 	.word	0x200001c0
 80048b8:	20000990 	.word	0x20000990
                                                }
                                                else
                                                {
                                                    memcpy(&pRxBuf[hDevice->oaRxCurBufByteOffset], &spiRxBuf[chunkStart], ebo + 1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80048c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048c4:	18d0      	adds	r0, r2, r3
 80048c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048ca:	4a9e      	ldr	r2, [pc, #632]	; (8004b44 <oaStateMachine+0x654>)
 80048cc:	1899      	adds	r1, r3, r2
 80048ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d0:	3301      	adds	r3, #1
 80048d2:	461a      	mov	r2, r3
 80048d4:	f016 fa5f 	bl	801ad96 <memcpy>
                                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize = hDevice->oaRxCurBufByteOffset + ebo + 1;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80048de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e0:	441a      	add	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	440b      	add	r3, r1
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	3201      	adds	r2, #1
 80048f6:	609a      	str	r2, [r3, #8]

                                                    /* Adjust buffer size for FCS */
                                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize -= FCS_SIZE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4413      	add	r3, r2
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	3a04      	subs	r2, #4
 800490e:	609a      	str	r2, [r3, #8]

                                                    if (hDevice->fcsCheckEn)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d026      	beq.n	8004968 <oaStateMachine+0x478>
                                                    {
                                                        uint32_t actualFcs;
                                                        memcpy(&actualFcs, &pRxBuf[hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize], FCS_SIZE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4413      	add	r3, r2
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004930:	4413      	add	r3, r2
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
                                                        expectedFcs = ADI_HAL_FCS_CALCULATE(hDevice->adinDevice, pRxBuf,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4413      	add	r3, r2
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	4619      	mov	r1, r3
 800494c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800494e:	f001 fcb1 	bl	80062b4 <HAL_FcsCalculate>
 8004952:	6738      	str	r0, [r7, #112]	; 0x70
                                                                        hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize);
                                                        if (expectedFcs != actualFcs)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004958:	429a      	cmp	r2, r3
 800495a:	d005      	beq.n	8004968 <oaStateMachine+0x478>
                                                        {
                                                            Event |= ADI_MAC_CALLBACK_STATUS_FCS_ERROR;
 800495c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                                        }
                                                    }
                                                }
                                                tail = hDevice->pRxQueue->tail;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	65fb      	str	r3, [r7, #92]	; 0x5c
                                                queueRemove(hDevice->pRxQueue);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc fb00 	bl	8000f7a <queueRemove>
                                                if (hDevice->cbFunc[ADI_MAC_EVT_DYN_TBL_UPDATE] != NULL)
                                                {
                                                    hDevice->cbFunc[ADI_MAC_EVT_DYN_TBL_UPDATE](hDevice->adinDevice, Event, hDevice->pRxQueue->pEntries[tail].pBufDesc);
                                                }
    #endif
                                                if (hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4413      	add	r3, r2
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <oaStateMachine+0x4c6>
                                                {
                                                    hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc(hDevice->adinDevice, Event, hDevice->pRxQueue->pEntries[tail].pBufDesc);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80049a6:	6811      	ldr	r1, [r2, #0]
 80049a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049aa:	00d2      	lsls	r2, r2, #3
 80049ac:	440a      	add	r2, r1
 80049ae:	6852      	ldr	r2, [r2, #4]
 80049b0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80049b4:	4798      	blx	r3
                                                }

                                                hDevice->oaRxCurBufByteOffset = 0;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                                            }
                                            hDevice->oaValidFlag = ADI_MAC_OA_VALID_FLAG_END;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
                                        }
                                    }
                                }

                                if (oaRxFooter.SV)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	f3c3 5300 	ubfx	r3, r3, #20, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 81fa 	beq.w	8004dc8 <oaStateMachine+0x8d8>
                                {
                                    if ((hDevice->oaValidFlag != ADI_MAC_OA_VALID_FLAG_NONE) && (hDevice->oaValidFlag != ADI_MAC_OA_VALID_FLAG_END))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <oaStateMachine+0x506>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d006      	beq.n	80049f6 <oaStateMachine+0x506>
                                    {
                                        /* No prior EV was received, this is an error */
                                        hDevice->oaErrorStats.invalidSvCount++;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
                                    }

                                    uint32_t vs = oaRxFooter.VS;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	f3c3 5381 	ubfx	r3, r3, #22, #2
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	65bb      	str	r3, [r7, #88]	; 0x58
                                    adi_mac_RxFifoPrio_e prio = (adi_mac_RxFifoPrio_e)((vs & 0x2) >> 1);
 8004a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined(ADI_MAC_ENABLE_RX_QUEUE_HI_PRIO)
                                    if (prio == ADI_MAC_RX_FIFO_PRIO_LOW)
 8004a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <oaStateMachine+0x530>
                                    {
                                        hDevice->pRxQueue = &hDevice->rxQueueLp;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	67da      	str	r2, [r3, #124]	; 0x7c
 8004a1e:	e004      	b.n	8004a2a <oaStateMachine+0x53a>
                                    }
                                    else
                                    {
                                        hDevice->pRxQueue = &hDevice->rxQueueHp;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	67da      	str	r2, [r3, #124]	; 0x7c
                                    }
#endif
                        			if (queueIsEmpty(hDevice->pRxQueue) && !hDevice->oaRxUseBackupBuf)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc fa71 	bl	8000f16 <queueIsEmpty>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d017      	beq.n	8004a6a <oaStateMachine+0x57a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004a40:	f083 0301 	eor.w	r3, r3, #1
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00f      	beq.n	8004a6a <oaStateMachine+0x57a>
                                        /* queue. The alternative is to use a backup buffer while the Rx queue is empty */
                                        /* and switch back to parsing chunks from spiRxBuf when new buffers are added   */
                                        /* to the Rx queue. There are hooks for this in the code but the switching      */
                                        /* between oaRxBackupBuf and spiRxBuf is not implemented yet. Perhaps an option */
                                        /* to use one option or the other can be useful to serve different use cases.   */
			                            hDevice->oaRxUseBackupBuf = false;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
			                            hDevice->oaRxBufChunkStart = chunkStart;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a58:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
                                        hDevice->oaRxBufTrxSize = hDevice->oaTrxSize;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8004a68:	e21a      	b.n	8004ea0 <oaStateMachine+0x9b0>
			                        }
			                        else
			                        {
                        				hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->prio = prio;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004a80:	741a      	strb	r2, [r3, #16]
#if defined(ADIN2111)
                        				hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->port = vs & 0x1;
#endif
                        				pRxBuf = hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->pBuf;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4413      	add	r3, r2
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	66bb      	str	r3, [r7, #104]	; 0x68

                                        hDevice->oaRxCurBufByteOffset = 0;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                    					/* SWO is multiple of words */
                                        byteOffset = oaRxFooter.SWO * 4;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f3c3 4303 	ubfx	r3, r3, #16, #4
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                        if (oaRxFooter.RTSA)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80d5 	beq.w	8004c66 <oaStateMachine+0x776>
	                                    {
                                            /* Store the parity in case the timestamp is split across multiple chunks. */
                                            /* RTSP is only valid for the chunk in which RTSA is 1. */
                                            hDevice->oaTimestampParity = oaRxFooter.RTSP;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
                                            if (hDevice->timestampFormat == ADI_MAC_TS_FORMAT_64B_1588)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d17c      	bne.n	8004bd0 <oaStateMachine+0x6e0>
                                            {
                                                memcpy(&mem32, &spiRxBuf[chunkStart + byteOffset], 4);
 8004ad6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ade:	4413      	add	r3, r2
 8004ae0:	4a18      	ldr	r2, [pc, #96]	; (8004b44 <oaStateMachine+0x654>)
 8004ae2:	4413      	add	r3, r2
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	623b      	str	r3, [r7, #32]
                                                hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampExt = HTON32(mem32);
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	440b      	add	r3, r1
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	643a      	str	r2, [r7, #64]	; 0x40
 8004afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b00:	ba12      	rev	r2, r2
 8004b02:	621a      	str	r2, [r3, #32]
                                                memcpy(&timestampBytes[4], &spiRxBuf[chunkStart + byteOffset], 4);
 8004b04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4a0d      	ldr	r2, [pc, #52]	; (8004b44 <oaStateMachine+0x654>)
 8004b10:	4413      	add	r3, r2
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	617b      	str	r3, [r7, #20]
                                                byteOffset += 4;
 8004b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                                /* If there is not room in the chunk for the lower 32b of the timestamp, those bits will be in the next chunk. */
                                                if ((chunkStart + byteOffset + 4) > (chunkStart + chunkSize))
 8004b20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b28:	4413      	add	r3, r2
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8004b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b32:	440b      	add	r3, r1
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d907      	bls.n	8004b48 <oaStateMachine+0x658>
                                                {
                                                    hDevice->oaTimestampSplit = true;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 8004b40:	e09c      	b.n	8004c7c <oaStateMachine+0x78c>
 8004b42:	bf00      	nop
 8004b44:	200001c0 	.word	0x200001c0
                                                }
                                                else
                                                {
                                                    /* The lower 32b of the timestamp are in the same chunk. */
                                                    hDevice->oaTimestampSplit = false;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
                                                    memcpy(&mem32, &spiRxBuf[chunkStart + byteOffset], 4);
 8004b50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b58:	4413      	add	r3, r2
 8004b5a:	4a9a      	ldr	r2, [pc, #616]	; (8004dc4 <oaStateMachine+0x8d4>)
 8004b5c:	4413      	add	r3, r2
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	623b      	str	r3, [r7, #32]
                                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestamp = HTON32(mem32);
 8004b62:	6a3a      	ldr	r2, [r7, #32]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	440b      	add	r3, r1
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b7a:	ba12      	rev	r2, r2
 8004b7c:	61da      	str	r2, [r3, #28]
                                                    memcpy(&timestampBytes[0], &spiRxBuf[chunkStart + byteOffset], 4);
 8004b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b86:	4413      	add	r3, r2
 8004b88:	4a8e      	ldr	r2, [pc, #568]	; (8004dc4 <oaStateMachine+0x8d4>)
 8004b8a:	4413      	add	r3, r2
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	613b      	str	r3, [r7, #16]
                                                    byteOffset += 4;
 8004b90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b94:	3304      	adds	r3, #4
 8004b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                                    /* MAC_CalculateParity returns 1 if timestampBytes has odd parity, and oaTimestampParity is 0 if timestampBytes has odd parity. */
                                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampValid = (MAC_CalculateParity(timestampBytes, 8) != hDevice->oaTimestampParity);
 8004b9a:	f107 0310 	add.w	r3, r7, #16
 8004b9e:	2108      	movs	r1, #8
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe f8a3 	bl	8002cec <MAC_CalculateParity>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	440b      	add	r3, r1
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4290      	cmp	r0, r2
 8004bc4:	bf14      	ite	ne
 8004bc6:	2201      	movne	r2, #1
 8004bc8:	2200      	moveq	r2, #0
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	765a      	strb	r2, [r3, #25]
 8004bce:	e055      	b.n	8004c7c <oaStateMachine+0x78c>
                                                }
                                            }
                                            else
                                            {
                                                /* Start of the frame is at a multiple of 4 bytes, so a 32-bit timestamp will always be contained in the same chunk. */
                                                hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampExt = 0;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	621a      	str	r2, [r3, #32]
                                                memcpy(&mem32, &spiRxBuf[chunkStart + byteOffset], 4);
 8004be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bee:	4413      	add	r3, r2
 8004bf0:	4a74      	ldr	r2, [pc, #464]	; (8004dc4 <oaStateMachine+0x8d4>)
 8004bf2:	4413      	add	r3, r2
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	623b      	str	r3, [r7, #32]
                                                hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestamp = HTON32(mem32);
 8004bf8:	6a3a      	ldr	r2, [r7, #32]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfe:	6819      	ldr	r1, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	440b      	add	r3, r1
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c10:	ba12      	rev	r2, r2
 8004c12:	61da      	str	r2, [r3, #28]
                                                memcpy(&timestampBytes[0], &spiRxBuf[chunkStart + byteOffset], 4);
 8004c14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c1c:	4413      	add	r3, r2
 8004c1e:	4a69      	ldr	r2, [pc, #420]	; (8004dc4 <oaStateMachine+0x8d4>)
 8004c20:	4413      	add	r3, r2
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	613b      	str	r3, [r7, #16]
                                                byteOffset += 4;
 8004c26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                                /* MAC_CalculateParity returns 1 if timestampBytes has odd parity, and oaTimestampParity is 0 if timestampBytes has odd parity. */
                                                hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampValid = (MAC_CalculateParity(timestampBytes, 4) != hDevice->oaTimestampParity);
 8004c30:	f107 0310 	add.w	r3, r7, #16
 8004c34:	2104      	movs	r1, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe f858 	bl	8002cec <MAC_CalculateParity>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	440b      	add	r3, r1
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4290      	cmp	r0, r2
 8004c5a:	bf14      	ite	ne
 8004c5c:	2201      	movne	r2, #1
 8004c5e:	2200      	moveq	r2, #0
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	765a      	strb	r2, [r3, #25]
 8004c64:	e00a      	b.n	8004c7c <oaStateMachine+0x78c>
                                            }
	                                    }
	                                    else
	                                    {
	                                        hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampValid = false;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	765a      	strb	r2, [r3, #25]
	                                    }

	                                    if (chunkSize - byteOffset)
 8004c7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d019      	beq.n	8004cba <oaStateMachine+0x7ca>
	                                    {
	                                        /* Rx buffer minimum size is greater than the maximum chunk size, no buffer overflow. */
	                                        memcpy(&pRxBuf[0], &spiRxBuf[chunkStart + byteOffset], chunkSize - byteOffset);
 8004c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c8e:	4413      	add	r3, r2
 8004c90:	4a4c      	ldr	r2, [pc, #304]	; (8004dc4 <oaStateMachine+0x8d4>)
 8004c92:	1899      	adds	r1, r3, r2
 8004c94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004ca0:	f016 f879 	bl	801ad96 <memcpy>
	                                        hDevice->oaRxCurBufByteOffset += chunkSize - byteOffset;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004caa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004cac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cb0:	1acb      	subs	r3, r1, r3
 8004cb2:	441a      	add	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	                                    }

                                        /* Special case: full frame inside a single chunk. */
                                        uint32_t ebo = oaRxFooter.EBO;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	f3c3 2305 	ubfx	r3, r3, #8, #6
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	653b      	str	r3, [r7, #80]	; 0x50
                                        uint32_t sbo = oaRxFooter.SWO * 4;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	f3c3 4303 	ubfx	r3, r3, #16, #4
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	64fb      	str	r3, [r7, #76]	; 0x4c
                                        if (oaRxFooter.EV && (ebo > sbo))
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d06d      	beq.n	8004db8 <oaStateMachine+0x8c8>
 8004cdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d969      	bls.n	8004db8 <oaStateMachine+0x8c8>
                                        {
                                            hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize = ebo + 1 - sbo - FCS_SIZE;
 8004ce4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	1ad2      	subs	r2, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cee:	6819      	ldr	r1, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	440b      	add	r3, r1
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	3a03      	subs	r2, #3
 8004cfe:	609a      	str	r2, [r3, #8]

                                            if (hDevice->fcsCheckEn)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d026      	beq.n	8004d58 <oaStateMachine+0x868>
                                            {
                                                uint32_t actualFcs;
                                                memcpy(&actualFcs, &pRxBuf[hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize], FCS_SIZE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d20:	4413      	add	r3, r2
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60bb      	str	r3, [r7, #8]
                                                expectedFcs = ADI_HAL_FCS_CALCULATE(hDevice->adinDevice, pRxBuf,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004d3e:	f001 fab9 	bl	80062b4 <HAL_FcsCalculate>
 8004d42:	6738      	str	r0, [r7, #112]	; 0x70
                                                                hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize);

                                                if (expectedFcs != actualFcs)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d005      	beq.n	8004d58 <oaStateMachine+0x868>
                                                {
                                                    Event |= ADI_MAC_CALLBACK_STATUS_FCS_ERROR;
 8004d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                                }
                                            }
                                            tail = hDevice->pRxQueue->tail;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
                                            queueRemove(hDevice->pRxQueue);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fc f908 	bl	8000f7a <queueRemove>
                                            if (hDevice->cbFunc[ADI_MAC_EVT_DYN_TBL_UPDATE] != NULL)
                                            {
                                                hDevice->cbFunc[ADI_MAC_EVT_DYN_TBL_UPDATE](hDevice->adinDevice, Event, hDevice->pRxQueue->pEntries[tail].pBufDesc);
                                            }
#endif
                                            if (hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4413      	add	r3, r2
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d013      	beq.n	8004da6 <oaStateMachine+0x8b6>
                                            {
                                                hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc(hDevice->adinDevice, Event, hDevice->pRxQueue->pEntries[tail].pBufDesc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4413      	add	r3, r2
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004d96:	6811      	ldr	r1, [r2, #0]
 8004d98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d9a:	00d2      	lsls	r2, r2, #3
 8004d9c:	440a      	add	r2, r1
 8004d9e:	6852      	ldr	r2, [r2, #4]
 8004da0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004da4:	4798      	blx	r3
                                            }

                                            hDevice->oaRxCurBufByteOffset = 0;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

                                            hDevice->oaValidFlag = ADI_MAC_OA_VALID_FLAG_END;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8004db6:	e073      	b.n	8004ea0 <oaStateMachine+0x9b0>
                                        }
                                        else
                                        {
                                            hDevice->oaValidFlag = ADI_MAC_OA_VALID_FLAG_START;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8004dc0:	e06e      	b.n	8004ea0 <oaStateMachine+0x9b0>
 8004dc2:	bf00      	nop
 8004dc4:	200001c0 	.word	0x200001c0
                                        }
                                    }
                                }
                                else
                                {
                                    if (!oaRxFooter.EV && (hDevice->oaValidFlag == ADI_MAC_OA_VALID_FLAG_START))
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d165      	bne.n	8004ea0 <oaStateMachine+0x9b0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d160      	bne.n	8004ea0 <oaStateMachine+0x9b0>
                                    {
                                        if (hDevice->oaRxCurBufByteOffset + chunkSize > hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->bufSize)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de6:	441a      	add	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dec:	6819      	ldr	r1, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	440b      	add	r3, r1
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d931      	bls.n	8004e64 <oaStateMachine+0x974>
                                        {
                                            /* Rx buffer too small for the incoming frame, notify the user. */
                                            /* At this point the current frame reception finishes and callback is executed. */
                                            Event |= ADI_MAC_CALLBACK_STATUS_RX_BUF_OVF;
 8004e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e04:	f043 0302 	orr.w	r3, r3, #2
 8004e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                            tail = hDevice->pRxQueue->tail;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	65fb      	str	r3, [r7, #92]	; 0x5c
                                            queueRemove(hDevice->pRxQueue);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fc f8ae 	bl	8000f7a <queueRemove>

                                            if (hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d013      	beq.n	8004e5a <oaStateMachine+0x96a>
                                            {
                                                hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc(hDevice->adinDevice, Event, hDevice->pRxQueue->pEntries[tail].pBufDesc);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004e4a:	6811      	ldr	r1, [r2, #0]
 8004e4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e4e:	00d2      	lsls	r2, r2, #3
 8004e50:	440a      	add	r2, r1
 8004e52:	6852      	ldr	r2, [r2, #4]
 8004e54:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004e58:	4798      	blx	r3
                                            }

                                            hDevice->oaRxCurBufByteOffset = 0;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8004e62:	e01d      	b.n	8004ea0 <oaStateMachine+0x9b0>
                                        }
                                        else
                                        {
                                            memcpy(&pRxBuf[hDevice->oaRxCurBufByteOffset], &spiRxBuf[chunkStart + byteOffset], chunkSize - byteOffset);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004e6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e6c:	18d0      	adds	r0, r2, r3
 8004e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e76:	4413      	add	r3, r2
 8004e78:	4aa8      	ldr	r2, [pc, #672]	; (800511c <oaStateMachine+0xc2c>)
 8004e7a:	1899      	adds	r1, r3, r2
 8004e7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	f015 ff86 	bl	801ad96 <memcpy>
                                            hDevice->oaRxCurBufByteOffset += chunkSize - byteOffset;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004e90:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e96:	1acb      	subs	r3, r1, r3
 8004e98:	441a      	add	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                                        }
                                    }
                                }
                            }

                            memcpy((void *)&oaTxHeader.VALUE32, &spiTxBuf[chunkStart], 4);
 8004ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea4:	4a9e      	ldr	r2, [pc, #632]	; (8005120 <oaStateMachine+0xc30>)
 8004ea6:	4413      	add	r3, r2
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
                            oaTxHeader.VALUE32 = HTON32(oaTxHeader.VALUE32);
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb2:	ba1b      	rev	r3, r3
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28

                            if (oaTxHeader.EV)
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d034      	beq.n	8004f2c <oaStateMachine+0xa3c>
                            {
                                tail = hDevice->txQueue.tail;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
                                queueRemove(&hDevice->txQueue);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	336c      	adds	r3, #108	; 0x6c
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fc f854 	bl	8000f7a <queueRemove>

                                /* Decrement the reference count, and call the callback function only if the reference  */
                                /* count is 0. This ensures that if the intent was to send the buffer to both ports, it */
                                /* will be returned to the buffer pool only after sending to both ports has completed.  */
                                hDevice->txQueue.pEntries[tail].pBufDesc->refCount--;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee0:	3a01      	subs	r2, #1
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24
                                if (hDevice->txQueue.pEntries[tail].pBufDesc->cbFunc && (!hDevice->txQueue.pEntries[tail].pBufDesc->refCount))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01a      	beq.n	8004f2c <oaStateMachine+0xa3c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4413      	add	r3, r2
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d111      	bne.n	8004f2c <oaStateMachine+0xa3c>
                                {
                                    hDevice->txQueue.pEntries[tail].pBufDesc->cbFunc(hDevice->adinDevice, Event, hDevice->txQueue.pEntries[tail].pBufDesc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 8004f1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f20:	00d2      	lsls	r2, r2, #3
 8004f22:	440a      	add	r2, r1
 8004f24:	6852      	ldr	r2, [r2, #4]
 8004f26:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004f2a:	4798      	blx	r3
            for (uint32_t chunkStart = 0; chunkStart < hDevice->oaTrxSize; chunkStart += ADI_SPI_HEADER_SIZE + chunkSize)
 8004f2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f32:	4413      	add	r3, r2
 8004f34:	3304      	adds	r3, #4
 8004f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8004f40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f44:	429a      	cmp	r2, r3
 8004f46:	f4ff aba7 	bcc.w	8004698 <oaStateMachine+0x1a8>
                            }
                        }
                    }
                }
            }
            if (exst || !oaRxFooter.SYNC)
 8004f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <oaStateMachine+0xa6e>
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d12b      	bne.n	8004fb6 <oaStateMachine+0xac6>
            {

                /* Read status registers */
                len = 2;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c

                result = oaCtrlSetup(&hDevice->ctrlTxBuf[0], ADI_MAC_SPI_READ, ADDR_MAC_STATUS0, hDevice->pRegData, &len);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8004f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	2208      	movs	r2, #8
 8004f78:	2100      	movs	r1, #0
 8004f7a:	f000 fda0 	bl	8005abe <oaCtrlSetup>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

                useDma = (len >= MIN_SIZE_FOR_DMA);
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	bf8c      	ite	hi
 8004f8a:	2301      	movhi	r3, #1
 8004f8c:	2300      	movls	r3, #0
 8004f8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                hDevice->state = ADI_MAC_STATE_DATA_READ_STATUS;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	220a      	movs	r2, #10
 8004f96:	701a      	strb	r2, [r3, #0]
                /* Rx/Tx are the same in OA SPI, reusing the state names from   */
                /* generic SPI. Different state names also help with debugging. */
                hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	705a      	strb	r2, [r3, #1]

                ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, &hDevice->ctrlTxBuf[0], &hDevice->ctrlRxBuf[0], len, useDma);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004fb0:	f001 fbca 	bl	8006748 <HAL_SpiReadWrite>
 8004fb4:	e051      	b.n	800505a <oaStateMachine+0xb6a>
            }
            else
            {
                if ((!queueIsEmpty(&hDevice->txQueue) && hDevice->oaTxc) || (!queueIsEmpty(hDevice->pRxQueue) && hDevice->oaRca))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	336c      	adds	r3, #108	; 0x6c
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fb ffab 	bl	8000f16 <queueIsEmpty>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f083 0301 	eor.w	r3, r3, #1
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d004      	beq.n	8004fd6 <oaStateMachine+0xae6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <oaStateMachine+0xb06>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb ff9b 	bl	8000f16 <queueIsEmpty>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f083 0301 	eor.w	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d023      	beq.n	8005034 <oaStateMachine+0xb44>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01e      	beq.n	8005034 <oaStateMachine+0xb44>
                {
                    result = oaSpiProcess(hDevice);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fb40 	bl	800567c <oaSpiProcess>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

                    /* Determine if it's worth using DMA based on the transaction size. */
                    useDma = (hDevice->oaTrxSize >= MIN_SIZE_FOR_DMA);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005008:	2b0f      	cmp	r3, #15
 800500a:	bf8c      	ite	hi
 800500c:	2301      	movhi	r3, #1
 800500e:	2300      	movls	r3, #0
 8005010:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

                    hDevice->state = ADI_MAC_STATE_DATA_END;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2208      	movs	r2, #8
 8005018:	701a      	strb	r2, [r3, #0]
                    /* Rx/Tx are the same in OA SPI, reusing the state names from   */
                    /* generic SPI. Different state names also help with debugging. */
                    hDevice->spiState = ADI_MAC_SPI_STATE_RX_FRAME;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	705a      	strb	r2, [r3, #1]

                    /* Platform dependent function*/
                    ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, spiTxBuf, spiRxBuf, hDevice->oaTrxSize, useDma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8005026:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800502a:	493c      	ldr	r1, [pc, #240]	; (800511c <oaStateMachine+0xc2c>)
 800502c:	483c      	ldr	r0, [pc, #240]	; (8005120 <oaStateMachine+0xc30>)
 800502e:	f001 fb8b 	bl	8006748 <HAL_SpiReadWrite>
 8005032:	e012      	b.n	800505a <oaStateMachine+0xb6a>

                }
                else
                {
                    hDevice->state = ADI_MAC_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	701a      	strb	r2, [r3, #0]
                    hDevice->spiState = ADI_MAC_SPI_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	705a      	strb	r2, [r3, #1]

                    if (!hDevice->pendingCtrl)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f083 0301 	eor.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 817b 	beq.w	800534a <oaStateMachine+0xe5a>
                    {
                        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8005054:	f001 fb5b 	bl	800670e <HAL_EnableIrq>
                    }
                }
            }

            break;
 8005058:	e177      	b.n	800534a <oaStateMachine+0xe5a>
 800505a:	e176      	b.n	800534a <oaStateMachine+0xe5a>

        case ADI_MAC_STATE_IRQ_START:
            /* Single data chunk is response to an IRQ */
            oaTxHeader.VALUE32 = 0x00000000;
 800505c:	2300      	movs	r3, #0
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
            oaTxHeader.DNC = 1;
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
            oaTxHeader.NORX = 1;
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
            oaTxHeader.P = 1;
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28
            val32 = oaTxHeader.VALUE32 >> 1;
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            for (uint32_t i = 0; i < 31; i++)
 8005080:	2300      	movs	r3, #0
 8005082:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005084:	e01b      	b.n	80050be <oaStateMachine+0xbce>
            {
                oaTxHeader.P = oaTxHeader.P ^ (val32 & 0x1);
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	4053      	eors	r3, r2
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	f362 0300 	bfi	r3, r2, #0, #1
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
                val32 >>= 1;
 80050ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            for (uint32_t i = 0; i < 31; i++)
 80050b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ba:	3301      	adds	r3, #1
 80050bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c0:	2b1e      	cmp	r3, #30
 80050c2:	d9e0      	bls.n	8005086 <oaStateMachine+0xb96>
            }

            mem32 = HTON32(oaTxHeader.VALUE32);
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	ba1b      	rev	r3, r3
 80050cc:	623b      	str	r3, [r7, #32]
 80050ce:	6a3b      	ldr	r3, [r7, #32]
            memcpy(&spiTxBuf[0], &mem32, 4);
 80050d0:	4a13      	ldr	r2, [pc, #76]	; (8005120 <oaStateMachine+0xc30>)
 80050d2:	6013      	str	r3, [r2, #0]

            hDevice->oaTrxSize = ADI_SPI_HEADER_SIZE + (1 << hDevice->oaCps);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80050da:	2201      	movs	r2, #1
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	3304      	adds	r3, #4
 80050e2:	461a      	mov	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

            /* Determine if it's worth using DMA based on the transaction size. */
            useDma = (hDevice->oaTrxSize >= MIN_SIZE_FOR_DMA);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80050f0:	2b0f      	cmp	r3, #15
 80050f2:	bf8c      	ite	hi
 80050f4:	2301      	movhi	r3, #1
 80050f6:	2300      	movls	r3, #0
 80050f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

            hDevice->state = ADI_MAC_STATE_DATA_END;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2208      	movs	r2, #8
 8005100:	701a      	strb	r2, [r3, #0]
            /* Rx/Tx are the same in OA SPI, reusing the state names from   */
            /* generic SPI. Different state names also help with debugging. */
            hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	705a      	strb	r2, [r3, #1]

            /* Platform dependent function*/
            ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, spiTxBuf, spiRxBuf, hDevice->oaTrxSize, useDma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800510e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005112:	4902      	ldr	r1, [pc, #8]	; (800511c <oaStateMachine+0xc2c>)
 8005114:	4802      	ldr	r0, [pc, #8]	; (8005120 <oaStateMachine+0xc30>)
 8005116:	f001 fb17 	bl	8006748 <HAL_SpiReadWrite>

            break;
 800511a:	e119      	b.n	8005350 <oaStateMachine+0xe60>
 800511c:	200001c0 	.word	0x200001c0
 8005120:	20000990 	.word	0x20000990

        case ADI_MAC_STATE_DATA_READ_STATUS:

            result = oaCtrlCmdReadData((uint32_t *)&hDevice->statusRegisters.status0, &hDevice->ctrlRxBuf[2 * ADI_SPI_HEADER_SIZE], 2);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8005130:	2202      	movs	r2, #2
 8005132:	4619      	mov	r1, r3
 8005134:	f000 fd51 	bl	8005bda <oaCtrlCmdReadData>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

            hDevice->statusRegisters.status0Masked = hDevice->statusRegisters.status0 & ~hDevice->irqMask0;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	43db      	mvns	r3, r3
 800514a:	401a      	ands	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            hDevice->statusRegisters.status1Masked = hDevice->statusRegisters.status1 & ~hDevice->irqMask1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	43db      	mvns	r3, r3
 800515e:	401a      	ands	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            hDevice->statusRegisters.p1StatusMasked = ADI_MAC_PHY_STATUS_INIT_VAL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f06f 2280 	mvn.w	r2, #2147516416	; 0x80008000
 800516c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            hDevice->statusRegisters.p1Status = ADI_MAC_PHY_STATUS_INIT_VAL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f06f 2280 	mvn.w	r2, #2147516416	; 0x80008000
 8005176:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

#if defined(ADIN2111)
            if ((hDevice->statusRegisters.status0Masked & BITM_MAC_STATUS0_PHYINT) || (hDevice->statusRegisters.status1Masked & BITM_MAC_STATUS1_P2_PHYINT))
#else
            if (hDevice->statusRegisters.status0Masked & BITM_MAC_STATUS0_PHYINT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d012      	beq.n	80051ae <oaStateMachine+0xcbe>
#endif
            {
                /* Read PHY interrupt status registers */
                /* PHY register reads are as implemented in MAC_PhyRead(). */
                uint32_t prtad;
                if (hDevice->statusRegisters.status0Masked & BITM_MAC_STATUS0_PHYINT)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <oaStateMachine+0xcac>
                {
                    prtad = 1;
 8005196:	2301      	movs	r3, #1
 8005198:	67bb      	str	r3, [r7, #120]	; 0x78
 800519a:	e001      	b.n	80051a0 <oaStateMachine+0xcb0>
                }
                else
                {
                    prtad = 2;
 800519c:	2302      	movs	r3, #2
 800519e:	67bb      	str	r3, [r7, #120]	; 0x78
                }
                oaPhyRegReadStart(hDevice, &mdioCmd, prtad, ADDR_CRSM_IRQ_STATUS);
 80051a0:	4b6e      	ldr	r3, [pc, #440]	; (800535c <oaStateMachine+0xe6c>)
 80051a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051a4:	496e      	ldr	r1, [pc, #440]	; (8005360 <oaStateMachine+0xe70>)
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f8e0 	bl	800536c <oaPhyRegReadStart>
            else
            {
                oaSpiIntHandle(hDevice);
            }

            break;
 80051ac:	e0d0      	b.n	8005350 <oaStateMachine+0xe60>
                oaSpiIntHandle(hDevice);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f9a5 	bl	80054fe <oaSpiIntHandle>
            break;
 80051b4:	e0cc      	b.n	8005350 <oaStateMachine+0xe60>

        case ADI_MAC_STATE_DATA_READ_PHY_REGISTER:

            /* Check header vs. echoed header for errors */
            memcpy(&cHdr, &hDevice->ctrlTxBuf[0], 4);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	61fb      	str	r3, [r7, #28]
            memcpy(&eHdr, &hDevice->ctrlRxBuf[ADI_SPI_HEADER_SIZE], 4);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	61bb      	str	r3, [r7, #24]

            if (cHdr != eHdr)
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d006      	beq.n	80051e0 <oaStateMachine+0xcf0>
            {
                hDevice->spiErr = 1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	605a      	str	r2, [r3, #4]
                oaSpiIntHandle(hDevice);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f990 	bl	80054fe <oaSpiIntHandle>

                    }
                }
            }

            break;
 80051de:	e0b6      	b.n	800534e <oaStateMachine+0xe5e>
                hDevice->spiErr = 0;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	605a      	str	r2, [r3, #4]
                if (hDevice->regAddr == ADDR_MAC_MDIOACC_0_)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d108      	bne.n	8005202 <oaStateMachine+0xd12>
                    hDevice->wnr = ADI_MAC_SPI_WRITE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
                    oaPhyRegReadStep(hDevice, &mdioCmd);
 80051f8:	4959      	ldr	r1, [pc, #356]	; (8005360 <oaStateMachine+0xe70>)
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f929 	bl	8005452 <oaPhyRegReadStep>
            break;
 8005200:	e0a5      	b.n	800534e <oaStateMachine+0xe5e>
                    if (hDevice->wnr == ADI_MAC_SPI_WRITE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005208:	2b01      	cmp	r3, #1
 800520a:	d108      	bne.n	800521e <oaStateMachine+0xd2e>
                        hDevice->wnr = ADI_MAC_SPI_READ;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
                        oaPhyRegReadStep(hDevice, &mdioCmd);
 8005214:	4952      	ldr	r1, [pc, #328]	; (8005360 <oaStateMachine+0xe70>)
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f91b 	bl	8005452 <oaPhyRegReadStep>
            break;
 800521c:	e097      	b.n	800534e <oaStateMachine+0xe5e>
                        result = oaCtrlCmdReadData((uint32_t *)hDevice->pRegData, &hDevice->ctrlRxBuf[2 * ADI_SPI_HEADER_SIZE], hDevice->cnt);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 01a8 	ldr.w	r0, [r3, #424]	; 0x1a8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005230:	461a      	mov	r2, r3
 8005232:	f000 fcd2 	bl	8005bda <oaCtrlCmdReadData>
 8005236:	4603      	mov	r3, r0
 8005238:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                        if (*hDevice->pRegData & BITM_MAC_MDIOACC_N__MDIO_TRDONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	da6c      	bge.n	8005322 <oaStateMachine+0xe32>
                            if ((hDevice->statusRegisters.status0Masked & BITM_MAC_STATUS0_PHYINT) &&
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800524e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d07b      	beq.n	800534e <oaStateMachine+0xe5e>
                                ((hDevice->statusRegisters.p1Status & 0xFFFF0000) == (ADI_MAC_PHY_STATUS_INIT_VAL & 0xFFFF0000)))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	041b      	lsls	r3, r3, #16
                            if ((hDevice->statusRegisters.status0Masked & BITM_MAC_STATUS0_PHYINT) &&
 8005260:	4a40      	ldr	r2, [pc, #256]	; (8005364 <oaStateMachine+0xe74>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d173      	bne.n	800534e <oaStateMachine+0xe5e>
                                if ((hDevice->statusRegisters.p1StatusMasked & 0x0000FFFF) == (ADI_MAC_PHY_STATUS_INIT_VAL & 0x0000FFFF))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800526c:	b29b      	uxth	r3, r3
 800526e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005272:	4293      	cmp	r3, r2
 8005274:	d131      	bne.n	80052da <oaStateMachine+0xdea>
                                    hDevice->statusRegisters.p1Status &= 0xFFFF0000;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
                                    hDevice->statusRegisters.p1Status |= (*hDevice->pRegData & 0x0000FFFF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                    hDevice->statusRegisters.p1StatusMasked &= 0xFFFF0000;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80052a4:	0c1b      	lsrs	r3, r3, #16
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
                                    hDevice->statusRegisters.p1StatusMasked |= (hDevice->statusRegisters.p1Status & hDevice->phyIrqMask & 0x0000FFFF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80052c0:	400b      	ands	r3, r1
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                                    oaPhyRegReadStart(hDevice, &mdioCmd, 1, ADDR_PHY_SUBSYS_IRQ_STATUS);
 80052cc:	4b26      	ldr	r3, [pc, #152]	; (8005368 <oaStateMachine+0xe78>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	4923      	ldr	r1, [pc, #140]	; (8005360 <oaStateMachine+0xe70>)
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f84a 	bl	800536c <oaPhyRegReadStart>
            break;
 80052d8:	e039      	b.n	800534e <oaStateMachine+0xe5e>
                                    hDevice->statusRegisters.p1Status &= 0x0000FFFF;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                    hDevice->statusRegisters.p1Status |= ((*hDevice->pRegData << 16) & 0xFFFF0000);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                    hDevice->statusRegisters.p1StatusMasked &= 0x0000FFFF;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005306:	b29a      	uxth	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                                    hDevice->statusRegisters.p1StatusMasked |= ((hDevice->statusRegisters.p1Status & hDevice->phyIrqMask & 0xFFFF0000) << 16);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                                    oaSpiIntHandle(hDevice);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f8ef 	bl	80054fe <oaSpiIntHandle>
            break;
 8005320:	e015      	b.n	800534e <oaStateMachine+0xe5e>
                            hDevice->wnr = ADI_MAC_SPI_READ;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
                            oaPhyRegReadStep(hDevice, &mdioCmd);
 800532a:	490d      	ldr	r1, [pc, #52]	; (8005360 <oaStateMachine+0xe70>)
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f890 	bl	8005452 <oaPhyRegReadStep>
            break;
 8005332:	e00c      	b.n	800534e <oaStateMachine+0xe5e>

        default:
            hDevice->state = ADI_MAC_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	701a      	strb	r2, [r3, #0]
            hDevice->spiState = ADI_MAC_SPI_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	705a      	strb	r2, [r3, #1]

            ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8005340:	f001 f9e5 	bl	800670e <HAL_EnableIrq>
            break;
 8005344:	e004      	b.n	8005350 <oaStateMachine+0xe60>
            break;
 8005346:	bf00      	nop
 8005348:	e002      	b.n	8005350 <oaStateMachine+0xe60>
            break;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <oaStateMachine+0xe60>
            break;
 800534e:	bf00      	nop
    }

    return result;
 8005350:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8005354:	4618      	mov	r0, r3
 8005356:	379c      	adds	r7, #156	; 0x9c
 8005358:	46bd      	mov	sp, r7
 800535a:	bd90      	pop	{r4, r7, pc}
 800535c:	001e0010 	.word	0x001e0010
 8005360:	20001160 	.word	0x20001160
 8005364:	7fff0000 	.word	0x7fff0000
 8005368:	001f0011 	.word	0x001f0011

0800536c <oaPhyRegReadStart>:

adi_eth_Result_e oaPhyRegReadStart(adi_mac_Device_t *hDevice, ADI_MAC_MDIOACC_0__t *mdioCmd, uint32_t prtad, uint32_t regAddr)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
    adi_eth_Result_e        result;
    uint32_t                len;
    bool                    useDma;

    mdioCmd->VALUE32 = 0;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
    mdioCmd->MDIO_DEVAD = DEVTYPE(regAddr);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	0c1b      	lsrs	r3, r3, #16
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	b2d9      	uxtb	r1, r3
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	7893      	ldrb	r3, [r2, #2]
 800538e:	f361 0304 	bfi	r3, r1, #0, #5
 8005392:	7093      	strb	r3, [r2, #2]
    mdioCmd->MDIO_ST = ENUM_MAC_MDIOACC_N__MDIO_ST_CLAUSE45;
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	78d3      	ldrb	r3, [r2, #3]
 8005398:	f36f 1305 	bfc	r3, #4, #2
 800539c:	70d3      	strb	r3, [r2, #3]
    mdioCmd->MDIO_PRTAD = prtad;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	b2d9      	uxtb	r1, r3
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	8853      	ldrh	r3, [r2, #2]
 80053aa:	f361 1349 	bfi	r3, r1, #5, #5
 80053ae:	8053      	strh	r3, [r2, #2]
    mdioCmd->MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_ADDR;
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	78d3      	ldrb	r3, [r2, #3]
 80053b4:	f36f 0383 	bfc	r3, #2, #2
 80053b8:	70d3      	strb	r3, [r2, #3]
    mdioCmd->MDIO_DATA = REGADDR(regAddr);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	801a      	strh	r2, [r3, #0]

    hDevice->wnr = ADI_MAC_SPI_WRITE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    hDevice->regAddr = ADDR_MAC_MDIOACC_0_;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hDevice->pRegData = &mdioCmd->VALUE32;
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    hDevice->cnt = 1;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

    len = hDevice->cnt;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80053e8:	613b      	str	r3, [r7, #16]
    result = oaCtrlSetup(&hDevice->ctrlTxBuf[0], hDevice->wnr, hDevice->regAddr, hDevice->pRegData, &len);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
 8005402:	f107 0310 	add.w	r3, r7, #16
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	4623      	mov	r3, r4
 800540a:	f000 fb58 	bl	8005abe <oaCtrlSetup>
 800540e:	4603      	mov	r3, r0
 8005410:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8005412:	7dfb      	ldrb	r3, [r7, #23]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d116      	bne.n	8005446 <oaPhyRegReadStart+0xda>
    {
        goto end;
    }

    useDma = (len >= MIN_SIZE_FOR_DMA);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b0f      	cmp	r3, #15
 800541c:	bf8c      	ite	hi
 800541e:	2301      	movhi	r3, #1
 8005420:	2300      	movls	r3, #0
 8005422:	75bb      	strb	r3, [r7, #22]
    hDevice->state = ADI_MAC_STATE_DATA_READ_PHY_REGISTER;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	220b      	movs	r2, #11
 8005428:	701a      	strb	r2, [r3, #0]
    /* Rx/Tx are the same in OA SPI, reusing the state names from   */
    /* generic SPI. Different state names also help with debugging. */
    hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	705a      	strb	r2, [r3, #1]

    ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, &hDevice->ctrlTxBuf[0], &hDevice->ctrlRxBuf[0], len, useDma);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	7dbb      	ldrb	r3, [r7, #22]
 8005440:	f001 f982 	bl	8006748 <HAL_SpiReadWrite>
 8005444:	e000      	b.n	8005448 <oaPhyRegReadStart+0xdc>
        goto end;
 8005446:	bf00      	nop

end:
    return result;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
}
 800544a:	4618      	mov	r0, r3
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	bd90      	pop	{r4, r7, pc}

08005452 <oaPhyRegReadStep>:

adi_eth_Result_e oaPhyRegReadStep(adi_mac_Device_t *hDevice, ADI_MAC_MDIOACC_0__t *mdioCmd)
{
 8005452:	b590      	push	{r4, r7, lr}
 8005454:	b087      	sub	sp, #28
 8005456:	af02      	add	r7, sp, #8
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e        result;
    uint32_t                len;
    bool                    useDma;

    mdioCmd->MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_RD;
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	78d3      	ldrb	r3, [r2, #3]
 8005460:	f043 030c 	orr.w	r3, r3, #12
 8005464:	70d3      	strb	r3, [r2, #3]
    mdioCmd->MDIO_DATA = 0;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2200      	movs	r2, #0
 800546a:	801a      	strh	r2, [r3, #0]
    mdioCmd->MDIO_TRDONE = 0;
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	78d3      	ldrb	r3, [r2, #3]
 8005470:	f36f 13c7 	bfc	r3, #7, #1
 8005474:	70d3      	strb	r3, [r2, #3]

    hDevice->regAddr = ADDR_MAC_MDIOACC_1_;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2221      	movs	r2, #33	; 0x21
 800547a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hDevice->pRegData = &mdioCmd->VALUE32;
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    hDevice->cnt = 1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

    len = hDevice->cnt;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005494:	60bb      	str	r3, [r7, #8]
    result = oaCtrlSetup(&hDevice->ctrlTxBuf[0], hDevice->wnr, hDevice->regAddr, hDevice->pRegData, &len);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
 80054ae:	f107 0308 	add.w	r3, r7, #8
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	4623      	mov	r3, r4
 80054b6:	f000 fb02 	bl	8005abe <oaCtrlSetup>
 80054ba:	4603      	mov	r3, r0
 80054bc:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d116      	bne.n	80054f2 <oaPhyRegReadStep+0xa0>
    {
        goto end;
    }

    useDma = (len >= MIN_SIZE_FOR_DMA);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	bf8c      	ite	hi
 80054ca:	2301      	movhi	r3, #1
 80054cc:	2300      	movls	r3, #0
 80054ce:	73bb      	strb	r3, [r7, #14]
    hDevice->state = ADI_MAC_STATE_DATA_READ_PHY_REGISTER;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	220b      	movs	r2, #11
 80054d4:	701a      	strb	r2, [r3, #0]
    /* Rx/Tx are the same in OA SPI, reusing the state names from   */
    /* generic SPI. Different state names also help with debugging. */
    hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	705a      	strb	r2, [r3, #1]

    ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, &hDevice->ctrlTxBuf[0], &hDevice->ctrlRxBuf[0], len, useDma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	f001 f92c 	bl	8006748 <HAL_SpiReadWrite>
 80054f0:	e000      	b.n	80054f4 <oaPhyRegReadStep+0xa2>
        goto end;
 80054f2:	bf00      	nop

end:
    return result;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd90      	pop	{r4, r7, pc}

080054fe <oaSpiIntHandle>:

adi_eth_Result_e oaSpiIntHandle(adi_mac_Device_t *hDevice)
{
 80054fe:	b590      	push	{r4, r7, lr}
 8005500:	b08b      	sub	sp, #44	; 0x2c
 8005502:	af02      	add	r7, sp, #8
 8005504:	6078      	str	r0, [r7, #4]
    ADI_MAC_STATUS0_t       status0Masked;
    ADI_MAC_STATUS1_t       status1Masked;
    adi_mac_TimestampRdy_t  timestampReady;
    bool                    useDma;

    status0Masked.VALUE32 = hDevice->statusRegisters.status0Masked;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800550c:	61bb      	str	r3, [r7, #24]
    status1Masked.VALUE32 = hDevice->statusRegisters.status1Masked;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005514:	617b      	str	r3, [r7, #20]

    /* Link status and link status change behave differently in ADIN2111 */
#if !defined(ADIN2111)
    if (status1Masked.LINK_CHANGE)
 8005516:	7d3b      	ldrb	r3, [r7, #20]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d013      	beq.n	800554a <oaSpiIntHandle+0x4c>
    {
        if (hDevice->cbFunc[ADI_MAC_EVT_LINK_CHANGE] != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00f      	beq.n	800554a <oaSpiIntHandle+0x4c>
        {
            adi_eth_LinkStatus_e    linkStatus = (adi_eth_LinkStatus_e)(hDevice->statusRegisters.status1 & BITM_MAC_STATUS1_P1_LINK_STATUS);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	73fb      	strb	r3, [r7, #15]
            hDevice->cbFunc[ADI_MAC_EVT_LINK_CHANGE](hDevice->cbParam[ADI_MAC_EVT_LINK_CHANGE], ADI_MAC_EVT_LINK_CHANGE, (void *)&linkStatus);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	69d0      	ldr	r0, [r2, #28]
 8005542:	f107 020f 	add.w	r2, r7, #15
 8005546:	2100      	movs	r1, #0
 8005548:	4798      	blx	r3

    /* Captured timestamp availability flags are different in ADIN2111 */
#if defined(ADIN2111)
    if ((status0Masked.TTSCAA | status0Masked.TTSCAB | status0Masked.TTSCAC) | (status1Masked.P2_TTSCAA | status1Masked.P2_TTSCAB | status1Masked.P2_TTSCAC))
#else
    if (status0Masked.TTSCAA | status0Masked.TTSCAB | status0Masked.TTSCAC)
 800554a:	7e7b      	ldrb	r3, [r7, #25]
 800554c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005550:	b2da      	uxtb	r2, r3
 8005552:	7e7b      	ldrb	r3, [r7, #25]
 8005554:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005558:	b2db      	uxtb	r3, r3
 800555a:	4313      	orrs	r3, r2
 800555c:	b2da      	uxtb	r2, r3
 800555e:	7e7b      	ldrb	r3, [r7, #25]
 8005560:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	4313      	orrs	r3, r2
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d029      	beq.n	80055c2 <oaSpiIntHandle+0xc4>
#endif
    {
        if (hDevice->cbFunc[ADI_MAC_EVT_TIMESTAMP_RDY] != NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d025      	beq.n	80055c2 <oaSpiIntHandle+0xc4>
            timestampReady.p1TimestampReadyC = (bool)status0Masked.TTSCAC;
            timestampReady.p2TimestampReadyA = (bool)status1Masked.P2_TTSCAA;
            timestampReady.p2TimestampReadyB = (bool)status1Masked.P2_TTSCAB;
            timestampReady.p2TimestampReadyC = (bool)status1Masked.P2_TTSCAC;
#else
            timestampReady.timestampReadyA = (bool)status0Masked.TTSCAA;
 8005576:	7e7b      	ldrb	r3, [r7, #25]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	743b      	strb	r3, [r7, #16]
            timestampReady.timestampReadyB = (bool)status0Masked.TTSCAB;
 800558a:	7e7b      	ldrb	r3, [r7, #25]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	bf14      	ite	ne
 8005596:	2301      	movne	r3, #1
 8005598:	2300      	moveq	r3, #0
 800559a:	b2db      	uxtb	r3, r3
 800559c:	747b      	strb	r3, [r7, #17]
            timestampReady.timestampReadyC = (bool)status0Masked.TTSCAC;
 800559e:	7e7b      	ldrb	r3, [r7, #25]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bf14      	ite	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	2300      	moveq	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	74bb      	strb	r3, [r7, #18]
#endif
            hDevice->cbFunc[ADI_MAC_EVT_TIMESTAMP_RDY](hDevice->cbParam[ADI_MAC_EVT_TIMESTAMP_RDY], ADI_MAC_EVT_TIMESTAMP_RDY, (void *)&timestampReady);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80055ba:	f107 0210 	add.w	r2, r7, #16
 80055be:	2104      	movs	r1, #4
 80055c0:	4798      	blx	r3
        }
    }

    /* General status callback will fire even if callbacks were executed for specific status bits  */
    if (status0Masked.VALUE32 || status1Masked.VALUE32)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <oaSpiIntHandle+0xd0>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <oaSpiIntHandle+0xe8>
    {
        if (hDevice->cbFunc[ADI_MAC_EVT_STATUS] != NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <oaSpiIntHandle+0xe8>
        {
            hDevice->cbFunc[ADI_MAC_EVT_STATUS](hDevice->cbParam[ADI_MAC_EVT_STATUS], ADI_MAC_EVT_STATUS, (void *)&hDevice->statusRegisters);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	32f4      	adds	r2, #244	; 0xf4
 80055e2:	2103      	movs	r1, #3
 80055e4:	4798      	blx	r3
        }
    }

    /* Now clear the status bits. Note that we only need to clear the MAC */
    /* status bits, the PHY status bits are cleared on read.              */
    hDevice->wnr = ADI_MAC_SPI_WRITE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    hDevice->regAddr = ADDR_MAC_STATUS0;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2208      	movs	r2, #8
 80055f2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hDevice->pRegData = (uint32_t *)&hDevice->statusRegisters;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    hDevice->cnt = 2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

    result = oaCtrlSetup(&hDevice->ctrlTxBuf[0], hDevice->wnr, hDevice->regAddr, hDevice->pRegData, &hDevice->cnt);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	4623      	mov	r3, r4
 800562c:	f000 fa47 	bl	8005abe <oaCtrlSetup>
 8005630:	4603      	mov	r3, r0
 8005632:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8005634:	7ffb      	ldrb	r3, [r7, #31]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11a      	bne.n	8005670 <oaSpiIntHandle+0x172>
    {
        goto end;
    }

    useDma = (hDevice->cnt >= MIN_SIZE_FOR_DMA);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005640:	2b0f      	cmp	r3, #15
 8005642:	bf8c      	ite	hi
 8005644:	2301      	movhi	r3, #1
 8005646:	2300      	movls	r3, #0
 8005648:	77bb      	strb	r3, [r7, #30]
    hDevice->state = ADI_MAC_STATE_DATA_START;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2207      	movs	r2, #7
 800564e:	701a      	strb	r2, [r3, #0]
    /* Rx/Tx are the same in OA SPI, reusing the state names from   */
    /* generic SPI. Different state names also help with debugging. */
    hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	705a      	strb	r2, [r3, #1]

    ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, &hDevice->ctrlTxBuf[0], &hDevice->ctrlRxBuf[0], hDevice->cnt, useDma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
 8005668:	7fbb      	ldrb	r3, [r7, #30]
 800566a:	f001 f86d 	bl	8006748 <HAL_SpiReadWrite>
 800566e:	e000      	b.n	8005672 <oaSpiIntHandle+0x174>
        goto end;
 8005670:	bf00      	nop

end:
    return result;
 8005672:	7ffb      	ldrb	r3, [r7, #31]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3724      	adds	r7, #36	; 0x24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd90      	pop	{r4, r7, pc}

0800567c <oaSpiProcess>:
 *                  (MAC interrupt handler), in which case it will create a
 *                  one-chunk transaction.
 *
 */
static adi_eth_Result_e oaSpiProcess(adi_mac_Device_t *hDevice)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e        result          = ADI_ETH_SUCCESS;
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]
    uint32_t                chunkCount      = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t                txChunkCount    = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	623b      	str	r3, [r7, #32]
    uint32_t                queueByteCount  = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	61fb      	str	r3, [r7, #28]
    uint8_t                 *pBuf;

    /* First figure out how many chunks to handle in the SPI transaction */
    if (!queueIsEmpty(&hDevice->txQueue))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	336c      	adds	r3, #108	; 0x6c
 8005698:	4618      	mov	r0, r3
 800569a:	f7fb fc3c 	bl	8000f16 <queueIsEmpty>
 800569e:	4603      	mov	r3, r0
 80056a0:	f083 0301 	eor.w	r3, r3, #1
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d045      	beq.n	8005736 <oaSpiProcess+0xba>
    {
        uint32_t txIdx = hDevice->oaTxCurBufIdx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80056b0:	617b      	str	r3, [r7, #20]
        queueByteCount = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
        do
        {
            queueByteCount += hDevice->txQueue.pEntries[txIdx].pBufDesc->trxSize;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	4413      	add	r3, r2
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	61fb      	str	r3, [r7, #28]
            txIdx++;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	3301      	adds	r3, #1
 80056ce:	617b      	str	r3, [r7, #20]
            if (txIdx == TX_QUEUE_NUM_ENTRIES_RAW)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d101      	bne.n	80056da <oaSpiProcess+0x5e>
            {
                txIdx = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
            }
        } while (txIdx != hDevice->txQueue.head);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d1e8      	bne.n	80056b6 <oaSpiProcess+0x3a>
        /* The current buffer may have been already partially transmitted */
        queueByteCount -= hDevice->oaTxCurBufByteOffset;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	61fb      	str	r3, [r7, #28]

        /* Round up the number of chunks */
        chunkCount = (queueByteCount >> hDevice->oaCps) + ((queueByteCount & ((1 << hDevice->oaCps) - 1)) ? 1: 0);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 8005702:	2101      	movs	r1, #1
 8005704:	fa01 f202 	lsl.w	r2, r1, r2
 8005708:	3a01      	subs	r2, #1
 800570a:	4611      	mov	r1, r2
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	400a      	ands	r2, r1
 8005710:	2a00      	cmp	r2, #0
 8005712:	d001      	beq.n	8005718 <oaSpiProcess+0x9c>
 8005714:	2201      	movs	r2, #1
 8005716:	e000      	b.n	800571a <oaSpiProcess+0x9e>
 8005718:	2200      	movs	r2, #0
 800571a:	4413      	add	r3, r2
 800571c:	627b      	str	r3, [r7, #36]	; 0x24

        if (chunkCount > hDevice->oaTxc)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005726:	429a      	cmp	r2, r3
 8005728:	d903      	bls.n	8005732 <oaSpiProcess+0xb6>
        {
            chunkCount = hDevice->oaTxc;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Save this for later, to indicate if a chunk has Tx data or not. */
        txChunkCount = chunkCount;
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	623b      	str	r3, [r7, #32]

    }
    if (hDevice->oaRca > chunkCount)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800573c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573e:	429a      	cmp	r2, r3
 8005740:	d203      	bcs.n	800574a <oaSpiProcess+0xce>
    {
        chunkCount = hDevice->oaRca;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (chunkCount > hDevice->oaMaxChunkCount)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	429a      	cmp	r2, r3
 8005754:	d903      	bls.n	800575e <oaSpiProcess+0xe2>
    {
        chunkCount = hDevice->oaMaxChunkCount;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (hDevice->oaRxUseBackupBuf && (chunkCount > ADI_OA_RX_BACKUP_BUF_CHUNK_COUNT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <oaSpiProcess+0xf6>
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	2b01      	cmp	r3, #1
 800576c:	d901      	bls.n	8005772 <oaSpiProcess+0xf6>
    {
        chunkCount = ADI_OA_RX_BACKUP_BUF_CHUNK_COUNT;
 800576e:	2301      	movs	r3, #1
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* This is from IRQ handler: the host needs to initiate a data transfer in response to an IRQ. */
    if ((!chunkCount) && (hDevice->state == ADI_MAC_STATE_IRQ_START))
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <oaSpiProcess+0x10a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b09      	cmp	r3, #9
 8005780:	d101      	bne.n	8005786 <oaSpiProcess+0x10a>
    {
        /* Fixed to a minimum transfer size is 1 chunk. */
        chunkCount = 1;
 8005782:	2301      	movs	r3, #1
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (hDevice->oaRxUseBackupBuf)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <oaSpiProcess+0x11e>
    {
        pBuf = &hDevice->oaRxBackupBuf[0];
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e001      	b.n	800579e <oaSpiProcess+0x122>
    }
    else
    {
        pBuf = &spiTxBuf[0];
 800579a:	4b1f      	ldr	r3, [pc, #124]	; (8005818 <oaSpiProcess+0x19c>)
 800579c:	61bb      	str	r3, [r7, #24]
    }

    hDevice->oaTrxSize = 0;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    for (uint32_t i = 0; i < chunkCount; i++)
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	e02b      	b.n	8005804 <oaSpiProcess+0x188>
    {
        bool txEn = (hDevice->state == ADI_MAC_STATE_IRQ_START) ? false: (i < txChunkCount);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	d005      	beq.n	80057c2 <oaSpiProcess+0x146>
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d201      	bcs.n	80057c2 <oaSpiProcess+0x146>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <oaSpiProcess+0x148>
 80057c2:	2300      	movs	r3, #0
 80057c4:	73bb      	strb	r3, [r7, #14]
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	73bb      	strb	r3, [r7, #14]
        oaCreateNextChunk(hDevice, &pBuf[hDevice->oaTrxSize], txEn);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4413      	add	r3, r2
 80057d8:	7bba      	ldrb	r2, [r7, #14]
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f81d 	bl	800581c <oaCreateNextChunk>
        hDevice->oaTrxSize += ADI_SPI_HEADER_SIZE + (1 << hDevice->oaCps);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 80057ee:	2101      	movs	r1, #1
 80057f0:	fa01 f202 	lsl.w	r2, r1, r2
 80057f4:	4413      	add	r3, r2
 80057f6:	1d1a      	adds	r2, r3, #4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    for (uint32_t i = 0; i < chunkCount; i++)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	3301      	adds	r3, #1
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	429a      	cmp	r2, r3
 800580a:	d3cf      	bcc.n	80057ac <oaSpiProcess+0x130>
    }

    return result;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3728      	adds	r7, #40	; 0x28
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000990 	.word	0x20000990

0800581c <oaCreateNextChunk>:
 *                  flagged via the txEn parameter: if true it will populate frame data into the
 *                  chunk, if false it will only read.
 *
 */
static adi_eth_Result_e oaCreateNextChunk(adi_mac_Device_t *hDevice, uint8_t *pBuf, bool txEn)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b090      	sub	sp, #64	; 0x40
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	71fb      	strb	r3, [r7, #7]
    adi_eth_Result_e        result = ADI_ETH_SUCCESS;
 800582a:	2300      	movs	r3, #0
 800582c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    adi_mac_FrameStruct_t   *pFrame = NULL;
 8005830:	2300      	movs	r3, #0
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t                chunkSize = (1 << hDevice->oaCps);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800583a:	2201      	movs	r2, #1
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t                chunkBytesRemaining = chunkSize;
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t                chunkByteIdx = ADI_SPI_HEADER_SIZE;
 8005846:	2304      	movs	r3, #4
 8005848:	623b      	str	r3, [r7, #32]
    adi_mac_OaTxHeader_t    oaTxHeader;
    bool                    firstChunk = false;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    uint32_t                mem32;

    oaTxHeader.VALUE32 = 0x00000000;
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
    oaTxHeader.DNC = 1;
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585a:	75fb      	strb	r3, [r7, #23]

    /* If there are no buffers ready for Rx, ask the MAC to not send data to host */
    if ((hDevice->oaRxUseBackupBuf) || queueIsEmpty(hDevice->pRxQueue))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005862:	2b00      	cmp	r3, #0
 8005864:	d107      	bne.n	8005876 <oaCreateNextChunk+0x5a>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800586a:	4618      	mov	r0, r3
 800586c:	f7fb fb53 	bl	8000f16 <queueIsEmpty>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <oaCreateNextChunk+0x62>
    {
        oaTxHeader.NORX = 1;
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	f043 0320 	orr.w	r3, r3, #32
 800587c:	75fb      	strb	r3, [r7, #23]
    }

    // FIXME: queueIsFull: can this ever be false in the previous implementation?
    if (txEn && (queueIsFull(&hDevice->txQueue) || (hDevice->oaTxCurBufIdx != hDevice->txQueue.head)))
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d016      	beq.n	80058b2 <oaCreateNextChunk+0x96>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	336c      	adds	r3, #108	; 0x6c
 8005888:	4618      	mov	r0, r3
 800588a:	f7fb fb30 	bl	8000eee <queueIsFull>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <oaCreateNextChunk+0x86>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589e:	429a      	cmp	r2, r3
 80058a0:	d007      	beq.n	80058b2 <oaCreateNextChunk+0x96>
    {
        pFrame = &hDevice->txQueue.pEntries[hDevice->oaTxCurBufIdx];
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4413      	add	r3, r2
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (pFrame == NULL)
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <oaCreateNextChunk+0xa6>
    {
        oaTxHeader.DV = 0;
 80058b8:	7dbb      	ldrb	r3, [r7, #22]
 80058ba:	f36f 1345 	bfc	r3, #5, #1
 80058be:	75bb      	strb	r3, [r7, #22]
 80058c0:	e0dd      	b.n	8005a7e <oaCreateNextChunk+0x262>
    }
    else
    {
        oaTxHeader.DV = 1;
 80058c2:	7dbb      	ldrb	r3, [r7, #22]
 80058c4:	f043 0320 	orr.w	r3, r3, #32
 80058c8:	75bb      	strb	r3, [r7, #22]

        /* Have we already transmitted bytes from the frame? */
        if (!hDevice->oaTxCurBufByteOffset)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <oaCreateNextChunk+0xbe>
        {
            firstChunk = true;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        uint32_t bytesRemaining = pFrame->pBufDesc->trxSize - hDevice->oaTxCurBufByteOffset;
 80058da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	61fb      	str	r3, [r7, #28]
        uint32_t    bsize;


        if (bytesRemaining > chunkBytesRemaining)
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d902      	bls.n	80058f8 <oaCreateNextChunk+0xdc>
        {
            bsize = chunkBytesRemaining;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
 80058f6:	e001      	b.n	80058fc <oaCreateNextChunk+0xe0>
        }
        else
        {
            bsize = bytesRemaining;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        bytesRemaining -= bsize;
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	61fb      	str	r3, [r7, #28]
        chunkBytesRemaining -= bsize;
 8005904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(&pBuf[chunkByteIdx], &pFrame->pBufDesc->pBuf[hDevice->oaTxCurBufByteOffset], bsize);
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	18d0      	adds	r0, r2, r3
 8005912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800591e:	4413      	add	r3, r2
 8005920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005922:	4619      	mov	r1, r3
 8005924:	f015 fa37 	bl	801ad96 <memcpy>
        hDevice->oaTxCurBufByteOffset += bsize;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800592e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

        if (firstChunk)
 8005938:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800593c:	2b00      	cmp	r3, #0
 800593e:	d014      	beq.n	800596a <oaCreateNextChunk+0x14e>
        {
            oaTxHeader.SV = 1;
 8005940:	7dbb      	ldrb	r3, [r7, #22]
 8005942:	f043 0310 	orr.w	r3, r3, #16
 8005946:	75bb      	strb	r3, [r7, #22]
            oaTxHeader.SWO = 0;
 8005948:	7dbb      	ldrb	r3, [r7, #22]
 800594a:	f36f 0303 	bfc	r3, #0, #4
 800594e:	75bb      	strb	r3, [r7, #22]
            oaTxHeader.TMSC = (uint32_t)(pFrame->pBufDesc->egressCapt);
 8005950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	7e1b      	ldrb	r3, [r3, #24]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	b2da      	uxtb	r2, r3
 800595c:	7d3b      	ldrb	r3, [r7, #20]
 800595e:	f362 1387 	bfi	r3, r2, #6, #2
 8005962:	753b      	strb	r3, [r7, #20]

#if defined(ADIN2111)
            oaTxHeader.VS = pFrame->pBufDesc->port & 0x1;
#endif
            firstChunk = false;
 8005964:	2300      	movs	r3, #0
 8005966:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }
        if (bytesRemaining == 0)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d122      	bne.n	80059b6 <oaCreateNextChunk+0x19a>
        {
            oaTxHeader.EV = 1;
 8005970:	7d7b      	ldrb	r3, [r7, #21]
 8005972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005976:	757b      	strb	r3, [r7, #21]
            oaTxHeader.EBO = (bsize - 1);
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	b2db      	uxtb	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005984:	b2da      	uxtb	r2, r3
 8005986:	7d7b      	ldrb	r3, [r7, #21]
 8005988:	f362 0305 	bfi	r3, r2, #0, #6
 800598c:	757b      	strb	r3, [r7, #21]
            hDevice->oaTxCurBufIdx++;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
            if (hDevice->oaTxCurBufIdx == TX_QUEUE_NUM_ENTRIES_RAW)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d103      	bne.n	80059ae <oaCreateNextChunk+0x192>
            {
                hDevice->oaTxCurBufIdx = 0;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
            }
            hDevice->oaTxCurBufByteOffset = 0;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        if ((chunkBytesRemaining >= 4) && (hDevice->oaTxCurBufIdx != hDevice->txQueue.head))
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d960      	bls.n	8005a7e <oaCreateNextChunk+0x262>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d059      	beq.n	8005a7e <oaCreateNextChunk+0x262>
            /* There is room in the chunk to start transmit next frame */
            /* However we need to make sure this would not lead to a need */
            /* for duplicate SV or EV. */

            /* If there is already a valid SV, do not try to start a new frame */
            if (!oaTxHeader.SV)
 80059ca:	7dbb      	ldrb	r3, [r7, #22]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d153      	bne.n	8005a7e <oaCreateNextChunk+0x262>
            {
                pFrame = &hDevice->txQueue.pEntries[hDevice->oaTxCurBufIdx];
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4413      	add	r3, r2
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                uint32_t swo = (bsize + 3) / 4;
 80059e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e8:	3303      	adds	r3, #3
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	633b      	str	r3, [r7, #48]	; 0x30
                /* If we already have a valid EV, make sure the new frame is not shorter */
                /* than the available bytes in the chunk. */
                if (oaTxHeader.EV && (pFrame->pBufDesc->trxSize + swo * 4 <= chunkSize))
 80059ee:	7d7b      	ldrb	r3, [r7, #21]
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <oaCreateNextChunk+0x1f6>
 80059fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d302      	bcc.n	8005a12 <oaCreateNextChunk+0x1f6>
                {
                    swo++;
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	3301      	adds	r3, #1
 8005a10:	633b      	str	r3, [r7, #48]	; 0x30
                }

                chunkByteIdx = chunkByteIdx + swo * 4;
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	4413      	add	r3, r2
 8005a1a:	623b      	str	r3, [r7, #32]
                chunkBytesRemaining = chunkSize - swo * 4;
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
                memcpy(&pBuf[chunkByteIdx], &pFrame->pBufDesc->pBuf[hDevice->oaTxCurBufByteOffset], chunkBytesRemaining);
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	18d0      	adds	r0, r2, r3
 8005a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005a38:	4413      	add	r3, r2
 8005a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	f015 f9aa 	bl	801ad96 <memcpy>
                hDevice->oaTxCurBufByteOffset += chunkBytesRemaining;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	441a      	add	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

                oaTxHeader.SV = 1;
 8005a52:	7dbb      	ldrb	r3, [r7, #22]
 8005a54:	f043 0310 	orr.w	r3, r3, #16
 8005a58:	75bb      	strb	r3, [r7, #22]
                oaTxHeader.SWO = swo;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	7dbb      	ldrb	r3, [r7, #22]
 8005a64:	f362 0303 	bfi	r3, r2, #0, #4
 8005a68:	75bb      	strb	r3, [r7, #22]

                oaTxHeader.TMSC = (uint32_t)(pFrame->pBufDesc->egressCapt);
 8005a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	7e1b      	ldrb	r3, [r3, #24]
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	7d3b      	ldrb	r3, [r7, #20]
 8005a78:	f362 1387 	bfi	r3, r2, #6, #2
 8005a7c:	753b      	strb	r3, [r7, #20]
            }
        }

    }

    oaTxHeader.P = 1;
 8005a7e:	7d3b      	ldrb	r3, [r7, #20]
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	753b      	strb	r3, [r7, #20]
    oaTxHeader.P = MAC_CalculateParity((uint8_t *)&oaTxHeader.VALUE32, 4);
 8005a86:	f107 0314 	add.w	r3, r7, #20
 8005a8a:	2104      	movs	r1, #4
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fd f92d 	bl	8002cec <MAC_CalculateParity>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	7d3b      	ldrb	r3, [r7, #20]
 8005a9c:	f362 0300 	bfi	r3, r2, #0, #1
 8005aa0:	753b      	strb	r3, [r7, #20]

    mem32 = HTON32(oaTxHeader.VALUE32);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	ba1b      	rev	r3, r3
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	693a      	ldr	r2, [r7, #16]
    memcpy(pBuf, &mem32, 4);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	601a      	str	r2, [r3, #0]

    return result;
 8005ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3740      	adds	r7, #64	; 0x40
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <oaCtrlSetup>:
 *
 * @details         Creates a control transaction data, including the control command header.
 *
 */
static adi_eth_Result_e oaCtrlSetup(uint8_t *pBuf, uint32_t wnr, uint32_t regAddr, uint32_t *pRegData, uint32_t *pLen)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	603b      	str	r3, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8005acc:	2300      	movs	r3, #0
 8005ace:	75fb      	strb	r3, [r7, #23]
    uint32_t            byteLen;

    /* Size of header and echoed header */
    byteLen = 2 * ADI_SPI_HEADER_SIZE;
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	613b      	str	r3, [r7, #16]
    /* Convert words to bytes */
    byteLen += ADI_MAC_SPI_ACCESS_SIZE * (*pLen);
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4413      	add	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
#if defined(SPI_PROT_EN)
    /* Protection enabled */
    byteLen += ADI_MAC_SPI_ACCESS_SIZE * (*pLen);
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4413      	add	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
#endif

    if (byteLen > (ADI_MAC_SPI_CTRL_BUF_SIZE - 2))
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2bfe      	cmp	r3, #254	; 0xfe
 8005af0:	d902      	bls.n	8005af8 <oaCtrlSetup+0x3a>
    {
      result = ADI_ETH_INVALID_PARAM;
 8005af2:	2308      	movs	r3, #8
 8005af4:	75fb      	strb	r3, [r7, #23]
      goto end;
 8005af6:	e016      	b.n	8005b26 <oaCtrlSetup+0x68>
    }

    oaCtrlCmdHeader(pBuf, wnr, regAddr, *pLen);
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f815 	bl	8005b30 <oaCtrlCmdHeader>

    if (wnr == ADI_MAC_SPI_WRITE)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d109      	bne.n	8005b20 <oaCtrlSetup+0x62>
    {
        result = oaCtrlCmdWriteData(&pBuf[ADI_SPI_HEADER_SIZE], (uint32_t *)pRegData, (*pLen));
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	1d18      	adds	r0, r3, #4
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	f000 f89a 	bl	8005c50 <oaCtrlCmdWriteData>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	75fb      	strb	r3, [r7, #23]
    }

    *pLen = byteLen;
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	601a      	str	r2, [r3, #0]

end:
    return result;
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <oaCtrlCmdHeader>:
 * @param [in]      addr        Register address.
 * @param [in]      cnt         Number of registers.
 *
 */
static void oaCtrlCmdHeader(uint8_t *p, uint32_t wnr, uint32_t addr, uint32_t cnt)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	603b      	str	r3, [r7, #0]
    adi_mac_OaCtrlCmdHeader_t   header;
    uint32_t                    mem32;

    header.DNC = 0;
 8005b3e:	7efb      	ldrb	r3, [r7, #27]
 8005b40:	f36f 13c7 	bfc	r3, #7, #1
 8005b44:	76fb      	strb	r3, [r7, #27]
    header.HDRB = 0;
 8005b46:	7efb      	ldrb	r3, [r7, #27]
 8005b48:	f36f 1386 	bfc	r3, #6, #1
 8005b4c:	76fb      	strb	r3, [r7, #27]
    header.WNR = wnr;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	7efb      	ldrb	r3, [r7, #27]
 8005b58:	f362 1345 	bfi	r3, r2, #5, #1
 8005b5c:	76fb      	strb	r3, [r7, #27]
    header.AID = 0;
 8005b5e:	7efb      	ldrb	r3, [r7, #27]
 8005b60:	f36f 1304 	bfc	r3, #4, #1
 8005b64:	76fb      	strb	r3, [r7, #27]
    if (addr >= ADDR_MAC_TX_FSIZE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b2f      	cmp	r3, #47	; 0x2f
 8005b6a:	d905      	bls.n	8005b78 <oaCtrlCmdHeader+0x48>
    {
        header.MMS = 1;
 8005b6c:	7efb      	ldrb	r3, [r7, #27]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f362 0303 	bfi	r3, r2, #0, #4
 8005b74:	76fb      	strb	r3, [r7, #27]
 8005b76:	e003      	b.n	8005b80 <oaCtrlCmdHeader+0x50>
    }
    else
    {
        header.MMS = 0;
 8005b78:	7efb      	ldrb	r3, [r7, #27]
 8005b7a:	f36f 0303 	bfc	r3, #0, #4
 8005b7e:	76fb      	strb	r3, [r7, #27]
    }
    header.ADDR = addr;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f8a7 3019 	strh.w	r3, [r7, #25]
    header.LEN = (cnt - 1);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	7e3b      	ldrb	r3, [r7, #24]
 8005b98:	f362 0347 	bfi	r3, r2, #1, #7
 8005b9c:	763b      	strb	r3, [r7, #24]
    header.P = 1;
 8005b9e:	7e3b      	ldrb	r3, [r7, #24]
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	763b      	strb	r3, [r7, #24]
    header.P = MAC_CalculateParity((uint8_t *)&header.VALUE32, 4);
 8005ba6:	f107 0318 	add.w	r3, r7, #24
 8005baa:	2104      	movs	r1, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fd f89d 	bl	8002cec <MAC_CalculateParity>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	7e3b      	ldrb	r3, [r7, #24]
 8005bbc:	f362 0300 	bfi	r3, r2, #0, #1
 8005bc0:	763b      	strb	r3, [r7, #24]

    mem32 = HTON32(header.VALUE32);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	ba1b      	rev	r3, r3
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &mem32, 4);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <oaCtrlCmdReadData>:
 *                  If protection is enabled (#SPI_PROT_EN), it checks the integrity of the
 *                  received data and return #ADI_ETH_PROTECTION_ERROR in case of failure.
 *
 */
static adi_eth_Result_e oaCtrlCmdReadData(uint32_t *dst, uint8_t *src, uint32_t cnt)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b08b      	sub	sp, #44	; 0x2c
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e     result = ADI_ETH_SUCCESS;
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

#if defined(SPI_PROT_EN)
    uint32_t            val32[2];

    /* Protection enabled */
    for (uint32_t i = 0; i < cnt; i++)
 8005bec:	2300      	movs	r3, #0
 8005bee:	623b      	str	r3, [r7, #32]
 8005bf0:	e021      	b.n	8005c36 <oaCtrlCmdReadData+0x5c>
    {
        val32[0] = ((uint32_t *)src)[2 * i];
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	617b      	str	r3, [r7, #20]
        val32[1] = ((uint32_t *)src)[2 * i + 1];
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	3304      	adds	r3, #4
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	4413      	add	r3, r2
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	61bb      	str	r3, [r7, #24]
        if (val32[0] != ~val32[1])
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d003      	beq.n	8005c1e <oaCtrlCmdReadData+0x44>
        {
            result = ADI_ETH_PROTECTION_ERROR;
 8005c16:	2311      	movs	r3, #17
 8005c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            goto end;
 8005c1c:	e010      	b.n	8005c40 <oaCtrlCmdReadData+0x66>
        }
        dst[i] = HTON32(val32[0]);
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	68f9      	ldr	r1, [r7, #12]
 8005c26:	440b      	add	r3, r1
 8005c28:	61fa      	str	r2, [r7, #28]
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	ba12      	rev	r2, r2
 8005c2e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < cnt; i++)
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	3301      	adds	r3, #1
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	6a3a      	ldr	r2, [r7, #32]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d3d9      	bcc.n	8005bf2 <oaCtrlCmdReadData+0x18>
    }
end:
 8005c3e:	bf00      	nop
        dst[i] = HTON32(((uint32_t *)src)[i]);
    }

#endif

    return result;
 8005c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	372c      	adds	r7, #44	; 0x2c
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <oaCtrlCmdWriteData>:
 *                  If protection is enabled (#SPI_PROT_EN), it will add the integrity
 *                  check values as defined by the OPEN Alliance specification.
 *
 */
static adi_eth_Result_e oaCtrlCmdWriteData(uint8_t *dst, uint32_t *src, uint32_t cnt)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b089      	sub	sp, #36	; 0x24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e     result = ADI_ETH_SUCCESS;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	76fb      	strb	r3, [r7, #27]

#if defined(SPI_PROT_EN)
      /* Protection enabled */
    for (uint32_t i = 0; i < cnt; i++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	e01e      	b.n	8005ca4 <oaCtrlCmdWriteData+0x54>
    {
        ((uint32_t *)dst)[2 * i] = HTON32(src[i]);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	68f9      	ldr	r1, [r7, #12]
 8005c76:	440b      	add	r3, r1
 8005c78:	613a      	str	r2, [r7, #16]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	ba12      	rev	r2, r2
 8005c7e:	601a      	str	r2, [r3, #0]
        ((uint32_t *)dst)[2 * i + 1] = HTON32(~src[i]);
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	4413      	add	r3, r2
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	43da      	mvns	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	3304      	adds	r3, #4
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	440b      	add	r3, r1
 8005c96:	617a      	str	r2, [r7, #20]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	ba12      	rev	r2, r2
 8005c9c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < cnt; i++)
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d3dc      	bcc.n	8005c66 <oaCtrlCmdWriteData+0x16>
        ((uint32_t *)dst)[i] = HTON32(src[i]);
    }

#endif

    return result;
 8005cac:	7efb      	ldrb	r3, [r7, #27]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3724      	adds	r7, #36	; 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <MAC_SendFrame>:
 *
 * @details         Executes the state machine to start sending a frame to the MAC.
 *
 */
adi_eth_Result_e MAC_SendFrame(adi_mac_Device_t *hDevice, adi_mac_FrameStruct_t *pFrame)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e          result = ADI_ETH_SUCCESS;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]

    hDevice->state = ADI_MAC_STATE_DATA_START;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2207      	movs	r2, #7
 8005ccc:	701a      	strb	r2, [r3, #0]
    result = oaStateMachine(hDevice);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fe fc0e 	bl	80044f0 <oaStateMachine>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73fb      	strb	r3, [r7, #15]

    return result;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <PhyWrite>:

adin1110_DeviceHandle_t pDeviceHandle;


static uint32_t PhyWrite(uint8_t hwAddr, uint32_t regAddr, uint16_t data)
{
 8005ce4:	b590      	push	{r4, r7, lr}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	6039      	str	r1, [r7, #0]
 8005cee:	71fb      	strb	r3, [r7, #7]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	80bb      	strh	r3, [r7, #4]
    return (uint32_t)macDriverEntry.PhyWrite(pDeviceHandle->pMacDevice , hwAddr, regAddr, data);
 8005cf4:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <PhyWrite+0x30>)
 8005cf6:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8005cfa:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <PhyWrite+0x34>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6858      	ldr	r0, [r3, #4]
 8005d00:	88bb      	ldrh	r3, [r7, #4]
 8005d02:	79f9      	ldrb	r1, [r7, #7]
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	47a0      	blx	r4
 8005d08:	4603      	mov	r3, r0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd90      	pop	{r4, r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000000 	.word	0x20000000
 8005d18:	20001164 	.word	0x20001164

08005d1c <PhyRead>:

static uint32_t PhyRead(uint8_t hwAddr, uint32_t regAddr, uint16_t *data)
{
 8005d1c:	b590      	push	{r4, r7, lr}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	73fb      	strb	r3, [r7, #15]
    return (uint32_t)macDriverEntry.PhyRead(pDeviceHandle->pMacDevice , hwAddr, regAddr, data);
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <PhyRead+0x2c>)
 8005d2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <PhyRead+0x30>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6858      	ldr	r0, [r3, #4]
 8005d36:	7bf9      	ldrb	r1, [r7, #15]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	47a0      	blx	r4
 8005d3e:	4603      	mov	r3, r0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd90      	pop	{r4, r7, pc}
 8005d48:	20000000 	.word	0x20000000
 8005d4c:	20001164 	.word	0x20001164

08005d50 <adin1110_Init>:
 *                  Use adin1110_Enable() to establish the link.
 *
 * @sa              adin1110_UnInit()
 */
adi_eth_Result_e adin1110_Init(adin1110_DeviceHandle_t hDevice, adin1110_DriverConfig_t *pCfg)
{
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b08d      	sub	sp, #52	; 0x34
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e        result = ADI_ETH_SUCCESS;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    adi_mac_DriverConfig_t  macDrvConfig;
    adi_phy_DriverConfig_t  phyDrvConfig;

    if (pCfg->devMemSize < ADIN1110_DEVICE_SIZE)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8005d68:	d203      	bcs.n	8005d72 <adin1110_Init+0x22>
    {
        result = ADI_ETH_INVALID_PARAM;
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto end;
 8005d70:	e044      	b.n	8005dfc <adin1110_Init+0xac>
    }

    hDevice->pUserContext = NULL;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	609a      	str	r2, [r3, #8]

    /* Initialize the MAC configuration structure. */
    macDrvConfig.pDevMem = (void *)pCfg->pDevMem;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	61bb      	str	r3, [r7, #24]
    macDrvConfig.devMemSize = ADI_MAC_DEVICE_SIZE;
 8005d7e:	f44f 736c 	mov.w	r3, #944	; 0x3b0
 8005d82:	61fb      	str	r3, [r7, #28]
    macDrvConfig.fcsCheckEn = pCfg->fcsCheckEn;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	7a1b      	ldrb	r3, [r3, #8]
 8005d88:	f887 3020 	strb.w	r3, [r7, #32]

    /* Initialize the PHY configuration structure. */
    phyDrvConfig.pDevMem = (void *)((uint8_t *)pCfg->pDevMem + ADI_MAC_DEVICE_SIZE);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8005d94:	60fb      	str	r3, [r7, #12]
    phyDrvConfig.devMemSize = ADI_PHY_DEVICE_SIZE;
 8005d96:	2330      	movs	r3, #48	; 0x30
 8005d98:	613b      	str	r3, [r7, #16]
    phyDrvConfig.enableIrq  = false;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	753b      	strb	r3, [r7, #20]

    pDeviceHandle = hDevice;
 8005d9e:	4a1a      	ldr	r2, [pc, #104]	; (8005e08 <adin1110_Init+0xb8>)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6013      	str	r3, [r2, #0]

    ADI_HAL_INIT(hDevice);
 8005da4:	f000 fcf0 	bl	8006788 <HAL_Init_Hook>

    result = macDriverEntry.Init(&hDevice->pMacDevice, &macDrvConfig, (void *)hDevice);
 8005da8:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <adin1110_Init+0xbc>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	1d10      	adds	r0, r2, #4
 8005db0:	f107 0118 	add.w	r1, r7, #24
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	4798      	blx	r3
 8005db8:	4603      	mov	r3, r0
 8005dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (result == ADI_ETH_SUCCESS)
 8005dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d119      	bne.n	8005dfa <adin1110_Init+0xaa>
    {
        /* PHY address, used in internal MDIO accesses, is fixed in hardware. */
        phyDrvConfig.addr = ADIN1110_PHY_ADDR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	60bb      	str	r3, [r7, #8]
        result = phyDriverEntry.Init(&hDevice->pPhyDevice, &phyDrvConfig, hDevice, PhyRead, PhyWrite);
 8005dca:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <adin1110_Init+0xc0>)
 8005dcc:	681c      	ldr	r4, [r3, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f107 0108 	add.w	r1, r7, #8
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <adin1110_Init+0xc4>)
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <adin1110_Init+0xc8>)
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	47a0      	blx	r4
 8005dde:	4603      	mov	r3, r0
 8005de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        hDevice->pMacDevice->phyAddr = phyDrvConfig.addr;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	635a      	str	r2, [r3, #52]	; 0x34
        hDevice->pMacDevice->phyIrqMask = ADIN1110_PHY_IRQ_MASK;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f643 32ff 	movw	r2, #15359	; 0x3bff
 8005df4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8005df8:	e000      	b.n	8005dfc <adin1110_Init+0xac>
    }

end:
 8005dfa:	bf00      	nop
    return result;
 8005dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	372c      	adds	r7, #44	; 0x2c
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd90      	pop	{r4, r7, pc}
 8005e08:	20001164 	.word	0x20001164
 8005e0c:	20000000 	.word	0x20000000
 8005e10:	2000008c 	.word	0x2000008c
 8005e14:	08005ce5 	.word	0x08005ce5
 8005e18:	08005d1d 	.word	0x08005d1d

08005e1c <adin1110_Enable>:
 * @details         Enable the MAC-PHY operation by bringing PHY out of software powerdown and establishing link.
 *
 * @sa              adin1110_Disable()
 */
adi_eth_Result_e adin1110_Enable(adin1110_DeviceHandle_t hDevice)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]

    result = phyDriverEntry.ExitSoftwarePowerdown(hDevice->pPhyDevice);
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <adin1110_Enable+0x28>)
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]

    return result;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000008c 	.word	0x2000008c

08005e48 <adin1110_SyncConfig>:
 *                  CONFIG0.SYNC is cleared on reset, and the MAC device will not transmit or receive frames until CONFIG0.SYNC is set.
 *
 * @sa              adin1110_Reset()
 */
adi_eth_Result_e adin1110_SyncConfig(adin1110_DeviceHandle_t hDevice)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
    return macDriverEntry.SyncConfig(hDevice->pMacDevice);
 8005e50:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <adin1110_SyncConfig+0x20>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6852      	ldr	r2, [r2, #4]
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4798      	blx	r3
 8005e5c:	4603      	mov	r3, r0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000000 	.word	0x20000000

08005e6c <adin1110_GetLinkStatus>:
 *                  in the MAC STATUS register. It does not read from the PHY registers.
 *
 * @sa
 */
adi_eth_Result_e adin1110_GetLinkStatus(adin1110_DeviceHandle_t hDevice, adi_eth_LinkStatus_e *linkStatus)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
    return macDriverEntry.GetLinkStatus(hDevice->pMacDevice, 0, linkStatus);
 8005e76:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <adin1110_GetLinkStatus+0x24>)
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6850      	ldr	r0, [r2, #4]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	2100      	movs	r1, #0
 8005e82:	4798      	blx	r3
 8005e84:	4603      	mov	r3, r0

}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000000 	.word	0x20000000

08005e94 <adin1110_AddAddressFilter>:
 *                  If the address filter table is full, an entry can be made available using adin1110_ClearAddressFilter(). 
 *
 * @sa              adin1110_ClearAddressFilter()
 */
adi_eth_Result_e adin1110_AddAddressFilter(adin1110_DeviceHandle_t hDevice, uint8_t *macAddr, uint8_t *macAddrMask, uint32_t priority)
{
 8005e94:	b590      	push	{r4, r7, lr}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
    adi_mac_AddressRule_t   addrRule;

    addrRule.VALUE16 = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	82bb      	strh	r3, [r7, #20]
    /* Address rules only make sense if TO_HOST=1, because dropping frames is the default behaviour. */
    addrRule.TO_HOST = 1;
 8005ea6:	7d3b      	ldrb	r3, [r7, #20]
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	753b      	strb	r3, [r7, #20]
    addrRule.HOST_PRI = priority & (BITM_MAC_ADDR_FILT_UPR_N__HOST_PRI >> BITP_MAC_ADDR_FILT_UPR_N__HOST_PRI);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	7d3b      	ldrb	r3, [r7, #20]
 8005eb8:	f362 03c3 	bfi	r3, r2, #3, #1
 8005ebc:	753b      	strb	r3, [r7, #20]
    addrRule.APPLY2PORT1 = 1;
 8005ebe:	7d7b      	ldrb	r3, [r7, #21]
 8005ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec4:	757b      	strb	r3, [r7, #21]

    return macDriverEntry.AddAddressFilter(hDevice->pMacDevice, macAddr, macAddrMask, addrRule.VALUE16);
 8005ec6:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <adin1110_AddAddressFilter+0x4c>)
 8005ec8:	69dc      	ldr	r4, [r3, #28]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6858      	ldr	r0, [r3, #4]
 8005ece:	8abb      	ldrh	r3, [r7, #20]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	47a0      	blx	r4
 8005ed6:	4603      	mov	r3, r0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd90      	pop	{r4, r7, pc}
 8005ee0:	20000000 	.word	0x20000000

08005ee4 <adin1110_SubmitTxBuffer>:
 *                  successful!
 *
 * @sa
 */
adi_eth_Result_e adin1110_SubmitTxBuffer(adin1110_DeviceHandle_t hDevice, adi_eth_BufDesc_t *pBufDesc)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
    adi_mac_FrameHeader_t   header;

    header.VALUE16 = 0x0000;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	81bb      	strh	r3, [r7, #12]
    header.EGRESS_CAPTURE = pBufDesc->egressCapt;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	7e1b      	ldrb	r3, [r3, #24]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	7b3b      	ldrb	r3, [r7, #12]
 8005efe:	f362 1387 	bfi	r3, r2, #6, #2
 8005f02:	733b      	strb	r3, [r7, #12]

    /* For the ADIN1110, reference counter is always 1 */
    pBufDesc->refCount = 1;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2201      	movs	r2, #1
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24

    return macDriverEntry.SubmitTxBuffer(hDevice->pMacDevice, header, pBufDesc);
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <adin1110_SubmitTxBuffer+0x40>)
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6850      	ldr	r0, [r2, #4]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	89b9      	ldrh	r1, [r7, #12]
 8005f16:	4798      	blx	r3
 8005f18:	4603      	mov	r3, r0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000000 	.word	0x20000000

08005f28 <adin1110_SubmitRxBuffer>:
 *                  this will submit the buffer to the low (normal) priority queue.
 *
 * @sa
 */
adi_eth_Result_e adin1110_SubmitRxBuffer(adin1110_DeviceHandle_t hDevice, adi_eth_BufDesc_t *pBufDesc)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
    return macDriverEntry.SubmitRxBuffer(hDevice->pMacDevice, pBufDesc);
 8005f32:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <adin1110_SubmitRxBuffer+0x24>)
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6852      	ldr	r2, [r2, #4]
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4798      	blx	r3
 8005f40:	4603      	mov	r3, r0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000000 	.word	0x20000000

08005f50 <adin1110_RegisterCallback>:
 *                  It notifies the application when configured events occur.
 *
 * @sa
 */
adi_eth_Result_e adin1110_RegisterCallback(adin1110_DeviceHandle_t hDevice, adi_eth_Callback_t cbFunc, adi_mac_InterruptEvt_e cbEvent)
{
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	71fb      	strb	r3, [r7, #7]
    return macDriverEntry.RegisterCallback(hDevice->pMacDevice, cbFunc, cbEvent, (void *)hDevice);
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <adin1110_RegisterCallback+0x28>)
 8005f60:	691c      	ldr	r4, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6858      	ldr	r0, [r3, #4]
 8005f66:	79fa      	ldrb	r2, [r7, #7]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	47a0      	blx	r4
 8005f6e:	4603      	mov	r3, r0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd90      	pop	{r4, r7, pc}
 8005f78:	20000000 	.word	0x20000000

08005f7c <BSP_delayMs>:
 * @details Based on assumption that SysTick counter fires every milisecond
 *
 * @sa
 */
void BSP_delayMs(uint32_t delay)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
    volatile uint32_t now;
    uint32_t checkTime  = BSP_SysNow();
 8005f84:	f000 f8e1 	bl	800614a <BSP_SysNow>
 8005f88:	60f8      	str	r0, [r7, #12]
    /* Read SysTick Timer every Ms*/
    while (1)
    {
      now  = BSP_SysNow();
 8005f8a:	f000 f8de 	bl	800614a <BSP_SysNow>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	60bb      	str	r3, [r7, #8]
       if (now - checkTime >= delay)
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d900      	bls.n	8005fa0 <BSP_delayMs+0x24>
      now  = BSP_SysNow();
 8005f9e:	e7f4      	b.n	8005f8a <BSP_delayMs+0xe>
       {
          break;
 8005fa0:	bf00      	nop
       }
    }
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <BSP_HWReset>:
 * @details Puld down Reset Pin, wait for 1mS release the Reset Pin
 *
 * @sa
 */
void BSP_HWReset(bool set)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_RESET);
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	4809      	ldr	r0, [pc, #36]	; (8005fe0 <BSP_HWReset+0x34>)
 8005fbc:	f004 f95c 	bl	800a278 <HAL_GPIO_WritePin>
    BSP_delayMs(RESET_DELAY);
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	f7ff ffdb 	bl	8005f7c <BSP_delayMs>
    HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	2180      	movs	r1, #128	; 0x80
 8005fca:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <BSP_HWReset+0x34>)
 8005fcc:	f004 f954 	bl	800a278 <HAL_GPIO_WritePin>
    BSP_delayMs(AFTER_RESET_DELAY);
 8005fd0:	2064      	movs	r0, #100	; 0x64
 8005fd2:	f7ff ffd3 	bl	8005f7c <BSP_delayMs>
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	48000800 	.word	0x48000800

08005fe4 <bspLedSet>:

/* LED functions */

static void bspLedSet(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, bool on)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	807b      	strh	r3, [r7, #2]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	707b      	strb	r3, [r7, #1]
    if (on)
 8005ff4:	787b      	ldrb	r3, [r7, #1]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d006      	beq.n	8006008 <bspLedSet+0x24>
    {
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8005ffa:	887b      	ldrh	r3, [r7, #2]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f004 f939 	bl	800a278 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
    }
}
 8006006:	e005      	b.n	8006014 <bspLedSet+0x30>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8006008:	887b      	ldrh	r3, [r7, #2]
 800600a:	2201      	movs	r2, #1
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f004 f932 	bl	800a278 <HAL_GPIO_WritePin>
}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <bspLedToggle>:

static void bspLedToggle(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	807b      	strh	r3, [r7, #2]
      HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8006028:	887b      	ldrh	r3, [r7, #2]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f004 f93b 	bl	800a2a8 <HAL_GPIO_TogglePin>
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <BSP_HeartBeat>:

/*
 * Heartbeat LED, ORANGE
 */
void BSP_HeartBeat(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
    bspLedToggle(BSP_LED3_PORT, BSP_LED3_PIN);
 8006040:	2140      	movs	r1, #64	; 0x40
 8006042:	4802      	ldr	r0, [pc, #8]	; (800604c <BSP_HeartBeat+0x10>)
 8006044:	f7ff ffea 	bl	800601c <bspLedToggle>
}
 8006048:	bf00      	nop
 800604a:	bd80      	pop	{r7, pc}
 800604c:	48001000 	.word	0x48001000

08006050 <BSP_ErrorLed>:

/*
 * Error LED, RED
 */
void BSP_ErrorLed(bool on)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	71fb      	strb	r3, [r7, #7]
    bspLedSet(BSP_LED2_PORT, BSP_LED2_PIN, on);
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	461a      	mov	r2, r3
 800605e:	2104      	movs	r1, #4
 8006060:	4803      	ldr	r0, [pc, #12]	; (8006070 <BSP_ErrorLed+0x20>)
 8006062:	f7ff ffbf 	bl	8005fe4 <bspLedSet>
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	48001000 	.word	0x48001000

08006074 <BSP_FuncLed1>:

/*
 * Custom function 1 LED
 */
void BSP_FuncLed1(bool on)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	71fb      	strb	r3, [r7, #7]
    bspLedSet(BSP_LED1_PORT, BSP_LED1_PIN, on);
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	461a      	mov	r2, r3
 8006082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006086:	4803      	ldr	r0, [pc, #12]	; (8006094 <BSP_FuncLed1+0x20>)
 8006088:	f7ff ffac 	bl	8005fe4 <bspLedSet>
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	48000800 	.word	0x48000800

08006098 <BSP_FuncLed2>:

/*
 * Custom function 2 LED
 */
void BSP_FuncLed2(bool on)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	71fb      	strb	r3, [r7, #7]
    bspLedSet(BSP_LED4_PORT, BSP_LED4_PIN, on);
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	461a      	mov	r2, r3
 80060a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060aa:	4803      	ldr	r0, [pc, #12]	; (80060b8 <BSP_FuncLed2+0x20>)
 80060ac:	f7ff ff9a 	bl	8005fe4 <bspLedSet>
}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	48001800 	.word	0x48001800

080060bc <BSP_spi2_write_and_read>:
{
    MX_Led_Toggle();
}

uint32_t BSP_spi2_write_and_read(uint8_t *pBufferTx, uint8_t *pBufferRx, uint32_t nbBytes, bool useDma)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Write_Read(pBufferTx,  pBufferRx,  nbBytes, useDma);
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f001 fac7 	bl	8007664 <HAL_SPI_Write_Read>

    return 0;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <BSP_spi2_register_callback>:

extern uint32_t HAL_SPI_Register_Callback(ADI_CB const *pfCallback, void *const pCBParam);
uint32_t BSP_spi2_register_callback(ADI_CB const *pfCallback, void *const pCBParam)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  HAL_SPI_Register_Callback(pfCallback,  pCBParam);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fae5 	bl	80076bc <HAL_SPI_Register_Callback>
  return 0;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <BSP_RegisterIRQCallback>:
    *value = returnVal ;
}

extern uint32_t HAL_INT_N_Register_Callback(ADI_CB const *pfCallback, void *const pCBParam);
uint32_t BSP_RegisterIRQCallback(ADI_CB const *intCallback, void * hDevice)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  return HAL_INT_N_Register_Callback(intCallback,  hDevice);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fa93 	bl	8006634 <HAL_INT_N_Register_Callback>
 800610e:	4603      	mov	r3, r0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <msgWrite>:

uint32_t msgWrite(char * ptr)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t error = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	60fb      	str	r3, [r7, #12]
  if(ptr == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d102      	bne.n	8006130 <msgWrite+0x18>
  {
    error = 1;
 800612a:	2301      	movs	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e007      	b.n	8006140 <msgWrite+0x28>
  }
  else
  {
    submitTxBuffer ((uint8_t*)ptr, strlen(ptr));
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fa f86f 	bl	8000214 <strlen>
 8006136:	4603      	mov	r3, r0
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 ff94 	bl	8008068 <submitTxBuffer>
  }
  return error;
 8006140:	68fb      	ldr	r3, [r7, #12]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <BSP_SysNow>:

uint32_t BSP_SysNow(void)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800614e:	f002 f83b 	bl	80081c8 <HAL_GetTick>
 8006152:	4603      	mov	r3, r0
}
 8006154:	4618      	mov	r0, r3
 8006156:	bd80      	pop	{r7, pc}

08006158 <BSP_InitSystem>:


uint32_t BSP_InitSystem(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef     result = HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	71fb      	strb	r3, [r7, #7]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  result = HAL_Init();
 8006162:	f001 ffc8 	bl	80080f6 <HAL_Init>
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
  if (result != HAL_OK)
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d118      	bne.n	80061a2 <BSP_InitSystem+0x4a>
  {
    goto end;
  }

  /* Configure the system clock */
  result = SystemClock_Config();
 8006170:	f001 fc03 	bl	800797a <SystemClock_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	71fb      	strb	r3, [r7, #7]
  if (result != HAL_OK)
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d113      	bne.n	80061a6 <BSP_InitSystem+0x4e>
  {
    goto end;
  }

  /* Initialize all configured peripherals */
  GPIO_Init();
 800617e:	f000 f8c3 	bl	8006308 <GPIO_Init>
  DMA_Init();
 8006182:	f000 f85d 	bl	8006240 <DMA_Init>

  result = ETH_SPI_Init();
 8006186:	f001 f953 	bl	8007430 <ETH_SPI_Init>
 800618a:	4603      	mov	r3, r0
 800618c:	71fb      	strb	r3, [r7, #7]
  if (result != HAL_OK)
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <BSP_InitSystem+0x52>
  {
    goto end;
  }

  result = MX_USART1_UART_Init();
 8006194:	f001 fefa 	bl	8007f8c <MX_USART1_UART_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	71fb      	strb	r3, [r7, #7]
  if (result != HAL_OK)
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	2b00      	cmp	r3, #0
  {
    goto end;
  }

end:
 80061a0:	e004      	b.n	80061ac <BSP_InitSystem+0x54>
    goto end;
 80061a2:	bf00      	nop
 80061a4:	e002      	b.n	80061ac <BSP_InitSystem+0x54>
    goto end;
 80061a6:	bf00      	nop
 80061a8:	e000      	b.n	80061ac <BSP_InitSystem+0x54>
    goto end;
 80061aa:	bf00      	nop
  return (uint32_t)result;
 80061ac:	79fb      	ldrb	r3, [r7, #7]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <common_Fail>:

char aDebugString[150u];

void common_Fail(char *FailureReason)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
    char fail[] = "Failed: ";
 80061c0:	4a0f      	ldr	r2, [pc, #60]	; (8006200 <common_Fail+0x48>)
 80061c2:	f107 030c 	add.w	r3, r7, #12
 80061c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80061c8:	c303      	stmia	r3!, {r0, r1}
 80061ca:	701a      	strb	r2, [r3, #0]
    char term[] = "\n\r";
 80061cc:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <common_Fail+0x4c>)
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	4611      	mov	r1, r2
 80061d6:	8019      	strh	r1, [r3, #0]
 80061d8:	3302      	adds	r3, #2
 80061da:	0c12      	lsrs	r2, r2, #16
 80061dc:	701a      	strb	r2, [r3, #0]

    /* Ignore return codes since there's nothing we can do if it fails */
    msgWrite(fail);
 80061de:	f107 030c 	add.w	r3, r7, #12
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff ff98 	bl	8006118 <msgWrite>
    msgWrite(FailureReason);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ff95 	bl	8006118 <msgWrite>
    msgWrite(term);
 80061ee:	f107 0308 	add.w	r3, r7, #8
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff ff90 	bl	8006118 <msgWrite>
 }
 80061f8:	bf00      	nop
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	0801bbb0 	.word	0x0801bbb0
 8006204:	0801bbbc 	.word	0x0801bbbc

08006208 <common_Perf>:

void common_Perf(char *InfoString)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
    char term[] = "\n\r";
 8006210:	4a0a      	ldr	r2, [pc, #40]	; (800623c <common_Perf+0x34>)
 8006212:	f107 030c 	add.w	r3, r7, #12
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	4611      	mov	r1, r2
 800621a:	8019      	strh	r1, [r3, #0]
 800621c:	3302      	adds	r3, #2
 800621e:	0c12      	lsrs	r2, r2, #16
 8006220:	701a      	strb	r2, [r3, #0]

    /* Ignore return codes since there's nothing we can do if it fails */
    msgWrite(InfoString);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff ff78 	bl	8006118 <msgWrite>
    msgWrite(term);
 8006228:	f107 030c 	add.w	r3, r7, #12
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff ff73 	bl	8006118 <msgWrite>
}
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	0801bbbc 	.word	0x0801bbbc

08006240 <DMA_Init>:

/**
  * Enable DMA controller clock
  */
void DMA_Init(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006246:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <DMA_Init+0x60>)
 8006248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624a:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <DMA_Init+0x60>)
 800624c:	f043 0304 	orr.w	r3, r3, #4
 8006250:	6493      	str	r3, [r2, #72]	; 0x48
 8006252:	4b13      	ldr	r3, [pc, #76]	; (80062a0 <DMA_Init+0x60>)
 8006254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	607b      	str	r3, [r7, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800625e:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <DMA_Init+0x60>)
 8006260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006262:	4a0f      	ldr	r2, [pc, #60]	; (80062a0 <DMA_Init+0x60>)
 8006264:	f043 0301 	orr.w	r3, r3, #1
 8006268:	6493      	str	r3, [r2, #72]	; 0x48
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <DMA_Init+0x60>)
 800626c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006276:	2200      	movs	r2, #0
 8006278:	2100      	movs	r1, #0
 800627a:	200b      	movs	r0, #11
 800627c:	f003 faf7 	bl	800986e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006280:	200b      	movs	r0, #11
 8006282:	f003 fb10 	bl	80098a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006286:	2200      	movs	r2, #0
 8006288:	2100      	movs	r1, #0
 800628a:	200c      	movs	r0, #12
 800628c:	f003 faef 	bl	800986e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006290:	200c      	movs	r0, #12
 8006292:	f003 fb08 	bl	80098a6 <HAL_NVIC_EnableIRQ>

}
 8006296:	bf00      	nop
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	40021000 	.word	0x40021000

080062a4 <HAL_FcsInit>:
	0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
	0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};

uint32_t HAL_FcsInit(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
    /* Nothing to initialize for software FCS. */
    return ADI_HAL_SUCCESS;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_FcsCalculate>:
    /* Nothing to un-initialize for software FCS. */
    return ADI_HAL_SUCCESS;
}

uint32_t HAL_FcsCalculate(uint8_t *pBuf, uint32_t nbBytes)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
    const uint8_t *p = pBuf;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60fb      	str	r3, [r7, #12]
    uint32_t crc;

    crc = ~0U;
 80062c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062c6:	60bb      	str	r3, [r7, #8]
    while (nbBytes--)
 80062c8:	e00e      	b.n	80062e8 <HAL_FcsCalculate+0x34>
       crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	60fa      	str	r2, [r7, #12]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4053      	eors	r3, r2
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	4a0a      	ldr	r2, [pc, #40]	; (8006304 <HAL_FcsCalculate+0x50>)
 80062dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	4053      	eors	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]
    while (nbBytes--)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	1e5a      	subs	r2, r3, #1
 80062ec:	603a      	str	r2, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1eb      	bne.n	80062ca <HAL_FcsCalculate+0x16>
    return crc ^ ~0U;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	43db      	mvns	r3, r3
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	0801bee8 	.word	0x0801bee8

08006308 <GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void GPIO_Init(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b096      	sub	sp, #88	; 0x58
 800630c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800630e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	605a      	str	r2, [r3, #4]
 8006318:	609a      	str	r2, [r3, #8]
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    ETH_GPIO_ENABLE;
 800631e:	4ba8      	ldr	r3, [pc, #672]	; (80065c0 <GPIO_Init+0x2b8>)
 8006320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006322:	4aa7      	ldr	r2, [pc, #668]	; (80065c0 <GPIO_Init+0x2b8>)
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800632a:	4ba5      	ldr	r3, [pc, #660]	; (80065c0 <GPIO_Init+0x2b8>)
 800632c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	643b      	str	r3, [r7, #64]	; 0x40
 8006334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006336:	4ba2      	ldr	r3, [pc, #648]	; (80065c0 <GPIO_Init+0x2b8>)
 8006338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633a:	4aa1      	ldr	r2, [pc, #644]	; (80065c0 <GPIO_Init+0x2b8>)
 800633c:	f043 0302 	orr.w	r3, r3, #2
 8006340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006342:	4b9f      	ldr	r3, [pc, #636]	; (80065c0 <GPIO_Init+0x2b8>)
 8006344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634e:	4b9c      	ldr	r3, [pc, #624]	; (80065c0 <GPIO_Init+0x2b8>)
 8006350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006352:	4a9b      	ldr	r2, [pc, #620]	; (80065c0 <GPIO_Init+0x2b8>)
 8006354:	f043 0304 	orr.w	r3, r3, #4
 8006358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800635a:	4b99      	ldr	r3, [pc, #612]	; (80065c0 <GPIO_Init+0x2b8>)
 800635c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	4b96      	ldr	r3, [pc, #600]	; (80065c0 <GPIO_Init+0x2b8>)
 8006368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636a:	4a95      	ldr	r2, [pc, #596]	; (80065c0 <GPIO_Init+0x2b8>)
 800636c:	f043 0308 	orr.w	r3, r3, #8
 8006370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006372:	4b93      	ldr	r3, [pc, #588]	; (80065c0 <GPIO_Init+0x2b8>)
 8006374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
 800637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637e:	4b90      	ldr	r3, [pc, #576]	; (80065c0 <GPIO_Init+0x2b8>)
 8006380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006382:	4a8f      	ldr	r2, [pc, #572]	; (80065c0 <GPIO_Init+0x2b8>)
 8006384:	f043 0310 	orr.w	r3, r3, #16
 8006388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800638a:	4b8d      	ldr	r3, [pc, #564]	; (80065c0 <GPIO_Init+0x2b8>)
 800638c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638e:	f003 0310 	and.w	r3, r3, #16
 8006392:	633b      	str	r3, [r7, #48]	; 0x30
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	4b8a      	ldr	r3, [pc, #552]	; (80065c0 <GPIO_Init+0x2b8>)
 8006398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639a:	4a89      	ldr	r2, [pc, #548]	; (80065c0 <GPIO_Init+0x2b8>)
 800639c:	f043 0320 	orr.w	r3, r3, #32
 80063a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063a2:	4b87      	ldr	r3, [pc, #540]	; (80065c0 <GPIO_Init+0x2b8>)
 80063a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	4b84      	ldr	r3, [pc, #528]	; (80065c0 <GPIO_Init+0x2b8>)
 80063b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b2:	4a83      	ldr	r2, [pc, #524]	; (80065c0 <GPIO_Init+0x2b8>)
 80063b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063ba:	4b81      	ldr	r3, [pc, #516]	; (80065c0 <GPIO_Init+0x2b8>)
 80063bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	4b7e      	ldr	r3, [pc, #504]	; (80065c0 <GPIO_Init+0x2b8>)
 80063c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ca:	4a7d      	ldr	r2, [pc, #500]	; (80065c0 <GPIO_Init+0x2b8>)
 80063cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063d2:	4b7b      	ldr	r3, [pc, #492]	; (80065c0 <GPIO_Init+0x2b8>)
 80063d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063de:	4b78      	ldr	r3, [pc, #480]	; (80065c0 <GPIO_Init+0x2b8>)
 80063e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e2:	4a77      	ldr	r2, [pc, #476]	; (80065c0 <GPIO_Init+0x2b8>)
 80063e4:	f043 0304 	orr.w	r3, r3, #4
 80063e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063ea:	4b75      	ldr	r3, [pc, #468]	; (80065c0 <GPIO_Init+0x2b8>)
 80063ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	623b      	str	r3, [r7, #32]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80063f6:	4b72      	ldr	r3, [pc, #456]	; (80065c0 <GPIO_Init+0x2b8>)
 80063f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fa:	4a71      	ldr	r2, [pc, #452]	; (80065c0 <GPIO_Init+0x2b8>)
 80063fc:	f043 0310 	orr.w	r3, r3, #16
 8006400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006402:	4b6f      	ldr	r3, [pc, #444]	; (80065c0 <GPIO_Init+0x2b8>)
 8006404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800640e:	4b6c      	ldr	r3, [pc, #432]	; (80065c0 <GPIO_Init+0x2b8>)
 8006410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006412:	4a6b      	ldr	r2, [pc, #428]	; (80065c0 <GPIO_Init+0x2b8>)
 8006414:	f043 0302 	orr.w	r3, r3, #2
 8006418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800641a:	4b69      	ldr	r3, [pc, #420]	; (80065c0 <GPIO_Init+0x2b8>)
 800641c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006426:	4b66      	ldr	r3, [pc, #408]	; (80065c0 <GPIO_Init+0x2b8>)
 8006428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800642a:	4a65      	ldr	r2, [pc, #404]	; (80065c0 <GPIO_Init+0x2b8>)
 800642c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006432:	4b63      	ldr	r3, [pc, #396]	; (80065c0 <GPIO_Init+0x2b8>)
 8006434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800643e:	4b60      	ldr	r3, [pc, #384]	; (80065c0 <GPIO_Init+0x2b8>)
 8006440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006442:	4a5f      	ldr	r2, [pc, #380]	; (80065c0 <GPIO_Init+0x2b8>)
 8006444:	f043 0308 	orr.w	r3, r3, #8
 8006448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800644a:	4b5d      	ldr	r3, [pc, #372]	; (80065c0 <GPIO_Init+0x2b8>)
 800644c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006456:	4b5a      	ldr	r3, [pc, #360]	; (80065c0 <GPIO_Init+0x2b8>)
 8006458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645a:	4a59      	ldr	r2, [pc, #356]	; (80065c0 <GPIO_Init+0x2b8>)
 800645c:	f043 0301 	orr.w	r3, r3, #1
 8006460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006462:	4b57      	ldr	r3, [pc, #348]	; (80065c0 <GPIO_Init+0x2b8>)
 8006464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800646e:	4b54      	ldr	r3, [pc, #336]	; (80065c0 <GPIO_Init+0x2b8>)
 8006470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006472:	4a53      	ldr	r2, [pc, #332]	; (80065c0 <GPIO_Init+0x2b8>)
 8006474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800647a:	4b51      	ldr	r3, [pc, #324]	; (80065c0 <GPIO_Init+0x2b8>)
 800647c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006482:	60bb      	str	r3, [r7, #8]
 8006484:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006486:	4b4e      	ldr	r3, [pc, #312]	; (80065c0 <GPIO_Init+0x2b8>)
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648a:	4a4d      	ldr	r2, [pc, #308]	; (80065c0 <GPIO_Init+0x2b8>)
 800648c:	f043 0320 	orr.w	r3, r3, #32
 8006490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006492:	4b4b      	ldr	r3, [pc, #300]	; (80065c0 <GPIO_Init+0x2b8>)
 8006494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	607b      	str	r3, [r7, #4]
 800649c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
#if defined(EVAL_ADIN1110EBZ)
    HAL_GPIO_WritePin(BSP_LED1_PORT, BSP_LED1_PIN, GPIO_PIN_SET);
 800649e:	2201      	movs	r2, #1
 80064a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064a4:	4847      	ldr	r0, [pc, #284]	; (80065c4 <GPIO_Init+0x2bc>)
 80064a6:	f003 fee7 	bl	800a278 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BSP_LED2_PORT, BSP_LED2_PIN, GPIO_PIN_SET);
 80064aa:	2201      	movs	r2, #1
 80064ac:	2104      	movs	r1, #4
 80064ae:	4846      	ldr	r0, [pc, #280]	; (80065c8 <GPIO_Init+0x2c0>)
 80064b0:	f003 fee2 	bl	800a278 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BSP_LED3_PORT, BSP_LED3_PIN, GPIO_PIN_SET);
 80064b4:	2201      	movs	r2, #1
 80064b6:	2140      	movs	r1, #64	; 0x40
 80064b8:	4843      	ldr	r0, [pc, #268]	; (80065c8 <GPIO_Init+0x2c0>)
 80064ba:	f003 fedd 	bl	800a278 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BSP_LED4_PORT, BSP_LED4_PIN, GPIO_PIN_SET);
 80064be:	2201      	movs	r2, #1
 80064c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064c4:	4841      	ldr	r0, [pc, #260]	; (80065cc <GPIO_Init+0x2c4>)
 80064c6:	f003 fed7 	bl	800a278 <HAL_GPIO_WritePin>

    HAL_PWREx_EnableVddIO2();
 80064ca:	f004 f803 	bl	800a4d4 <HAL_PWREx_EnableVddIO2>
    HAL_GPIO_WritePin(BSP_LED2_PORT, BSP_LED2_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(BSP_LED3_PORT, BSP_LED3_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(BSP_LED4_PORT, BSP_LED4_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(BSP_LED5_PORT, BSP_LED5_PIN, GPIO_PIN_RESET);
#endif
    HAL_GPIO_WritePin(ETH_SPI_SS_GPIO_Port, ETH_SPI_SS_Pin, GPIO_PIN_RESET);
 80064ce:	2200      	movs	r2, #0
 80064d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064d4:	483e      	ldr	r0, [pc, #248]	; (80065d0 <GPIO_Init+0x2c8>)
 80064d6:	f003 fecf 	bl	800a278 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 80064da:	2201      	movs	r2, #1
 80064dc:	2180      	movs	r1, #128	; 0x80
 80064de:	4839      	ldr	r0, [pc, #228]	; (80065c4 <GPIO_Init+0x2bc>)
 80064e0:	f003 feca 	bl	800a278 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = ETH_RESET_Pin;
 80064e4:	2380      	movs	r3, #128	; 0x80
 80064e6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064e8:	2301      	movs	r3, #1
 80064ea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064ec:	2301      	movs	r3, #1
 80064ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064f0:	2300      	movs	r3, #0
 80064f2:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_GPIO_Init(ETH_RESET_GPIO_Port, &GPIO_InitStruct);
 80064f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80064f8:	4619      	mov	r1, r3
 80064fa:	4832      	ldr	r0, [pc, #200]	; (80065c4 <GPIO_Init+0x2bc>)
 80064fc:	f003 fd2a 	bl	8009f54 <HAL_GPIO_Init>

    /*Configure GPIO pins : PEPin PEPin */
    GPIO_InitStruct.Pin = BSP_LED4_PIN;
 8006500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006504:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006506:	2301      	movs	r3, #1
 8006508:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650a:	2300      	movs	r3, #0
 800650c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800650e:	2300      	movs	r3, #0
 8006510:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_GPIO_Init(BSP_LED4_PORT, &GPIO_InitStruct);
 8006512:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006516:	4619      	mov	r1, r3
 8006518:	482c      	ldr	r0, [pc, #176]	; (80065cc <GPIO_Init+0x2c4>)
 800651a:	f003 fd1b 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BSP_LED2_PIN;
 800651e:	2304      	movs	r3, #4
 8006520:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006522:	2301      	movs	r3, #1
 8006524:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006526:	2300      	movs	r3, #0
 8006528:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800652a:	2300      	movs	r3, #0
 800652c:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_GPIO_Init(BSP_LED2_PORT, &GPIO_InitStruct);
 800652e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006532:	4619      	mov	r1, r3
 8006534:	4824      	ldr	r0, [pc, #144]	; (80065c8 <GPIO_Init+0x2c0>)
 8006536:	f003 fd0d 	bl	8009f54 <HAL_GPIO_Init>

    /*Configure GPIO pins : PBPin PBPin PBPin */
    GPIO_InitStruct.Pin = BSP_LED1_PIN;
 800653a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800653e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006540:	2301      	movs	r3, #1
 8006542:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006544:	2300      	movs	r3, #0
 8006546:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006548:	2300      	movs	r3, #0
 800654a:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_GPIO_Init(BSP_LED1_PORT, &GPIO_InitStruct);
 800654c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006550:	4619      	mov	r1, r3
 8006552:	481c      	ldr	r0, [pc, #112]	; (80065c4 <GPIO_Init+0x2bc>)
 8006554:	f003 fcfe 	bl	8009f54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(BSP_LED5_PORT, &GPIO_InitStruct);
#endif

    GPIO_InitStruct.Pin = BSP_LED3_PIN;
 8006558:	2340      	movs	r3, #64	; 0x40
 800655a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800655c:	2301      	movs	r3, #1
 800655e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006560:	2300      	movs	r3, #0
 8006562:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006564:	2300      	movs	r3, #0
 8006566:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_GPIO_Init(BSP_LED3_PORT, &GPIO_InitStruct);
 8006568:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800656c:	4619      	mov	r1, r3
 800656e:	4816      	ldr	r0, [pc, #88]	; (80065c8 <GPIO_Init+0x2c0>)
 8006570:	f003 fcf0 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_SPI_SS_Pin;
 8006574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006578:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800657a:	2301      	movs	r3, #1
 800657c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657e:	2300      	movs	r3, #0
 8006580:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006582:	2300      	movs	r3, #0
 8006584:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_GPIO_Init(ETH_SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8006586:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800658a:	4619      	mov	r1, r3
 800658c:	4810      	ldr	r0, [pc, #64]	; (80065d0 <GPIO_Init+0x2c8>)
 800658e:	f003 fce1 	bl	8009f54 <HAL_GPIO_Init>

    /*Configure GPIO pins : PBPin PBPin PBPin dassdaada*/
    // Enable the GPIO Clock for Port C
    GPIO_InitStruct.Pin = CFG0_Pin;
 8006592:	2301      	movs	r3, #1
 8006594:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;;
 8006596:	230b      	movs	r3, #11
 8006598:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659a:	2300      	movs	r3, #0
 800659c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800659e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065a2:	4619      	mov	r1, r3
 80065a4:	4807      	ldr	r0, [pc, #28]	; (80065c4 <GPIO_Init+0x2bc>)
 80065a6:	f003 fcd5 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CFG1_Pin;
 80065aa:	2302      	movs	r3, #2
 80065ac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065ae:	2300      	movs	r3, #0
 80065b0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(CFG1_GPIO_Port, &GPIO_InitStruct);
 80065b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065ba:	4619      	mov	r1, r3
 80065bc:	e00a      	b.n	80065d4 <GPIO_Init+0x2cc>
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000
 80065c4:	48000800 	.word	0x48000800
 80065c8:	48001000 	.word	0x48001000
 80065cc:	48001800 	.word	0x48001800
 80065d0:	48000400 	.word	0x48000400
 80065d4:	4816      	ldr	r0, [pc, #88]	; (8006630 <GPIO_Init+0x328>)
 80065d6:	f003 fcbd 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CFG2_Pin;
 80065da:	2304      	movs	r3, #4
 80065dc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;;
 80065de:	230b      	movs	r3, #11
 80065e0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(CFG2_GPIO_Port, &GPIO_InitStruct);
 80065e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80065ea:	4619      	mov	r1, r3
 80065ec:	4810      	ldr	r0, [pc, #64]	; (8006630 <GPIO_Init+0x328>)
 80065ee:	f003 fcb1 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CFG3_Pin;
 80065f2:	2320      	movs	r3, #32
 80065f4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065f6:	2300      	movs	r3, #0
 80065f8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(CFG3_GPIO_Port, &GPIO_InitStruct);
 80065fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006602:	4619      	mov	r1, r3
 8006604:	480a      	ldr	r0, [pc, #40]	; (8006630 <GPIO_Init+0x328>)
 8006606:	f003 fca5 	bl	8009f54 <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800660a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800660e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006610:	2300      	movs	r3, #0
 8006612:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Pin = ETH_INT_N_Pin;
 8006614:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006618:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ETH_INT_N_GPIO_Port, &GPIO_InitStruct);
 800661a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800661e:	4619      	mov	r1, r3
 8006620:	4803      	ldr	r0, [pc, #12]	; (8006630 <GPIO_Init+0x328>)
 8006622:	f003 fc97 	bl	8009f54 <HAL_GPIO_Init>





}
 8006626:	bf00      	nop
 8006628:	3758      	adds	r7, #88	; 0x58
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	48000400 	.word	0x48000400

08006634 <HAL_INT_N_Register_Callback>:
}
/* USER CODE END 2 */


uint32_t HAL_INT_N_Register_Callback(ADI_CB const *pfCallback, void *const pCBParam)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
    HAL_NVIC_SetPriority(ETH_INT_N_IRQn, 0xF, 0);
 800663e:	2200      	movs	r2, #0
 8006640:	210f      	movs	r1, #15
 8006642:	2028      	movs	r0, #40	; 0x28
 8006644:	f003 f913 	bl	800986e <HAL_NVIC_SetPriority>

    gpfIntCallback = (ADI_CB)pfCallback;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a05      	ldr	r2, [pc, #20]	; (8006660 <HAL_INT_N_Register_Callback+0x2c>)
 800664c:	6013      	str	r3, [r2, #0]
    gpIntCBParam = pCBParam ;
 800664e:	4a05      	ldr	r2, [pc, #20]	; (8006664 <HAL_INT_N_Register_Callback+0x30>)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	6013      	str	r3, [r2, #0]

    return 0;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20001200 	.word	0x20001200
 8006664:	20001204 	.word	0x20001204

08006668 <HAL_GPIO_EXTI_Callback>:
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	80fb      	strh	r3, [r7, #6]
   if (GPIO_Pin == ETH_INT_N_Pin)
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006678:	d10a      	bne.n	8006690 <HAL_GPIO_EXTI_Callback+0x28>
  {
    if (gpfIntCallback)
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <HAL_GPIO_EXTI_Callback+0x30>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d006      	beq.n	8006690 <HAL_GPIO_EXTI_Callback+0x28>
    {
        (*gpfIntCallback)(gpIntCBParam, 0, NULL);
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_GPIO_EXTI_Callback+0x30>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a05      	ldr	r2, [pc, #20]	; (800669c <HAL_GPIO_EXTI_Callback+0x34>)
 8006688:	6810      	ldr	r0, [r2, #0]
 800668a:	2200      	movs	r2, #0
 800668c:	2100      	movs	r1, #0
 800668e:	4798      	blx	r3
    }
  }

}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20001200 	.word	0x20001200
 800669c:	20001204 	.word	0x20001204

080066a0 <HAL_INT_N_DisableIRQ>:


uint32_t HAL_INT_N_DisableIRQ(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(ETH_INT_N_IRQn);
 80066a4:	2028      	movs	r0, #40	; 0x28
 80066a6:	f003 f90c 	bl	80098c2 <HAL_NVIC_DisableIRQ>

    return 0;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_INT_N_EnableIRQ>:

uint32_t HAL_INT_N_EnableIRQ(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
    HAL_NVIC_EnableIRQ(ETH_INT_N_IRQn);
 80066b4:	2028      	movs	r0, #40	; 0x28
 80066b6:	f003 f8f6 	bl	80098a6 <HAL_NVIC_EnableIRQ>

    return 0;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	bd80      	pop	{r7, pc}

080066c0 <__NVIC_GetEnableIRQ>:
  \return             0  Interrupt is not enabled.
  \return             1  Interrupt is enabled.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	db0d      	blt.n	80066ee <__NVIC_GetEnableIRQ+0x2e>
  {
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80066d2:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <__NVIC_GetEnableIRQ+0x3c>)
 80066d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	f003 031f 	and.w	r3, r3, #31
 80066e4:	fa22 f303 	lsr.w	r3, r2, r3
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	e000      	b.n	80066f0 <__NVIC_GetEnableIRQ+0x30>
  }
  else
  {
    return(0U);
 80066ee:	2300      	movs	r3, #0
  }
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	e000e100 	.word	0xe000e100

08006700 <HAL_DisableIrq>:
#endif
}
#endif

uint32_t HAL_DisableIrq(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
    HAL_INT_N_DisableIRQ();
 8006704:	f7ff ffcc 	bl	80066a0 <HAL_INT_N_DisableIRQ>

    return ADI_HAL_SUCCESS;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_EnableIrq>:

uint32_t HAL_EnableIrq(void)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	af00      	add	r7, sp, #0
    HAL_INT_N_EnableIRQ();
 8006712:	f7ff ffcd 	bl	80066b0 <HAL_INT_N_EnableIRQ>

    return ADI_HAL_SUCCESS;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_GetEnableIrq>:
{
    return NVIC_GetPendingIRQ(EXTI15_10_IRQn);
}

uint32_t HAL_GetEnableIrq(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
    return NVIC_GetEnableIRQ(EXTI15_10_IRQn);
 8006720:	2028      	movs	r0, #40	; 0x28
 8006722:	f7ff ffcd 	bl	80066c0 <__NVIC_GetEnableIRQ>
 8006726:	4603      	mov	r3, r0
}
 8006728:	4618      	mov	r0, r3
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_RegisterCallback>:
 * @details
 *
 * @sa
 */
uint32_t HAL_RegisterCallback(HAL_Callback_t const *intCallback, void * hDevice)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
    return BSP_RegisterIRQCallback (intCallback, hDevice);
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff fcdf 	bl	80060fc <BSP_RegisterIRQCallback>
 800673e:	4603      	mov	r3, r0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_SpiReadWrite>:
 * @details
 *
 * @sa
 */
uint32_t HAL_SpiReadWrite(uint8_t *pBufferTx, uint8_t *pBufferRx, uint32_t nbBytes, bool useDma)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	70fb      	strb	r3, [r7, #3]
    return BSP_spi2_write_and_read (pBufferTx, pBufferRx, nbBytes, useDma);
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff fcad 	bl	80060bc <BSP_spi2_write_and_read>
 8006762:	4603      	mov	r3, r0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_SpiRegisterCallback>:
 * @details
 *
 * @sa
 */
uint32_t HAL_SpiRegisterCallback(HAL_Callback_t const *spiCallback, void * hDevice)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
    return BSP_spi2_register_callback (spiCallback, hDevice);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff fcb1 	bl	80060e0 <BSP_spi2_register_callback>
 800677e:	4603      	mov	r3, r0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_Init_Hook>:

uint32_t HAL_Init_Hook(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
    return ADI_HAL_SUCCESS;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <txCallback>:
adi_eth_LinkStatus_e linkState ;



static void txCallback(void *pCBParam, uint32_t Event, void *pArg)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
    txBufAvailable[0] = true;
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <txCallback+0x20>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	701a      	strb	r2, [r3, #0]
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20004f20 	.word	0x20004f20

080067bc <rxCallback>:

static void rxCallback(void *pCBParam, uint32_t Event, void *pArg)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
    adin1110_DeviceHandle_t hDevice = (adin1110_DeviceHandle_t)pCBParam;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	61fb      	str	r3, [r7, #28]
    adi_eth_BufDesc_t       *pRxBufDesc;

    pRxBufDesc = (adi_eth_BufDesc_t *)pArg;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	61bb      	str	r3, [r7, #24]

    uint16_t frmLen = pRxBufDesc->trxSize;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	82fb      	strh	r3, [r7, #22]

    int unicast = ((pRxBufDesc->pBuf[0] & 0x01) == 0);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	613b      	str	r3, [r7, #16]

    LINK_STATS_INC(link.recv);
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <rxCallback+0x70>)
 80067ee:	885b      	ldrh	r3, [r3, #2]
 80067f0:	3301      	adds	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	4b0d      	ldr	r3, [pc, #52]	; (800682c <rxCallback+0x70>)
 80067f6:	805a      	strh	r2, [r3, #2]
    else
    {
      MIB2_STATS_NETIF_INC(netif, ifinnucastpkts);
    }

    writePQ(&pQ[0], pRxBufDesc->pBuf, frmLen);
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	8afa      	ldrh	r2, [r7, #22]
 80067fe:	4619      	mov	r1, r3
 8006800:	480b      	ldr	r0, [pc, #44]	; (8006830 <rxCallback+0x74>)
 8006802:	f000 fbf7 	bl	8006ff4 <writePQ>
    /* Since we're not doing anything with the Rx buffer in this example, */
    /* we are re-submitting it to the queue. */
    rxBufDesc[0].pBuf = &rxBuf[0][0];
 8006806:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <rxCallback+0x78>)
 8006808:	4a0b      	ldr	r2, [pc, #44]	; (8006838 <rxCallback+0x7c>)
 800680a:	601a      	str	r2, [r3, #0]
    rxBufDesc[0].bufSize = MAX_FRAME_BUF_SIZE;
 800680c:	4b09      	ldr	r3, [pc, #36]	; (8006834 <rxCallback+0x78>)
 800680e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006812:	605a      	str	r2, [r3, #4]
    rxBufDesc[0].cbFunc = rxCallback;
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <rxCallback+0x78>)
 8006816:	4a09      	ldr	r2, [pc, #36]	; (800683c <rxCallback+0x80>)
 8006818:	60da      	str	r2, [r3, #12]
    adin1110_SubmitRxBuffer(hDevice, pRxBufDesc);
 800681a:	69b9      	ldr	r1, [r7, #24]
 800681c:	69f8      	ldr	r0, [r7, #28]
 800681e:	f7ff fb83 	bl	8005f28 <adin1110_SubmitRxBuffer>
}
 8006822:	bf00      	nop
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20007794 	.word	0x20007794
 8006830:	20004f2c 	.word	0x20004f2c
 8006834:	20002fcc 	.word	0x20002fcc
 8006838:	20001208 	.word	0x20001208
 800683c:	080067bd 	.word	0x080067bd

08006840 <cbLinkChange>:

void cbLinkChange(void *pCBParam, uint32_t Event, void *pArg)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
    adi_eth_LinkStatus_e    linkStatus;

    linkStatus = *(adi_eth_LinkStatus_e *)pArg;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	75fb      	strb	r3, [r7, #23]
    linkState = linkStatus;
 8006852:	4a06      	ldr	r2, [pc, #24]	; (800686c <cbLinkChange+0x2c>)
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	7013      	strb	r3, [r2, #0]
    linkStatusChanged = true;
 8006858:	4b05      	ldr	r3, [pc, #20]	; (8006870 <cbLinkChange+0x30>)
 800685a:	2201      	movs	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
    (void)linkStatus;
}
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	200070d1 	.word	0x200070d1
 8006870:	200070d0 	.word	0x200070d0

08006874 <sys_now>:
    return result;
}


uint32_t sys_now(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  return BSP_SysNow();
 8006878:	f7ff fc67 	bl	800614a <BSP_SysNow>
 800687c:	4603      	mov	r3, r0
}
 800687e:	4618      	mov	r0, r3
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <LwIP_ADIN1110LinkInput>:

err_t LwIP_ADIN1110LinkInput(struct netif *netif)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
    if (pDataAvailable(&pQ[0]) == 0)
 800688c:	4811      	ldr	r0, [pc, #68]	; (80068d4 <LwIP_ADIN1110LinkInput+0x50>)
 800688e:	f000 fb97 	bl	8006fc0 <pDataAvailable>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <LwIP_ADIN1110LinkInput+0x18>
    {
      return ERR_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e017      	b.n	80068cc <LwIP_ADIN1110LinkInput+0x48>
    }
    else
    {
      struct pbuf *p = (struct pbuf *)readPQ(&pQ[0]);
 800689c:	480d      	ldr	r0, [pc, #52]	; (80068d4 <LwIP_ADIN1110LinkInput+0x50>)
 800689e:	f000 fbef 	bl	8007080 <readPQ>
 80068a2:	60f8      	str	r0, [r7, #12]
      if (p == NULL)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <LwIP_ADIN1110LinkInput+0x2c>
      {
        return ERR_MEM;
 80068aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ae:	e00d      	b.n	80068cc <LwIP_ADIN1110LinkInput+0x48>
      }

      if (netif->input(p, netif) != ERR_OK)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	4798      	blx	r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d004      	beq.n	80068ca <LwIP_ADIN1110LinkInput+0x46>
      {
        LWIP_DEBUGF(NETIF_DEBUG, ("IP input error\r\n"));
        pbuf_free(p);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f009 fe17 	bl	80104f4 <pbuf_free>
        p = NULL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
      }
    }
   return  ERR_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20004f2c 	.word	0x20004f2c

080068d8 <low_level_output>:


static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
   LwIP_ADIN1110_t* eth = (LwIP_ADIN1110_t*) netif->state;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	617b      	str	r3, [r7, #20]

    adin1110_DeviceHandle_t *hDevice =   eth->hDevice;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	613b      	str	r3, [r7, #16]

    struct pbuf *pp;
    uint16_t frameLen = 0;
 80068ee:	2300      	movs	r3, #0
 80068f0:	81fb      	strh	r3, [r7, #14]
    int total_len = 0;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61bb      	str	r3, [r7, #24]

    for(pp = p, total_len = 0; pp != NULL; pp = pp->next)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	61fb      	str	r3, [r7, #28]
 80068fa:	2300      	movs	r3, #0
 80068fc:	61bb      	str	r3, [r7, #24]
 80068fe:	e025      	b.n	800694c <low_level_output+0x74>
    {
      frameLen =  pp->len ;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	895b      	ldrh	r3, [r3, #10]
 8006904:	81fb      	strh	r3, [r7, #14]

      if(frameLen < 2)
 8006906:	89fb      	ldrh	r3, [r7, #14]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d91b      	bls.n	8006944 <low_level_output+0x6c>
      {
        continue;
      }

      memcpy(txBuf[txBufIndex] + total_len  ,(unsigned char*) pp->payload, frameLen);
 800690c:	4b45      	ldr	r3, [pc, #276]	; (8006a24 <low_level_output+0x14c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006914:	fb02 f303 	mul.w	r3, r2, r3
 8006918:	4a43      	ldr	r2, [pc, #268]	; (8006a28 <low_level_output+0x150>)
 800691a:	441a      	add	r2, r3
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	18d0      	adds	r0, r2, r3
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	89fa      	ldrh	r2, [r7, #14]
 8006926:	4619      	mov	r1, r3
 8006928:	f014 fa35 	bl	801ad96 <memcpy>
      total_len += frameLen ;
 800692c:	89fb      	ldrh	r3, [r7, #14]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	4413      	add	r3, r2
 8006932:	61bb      	str	r3, [r7, #24]

      if(total_len >= MAX_FRAME_BUF_SIZE)
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	f240 52f3 	movw	r2, #1523	; 0x5f3
 800693a:	4293      	cmp	r3, r2
 800693c:	dd03      	ble.n	8006946 <low_level_output+0x6e>
      {
        return ERR_VAL;
 800693e:	f06f 0305 	mvn.w	r3, #5
 8006942:	e06b      	b.n	8006a1c <low_level_output+0x144>
        continue;
 8006944:	bf00      	nop
    for(pp = p, total_len = 0; pp != NULL; pp = pp->next)
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1d6      	bne.n	8006900 <low_level_output+0x28>
      }
    }

    LINK_STATS_INC(link.xmit);
 8006952:	4b36      	ldr	r3, [pc, #216]	; (8006a2c <low_level_output+0x154>)
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	3301      	adds	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	4b34      	ldr	r3, [pc, #208]	; (8006a2c <low_level_output+0x154>)
 800695c:	801a      	strh	r2, [r3, #0]
    MIB2_STATS_NETIF_ADD(netif, ifoutoctets, total_len);

    if(total_len < MIN_FRAME_SIZE) // Pad to minimum ETH size
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b3b      	cmp	r3, #59	; 0x3b
 8006962:	dc01      	bgt.n	8006968 <low_level_output+0x90>
    {
      total_len = MIN_FRAME_SIZE;
 8006964:	233c      	movs	r3, #60	; 0x3c
 8006966:	61bb      	str	r3, [r7, #24]
    }

    txBufDesc[txBufIndex].pBuf = &txBuf[txBufIndex][0];
 8006968:	4b2e      	ldr	r3, [pc, #184]	; (8006a24 <low_level_output+0x14c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a2d      	ldr	r2, [pc, #180]	; (8006a24 <low_level_output+0x14c>)
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8006974:	fb01 f303 	mul.w	r3, r1, r3
 8006978:	492b      	ldr	r1, [pc, #172]	; (8006a28 <low_level_output+0x150>)
 800697a:	4419      	add	r1, r3
 800697c:	482c      	ldr	r0, [pc, #176]	; (8006a30 <low_level_output+0x158>)
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	4403      	add	r3, r0
 8006988:	6019      	str	r1, [r3, #0]
    txBufDesc[txBufIndex].trxSize = total_len;
 800698a:	4b26      	ldr	r3, [pc, #152]	; (8006a24 <low_level_output+0x14c>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	69b9      	ldr	r1, [r7, #24]
 8006990:	4827      	ldr	r0, [pc, #156]	; (8006a30 <low_level_output+0x158>)
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	4403      	add	r3, r0
 800699c:	3308      	adds	r3, #8
 800699e:	6019      	str	r1, [r3, #0]
    txBufDesc[txBufIndex].bufSize = MAX_FRAME_BUF_SIZE;
 80069a0:	4b20      	ldr	r3, [pc, #128]	; (8006a24 <low_level_output+0x14c>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	4922      	ldr	r1, [pc, #136]	; (8006a30 <low_level_output+0x158>)
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	440b      	add	r3, r1
 80069b0:	3304      	adds	r3, #4
 80069b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80069b6:	601a      	str	r2, [r3, #0]
    txBufDesc[txBufIndex].egressCapt = ADI_MAC_EGRESS_CAPTURE_NONE;
 80069b8:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <low_level_output+0x14c>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	491c      	ldr	r1, [pc, #112]	; (8006a30 <low_level_output+0x158>)
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	440b      	add	r3, r1
 80069c8:	3318      	adds	r3, #24
 80069ca:	2200      	movs	r2, #0
 80069cc:	701a      	strb	r2, [r3, #0]
    txBufDesc[txBufIndex].cbFunc = txCallback;
 80069ce:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <low_level_output+0x14c>)
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4917      	ldr	r1, [pc, #92]	; (8006a30 <low_level_output+0x158>)
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	440b      	add	r3, r1
 80069de:	330c      	adds	r3, #12
 80069e0:	4a14      	ldr	r2, [pc, #80]	; (8006a34 <low_level_output+0x15c>)
 80069e2:	601a      	str	r2, [r3, #0]
    {
      /* unicast packet */
      MIB2_STATS_NETIF_INC(netif, ifoutucastpkts);
    }

    while(adin1110_SubmitTxBuffer(*hDevice, &txBufDesc[txBufIndex]) == ADI_ETH_QUEUE_FULL)
 80069e4:	bf00      	nop
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <low_level_output+0x14c>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4a0e      	ldr	r2, [pc, #56]	; (8006a30 <low_level_output+0x158>)
 80069f8:	4413      	add	r3, r2
 80069fa:	4619      	mov	r1, r3
 80069fc:	f7ff fa72 	bl	8005ee4 <adin1110_SubmitTxBuffer>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b12      	cmp	r3, #18
 8006a04:	d0ef      	beq.n	80069e6 <low_level_output+0x10e>
    {
      ;;
    }

    if(txBufIndex ++ >= 1 )
 8006a06:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <low_level_output+0x14c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	4905      	ldr	r1, [pc, #20]	; (8006a24 <low_level_output+0x14c>)
 8006a0e:	600a      	str	r2, [r1, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dd02      	ble.n	8006a1a <low_level_output+0x142>
    {
      txBufIndex = 0;
 8006a14:	4b03      	ldr	r3, [pc, #12]	; (8006a24 <low_level_output+0x14c>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]
    }
   return ERR_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20004f28 	.word	0x20004f28
 8006a28:	20003094 	.word	0x20003094
 8006a2c:	20007794 	.word	0x20007794
 8006a30:	20004e58 	.word	0x20004e58
 8006a34:	08006799 	.word	0x08006799

08006a38 <LwIP_ADIN1110LinkOutput>:

static err_t LwIP_ADIN1110LinkOutput(struct netif *netif, struct pbuf *p)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
    low_level_output(netif, p);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff ff47 	bl	80068d8 <low_level_output>
    return ERR_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <ssiHandler>:


static u16_t ssiHandler(const char* tag, char *insertBuffer, int insertBufferLen)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  return 1;
 8006a60:	2301      	movs	r3, #1
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <LwIP_StructInit>:


adi_eth_Result_e LwIP_StructInit(LwIP_ADIN1110_t* eth, adin1110_DeviceHandle_t* hDevice, uint8_t macAddress[6])
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
  eth->hDevice = hDevice;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	601a      	str	r2, [r3, #0]
  eth->macAddress =  macAddress;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	63da      	str	r2, [r3, #60]	; 0x3c


  return ADI_ETH_SUCCESS;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <LwipADIN1110Init>:

static err_t LwipADIN1110Init(struct netif *netif)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
   LwIP_ADIN1110_t* eth = (LwIP_ADIN1110_t*) netif->state;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	60fb      	str	r3, [r7, #12]

   netif->output = etharp_output;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a16      	ldr	r2, [pc, #88]	; (8006b00 <LwipADIN1110Init+0x6c>)
 8006aa6:	615a      	str	r2, [r3, #20]
   netif->linkoutput = LwIP_ADIN1110LinkOutput;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <LwipADIN1110Init+0x70>)
 8006aac:	619a      	str	r2, [r3, #24]
   netif->name[0] = IFNAME0;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2265      	movs	r2, #101	; 0x65
 8006ab2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   netif->name[1] = IFNAME1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2230      	movs	r2, #48	; 0x30
 8006aba:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   netif->mtu = ETHERNET_MTU;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ac4:	851a      	strh	r2, [r3, #40]	; 0x28
   netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	220e      	movs	r2, #14
 8006aca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    netif->hostname = HOSTNAME;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a0d      	ldr	r2, [pc, #52]	; (8006b08 <LwipADIN1110Init+0x74>)
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_NETIF_HOSTNAME */


   netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET | NETIF_FLAG_IGMP;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	223a      	movs	r2, #58	; 0x3a
 8006ad8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, NETIF_LINK_SPEED_IN_BPS);

   memcpy(netif->hwaddr, eth->macAddress, sizeof(netif->hwaddr));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae6:	2206      	movs	r2, #6
 8006ae8:	4619      	mov	r1, r3
 8006aea:	f014 f954 	bl	801ad96 <memcpy>
   netif->hwaddr_len = sizeof(netif->hwaddr);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2206      	movs	r2, #6
 8006af2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

   return ERR_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	08018965 	.word	0x08018965
 8006b04:	08006a39 	.word	0x08006a39
 8006b08:	0801bbc0 	.word	0x0801bbc0

08006b0c <ADIN1110Init>:


static adi_eth_Result_e ADIN1110Init(LwIP_ADIN1110_t* eth)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e        result;
    adin1110_DeviceHandle_t *hDevice =   eth->hDevice;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	613b      	str	r3, [r7, #16]
    uint8_t  brcstMAC[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 8006b1a:	4a7c      	ldr	r2, [pc, #496]	; (8006d0c <ADIN1110Init+0x200>)
 8006b1c:	f107 0308 	add.w	r3, r7, #8
 8006b20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b24:	6018      	str	r0, [r3, #0]
 8006b26:	3304      	adds	r3, #4
 8006b28:	8019      	strh	r1, [r3, #0]

    result = adin1110_AddAddressFilter(*hDevice, brcstMAC, NULL, 0);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	f107 0108 	add.w	r1, r7, #8
 8006b32:	2300      	movs	r3, #0
 8006b34:	2200      	movs	r2, #0
 8006b36:	f7ff f9ad 	bl	8005e94 <adin1110_AddAddressFilter>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]
    DEBUG_RESULT("adin1110_AddAddressFilter", result, ADI_ETH_SUCCESS);
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d015      	beq.n	8006b70 <ADIN1110Init+0x64>
 8006b44:	f240 1321 	movw	r3, #289	; 0x121
 8006b48:	4a71      	ldr	r2, [pc, #452]	; (8006d10 <ADIN1110Init+0x204>)
 8006b4a:	4972      	ldr	r1, [pc, #456]	; (8006d14 <ADIN1110Init+0x208>)
 8006b4c:	4872      	ldr	r0, [pc, #456]	; (8006d18 <ADIN1110Init+0x20c>)
 8006b4e:	f013 ffeb 	bl	801ab28 <siprintf>
 8006b52:	4871      	ldr	r0, [pc, #452]	; (8006d18 <ADIN1110Init+0x20c>)
 8006b54:	f7ff fb30 	bl	80061b8 <common_Fail>
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	4a70      	ldr	r2, [pc, #448]	; (8006d1c <ADIN1110Init+0x210>)
 8006b5c:	4970      	ldr	r1, [pc, #448]	; (8006d20 <ADIN1110Init+0x214>)
 8006b5e:	486e      	ldr	r0, [pc, #440]	; (8006d18 <ADIN1110Init+0x20c>)
 8006b60:	f013 ffe2 	bl	801ab28 <siprintf>
 8006b64:	486c      	ldr	r0, [pc, #432]	; (8006d18 <ADIN1110Init+0x20c>)
 8006b66:	f7ff fb4f 	bl	8006208 <common_Perf>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	f013 fdda 	bl	801a724 <exit>

    result = adin1110_AddAddressFilter(*hDevice, eth->macAddress, NULL, 0);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f7ff f98a 	bl	8005e94 <adin1110_AddAddressFilter>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
    DEBUG_RESULT("adin1110_AddAddressFilter", result, ADI_ETH_SUCCESS);
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d015      	beq.n	8006bb6 <ADIN1110Init+0xaa>
 8006b8a:	f44f 7392 	mov.w	r3, #292	; 0x124
 8006b8e:	4a60      	ldr	r2, [pc, #384]	; (8006d10 <ADIN1110Init+0x204>)
 8006b90:	4960      	ldr	r1, [pc, #384]	; (8006d14 <ADIN1110Init+0x208>)
 8006b92:	4861      	ldr	r0, [pc, #388]	; (8006d18 <ADIN1110Init+0x20c>)
 8006b94:	f013 ffc8 	bl	801ab28 <siprintf>
 8006b98:	485f      	ldr	r0, [pc, #380]	; (8006d18 <ADIN1110Init+0x20c>)
 8006b9a:	f7ff fb0d 	bl	80061b8 <common_Fail>
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	4a5e      	ldr	r2, [pc, #376]	; (8006d1c <ADIN1110Init+0x210>)
 8006ba2:	495f      	ldr	r1, [pc, #380]	; (8006d20 <ADIN1110Init+0x214>)
 8006ba4:	485c      	ldr	r0, [pc, #368]	; (8006d18 <ADIN1110Init+0x20c>)
 8006ba6:	f013 ffbf 	bl	801ab28 <siprintf>
 8006baa:	485b      	ldr	r0, [pc, #364]	; (8006d18 <ADIN1110Init+0x20c>)
 8006bac:	f7ff fb2c 	bl	8006208 <common_Perf>
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	f013 fdb7 	bl	801a724 <exit>

    result = adin1110_SyncConfig(*hDevice);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff f944 	bl	8005e48 <adin1110_SyncConfig>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
    DEBUG_RESULT("adin1110_SyncConfig", result, ADI_ETH_SUCCESS);
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d015      	beq.n	8006bf6 <ADIN1110Init+0xea>
 8006bca:	f240 1327 	movw	r3, #295	; 0x127
 8006bce:	4a50      	ldr	r2, [pc, #320]	; (8006d10 <ADIN1110Init+0x204>)
 8006bd0:	4950      	ldr	r1, [pc, #320]	; (8006d14 <ADIN1110Init+0x208>)
 8006bd2:	4851      	ldr	r0, [pc, #324]	; (8006d18 <ADIN1110Init+0x20c>)
 8006bd4:	f013 ffa8 	bl	801ab28 <siprintf>
 8006bd8:	484f      	ldr	r0, [pc, #316]	; (8006d18 <ADIN1110Init+0x20c>)
 8006bda:	f7ff faed 	bl	80061b8 <common_Fail>
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	4a50      	ldr	r2, [pc, #320]	; (8006d24 <ADIN1110Init+0x218>)
 8006be2:	494f      	ldr	r1, [pc, #316]	; (8006d20 <ADIN1110Init+0x214>)
 8006be4:	484c      	ldr	r0, [pc, #304]	; (8006d18 <ADIN1110Init+0x20c>)
 8006be6:	f013 ff9f 	bl	801ab28 <siprintf>
 8006bea:	484b      	ldr	r0, [pc, #300]	; (8006d18 <ADIN1110Init+0x20c>)
 8006bec:	f7ff fb0c 	bl	8006208 <common_Perf>
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f013 fd97 	bl	801a724 <exit>

    result = adin1110_RegisterCallback(*hDevice, cbLinkChange, ADI_MAC_EVT_LINK_CHANGE);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	494a      	ldr	r1, [pc, #296]	; (8006d28 <ADIN1110Init+0x21c>)
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff f9a6 	bl	8005f50 <adin1110_RegisterCallback>
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]
    DEBUG_RESULT("adin1110_RegisterCallback (ADI_MAC_EVT_LINK_CHANGE)", result, ADI_ETH_SUCCESS);
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d015      	beq.n	8006c3a <ADIN1110Init+0x12e>
 8006c0e:	f44f 7395 	mov.w	r3, #298	; 0x12a
 8006c12:	4a3f      	ldr	r2, [pc, #252]	; (8006d10 <ADIN1110Init+0x204>)
 8006c14:	493f      	ldr	r1, [pc, #252]	; (8006d14 <ADIN1110Init+0x208>)
 8006c16:	4840      	ldr	r0, [pc, #256]	; (8006d18 <ADIN1110Init+0x20c>)
 8006c18:	f013 ff86 	bl	801ab28 <siprintf>
 8006c1c:	483e      	ldr	r0, [pc, #248]	; (8006d18 <ADIN1110Init+0x20c>)
 8006c1e:	f7ff facb 	bl	80061b8 <common_Fail>
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	4a41      	ldr	r2, [pc, #260]	; (8006d2c <ADIN1110Init+0x220>)
 8006c26:	493e      	ldr	r1, [pc, #248]	; (8006d20 <ADIN1110Init+0x214>)
 8006c28:	483b      	ldr	r0, [pc, #236]	; (8006d18 <ADIN1110Init+0x20c>)
 8006c2a:	f013 ff7d 	bl	801ab28 <siprintf>
 8006c2e:	483a      	ldr	r0, [pc, #232]	; (8006d18 <ADIN1110Init+0x20c>)
 8006c30:	f7ff faea 	bl	8006208 <common_Perf>
 8006c34:	2000      	movs	r0, #0
 8006c36:	f013 fd75 	bl	801a724 <exit>

        /* Prepare Rx buffers */
    for (uint32_t i = 0; i < 1; i++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	e039      	b.n	8006cb4 <ADIN1110Init+0x1a8>
    {
        txBufAvailable[i] = true;
 8006c40:	4a3b      	ldr	r2, [pc, #236]	; (8006d30 <ADIN1110Init+0x224>)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	4413      	add	r3, r2
 8006c46:	2201      	movs	r2, #1
 8006c48:	701a      	strb	r2, [r3, #0]

        rxBufDesc[i].pBuf = &rxBuf[i][0];
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	4a37      	ldr	r2, [pc, #220]	; (8006d34 <ADIN1110Init+0x228>)
 8006c56:	1899      	adds	r1, r3, r2
 8006c58:	4837      	ldr	r0, [pc, #220]	; (8006d38 <ADIN1110Init+0x22c>)
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	4403      	add	r3, r0
 8006c66:	6019      	str	r1, [r3, #0]
        rxBufDesc[i].bufSize = MAX_FRAME_BUF_SIZE;
 8006c68:	4933      	ldr	r1, [pc, #204]	; (8006d38 <ADIN1110Init+0x22c>)
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	440b      	add	r3, r1
 8006c76:	3304      	adds	r3, #4
 8006c78:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006c7c:	601a      	str	r2, [r3, #0]
        rxBufDesc[i].cbFunc = rxCallback;
 8006c7e:	492e      	ldr	r1, [pc, #184]	; (8006d38 <ADIN1110Init+0x22c>)
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	440b      	add	r3, r1
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	4a2b      	ldr	r2, [pc, #172]	; (8006d3c <ADIN1110Init+0x230>)
 8006c90:	601a      	str	r2, [r3, #0]

        result = adin1110_SubmitRxBuffer(*hDevice, &rxBufDesc[i]);
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	4a25      	ldr	r2, [pc, #148]	; (8006d38 <ADIN1110Init+0x22c>)
 8006ca2:	4413      	add	r3, r2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f7ff f93f 	bl	8005f28 <adin1110_SubmitRxBuffer>
 8006caa:	4603      	mov	r3, r0
 8006cac:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = 0; i < 1; i++)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0c2      	beq.n	8006c40 <ADIN1110Init+0x134>
    }

    result = adin1110_Enable(*hDevice);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff f8ac 	bl	8005e1c <adin1110_Enable>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]
    DEBUG_RESULT("Device enable error", result, ADI_ETH_SUCCESS);
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d015      	beq.n	8006cfa <ADIN1110Init+0x1ee>
 8006cce:	f240 1339 	movw	r3, #313	; 0x139
 8006cd2:	4a0f      	ldr	r2, [pc, #60]	; (8006d10 <ADIN1110Init+0x204>)
 8006cd4:	490f      	ldr	r1, [pc, #60]	; (8006d14 <ADIN1110Init+0x208>)
 8006cd6:	4810      	ldr	r0, [pc, #64]	; (8006d18 <ADIN1110Init+0x20c>)
 8006cd8:	f013 ff26 	bl	801ab28 <siprintf>
 8006cdc:	480e      	ldr	r0, [pc, #56]	; (8006d18 <ADIN1110Init+0x20c>)
 8006cde:	f7ff fa6b 	bl	80061b8 <common_Fail>
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <ADIN1110Init+0x234>)
 8006ce6:	490e      	ldr	r1, [pc, #56]	; (8006d20 <ADIN1110Init+0x214>)
 8006ce8:	480b      	ldr	r0, [pc, #44]	; (8006d18 <ADIN1110Init+0x20c>)
 8006cea:	f013 ff1d 	bl	801ab28 <siprintf>
 8006cee:	480a      	ldr	r0, [pc, #40]	; (8006d18 <ADIN1110Init+0x20c>)
 8006cf0:	f7ff fa8a 	bl	8006208 <common_Perf>
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	f013 fd15 	bl	801a724 <exit>

    initPQueue(&pQ[0]);
 8006cfa:	4812      	ldr	r0, [pc, #72]	; (8006d44 <ADIN1110Init+0x238>)
 8006cfc:	f000 f948 	bl	8006f90 <initPQueue>

  return result;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	0801bc94 	.word	0x0801bc94
 8006d10:	0801bbd4 	.word	0x0801bbd4
 8006d14:	0801bbf4 	.word	0x0801bbf4
 8006d18:	20001168 	.word	0x20001168
 8006d1c:	0801bbfc 	.word	0x0801bbfc
 8006d20:	0801bc18 	.word	0x0801bc18
 8006d24:	0801bc38 	.word	0x0801bc38
 8006d28:	08006841 	.word	0x08006841
 8006d2c:	0801bc4c 	.word	0x0801bc4c
 8006d30:	20004f20 	.word	0x20004f20
 8006d34:	20001208 	.word	0x20001208
 8006d38:	20002fcc 	.word	0x20002fcc
 8006d3c:	080067bd 	.word	0x080067bd
 8006d40:	0801bc80 	.word	0x0801bc80
 8006d44:	20004f2c 	.word	0x20004f2c

08006d48 <LwIP_Init>:


void LwIP_Init( LwIP_ADIN1110_t* eth,  board_t *boardDetails)
{
 8006d48:	b590      	push	{r4, r7, lr}
 8006d4a:	b08b      	sub	sp, #44	; 0x2c
 8006d4c:	af04      	add	r7, sp, #16
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
    ADIN1110Init(eth);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff feda 	bl	8006b0c <ADIN1110Init>
    lwip_init();
 8006d58:	f008 fe25 	bl	800f9a6 <lwip_init>
    http_set_ssi_handler(ssiHandler, NULL, 0);
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4888      	ldr	r0, [pc, #544]	; (8006f84 <LwIP_Init+0x23c>)
 8006d62:	f008 fbbd 	bl	800f4e0 <http_set_ssi_handler>
    httpd_init();
 8006d66:	f008 fba1 	bl	800f4ac <httpd_init>
    if (boardDetails->ip_addr_fixed == 1)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	f040 80e8 	bne.w	8006f44 <LwIP_Init+0x1fc>
    {
      ip4_addr_t ip, mask, gw;
      // Add our network interface to the netif_list and set it as default
      IP4_ADDR(&ip, boardDetails->ip_addr[0], boardDetails->ip_addr[1], boardDetails->ip_addr[2], boardDetails->ip_addr[3]);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	789b      	ldrb	r3, [r3, #2]
 8006d78:	061a      	lsls	r2, r3, #24
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	78db      	ldrb	r3, [r3, #3]
 8006d7e:	041b      	lsls	r3, r3, #16
 8006d80:	431a      	orrs	r2, r3
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	791b      	ldrb	r3, [r3, #4]
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	7952      	ldrb	r2, [r2, #5]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	061a      	lsls	r2, r3, #24
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	789b      	ldrb	r3, [r3, #2]
 8006d96:	0619      	lsls	r1, r3, #24
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	78db      	ldrb	r3, [r3, #3]
 8006d9c:	041b      	lsls	r3, r3, #16
 8006d9e:	4319      	orrs	r1, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	791b      	ldrb	r3, [r3, #4]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	430b      	orrs	r3, r1
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	7949      	ldrb	r1, [r1, #5]
 8006dac:	430b      	orrs	r3, r1
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006db4:	431a      	orrs	r2, r3
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	789b      	ldrb	r3, [r3, #2]
 8006dba:	0619      	lsls	r1, r3, #24
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	78db      	ldrb	r3, [r3, #3]
 8006dc0:	041b      	lsls	r3, r3, #16
 8006dc2:	4319      	orrs	r1, r3
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	791b      	ldrb	r3, [r3, #4]
 8006dc8:	021b      	lsls	r3, r3, #8
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	7949      	ldrb	r1, [r1, #5]
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	789b      	ldrb	r3, [r3, #2]
 8006dde:	0619      	lsls	r1, r3, #24
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	78db      	ldrb	r3, [r3, #3]
 8006de4:	041b      	lsls	r3, r3, #16
 8006de6:	4319      	orrs	r1, r3
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	791b      	ldrb	r3, [r3, #4]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	430b      	orrs	r3, r1
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	7949      	ldrb	r1, [r1, #5]
 8006df4:	430b      	orrs	r3, r1
 8006df6:	0e1b      	lsrs	r3, r3, #24
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]
      IP4_ADDR(&mask,  boardDetails->net_mask[0], boardDetails->net_mask[1], boardDetails->net_mask[2], boardDetails->net_mask[3]);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	799b      	ldrb	r3, [r3, #6]
 8006e00:	061a      	lsls	r2, r3, #24
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	79db      	ldrb	r3, [r3, #7]
 8006e06:	041b      	lsls	r3, r3, #16
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	7a1b      	ldrb	r3, [r3, #8]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	4313      	orrs	r3, r2
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	7a52      	ldrb	r2, [r2, #9]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	061a      	lsls	r2, r3, #24
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	799b      	ldrb	r3, [r3, #6]
 8006e1e:	0619      	lsls	r1, r3, #24
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	79db      	ldrb	r3, [r3, #7]
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	4319      	orrs	r1, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	7a1b      	ldrb	r3, [r3, #8]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	7a49      	ldrb	r1, [r1, #9]
 8006e34:	430b      	orrs	r3, r1
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	799b      	ldrb	r3, [r3, #6]
 8006e42:	0619      	lsls	r1, r3, #24
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	79db      	ldrb	r3, [r3, #7]
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	4319      	orrs	r1, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	7a1b      	ldrb	r3, [r3, #8]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	430b      	orrs	r3, r1
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	7a49      	ldrb	r1, [r1, #9]
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	0a1b      	lsrs	r3, r3, #8
 8006e5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006e60:	431a      	orrs	r2, r3
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	799b      	ldrb	r3, [r3, #6]
 8006e66:	0619      	lsls	r1, r3, #24
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	79db      	ldrb	r3, [r3, #7]
 8006e6c:	041b      	lsls	r3, r3, #16
 8006e6e:	4319      	orrs	r1, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	7a1b      	ldrb	r3, [r3, #8]
 8006e74:	021b      	lsls	r3, r3, #8
 8006e76:	430b      	orrs	r3, r1
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	7a49      	ldrb	r1, [r1, #9]
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	0e1b      	lsrs	r3, r3, #24
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]
      IP4_ADDR(&gw,   boardDetails->gateway[0], boardDetails->gateway[1], boardDetails->gateway[2], boardDetails->gateway[3]);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	7a9b      	ldrb	r3, [r3, #10]
 8006e88:	061a      	lsls	r2, r3, #24
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	7adb      	ldrb	r3, [r3, #11]
 8006e8e:	041b      	lsls	r3, r3, #16
 8006e90:	431a      	orrs	r2, r3
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	7b1b      	ldrb	r3, [r3, #12]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	7b52      	ldrb	r2, [r2, #13]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	061a      	lsls	r2, r3, #24
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	7a9b      	ldrb	r3, [r3, #10]
 8006ea6:	0619      	lsls	r1, r3, #24
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	7adb      	ldrb	r3, [r3, #11]
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	4319      	orrs	r1, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	7b1b      	ldrb	r3, [r3, #12]
 8006eb4:	021b      	lsls	r3, r3, #8
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	7b49      	ldrb	r1, [r1, #13]
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	7a9b      	ldrb	r3, [r3, #10]
 8006eca:	0619      	lsls	r1, r3, #24
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	7adb      	ldrb	r3, [r3, #11]
 8006ed0:	041b      	lsls	r3, r3, #16
 8006ed2:	4319      	orrs	r1, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	7b1b      	ldrb	r3, [r3, #12]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	430b      	orrs	r3, r1
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	7b49      	ldrb	r1, [r1, #13]
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	0a1b      	lsrs	r3, r3, #8
 8006ee4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	7a9b      	ldrb	r3, [r3, #10]
 8006eee:	0619      	lsls	r1, r3, #24
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	7adb      	ldrb	r3, [r3, #11]
 8006ef4:	041b      	lsls	r3, r3, #16
 8006ef6:	4319      	orrs	r1, r3
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	7b1b      	ldrb	r3, [r3, #12]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	430b      	orrs	r3, r1
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	7b49      	ldrb	r1, [r1, #13]
 8006f04:	430b      	orrs	r3, r1
 8006f06:	0e1b      	lsrs	r3, r3, #24
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]

      netif_add(&eth->netif, &ip, &mask, &gw, eth,
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	1d18      	adds	r0, r3, #4
 8006f10:	f107 040c 	add.w	r4, r7, #12
 8006f14:	f107 0210 	add.w	r2, r7, #16
 8006f18:	f107 0114 	add.w	r1, r7, #20
 8006f1c:	4b1a      	ldr	r3, [pc, #104]	; (8006f88 <LwIP_Init+0x240>)
 8006f1e:	9302      	str	r3, [sp, #8]
 8006f20:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <LwIP_Init+0x244>)
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	4623      	mov	r3, r4
 8006f2a:	f008 fe2b 	bl	800fb84 <netif_add>
      LwipADIN1110Init, ethernet_input);

      netif_set_default(&eth->netif);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4618      	mov	r0, r3
 8006f34:	f008 ff92 	bl	800fe5c <netif_set_default>
      netif_set_up(&eth->netif);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f008 ff9d 	bl	800fe7c <netif_set_up>
      netif_set_up(&eth->netif);

      dhcp_start(&eth->netif);
    }
//   netif_set_status_callback(&eth->netif, LwipADIN1110NetifStatusCallback);
}
 8006f42:	e01b      	b.n	8006f7c <LwIP_Init+0x234>
      netif_add(&eth->netif, IPADDR_ANY, IPADDR_ANY, IPADDR_ANY, eth,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	1d18      	adds	r0, r3, #4
 8006f48:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <LwIP_Init+0x240>)
 8006f4a:	9302      	str	r3, [sp, #8]
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <LwIP_Init+0x244>)
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	2300      	movs	r3, #0
 8006f56:	2200      	movs	r2, #0
 8006f58:	2100      	movs	r1, #0
 8006f5a:	f008 fe13 	bl	800fb84 <netif_add>
      netif_set_default(&eth->netif);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3304      	adds	r3, #4
 8006f62:	4618      	mov	r0, r3
 8006f64:	f008 ff7a 	bl	800fe5c <netif_set_default>
      netif_set_up(&eth->netif);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f008 ff85 	bl	800fe7c <netif_set_up>
      dhcp_start(&eth->netif);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4618      	mov	r0, r3
 8006f78:	f00f fea0 	bl	8016cbc <dhcp_start>
}
 8006f7c:	bf00      	nop
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd90      	pop	{r4, r7, pc}
 8006f84:	08006a55 	.word	0x08006a55
 8006f88:	0801a545 	.word	0x0801a545
 8006f8c:	08006a95 	.word	0x08006a95

08006f90 <initPQueue>:

void initPQueue(pQueue_t* pQ)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
    pQ->nWrQ = 0;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c2 3dc0 	str.w	r3, [r2, #3520]	; 0xdc0
    pQ->nRdQ = 0;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fac:	461a      	mov	r2, r3
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f8c2 3dbc 	str.w	r3, [r2, #3516]	; 0xdbc
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <pDataAvailable>:


uint32_t pDataAvailable(pQueue_t* pQ)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  if (pQ->nWrQ != pQ->nRdQ)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fce:	f8d3 2dc0 	ldr.w	r2, [r3, #3520]	; 0xdc0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd8:	f8d3 3dbc 	ldr.w	r3, [r3, #3516]	; 0xdbc
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d001      	beq.n	8006fe4 <pDataAvailable+0x24>
  {
    return 1;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <pDataAvailable+0x26>
  }
  return 0;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
	...

08006ff4 <writePQ>:

void writePQ(pQueue_t* pQ, uint8_t *ethFrame, int lenEthFrame)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
    memcpy(&pQ->pData[pQ->nWrQ][0] , ethFrame, lenEthFrame);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007006:	f8d3 3dc0 	ldr.w	r3, [r3, #3520]	; 0xdc0
 800700a:	f240 52ee 	movw	r2, #1518	; 0x5ee
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	4618      	mov	r0, r3
 800701c:	f013 febb 	bl	801ad96 <memcpy>
    pQ->lenData[pQ->nWrQ] = lenEthFrame;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007026:	f8d3 2dc0 	ldr.w	r2, [r3, #3520]	; 0xdc0
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f202 726a 	addw	r2, r2, #1898	; 0x76a
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQ->nWrQ++;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703c:	f8d3 3dc0 	ldr.w	r3, [r3, #3520]	; 0xdc0
 8007040:	3301      	adds	r3, #1
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007048:	f8c2 3dc0 	str.w	r3, [r2, #3520]	; 0xdc0
    pQ->nWrQ %= MAX_P_QUEUE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007052:	f8d3 1dc0 	ldr.w	r1, [r3, #3520]	; 0xdc0
 8007056:	4b09      	ldr	r3, [pc, #36]	; (800707c <writePQ+0x88>)
 8007058:	fb83 2301 	smull	r2, r3, r3, r1
 800705c:	105a      	asrs	r2, r3, #1
 800705e:	17cb      	asrs	r3, r1, #31
 8007060:	1ad2      	subs	r2, r2, r3
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	1aca      	subs	r2, r1, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007070:	f8c3 2dc0 	str.w	r2, [r3, #3520]	; 0xdc0
}
 8007074:	bf00      	nop
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	66666667 	.word	0x66666667

08007080 <readPQ>:

void* readPQ(pQueue_t* pQ)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
    int ehtFrmLen = pQ->lenData[pQ->nRdQ] ;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708e:	f8d3 2dbc 	ldr.w	r2, [r3, #3516]	; 0xdbc
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f202 726a 	addw	r2, r2, #1898	; 0x76a
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	60fb      	str	r3, [r7, #12]
    struct pbuf* p = pbuf_alloc(PBUF_RAW, MAX_FRAME_BUF_SIZE, PBUF_RAM);
 800709e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80070a2:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80070a6:	2000      	movs	r0, #0
 80070a8:	f008 ffe2 	bl	8010070 <pbuf_alloc>
 80070ac:	60b8      	str	r0, [r7, #8]
    memcpy(((uint8_t*) p->payload) , &pQ->pData[pQ->nRdQ][0], ehtFrmLen);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6858      	ldr	r0, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b8:	f8d3 3dbc 	ldr.w	r3, [r3, #3516]	; 0xdbc
 80070bc:	f240 52ee 	movw	r2, #1518	; 0x5ee
 80070c0:	fb02 f303 	mul.w	r3, r2, r3
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	4413      	add	r3, r2
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4619      	mov	r1, r3
 80070cc:	f013 fe63 	bl	801ad96 <memcpy>

    pQ->nRdQ++;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d6:	f8d3 3dbc 	ldr.w	r3, [r3, #3516]	; 0xdbc
 80070da:	3301      	adds	r3, #1
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070e2:	f8c2 3dbc 	str.w	r3, [r2, #3516]	; 0xdbc
    pQ->nRdQ %= MAX_P_QUEUE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ec:	f8d3 1dbc 	ldr.w	r1, [r3, #3516]	; 0xdbc
 80070f0:	4b09      	ldr	r3, [pc, #36]	; (8007118 <readPQ+0x98>)
 80070f2:	fb83 2301 	smull	r2, r3, r3, r1
 80070f6:	105a      	asrs	r2, r3, #1
 80070f8:	17cb      	asrs	r3, r1, #31
 80070fa:	1ad2      	subs	r2, r2, r3
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	1aca      	subs	r2, r1, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710a:	f8c3 2dbc 	str.w	r2, [r3, #3516]	; 0xdbc

    return (void*)p;
 800710e:	68bb      	ldr	r3, [r7, #8]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	66666667 	.word	0x66666667

0800711c <discoveradin1110>:


uint32_t discoveradin1110(adin1110_DeviceHandle_t *hDevice)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e        result;
    uint32_t                error = 1;
 8007124:	2301      	movs	r3, #1
 8007126:	617b      	str	r3, [r7, #20]

    /****** Driver Init *****/
    for (uint32_t i = 0; i < ADIN1110_INIT_ITER; i++)
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]
 800712c:	e010      	b.n	8007150 <discoveradin1110+0x34>
    {
        result = adin1110_Init(*hDevice, &drvConfig);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	490b      	ldr	r1, [pc, #44]	; (8007160 <discoveradin1110+0x44>)
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe fe0b 	bl	8005d50 <adin1110_Init>
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
        if (result == ADI_ETH_SUCCESS)
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <discoveradin1110+0x2e>
        {
            error = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]
            break;
 8007148:	e005      	b.n	8007156 <discoveradin1110+0x3a>
    for (uint32_t i = 0; i < ADIN1110_INIT_ITER; i++)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	3301      	adds	r3, #1
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	2b04      	cmp	r3, #4
 8007154:	d9eb      	bls.n	800712e <discoveradin1110+0x12>
        }
    }
   // DEBUG_RESULT("No MACPHY device found", result, ADI_ETH_SUCCESS);
    return error;
 8007156:	697b      	ldr	r3, [r7, #20]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	2000011c 	.word	0x2000011c

08007164 <main>:

char buffer[20];


int main(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b09e      	sub	sp, #120	; 0x78
 8007168:	af00      	add	r7, sp, #0

	SystemClock_Config();
 800716a:	f000 fc06 	bl	800797a <SystemClock_Config>
	HAL_Init();
 800716e:	f000 ffc2 	bl	80080f6 <HAL_Init>
	MX_ADC1_Init();            // Initialize ADC
 8007172:	f000 f903 	bl	800737c <MX_ADC1_Init>

    uint32_t       error;
    uint32_t       heartbeatCheckTime = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	677b      	str	r3, [r7, #116]	; 0x74

    adin1110_DeviceStruct_t dev;
    adin1110_DeviceHandle_t hDevice = &dev;
 800717a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800717e:	65fb      	str	r3, [r7, #92]	; 0x5c

    adi_eth_LinkStatus_e linkStatus;
    //adi_eth_Result_e result;

    /****** System Init *****/
    error = BSP_InitSystem();
 8007180:	f7fe ffea 	bl	8006158 <BSP_InitSystem>
 8007184:	6738      	str	r0, [r7, #112]	; 0x70
    DEBUG_RESULT("BSP_InitSystem", error, 0);
 8007186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007188:	2b00      	cmp	r3, #0
 800718a:	d014      	beq.n	80071b6 <main+0x52>
 800718c:	234b      	movs	r3, #75	; 0x4b
 800718e:	4a70      	ldr	r2, [pc, #448]	; (8007350 <main+0x1ec>)
 8007190:	4970      	ldr	r1, [pc, #448]	; (8007354 <main+0x1f0>)
 8007192:	4871      	ldr	r0, [pc, #452]	; (8007358 <main+0x1f4>)
 8007194:	f013 fcc8 	bl	801ab28 <siprintf>
 8007198:	486f      	ldr	r0, [pc, #444]	; (8007358 <main+0x1f4>)
 800719a:	f7ff f80d 	bl	80061b8 <common_Fail>
 800719e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071a0:	4a6e      	ldr	r2, [pc, #440]	; (800735c <main+0x1f8>)
 80071a2:	496f      	ldr	r1, [pc, #444]	; (8007360 <main+0x1fc>)
 80071a4:	486c      	ldr	r0, [pc, #432]	; (8007358 <main+0x1f4>)
 80071a6:	f013 fcbf 	bl	801ab28 <siprintf>
 80071aa:	486b      	ldr	r0, [pc, #428]	; (8007358 <main+0x1f4>)
 80071ac:	f7ff f82c 	bl	8006208 <common_Perf>
 80071b0:	2000      	movs	r0, #0
 80071b2:	f013 fab7 	bl	801a724 <exit>

    BSP_HWReset(true);
 80071b6:	2001      	movs	r0, #1
 80071b8:	f7fe fef8 	bl	8005fac <BSP_HWReset>

    boardDetails.mac[0] =	0x00;
 80071bc:	2300      	movs	r3, #0
 80071be:	75bb      	strb	r3, [r7, #22]
    boardDetails.mac[1] =	0xE0;
 80071c0:	23e0      	movs	r3, #224	; 0xe0
 80071c2:	75fb      	strb	r3, [r7, #23]
    boardDetails.mac[2] =	0x22;
 80071c4:	2322      	movs	r3, #34	; 0x22
 80071c6:	763b      	strb	r3, [r7, #24]
    boardDetails.mac[3] =	0xFE;
 80071c8:	23fe      	movs	r3, #254	; 0xfe
 80071ca:	767b      	strb	r3, [r7, #25]
    boardDetails.mac[4] =	0xDA;
 80071cc:	23da      	movs	r3, #218	; 0xda
 80071ce:	76bb      	strb	r3, [r7, #26]
    boardDetails.mac[5] =	0xC9;
 80071d0:	23c9      	movs	r3, #201	; 0xc9
 80071d2:	76fb      	strb	r3, [r7, #27]

    boardDetails.ip_addr[0] =   192;
 80071d4:	23c0      	movs	r3, #192	; 0xc0
 80071d6:	72bb      	strb	r3, [r7, #10]
    boardDetails.ip_addr[1] =   168;
 80071d8:	23a8      	movs	r3, #168	; 0xa8
 80071da:	72fb      	strb	r3, [r7, #11]
    boardDetails.ip_addr[2] =   20;
 80071dc:	2314      	movs	r3, #20
 80071de:	733b      	strb	r3, [r7, #12]
    boardDetails.ip_addr[3] =   8;
 80071e0:	2308      	movs	r3, #8
 80071e2:	737b      	strb	r3, [r7, #13]

    boardDetails.net_mask[0] =  255;
 80071e4:	23ff      	movs	r3, #255	; 0xff
 80071e6:	73bb      	strb	r3, [r7, #14]
    boardDetails.net_mask[1] =  255;
 80071e8:	23ff      	movs	r3, #255	; 0xff
 80071ea:	73fb      	strb	r3, [r7, #15]
    boardDetails.net_mask[2] =  255;
 80071ec:	23ff      	movs	r3, #255	; 0xff
 80071ee:	743b      	strb	r3, [r7, #16]
    boardDetails.net_mask[3] =  0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	747b      	strb	r3, [r7, #17]

    boardDetails.gateway[0] =   192;
 80071f4:	23c0      	movs	r3, #192	; 0xc0
 80071f6:	74bb      	strb	r3, [r7, #18]
    boardDetails.gateway[1] =   168;
 80071f8:	23a8      	movs	r3, #168	; 0xa8
 80071fa:	74fb      	strb	r3, [r7, #19]
    boardDetails.gateway[2] =   20;
 80071fc:	2314      	movs	r3, #20
 80071fe:	753b      	strb	r3, [r7, #20]
    boardDetails.gateway[3] =   1;
 8007200:	2301      	movs	r3, #1
 8007202:	757b      	strb	r3, [r7, #21]

    boardDetails.ip_addr_fixed = IP_FIXED;//IP_DYNAMIC;
 8007204:	2301      	movs	r3, #1
 8007206:	727b      	strb	r3, [r7, #9]

    error = discoveradin1110(&hDevice);
 8007208:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff ff85 	bl	800711c <discoveradin1110>
 8007212:	6738      	str	r0, [r7, #112]	; 0x70
    DEBUG_RESULT("Failed to access ADIN1110", error, 0);
 8007214:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007216:	2b00      	cmp	r3, #0
 8007218:	d014      	beq.n	8007244 <main+0xe0>
 800721a:	2368      	movs	r3, #104	; 0x68
 800721c:	4a4c      	ldr	r2, [pc, #304]	; (8007350 <main+0x1ec>)
 800721e:	494d      	ldr	r1, [pc, #308]	; (8007354 <main+0x1f0>)
 8007220:	484d      	ldr	r0, [pc, #308]	; (8007358 <main+0x1f4>)
 8007222:	f013 fc81 	bl	801ab28 <siprintf>
 8007226:	484c      	ldr	r0, [pc, #304]	; (8007358 <main+0x1f4>)
 8007228:	f7fe ffc6 	bl	80061b8 <common_Fail>
 800722c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800722e:	4a4d      	ldr	r2, [pc, #308]	; (8007364 <main+0x200>)
 8007230:	494b      	ldr	r1, [pc, #300]	; (8007360 <main+0x1fc>)
 8007232:	4849      	ldr	r0, [pc, #292]	; (8007358 <main+0x1f4>)
 8007234:	f013 fc78 	bl	801ab28 <siprintf>
 8007238:	4847      	ldr	r0, [pc, #284]	; (8007358 <main+0x1f4>)
 800723a:	f7fe ffe5 	bl	8006208 <common_Perf>
 800723e:	2000      	movs	r0, #0
 8007240:	f013 fa70 	bl	801a724 <exit>

    //SETTER OP DRITT GREIER
    LwIP_StructInit(&myConn, &hDevice, boardDetails.mac);
 8007244:	f107 0308 	add.w	r3, r7, #8
 8007248:	f103 020e 	add.w	r2, r3, #14
 800724c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8007250:	f107 031c 	add.w	r3, r7, #28
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff fc0a 	bl	8006a6e <LwIP_StructInit>
      LwipADIN1110Init, ethernet_input);

      netif_set_default(&eth->netif);
      netif_set_up(&eth->netif);
     */
    LwIP_Init(&myConn, &boardDetails);
 800725a:	f107 0208 	add.w	r2, r7, #8
 800725e:	f107 031c 	add.w	r3, r7, #28
 8007262:	4611      	mov	r1, r2
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff fd6f 	bl	8006d48 <LwIP_Init>
    LwIP_ADIN1110LinkInput(&myConn.netif);
 800726a:	f107 031c 	add.w	r3, r7, #28
 800726e:	3304      	adds	r3, #4
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff fb07 	bl	8006884 <LwIP_ADIN1110LinkInput>
    BSP_delayMs(500);
 8007276:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800727a:	f7fe fe7f 	bl	8005f7c <BSP_delayMs>

    netif_set_link_up(&myConn.netif);
 800727e:	f107 031c 	add.w	r3, r7, #28
 8007282:	3304      	adds	r3, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f008 fe47 	bl	800ff18 <netif_set_link_up>
    tcpecho_raw_init(buffer);
 800728a:	4837      	ldr	r0, [pc, #220]	; (8007368 <main+0x204>)
 800728c:	f000 fe12 	bl	8007eb4 <tcpecho_raw_init>


    while(1)
    {

     HAL_ADC_Start(&hadc1);  // Start ADC conversion
 8007290:	4836      	ldr	r0, [pc, #216]	; (800736c <main+0x208>)
 8007292:	f001 fb1d 	bl	80088d0 <HAL_ADC_Start>

     // Poll for conversion completion with a timeout of 20 ms
     HAL_ADC_PollForConversion(&hadc1, 20);
 8007296:	2114      	movs	r1, #20
 8007298:	4834      	ldr	r0, [pc, #208]	; (800736c <main+0x208>)
 800729a:	f001 fbaf 	bl	80089fc <HAL_ADC_PollForConversion>

     // Get the ADC value after conversion completion
     adcValue = HAL_ADC_GetValue(&hadc1);
 800729e:	4833      	ldr	r0, [pc, #204]	; (800736c <main+0x208>)
 80072a0:	f001 fc3b 	bl	8008b1a <HAL_ADC_GetValue>
 80072a4:	4603      	mov	r3, r0
 80072a6:	4a32      	ldr	r2, [pc, #200]	; (8007370 <main+0x20c>)
 80072a8:	6013      	str	r3, [r2, #0]

     // Stop ADC conversion
     HAL_ADC_Stop(&hadc1);
 80072aa:	4830      	ldr	r0, [pc, #192]	; (800736c <main+0x208>)
 80072ac:	f001 fb73 	bl	8008996 <HAL_ADC_Stop>

     // Convert the integer ADC value to a string and store it in buffer
     snprintf(buffer, sizeof(buffer), "Value: %lu \r\n", adcValue);
 80072b0:	4b2f      	ldr	r3, [pc, #188]	; (8007370 <main+0x20c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a2f      	ldr	r2, [pc, #188]	; (8007374 <main+0x210>)
 80072b6:	2114      	movs	r1, #20
 80072b8:	482b      	ldr	r0, [pc, #172]	; (8007368 <main+0x204>)
 80072ba:	f013 fc01 	bl	801aac0 <sniprintf>

     // Transmit the string via UART
     HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80072be:	482a      	ldr	r0, [pc, #168]	; (8007368 <main+0x204>)
 80072c0:	f7f8 ffa8 	bl	8000214 <strlen>
 80072c4:	4603      	mov	r3, r0
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072cc:	4926      	ldr	r1, [pc, #152]	; (8007368 <main+0x204>)
 80072ce:	482a      	ldr	r0, [pc, #168]	; (8007378 <main+0x214>)
 80072d0:	f005 fd2e 	bl	800cd30 <HAL_UART_Transmit>

     if (adcValue > 1 ){
 80072d4:	4b26      	ldr	r3, [pc, #152]	; (8007370 <main+0x20c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d903      	bls.n	80072e4 <main+0x180>
    	  BSP_FuncLed2(true);
 80072dc:	2001      	movs	r0, #1
 80072de:	f7fe fedb 	bl	8006098 <BSP_FuncLed2>
 80072e2:	e002      	b.n	80072ea <main+0x186>
     }
     else BSP_FuncLed2(false);
 80072e4:	2000      	movs	r0, #0
 80072e6:	f7fe fed7 	bl	8006098 <BSP_FuncLed2>

     BSP_delayMs(500);
 80072ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072ee:	f7fe fe45 	bl	8005f7c <BSP_delayMs>

     uint32_t now  = BSP_SysNow();
 80072f2:	f7fe ff2a 	bl	800614a <BSP_SysNow>
 80072f6:	66f8      	str	r0, [r7, #108]	; 0x6c

  	if (now - heartbeatCheckTime >= 250)
 80072f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2bf9      	cmp	r3, #249	; 0xf9
 8007300:	d915      	bls.n	800732e <main+0x1ca>
  	      {
  	        heartbeatCheckTime = now;
 8007302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007304:	677b      	str	r3, [r7, #116]	; 0x74

  	        BSP_HeartBeat();
 8007306:	f7fe fe99 	bl	800603c <BSP_HeartBeat>

  	        adin1110_GetLinkStatus(hDevice, &linkStatus);
 800730a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800730c:	1dfa      	adds	r2, r7, #7
 800730e:	4611      	mov	r1, r2
 8007310:	4618      	mov	r0, r3
 8007312:	f7fe fdab 	bl	8005e6c <adin1110_GetLinkStatus>

  	        if ( linkStatus == ADI_ETH_LINK_STATUS_UP )
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d103      	bne.n	8007324 <main+0x1c0>
  	        	BSP_FuncLed1(true);
 800731c:	2001      	movs	r0, #1
 800731e:	f7fe fea9 	bl	8006074 <BSP_FuncLed1>
 8007322:	e002      	b.n	800732a <main+0x1c6>



  	        else
  	        	BSP_FuncLed1(false);
 8007324:	2000      	movs	r0, #0
 8007326:	f7fe fea5 	bl	8006074 <BSP_FuncLed1>

  	        sys_check_timeouts();
 800732a:	f00e fccf 	bl	8015ccc <sys_check_timeouts>
  	      }

  	      if ( LwIP_ADIN1110LinkInput(&myConn.netif) == 0)
 800732e:	f107 031c 	add.w	r3, r7, #28
 8007332:	3304      	adds	r3, #4
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff faa5 	bl	8006884 <LwIP_ADIN1110LinkInput>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d103      	bne.n	8007348 <main+0x1e4>
  	    	  BSP_ErrorLed(false);
 8007340:	2000      	movs	r0, #0
 8007342:	f7fe fe85 	bl	8006050 <BSP_ErrorLed>
 8007346:	e7a3      	b.n	8007290 <main+0x12c>
  	      else
  	    	  BSP_ErrorLed(true);
 8007348:	2001      	movs	r0, #1
 800734a:	f7fe fe81 	bl	8006050 <BSP_ErrorLed>
    {
 800734e:	e79f      	b.n	8007290 <main+0x12c>
 8007350:	0801bc9c 	.word	0x0801bc9c
 8007354:	0801bcb0 	.word	0x0801bcb0
 8007358:	20001168 	.word	0x20001168
 800735c:	0801bcb8 	.word	0x0801bcb8
 8007360:	0801bcc8 	.word	0x0801bcc8
 8007364:	0801bce8 	.word	0x0801bce8
 8007368:	2000713c 	.word	0x2000713c
 800736c:	200070d4 	.word	0x200070d4
 8007370:	20000128 	.word	0x20000128
 8007374:	0801bd04 	.word	0x0801bd04
 8007378:	20007290 	.word	0x20007290

0800737c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007382:	463b      	mov	r3, r7
 8007384:	2200      	movs	r2, #0
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	605a      	str	r2, [r3, #4]
 800738a:	609a      	str	r2, [r3, #8]
 800738c:	60da      	str	r2, [r3, #12]
 800738e:	611a      	str	r2, [r3, #16]
 8007390:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007392:	4b24      	ldr	r3, [pc, #144]	; (8007424 <MX_ADC1_Init+0xa8>)
 8007394:	4a24      	ldr	r2, [pc, #144]	; (8007428 <MX_ADC1_Init+0xac>)
 8007396:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007398:	4b22      	ldr	r3, [pc, #136]	; (8007424 <MX_ADC1_Init+0xa8>)
 800739a:	2200      	movs	r2, #0
 800739c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800739e:	4b21      	ldr	r3, [pc, #132]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80073a4:	4b1f      	ldr	r3, [pc, #124]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80073aa:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80073b0:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073b2:	2204      	movs	r2, #4
 80073b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80073b6:	4b1b      	ldr	r3, [pc, #108]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80073bc:	4b19      	ldr	r3, [pc, #100]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073be:	2200      	movs	r2, #0
 80073c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80073c2:	4b18      	ldr	r3, [pc, #96]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073c4:	2201      	movs	r2, #1
 80073c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80073c8:	4b16      	ldr	r3, [pc, #88]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80073d0:	4b14      	ldr	r3, [pc, #80]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80073d6:	4b13      	ldr	r3, [pc, #76]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073d8:	2200      	movs	r2, #0
 80073da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80073dc:	4b11      	ldr	r3, [pc, #68]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80073ea:	4b0e      	ldr	r3, [pc, #56]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80073f2:	480c      	ldr	r0, [pc, #48]	; (8007424 <MX_ADC1_Init+0xa8>)
 80073f4:	f001 f91c 	bl	8008630 <HAL_ADC_Init>

  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80073f8:	4b0c      	ldr	r3, [pc, #48]	; (800742c <MX_ADC1_Init+0xb0>)
 80073fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80073fc:	2306      	movs	r3, #6
 80073fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007400:	2300      	movs	r3, #0
 8007402:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007404:	237f      	movs	r3, #127	; 0x7f
 8007406:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007408:	2304      	movs	r3, #4
 800740a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007410:	463b      	mov	r3, r7
 8007412:	4619      	mov	r1, r3
 8007414:	4803      	ldr	r0, [pc, #12]	; (8007424 <MX_ADC1_Init+0xa8>)
 8007416:	f001 fb8d 	bl	8008b34 <HAL_ADC_ConfigChannel>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800741a:	bf00      	nop
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	200070d4 	.word	0x200070d4
 8007428:	50040000 	.word	0x50040000
 800742c:	36902000 	.word	0x36902000

08007430 <ETH_SPI_Init>:
DMA_HandleTypeDef hDmaEthSpiTx;
DMA_HandleTypeDef hDmaEthSpiRx;

/* ETH_SPI init function */
HAL_StatusTypeDef ETH_SPI_Init(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef   result = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	71fb      	strb	r3, [r7, #7]

  hEthSpi.Instance = ETH_SPI;
 800743a:	4b20      	ldr	r3, [pc, #128]	; (80074bc <ETH_SPI_Init+0x8c>)
 800743c:	4a20      	ldr	r2, [pc, #128]	; (80074c0 <ETH_SPI_Init+0x90>)
 800743e:	601a      	str	r2, [r3, #0]
  hEthSpi.Init.Mode = SPI_MODE_MASTER;
 8007440:	4b1e      	ldr	r3, [pc, #120]	; (80074bc <ETH_SPI_Init+0x8c>)
 8007442:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007446:	605a      	str	r2, [r3, #4]
  hEthSpi.Init.Direction = SPI_DIRECTION_2LINES;
 8007448:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <ETH_SPI_Init+0x8c>)
 800744a:	2200      	movs	r2, #0
 800744c:	609a      	str	r2, [r3, #8]
  hEthSpi.Init.DataSize = SPI_DATASIZE_8BIT;
 800744e:	4b1b      	ldr	r3, [pc, #108]	; (80074bc <ETH_SPI_Init+0x8c>)
 8007450:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007454:	60da      	str	r2, [r3, #12]
  hEthSpi.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007456:	4b19      	ldr	r3, [pc, #100]	; (80074bc <ETH_SPI_Init+0x8c>)
 8007458:	2200      	movs	r2, #0
 800745a:	611a      	str	r2, [r3, #16]
  hEthSpi.Init.CLKPhase = SPI_PHASE_1EDGE;
 800745c:	4b17      	ldr	r3, [pc, #92]	; (80074bc <ETH_SPI_Init+0x8c>)
 800745e:	2200      	movs	r2, #0
 8007460:	615a      	str	r2, [r3, #20]
  hEthSpi.Init.NSS = SPI_NSS_SOFT;
 8007462:	4b16      	ldr	r3, [pc, #88]	; (80074bc <ETH_SPI_Init+0x8c>)
 8007464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007468:	619a      	str	r2, [r3, #24]
  hEthSpi.Init.BaudRatePrescaler = BSP_CLK_CFG_SPI_BAUDPRESCALER;
 800746a:	4b14      	ldr	r3, [pc, #80]	; (80074bc <ETH_SPI_Init+0x8c>)
 800746c:	2200      	movs	r2, #0
 800746e:	61da      	str	r2, [r3, #28]
  hEthSpi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007470:	4b12      	ldr	r3, [pc, #72]	; (80074bc <ETH_SPI_Init+0x8c>)
 8007472:	2200      	movs	r2, #0
 8007474:	621a      	str	r2, [r3, #32]
  hEthSpi.Init.TIMode = SPI_TIMODE_DISABLE;
 8007476:	4b11      	ldr	r3, [pc, #68]	; (80074bc <ETH_SPI_Init+0x8c>)
 8007478:	2200      	movs	r2, #0
 800747a:	625a      	str	r2, [r3, #36]	; 0x24
  hEthSpi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800747c:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <ETH_SPI_Init+0x8c>)
 800747e:	2200      	movs	r2, #0
 8007480:	629a      	str	r2, [r3, #40]	; 0x28
  hEthSpi.Init.CRCPolynomial = 7;
 8007482:	4b0e      	ldr	r3, [pc, #56]	; (80074bc <ETH_SPI_Init+0x8c>)
 8007484:	2207      	movs	r2, #7
 8007486:	62da      	str	r2, [r3, #44]	; 0x2c
  hEthSpi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <ETH_SPI_Init+0x8c>)
 800748a:	2200      	movs	r2, #0
 800748c:	631a      	str	r2, [r3, #48]	; 0x30
  hEthSpi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800748e:	4b0b      	ldr	r3, [pc, #44]	; (80074bc <ETH_SPI_Init+0x8c>)
 8007490:	2200      	movs	r2, #0
 8007492:	635a      	str	r2, [r3, #52]	; 0x34

  status = HAL_OK;
 8007494:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <ETH_SPI_Init+0x94>)
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
  result = HAL_SPI_Init(&hEthSpi);
 800749a:	4808      	ldr	r0, [pc, #32]	; (80074bc <ETH_SPI_Init+0x8c>)
 800749c:	f004 fc1a 	bl	800bcd4 <HAL_SPI_Init>
 80074a0:	4603      	mov	r3, r0
 80074a2:	71fb      	strb	r3, [r7, #7]

  if (status != HAL_OK)
 80074a4:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <ETH_SPI_Init+0x94>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <ETH_SPI_Init+0x82>
  {
      result = status;
 80074ac:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <ETH_SPI_Init+0x94>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	71fb      	strb	r3, [r7, #7]
  }

  return result;
 80074b2:	79fb      	ldrb	r3, [r7, #7]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	2000715c 	.word	0x2000715c
 80074c0:	40003800 	.word	0x40003800
 80074c4:	20007150 	.word	0x20007150

080074c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef   result = HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074d6:	f107 0310 	add.w	r3, r7, #16
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	605a      	str	r2, [r3, #4]
 80074e0:	609a      	str	r2, [r3, #8]
 80074e2:	60da      	str	r2, [r3, #12]
 80074e4:	611a      	str	r2, [r3, #16]

  if(spiHandle->Instance == ETH_SPI)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a57      	ldr	r2, [pc, #348]	; (8007648 <HAL_SPI_MspInit+0x180>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	f040 80a2 	bne.w	8007636 <HAL_SPI_MspInit+0x16e>
  {
    ETH_SPI_CLK_ENABLE();
 80074f2:	4b56      	ldr	r3, [pc, #344]	; (800764c <HAL_SPI_MspInit+0x184>)
 80074f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f6:	4a55      	ldr	r2, [pc, #340]	; (800764c <HAL_SPI_MspInit+0x184>)
 80074f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074fc:	6593      	str	r3, [r2, #88]	; 0x58
 80074fe:	4b53      	ldr	r3, [pc, #332]	; (800764c <HAL_SPI_MspInit+0x184>)
 8007500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = ETH_SPI_CLK_Pin;
 800750a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800750e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007510:	2302      	movs	r3, #2
 8007512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007514:	2300      	movs	r3, #0
 8007516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007518:	2303      	movs	r3, #3
 800751a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = ETH_SPI_CLK_AF;
 800751c:	2305      	movs	r3, #5
 800751e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ETH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8007520:	f107 0310 	add.w	r3, r7, #16
 8007524:	4619      	mov	r1, r3
 8007526:	484a      	ldr	r0, [pc, #296]	; (8007650 <HAL_SPI_MspInit+0x188>)
 8007528:	f002 fd14 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_SPI_MOSI_Pin;
 800752c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007532:	2302      	movs	r3, #2
 8007534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007536:	2300      	movs	r3, #0
 8007538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800753a:	2303      	movs	r3, #3
 800753c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = ETH_SPI_MOSI_AF;
 800753e:	2305      	movs	r3, #5
 8007540:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ETH_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8007542:	f107 0310 	add.w	r3, r7, #16
 8007546:	4619      	mov	r1, r3
 8007548:	4841      	ldr	r0, [pc, #260]	; (8007650 <HAL_SPI_MspInit+0x188>)
 800754a:	f002 fd03 	bl	8009f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_SPI_MISO_Pin;
 800754e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007554:	2302      	movs	r3, #2
 8007556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007558:	2300      	movs	r3, #0
 800755a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800755c:	2303      	movs	r3, #3
 800755e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = ETH_SPI_MISO_AF;
 8007560:	2305      	movs	r3, #5
 8007562:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ETH_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8007564:	f107 0310 	add.w	r3, r7, #16
 8007568:	4619      	mov	r1, r3
 800756a:	4839      	ldr	r0, [pc, #228]	; (8007650 <HAL_SPI_MspInit+0x188>)
 800756c:	f002 fcf2 	bl	8009f54 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB9);
 8007570:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007574:	f002 feca 	bl	800a30c <HAL_I2CEx_EnableFastModePlus>

    /* SPI DMA Init */
    /* SPI_TX Init */
    hDmaEthSpiTx.Instance = DMA1_Channel1;
 8007578:	4b36      	ldr	r3, [pc, #216]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 800757a:	4a37      	ldr	r2, [pc, #220]	; (8007658 <HAL_SPI_MspInit+0x190>)
 800757c:	601a      	str	r2, [r3, #0]
    hDmaEthSpiTx.Init.Request = ETH_SPI_DMA_REQ_TX;
 800757e:	4b35      	ldr	r3, [pc, #212]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 8007580:	220d      	movs	r2, #13
 8007582:	605a      	str	r2, [r3, #4]
    hDmaEthSpiTx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007584:	4b33      	ldr	r3, [pc, #204]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 8007586:	2210      	movs	r2, #16
 8007588:	609a      	str	r2, [r3, #8]
    hDmaEthSpiTx.Init.PeriphInc = DMA_PINC_DISABLE;
 800758a:	4b32      	ldr	r3, [pc, #200]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 800758c:	2200      	movs	r2, #0
 800758e:	60da      	str	r2, [r3, #12]
    hDmaEthSpiTx.Init.MemInc = DMA_MINC_ENABLE;
 8007590:	4b30      	ldr	r3, [pc, #192]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 8007592:	2280      	movs	r2, #128	; 0x80
 8007594:	611a      	str	r2, [r3, #16]
    hDmaEthSpiTx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007596:	4b2f      	ldr	r3, [pc, #188]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 8007598:	2200      	movs	r2, #0
 800759a:	615a      	str	r2, [r3, #20]
    hDmaEthSpiTx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800759c:	4b2d      	ldr	r3, [pc, #180]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 800759e:	2200      	movs	r2, #0
 80075a0:	619a      	str	r2, [r3, #24]
    hDmaEthSpiTx.Init.Mode = DMA_NORMAL;
 80075a2:	4b2c      	ldr	r3, [pc, #176]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	61da      	str	r2, [r3, #28]
    hDmaEthSpiTx.Init.Priority = DMA_PRIORITY_LOW;
 80075a8:	4b2a      	ldr	r3, [pc, #168]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	621a      	str	r2, [r3, #32]
    result = HAL_DMA_Init(&hDmaEthSpiTx);
 80075ae:	4829      	ldr	r0, [pc, #164]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 80075b0:	f002 f9a2 	bl	80098f8 <HAL_DMA_Init>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (result != HAL_OK)
 80075ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d13b      	bne.n	800763a <HAL_SPI_MspInit+0x172>
    {
      goto end;
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hDmaEthSpiTx);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a23      	ldr	r2, [pc, #140]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 80075c6:	655a      	str	r2, [r3, #84]	; 0x54
 80075c8:	4a22      	ldr	r2, [pc, #136]	; (8007654 <HAL_SPI_MspInit+0x18c>)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI_RX Init */
    hDmaEthSpiRx.Instance = DMA1_Channel2;
 80075ce:	4b23      	ldr	r3, [pc, #140]	; (800765c <HAL_SPI_MspInit+0x194>)
 80075d0:	4a23      	ldr	r2, [pc, #140]	; (8007660 <HAL_SPI_MspInit+0x198>)
 80075d2:	601a      	str	r2, [r3, #0]
    hDmaEthSpiRx.Init.Request = ETH_SPI_DMA_REQ_RX;
 80075d4:	4b21      	ldr	r3, [pc, #132]	; (800765c <HAL_SPI_MspInit+0x194>)
 80075d6:	220c      	movs	r2, #12
 80075d8:	605a      	str	r2, [r3, #4]
    hDmaEthSpiRx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075da:	4b20      	ldr	r3, [pc, #128]	; (800765c <HAL_SPI_MspInit+0x194>)
 80075dc:	2200      	movs	r2, #0
 80075de:	609a      	str	r2, [r3, #8]
    hDmaEthSpiRx.Init.PeriphInc = DMA_PINC_DISABLE;
 80075e0:	4b1e      	ldr	r3, [pc, #120]	; (800765c <HAL_SPI_MspInit+0x194>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	60da      	str	r2, [r3, #12]
    hDmaEthSpiRx.Init.MemInc = DMA_MINC_ENABLE;
 80075e6:	4b1d      	ldr	r3, [pc, #116]	; (800765c <HAL_SPI_MspInit+0x194>)
 80075e8:	2280      	movs	r2, #128	; 0x80
 80075ea:	611a      	str	r2, [r3, #16]
    hDmaEthSpiRx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075ec:	4b1b      	ldr	r3, [pc, #108]	; (800765c <HAL_SPI_MspInit+0x194>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	615a      	str	r2, [r3, #20]
    hDmaEthSpiRx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075f2:	4b1a      	ldr	r3, [pc, #104]	; (800765c <HAL_SPI_MspInit+0x194>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	619a      	str	r2, [r3, #24]
    hDmaEthSpiRx.Init.Mode = DMA_NORMAL;
 80075f8:	4b18      	ldr	r3, [pc, #96]	; (800765c <HAL_SPI_MspInit+0x194>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	61da      	str	r2, [r3, #28]
    hDmaEthSpiRx.Init.Priority = DMA_PRIORITY_LOW;
 80075fe:	4b17      	ldr	r3, [pc, #92]	; (800765c <HAL_SPI_MspInit+0x194>)
 8007600:	2200      	movs	r2, #0
 8007602:	621a      	str	r2, [r3, #32]
    result = HAL_DMA_Init(&hDmaEthSpiRx);
 8007604:	4815      	ldr	r0, [pc, #84]	; (800765c <HAL_SPI_MspInit+0x194>)
 8007606:	f002 f977 	bl	80098f8 <HAL_DMA_Init>
 800760a:	4603      	mov	r3, r0
 800760c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (result != HAL_OK)
 8007610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007614:	2b00      	cmp	r3, #0
 8007616:	d112      	bne.n	800763e <HAL_SPI_MspInit+0x176>
    {
      goto end;
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hDmaEthSpiRx);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a10      	ldr	r2, [pc, #64]	; (800765c <HAL_SPI_MspInit+0x194>)
 800761c:	659a      	str	r2, [r3, #88]	; 0x58
 800761e:	4a0f      	ldr	r2, [pc, #60]	; (800765c <HAL_SPI_MspInit+0x194>)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6293      	str	r3, [r2, #40]	; 0x28

    /* For interrupt-based SPI operation */
    HAL_NVIC_SetPriority(ETH_SPI_IRQn, 0, 0);
 8007624:	2200      	movs	r2, #0
 8007626:	2100      	movs	r1, #0
 8007628:	2024      	movs	r0, #36	; 0x24
 800762a:	f002 f920 	bl	800986e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_SPI_IRQn);
 800762e:	2024      	movs	r0, #36	; 0x24
 8007630:	f002 f939 	bl	80098a6 <HAL_NVIC_EnableIRQ>
  }

end:
  return;
 8007634:	e004      	b.n	8007640 <HAL_SPI_MspInit+0x178>
end:
 8007636:	bf00      	nop
 8007638:	e002      	b.n	8007640 <HAL_SPI_MspInit+0x178>
      goto end;
 800763a:	bf00      	nop
 800763c:	e000      	b.n	8007640 <HAL_SPI_MspInit+0x178>
      goto end;
 800763e:	bf00      	nop
  return;
 8007640:	bf00      	nop
}
 8007642:	3728      	adds	r7, #40	; 0x28
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40003800 	.word	0x40003800
 800764c:	40021000 	.word	0x40021000
 8007650:	48000400 	.word	0x48000400
 8007654:	200071c0 	.word	0x200071c0
 8007658:	40020008 	.word	0x40020008
 800765c:	20007220 	.word	0x20007220
 8007660:	4002001c 	.word	0x4002001c

08007664 <HAL_SPI_Write_Read>:
  }
}


HAL_StatusTypeDef HAL_SPI_Write_Read(uint8_t *pBufferTx, uint8_t *pBufferRx, uint32_t nbBytes, bool useDma)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef   status;

    /* Assert SS. */
    HAL_GPIO_WritePin(ETH_SPI_SS_GPIO_Port, ETH_SPI_SS_Pin, GPIO_PIN_RESET);
 8007672:	2200      	movs	r2, #0
 8007674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007678:	480e      	ldr	r0, [pc, #56]	; (80076b4 <HAL_SPI_Write_Read+0x50>)
 800767a:	f002 fdfd 	bl	800a278 <HAL_GPIO_WritePin>

    if (useDma)
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d009      	beq.n	8007698 <HAL_SPI_Write_Read+0x34>
    {
        status = HAL_SPI_TransmitReceive_DMA(&hEthSpi, (uint8_t *)pBufferTx, (uint8_t *)pBufferRx, nbBytes);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	b29b      	uxth	r3, r3
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	480a      	ldr	r0, [pc, #40]	; (80076b8 <HAL_SPI_Write_Read+0x54>)
 800768e:	f004 fc73 	bl	800bf78 <HAL_SPI_TransmitReceive_DMA>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]
 8007696:	e008      	b.n	80076aa <HAL_SPI_Write_Read+0x46>
    }
    else
    {
        status = HAL_SPI_TransmitReceive_IT(&hEthSpi, (uint8_t *)pBufferTx, (uint8_t *)pBufferRx, nbBytes);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	b29b      	uxth	r3, r3
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	68f9      	ldr	r1, [r7, #12]
 80076a0:	4805      	ldr	r0, [pc, #20]	; (80076b8 <HAL_SPI_Write_Read+0x54>)
 80076a2:	f004 fbbb 	bl	800be1c <HAL_SPI_TransmitReceive_IT>
 80076a6:	4603      	mov	r3, r0
 80076a8:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	48000400 	.word	0x48000400
 80076b8:	2000715c 	.word	0x2000715c

080076bc <HAL_SPI_Register_Callback>:

uint32_t HAL_SPI_Register_Callback(ADI_CB const *pfCallback, void *const pCBParam)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
    gpfSpiCallback = (ADI_CB)pfCallback;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a05      	ldr	r2, [pc, #20]	; (80076e0 <HAL_SPI_Register_Callback+0x24>)
 80076ca:	6013      	str	r3, [r2, #0]
    gpSpiCBParam = pCBParam ;
 80076cc:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <HAL_SPI_Register_Callback+0x28>)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	6013      	str	r3, [r2, #0]

    return 0;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	20007154 	.word	0x20007154
 80076e4:	20007158 	.word	0x20007158

080076e8 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == ETH_SPI)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a09      	ldr	r2, [pc, #36]	; (800771c <HAL_SPI_TxRxCpltCallback+0x34>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d10c      	bne.n	8007714 <HAL_SPI_TxRxCpltCallback+0x2c>
    {
        /* Deassert SS */
        HAL_GPIO_WritePin(ETH_SPI_SS_GPIO_Port, ETH_SPI_SS_Pin, GPIO_PIN_SET);
 80076fa:	2201      	movs	r2, #1
 80076fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007700:	4807      	ldr	r0, [pc, #28]	; (8007720 <HAL_SPI_TxRxCpltCallback+0x38>)
 8007702:	f002 fdb9 	bl	800a278 <HAL_GPIO_WritePin>

        (*gpfSpiCallback)(gpSpiCBParam, 0, NULL);
 8007706:	4b07      	ldr	r3, [pc, #28]	; (8007724 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a07      	ldr	r2, [pc, #28]	; (8007728 <HAL_SPI_TxRxCpltCallback+0x40>)
 800770c:	6810      	ldr	r0, [r2, #0]
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	4798      	blx	r3
    }
}
 8007714:	bf00      	nop
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	40003800 	.word	0x40003800
 8007720:	48000400 	.word	0x48000400
 8007724:	20007154 	.word	0x20007154
 8007728:	20007158 	.word	0x20007158

0800772c <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == ETH_SPI)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a09      	ldr	r2, [pc, #36]	; (8007760 <HAL_SPI_ErrorCallback+0x34>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d10c      	bne.n	8007758 <HAL_SPI_ErrorCallback+0x2c>
  {
    HAL_GPIO_WritePin(ETH_SPI_SS_GPIO_Port, ETH_SPI_SS_Pin, GPIO_PIN_SET);//deassert SS
 800773e:	2201      	movs	r2, #1
 8007740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007744:	4807      	ldr	r0, [pc, #28]	; (8007764 <HAL_SPI_ErrorCallback+0x38>)
 8007746:	f002 fd97 	bl	800a278 <HAL_GPIO_WritePin>

    (*gpfSpiCallback)(gpSpiCBParam, 1, NULL);
 800774a:	4b07      	ldr	r3, [pc, #28]	; (8007768 <HAL_SPI_ErrorCallback+0x3c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a07      	ldr	r2, [pc, #28]	; (800776c <HAL_SPI_ErrorCallback+0x40>)
 8007750:	6810      	ldr	r0, [r2, #0]
 8007752:	2200      	movs	r2, #0
 8007754:	2101      	movs	r1, #1
 8007756:	4798      	blx	r3
  }
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	40003800 	.word	0x40003800
 8007764:	48000400 	.word	0x48000400
 8007768:	20007154 	.word	0x20007154
 800776c:	20007158 	.word	0x20007158

08007770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007776:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <HAL_MspInit+0x44>)
 8007778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800777a:	4a0e      	ldr	r2, [pc, #56]	; (80077b4 <HAL_MspInit+0x44>)
 800777c:	f043 0301 	orr.w	r3, r3, #1
 8007780:	6613      	str	r3, [r2, #96]	; 0x60
 8007782:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <HAL_MspInit+0x44>)
 8007784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	607b      	str	r3, [r7, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <HAL_MspInit+0x44>)
 8007790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007792:	4a08      	ldr	r2, [pc, #32]	; (80077b4 <HAL_MspInit+0x44>)
 8007794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007798:	6593      	str	r3, [r2, #88]	; 0x58
 800779a:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <HAL_MspInit+0x44>)
 800779c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077a6:	bf00      	nop
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40021000 	.word	0x40021000

080077b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80077bc:	bf00      	nop
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077c6:	b480      	push	{r7}
 80077c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077ca:	e7fe      	b.n	80077ca <HardFault_Handler+0x4>

080077cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077d0:	e7fe      	b.n	80077d0 <MemManage_Handler+0x4>

080077d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077d2:	b480      	push	{r7}
 80077d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077d6:	e7fe      	b.n	80077d6 <BusFault_Handler+0x4>

080077d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077dc:	e7fe      	b.n	80077dc <UsageFault_Handler+0x4>

080077de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077de:	b480      	push	{r7}
 80077e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  while(1)
 80077e2:	e7fe      	b.n	80077e2 <SVC_Handler+0x4>

080077e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  while(1)
 80077e8:	e7fe      	b.n	80077e8 <DebugMon_Handler+0x4>

080077ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80077ea:	b480      	push	{r7}
 80077ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  while(1)
 80077ee:	e7fe      	b.n	80077ee <PendSV_Handler+0x4>

080077f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077f4:	f000 fcd4 	bl	80081a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077f8:	bf00      	nop
 80077fa:	bd80      	pop	{r7, pc}

080077fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hDmaEthSpiTx);
 8007800:	4802      	ldr	r0, [pc, #8]	; (800780c <DMA1_Channel1_IRQHandler+0x10>)
 8007802:	f002 fa57 	bl	8009cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007806:	bf00      	nop
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	200071c0 	.word	0x200071c0

08007810 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hDmaEthSpiRx);
 8007814:	4802      	ldr	r0, [pc, #8]	; (8007820 <DMA1_Channel2_IRQHandler+0x10>)
 8007816:	f002 fa4d 	bl	8009cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800781a:	bf00      	nop
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20007220 	.word	0x20007220

08007824 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8007828:	4802      	ldr	r0, [pc, #8]	; (8007834 <USART1_IRQHandler+0x10>)
 800782a:	f005 fb11 	bl	800ce50 <HAL_UART_IRQHandler>
}
 800782e:	bf00      	nop
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20007290 	.word	0x20007290

08007838 <EXTI15_10_IRQHandler>:
/* USER CODE BEGIN 1 */
void ETH_INT_N_IRQ_HANDLER(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ETH_INT_N_Pin);
 800783c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007840:	f002 fd4c 	bl	800a2dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007844:	bf00      	nop
 8007846:	bd80      	pop	{r7, pc}

08007848 <SPI2_IRQHandler>:
  * @brief  This function handles SPI interrupt request.
  * @param  None
  * @retval None
  */
void ETH_SPI_IRQ_HANDLER(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hEthSpi);
 800784c:	4802      	ldr	r0, [pc, #8]	; (8007858 <SPI2_IRQHandler+0x10>)
 800784e:	f004 fd17 	bl	800c280 <HAL_SPI_IRQHandler>
}
 8007852:	bf00      	nop
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	2000715c 	.word	0x2000715c

0800785c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
  return 1;
 8007860:	2301      	movs	r3, #1
}
 8007862:	4618      	mov	r0, r3
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <_kill>:

int _kill(int pid, int sig)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007876:	f013 fa61 	bl	801ad3c <__errno>
 800787a:	4603      	mov	r3, r0
 800787c:	2216      	movs	r2, #22
 800787e:	601a      	str	r2, [r3, #0]
  return -1;
 8007880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <_exit>:

void _exit (int status)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff ffe7 	bl	800786c <_kill>
  while (1) {}    /* Make sure we hang here */
 800789e:	e7fe      	b.n	800789e <_exit+0x12>

080078a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078ac:	2300      	movs	r3, #0
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	e00a      	b.n	80078c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80078b2:	f3af 8000 	nop.w
 80078b6:	4601      	mov	r1, r0
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	60ba      	str	r2, [r7, #8]
 80078be:	b2ca      	uxtb	r2, r1
 80078c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	3301      	adds	r3, #1
 80078c6:	617b      	str	r3, [r7, #20]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	dbf0      	blt.n	80078b2 <_read+0x12>
  }

  return len;
 80078d0:	687b      	ldr	r3, [r7, #4]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b086      	sub	sp, #24
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	e009      	b.n	8007900 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	60ba      	str	r2, [r7, #8]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	3301      	adds	r3, #1
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	429a      	cmp	r2, r3
 8007906:	dbf1      	blt.n	80078ec <_write+0x12>
  }
  return len;
 8007908:	687b      	ldr	r3, [r7, #4]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <_close>:

int _close(int file)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800791a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800791e:	4618      	mov	r0, r3
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800793a:	605a      	str	r2, [r3, #4]
  return 0;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <_isatty>:

int _isatty(int file)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007952:	2301      	movs	r3, #1
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <SystemClock_Config>:

#include "sysclock.h"


HAL_StatusTypeDef SystemClock_Config(void)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b0bc      	sub	sp, #240	; 0xf0
 800797e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef     result;

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007980:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007984:	2244      	movs	r2, #68	; 0x44
 8007986:	2100      	movs	r1, #0
 8007988:	4618      	mov	r0, r3
 800798a:	f013 f95a 	bl	801ac42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800798e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	605a      	str	r2, [r3, #4]
 8007998:	609a      	str	r2, [r3, #8]
 800799a:	60da      	str	r2, [r3, #12]
 800799c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800799e:	463b      	mov	r3, r7
 80079a0:	2294      	movs	r2, #148	; 0x94
 80079a2:	2100      	movs	r1, #0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f013 f94c 	bl	801ac42 <memset>

  /** Configure the main internal regulator output voltage
  */
  result = HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80079aa:	2000      	movs	r0, #0
 80079ac:	f002 fcee 	bl	800a38c <HAL_PWREx_ControlVoltageScaling>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  if (result != HAL_OK)
 80079b6:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d15f      	bne.n	8007a7e <SystemClock_Config+0x104>
    goto end;
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80079be:	2312      	movs	r3, #18
 80079c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80079c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80079cc:	2340      	movs	r3, #64	; 0x40
 80079ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80079de:	2360      	movs	r3, #96	; 0x60
 80079e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80079e4:	2302      	movs	r3, #2
 80079e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLM = 1;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLN = BSP_CLK_CFG_PLLN;
 80079f6:	2330      	movs	r3, #48	; 0x30
 80079f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80079fc:	2302      	movs	r3, #2
 80079fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007a02:	2302      	movs	r3, #2
 8007a04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLR = BSP_CLK_CFG_PLLR;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  result = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8007a0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007a12:	4618      	mov	r0, r3
 8007a14:	f002 fd6e 	bl	800a4f4 <HAL_RCC_OscConfig>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  if (result != HAL_OK)
 8007a1e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d12d      	bne.n	8007a82 <SystemClock_Config+0x108>
  {
    goto end;
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a26:	230f      	movs	r3, #15
 8007a28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a32:	2300      	movs	r3, #0
 8007a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB1CLKDivider = BSP_CLK_CFG_APB1CLKDIV;
 8007a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a40:	2300      	movs	r3, #0
 8007a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  result = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, BSP_CLK_CFG_FLASH_LATENCY);
 8007a46:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007a4a:	2104      	movs	r1, #4
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f003 f96b 	bl	800ad28 <HAL_RCC_ClockConfig>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  if (result != HAL_OK)
 8007a58:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d112      	bne.n	8007a86 <SystemClock_Config+0x10c>
  {
    goto end;
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007a60:	2301      	movs	r3, #1
 8007a62:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8007a64:	2302      	movs	r3, #2
 8007a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  result = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8007a68:	463b      	mov	r3, r7
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f003 fc1a 	bl	800b2a4 <HAL_RCCEx_PeriphCLKConfig>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  if (result != HAL_OK)
 8007a76:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8007a7a:	2b00      	cmp	r3, #0
  {
    goto end;
  }

end:
 8007a7c:	e004      	b.n	8007a88 <SystemClock_Config+0x10e>
    goto end;
 8007a7e:	bf00      	nop
 8007a80:	e002      	b.n	8007a88 <SystemClock_Config+0x10e>
    goto end;
 8007a82:	bf00      	nop
 8007a84:	e000      	b.n	8007a88 <SystemClock_Config+0x10e>
    goto end;
 8007a86:	bf00      	nop
  return result;
 8007a88:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	37f0      	adds	r7, #240	; 0xf0
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a9c:	4a14      	ldr	r2, [pc, #80]	; (8007af0 <_sbrk+0x5c>)
 8007a9e:	4b15      	ldr	r3, [pc, #84]	; (8007af4 <_sbrk+0x60>)
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007aa8:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <_sbrk+0x64>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d102      	bne.n	8007ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007ab0:	4b11      	ldr	r3, [pc, #68]	; (8007af8 <_sbrk+0x64>)
 8007ab2:	4a12      	ldr	r2, [pc, #72]	; (8007afc <_sbrk+0x68>)
 8007ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <_sbrk+0x64>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4413      	add	r3, r2
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d207      	bcs.n	8007ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007ac4:	f013 f93a 	bl	801ad3c <__errno>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	220c      	movs	r2, #12
 8007acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ad2:	e009      	b.n	8007ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007ad4:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <_sbrk+0x64>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007ada:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <_sbrk+0x64>)
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	4a05      	ldr	r2, [pc, #20]	; (8007af8 <_sbrk+0x64>)
 8007ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	200a0000 	.word	0x200a0000
 8007af4:	00000400 	.word	0x00000400
 8007af8:	20007280 	.word	0x20007280
 8007afc:	20007b20 	.word	0x20007b20

08007b00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007b04:	4b17      	ldr	r3, [pc, #92]	; (8007b64 <SystemInit+0x64>)
 8007b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0a:	4a16      	ldr	r2, [pc, #88]	; (8007b64 <SystemInit+0x64>)
 8007b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007b14:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <SystemInit+0x68>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a13      	ldr	r2, [pc, #76]	; (8007b68 <SystemInit+0x68>)
 8007b1a:	f043 0301 	orr.w	r3, r3, #1
 8007b1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007b20:	4b11      	ldr	r3, [pc, #68]	; (8007b68 <SystemInit+0x68>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007b26:	4b10      	ldr	r3, [pc, #64]	; (8007b68 <SystemInit+0x68>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a0f      	ldr	r2, [pc, #60]	; (8007b68 <SystemInit+0x68>)
 8007b2c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007b30:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007b34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007b36:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <SystemInit+0x68>)
 8007b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007b3e:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <SystemInit+0x68>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a09      	ldr	r2, [pc, #36]	; (8007b68 <SystemInit+0x68>)
 8007b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007b4a:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <SystemInit+0x68>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <SystemInit+0x64>)
 8007b52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007b56:	609a      	str	r2, [r3, #8]
#endif
}
 8007b58:	bf00      	nop
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	e000ed00 	.word	0xe000ed00
 8007b68:	40021000 	.word	0x40021000

08007b6c <tcpecho_raw_free>:
  struct pbuf *p;
};

static void
tcpecho_raw_free(struct tcpecho_raw_state *es)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  if (es != NULL) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00b      	beq.n	8007b92 <tcpecho_raw_free+0x26>
    if (es->p) {
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <tcpecho_raw_free+0x20>
      /* free the buffer chain if present */
      pbuf_free(es->p);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f008 fcb4 	bl	80104f4 <pbuf_free>
    }

    mem_free(es);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f007 ff42 	bl	800fa16 <mem_free>
  }  
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <tcpecho_raw_close>:

static void
tcpecho_raw_close(struct tcp_pcb *tpcb, struct tcpecho_raw_state *es)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
  tcp_arg(tpcb, NULL);
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f00a f83e 	bl	8011c28 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8007bac:	2100      	movs	r1, #0
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f00a f85d 	bl	8011c6e <tcp_sent>
  tcp_recv(tpcb, NULL);
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f00a f847 	bl	8011c4a <tcp_recv>
  tcp_err(tpcb, NULL);
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f00a f867 	bl	8011c92 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f00a f88b 	bl	8011ce4 <tcp_poll>

  tcpecho_raw_free(es);
 8007bce:	6838      	ldr	r0, [r7, #0]
 8007bd0:	f7ff ffcc 	bl	8007b6c <tcpecho_raw_free>

  tcp_close(tpcb);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f008 ffee 	bl	8010bb6 <tcp_close>
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <tcpecho_raw_send>:

static void
tcpecho_raw_send(struct tcp_pcb *tpcb, struct tcpecho_raw_state *es)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b086      	sub	sp, #24
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8007bf0:	e031      	b.n	8007c56 <tcpecho_raw_send+0x74>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb))) {
    ptr = es->p;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	6859      	ldr	r1, [r3, #4]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	895a      	ldrh	r2, [r3, #10]
 8007c00:	2301      	movs	r3, #1
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f00c fc70 	bl	80144e8 <tcp_write>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	75fb      	strb	r3, [r7, #23]
    if (wr_err == ERR_OK) {
 8007c0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d118      	bne.n	8007c46 <tcpecho_raw_send+0x64>
      u16_t plen;

      plen = ptr->len;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	895b      	ldrh	r3, [r3, #10]
 8007c18:	81fb      	strh	r3, [r7, #14]
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	609a      	str	r2, [r3, #8]
      if(es->p != NULL) {
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d004      	beq.n	8007c34 <tcpecho_raw_send+0x52>
        /* new reference! */
        pbuf_ref(es->p);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f008 fcca 	bl	80105c8 <pbuf_ref>
      }
      /* chop first pbuf from chain */
      pbuf_free(ptr);
 8007c34:	6938      	ldr	r0, [r7, #16]
 8007c36:	f008 fc5d 	bl	80104f4 <pbuf_free>
      /* we can read more data now */
      tcp_recved(tpcb, plen);
 8007c3a:	89fb      	ldrh	r3, [r7, #14]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f009 f9fe 	bl	8011040 <tcp_recved>
 8007c44:	e007      	b.n	8007c56 <tcpecho_raw_send+0x74>
    } else if(wr_err == ERR_MEM) {
 8007c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c4e:	d102      	bne.n	8007c56 <tcpecho_raw_send+0x74>
      /* we are low on memory, try later / harder, defer to poll */
      es->p = ptr;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	609a      	str	r2, [r3, #8]
         (es->p != NULL) && 
 8007c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10b      	bne.n	8007c76 <tcpecho_raw_send+0x94>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <tcpecho_raw_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb))) {
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	895a      	ldrh	r2, [r3, #10]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d9bd      	bls.n	8007bf2 <tcpecho_raw_send+0x10>
    } else {
      /* other problem ?? */
    }
  }
}
 8007c76:	bf00      	nop
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <tcpecho_raw_error>:

static void
tcpecho_raw_error(void *arg, err_t err)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  struct tcpecho_raw_state *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcpecho_raw_state *)arg;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	60fb      	str	r3, [r7, #12]

  tcpecho_raw_free(es);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7ff ff6c 	bl	8007b6c <tcpecho_raw_free>
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <tcpecho_raw_poll>:
// Define 'last_send_time'
// Function poll callback for the TCP echo server. Timer baserer seg til polling interval set i initialization.
static err_t tcpecho_raw_poll(void *arg, struct tcp_pcb *tpcb) {
 8007c9c:	b590      	push	{r4, r7, lr}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]

	// Retrieve the state structure til current TCP connection, passed as 'arg' basert på default LWIP -raw API.
	struct tcpecho_raw_state *es = (struct tcpecho_raw_state *)arg;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	617b      	str	r3, [r7, #20]

	// Get the current system time in milliseconds from the lwIP system clock.
	u32_t current_time = sys_now();
 8007caa:	f7fe fde3 	bl	8006874 <sys_now>
 8007cae:	6138      	str	r0, [r7, #16]

    // Check if 500ms
    if (current_time - last_send_time >= 500) {
 8007cb0:	4b18      	ldr	r3, [pc, #96]	; (8007d14 <tcpecho_raw_poll+0x78>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007cbc:	d31b      	bcc.n	8007cf6 <tcpecho_raw_poll+0x5a>


       // const char *msg = "Hello, this is a timed message! \n";
    	const char *msg = buffer;
 8007cbe:	4b16      	ldr	r3, [pc, #88]	; (8007d18 <tcpecho_raw_poll+0x7c>)
 8007cc0:	60fb      	str	r3, [r7, #12]

        // Check if there is enough space in the TCP send buffer to send the message.
        if (tcp_sndbuf(tpcb) > strlen(msg)) {
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007cc8:	461c      	mov	r4, r3
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7f8 faa2 	bl	8000214 <strlen>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	429c      	cmp	r4, r3
 8007cd4:	d90f      	bls.n	8007cf6 <tcpecho_raw_poll+0x5a>
        	 // Write the message to the TCP send buffer.
        	/* pcb: The TCP control block (PCB) -> Den init
			   data: Pointer to the data to be sent.
               len: Length of the data in bytes.
               flags: Control flag -> operation av tcp_write.*/
            tcp_write(tpcb, msg, strlen(msg), TCP_WRITE_FLAG_COPY);// Ensure that the message is actually sent out over the network.
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7f8 fa9c 	bl	8000214 <strlen>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	68f9      	ldr	r1, [r7, #12]
 8007ce4:	6838      	ldr	r0, [r7, #0]
 8007ce6:	f00c fbff 	bl	80144e8 <tcp_write>
             avoiding potential pitfalls like buffer overruns or unnecessary delays in data transmission.
             - https://lwip.fandom.com/wiki/Tuning_TCP
             */

            // Calls the internal lwIP function to process and send TCP packets.
            tcp_output(tpcb); //OUTPUT fra LWIP
 8007cea:	6838      	ldr	r0, [r7, #0]
 8007cec:	f00d f8c2 	bl	8014e74 <tcp_output>


            last_send_time = current_time;  // Update the last send time -> current time
 8007cf0:	4a08      	ldr	r2, [pc, #32]	; (8007d14 <tcpecho_raw_poll+0x78>)
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	6013      	str	r3, [r2, #0]
        }
    }

    // Check if -> echo server state == not null, som betyr connection is still active
    if (es != NULL) {
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <tcpecho_raw_poll+0x64>
    	// Abort the TCP connection to clean up the PCB and release resources.
        tcp_abort(tpcb);
        return ERR_ABRT;
    }
    // If everything processed correctly and the connection is still active, return ERR_OK.
    return ERR_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e004      	b.n	8007d0a <tcpecho_raw_poll+0x6e>
        tcp_abort(tpcb);
 8007d00:	6838      	ldr	r0, [r7, #0]
 8007d02:	f009 f81b 	bl	8010d3c <tcp_abort>
        return ERR_ABRT;
 8007d06:	f06f 030c 	mvn.w	r3, #12
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	371c      	adds	r7, #28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd90      	pop	{r4, r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20007284 	.word	0x20007284
 8007d18:	2000713c 	.word	0x2000713c

08007d1c <tcpecho_raw_sent>:


static err_t
tcpecho_raw_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	80fb      	strh	r3, [r7, #6]
  struct tcpecho_raw_state *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcpecho_raw_state *)arg;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2200      	movs	r2, #0
 8007d32:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL) {
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d008      	beq.n	8007d4e <tcpecho_raw_sent+0x32>
    /* still got pbufs to send */
    tcp_sent(tpcb, tcpecho_raw_sent);
 8007d3c:	490a      	ldr	r1, [pc, #40]	; (8007d68 <tcpecho_raw_sent+0x4c>)
 8007d3e:	68b8      	ldr	r0, [r7, #8]
 8007d40:	f009 ff95 	bl	8011c6e <tcp_sent>
    tcpecho_raw_send(tpcb, es);
 8007d44:	6979      	ldr	r1, [r7, #20]
 8007d46:	68b8      	ldr	r0, [r7, #8]
 8007d48:	f7ff ff4b 	bl	8007be2 <tcpecho_raw_send>
 8007d4c:	e007      	b.n	8007d5e <tcpecho_raw_sent+0x42>
  } else {
    /* no more pbufs to send */
    if(es->state == ES_CLOSING) {
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d103      	bne.n	8007d5e <tcpecho_raw_sent+0x42>
      tcpecho_raw_close(tpcb, es);
 8007d56:	6979      	ldr	r1, [r7, #20]
 8007d58:	68b8      	ldr	r0, [r7, #8]
 8007d5a:	f7ff ff1e 	bl	8007b9a <tcpecho_raw_close>
    }
  }
  return ERR_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	08007d1d 	.word	0x08007d1d

08007d6c <tcpecho_raw_recv>:
static err_t
tcpecho_raw_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
 8007d78:	70fb      	strb	r3, [r7, #3]
    struct tcpecho_raw_state *es;
    err_t ret_err;

    LWIP_ASSERT("arg != NULL", arg != NULL);
    es = (struct tcpecho_raw_state *)arg;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	613b      	str	r3, [r7, #16]

    if (p == NULL) {
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d112      	bne.n	8007daa <tcpecho_raw_recv+0x3e>
        // Connection closed
        es->state = ES_CLOSING;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2203      	movs	r2, #3
 8007d88:	701a      	strb	r2, [r3, #0]
        if (es->p == NULL) {
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <tcpecho_raw_recv+0x30>
            tcpecho_raw_close(tpcb, es);
 8007d92:	6939      	ldr	r1, [r7, #16]
 8007d94:	68b8      	ldr	r0, [r7, #8]
 8007d96:	f7ff ff00 	bl	8007b9a <tcpecho_raw_close>
 8007d9a:	e003      	b.n	8007da4 <tcpecho_raw_recv+0x38>
        } else {
            tcpecho_raw_send(tpcb, es);
 8007d9c:	6939      	ldr	r1, [r7, #16]
 8007d9e:	68b8      	ldr	r0, [r7, #8]
 8007da0:	f7ff ff1f 	bl	8007be2 <tcpecho_raw_send>
        }
        ret_err = ERR_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	75fb      	strb	r3, [r7, #23]
 8007da8:	e02d      	b.n	8007e06 <tcpecho_raw_recv+0x9a>
    } else if (err != ERR_OK) {
 8007daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d008      	beq.n	8007dc4 <tcpecho_raw_recv+0x58>
        // Handle receive error
        if (p != NULL) {
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <tcpecho_raw_recv+0x52>
            pbuf_free(p);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f008 fb9b 	bl	80104f4 <pbuf_free>
        }
        ret_err = err;
 8007dbe:	78fb      	ldrb	r3, [r7, #3]
 8007dc0:	75fb      	strb	r3, [r7, #23]
 8007dc2:	e020      	b.n	8007e06 <tcpecho_raw_recv+0x9a>
    } else {
        // Process received data
        if (es->state == ES_ACCEPTED) {
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d102      	bne.n	8007dd2 <tcpecho_raw_recv+0x66>
            es->state = ES_RECEIVED;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	701a      	strb	r2, [r3, #0]
        }
        send_eval_string_msg(tpcb); // Send the EVAL_STRING_MSG
 8007dd2:	68b8      	ldr	r0, [r7, #8]
 8007dd4:	f000 f8b0 	bl	8007f38 <send_eval_string_msg>

        // Echo logic as before
        if (es->p != NULL) {
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d006      	beq.n	8007dee <tcpecho_raw_recv+0x82>
            pbuf_cat(es->p, p);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f008 fc01 	bl	80105ee <pbuf_cat>
 8007dec:	e005      	b.n	8007dfa <tcpecho_raw_recv+0x8e>
        } else {
            es->p = p;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	609a      	str	r2, [r3, #8]
            pbuf_ref(p);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f008 fbe7 	bl	80105c8 <pbuf_ref>
        }
        tcpecho_raw_send(tpcb, es);
 8007dfa:	6939      	ldr	r1, [r7, #16]
 8007dfc:	68b8      	ldr	r0, [r7, #8]
 8007dfe:	f7ff fef0 	bl	8007be2 <tcpecho_raw_send>
        ret_err = ERR_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]
    }
    return ret_err;
 8007e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <tcpecho_raw_accept>:


static err_t
tcpecho_raw_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	71fb      	strb	r3, [r7, #7]
  err_t ret_err;
  struct tcpecho_raw_state *es;

  LWIP_UNUSED_ARG(arg);
  if ((err != ERR_OK) || (newpcb == NULL)) {
 8007e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d102      	bne.n	8007e30 <tcpecho_raw_accept+0x1c>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <tcpecho_raw_accept+0x22>
    return ERR_VAL;
 8007e30:	f06f 0305 	mvn.w	r3, #5
 8007e34:	e032      	b.n	8007e9c <tcpecho_raw_accept+0x88>
  }

  /* Unless this pcb should have NORMAL priority, set its priority now.
     When running out of pcbs, low priority pcbs can be aborted to create
     new pcbs of higher priority. */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8007e36:	2101      	movs	r1, #1
 8007e38:	68b8      	ldr	r0, [r7, #8]
 8007e3a:	f009 fd29 	bl	8011890 <tcp_setprio>

  es = (struct tcpecho_raw_state *)mem_malloc(sizeof(struct tcpecho_raw_state));
 8007e3e:	200c      	movs	r0, #12
 8007e40:	f007 fddb 	bl	800f9fa <mem_malloc>
 8007e44:	6138      	str	r0, [r7, #16]
  if (es != NULL) {
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d023      	beq.n	8007e94 <tcpecho_raw_accept+0x80>
    es->state = ES_ACCEPTED;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2200      	movs	r2, #0
 8007e62:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 8007e64:	6939      	ldr	r1, [r7, #16]
 8007e66:	68b8      	ldr	r0, [r7, #8]
 8007e68:	f009 fede 	bl	8011c28 <tcp_arg>
    tcp_recv(newpcb, tcpecho_raw_recv);
 8007e6c:	490d      	ldr	r1, [pc, #52]	; (8007ea4 <tcpecho_raw_accept+0x90>)
 8007e6e:	68b8      	ldr	r0, [r7, #8]
 8007e70:	f009 feeb 	bl	8011c4a <tcp_recv>
    tcp_err(newpcb, tcpecho_raw_error);
 8007e74:	490c      	ldr	r1, [pc, #48]	; (8007ea8 <tcpecho_raw_accept+0x94>)
 8007e76:	68b8      	ldr	r0, [r7, #8]
 8007e78:	f009 ff0b 	bl	8011c92 <tcp_err>
    tcp_poll(newpcb, tcpecho_raw_poll, 0);
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	490b      	ldr	r1, [pc, #44]	; (8007eac <tcpecho_raw_accept+0x98>)
 8007e80:	68b8      	ldr	r0, [r7, #8]
 8007e82:	f009 ff2f 	bl	8011ce4 <tcp_poll>
    tcp_sent(newpcb, tcpecho_raw_sent);
 8007e86:	490a      	ldr	r1, [pc, #40]	; (8007eb0 <tcpecho_raw_accept+0x9c>)
 8007e88:	68b8      	ldr	r0, [r7, #8]
 8007e8a:	f009 fef0 	bl	8011c6e <tcp_sent>
    ret_err = ERR_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	75fb      	strb	r3, [r7, #23]
 8007e92:	e001      	b.n	8007e98 <tcpecho_raw_accept+0x84>
  } else {
    ret_err = ERR_MEM;
 8007e94:	23ff      	movs	r3, #255	; 0xff
 8007e96:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8007e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	08007d6d 	.word	0x08007d6d
 8007ea8:	08007c7f 	.word	0x08007c7f
 8007eac:	08007c9d 	.word	0x08007c9d
 8007eb0:	08007d1d 	.word	0x08007d1d

08007eb4 <tcpecho_raw_init>:

// Initialization function to set up the PCB and polling
void tcpecho_raw_init(char *buffer) {
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	//LAGER TCP  PCB -> TCP SOCKET
	shared_buffer = buffer;
 8007ebc:	4a19      	ldr	r2, [pc, #100]	; (8007f24 <tcpecho_raw_init+0x70>)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6013      	str	r3, [r2, #0]
    global_tpcb = tcp_new();
 8007ec2:	f009 fe9b 	bl	8011bfc <tcp_new>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4a17      	ldr	r2, [pc, #92]	; (8007f28 <tcpecho_raw_init+0x74>)
 8007eca:	6013      	str	r3, [r2, #0]
    if (global_tpcb != NULL) {  // Check if the PCB was successfully created.
 8007ecc:	4b16      	ldr	r3, [pc, #88]	; (8007f28 <tcpecho_raw_init+0x74>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d022      	beq.n	8007f1a <tcpecho_raw_init+0x66>
        err_t err = tcp_bind(global_tpcb, IP_ADDR_ANY, 66);
 8007ed4:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <tcpecho_raw_init+0x74>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2242      	movs	r2, #66	; 0x42
 8007eda:	4914      	ldr	r1, [pc, #80]	; (8007f2c <tcpecho_raw_init+0x78>)
 8007edc:	4618      	mov	r0, r3
 8007ede:	f008 ff39 	bl	8010d54 <tcp_bind>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
        // Bind the newly created PCB object to any IP address on port 66.

        if (err == ERR_OK) {// Check if the binding was successful.
 8007ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d115      	bne.n	8007f1a <tcpecho_raw_init+0x66>

        	// Putter PCB == LISTEN state, convert til listen PCB -> accept incoming connections.
        	global_tpcb = tcp_listen(global_tpcb);
 8007eee:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <tcpecho_raw_init+0x74>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	21ff      	movs	r1, #255	; 0xff
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f008 ffbf 	bl	8010e78 <tcp_listen_with_backlog>
 8007efa:	4603      	mov	r3, r0
 8007efc:	4a0a      	ldr	r2, [pc, #40]	; (8007f28 <tcpecho_raw_init+0x74>)
 8007efe:	6013      	str	r3, [r2, #0]

        	 // Set up a callback function som event handler -> incoming connections.
        	 // `tcp_accept` assigns a function to be called when a new connection is established.
            tcp_accept(global_tpcb, tcpecho_raw_accept);
 8007f00:	4b09      	ldr	r3, [pc, #36]	; (8007f28 <tcpecho_raw_init+0x74>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	490a      	ldr	r1, [pc, #40]	; (8007f30 <tcpecho_raw_init+0x7c>)
 8007f06:	4618      	mov	r0, r3
 8007f08:	f009 fed5 	bl	8011cb6 <tcp_accept>

            // Set up a callback function to be called periodically
            // polling callback brukt som regularly check/event handle tasks som å  sende periodic/timed messages
            // The `1` = polling frequency; in the lwIP stack ->> multiplied av TCP timer interval
            // (typically 500 ms), so a value of `1`  = 500 ms.
            tcp_poll(global_tpcb, tcpecho_raw_poll, 1);  // Set the poll interval
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <tcpecho_raw_init+0x74>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2201      	movs	r2, #1
 8007f12:	4908      	ldr	r1, [pc, #32]	; (8007f34 <tcpecho_raw_init+0x80>)
 8007f14:	4618      	mov	r0, r3
 8007f16:	f009 fee5 	bl	8011ce4 <tcp_poll>
        }
    }
}
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	2000728c 	.word	0x2000728c
 8007f28:	20007288 	.word	0x20007288
 8007f2c:	0801d248 	.word	0x0801d248
 8007f30:	08007e15 	.word	0x08007e15
 8007f34:	08007c9d 	.word	0x08007c9d

08007f38 <send_eval_string_msg>:



void send_eval_string_msg(struct tcp_pcb *tpcb) {
 8007f38:	b590      	push	{r4, r7, lr}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
    if (tpcb != NULL && tcp_sndbuf(tpcb) > strlen(EVAL_STRING_MSG)) {
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01c      	beq.n	8007f80 <send_eval_string_msg+0x48>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007f4c:	461c      	mov	r4, r3
 8007f4e:	4b0e      	ldr	r3, [pc, #56]	; (8007f88 <send_eval_string_msg+0x50>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7f8 f95e 	bl	8000214 <strlen>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	429c      	cmp	r4, r3
 8007f5c:	d910      	bls.n	8007f80 <send_eval_string_msg+0x48>
        tcp_write(tpcb, EVAL_STRING_MSG, strlen(EVAL_STRING_MSG), TCP_WRITE_FLAG_COPY);
 8007f5e:	4b0a      	ldr	r3, [pc, #40]	; (8007f88 <send_eval_string_msg+0x50>)
 8007f60:	681c      	ldr	r4, [r3, #0]
 8007f62:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <send_eval_string_msg+0x50>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7f8 f954 	bl	8000214 <strlen>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	2301      	movs	r3, #1
 8007f72:	4621      	mov	r1, r4
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f00c fab7 	bl	80144e8 <tcp_write>
        tcp_output(tpcb);  // Data sendt Instant, brukes kanskje senere, vet ikke, har bare med tilfelle
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f00c ff7a 	bl	8014e74 <tcp_output>
    }
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd90      	pop	{r4, r7, pc}
 8007f88:	20000130 	.word	0x20000130

08007f8c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart1_rx;
/* USART1 init function */

HAL_StatusTypeDef MX_USART1_UART_Init(void)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007f90:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007f92:	4a14      	ldr	r2, [pc, #80]	; (8007fe4 <MX_USART1_UART_Init+0x58>)
 8007f94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007f96:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007f9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007f9e:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007faa:	4b0d      	ldr	r3, [pc, #52]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007fb2:	220c      	movs	r2, #12
 8007fb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007fb6:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007fbc:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007fc2:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007fc8:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007fce:	4b04      	ldr	r3, [pc, #16]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	629a      	str	r2, [r3, #40]	; 0x28

  return HAL_UART_Init(&huart1);
 8007fd4:	4802      	ldr	r0, [pc, #8]	; (8007fe0 <MX_USART1_UART_Init+0x54>)
 8007fd6:	f004 fe5b 	bl	800cc90 <HAL_UART_Init>
 8007fda:	4603      	mov	r3, r0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20007290 	.word	0x20007290
 8007fe4:	40013800 	.word	0x40013800

08007fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff0:	f107 030c 	add.w	r3, r7, #12
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
 8007ffc:	60da      	str	r2, [r3, #12]
 8007ffe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a16      	ldr	r2, [pc, #88]	; (8008060 <HAL_UART_MspInit+0x78>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d125      	bne.n	8008056 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800800a:	4b16      	ldr	r3, [pc, #88]	; (8008064 <HAL_UART_MspInit+0x7c>)
 800800c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800800e:	4a15      	ldr	r2, [pc, #84]	; (8008064 <HAL_UART_MspInit+0x7c>)
 8008010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008014:	6613      	str	r3, [r2, #96]	; 0x60
 8008016:	4b13      	ldr	r3, [pc, #76]	; (8008064 <HAL_UART_MspInit+0x7c>)
 8008018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800801a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800801e:	60bb      	str	r3, [r7, #8]
 8008020:	68bb      	ldr	r3, [r7, #8]

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8008022:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008026:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008028:	2302      	movs	r3, #2
 800802a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008030:	2303      	movs	r3, #3
 8008032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008034:	2307      	movs	r3, #7
 8008036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008038:	f107 030c 	add.w	r3, r7, #12
 800803c:	4619      	mov	r1, r3
 800803e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008042:	f001 ff87 	bl	8009f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */
 /* NVIC for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8008046:	2201      	movs	r2, #1
 8008048:	2101      	movs	r1, #1
 800804a:	2025      	movs	r0, #37	; 0x25
 800804c:	f001 fc0f 	bl	800986e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008050:	2025      	movs	r0, #37	; 0x25
 8008052:	f001 fc28 	bl	80098a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_MspInit 1 */

  }
}
 8008056:	bf00      	nop
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	40013800 	.word	0x40013800
 8008064:	40021000 	.word	0x40021000

08008068 <submitTxBuffer>:

  return HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, nbBytes);
}

HAL_StatusTypeDef submitTxBuffer (uint8_t * buffer, int nbBytes)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]

  return HAL_UART_Transmit(&huart1, (uint8_t*)buffer, nbBytes,5);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	b29a      	uxth	r2, r3
 8008076:	2305      	movs	r3, #5
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4804      	ldr	r0, [pc, #16]	; (800808c <submitTxBuffer+0x24>)
 800807c:	f004 fe58 	bl	800cd30 <HAL_UART_Transmit>
 8008080:	4603      	mov	r3, r0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20007290 	.word	0x20007290

08008090 <HAL_UART_ErrorCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80080a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80080dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80080a8:	f7ff fd2a 	bl	8007b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80080ac:	480c      	ldr	r0, [pc, #48]	; (80080e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80080ae:	490d      	ldr	r1, [pc, #52]	; (80080e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80080b0:	4a0d      	ldr	r2, [pc, #52]	; (80080e8 <LoopForever+0xe>)
  movs r3, #0
 80080b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80080b4:	e002      	b.n	80080bc <LoopCopyDataInit>

080080b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80080b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80080b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80080ba:	3304      	adds	r3, #4

080080bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80080bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80080be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80080c0:	d3f9      	bcc.n	80080b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80080c2:	4a0a      	ldr	r2, [pc, #40]	; (80080ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80080c4:	4c0a      	ldr	r4, [pc, #40]	; (80080f0 <LoopForever+0x16>)
  movs r3, #0
 80080c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80080c8:	e001      	b.n	80080ce <LoopFillZerobss>

080080ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80080ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80080cc:	3204      	adds	r2, #4

080080ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80080ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80080d0:	d3fb      	bcc.n	80080ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80080d2:	f012 fe39 	bl	801ad48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80080d6:	f7ff f845 	bl	8007164 <main>

080080da <LoopForever>:

LoopForever:
    b LoopForever
 80080da:	e7fe      	b.n	80080da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80080dc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80080e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80080e4:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 80080e8:	0801d34c 	.word	0x0801d34c
  ldr r2, =_sbss
 80080ec:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 80080f0:	20007b1c 	.word	0x20007b1c

080080f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80080f4:	e7fe      	b.n	80080f4 <ADC1_IRQHandler>

080080f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008100:	2003      	movs	r0, #3
 8008102:	f001 fba9 	bl	8009858 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008106:	2000      	movs	r0, #0
 8008108:	f000 f80e 	bl	8008128 <HAL_InitTick>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	71fb      	strb	r3, [r7, #7]
 8008116:	e001      	b.n	800811c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008118:	f7ff fb2a 	bl	8007770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800811c:	79fb      	ldrb	r3, [r7, #7]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008134:	4b17      	ldr	r3, [pc, #92]	; (8008194 <HAL_InitTick+0x6c>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d023      	beq.n	8008184 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800813c:	4b16      	ldr	r3, [pc, #88]	; (8008198 <HAL_InitTick+0x70>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	4b14      	ldr	r3, [pc, #80]	; (8008194 <HAL_InitTick+0x6c>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	4619      	mov	r1, r3
 8008146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800814a:	fbb3 f3f1 	udiv	r3, r3, r1
 800814e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fbc3 	bl	80098de <HAL_SYSTICK_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10f      	bne.n	800817e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b0f      	cmp	r3, #15
 8008162:	d809      	bhi.n	8008178 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008164:	2200      	movs	r2, #0
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800816c:	f001 fb7f 	bl	800986e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008170:	4a0a      	ldr	r2, [pc, #40]	; (800819c <HAL_InitTick+0x74>)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	e007      	b.n	8008188 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
 800817c:	e004      	b.n	8008188 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	73fb      	strb	r3, [r7, #15]
 8008182:	e001      	b.n	8008188 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20000138 	.word	0x20000138
 8008198:	2000012c 	.word	0x2000012c
 800819c:	20000134 	.word	0x20000134

080081a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80081a4:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <HAL_IncTick+0x20>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
 80081aa:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <HAL_IncTick+0x24>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4413      	add	r3, r2
 80081b0:	4a04      	ldr	r2, [pc, #16]	; (80081c4 <HAL_IncTick+0x24>)
 80081b2:	6013      	str	r3, [r2, #0]
}
 80081b4:	bf00      	nop
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20000138 	.word	0x20000138
 80081c4:	20007324 	.word	0x20007324

080081c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return uwTick;
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <HAL_GetTick+0x14>)
 80081ce:	681b      	ldr	r3, [r3, #0]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20007324 	.word	0x20007324

080081e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	431a      	orrs	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	609a      	str	r2, [r3, #8]
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	431a      	orrs	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	609a      	str	r2, [r3, #8]
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3360      	adds	r3, #96	; 0x60
 800825a:	461a      	mov	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	4b08      	ldr	r3, [pc, #32]	; (800828c <LL_ADC_SetOffset+0x44>)
 800826a:	4013      	ands	r3, r2
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	4313      	orrs	r3, r2
 8008278:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	03fff000 	.word	0x03fff000

08008290 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3360      	adds	r3, #96	; 0x60
 800829e:	461a      	mov	r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3360      	adds	r3, #96	; 0x60
 80082cc:	461a      	mov	r2, r3
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	431a      	orrs	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80082e6:	bf00      	nop
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	431a      	orrs	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	615a      	str	r2, [r3, #20]
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800832c:	2301      	movs	r3, #1
 800832e:	e000      	b.n	8008332 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800833e:	b480      	push	{r7}
 8008340:	b087      	sub	sp, #28
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3330      	adds	r3, #48	; 0x30
 800834e:	461a      	mov	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	0a1b      	lsrs	r3, r3, #8
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	f003 030c 	and.w	r3, r3, #12
 800835a:	4413      	add	r3, r2
 800835c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f003 031f 	and.w	r3, r3, #31
 8008368:	211f      	movs	r1, #31
 800836a:	fa01 f303 	lsl.w	r3, r1, r3
 800836e:	43db      	mvns	r3, r3
 8008370:	401a      	ands	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	0e9b      	lsrs	r3, r3, #26
 8008376:	f003 011f 	and.w	r1, r3, #31
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f003 031f 	and.w	r3, r3, #31
 8008380:	fa01 f303 	lsl.w	r3, r1, r3
 8008384:	431a      	orrs	r2, r3
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800838a:	bf00      	nop
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008396:	b480      	push	{r7}
 8008398:	b087      	sub	sp, #28
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3314      	adds	r3, #20
 80083a6:	461a      	mov	r2, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	0e5b      	lsrs	r3, r3, #25
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	f003 0304 	and.w	r3, r3, #4
 80083b2:	4413      	add	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	0d1b      	lsrs	r3, r3, #20
 80083be:	f003 031f 	and.w	r3, r3, #31
 80083c2:	2107      	movs	r1, #7
 80083c4:	fa01 f303 	lsl.w	r3, r1, r3
 80083c8:	43db      	mvns	r3, r3
 80083ca:	401a      	ands	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	0d1b      	lsrs	r3, r3, #20
 80083d0:	f003 031f 	and.w	r3, r3, #31
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	fa01 f303 	lsl.w	r3, r1, r3
 80083da:	431a      	orrs	r2, r3
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80083e0:	bf00      	nop
 80083e2:	371c      	adds	r7, #28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008404:	43db      	mvns	r3, r3
 8008406:	401a      	ands	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f003 0318 	and.w	r3, r3, #24
 800840e:	4908      	ldr	r1, [pc, #32]	; (8008430 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008410:	40d9      	lsrs	r1, r3
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	400b      	ands	r3, r1
 8008416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800841a:	431a      	orrs	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008422:	bf00      	nop
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	0007ffff 	.word	0x0007ffff

08008434 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008444:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6093      	str	r3, [r2, #8]
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800846c:	d101      	bne.n	8008472 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008494:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084bc:	d101      	bne.n	80084c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80084be:	2301      	movs	r3, #1
 80084c0:	e000      	b.n	80084c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80084e4:	f043 0201 	orr.w	r2, r3, #1
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800850c:	f043 0202 	orr.w	r2, r3, #2
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <LL_ADC_IsEnabled+0x18>
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <LL_ADC_IsEnabled+0x1a>
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b02      	cmp	r3, #2
 8008558:	d101      	bne.n	800855e <LL_ADC_IsDisableOngoing+0x18>
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <LL_ADC_IsDisableOngoing+0x1a>
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800857c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008580:	f043 0204 	orr.w	r2, r3, #4
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80085a8:	f043 0210 	orr.w	r2, r3, #16
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	d101      	bne.n	80085d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b083      	sub	sp, #12
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80085f6:	f043 0220 	orr.w	r2, r3, #32
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f003 0308 	and.w	r3, r3, #8
 800861a:	2b08      	cmp	r3, #8
 800861c:	d101      	bne.n	8008622 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e129      	b.n	800889e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008654:	2b00      	cmp	r3, #0
 8008656:	d109      	bne.n	800866c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f92f 	bl	80088bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff fef1 	bl	8008458 <LL_ADC_IsDeepPowerDownEnabled>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d004      	beq.n	8008686 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff fed7 	bl	8008434 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff ff0c 	bl	80084a8 <LL_ADC_IsInternalRegulatorEnabled>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d115      	bne.n	80086c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff fef0 	bl	8008480 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086a0:	4b81      	ldr	r3, [pc, #516]	; (80088a8 <HAL_ADC_Init+0x278>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	099b      	lsrs	r3, r3, #6
 80086a6:	4a81      	ldr	r2, [pc, #516]	; (80088ac <HAL_ADC_Init+0x27c>)
 80086a8:	fba2 2303 	umull	r2, r3, r2, r3
 80086ac:	099b      	lsrs	r3, r3, #6
 80086ae:	3301      	adds	r3, #1
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80086b4:	e002      	b.n	80086bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1f9      	bne.n	80086b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff feee 	bl	80084a8 <LL_ADC_IsInternalRegulatorEnabled>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10d      	bne.n	80086ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d6:	f043 0210 	orr.w	r2, r3, #16
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e2:	f043 0201 	orr.w	r2, r3, #1
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff ff62 	bl	80085bc <LL_ADC_REG_IsConversionOngoing>
 80086f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fe:	f003 0310 	and.w	r3, r3, #16
 8008702:	2b00      	cmp	r3, #0
 8008704:	f040 80c2 	bne.w	800888c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	f040 80be 	bne.w	800888c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008714:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008718:	f043 0202 	orr.w	r2, r3, #2
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fefb 	bl	8008520 <LL_ADC_IsEnabled>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10b      	bne.n	8008748 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008730:	485f      	ldr	r0, [pc, #380]	; (80088b0 <HAL_ADC_Init+0x280>)
 8008732:	f7ff fef5 	bl	8008520 <LL_ADC_IsEnabled>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d105      	bne.n	8008748 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	4619      	mov	r1, r3
 8008742:	485c      	ldr	r0, [pc, #368]	; (80088b4 <HAL_ADC_Init+0x284>)
 8008744:	f7ff fd4c 	bl	80081e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	7e5b      	ldrb	r3, [r3, #25]
 800874c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008752:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8008758:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800875e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008766:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008768:	4313      	orrs	r3, r2
 800876a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d106      	bne.n	8008784 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	3b01      	subs	r3, #1
 800877c:	045b      	lsls	r3, r3, #17
 800877e:	69ba      	ldr	r2, [r7, #24]
 8008780:	4313      	orrs	r3, r2
 8008782:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	4313      	orrs	r3, r2
 800879e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	4b44      	ldr	r3, [pc, #272]	; (80088b8 <HAL_ADC_Init+0x288>)
 80087a8:	4013      	ands	r3, r2
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	6812      	ldr	r2, [r2, #0]
 80087ae:	69b9      	ldr	r1, [r7, #24]
 80087b0:	430b      	orrs	r3, r1
 80087b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff ff26 	bl	800860a <LL_ADC_INJ_IsConversionOngoing>
 80087be:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d140      	bne.n	8008848 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d13d      	bne.n	8008848 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	7e1b      	ldrb	r3, [r3, #24]
 80087d4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80087d6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80087e0:	4313      	orrs	r3, r2
 80087e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087ee:	f023 0306 	bic.w	r3, r3, #6
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	69b9      	ldr	r1, [r7, #24]
 80087f8:	430b      	orrs	r3, r1
 80087fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008802:	2b01      	cmp	r3, #1
 8008804:	d118      	bne.n	8008838 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008810:	f023 0304 	bic.w	r3, r3, #4
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800881c:	4311      	orrs	r1, r2
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008822:	4311      	orrs	r1, r2
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008828:	430a      	orrs	r2, r1
 800882a:	431a      	orrs	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f042 0201 	orr.w	r2, r2, #1
 8008834:	611a      	str	r2, [r3, #16]
 8008836:	e007      	b.n	8008848 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	691a      	ldr	r2, [r3, #16]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0201 	bic.w	r2, r2, #1
 8008846:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d10c      	bne.n	800886a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008856:	f023 010f 	bic.w	r1, r3, #15
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	1e5a      	subs	r2, r3, #1
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	631a      	str	r2, [r3, #48]	; 0x30
 8008868:	e007      	b.n	800887a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 020f 	bic.w	r2, r2, #15
 8008878:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887e:	f023 0303 	bic.w	r3, r3, #3
 8008882:	f043 0201 	orr.w	r2, r3, #1
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	659a      	str	r2, [r3, #88]	; 0x58
 800888a:	e007      	b.n	800889c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008890:	f043 0210 	orr.w	r2, r3, #16
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800889c:	7ffb      	ldrb	r3, [r7, #31]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3720      	adds	r7, #32
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	2000012c 	.word	0x2000012c
 80088ac:	053e2d63 	.word	0x053e2d63
 80088b0:	50040000 	.word	0x50040000
 80088b4:	50040300 	.word	0x50040300
 80088b8:	fff0c007 	.word	0xfff0c007

080088bc <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff fe6d 	bl	80085bc <LL_ADC_REG_IsConversionOngoing>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d14f      	bne.n	8008988 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_ADC_Start+0x26>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e04b      	b.n	800898e <HAL_ADC_Start+0xbe>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fdd0 	bl	80094a4 <ADC_Enable>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d137      	bne.n	800897e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008912:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800892a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800892e:	d106      	bne.n	800893e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008934:	f023 0206 	bic.w	r2, r3, #6
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	65da      	str	r2, [r3, #92]	; 0x5c
 800893c:	e002      	b.n	8008944 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	221c      	movs	r2, #28
 800894a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008966:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800896a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff fdf8 	bl	800856c <LL_ADC_REG_StartConversion>
 800897c:	e006      	b.n	800898c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008986:	e001      	b.n	800898c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008988:	2302      	movs	r3, #2
 800898a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d101      	bne.n	80089ac <HAL_ADC_Stop+0x16>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e023      	b.n	80089f4 <HAL_ADC_Stop+0x5e>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80089b4:	2103      	movs	r1, #3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fcb8 	bl	800932c <ADC_ConversionStop>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d111      	bne.n	80089ea <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fdf2 	bl	80095b0 <ADC_Disable>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d109      	bne.n	80089ea <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80089de:	f023 0301 	bic.w	r3, r3, #1
 80089e2:	f043 0201 	orr.w	r2, r3, #1
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	2b08      	cmp	r3, #8
 8008a0c:	d102      	bne.n	8008a14 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8008a0e:	2308      	movs	r3, #8
 8008a10:	617b      	str	r3, [r7, #20]
 8008a12:	e010      	b.n	8008a36 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d007      	beq.n	8008a32 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a26:	f043 0220 	orr.w	r2, r3, #32
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e06f      	b.n	8008b12 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8008a32:	2304      	movs	r3, #4
 8008a34:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8008a36:	f7ff fbc7 	bl	80081c8 <HAL_GetTick>
 8008a3a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008a3c:	e021      	b.n	8008a82 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a44:	d01d      	beq.n	8008a82 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8008a46:	f7ff fbbf 	bl	80081c8 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d302      	bcc.n	8008a5c <HAL_ADC_PollForConversion+0x60>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d112      	bne.n	8008a82 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	4013      	ands	r3, r2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10b      	bne.n	8008a82 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a6e:	f043 0204 	orr.w	r2, r3, #4
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e047      	b.n	8008b12 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0d6      	beq.n	8008a3e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff fc39 	bl	8008318 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d01c      	beq.n	8008ae6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	7e5b      	ldrb	r3, [r3, #25]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d118      	bne.n	8008ae6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b08      	cmp	r3, #8
 8008ac0:	d111      	bne.n	8008ae6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d105      	bne.n	8008ae6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ade:	f043 0201 	orr.w	r2, r3, #1
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d104      	bne.n	8008afe <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2208      	movs	r2, #8
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	e008      	b.n	8008b10 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d103      	bne.n	8008b10 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	220c      	movs	r2, #12
 8008b0e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b0b6      	sub	sp, #216	; 0xd8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_ADC_ConfigChannel+0x22>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e3d5      	b.n	8009302 <HAL_ADC_ConfigChannel+0x7ce>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff fd2a 	bl	80085bc <LL_ADC_REG_IsConversionOngoing>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f040 83ba 	bne.w	80092e4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2b05      	cmp	r3, #5
 8008b7e:	d824      	bhi.n	8008bca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	3b02      	subs	r3, #2
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d81b      	bhi.n	8008bc2 <HAL_ADC_ConfigChannel+0x8e>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <HAL_ADC_ConfigChannel+0x5c>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008ba1 	.word	0x08008ba1
 8008b94:	08008ba9 	.word	0x08008ba9
 8008b98:	08008bb1 	.word	0x08008bb1
 8008b9c:	08008bb9 	.word	0x08008bb9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8008ba0:	230c      	movs	r3, #12
 8008ba2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8008ba6:	e010      	b.n	8008bca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8008ba8:	2312      	movs	r3, #18
 8008baa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8008bae:	e00c      	b.n	8008bca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8008bb0:	2318      	movs	r3, #24
 8008bb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8008bb6:	e008      	b.n	8008bca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8008bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8008bc0:	e003      	b.n	8008bca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8008bc2:	2306      	movs	r3, #6
 8008bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8008bc8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008bd8:	f7ff fbb1 	bl	800833e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff fceb 	bl	80085bc <LL_ADC_REG_IsConversionOngoing>
 8008be6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff fd0b 	bl	800860a <LL_ADC_INJ_IsConversionOngoing>
 8008bf4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f040 81bf 	bne.w	8008f80 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f040 81ba 	bne.w	8008f80 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c14:	d10f      	bne.n	8008c36 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4619      	mov	r1, r3
 8008c22:	f7ff fbb8 	bl	8008396 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff fb5f 	bl	80082f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8008c34:	e00e      	b.n	8008c54 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6818      	ldr	r0, [r3, #0]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	6819      	ldr	r1, [r3, #0]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f7ff fba7 	bl	8008396 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7ff fb4f 	bl	80082f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	695a      	ldr	r2, [r3, #20]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	08db      	lsrs	r3, r3, #3
 8008c60:	f003 0303 	and.w	r3, r3, #3
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d00a      	beq.n	8008c8c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	6919      	ldr	r1, [r3, #16]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c86:	f7ff fadf 	bl	8008248 <LL_ADC_SetOffset>
 8008c8a:	e179      	b.n	8008f80 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2100      	movs	r1, #0
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff fafc 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10a      	bne.n	8008cb8 <HAL_ADC_ConfigChannel+0x184>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff faf1 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	0e9b      	lsrs	r3, r3, #26
 8008cb2:	f003 021f 	and.w	r2, r3, #31
 8008cb6:	e01e      	b.n	8008cf6 <HAL_ADC_ConfigChannel+0x1c2>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff fae6 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cce:	fa93 f3a3 	rbit	r3, r3
 8008cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008cd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8008ce6:	2320      	movs	r3, #32
 8008ce8:	e004      	b.n	8008cf4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8008cea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cee:	fab3 f383 	clz	r3, r3
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d105      	bne.n	8008d0e <HAL_ADC_ConfigChannel+0x1da>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	0e9b      	lsrs	r3, r3, #26
 8008d08:	f003 031f 	and.w	r3, r3, #31
 8008d0c:	e018      	b.n	8008d40 <HAL_ADC_ConfigChannel+0x20c>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d1a:	fa93 f3a3 	rbit	r3, r3
 8008d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8008d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8008d2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8008d32:	2320      	movs	r3, #32
 8008d34:	e004      	b.n	8008d40 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8008d36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d3a:	fab3 f383 	clz	r3, r3
 8008d3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d106      	bne.n	8008d52 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff fab5 	bl	80082bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2101      	movs	r1, #1
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff fa99 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10a      	bne.n	8008d7e <HAL_ADC_ConfigChannel+0x24a>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff fa8e 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008d74:	4603      	mov	r3, r0
 8008d76:	0e9b      	lsrs	r3, r3, #26
 8008d78:	f003 021f 	and.w	r2, r3, #31
 8008d7c:	e01e      	b.n	8008dbc <HAL_ADC_ConfigChannel+0x288>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2101      	movs	r1, #1
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff fa83 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d94:	fa93 f3a3 	rbit	r3, r3
 8008d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8008d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8008da4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8008dac:	2320      	movs	r3, #32
 8008dae:	e004      	b.n	8008dba <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8008db0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008db4:	fab3 f383 	clz	r3, r3
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d105      	bne.n	8008dd4 <HAL_ADC_ConfigChannel+0x2a0>
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	0e9b      	lsrs	r3, r3, #26
 8008dce:	f003 031f 	and.w	r3, r3, #31
 8008dd2:	e018      	b.n	8008e06 <HAL_ADC_ConfigChannel+0x2d2>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008de0:	fa93 f3a3 	rbit	r3, r3
 8008de4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8008de8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8008df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8008df8:	2320      	movs	r3, #32
 8008dfa:	e004      	b.n	8008e06 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8008dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e00:	fab3 f383 	clz	r3, r3
 8008e04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d106      	bne.n	8008e18 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2101      	movs	r1, #1
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff fa52 	bl	80082bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2102      	movs	r1, #2
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7ff fa36 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <HAL_ADC_ConfigChannel+0x310>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2102      	movs	r1, #2
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7ff fa2b 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	0e9b      	lsrs	r3, r3, #26
 8008e3e:	f003 021f 	and.w	r2, r3, #31
 8008e42:	e01e      	b.n	8008e82 <HAL_ADC_ConfigChannel+0x34e>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2102      	movs	r1, #2
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff fa20 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008e50:	4603      	mov	r3, r0
 8008e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e5a:	fa93 f3a3 	rbit	r3, r3
 8008e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8008e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8008e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8008e72:	2320      	movs	r3, #32
 8008e74:	e004      	b.n	8008e80 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8008e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e7a:	fab3 f383 	clz	r3, r3
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d105      	bne.n	8008e9a <HAL_ADC_ConfigChannel+0x366>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	0e9b      	lsrs	r3, r3, #26
 8008e94:	f003 031f 	and.w	r3, r3, #31
 8008e98:	e014      	b.n	8008ec4 <HAL_ADC_ConfigChannel+0x390>
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ea0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ea2:	fa93 f3a3 	rbit	r3, r3
 8008ea6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8008ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8008eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8008eb6:	2320      	movs	r3, #32
 8008eb8:	e004      	b.n	8008ec4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8008eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ebe:	fab3 f383 	clz	r3, r3
 8008ec2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d106      	bne.n	8008ed6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2102      	movs	r1, #2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7ff f9f3 	bl	80082bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2103      	movs	r1, #3
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff f9d7 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10a      	bne.n	8008f02 <HAL_ADC_ConfigChannel+0x3ce>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2103      	movs	r1, #3
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7ff f9cc 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	0e9b      	lsrs	r3, r3, #26
 8008efc:	f003 021f 	and.w	r2, r3, #31
 8008f00:	e017      	b.n	8008f32 <HAL_ADC_ConfigChannel+0x3fe>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2103      	movs	r1, #3
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff f9c1 	bl	8008290 <LL_ADC_GetOffsetChannel>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f14:	fa93 f3a3 	rbit	r3, r3
 8008f18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8008f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8008f24:	2320      	movs	r3, #32
 8008f26:	e003      	b.n	8008f30 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8008f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f2a:	fab3 f383 	clz	r3, r3
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d105      	bne.n	8008f4a <HAL_ADC_ConfigChannel+0x416>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	0e9b      	lsrs	r3, r3, #26
 8008f44:	f003 031f 	and.w	r3, r3, #31
 8008f48:	e011      	b.n	8008f6e <HAL_ADC_ConfigChannel+0x43a>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f52:	fa93 f3a3 	rbit	r3, r3
 8008f56:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8008f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f5a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8008f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8008f62:	2320      	movs	r3, #32
 8008f64:	e003      	b.n	8008f6e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8008f66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f68:	fab3 f383 	clz	r3, r3
 8008f6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d106      	bne.n	8008f80 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2200      	movs	r2, #0
 8008f78:	2103      	movs	r1, #3
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff f99e 	bl	80082bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff facb 	bl	8008520 <LL_ADC_IsEnabled>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f040 813f 	bne.w	8009210 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f7ff fa24 	bl	80083ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	4a8e      	ldr	r2, [pc, #568]	; (80091e4 <HAL_ADC_ConfigChannel+0x6b0>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	f040 8130 	bne.w	8009210 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10b      	bne.n	8008fd8 <HAL_ADC_ConfigChannel+0x4a4>
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	0e9b      	lsrs	r3, r3, #26
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	f003 031f 	and.w	r3, r3, #31
 8008fcc:	2b09      	cmp	r3, #9
 8008fce:	bf94      	ite	ls
 8008fd0:	2301      	movls	r3, #1
 8008fd2:	2300      	movhi	r3, #0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	e019      	b.n	800900c <HAL_ADC_ConfigChannel+0x4d8>
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fe0:	fa93 f3a3 	rbit	r3, r3
 8008fe4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8008fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8008ff0:	2320      	movs	r3, #32
 8008ff2:	e003      	b.n	8008ffc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8008ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ff6:	fab3 f383 	clz	r3, r3
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	f003 031f 	and.w	r3, r3, #31
 8009002:	2b09      	cmp	r3, #9
 8009004:	bf94      	ite	ls
 8009006:	2301      	movls	r3, #1
 8009008:	2300      	movhi	r3, #0
 800900a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800900c:	2b00      	cmp	r3, #0
 800900e:	d079      	beq.n	8009104 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009018:	2b00      	cmp	r3, #0
 800901a:	d107      	bne.n	800902c <HAL_ADC_ConfigChannel+0x4f8>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	0e9b      	lsrs	r3, r3, #26
 8009022:	3301      	adds	r3, #1
 8009024:	069b      	lsls	r3, r3, #26
 8009026:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800902a:	e015      	b.n	8009058 <HAL_ADC_ConfigChannel+0x524>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009034:	fa93 f3a3 	rbit	r3, r3
 8009038:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800903a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800903c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800903e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8009044:	2320      	movs	r3, #32
 8009046:	e003      	b.n	8009050 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8009048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800904a:	fab3 f383 	clz	r3, r3
 800904e:	b2db      	uxtb	r3, r3
 8009050:	3301      	adds	r3, #1
 8009052:	069b      	lsls	r3, r3, #26
 8009054:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009060:	2b00      	cmp	r3, #0
 8009062:	d109      	bne.n	8009078 <HAL_ADC_ConfigChannel+0x544>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	0e9b      	lsrs	r3, r3, #26
 800906a:	3301      	adds	r3, #1
 800906c:	f003 031f 	and.w	r3, r3, #31
 8009070:	2101      	movs	r1, #1
 8009072:	fa01 f303 	lsl.w	r3, r1, r3
 8009076:	e017      	b.n	80090a8 <HAL_ADC_ConfigChannel+0x574>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800907e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009080:	fa93 f3a3 	rbit	r3, r3
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009088:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800908a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8009090:	2320      	movs	r3, #32
 8009092:	e003      	b.n	800909c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8009094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009096:	fab3 f383 	clz	r3, r3
 800909a:	b2db      	uxtb	r3, r3
 800909c:	3301      	adds	r3, #1
 800909e:	f003 031f 	and.w	r3, r3, #31
 80090a2:	2101      	movs	r1, #1
 80090a4:	fa01 f303 	lsl.w	r3, r1, r3
 80090a8:	ea42 0103 	orr.w	r1, r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <HAL_ADC_ConfigChannel+0x59a>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	0e9b      	lsrs	r3, r3, #26
 80090be:	3301      	adds	r3, #1
 80090c0:	f003 021f 	and.w	r2, r3, #31
 80090c4:	4613      	mov	r3, r2
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	4413      	add	r3, r2
 80090ca:	051b      	lsls	r3, r3, #20
 80090cc:	e018      	b.n	8009100 <HAL_ADC_ConfigChannel+0x5cc>
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d6:	fa93 f3a3 	rbit	r3, r3
 80090da:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80090e6:	2320      	movs	r3, #32
 80090e8:	e003      	b.n	80090f2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	fab3 f383 	clz	r3, r3
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	3301      	adds	r3, #1
 80090f4:	f003 021f 	and.w	r2, r3, #31
 80090f8:	4613      	mov	r3, r2
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	4413      	add	r3, r2
 80090fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009100:	430b      	orrs	r3, r1
 8009102:	e080      	b.n	8009206 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800910c:	2b00      	cmp	r3, #0
 800910e:	d107      	bne.n	8009120 <HAL_ADC_ConfigChannel+0x5ec>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	0e9b      	lsrs	r3, r3, #26
 8009116:	3301      	adds	r3, #1
 8009118:	069b      	lsls	r3, r3, #26
 800911a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800911e:	e015      	b.n	800914c <HAL_ADC_ConfigChannel+0x618>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009128:	fa93 f3a3 	rbit	r3, r3
 800912c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8009132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8009138:	2320      	movs	r3, #32
 800913a:	e003      	b.n	8009144 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	fab3 f383 	clz	r3, r3
 8009142:	b2db      	uxtb	r3, r3
 8009144:	3301      	adds	r3, #1
 8009146:	069b      	lsls	r3, r3, #26
 8009148:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009154:	2b00      	cmp	r3, #0
 8009156:	d109      	bne.n	800916c <HAL_ADC_ConfigChannel+0x638>
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	0e9b      	lsrs	r3, r3, #26
 800915e:	3301      	adds	r3, #1
 8009160:	f003 031f 	and.w	r3, r3, #31
 8009164:	2101      	movs	r1, #1
 8009166:	fa01 f303 	lsl.w	r3, r1, r3
 800916a:	e017      	b.n	800919c <HAL_ADC_ConfigChannel+0x668>
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	fa93 f3a3 	rbit	r3, r3
 8009178:	61bb      	str	r3, [r7, #24]
  return result;
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8009184:	2320      	movs	r3, #32
 8009186:	e003      	b.n	8009190 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	fab3 f383 	clz	r3, r3
 800918e:	b2db      	uxtb	r3, r3
 8009190:	3301      	adds	r3, #1
 8009192:	f003 031f 	and.w	r3, r3, #31
 8009196:	2101      	movs	r1, #1
 8009198:	fa01 f303 	lsl.w	r3, r1, r3
 800919c:	ea42 0103 	orr.w	r1, r2, r3
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10d      	bne.n	80091c8 <HAL_ADC_ConfigChannel+0x694>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	0e9b      	lsrs	r3, r3, #26
 80091b2:	3301      	adds	r3, #1
 80091b4:	f003 021f 	and.w	r2, r3, #31
 80091b8:	4613      	mov	r3, r2
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	4413      	add	r3, r2
 80091be:	3b1e      	subs	r3, #30
 80091c0:	051b      	lsls	r3, r3, #20
 80091c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80091c6:	e01d      	b.n	8009204 <HAL_ADC_ConfigChannel+0x6d0>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	fa93 f3a3 	rbit	r3, r3
 80091d4:	60fb      	str	r3, [r7, #12]
  return result;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d103      	bne.n	80091e8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80091e0:	2320      	movs	r3, #32
 80091e2:	e005      	b.n	80091f0 <HAL_ADC_ConfigChannel+0x6bc>
 80091e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	fab3 f383 	clz	r3, r3
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	3301      	adds	r3, #1
 80091f2:	f003 021f 	and.w	r2, r3, #31
 80091f6:	4613      	mov	r3, r2
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	4413      	add	r3, r2
 80091fc:	3b1e      	subs	r3, #30
 80091fe:	051b      	lsls	r3, r3, #20
 8009200:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009204:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800920a:	4619      	mov	r1, r3
 800920c:	f7ff f8c3 	bl	8008396 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	4b3d      	ldr	r3, [pc, #244]	; (800930c <HAL_ADC_ConfigChannel+0x7d8>)
 8009216:	4013      	ands	r3, r2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d06c      	beq.n	80092f6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800921c:	483c      	ldr	r0, [pc, #240]	; (8009310 <HAL_ADC_ConfigChannel+0x7dc>)
 800921e:	f7ff f805 	bl	800822c <LL_ADC_GetCommonPathInternalCh>
 8009222:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a3a      	ldr	r2, [pc, #232]	; (8009314 <HAL_ADC_ConfigChannel+0x7e0>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d127      	bne.n	8009280 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d121      	bne.n	8009280 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a35      	ldr	r2, [pc, #212]	; (8009318 <HAL_ADC_ConfigChannel+0x7e4>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d157      	bne.n	80092f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800924a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800924e:	4619      	mov	r1, r3
 8009250:	482f      	ldr	r0, [pc, #188]	; (8009310 <HAL_ADC_ConfigChannel+0x7dc>)
 8009252:	f7fe ffd8 	bl	8008206 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009256:	4b31      	ldr	r3, [pc, #196]	; (800931c <HAL_ADC_ConfigChannel+0x7e8>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	099b      	lsrs	r3, r3, #6
 800925c:	4a30      	ldr	r2, [pc, #192]	; (8009320 <HAL_ADC_ConfigChannel+0x7ec>)
 800925e:	fba2 2303 	umull	r2, r3, r2, r3
 8009262:	099b      	lsrs	r3, r3, #6
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	4613      	mov	r3, r2
 8009268:	005b      	lsls	r3, r3, #1
 800926a:	4413      	add	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009270:	e002      	b.n	8009278 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	3b01      	subs	r3, #1
 8009276:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1f9      	bne.n	8009272 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800927e:	e03a      	b.n	80092f6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a27      	ldr	r2, [pc, #156]	; (8009324 <HAL_ADC_ConfigChannel+0x7f0>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d113      	bne.n	80092b2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800928a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800928e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10d      	bne.n	80092b2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a1f      	ldr	r2, [pc, #124]	; (8009318 <HAL_ADC_ConfigChannel+0x7e4>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d12a      	bne.n	80092f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092a8:	4619      	mov	r1, r3
 80092aa:	4819      	ldr	r0, [pc, #100]	; (8009310 <HAL_ADC_ConfigChannel+0x7dc>)
 80092ac:	f7fe ffab 	bl	8008206 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80092b0:	e021      	b.n	80092f6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a1c      	ldr	r2, [pc, #112]	; (8009328 <HAL_ADC_ConfigChannel+0x7f4>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d11c      	bne.n	80092f6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80092bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d116      	bne.n	80092f6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a12      	ldr	r2, [pc, #72]	; (8009318 <HAL_ADC_ConfigChannel+0x7e4>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d111      	bne.n	80092f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092da:	4619      	mov	r1, r3
 80092dc:	480c      	ldr	r0, [pc, #48]	; (8009310 <HAL_ADC_ConfigChannel+0x7dc>)
 80092de:	f7fe ff92 	bl	8008206 <LL_ADC_SetCommonPathInternalCh>
 80092e2:	e008      	b.n	80092f6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e8:	f043 0220 	orr.w	r2, r3, #32
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80092fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8009302:	4618      	mov	r0, r3
 8009304:	37d8      	adds	r7, #216	; 0xd8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	80080000 	.word	0x80080000
 8009310:	50040300 	.word	0x50040300
 8009314:	c7520000 	.word	0xc7520000
 8009318:	50040000 	.word	0x50040000
 800931c:	2000012c 	.word	0x2000012c
 8009320:	053e2d63 	.word	0x053e2d63
 8009324:	cb840000 	.word	0xcb840000
 8009328:	80000001 	.word	0x80000001

0800932c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009336:	2300      	movs	r3, #0
 8009338:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff f93a 	bl	80085bc <LL_ADC_REG_IsConversionOngoing>
 8009348:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff f95b 	bl	800860a <LL_ADC_INJ_IsConversionOngoing>
 8009354:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d103      	bne.n	8009364 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 8098 	beq.w	8009494 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d02a      	beq.n	80093c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7e5b      	ldrb	r3, [r3, #25]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d126      	bne.n	80093c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7e1b      	ldrb	r3, [r3, #24]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d122      	bne.n	80093c8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8009382:	2301      	movs	r3, #1
 8009384:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009386:	e014      	b.n	80093b2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	4a45      	ldr	r2, [pc, #276]	; (80094a0 <ADC_ConversionStop+0x174>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d90d      	bls.n	80093ac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009394:	f043 0210 	orr.w	r2, r3, #16
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093a0:	f043 0201 	orr.w	r2, r3, #1
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e074      	b.n	8009496 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	3301      	adds	r3, #1
 80093b0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093bc:	2b40      	cmp	r3, #64	; 0x40
 80093be:	d1e3      	bne.n	8009388 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2240      	movs	r2, #64	; 0x40
 80093c6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d014      	beq.n	80093f8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7ff f8f2 	bl	80085bc <LL_ADC_REG_IsConversionOngoing>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00c      	beq.n	80093f8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff f8af 	bl	8008546 <LL_ADC_IsDisableOngoing>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d104      	bne.n	80093f8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff f8ce 	bl	8008594 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d014      	beq.n	8009428 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff f901 	bl	800860a <LL_ADC_INJ_IsConversionOngoing>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00c      	beq.n	8009428 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff f897 	bl	8008546 <LL_ADC_IsDisableOngoing>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d104      	bne.n	8009428 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff f8dd 	bl	80085e2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	2b02      	cmp	r3, #2
 800942c:	d005      	beq.n	800943a <ADC_ConversionStop+0x10e>
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	2b03      	cmp	r3, #3
 8009432:	d105      	bne.n	8009440 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8009434:	230c      	movs	r3, #12
 8009436:	617b      	str	r3, [r7, #20]
        break;
 8009438:	e005      	b.n	8009446 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800943a:	2308      	movs	r3, #8
 800943c:	617b      	str	r3, [r7, #20]
        break;
 800943e:	e002      	b.n	8009446 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8009440:	2304      	movs	r3, #4
 8009442:	617b      	str	r3, [r7, #20]
        break;
 8009444:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8009446:	f7fe febf 	bl	80081c8 <HAL_GetTick>
 800944a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800944c:	e01b      	b.n	8009486 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800944e:	f7fe febb 	bl	80081c8 <HAL_GetTick>
 8009452:	4602      	mov	r2, r0
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	2b05      	cmp	r3, #5
 800945a:	d914      	bls.n	8009486 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689a      	ldr	r2, [r3, #8]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	4013      	ands	r3, r2
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00d      	beq.n	8009486 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946e:	f043 0210 	orr.w	r2, r3, #16
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800947a:	f043 0201 	orr.w	r2, r3, #1
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e007      	b.n	8009496 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	4013      	ands	r3, r2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1dc      	bne.n	800944e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3720      	adds	r7, #32
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	a33fffff 	.word	0xa33fffff

080094a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7ff f833 	bl	8008520 <LL_ADC_IsEnabled>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d169      	bne.n	8009594 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	4b36      	ldr	r3, [pc, #216]	; (80095a0 <ADC_Enable+0xfc>)
 80094c8:	4013      	ands	r3, r2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00d      	beq.n	80094ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d2:	f043 0210 	orr.w	r2, r3, #16
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094de:	f043 0201 	orr.w	r2, r3, #1
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e055      	b.n	8009596 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe ffee 	bl	80084d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80094f4:	482b      	ldr	r0, [pc, #172]	; (80095a4 <ADC_Enable+0x100>)
 80094f6:	f7fe fe99 	bl	800822c <LL_ADC_GetCommonPathInternalCh>
 80094fa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80094fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8009500:	2b00      	cmp	r3, #0
 8009502:	d013      	beq.n	800952c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009504:	4b28      	ldr	r3, [pc, #160]	; (80095a8 <ADC_Enable+0x104>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	099b      	lsrs	r3, r3, #6
 800950a:	4a28      	ldr	r2, [pc, #160]	; (80095ac <ADC_Enable+0x108>)
 800950c:	fba2 2303 	umull	r2, r3, r2, r3
 8009510:	099b      	lsrs	r3, r3, #6
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	4613      	mov	r3, r2
 8009516:	005b      	lsls	r3, r3, #1
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800951e:	e002      	b.n	8009526 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	3b01      	subs	r3, #1
 8009524:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1f9      	bne.n	8009520 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800952c:	f7fe fe4c 	bl	80081c8 <HAL_GetTick>
 8009530:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009532:	e028      	b.n	8009586 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4618      	mov	r0, r3
 800953a:	f7fe fff1 	bl	8008520 <LL_ADC_IsEnabled>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d104      	bne.n	800954e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4618      	mov	r0, r3
 800954a:	f7fe ffc1 	bl	80084d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800954e:	f7fe fe3b 	bl	80081c8 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	2b02      	cmp	r3, #2
 800955a:	d914      	bls.n	8009586 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b01      	cmp	r3, #1
 8009568:	d00d      	beq.n	8009586 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800956e:	f043 0210 	orr.w	r2, r3, #16
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800957a:	f043 0201 	orr.w	r2, r3, #1
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e007      	b.n	8009596 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b01      	cmp	r3, #1
 8009592:	d1cf      	bne.n	8009534 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	8000003f 	.word	0x8000003f
 80095a4:	50040300 	.word	0x50040300
 80095a8:	2000012c 	.word	0x2000012c
 80095ac:	053e2d63 	.word	0x053e2d63

080095b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe ffc2 	bl	8008546 <LL_ADC_IsDisableOngoing>
 80095c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe ffa9 	bl	8008520 <LL_ADC_IsEnabled>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d047      	beq.n	8009664 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d144      	bne.n	8009664 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	f003 030d 	and.w	r3, r3, #13
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d10c      	bne.n	8009602 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe ff83 	bl	80084f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2203      	movs	r2, #3
 80095f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80095fa:	f7fe fde5 	bl	80081c8 <HAL_GetTick>
 80095fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009600:	e029      	b.n	8009656 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009606:	f043 0210 	orr.w	r2, r3, #16
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009612:	f043 0201 	orr.w	r2, r3, #1
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e023      	b.n	8009666 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800961e:	f7fe fdd3 	bl	80081c8 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	2b02      	cmp	r3, #2
 800962a:	d914      	bls.n	8009656 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00d      	beq.n	8009656 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963e:	f043 0210 	orr.w	r2, r3, #16
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800964a:	f043 0201 	orr.w	r2, r3, #1
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e007      	b.n	8009666 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1dc      	bne.n	800961e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
	...

08009670 <__NVIC_SetPriorityGrouping>:
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f003 0307 	and.w	r3, r3, #7
 800967e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009680:	4b0c      	ldr	r3, [pc, #48]	; (80096b4 <__NVIC_SetPriorityGrouping+0x44>)
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800968c:	4013      	ands	r3, r2
 800968e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800969c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096a2:	4a04      	ldr	r2, [pc, #16]	; (80096b4 <__NVIC_SetPriorityGrouping+0x44>)
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	60d3      	str	r3, [r2, #12]
}
 80096a8:	bf00      	nop
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	e000ed00 	.word	0xe000ed00

080096b8 <__NVIC_GetPriorityGrouping>:
{
 80096b8:	b480      	push	{r7}
 80096ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80096bc:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <__NVIC_GetPriorityGrouping+0x18>)
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	0a1b      	lsrs	r3, r3, #8
 80096c2:	f003 0307 	and.w	r3, r3, #7
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	e000ed00 	.word	0xe000ed00

080096d4 <__NVIC_EnableIRQ>:
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	db0b      	blt.n	80096fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	f003 021f 	and.w	r2, r3, #31
 80096ec:	4907      	ldr	r1, [pc, #28]	; (800970c <__NVIC_EnableIRQ+0x38>)
 80096ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096f2:	095b      	lsrs	r3, r3, #5
 80096f4:	2001      	movs	r0, #1
 80096f6:	fa00 f202 	lsl.w	r2, r0, r2
 80096fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80096fe:	bf00      	nop
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	e000e100 	.word	0xe000e100

08009710 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800971a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800971e:	2b00      	cmp	r3, #0
 8009720:	db12      	blt.n	8009748 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	f003 021f 	and.w	r2, r3, #31
 8009728:	490a      	ldr	r1, [pc, #40]	; (8009754 <__NVIC_DisableIRQ+0x44>)
 800972a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800972e:	095b      	lsrs	r3, r3, #5
 8009730:	2001      	movs	r0, #1
 8009732:	fa00 f202 	lsl.w	r2, r0, r2
 8009736:	3320      	adds	r3, #32
 8009738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800973c:	f3bf 8f4f 	dsb	sy
}
 8009740:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009742:	f3bf 8f6f 	isb	sy
}
 8009746:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	e000e100 	.word	0xe000e100

08009758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	6039      	str	r1, [r7, #0]
 8009762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009768:	2b00      	cmp	r3, #0
 800976a:	db0a      	blt.n	8009782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	b2da      	uxtb	r2, r3
 8009770:	490c      	ldr	r1, [pc, #48]	; (80097a4 <__NVIC_SetPriority+0x4c>)
 8009772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009776:	0112      	lsls	r2, r2, #4
 8009778:	b2d2      	uxtb	r2, r2
 800977a:	440b      	add	r3, r1
 800977c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009780:	e00a      	b.n	8009798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	b2da      	uxtb	r2, r3
 8009786:	4908      	ldr	r1, [pc, #32]	; (80097a8 <__NVIC_SetPriority+0x50>)
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	3b04      	subs	r3, #4
 8009790:	0112      	lsls	r2, r2, #4
 8009792:	b2d2      	uxtb	r2, r2
 8009794:	440b      	add	r3, r1
 8009796:	761a      	strb	r2, [r3, #24]
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	e000e100 	.word	0xe000e100
 80097a8:	e000ed00 	.word	0xe000ed00

080097ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b089      	sub	sp, #36	; 0x24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f003 0307 	and.w	r3, r3, #7
 80097be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	f1c3 0307 	rsb	r3, r3, #7
 80097c6:	2b04      	cmp	r3, #4
 80097c8:	bf28      	it	cs
 80097ca:	2304      	movcs	r3, #4
 80097cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	3304      	adds	r3, #4
 80097d2:	2b06      	cmp	r3, #6
 80097d4:	d902      	bls.n	80097dc <NVIC_EncodePriority+0x30>
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	3b03      	subs	r3, #3
 80097da:	e000      	b.n	80097de <NVIC_EncodePriority+0x32>
 80097dc:	2300      	movs	r3, #0
 80097de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ea:	43da      	mvns	r2, r3
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	401a      	ands	r2, r3
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	fa01 f303 	lsl.w	r3, r1, r3
 80097fe:	43d9      	mvns	r1, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009804:	4313      	orrs	r3, r2
         );
}
 8009806:	4618      	mov	r0, r3
 8009808:	3724      	adds	r7, #36	; 0x24
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
	...

08009814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3b01      	subs	r3, #1
 8009820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009824:	d301      	bcc.n	800982a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009826:	2301      	movs	r3, #1
 8009828:	e00f      	b.n	800984a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800982a:	4a0a      	ldr	r2, [pc, #40]	; (8009854 <SysTick_Config+0x40>)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	3b01      	subs	r3, #1
 8009830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009832:	210f      	movs	r1, #15
 8009834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009838:	f7ff ff8e 	bl	8009758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800983c:	4b05      	ldr	r3, [pc, #20]	; (8009854 <SysTick_Config+0x40>)
 800983e:	2200      	movs	r2, #0
 8009840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009842:	4b04      	ldr	r3, [pc, #16]	; (8009854 <SysTick_Config+0x40>)
 8009844:	2207      	movs	r2, #7
 8009846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	e000e010 	.word	0xe000e010

08009858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff ff05 	bl	8009670 <__NVIC_SetPriorityGrouping>
}
 8009866:	bf00      	nop
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b086      	sub	sp, #24
 8009872:	af00      	add	r7, sp, #0
 8009874:	4603      	mov	r3, r0
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800987c:	2300      	movs	r3, #0
 800987e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009880:	f7ff ff1a 	bl	80096b8 <__NVIC_GetPriorityGrouping>
 8009884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	68b9      	ldr	r1, [r7, #8]
 800988a:	6978      	ldr	r0, [r7, #20]
 800988c:	f7ff ff8e 	bl	80097ac <NVIC_EncodePriority>
 8009890:	4602      	mov	r2, r0
 8009892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009896:	4611      	mov	r1, r2
 8009898:	4618      	mov	r0, r3
 800989a:	f7ff ff5d 	bl	8009758 <__NVIC_SetPriority>
}
 800989e:	bf00      	nop
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	4603      	mov	r3, r0
 80098ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff ff0d 	bl	80096d4 <__NVIC_EnableIRQ>
}
 80098ba:	bf00      	nop
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	4603      	mov	r3, r0
 80098ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80098cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff ff1d 	bl	8009710 <__NVIC_DisableIRQ>
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7ff ff94 	bl	8009814 <SysTick_Config>
 80098ec:	4603      	mov	r3, r0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
	...

080098f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e08d      	b.n	8009a26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	461a      	mov	r2, r3
 8009910:	4b47      	ldr	r3, [pc, #284]	; (8009a30 <HAL_DMA_Init+0x138>)
 8009912:	429a      	cmp	r2, r3
 8009914:	d80f      	bhi.n	8009936 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	4b45      	ldr	r3, [pc, #276]	; (8009a34 <HAL_DMA_Init+0x13c>)
 800991e:	4413      	add	r3, r2
 8009920:	4a45      	ldr	r2, [pc, #276]	; (8009a38 <HAL_DMA_Init+0x140>)
 8009922:	fba2 2303 	umull	r2, r3, r2, r3
 8009926:	091b      	lsrs	r3, r3, #4
 8009928:	009a      	lsls	r2, r3, #2
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a42      	ldr	r2, [pc, #264]	; (8009a3c <HAL_DMA_Init+0x144>)
 8009932:	641a      	str	r2, [r3, #64]	; 0x40
 8009934:	e00e      	b.n	8009954 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	4b40      	ldr	r3, [pc, #256]	; (8009a40 <HAL_DMA_Init+0x148>)
 800993e:	4413      	add	r3, r2
 8009940:	4a3d      	ldr	r2, [pc, #244]	; (8009a38 <HAL_DMA_Init+0x140>)
 8009942:	fba2 2303 	umull	r2, r3, r2, r3
 8009946:	091b      	lsrs	r3, r3, #4
 8009948:	009a      	lsls	r2, r3, #2
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a3c      	ldr	r2, [pc, #240]	; (8009a44 <HAL_DMA_Init+0x14c>)
 8009952:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2202      	movs	r2, #2
 8009958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800996a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009978:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009984:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009990:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa72 	bl	8009e90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099b4:	d102      	bne.n	80099bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c4:	b2d2      	uxtb	r2, r2
 80099c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80099d0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d010      	beq.n	80099fc <HAL_DMA_Init+0x104>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d80c      	bhi.n	80099fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fa92 	bl	8009f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ec:	2200      	movs	r2, #0
 80099ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80099f8:	605a      	str	r2, [r3, #4]
 80099fa:	e008      	b.n	8009a0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	40020407 	.word	0x40020407
 8009a34:	bffdfff8 	.word	0xbffdfff8
 8009a38:	cccccccd 	.word	0xcccccccd
 8009a3c:	40020000 	.word	0x40020000
 8009a40:	bffdfbf8 	.word	0xbffdfbf8
 8009a44:	40020400 	.word	0x40020400

08009a48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
 8009a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d101      	bne.n	8009a68 <HAL_DMA_Start_IT+0x20>
 8009a64:	2302      	movs	r3, #2
 8009a66:	e066      	b.n	8009b36 <HAL_DMA_Start_IT+0xee>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d155      	bne.n	8009b28 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0201 	bic.w	r2, r2, #1
 8009a98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	68b9      	ldr	r1, [r7, #8]
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f000 f9b6 	bl	8009e12 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d008      	beq.n	8009ac0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f042 020e 	orr.w	r2, r2, #14
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	e00f      	b.n	8009ae0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 0204 	bic.w	r2, r2, #4
 8009ace:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f042 020a 	orr.w	r2, r2, #10
 8009ade:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d007      	beq.n	8009afe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009afc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d007      	beq.n	8009b16 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b14:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f042 0201 	orr.w	r2, r2, #1
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	e005      	b.n	8009b34 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009b30:	2302      	movs	r3, #2
 8009b32:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b085      	sub	sp, #20
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d008      	beq.n	8009b68 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2204      	movs	r2, #4
 8009b5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e040      	b.n	8009bea <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 020e 	bic.w	r2, r2, #14
 8009b76:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b86:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f022 0201 	bic.w	r2, r2, #1
 8009b96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b9c:	f003 021c 	and.w	r2, r3, #28
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8009baa:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009bb4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00c      	beq.n	8009bd8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bcc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009bd6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b084      	sub	sp, #16
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d005      	beq.n	8009c1a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2204      	movs	r2, #4
 8009c12:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	73fb      	strb	r3, [r7, #15]
 8009c18:	e047      	b.n	8009caa <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f022 020e 	bic.w	r2, r2, #14
 8009c28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f022 0201 	bic.w	r2, r2, #1
 8009c38:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4e:	f003 021c 	and.w	r2, r3, #28
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c56:	2101      	movs	r1, #1
 8009c58:	fa01 f202 	lsl.w	r2, r1, r2
 8009c5c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009c66:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00c      	beq.n	8009c8a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009c88:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d003      	beq.n	8009caa <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	4798      	blx	r3
    }
  }
  return status;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd0:	f003 031c 	and.w	r3, r3, #28
 8009cd4:	2204      	movs	r2, #4
 8009cd6:	409a      	lsls	r2, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4013      	ands	r3, r2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d026      	beq.n	8009d2e <HAL_DMA_IRQHandler+0x7a>
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d021      	beq.n	8009d2e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0320 	and.w	r3, r3, #32
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d107      	bne.n	8009d08 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 0204 	bic.w	r2, r2, #4
 8009d06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0c:	f003 021c 	and.w	r2, r3, #28
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d14:	2104      	movs	r1, #4
 8009d16:	fa01 f202 	lsl.w	r2, r1, r2
 8009d1a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d071      	beq.n	8009e08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009d2c:	e06c      	b.n	8009e08 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d32:	f003 031c 	and.w	r3, r3, #28
 8009d36:	2202      	movs	r2, #2
 8009d38:	409a      	lsls	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d02e      	beq.n	8009da0 <HAL_DMA_IRQHandler+0xec>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d029      	beq.n	8009da0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0320 	and.w	r3, r3, #32
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10b      	bne.n	8009d72 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f022 020a 	bic.w	r2, r2, #10
 8009d68:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d76:	f003 021c 	and.w	r2, r3, #28
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7e:	2102      	movs	r1, #2
 8009d80:	fa01 f202 	lsl.w	r2, r1, r2
 8009d84:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d038      	beq.n	8009e08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009d9e:	e033      	b.n	8009e08 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da4:	f003 031c 	and.w	r3, r3, #28
 8009da8:	2208      	movs	r2, #8
 8009daa:	409a      	lsls	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4013      	ands	r3, r2
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d02a      	beq.n	8009e0a <HAL_DMA_IRQHandler+0x156>
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f003 0308 	and.w	r3, r3, #8
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d025      	beq.n	8009e0a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f022 020e 	bic.w	r2, r2, #14
 8009dcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dd2:	f003 021c 	and.w	r2, r3, #28
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dda:	2101      	movs	r1, #1
 8009ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8009de0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
}
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	607a      	str	r2, [r7, #4]
 8009e1e:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009e28:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d004      	beq.n	8009e3c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009e3a:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e40:	f003 021c 	and.w	r2, r3, #28
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e48:	2101      	movs	r1, #1
 8009e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8009e4e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	2b10      	cmp	r3, #16
 8009e5e:	d108      	bne.n	8009e72 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009e70:	e007      	b.n	8009e82 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	60da      	str	r2, [r3, #12]
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
	...

08009e90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	4b17      	ldr	r3, [pc, #92]	; (8009efc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d80a      	bhi.n	8009eba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea8:	089b      	lsrs	r3, r3, #2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009eb0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	6493      	str	r3, [r2, #72]	; 0x48
 8009eb8:	e007      	b.n	8009eca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ebe:	089b      	lsrs	r3, r3, #2
 8009ec0:	009a      	lsls	r2, r3, #2
 8009ec2:	4b0f      	ldr	r3, [pc, #60]	; (8009f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009ec4:	4413      	add	r3, r2
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	3b08      	subs	r3, #8
 8009ed2:	4a0c      	ldr	r2, [pc, #48]	; (8009f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed8:	091b      	lsrs	r3, r3, #4
 8009eda:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a0a      	ldr	r2, [pc, #40]	; (8009f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009ee0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f003 031f 	and.w	r3, r3, #31
 8009ee8:	2201      	movs	r2, #1
 8009eea:	409a      	lsls	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009ef0:	bf00      	nop
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	40020407 	.word	0x40020407
 8009f00:	4002081c 	.word	0x4002081c
 8009f04:	cccccccd 	.word	0xcccccccd
 8009f08:	40020880 	.word	0x40020880

08009f0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4b0b      	ldr	r3, [pc, #44]	; (8009f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	461a      	mov	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a08      	ldr	r2, [pc, #32]	; (8009f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009f2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	f003 0303 	and.w	r3, r3, #3
 8009f38:	2201      	movs	r2, #1
 8009f3a:	409a      	lsls	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009f40:	bf00      	nop
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	1000823f 	.word	0x1000823f
 8009f50:	40020940 	.word	0x40020940

08009f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f62:	e166      	b.n	800a232 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	2101      	movs	r1, #1
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f70:	4013      	ands	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 8158 	beq.w	800a22c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f003 0303 	and.w	r3, r3, #3
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d005      	beq.n	8009f94 <HAL_GPIO_Init+0x40>
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f003 0303 	and.w	r3, r3, #3
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d130      	bne.n	8009ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	2203      	movs	r2, #3
 8009fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa4:	43db      	mvns	r3, r3
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4013      	ands	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	68da      	ldr	r2, [r3, #12]
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fca:	2201      	movs	r2, #1
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd2:	43db      	mvns	r3, r3
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	091b      	lsrs	r3, r3, #4
 8009fe0:	f003 0201 	and.w	r2, r3, #1
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f003 0303 	and.w	r3, r3, #3
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d017      	beq.n	800a032 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	2203      	movs	r2, #3
 800a00e:	fa02 f303 	lsl.w	r3, r2, r3
 800a012:	43db      	mvns	r3, r3
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	4013      	ands	r3, r2
 800a018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	689a      	ldr	r2, [r3, #8]
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	fa02 f303 	lsl.w	r3, r2, r3
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d123      	bne.n	800a086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	08da      	lsrs	r2, r3, #3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3208      	adds	r2, #8
 800a046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f003 0307 	and.w	r3, r3, #7
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	220f      	movs	r2, #15
 800a056:	fa02 f303 	lsl.w	r3, r2, r3
 800a05a:	43db      	mvns	r3, r3
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	4013      	ands	r3, r2
 800a060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	691a      	ldr	r2, [r3, #16]
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f003 0307 	and.w	r3, r3, #7
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	fa02 f303 	lsl.w	r3, r2, r3
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	4313      	orrs	r3, r2
 800a076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	08da      	lsrs	r2, r3, #3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3208      	adds	r2, #8
 800a080:	6939      	ldr	r1, [r7, #16]
 800a082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	005b      	lsls	r3, r3, #1
 800a090:	2203      	movs	r2, #3
 800a092:	fa02 f303 	lsl.w	r3, r2, r3
 800a096:	43db      	mvns	r3, r3
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	4013      	ands	r3, r2
 800a09c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f003 0203 	and.w	r2, r3, #3
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 80b2 	beq.w	800a22c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0c8:	4b61      	ldr	r3, [pc, #388]	; (800a250 <HAL_GPIO_Init+0x2fc>)
 800a0ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0cc:	4a60      	ldr	r2, [pc, #384]	; (800a250 <HAL_GPIO_Init+0x2fc>)
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	6613      	str	r3, [r2, #96]	; 0x60
 800a0d4:	4b5e      	ldr	r3, [pc, #376]	; (800a250 <HAL_GPIO_Init+0x2fc>)
 800a0d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	60bb      	str	r3, [r7, #8]
 800a0de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a0e0:	4a5c      	ldr	r2, [pc, #368]	; (800a254 <HAL_GPIO_Init+0x300>)
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	089b      	lsrs	r3, r3, #2
 800a0e6:	3302      	adds	r3, #2
 800a0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f003 0303 	and.w	r3, r3, #3
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	220f      	movs	r2, #15
 800a0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fc:	43db      	mvns	r3, r3
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	4013      	ands	r3, r2
 800a102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a10a:	d02b      	beq.n	800a164 <HAL_GPIO_Init+0x210>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a52      	ldr	r2, [pc, #328]	; (800a258 <HAL_GPIO_Init+0x304>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d025      	beq.n	800a160 <HAL_GPIO_Init+0x20c>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a51      	ldr	r2, [pc, #324]	; (800a25c <HAL_GPIO_Init+0x308>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d01f      	beq.n	800a15c <HAL_GPIO_Init+0x208>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a50      	ldr	r2, [pc, #320]	; (800a260 <HAL_GPIO_Init+0x30c>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d019      	beq.n	800a158 <HAL_GPIO_Init+0x204>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a4f      	ldr	r2, [pc, #316]	; (800a264 <HAL_GPIO_Init+0x310>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d013      	beq.n	800a154 <HAL_GPIO_Init+0x200>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a4e      	ldr	r2, [pc, #312]	; (800a268 <HAL_GPIO_Init+0x314>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d00d      	beq.n	800a150 <HAL_GPIO_Init+0x1fc>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a4d      	ldr	r2, [pc, #308]	; (800a26c <HAL_GPIO_Init+0x318>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d007      	beq.n	800a14c <HAL_GPIO_Init+0x1f8>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a4c      	ldr	r2, [pc, #304]	; (800a270 <HAL_GPIO_Init+0x31c>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d101      	bne.n	800a148 <HAL_GPIO_Init+0x1f4>
 800a144:	2307      	movs	r3, #7
 800a146:	e00e      	b.n	800a166 <HAL_GPIO_Init+0x212>
 800a148:	2308      	movs	r3, #8
 800a14a:	e00c      	b.n	800a166 <HAL_GPIO_Init+0x212>
 800a14c:	2306      	movs	r3, #6
 800a14e:	e00a      	b.n	800a166 <HAL_GPIO_Init+0x212>
 800a150:	2305      	movs	r3, #5
 800a152:	e008      	b.n	800a166 <HAL_GPIO_Init+0x212>
 800a154:	2304      	movs	r3, #4
 800a156:	e006      	b.n	800a166 <HAL_GPIO_Init+0x212>
 800a158:	2303      	movs	r3, #3
 800a15a:	e004      	b.n	800a166 <HAL_GPIO_Init+0x212>
 800a15c:	2302      	movs	r3, #2
 800a15e:	e002      	b.n	800a166 <HAL_GPIO_Init+0x212>
 800a160:	2301      	movs	r3, #1
 800a162:	e000      	b.n	800a166 <HAL_GPIO_Init+0x212>
 800a164:	2300      	movs	r3, #0
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	f002 0203 	and.w	r2, r2, #3
 800a16c:	0092      	lsls	r2, r2, #2
 800a16e:	4093      	lsls	r3, r2
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	4313      	orrs	r3, r2
 800a174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a176:	4937      	ldr	r1, [pc, #220]	; (800a254 <HAL_GPIO_Init+0x300>)
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	089b      	lsrs	r3, r3, #2
 800a17c:	3302      	adds	r3, #2
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a184:	4b3b      	ldr	r3, [pc, #236]	; (800a274 <HAL_GPIO_Init+0x320>)
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	43db      	mvns	r3, r3
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	4013      	ands	r3, r2
 800a192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a1a8:	4a32      	ldr	r2, [pc, #200]	; (800a274 <HAL_GPIO_Init+0x320>)
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a1ae:	4b31      	ldr	r3, [pc, #196]	; (800a274 <HAL_GPIO_Init+0x320>)
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	43db      	mvns	r3, r3
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d003      	beq.n	800a1d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a1d2:	4a28      	ldr	r2, [pc, #160]	; (800a274 <HAL_GPIO_Init+0x320>)
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a1d8:	4b26      	ldr	r3, [pc, #152]	; (800a274 <HAL_GPIO_Init+0x320>)
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	43db      	mvns	r3, r3
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d003      	beq.n	800a1fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a1fc:	4a1d      	ldr	r2, [pc, #116]	; (800a274 <HAL_GPIO_Init+0x320>)
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a202:	4b1c      	ldr	r3, [pc, #112]	; (800a274 <HAL_GPIO_Init+0x320>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	43db      	mvns	r3, r3
 800a20c:	693a      	ldr	r2, [r7, #16]
 800a20e:	4013      	ands	r3, r2
 800a210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	4313      	orrs	r3, r2
 800a224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a226:	4a13      	ldr	r2, [pc, #76]	; (800a274 <HAL_GPIO_Init+0x320>)
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	3301      	adds	r3, #1
 800a230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	fa22 f303 	lsr.w	r3, r2, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f47f ae91 	bne.w	8009f64 <HAL_GPIO_Init+0x10>
  }
}
 800a242:	bf00      	nop
 800a244:	bf00      	nop
 800a246:	371c      	adds	r7, #28
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	40021000 	.word	0x40021000
 800a254:	40010000 	.word	0x40010000
 800a258:	48000400 	.word	0x48000400
 800a25c:	48000800 	.word	0x48000800
 800a260:	48000c00 	.word	0x48000c00
 800a264:	48001000 	.word	0x48001000
 800a268:	48001400 	.word	0x48001400
 800a26c:	48001800 	.word	0x48001800
 800a270:	48001c00 	.word	0x48001c00
 800a274:	40010400 	.word	0x40010400

0800a278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	807b      	strh	r3, [r7, #2]
 800a284:	4613      	mov	r3, r2
 800a286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a288:	787b      	ldrb	r3, [r7, #1]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a28e:	887a      	ldrh	r2, [r7, #2]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a294:	e002      	b.n	800a29c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a296:	887a      	ldrh	r2, [r7, #2]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a2ba:	887a      	ldrh	r2, [r7, #2]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4013      	ands	r3, r2
 800a2c0:	041a      	lsls	r2, r3, #16
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	43d9      	mvns	r1, r3
 800a2c6:	887b      	ldrh	r3, [r7, #2]
 800a2c8:	400b      	ands	r3, r1
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	619a      	str	r2, [r3, #24]
}
 800a2d0:	bf00      	nop
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a2e6:	4b08      	ldr	r3, [pc, #32]	; (800a308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2e8:	695a      	ldr	r2, [r3, #20]
 800a2ea:	88fb      	ldrh	r3, [r7, #6]
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d006      	beq.n	800a300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a2f2:	4a05      	ldr	r2, [pc, #20]	; (800a308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a2f4:	88fb      	ldrh	r3, [r7, #6]
 800a2f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a2f8:	88fb      	ldrh	r3, [r7, #6]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fc f9b4 	bl	8006668 <HAL_GPIO_EXTI_Callback>
  }
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	40010400 	.word	0x40010400

0800a30c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a314:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a318:	4a0a      	ldr	r2, [pc, #40]	; (800a344 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a31a:	f043 0301 	orr.w	r3, r3, #1
 800a31e:	6613      	str	r3, [r2, #96]	; 0x60
 800a320:	4b08      	ldr	r3, [pc, #32]	; (800a344 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800a322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	4905      	ldr	r1, [pc, #20]	; (800a348 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4313      	orrs	r3, r2
 800a336:	604b      	str	r3, [r1, #4]
}
 800a338:	bf00      	nop
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	40021000 	.word	0x40021000
 800a348:	40010000 	.word	0x40010000

0800a34c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a350:	4b0d      	ldr	r3, [pc, #52]	; (800a388 <HAL_PWREx_GetVoltageRange+0x3c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a35c:	d102      	bne.n	800a364 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800a35e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a362:	e00b      	b.n	800a37c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800a364:	4b08      	ldr	r3, [pc, #32]	; (800a388 <HAL_PWREx_GetVoltageRange+0x3c>)
 800a366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a372:	d102      	bne.n	800a37a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800a374:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a378:	e000      	b.n	800a37c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800a37a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	40007000 	.word	0x40007000

0800a38c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d141      	bne.n	800a41e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a39a:	4b4b      	ldr	r3, [pc, #300]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a6:	d131      	bne.n	800a40c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a3a8:	4b47      	ldr	r3, [pc, #284]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ae:	4a46      	ldr	r2, [pc, #280]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a3b8:	4b43      	ldr	r3, [pc, #268]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a3c0:	4a41      	ldr	r2, [pc, #260]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a3c8:	4b40      	ldr	r3, [pc, #256]	; (800a4cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2232      	movs	r2, #50	; 0x32
 800a3ce:	fb02 f303 	mul.w	r3, r2, r3
 800a3d2:	4a3f      	ldr	r2, [pc, #252]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d8:	0c9b      	lsrs	r3, r3, #18
 800a3da:	3301      	adds	r3, #1
 800a3dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3de:	e002      	b.n	800a3e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3e6:	4b38      	ldr	r3, [pc, #224]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3f2:	d102      	bne.n	800a3fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1f2      	bne.n	800a3e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a3fa:	4b33      	ldr	r3, [pc, #204]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a406:	d158      	bne.n	800a4ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e057      	b.n	800a4bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a40c:	4b2e      	ldr	r3, [pc, #184]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a412:	4a2d      	ldr	r2, [pc, #180]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a418:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a41c:	e04d      	b.n	800a4ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a424:	d141      	bne.n	800a4aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a426:	4b28      	ldr	r3, [pc, #160]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a42e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a432:	d131      	bne.n	800a498 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a434:	4b24      	ldr	r3, [pc, #144]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a43a:	4a23      	ldr	r2, [pc, #140]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a43c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a440:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a444:	4b20      	ldr	r3, [pc, #128]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a44c:	4a1e      	ldr	r2, [pc, #120]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a44e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a452:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a454:	4b1d      	ldr	r3, [pc, #116]	; (800a4cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2232      	movs	r2, #50	; 0x32
 800a45a:	fb02 f303 	mul.w	r3, r2, r3
 800a45e:	4a1c      	ldr	r2, [pc, #112]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a460:	fba2 2303 	umull	r2, r3, r2, r3
 800a464:	0c9b      	lsrs	r3, r3, #18
 800a466:	3301      	adds	r3, #1
 800a468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a46a:	e002      	b.n	800a472 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	3b01      	subs	r3, #1
 800a470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a472:	4b15      	ldr	r3, [pc, #84]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a47a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a47e:	d102      	bne.n	800a486 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1f2      	bne.n	800a46c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a486:	4b10      	ldr	r3, [pc, #64]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a48e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a492:	d112      	bne.n	800a4ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e011      	b.n	800a4bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a498:	4b0b      	ldr	r3, [pc, #44]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a49e:	4a0a      	ldr	r2, [pc, #40]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a4a8:	e007      	b.n	800a4ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a4aa:	4b07      	ldr	r3, [pc, #28]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a4b2:	4a05      	ldr	r2, [pc, #20]	; (800a4c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a4b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4b8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	40007000 	.word	0x40007000
 800a4cc:	2000012c 	.word	0x2000012c
 800a4d0:	431bde83 	.word	0x431bde83

0800a4d4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800a4d8:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	4a04      	ldr	r2, [pc, #16]	; (800a4f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800a4de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a4e2:	6053      	str	r3, [r2, #4]
}
 800a4e4:	bf00      	nop
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	40007000 	.word	0x40007000

0800a4f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d102      	bne.n	800a508 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	f000 bc08 	b.w	800ad18 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a508:	4b96      	ldr	r3, [pc, #600]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f003 030c 	and.w	r3, r3, #12
 800a510:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a512:	4b94      	ldr	r3, [pc, #592]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	f003 0303 	and.w	r3, r3, #3
 800a51a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 0310 	and.w	r3, r3, #16
 800a524:	2b00      	cmp	r3, #0
 800a526:	f000 80e4 	beq.w	800a6f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d007      	beq.n	800a540 <HAL_RCC_OscConfig+0x4c>
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	2b0c      	cmp	r3, #12
 800a534:	f040 808b 	bne.w	800a64e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	f040 8087 	bne.w	800a64e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a540:	4b88      	ldr	r3, [pc, #544]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0302 	and.w	r3, r3, #2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d005      	beq.n	800a558 <HAL_RCC_OscConfig+0x64>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d101      	bne.n	800a558 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	e3df      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1a      	ldr	r2, [r3, #32]
 800a55c:	4b81      	ldr	r3, [pc, #516]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 0308 	and.w	r3, r3, #8
 800a564:	2b00      	cmp	r3, #0
 800a566:	d004      	beq.n	800a572 <HAL_RCC_OscConfig+0x7e>
 800a568:	4b7e      	ldr	r3, [pc, #504]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a570:	e005      	b.n	800a57e <HAL_RCC_OscConfig+0x8a>
 800a572:	4b7c      	ldr	r3, [pc, #496]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a578:	091b      	lsrs	r3, r3, #4
 800a57a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a57e:	4293      	cmp	r3, r2
 800a580:	d223      	bcs.n	800a5ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fdcc 	bl	800b124 <RCC_SetFlashLatencyFromMSIRange>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e3c0      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a596:	4b73      	ldr	r3, [pc, #460]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a72      	ldr	r2, [pc, #456]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a59c:	f043 0308 	orr.w	r3, r3, #8
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	4b70      	ldr	r3, [pc, #448]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	496d      	ldr	r1, [pc, #436]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a5b4:	4b6b      	ldr	r3, [pc, #428]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	69db      	ldr	r3, [r3, #28]
 800a5c0:	021b      	lsls	r3, r3, #8
 800a5c2:	4968      	ldr	r1, [pc, #416]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	604b      	str	r3, [r1, #4]
 800a5c8:	e025      	b.n	800a616 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a5ca:	4b66      	ldr	r3, [pc, #408]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a65      	ldr	r2, [pc, #404]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a5d0:	f043 0308 	orr.w	r3, r3, #8
 800a5d4:	6013      	str	r3, [r2, #0]
 800a5d6:	4b63      	ldr	r3, [pc, #396]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	4960      	ldr	r1, [pc, #384]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a5e8:	4b5e      	ldr	r3, [pc, #376]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	69db      	ldr	r3, [r3, #28]
 800a5f4:	021b      	lsls	r3, r3, #8
 800a5f6:	495b      	ldr	r1, [pc, #364]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d109      	bne.n	800a616 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fd8c 	bl	800b124 <RCC_SetFlashLatencyFromMSIRange>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e380      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a616:	f000 fcc1 	bl	800af9c <HAL_RCC_GetSysClockFreq>
 800a61a:	4602      	mov	r2, r0
 800a61c:	4b51      	ldr	r3, [pc, #324]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	091b      	lsrs	r3, r3, #4
 800a622:	f003 030f 	and.w	r3, r3, #15
 800a626:	4950      	ldr	r1, [pc, #320]	; (800a768 <HAL_RCC_OscConfig+0x274>)
 800a628:	5ccb      	ldrb	r3, [r1, r3]
 800a62a:	f003 031f 	and.w	r3, r3, #31
 800a62e:	fa22 f303 	lsr.w	r3, r2, r3
 800a632:	4a4e      	ldr	r2, [pc, #312]	; (800a76c <HAL_RCC_OscConfig+0x278>)
 800a634:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a636:	4b4e      	ldr	r3, [pc, #312]	; (800a770 <HAL_RCC_OscConfig+0x27c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fd fd74 	bl	8008128 <HAL_InitTick>
 800a640:	4603      	mov	r3, r0
 800a642:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d052      	beq.n	800a6f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	e364      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d032      	beq.n	800a6bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a656:	4b43      	ldr	r3, [pc, #268]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a42      	ldr	r2, [pc, #264]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a65c:	f043 0301 	orr.w	r3, r3, #1
 800a660:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a662:	f7fd fdb1 	bl	80081c8 <HAL_GetTick>
 800a666:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a668:	e008      	b.n	800a67c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a66a:	f7fd fdad 	bl	80081c8 <HAL_GetTick>
 800a66e:	4602      	mov	r2, r0
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	2b02      	cmp	r3, #2
 800a676:	d901      	bls.n	800a67c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a678:	2303      	movs	r3, #3
 800a67a:	e34d      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a67c:	4b39      	ldr	r3, [pc, #228]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0302 	and.w	r3, r3, #2
 800a684:	2b00      	cmp	r3, #0
 800a686:	d0f0      	beq.n	800a66a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a688:	4b36      	ldr	r3, [pc, #216]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a35      	ldr	r2, [pc, #212]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a68e:	f043 0308 	orr.w	r3, r3, #8
 800a692:	6013      	str	r3, [r2, #0]
 800a694:	4b33      	ldr	r3, [pc, #204]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a1b      	ldr	r3, [r3, #32]
 800a6a0:	4930      	ldr	r1, [pc, #192]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a6a6:	4b2f      	ldr	r3, [pc, #188]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	021b      	lsls	r3, r3, #8
 800a6b4:	492b      	ldr	r1, [pc, #172]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	604b      	str	r3, [r1, #4]
 800a6ba:	e01a      	b.n	800a6f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a6bc:	4b29      	ldr	r3, [pc, #164]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a28      	ldr	r2, [pc, #160]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a6c2:	f023 0301 	bic.w	r3, r3, #1
 800a6c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a6c8:	f7fd fd7e 	bl	80081c8 <HAL_GetTick>
 800a6cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a6ce:	e008      	b.n	800a6e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a6d0:	f7fd fd7a 	bl	80081c8 <HAL_GetTick>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d901      	bls.n	800a6e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e31a      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a6e2:	4b20      	ldr	r3, [pc, #128]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1f0      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x1dc>
 800a6ee:	e000      	b.n	800a6f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a6f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d073      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	2b08      	cmp	r3, #8
 800a702:	d005      	beq.n	800a710 <HAL_RCC_OscConfig+0x21c>
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	2b0c      	cmp	r3, #12
 800a708:	d10e      	bne.n	800a728 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d10b      	bne.n	800a728 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a710:	4b14      	ldr	r3, [pc, #80]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d063      	beq.n	800a7e4 <HAL_RCC_OscConfig+0x2f0>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d15f      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e2f7      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a730:	d106      	bne.n	800a740 <HAL_RCC_OscConfig+0x24c>
 800a732:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a0b      	ldr	r2, [pc, #44]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	e025      	b.n	800a78c <HAL_RCC_OscConfig+0x298>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a748:	d114      	bne.n	800a774 <HAL_RCC_OscConfig+0x280>
 800a74a:	4b06      	ldr	r3, [pc, #24]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a05      	ldr	r2, [pc, #20]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	4b03      	ldr	r3, [pc, #12]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a02      	ldr	r2, [pc, #8]	; (800a764 <HAL_RCC_OscConfig+0x270>)
 800a75c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	e013      	b.n	800a78c <HAL_RCC_OscConfig+0x298>
 800a764:	40021000 	.word	0x40021000
 800a768:	0801c2e8 	.word	0x0801c2e8
 800a76c:	2000012c 	.word	0x2000012c
 800a770:	20000134 	.word	0x20000134
 800a774:	4ba0      	ldr	r3, [pc, #640]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a9f      	ldr	r2, [pc, #636]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a77a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	4b9d      	ldr	r3, [pc, #628]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a9c      	ldr	r2, [pc, #624]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a78a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d013      	beq.n	800a7bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a794:	f7fd fd18 	bl	80081c8 <HAL_GetTick>
 800a798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a79a:	e008      	b.n	800a7ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a79c:	f7fd fd14 	bl	80081c8 <HAL_GetTick>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	2b64      	cmp	r3, #100	; 0x64
 800a7a8:	d901      	bls.n	800a7ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e2b4      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a7ae:	4b92      	ldr	r3, [pc, #584]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0f0      	beq.n	800a79c <HAL_RCC_OscConfig+0x2a8>
 800a7ba:	e014      	b.n	800a7e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7bc:	f7fd fd04 	bl	80081c8 <HAL_GetTick>
 800a7c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a7c2:	e008      	b.n	800a7d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7c4:	f7fd fd00 	bl	80081c8 <HAL_GetTick>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	2b64      	cmp	r3, #100	; 0x64
 800a7d0:	d901      	bls.n	800a7d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e2a0      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a7d6:	4b88      	ldr	r3, [pc, #544]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1f0      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x2d0>
 800a7e2:	e000      	b.n	800a7e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 0302 	and.w	r3, r3, #2
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d060      	beq.n	800a8b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d005      	beq.n	800a804 <HAL_RCC_OscConfig+0x310>
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	2b0c      	cmp	r3, #12
 800a7fc:	d119      	bne.n	800a832 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	2b02      	cmp	r3, #2
 800a802:	d116      	bne.n	800a832 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a804:	4b7c      	ldr	r3, [pc, #496]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d005      	beq.n	800a81c <HAL_RCC_OscConfig+0x328>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	e27d      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a81c:	4b76      	ldr	r3, [pc, #472]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	061b      	lsls	r3, r3, #24
 800a82a:	4973      	ldr	r1, [pc, #460]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a82c:	4313      	orrs	r3, r2
 800a82e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a830:	e040      	b.n	800a8b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d023      	beq.n	800a882 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a83a:	4b6f      	ldr	r3, [pc, #444]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a6e      	ldr	r2, [pc, #440]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a846:	f7fd fcbf 	bl	80081c8 <HAL_GetTick>
 800a84a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a84c:	e008      	b.n	800a860 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a84e:	f7fd fcbb 	bl	80081c8 <HAL_GetTick>
 800a852:	4602      	mov	r2, r0
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d901      	bls.n	800a860 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a85c:	2303      	movs	r3, #3
 800a85e:	e25b      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a860:	4b65      	ldr	r3, [pc, #404]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d0f0      	beq.n	800a84e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a86c:	4b62      	ldr	r3, [pc, #392]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	061b      	lsls	r3, r3, #24
 800a87a:	495f      	ldr	r1, [pc, #380]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a87c:	4313      	orrs	r3, r2
 800a87e:	604b      	str	r3, [r1, #4]
 800a880:	e018      	b.n	800a8b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a882:	4b5d      	ldr	r3, [pc, #372]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a5c      	ldr	r2, [pc, #368]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a88c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a88e:	f7fd fc9b 	bl	80081c8 <HAL_GetTick>
 800a892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a894:	e008      	b.n	800a8a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a896:	f7fd fc97 	bl	80081c8 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d901      	bls.n	800a8a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e237      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a8a8:	4b53      	ldr	r3, [pc, #332]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1f0      	bne.n	800a896 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0308 	and.w	r3, r3, #8
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d03c      	beq.n	800a93a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d01c      	beq.n	800a902 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8c8:	4b4b      	ldr	r3, [pc, #300]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a8ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8ce:	4a4a      	ldr	r2, [pc, #296]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a8d0:	f043 0301 	orr.w	r3, r3, #1
 800a8d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8d8:	f7fd fc76 	bl	80081c8 <HAL_GetTick>
 800a8dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8de:	e008      	b.n	800a8f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8e0:	f7fd fc72 	bl	80081c8 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d901      	bls.n	800a8f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e212      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8f2:	4b41      	ldr	r3, [pc, #260]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a8f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8f8:	f003 0302 	and.w	r3, r3, #2
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d0ef      	beq.n	800a8e0 <HAL_RCC_OscConfig+0x3ec>
 800a900:	e01b      	b.n	800a93a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a902:	4b3d      	ldr	r3, [pc, #244]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a908:	4a3b      	ldr	r2, [pc, #236]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a90a:	f023 0301 	bic.w	r3, r3, #1
 800a90e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a912:	f7fd fc59 	bl	80081c8 <HAL_GetTick>
 800a916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a918:	e008      	b.n	800a92c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a91a:	f7fd fc55 	bl	80081c8 <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d901      	bls.n	800a92c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e1f5      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a92c:	4b32      	ldr	r3, [pc, #200]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a92e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a932:	f003 0302 	and.w	r3, r3, #2
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1ef      	bne.n	800a91a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 0304 	and.w	r3, r3, #4
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 80a6 	beq.w	800aa94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a948:	2300      	movs	r3, #0
 800a94a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a94c:	4b2a      	ldr	r3, [pc, #168]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a94e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10d      	bne.n	800a974 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a958:	4b27      	ldr	r3, [pc, #156]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a95a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a95c:	4a26      	ldr	r2, [pc, #152]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a95e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a962:	6593      	str	r3, [r2, #88]	; 0x58
 800a964:	4b24      	ldr	r3, [pc, #144]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a96c:	60bb      	str	r3, [r7, #8]
 800a96e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a970:	2301      	movs	r3, #1
 800a972:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a974:	4b21      	ldr	r3, [pc, #132]	; (800a9fc <HAL_RCC_OscConfig+0x508>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d118      	bne.n	800a9b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a980:	4b1e      	ldr	r3, [pc, #120]	; (800a9fc <HAL_RCC_OscConfig+0x508>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a1d      	ldr	r2, [pc, #116]	; (800a9fc <HAL_RCC_OscConfig+0x508>)
 800a986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a98a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a98c:	f7fd fc1c 	bl	80081c8 <HAL_GetTick>
 800a990:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a992:	e008      	b.n	800a9a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a994:	f7fd fc18 	bl	80081c8 <HAL_GetTick>
 800a998:	4602      	mov	r2, r0
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d901      	bls.n	800a9a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e1b8      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a9a6:	4b15      	ldr	r3, [pc, #84]	; (800a9fc <HAL_RCC_OscConfig+0x508>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0f0      	beq.n	800a994 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d108      	bne.n	800a9cc <HAL_RCC_OscConfig+0x4d8>
 800a9ba:	4b0f      	ldr	r3, [pc, #60]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c0:	4a0d      	ldr	r2, [pc, #52]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a9c2:	f043 0301 	orr.w	r3, r3, #1
 800a9c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9ca:	e029      	b.n	800aa20 <HAL_RCC_OscConfig+0x52c>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	2b05      	cmp	r3, #5
 800a9d2:	d115      	bne.n	800aa00 <HAL_RCC_OscConfig+0x50c>
 800a9d4:	4b08      	ldr	r3, [pc, #32]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9da:	4a07      	ldr	r2, [pc, #28]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a9dc:	f043 0304 	orr.w	r3, r3, #4
 800a9e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9e4:	4b04      	ldr	r3, [pc, #16]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a9e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ea:	4a03      	ldr	r2, [pc, #12]	; (800a9f8 <HAL_RCC_OscConfig+0x504>)
 800a9ec:	f043 0301 	orr.w	r3, r3, #1
 800a9f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9f4:	e014      	b.n	800aa20 <HAL_RCC_OscConfig+0x52c>
 800a9f6:	bf00      	nop
 800a9f8:	40021000 	.word	0x40021000
 800a9fc:	40007000 	.word	0x40007000
 800aa00:	4b9d      	ldr	r3, [pc, #628]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aa02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa06:	4a9c      	ldr	r2, [pc, #624]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aa08:	f023 0301 	bic.w	r3, r3, #1
 800aa0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aa10:	4b99      	ldr	r3, [pc, #612]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aa12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa16:	4a98      	ldr	r2, [pc, #608]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aa18:	f023 0304 	bic.w	r3, r3, #4
 800aa1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d016      	beq.n	800aa56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa28:	f7fd fbce 	bl	80081c8 <HAL_GetTick>
 800aa2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa2e:	e00a      	b.n	800aa46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa30:	f7fd fbca 	bl	80081c8 <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d901      	bls.n	800aa46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e168      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa46:	4b8c      	ldr	r3, [pc, #560]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aa48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa4c:	f003 0302 	and.w	r3, r3, #2
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d0ed      	beq.n	800aa30 <HAL_RCC_OscConfig+0x53c>
 800aa54:	e015      	b.n	800aa82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa56:	f7fd fbb7 	bl	80081c8 <HAL_GetTick>
 800aa5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa5c:	e00a      	b.n	800aa74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa5e:	f7fd fbb3 	bl	80081c8 <HAL_GetTick>
 800aa62:	4602      	mov	r2, r0
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	1ad3      	subs	r3, r2, r3
 800aa68:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d901      	bls.n	800aa74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e151      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa74:	4b80      	ldr	r3, [pc, #512]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aa76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa7a:	f003 0302 	and.w	r3, r3, #2
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1ed      	bne.n	800aa5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa82:	7ffb      	ldrb	r3, [r7, #31]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d105      	bne.n	800aa94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa88:	4b7b      	ldr	r3, [pc, #492]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aa8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa8c:	4a7a      	ldr	r2, [pc, #488]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aa8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0320 	and.w	r3, r3, #32
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d03c      	beq.n	800ab1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d01c      	beq.n	800aae2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aaa8:	4b73      	ldr	r3, [pc, #460]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aaaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aaae:	4a72      	ldr	r2, [pc, #456]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aab0:	f043 0301 	orr.w	r3, r3, #1
 800aab4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aab8:	f7fd fb86 	bl	80081c8 <HAL_GetTick>
 800aabc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aabe:	e008      	b.n	800aad2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aac0:	f7fd fb82 	bl	80081c8 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d901      	bls.n	800aad2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e122      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aad2:	4b69      	ldr	r3, [pc, #420]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d0ef      	beq.n	800aac0 <HAL_RCC_OscConfig+0x5cc>
 800aae0:	e01b      	b.n	800ab1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aae2:	4b65      	ldr	r3, [pc, #404]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aae8:	4a63      	ldr	r2, [pc, #396]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aaea:	f023 0301 	bic.w	r3, r3, #1
 800aaee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaf2:	f7fd fb69 	bl	80081c8 <HAL_GetTick>
 800aaf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aaf8:	e008      	b.n	800ab0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aafa:	f7fd fb65 	bl	80081c8 <HAL_GetTick>
 800aafe:	4602      	mov	r2, r0
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	d901      	bls.n	800ab0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	e105      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ab0c:	4b5a      	ldr	r3, [pc, #360]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800ab0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1ef      	bne.n	800aafa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 80f9 	beq.w	800ad16 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	f040 80cf 	bne.w	800accc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ab2e:	4b52      	ldr	r3, [pc, #328]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f003 0203 	and.w	r2, r3, #3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d12c      	bne.n	800ab9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d123      	bne.n	800ab9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d11b      	bne.n	800ab9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d113      	bne.n	800ab9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7e:	085b      	lsrs	r3, r3, #1
 800ab80:	3b01      	subs	r3, #1
 800ab82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d109      	bne.n	800ab9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	085b      	lsrs	r3, r3, #1
 800ab94:	3b01      	subs	r3, #1
 800ab96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d071      	beq.n	800ac80 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	2b0c      	cmp	r3, #12
 800aba0:	d068      	beq.n	800ac74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800aba2:	4b35      	ldr	r3, [pc, #212]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d105      	bne.n	800abba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800abae:	4b32      	ldr	r3, [pc, #200]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e0ac      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800abbe:	4b2e      	ldr	r3, [pc, #184]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a2d      	ldr	r2, [pc, #180]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800abc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800abca:	f7fd fafd 	bl	80081c8 <HAL_GetTick>
 800abce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abd0:	e008      	b.n	800abe4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abd2:	f7fd faf9 	bl	80081c8 <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d901      	bls.n	800abe4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e099      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abe4:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1f0      	bne.n	800abd2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abf0:	4b21      	ldr	r3, [pc, #132]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800abf2:	68da      	ldr	r2, [r3, #12]
 800abf4:	4b21      	ldr	r3, [pc, #132]	; (800ac7c <HAL_RCC_OscConfig+0x788>)
 800abf6:	4013      	ands	r3, r2
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac00:	3a01      	subs	r2, #1
 800ac02:	0112      	lsls	r2, r2, #4
 800ac04:	4311      	orrs	r1, r2
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac0a:	0212      	lsls	r2, r2, #8
 800ac0c:	4311      	orrs	r1, r2
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ac12:	0852      	lsrs	r2, r2, #1
 800ac14:	3a01      	subs	r2, #1
 800ac16:	0552      	lsls	r2, r2, #21
 800ac18:	4311      	orrs	r1, r2
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ac1e:	0852      	lsrs	r2, r2, #1
 800ac20:	3a01      	subs	r2, #1
 800ac22:	0652      	lsls	r2, r2, #25
 800ac24:	4311      	orrs	r1, r2
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ac2a:	06d2      	lsls	r2, r2, #27
 800ac2c:	430a      	orrs	r2, r1
 800ac2e:	4912      	ldr	r1, [pc, #72]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ac34:	4b10      	ldr	r3, [pc, #64]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a0f      	ldr	r2, [pc, #60]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800ac3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ac40:	4b0d      	ldr	r3, [pc, #52]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	4a0c      	ldr	r2, [pc, #48]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800ac46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ac4c:	f7fd fabc 	bl	80081c8 <HAL_GetTick>
 800ac50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac52:	e008      	b.n	800ac66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac54:	f7fd fab8 	bl	80081c8 <HAL_GetTick>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d901      	bls.n	800ac66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e058      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac66:	4b04      	ldr	r3, [pc, #16]	; (800ac78 <HAL_RCC_OscConfig+0x784>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d0f0      	beq.n	800ac54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ac72:	e050      	b.n	800ad16 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e04f      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
 800ac78:	40021000 	.word	0x40021000
 800ac7c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac80:	4b27      	ldr	r3, [pc, #156]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d144      	bne.n	800ad16 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ac8c:	4b24      	ldr	r3, [pc, #144]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a23      	ldr	r2, [pc, #140]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800ac92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ac98:	4b21      	ldr	r3, [pc, #132]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	4a20      	ldr	r2, [pc, #128]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800ac9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aca2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aca4:	f7fd fa90 	bl	80081c8 <HAL_GetTick>
 800aca8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acaa:	e008      	b.n	800acbe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acac:	f7fd fa8c 	bl	80081c8 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e02c      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acbe:	4b18      	ldr	r3, [pc, #96]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0f0      	beq.n	800acac <HAL_RCC_OscConfig+0x7b8>
 800acca:	e024      	b.n	800ad16 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	2b0c      	cmp	r3, #12
 800acd0:	d01f      	beq.n	800ad12 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acd2:	4b13      	ldr	r3, [pc, #76]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a12      	ldr	r2, [pc, #72]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800acd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acde:	f7fd fa73 	bl	80081c8 <HAL_GetTick>
 800ace2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ace4:	e008      	b.n	800acf8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ace6:	f7fd fa6f 	bl	80081c8 <HAL_GetTick>
 800acea:	4602      	mov	r2, r0
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d901      	bls.n	800acf8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800acf4:	2303      	movs	r3, #3
 800acf6:	e00f      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800acf8:	4b09      	ldr	r3, [pc, #36]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1f0      	bne.n	800ace6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ad04:	4b06      	ldr	r3, [pc, #24]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800ad06:	68da      	ldr	r2, [r3, #12]
 800ad08:	4905      	ldr	r1, [pc, #20]	; (800ad20 <HAL_RCC_OscConfig+0x82c>)
 800ad0a:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <HAL_RCC_OscConfig+0x830>)
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	60cb      	str	r3, [r1, #12]
 800ad10:	e001      	b.n	800ad16 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3720      	adds	r7, #32
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	40021000 	.word	0x40021000
 800ad24:	feeefffc 	.word	0xfeeefffc

0800ad28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ad32:	2300      	movs	r3, #0
 800ad34:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e11d      	b.n	800af7c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad40:	4b90      	ldr	r3, [pc, #576]	; (800af84 <HAL_RCC_ClockConfig+0x25c>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 030f 	and.w	r3, r3, #15
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d910      	bls.n	800ad70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad4e:	4b8d      	ldr	r3, [pc, #564]	; (800af84 <HAL_RCC_ClockConfig+0x25c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f023 020f 	bic.w	r2, r3, #15
 800ad56:	498b      	ldr	r1, [pc, #556]	; (800af84 <HAL_RCC_ClockConfig+0x25c>)
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad5e:	4b89      	ldr	r3, [pc, #548]	; (800af84 <HAL_RCC_ClockConfig+0x25c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 030f 	and.w	r3, r3, #15
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d001      	beq.n	800ad70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e105      	b.n	800af7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 0302 	and.w	r3, r3, #2
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d010      	beq.n	800ad9e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	689a      	ldr	r2, [r3, #8]
 800ad80:	4b81      	ldr	r3, [pc, #516]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d908      	bls.n	800ad9e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad8c:	4b7e      	ldr	r3, [pc, #504]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	497b      	ldr	r1, [pc, #492]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d079      	beq.n	800ae9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d11e      	bne.n	800adf0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adb2:	4b75      	ldr	r3, [pc, #468]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e0dc      	b.n	800af7c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800adc2:	f000 fa09 	bl	800b1d8 <RCC_GetSysClockFreqFromPLLSource>
 800adc6:	4603      	mov	r3, r0
 800adc8:	4a70      	ldr	r2, [pc, #448]	; (800af8c <HAL_RCC_ClockConfig+0x264>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d946      	bls.n	800ae5c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800adce:	4b6e      	ldr	r3, [pc, #440]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d140      	bne.n	800ae5c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800adda:	4b6b      	ldr	r3, [pc, #428]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ade2:	4a69      	ldr	r2, [pc, #420]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ade4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800adea:	2380      	movs	r3, #128	; 0x80
 800adec:	617b      	str	r3, [r7, #20]
 800adee:	e035      	b.n	800ae5c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d107      	bne.n	800ae08 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800adf8:	4b63      	ldr	r3, [pc, #396]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d115      	bne.n	800ae30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e0b9      	b.n	800af7c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d107      	bne.n	800ae20 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ae10:	4b5d      	ldr	r3, [pc, #372]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0302 	and.w	r3, r3, #2
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d109      	bne.n	800ae30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e0ad      	b.n	800af7c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae20:	4b59      	ldr	r3, [pc, #356]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e0a5      	b.n	800af7c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800ae30:	f000 f8b4 	bl	800af9c <HAL_RCC_GetSysClockFreq>
 800ae34:	4603      	mov	r3, r0
 800ae36:	4a55      	ldr	r2, [pc, #340]	; (800af8c <HAL_RCC_ClockConfig+0x264>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d90f      	bls.n	800ae5c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800ae3c:	4b52      	ldr	r3, [pc, #328]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d109      	bne.n	800ae5c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ae48:	4b4f      	ldr	r3, [pc, #316]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae50:	4a4d      	ldr	r2, [pc, #308]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ae52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae56:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ae58:	2380      	movs	r3, #128	; 0x80
 800ae5a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ae5c:	4b4a      	ldr	r3, [pc, #296]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	f023 0203 	bic.w	r2, r3, #3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	4947      	ldr	r1, [pc, #284]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae6e:	f7fd f9ab 	bl	80081c8 <HAL_GetTick>
 800ae72:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae74:	e00a      	b.n	800ae8c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae76:	f7fd f9a7 	bl	80081c8 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d901      	bls.n	800ae8c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e077      	b.n	800af7c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae8c:	4b3e      	ldr	r3, [pc, #248]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	f003 020c 	and.w	r2, r3, #12
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d1eb      	bne.n	800ae76 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	2b80      	cmp	r3, #128	; 0x80
 800aea2:	d105      	bne.n	800aeb0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800aea4:	4b38      	ldr	r3, [pc, #224]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	4a37      	ldr	r2, [pc, #220]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800aeaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aeae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 0302 	and.w	r3, r3, #2
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d010      	beq.n	800aede <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	689a      	ldr	r2, [r3, #8]
 800aec0:	4b31      	ldr	r3, [pc, #196]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d208      	bcs.n	800aede <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aecc:	4b2e      	ldr	r3, [pc, #184]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	492b      	ldr	r1, [pc, #172]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aede:	4b29      	ldr	r3, [pc, #164]	; (800af84 <HAL_RCC_ClockConfig+0x25c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 030f 	and.w	r3, r3, #15
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d210      	bcs.n	800af0e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeec:	4b25      	ldr	r3, [pc, #148]	; (800af84 <HAL_RCC_ClockConfig+0x25c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f023 020f 	bic.w	r2, r3, #15
 800aef4:	4923      	ldr	r1, [pc, #140]	; (800af84 <HAL_RCC_ClockConfig+0x25c>)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aefc:	4b21      	ldr	r3, [pc, #132]	; (800af84 <HAL_RCC_ClockConfig+0x25c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 030f 	and.w	r3, r3, #15
 800af04:	683a      	ldr	r2, [r7, #0]
 800af06:	429a      	cmp	r2, r3
 800af08:	d001      	beq.n	800af0e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e036      	b.n	800af7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 0304 	and.w	r3, r3, #4
 800af16:	2b00      	cmp	r3, #0
 800af18:	d008      	beq.n	800af2c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af1a:	4b1b      	ldr	r3, [pc, #108]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	4918      	ldr	r1, [pc, #96]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800af28:	4313      	orrs	r3, r2
 800af2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 0308 	and.w	r3, r3, #8
 800af34:	2b00      	cmp	r3, #0
 800af36:	d009      	beq.n	800af4c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af38:	4b13      	ldr	r3, [pc, #76]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	00db      	lsls	r3, r3, #3
 800af46:	4910      	ldr	r1, [pc, #64]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800af48:	4313      	orrs	r3, r2
 800af4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800af4c:	f000 f826 	bl	800af9c <HAL_RCC_GetSysClockFreq>
 800af50:	4602      	mov	r2, r0
 800af52:	4b0d      	ldr	r3, [pc, #52]	; (800af88 <HAL_RCC_ClockConfig+0x260>)
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	091b      	lsrs	r3, r3, #4
 800af58:	f003 030f 	and.w	r3, r3, #15
 800af5c:	490c      	ldr	r1, [pc, #48]	; (800af90 <HAL_RCC_ClockConfig+0x268>)
 800af5e:	5ccb      	ldrb	r3, [r1, r3]
 800af60:	f003 031f 	and.w	r3, r3, #31
 800af64:	fa22 f303 	lsr.w	r3, r2, r3
 800af68:	4a0a      	ldr	r2, [pc, #40]	; (800af94 <HAL_RCC_ClockConfig+0x26c>)
 800af6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800af6c:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <HAL_RCC_ClockConfig+0x270>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4618      	mov	r0, r3
 800af72:	f7fd f8d9 	bl	8008128 <HAL_InitTick>
 800af76:	4603      	mov	r3, r0
 800af78:	73fb      	strb	r3, [r7, #15]

  return status;
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	40022000 	.word	0x40022000
 800af88:	40021000 	.word	0x40021000
 800af8c:	04c4b400 	.word	0x04c4b400
 800af90:	0801c2e8 	.word	0x0801c2e8
 800af94:	2000012c 	.word	0x2000012c
 800af98:	20000134 	.word	0x20000134

0800af9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b089      	sub	sp, #36	; 0x24
 800afa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61fb      	str	r3, [r7, #28]
 800afa6:	2300      	movs	r3, #0
 800afa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afaa:	4b3e      	ldr	r3, [pc, #248]	; (800b0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f003 030c 	and.w	r3, r3, #12
 800afb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800afb4:	4b3b      	ldr	r3, [pc, #236]	; (800b0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	f003 0303 	and.w	r3, r3, #3
 800afbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d005      	beq.n	800afd0 <HAL_RCC_GetSysClockFreq+0x34>
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2b0c      	cmp	r3, #12
 800afc8:	d121      	bne.n	800b00e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d11e      	bne.n	800b00e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800afd0:	4b34      	ldr	r3, [pc, #208]	; (800b0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d107      	bne.n	800afec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800afdc:	4b31      	ldr	r3, [pc, #196]	; (800b0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800afde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afe2:	0a1b      	lsrs	r3, r3, #8
 800afe4:	f003 030f 	and.w	r3, r3, #15
 800afe8:	61fb      	str	r3, [r7, #28]
 800afea:	e005      	b.n	800aff8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800afec:	4b2d      	ldr	r3, [pc, #180]	; (800b0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	091b      	lsrs	r3, r3, #4
 800aff2:	f003 030f 	and.w	r3, r3, #15
 800aff6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800aff8:	4a2b      	ldr	r2, [pc, #172]	; (800b0a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b000:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10d      	bne.n	800b024 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b00c:	e00a      	b.n	800b024 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2b04      	cmp	r3, #4
 800b012:	d102      	bne.n	800b01a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b014:	4b25      	ldr	r3, [pc, #148]	; (800b0ac <HAL_RCC_GetSysClockFreq+0x110>)
 800b016:	61bb      	str	r3, [r7, #24]
 800b018:	e004      	b.n	800b024 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	2b08      	cmp	r3, #8
 800b01e:	d101      	bne.n	800b024 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b020:	4b23      	ldr	r3, [pc, #140]	; (800b0b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800b022:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	2b0c      	cmp	r3, #12
 800b028:	d134      	bne.n	800b094 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b02a:	4b1e      	ldr	r3, [pc, #120]	; (800b0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b02c:	68db      	ldr	r3, [r3, #12]
 800b02e:	f003 0303 	and.w	r3, r3, #3
 800b032:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b02      	cmp	r3, #2
 800b038:	d003      	beq.n	800b042 <HAL_RCC_GetSysClockFreq+0xa6>
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d003      	beq.n	800b048 <HAL_RCC_GetSysClockFreq+0xac>
 800b040:	e005      	b.n	800b04e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b042:	4b1a      	ldr	r3, [pc, #104]	; (800b0ac <HAL_RCC_GetSysClockFreq+0x110>)
 800b044:	617b      	str	r3, [r7, #20]
      break;
 800b046:	e005      	b.n	800b054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b048:	4b19      	ldr	r3, [pc, #100]	; (800b0b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800b04a:	617b      	str	r3, [r7, #20]
      break;
 800b04c:	e002      	b.n	800b054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	617b      	str	r3, [r7, #20]
      break;
 800b052:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b054:	4b13      	ldr	r3, [pc, #76]	; (800b0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	091b      	lsrs	r3, r3, #4
 800b05a:	f003 030f 	and.w	r3, r3, #15
 800b05e:	3301      	adds	r3, #1
 800b060:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b062:	4b10      	ldr	r3, [pc, #64]	; (800b0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	0a1b      	lsrs	r3, r3, #8
 800b068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	fb03 f202 	mul.w	r2, r3, r2
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	fbb2 f3f3 	udiv	r3, r2, r3
 800b078:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b07a:	4b0a      	ldr	r3, [pc, #40]	; (800b0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	0e5b      	lsrs	r3, r3, #25
 800b080:	f003 0303 	and.w	r3, r3, #3
 800b084:	3301      	adds	r3, #1
 800b086:	005b      	lsls	r3, r3, #1
 800b088:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b092:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b094:	69bb      	ldr	r3, [r7, #24]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3724      	adds	r7, #36	; 0x24
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	40021000 	.word	0x40021000
 800b0a8:	0801c300 	.word	0x0801c300
 800b0ac:	00f42400 	.word	0x00f42400
 800b0b0:	02dc6c00 	.word	0x02dc6c00

0800b0b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b0b8:	4b03      	ldr	r3, [pc, #12]	; (800b0c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	2000012c 	.word	0x2000012c

0800b0cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b0d0:	f7ff fff0 	bl	800b0b4 <HAL_RCC_GetHCLKFreq>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	0a1b      	lsrs	r3, r3, #8
 800b0dc:	f003 0307 	and.w	r3, r3, #7
 800b0e0:	4904      	ldr	r1, [pc, #16]	; (800b0f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b0e2:	5ccb      	ldrb	r3, [r1, r3]
 800b0e4:	f003 031f 	and.w	r3, r3, #31
 800b0e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	40021000 	.word	0x40021000
 800b0f4:	0801c2f8 	.word	0x0801c2f8

0800b0f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b0fc:	f7ff ffda 	bl	800b0b4 <HAL_RCC_GetHCLKFreq>
 800b100:	4602      	mov	r2, r0
 800b102:	4b06      	ldr	r3, [pc, #24]	; (800b11c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	0adb      	lsrs	r3, r3, #11
 800b108:	f003 0307 	and.w	r3, r3, #7
 800b10c:	4904      	ldr	r1, [pc, #16]	; (800b120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b10e:	5ccb      	ldrb	r3, [r1, r3]
 800b110:	f003 031f 	and.w	r3, r3, #31
 800b114:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b118:	4618      	mov	r0, r3
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	40021000 	.word	0x40021000
 800b120:	0801c2f8 	.word	0x0801c2f8

0800b124 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b12c:	2300      	movs	r3, #0
 800b12e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b130:	4b27      	ldr	r3, [pc, #156]	; (800b1d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d003      	beq.n	800b144 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b13c:	f7ff f906 	bl	800a34c <HAL_PWREx_GetVoltageRange>
 800b140:	6178      	str	r0, [r7, #20]
 800b142:	e014      	b.n	800b16e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b144:	4b22      	ldr	r3, [pc, #136]	; (800b1d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b148:	4a21      	ldr	r2, [pc, #132]	; (800b1d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b14a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b14e:	6593      	str	r3, [r2, #88]	; 0x58
 800b150:	4b1f      	ldr	r3, [pc, #124]	; (800b1d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b15c:	f7ff f8f6 	bl	800a34c <HAL_PWREx_GetVoltageRange>
 800b160:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b162:	4b1b      	ldr	r3, [pc, #108]	; (800b1d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b166:	4a1a      	ldr	r2, [pc, #104]	; (800b1d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b16c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b174:	d10b      	bne.n	800b18e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b80      	cmp	r3, #128	; 0x80
 800b17a:	d913      	bls.n	800b1a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2ba0      	cmp	r3, #160	; 0xa0
 800b180:	d902      	bls.n	800b188 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b182:	2302      	movs	r3, #2
 800b184:	613b      	str	r3, [r7, #16]
 800b186:	e00d      	b.n	800b1a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b188:	2301      	movs	r3, #1
 800b18a:	613b      	str	r3, [r7, #16]
 800b18c:	e00a      	b.n	800b1a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b7f      	cmp	r3, #127	; 0x7f
 800b192:	d902      	bls.n	800b19a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800b194:	2302      	movs	r3, #2
 800b196:	613b      	str	r3, [r7, #16]
 800b198:	e004      	b.n	800b1a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b70      	cmp	r3, #112	; 0x70
 800b19e:	d101      	bne.n	800b1a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b1a4:	4b0b      	ldr	r3, [pc, #44]	; (800b1d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f023 020f 	bic.w	r2, r3, #15
 800b1ac:	4909      	ldr	r1, [pc, #36]	; (800b1d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b1b4:	4b07      	ldr	r3, [pc, #28]	; (800b1d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 030f 	and.w	r3, r3, #15
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d001      	beq.n	800b1c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e000      	b.n	800b1c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	40021000 	.word	0x40021000
 800b1d4:	40022000 	.word	0x40022000

0800b1d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b087      	sub	sp, #28
 800b1dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b1de:	4b2d      	ldr	r3, [pc, #180]	; (800b294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	f003 0303 	and.w	r3, r3, #3
 800b1e6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	d00b      	beq.n	800b206 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2b03      	cmp	r3, #3
 800b1f2:	d825      	bhi.n	800b240 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d008      	beq.n	800b20c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d11f      	bne.n	800b240 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800b200:	4b25      	ldr	r3, [pc, #148]	; (800b298 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b202:	613b      	str	r3, [r7, #16]
    break;
 800b204:	e01f      	b.n	800b246 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800b206:	4b25      	ldr	r3, [pc, #148]	; (800b29c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800b208:	613b      	str	r3, [r7, #16]
    break;
 800b20a:	e01c      	b.n	800b246 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b20c:	4b21      	ldr	r3, [pc, #132]	; (800b294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0308 	and.w	r3, r3, #8
 800b214:	2b00      	cmp	r3, #0
 800b216:	d107      	bne.n	800b228 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b218:	4b1e      	ldr	r3, [pc, #120]	; (800b294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b21a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b21e:	0a1b      	lsrs	r3, r3, #8
 800b220:	f003 030f 	and.w	r3, r3, #15
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	e005      	b.n	800b234 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b228:	4b1a      	ldr	r3, [pc, #104]	; (800b294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	091b      	lsrs	r3, r3, #4
 800b22e:	f003 030f 	and.w	r3, r3, #15
 800b232:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800b234:	4a1a      	ldr	r2, [pc, #104]	; (800b2a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b23c:	613b      	str	r3, [r7, #16]
    break;
 800b23e:	e002      	b.n	800b246 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800b240:	2300      	movs	r3, #0
 800b242:	613b      	str	r3, [r7, #16]
    break;
 800b244:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b246:	4b13      	ldr	r3, [pc, #76]	; (800b294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	091b      	lsrs	r3, r3, #4
 800b24c:	f003 030f 	and.w	r3, r3, #15
 800b250:	3301      	adds	r3, #1
 800b252:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b254:	4b0f      	ldr	r3, [pc, #60]	; (800b294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	0a1b      	lsrs	r3, r3, #8
 800b25a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	fb03 f202 	mul.w	r2, r3, r2
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	fbb2 f3f3 	udiv	r3, r2, r3
 800b26a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b26c:	4b09      	ldr	r3, [pc, #36]	; (800b294 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	0e5b      	lsrs	r3, r3, #25
 800b272:	f003 0303 	and.w	r3, r3, #3
 800b276:	3301      	adds	r3, #1
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	fbb2 f3f3 	udiv	r3, r2, r3
 800b284:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800b286:	683b      	ldr	r3, [r7, #0]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	371c      	adds	r7, #28
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	40021000 	.word	0x40021000
 800b298:	00f42400 	.word	0x00f42400
 800b29c:	02dc6c00 	.word	0x02dc6c00
 800b2a0:	0801c300 	.word	0x0801c300

0800b2a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b086      	sub	sp, #24
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d040      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2c4:	2b80      	cmp	r3, #128	; 0x80
 800b2c6:	d02a      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b2c8:	2b80      	cmp	r3, #128	; 0x80
 800b2ca:	d825      	bhi.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b2cc:	2b60      	cmp	r3, #96	; 0x60
 800b2ce:	d026      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b2d0:	2b60      	cmp	r3, #96	; 0x60
 800b2d2:	d821      	bhi.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b2d4:	2b40      	cmp	r3, #64	; 0x40
 800b2d6:	d006      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800b2d8:	2b40      	cmp	r3, #64	; 0x40
 800b2da:	d81d      	bhi.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d009      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800b2e0:	2b20      	cmp	r3, #32
 800b2e2:	d010      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800b2e4:	e018      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b2e6:	4b89      	ldr	r3, [pc, #548]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	4a88      	ldr	r2, [pc, #544]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b2ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2f0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b2f2:	e015      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 fb02 	bl	800b904 <RCCEx_PLLSAI1_Config>
 800b300:	4603      	mov	r3, r0
 800b302:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b304:	e00c      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3320      	adds	r3, #32
 800b30a:	2100      	movs	r1, #0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f000 fbed 	bl	800baec <RCCEx_PLLSAI2_Config>
 800b312:	4603      	mov	r3, r0
 800b314:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b316:	e003      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	74fb      	strb	r3, [r7, #19]
      break;
 800b31c:	e000      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800b31e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b320:	7cfb      	ldrb	r3, [r7, #19]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10b      	bne.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b326:	4b79      	ldr	r3, [pc, #484]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b328:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b32c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b334:	4975      	ldr	r1, [pc, #468]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b336:	4313      	orrs	r3, r2
 800b338:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800b33c:	e001      	b.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b33e:	7cfb      	ldrb	r3, [r7, #19]
 800b340:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d047      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b356:	d030      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b35c:	d82a      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b35e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b362:	d02a      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b368:	d824      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b36a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b36e:	d008      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800b370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b374:	d81e      	bhi.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00a      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800b37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b37e:	d010      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b380:	e018      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b382:	4b62      	ldr	r3, [pc, #392]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	4a61      	ldr	r2, [pc, #388]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b38c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b38e:	e015      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	3304      	adds	r3, #4
 800b394:	2100      	movs	r1, #0
 800b396:	4618      	mov	r0, r3
 800b398:	f000 fab4 	bl	800b904 <RCCEx_PLLSAI1_Config>
 800b39c:	4603      	mov	r3, r0
 800b39e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b3a0:	e00c      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	3320      	adds	r3, #32
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 fb9f 	bl	800baec <RCCEx_PLLSAI2_Config>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b3b2:	e003      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	74fb      	strb	r3, [r7, #19]
      break;
 800b3b8:	e000      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800b3ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3bc:	7cfb      	ldrb	r3, [r7, #19]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10b      	bne.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b3c2:	4b52      	ldr	r3, [pc, #328]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b3c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3d0:	494e      	ldr	r1, [pc, #312]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800b3d8:	e001      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3da:	7cfb      	ldrb	r3, [r7, #19]
 800b3dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 809f 	beq.w	800b52a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b3f0:	4b46      	ldr	r3, [pc, #280]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b3f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d101      	bne.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e000      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800b400:	2300      	movs	r3, #0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00d      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b406:	4b41      	ldr	r3, [pc, #260]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b40a:	4a40      	ldr	r2, [pc, #256]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b40c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b410:	6593      	str	r3, [r2, #88]	; 0x58
 800b412:	4b3e      	ldr	r3, [pc, #248]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b41a:	60bb      	str	r3, [r7, #8]
 800b41c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b41e:	2301      	movs	r3, #1
 800b420:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b422:	4b3b      	ldr	r3, [pc, #236]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a3a      	ldr	r2, [pc, #232]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b42c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b42e:	f7fc fecb 	bl	80081c8 <HAL_GetTick>
 800b432:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b434:	e009      	b.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b436:	f7fc fec7 	bl	80081c8 <HAL_GetTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	2b02      	cmp	r3, #2
 800b442:	d902      	bls.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	74fb      	strb	r3, [r7, #19]
        break;
 800b448:	e005      	b.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b44a:	4b31      	ldr	r3, [pc, #196]	; (800b510 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0ef      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800b456:	7cfb      	ldrb	r3, [r7, #19]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d15b      	bne.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b45c:	4b2b      	ldr	r3, [pc, #172]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b466:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d01f      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	429a      	cmp	r2, r3
 800b478:	d019      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b47a:	4b24      	ldr	r3, [pc, #144]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b484:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b486:	4b21      	ldr	r3, [pc, #132]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b48c:	4a1f      	ldr	r2, [pc, #124]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b48e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b496:	4b1d      	ldr	r3, [pc, #116]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b49c:	4a1b      	ldr	r2, [pc, #108]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b49e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b4a6:	4a19      	ldr	r2, [pc, #100]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f003 0301 	and.w	r3, r3, #1
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d016      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4b8:	f7fc fe86 	bl	80081c8 <HAL_GetTick>
 800b4bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b4be:	e00b      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4c0:	f7fc fe82 	bl	80081c8 <HAL_GetTick>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d902      	bls.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	74fb      	strb	r3, [r7, #19]
            break;
 800b4d6:	e006      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b4d8:	4b0c      	ldr	r3, [pc, #48]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4de:	f003 0302 	and.w	r3, r3, #2
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0ec      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800b4e6:	7cfb      	ldrb	r3, [r7, #19]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10c      	bne.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b4ec:	4b07      	ldr	r3, [pc, #28]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4fc:	4903      	ldr	r1, [pc, #12]	; (800b50c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b504:	e008      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b506:	7cfb      	ldrb	r3, [r7, #19]
 800b508:	74bb      	strb	r3, [r7, #18]
 800b50a:	e005      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800b50c:	40021000 	.word	0x40021000
 800b510:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b514:	7cfb      	ldrb	r3, [r7, #19]
 800b516:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b518:	7c7b      	ldrb	r3, [r7, #17]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d105      	bne.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b51e:	4ba0      	ldr	r3, [pc, #640]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b522:	4a9f      	ldr	r2, [pc, #636]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b528:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00a      	beq.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b536:	4b9a      	ldr	r3, [pc, #616]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b53c:	f023 0203 	bic.w	r2, r3, #3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b544:	4996      	ldr	r1, [pc, #600]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b546:	4313      	orrs	r3, r2
 800b548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 0302 	and.w	r3, r3, #2
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00a      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b558:	4b91      	ldr	r3, [pc, #580]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b55e:	f023 020c 	bic.w	r2, r3, #12
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b566:	498e      	ldr	r1, [pc, #568]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b568:	4313      	orrs	r3, r2
 800b56a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0304 	and.w	r3, r3, #4
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00a      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b57a:	4b89      	ldr	r3, [pc, #548]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b580:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b588:	4985      	ldr	r1, [pc, #532]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 0308 	and.w	r3, r3, #8
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00a      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b59c:	4b80      	ldr	r3, [pc, #512]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5aa:	497d      	ldr	r1, [pc, #500]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f003 0310 	and.w	r3, r3, #16
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b5be:	4b78      	ldr	r3, [pc, #480]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5cc:	4974      	ldr	r1, [pc, #464]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0320 	and.w	r3, r3, #32
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00a      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b5e0:	4b6f      	ldr	r3, [pc, #444]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5ee:	496c      	ldr	r1, [pc, #432]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00a      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b602:	4b67      	ldr	r3, [pc, #412]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b608:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b610:	4963      	ldr	r1, [pc, #396]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b612:	4313      	orrs	r3, r2
 800b614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00a      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b624:	4b5e      	ldr	r3, [pc, #376]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b62a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b632:	495b      	ldr	r1, [pc, #364]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b634:	4313      	orrs	r3, r2
 800b636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00a      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b646:	4b56      	ldr	r3, [pc, #344]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b64c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b654:	4952      	ldr	r1, [pc, #328]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b656:	4313      	orrs	r3, r2
 800b658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00a      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b668:	4b4d      	ldr	r3, [pc, #308]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b66e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b676:	494a      	ldr	r1, [pc, #296]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b678:	4313      	orrs	r3, r2
 800b67a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b68a:	4b45      	ldr	r3, [pc, #276]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b690:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b698:	4941      	ldr	r1, [pc, #260]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b69a:	4313      	orrs	r3, r2
 800b69c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00a      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b6ac:	4b3c      	ldr	r3, [pc, #240]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6b2:	f023 0203 	bic.w	r2, r3, #3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6ba:	4939      	ldr	r1, [pc, #228]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d028      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6ce:	4b34      	ldr	r3, [pc, #208]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6dc:	4930      	ldr	r1, [pc, #192]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6ec:	d106      	bne.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b6ee:	4b2c      	ldr	r3, [pc, #176]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	4a2b      	ldr	r2, [pc, #172]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b6f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6f8:	60d3      	str	r3, [r2, #12]
 800b6fa:	e011      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b704:	d10c      	bne.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	3304      	adds	r3, #4
 800b70a:	2101      	movs	r1, #1
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 f8f9 	bl	800b904 <RCCEx_PLLSAI1_Config>
 800b712:	4603      	mov	r3, r0
 800b714:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b716:	7cfb      	ldrb	r3, [r7, #19]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800b71c:	7cfb      	ldrb	r3, [r7, #19]
 800b71e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d04d      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b734:	d108      	bne.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800b736:	4b1a      	ldr	r3, [pc, #104]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b738:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b73c:	4a18      	ldr	r2, [pc, #96]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b73e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b742:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b746:	e012      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800b748:	4b15      	ldr	r3, [pc, #84]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b74a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b74e:	4a14      	ldr	r2, [pc, #80]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b754:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b758:	4b11      	ldr	r3, [pc, #68]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b75a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b75e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b766:	490e      	ldr	r1, [pc, #56]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b768:	4313      	orrs	r3, r2
 800b76a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b776:	d106      	bne.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b778:	4b09      	ldr	r3, [pc, #36]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	4a08      	ldr	r2, [pc, #32]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b77e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b782:	60d3      	str	r3, [r2, #12]
 800b784:	e020      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b78a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b78e:	d109      	bne.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b790:	4b03      	ldr	r3, [pc, #12]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	4a02      	ldr	r2, [pc, #8]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b79a:	60d3      	str	r3, [r2, #12]
 800b79c:	e014      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b79e:	bf00      	nop
 800b7a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7ac:	d10c      	bne.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	2101      	movs	r1, #1
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 f8a5 	bl	800b904 <RCCEx_PLLSAI1_Config>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b7be:	7cfb      	ldrb	r3, [r7, #19]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d001      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800b7c4:	7cfb      	ldrb	r3, [r7, #19]
 800b7c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d028      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7d4:	4b4a      	ldr	r3, [pc, #296]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7e2:	4947      	ldr	r1, [pc, #284]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7f2:	d106      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b7f4:	4b42      	ldr	r3, [pc, #264]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	4a41      	ldr	r2, [pc, #260]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b7fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7fe:	60d3      	str	r3, [r2, #12]
 800b800:	e011      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b80a:	d10c      	bne.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3304      	adds	r3, #4
 800b810:	2101      	movs	r1, #1
 800b812:	4618      	mov	r0, r3
 800b814:	f000 f876 	bl	800b904 <RCCEx_PLLSAI1_Config>
 800b818:	4603      	mov	r3, r0
 800b81a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b81c:	7cfb      	ldrb	r3, [r7, #19]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800b822:	7cfb      	ldrb	r3, [r7, #19]
 800b824:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d01e      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b832:	4b33      	ldr	r3, [pc, #204]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b838:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b842:	492f      	ldr	r1, [pc, #188]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b844:	4313      	orrs	r3, r2
 800b846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b850:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b854:	d10c      	bne.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	3304      	adds	r3, #4
 800b85a:	2102      	movs	r1, #2
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 f851 	bl	800b904 <RCCEx_PLLSAI1_Config>
 800b862:	4603      	mov	r3, r0
 800b864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b866:	7cfb      	ldrb	r3, [r7, #19]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d001      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800b86c:	7cfb      	ldrb	r3, [r7, #19]
 800b86e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00b      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b87c:	4b20      	ldr	r3, [pc, #128]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b87e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b882:	f023 0204 	bic.w	r2, r3, #4
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b88c:	491c      	ldr	r1, [pc, #112]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b88e:	4313      	orrs	r3, r2
 800b890:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00b      	beq.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b8a0:	4b17      	ldr	r3, [pc, #92]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8a6:	f023 0218 	bic.w	r2, r3, #24
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8b0:	4913      	ldr	r1, [pc, #76]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d017      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b8c4:	4b0e      	ldr	r3, [pc, #56]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8d4:	490a      	ldr	r1, [pc, #40]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8e6:	d105      	bne.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b8e8:	4b05      	ldr	r3, [pc, #20]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	4a04      	ldr	r2, [pc, #16]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b8ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b8f4:	7cbb      	ldrb	r3, [r7, #18]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	40021000 	.word	0x40021000

0800b904 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b90e:	2300      	movs	r3, #0
 800b910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b912:	4b72      	ldr	r3, [pc, #456]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	f003 0303 	and.w	r3, r3, #3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00e      	beq.n	800b93c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b91e:	4b6f      	ldr	r3, [pc, #444]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f003 0203 	and.w	r2, r3, #3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d103      	bne.n	800b936 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
       ||
 800b932:	2b00      	cmp	r3, #0
 800b934:	d142      	bne.n	800b9bc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	73fb      	strb	r3, [r7, #15]
 800b93a:	e03f      	b.n	800b9bc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b03      	cmp	r3, #3
 800b942:	d018      	beq.n	800b976 <RCCEx_PLLSAI1_Config+0x72>
 800b944:	2b03      	cmp	r3, #3
 800b946:	d825      	bhi.n	800b994 <RCCEx_PLLSAI1_Config+0x90>
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d002      	beq.n	800b952 <RCCEx_PLLSAI1_Config+0x4e>
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d009      	beq.n	800b964 <RCCEx_PLLSAI1_Config+0x60>
 800b950:	e020      	b.n	800b994 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b952:	4b62      	ldr	r3, [pc, #392]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 0302 	and.w	r3, r3, #2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d11d      	bne.n	800b99a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b962:	e01a      	b.n	800b99a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b964:	4b5d      	ldr	r3, [pc, #372]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d116      	bne.n	800b99e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b974:	e013      	b.n	800b99e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b976:	4b59      	ldr	r3, [pc, #356]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10f      	bne.n	800b9a2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b982:	4b56      	ldr	r3, [pc, #344]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d109      	bne.n	800b9a2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b992:	e006      	b.n	800b9a2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	73fb      	strb	r3, [r7, #15]
      break;
 800b998:	e004      	b.n	800b9a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b99a:	bf00      	nop
 800b99c:	e002      	b.n	800b9a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b99e:	bf00      	nop
 800b9a0:	e000      	b.n	800b9a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b9a2:	bf00      	nop
    }

    if(status == HAL_OK)
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d108      	bne.n	800b9bc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b9aa:	4b4c      	ldr	r3, [pc, #304]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	f023 0203 	bic.w	r2, r3, #3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4949      	ldr	r1, [pc, #292]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f040 8086 	bne.w	800bad0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b9c4:	4b45      	ldr	r3, [pc, #276]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a44      	ldr	r2, [pc, #272]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b9ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9d0:	f7fc fbfa 	bl	80081c8 <HAL_GetTick>
 800b9d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b9d6:	e009      	b.n	800b9ec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b9d8:	f7fc fbf6 	bl	80081c8 <HAL_GetTick>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d902      	bls.n	800b9ec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	73fb      	strb	r3, [r7, #15]
        break;
 800b9ea:	e005      	b.n	800b9f8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b9ec:	4b3b      	ldr	r3, [pc, #236]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1ef      	bne.n	800b9d8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d168      	bne.n	800bad0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d113      	bne.n	800ba2c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ba04:	4b35      	ldr	r3, [pc, #212]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba06:	691a      	ldr	r2, [r3, #16]
 800ba08:	4b35      	ldr	r3, [pc, #212]	; (800bae0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	6892      	ldr	r2, [r2, #8]
 800ba10:	0211      	lsls	r1, r2, #8
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	68d2      	ldr	r2, [r2, #12]
 800ba16:	06d2      	lsls	r2, r2, #27
 800ba18:	4311      	orrs	r1, r2
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	6852      	ldr	r2, [r2, #4]
 800ba1e:	3a01      	subs	r2, #1
 800ba20:	0112      	lsls	r2, r2, #4
 800ba22:	430a      	orrs	r2, r1
 800ba24:	492d      	ldr	r1, [pc, #180]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba26:	4313      	orrs	r3, r2
 800ba28:	610b      	str	r3, [r1, #16]
 800ba2a:	e02d      	b.n	800ba88 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d115      	bne.n	800ba5e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ba32:	4b2a      	ldr	r3, [pc, #168]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba34:	691a      	ldr	r2, [r3, #16]
 800ba36:	4b2b      	ldr	r3, [pc, #172]	; (800bae4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba38:	4013      	ands	r3, r2
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	6892      	ldr	r2, [r2, #8]
 800ba3e:	0211      	lsls	r1, r2, #8
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	6912      	ldr	r2, [r2, #16]
 800ba44:	0852      	lsrs	r2, r2, #1
 800ba46:	3a01      	subs	r2, #1
 800ba48:	0552      	lsls	r2, r2, #21
 800ba4a:	4311      	orrs	r1, r2
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	6852      	ldr	r2, [r2, #4]
 800ba50:	3a01      	subs	r2, #1
 800ba52:	0112      	lsls	r2, r2, #4
 800ba54:	430a      	orrs	r2, r1
 800ba56:	4921      	ldr	r1, [pc, #132]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	610b      	str	r3, [r1, #16]
 800ba5c:	e014      	b.n	800ba88 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ba5e:	4b1f      	ldr	r3, [pc, #124]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba60:	691a      	ldr	r2, [r3, #16]
 800ba62:	4b21      	ldr	r3, [pc, #132]	; (800bae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ba64:	4013      	ands	r3, r2
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	6892      	ldr	r2, [r2, #8]
 800ba6a:	0211      	lsls	r1, r2, #8
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	6952      	ldr	r2, [r2, #20]
 800ba70:	0852      	lsrs	r2, r2, #1
 800ba72:	3a01      	subs	r2, #1
 800ba74:	0652      	lsls	r2, r2, #25
 800ba76:	4311      	orrs	r1, r2
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	6852      	ldr	r2, [r2, #4]
 800ba7c:	3a01      	subs	r2, #1
 800ba7e:	0112      	lsls	r2, r2, #4
 800ba80:	430a      	orrs	r2, r1
 800ba82:	4916      	ldr	r1, [pc, #88]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba84:	4313      	orrs	r3, r2
 800ba86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ba88:	4b14      	ldr	r3, [pc, #80]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a13      	ldr	r2, [pc, #76]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800ba8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ba92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba94:	f7fc fb98 	bl	80081c8 <HAL_GetTick>
 800ba98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ba9a:	e009      	b.n	800bab0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ba9c:	f7fc fb94 	bl	80081c8 <HAL_GetTick>
 800baa0:	4602      	mov	r2, r0
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d902      	bls.n	800bab0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800baaa:	2303      	movs	r3, #3
 800baac:	73fb      	strb	r3, [r7, #15]
          break;
 800baae:	e005      	b.n	800babc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bab0:	4b0a      	ldr	r3, [pc, #40]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0ef      	beq.n	800ba9c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800babc:	7bfb      	ldrb	r3, [r7, #15]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800bac2:	4b06      	ldr	r3, [pc, #24]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800bac4:	691a      	ldr	r2, [r3, #16]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	699b      	ldr	r3, [r3, #24]
 800baca:	4904      	ldr	r1, [pc, #16]	; (800badc <RCCEx_PLLSAI1_Config+0x1d8>)
 800bacc:	4313      	orrs	r3, r2
 800bace:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	40021000 	.word	0x40021000
 800bae0:	07ff800f 	.word	0x07ff800f
 800bae4:	ff9f800f 	.word	0xff9f800f
 800bae8:	f9ff800f 	.word	0xf9ff800f

0800baec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800bafa:	4b72      	ldr	r3, [pc, #456]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	f003 0303 	and.w	r3, r3, #3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00e      	beq.n	800bb24 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800bb06:	4b6f      	ldr	r3, [pc, #444]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	f003 0203 	and.w	r2, r3, #3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d103      	bne.n	800bb1e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
       ||
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d142      	bne.n	800bba4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	73fb      	strb	r3, [r7, #15]
 800bb22:	e03f      	b.n	800bba4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b03      	cmp	r3, #3
 800bb2a:	d018      	beq.n	800bb5e <RCCEx_PLLSAI2_Config+0x72>
 800bb2c:	2b03      	cmp	r3, #3
 800bb2e:	d825      	bhi.n	800bb7c <RCCEx_PLLSAI2_Config+0x90>
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d002      	beq.n	800bb3a <RCCEx_PLLSAI2_Config+0x4e>
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d009      	beq.n	800bb4c <RCCEx_PLLSAI2_Config+0x60>
 800bb38:	e020      	b.n	800bb7c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800bb3a:	4b62      	ldr	r3, [pc, #392]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f003 0302 	and.w	r3, r3, #2
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d11d      	bne.n	800bb82 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb4a:	e01a      	b.n	800bb82 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800bb4c:	4b5d      	ldr	r3, [pc, #372]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d116      	bne.n	800bb86 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb5c:	e013      	b.n	800bb86 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800bb5e:	4b59      	ldr	r3, [pc, #356]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10f      	bne.n	800bb8a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800bb6a:	4b56      	ldr	r3, [pc, #344]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d109      	bne.n	800bb8a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bb7a:	e006      	b.n	800bb8a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb80:	e004      	b.n	800bb8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800bb82:	bf00      	nop
 800bb84:	e002      	b.n	800bb8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800bb86:	bf00      	nop
 800bb88:	e000      	b.n	800bb8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800bb8a:	bf00      	nop
    }

    if(status == HAL_OK)
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d108      	bne.n	800bba4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800bb92:	4b4c      	ldr	r3, [pc, #304]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	f023 0203 	bic.w	r2, r3, #3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4949      	ldr	r1, [pc, #292]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bba0:	4313      	orrs	r3, r2
 800bba2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f040 8086 	bne.w	800bcb8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800bbac:	4b45      	ldr	r3, [pc, #276]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a44      	ldr	r2, [pc, #272]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bbb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbb8:	f7fc fb06 	bl	80081c8 <HAL_GetTick>
 800bbbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bbbe:	e009      	b.n	800bbd4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bbc0:	f7fc fb02 	bl	80081c8 <HAL_GetTick>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d902      	bls.n	800bbd4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	73fb      	strb	r3, [r7, #15]
        break;
 800bbd2:	e005      	b.n	800bbe0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bbd4:	4b3b      	ldr	r3, [pc, #236]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1ef      	bne.n	800bbc0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d168      	bne.n	800bcb8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d113      	bne.n	800bc14 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bbec:	4b35      	ldr	r3, [pc, #212]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bbee:	695a      	ldr	r2, [r3, #20]
 800bbf0:	4b35      	ldr	r3, [pc, #212]	; (800bcc8 <RCCEx_PLLSAI2_Config+0x1dc>)
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	6892      	ldr	r2, [r2, #8]
 800bbf8:	0211      	lsls	r1, r2, #8
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	68d2      	ldr	r2, [r2, #12]
 800bbfe:	06d2      	lsls	r2, r2, #27
 800bc00:	4311      	orrs	r1, r2
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	6852      	ldr	r2, [r2, #4]
 800bc06:	3a01      	subs	r2, #1
 800bc08:	0112      	lsls	r2, r2, #4
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	492d      	ldr	r1, [pc, #180]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	614b      	str	r3, [r1, #20]
 800bc12:	e02d      	b.n	800bc70 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d115      	bne.n	800bc46 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bc1a:	4b2a      	ldr	r3, [pc, #168]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc1c:	695a      	ldr	r2, [r3, #20]
 800bc1e:	4b2b      	ldr	r3, [pc, #172]	; (800bccc <RCCEx_PLLSAI2_Config+0x1e0>)
 800bc20:	4013      	ands	r3, r2
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	6892      	ldr	r2, [r2, #8]
 800bc26:	0211      	lsls	r1, r2, #8
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	6912      	ldr	r2, [r2, #16]
 800bc2c:	0852      	lsrs	r2, r2, #1
 800bc2e:	3a01      	subs	r2, #1
 800bc30:	0552      	lsls	r2, r2, #21
 800bc32:	4311      	orrs	r1, r2
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	6852      	ldr	r2, [r2, #4]
 800bc38:	3a01      	subs	r2, #1
 800bc3a:	0112      	lsls	r2, r2, #4
 800bc3c:	430a      	orrs	r2, r1
 800bc3e:	4921      	ldr	r1, [pc, #132]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc40:	4313      	orrs	r3, r2
 800bc42:	614b      	str	r3, [r1, #20]
 800bc44:	e014      	b.n	800bc70 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bc46:	4b1f      	ldr	r3, [pc, #124]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc48:	695a      	ldr	r2, [r3, #20]
 800bc4a:	4b21      	ldr	r3, [pc, #132]	; (800bcd0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	6892      	ldr	r2, [r2, #8]
 800bc52:	0211      	lsls	r1, r2, #8
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	6952      	ldr	r2, [r2, #20]
 800bc58:	0852      	lsrs	r2, r2, #1
 800bc5a:	3a01      	subs	r2, #1
 800bc5c:	0652      	lsls	r2, r2, #25
 800bc5e:	4311      	orrs	r1, r2
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	6852      	ldr	r2, [r2, #4]
 800bc64:	3a01      	subs	r2, #1
 800bc66:	0112      	lsls	r2, r2, #4
 800bc68:	430a      	orrs	r2, r1
 800bc6a:	4916      	ldr	r1, [pc, #88]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800bc70:	4b14      	ldr	r3, [pc, #80]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a13      	ldr	r2, [pc, #76]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc7c:	f7fc faa4 	bl	80081c8 <HAL_GetTick>
 800bc80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bc82:	e009      	b.n	800bc98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bc84:	f7fc faa0 	bl	80081c8 <HAL_GetTick>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	1ad3      	subs	r3, r2, r3
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d902      	bls.n	800bc98 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800bc92:	2303      	movs	r3, #3
 800bc94:	73fb      	strb	r3, [r7, #15]
          break;
 800bc96:	e005      	b.n	800bca4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bc98:	4b0a      	ldr	r3, [pc, #40]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0ef      	beq.n	800bc84 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d106      	bne.n	800bcb8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800bcaa:	4b06      	ldr	r3, [pc, #24]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bcac:	695a      	ldr	r2, [r3, #20]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	699b      	ldr	r3, [r3, #24]
 800bcb2:	4904      	ldr	r1, [pc, #16]	; (800bcc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800bcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	40021000 	.word	0x40021000
 800bcc8:	07ff800f 	.word	0x07ff800f
 800bccc:	ff9f800f 	.word	0xff9f800f
 800bcd0:	f9ff800f 	.word	0xf9ff800f

0800bcd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e095      	b.n	800be12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d108      	bne.n	800bd00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcf6:	d009      	beq.n	800bd0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	61da      	str	r2, [r3, #28]
 800bcfe:	e005      	b.n	800bd0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d106      	bne.n	800bd2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7fb fbce 	bl	80074c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd4c:	d902      	bls.n	800bd54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60fb      	str	r3, [r7, #12]
 800bd52:	e002      	b.n	800bd5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bd54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bd62:	d007      	beq.n	800bd74 <HAL_SPI_Init+0xa0>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd6c:	d002      	beq.n	800bd74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bd84:	431a      	orrs	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	f003 0302 	and.w	r3, r3, #2
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	431a      	orrs	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bda2:	431a      	orrs	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdac:	431a      	orrs	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdb6:	ea42 0103 	orr.w	r1, r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	430a      	orrs	r2, r1
 800bdc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	0c1b      	lsrs	r3, r3, #16
 800bdd0:	f003 0204 	and.w	r2, r3, #4
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	f003 0310 	and.w	r3, r3, #16
 800bddc:	431a      	orrs	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde2:	f003 0308 	and.w	r3, r3, #8
 800bde6:	431a      	orrs	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bdf0:	ea42 0103 	orr.w	r1, r2, r3
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	430a      	orrs	r2, r1
 800be00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
	...

0800be1c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be34:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800be3c:	7dbb      	ldrb	r3, [r7, #22]
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d00d      	beq.n	800be5e <HAL_SPI_TransmitReceive_IT+0x42>
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be48:	d106      	bne.n	800be58 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d102      	bne.n	800be58 <HAL_SPI_TransmitReceive_IT+0x3c>
 800be52:	7dbb      	ldrb	r3, [r7, #22]
 800be54:	2b04      	cmp	r3, #4
 800be56:	d002      	beq.n	800be5e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 800be58:	2302      	movs	r3, #2
 800be5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be5c:	e07d      	b.n	800bf5a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d005      	beq.n	800be70 <HAL_SPI_TransmitReceive_IT+0x54>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d002      	beq.n	800be70 <HAL_SPI_TransmitReceive_IT+0x54>
 800be6a:	887b      	ldrh	r3, [r7, #2]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d102      	bne.n	800be76 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800be70:	2301      	movs	r3, #1
 800be72:	75fb      	strb	r3, [r7, #23]
    goto error;
 800be74:	e071      	b.n	800bf5a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d101      	bne.n	800be84 <HAL_SPI_TransmitReceive_IT+0x68>
 800be80:	2302      	movs	r3, #2
 800be82:	e06b      	b.n	800bf5c <HAL_SPI_TransmitReceive_IT+0x140>
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2201      	movs	r2, #1
 800be88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b04      	cmp	r3, #4
 800be96:	d003      	beq.n	800bea0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2205      	movs	r2, #5
 800be9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2200      	movs	r2, #0
 800bea4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	887a      	ldrh	r2, [r7, #2]
 800beb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	887a      	ldrh	r2, [r7, #2]
 800beb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	887a      	ldrh	r2, [r7, #2]
 800bec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	887a      	ldrh	r2, [r7, #2]
 800beca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bed6:	d906      	bls.n	800bee6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	4a23      	ldr	r2, [pc, #140]	; (800bf68 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800bedc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	4a22      	ldr	r2, [pc, #136]	; (800bf6c <HAL_SPI_TransmitReceive_IT+0x150>)
 800bee2:	651a      	str	r2, [r3, #80]	; 0x50
 800bee4:	e005      	b.n	800bef2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	4a21      	ldr	r2, [pc, #132]	; (800bf70 <HAL_SPI_TransmitReceive_IT+0x154>)
 800beea:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	4a21      	ldr	r2, [pc, #132]	; (800bf74 <HAL_SPI_TransmitReceive_IT+0x158>)
 800bef0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800befa:	d802      	bhi.n	800bf02 <HAL_SPI_TransmitReceive_IT+0xe6>
 800befc:	887b      	ldrh	r3, [r7, #2]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d908      	bls.n	800bf14 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bf10:	605a      	str	r2, [r3, #4]
 800bf12:	e007      	b.n	800bf24 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	685a      	ldr	r2, [r3, #4]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf22:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf2e:	2b40      	cmp	r3, #64	; 0x40
 800bf30:	d007      	beq.n	800bf42 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf40:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	685a      	ldr	r2, [r3, #4]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800bf58:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	371c      	adds	r7, #28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	0800c7cf 	.word	0x0800c7cf
 800bf6c:	0800c835 	.word	0x0800c835
 800bf70:	0800c67f 	.word	0x0800c67f
 800bf74:	0800c73d 	.word	0x0800c73d

0800bf78 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b086      	sub	sp, #24
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
 800bf84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d101      	bne.n	800bf98 <HAL_SPI_TransmitReceive_DMA+0x20>
 800bf94:	2302      	movs	r3, #2
 800bf96:	e164      	b.n	800c262 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bfa6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800bfae:	7dbb      	ldrb	r3, [r7, #22]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d00d      	beq.n	800bfd0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bfba:	d106      	bne.n	800bfca <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d102      	bne.n	800bfca <HAL_SPI_TransmitReceive_DMA+0x52>
 800bfc4:	7dbb      	ldrb	r3, [r7, #22]
 800bfc6:	2b04      	cmp	r3, #4
 800bfc8:	d002      	beq.n	800bfd0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800bfca:	2302      	movs	r3, #2
 800bfcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bfce:	e143      	b.n	800c258 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d005      	beq.n	800bfe2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800bfdc:	887b      	ldrh	r3, [r7, #2]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d102      	bne.n	800bfe8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bfe6:	e137      	b.n	800c258 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b04      	cmp	r3, #4
 800bff2:	d003      	beq.n	800bffc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2205      	movs	r2, #5
 800bff8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	887a      	ldrh	r2, [r7, #2]
 800c00c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	887a      	ldrh	r2, [r7, #2]
 800c012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	887a      	ldrh	r2, [r7, #2]
 800c01e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	887a      	ldrh	r2, [r7, #2]
 800c026:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c044:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c04e:	d908      	bls.n	800c062 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c05e:	605a      	str	r2, [r3, #4]
 800c060:	e06f      	b.n	800c142 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	685a      	ldr	r2, [r3, #4]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c070:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c07c:	d126      	bne.n	800c0cc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c082:	f003 0301 	and.w	r3, r3, #1
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10f      	bne.n	800c0aa <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c098:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	085b      	lsrs	r3, r3, #1
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c0a8:	e010      	b.n	800c0cc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	685a      	ldr	r2, [r3, #4]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0b8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	085b      	lsrs	r3, r3, #1
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0d6:	d134      	bne.n	800c142 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c0e6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	f003 0301 	and.w	r3, r3, #1
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d111      	bne.n	800c11c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c106:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c10e:	b29b      	uxth	r3, r3
 800c110:	085b      	lsrs	r3, r3, #1
 800c112:	b29a      	uxth	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c11a:	e012      	b.n	800c142 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c12a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c132:	b29b      	uxth	r3, r3
 800c134:	085b      	lsrs	r3, r3, #1
 800c136:	b29b      	uxth	r3, r3
 800c138:	3301      	adds	r3, #1
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b04      	cmp	r3, #4
 800c14c:	d108      	bne.n	800c160 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c152:	4a46      	ldr	r2, [pc, #280]	; (800c26c <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800c154:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c15a:	4a45      	ldr	r2, [pc, #276]	; (800c270 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800c15c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c15e:	e007      	b.n	800c170 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c164:	4a43      	ldr	r2, [pc, #268]	; (800c274 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800c166:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c16c:	4a42      	ldr	r2, [pc, #264]	; (800c278 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800c16e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c174:	4a41      	ldr	r2, [pc, #260]	; (800c27c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800c176:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c17c:	2200      	movs	r2, #0
 800c17e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	330c      	adds	r3, #12
 800c18a:	4619      	mov	r1, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c190:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c198:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c19a:	f7fd fc55 	bl	8009a48 <HAL_DMA_Start_IT>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d008      	beq.n	800c1b6 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1a8:	f043 0210 	orr.w	r2, r3, #16
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c1b4:	e050      	b.n	800c258 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f042 0201 	orr.w	r2, r2, #1
 800c1c4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1da:	2200      	movs	r2, #0
 800c1dc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	330c      	adds	r3, #12
 800c1f6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c1fe:	f7fd fc23 	bl	8009a48 <HAL_DMA_Start_IT>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d008      	beq.n	800c21a <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c20c:	f043 0210 	orr.w	r2, r3, #16
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c218:	e01e      	b.n	800c258 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c224:	2b40      	cmp	r3, #64	; 0x40
 800c226:	d007      	beq.n	800c238 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c236:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f042 0220 	orr.w	r2, r2, #32
 800c246:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f042 0202 	orr.w	r2, r2, #2
 800c256:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c260:	7dfb      	ldrb	r3, [r7, #23]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3718      	adds	r7, #24
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	0800c5dd 	.word	0x0800c5dd
 800c270:	0800c4a5 	.word	0x0800c4a5
 800c274:	0800c5f9 	.word	0x0800c5f9
 800c278:	0800c54d 	.word	0x0800c54d
 800c27c:	0800c615 	.word	0x0800c615

0800c280 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b088      	sub	sp, #32
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10e      	bne.n	800c2c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d009      	beq.n	800c2c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d004      	beq.n	800c2c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	4798      	blx	r3
    return;
 800c2be:	e0ce      	b.n	800c45e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	f003 0302 	and.w	r3, r3, #2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d009      	beq.n	800c2de <HAL_SPI_IRQHandler+0x5e>
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d004      	beq.n	800c2de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	4798      	blx	r3
    return;
 800c2dc:	e0bf      	b.n	800c45e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	f003 0320 	and.w	r3, r3, #32
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d10a      	bne.n	800c2fe <HAL_SPI_IRQHandler+0x7e>
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d105      	bne.n	800c2fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f000 80b0 	beq.w	800c45e <HAL_SPI_IRQHandler+0x1de>
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	f003 0320 	and.w	r3, r3, #32
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 80aa 	beq.w	800c45e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c310:	2b00      	cmp	r3, #0
 800c312:	d023      	beq.n	800c35c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b03      	cmp	r3, #3
 800c31e:	d011      	beq.n	800c344 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c324:	f043 0204 	orr.w	r2, r3, #4
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c32c:	2300      	movs	r3, #0
 800c32e:	617b      	str	r3, [r7, #20]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	617b      	str	r3, [r7, #20]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	e00b      	b.n	800c35c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c344:	2300      	movs	r3, #0
 800c346:	613b      	str	r3, [r7, #16]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	613b      	str	r3, [r7, #16]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	613b      	str	r3, [r7, #16]
 800c358:	693b      	ldr	r3, [r7, #16]
        return;
 800c35a:	e080      	b.n	800c45e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	f003 0320 	and.w	r3, r3, #32
 800c362:	2b00      	cmp	r3, #0
 800c364:	d014      	beq.n	800c390 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c36a:	f043 0201 	orr.w	r2, r3, #1
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c372:	2300      	movs	r3, #0
 800c374:	60fb      	str	r3, [r7, #12]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	60fb      	str	r3, [r7, #12]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c38c:	601a      	str	r2, [r3, #0]
 800c38e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00c      	beq.n	800c3b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c39e:	f043 0208 	orr.w	r2, r3, #8
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	60bb      	str	r3, [r7, #8]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	60bb      	str	r3, [r7, #8]
 800c3b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d04f      	beq.n	800c45c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	685a      	ldr	r2, [r3, #4]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c3ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	f003 0302 	and.w	r3, r3, #2
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d104      	bne.n	800c3e8 <HAL_SPI_IRQHandler+0x168>
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	f003 0301 	and.w	r3, r3, #1
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d034      	beq.n	800c452 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	685a      	ldr	r2, [r3, #4]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f022 0203 	bic.w	r2, r2, #3
 800c3f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d011      	beq.n	800c424 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c404:	4a17      	ldr	r2, [pc, #92]	; (800c464 <HAL_SPI_IRQHandler+0x1e4>)
 800c406:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fd fbf2 	bl	8009bf6 <HAL_DMA_Abort_IT>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d005      	beq.n	800c424 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c41c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d016      	beq.n	800c45a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c430:	4a0c      	ldr	r2, [pc, #48]	; (800c464 <HAL_SPI_IRQHandler+0x1e4>)
 800c432:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fd fbdc 	bl	8009bf6 <HAL_DMA_Abort_IT>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00a      	beq.n	800c45a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c448:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c450:	e003      	b.n	800c45a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f7fb f96a 	bl	800772c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c458:	e000      	b.n	800c45c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800c45a:	bf00      	nop
    return;
 800c45c:	bf00      	nop
  }
}
 800c45e:	3720      	adds	r7, #32
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	0800c655 	.word	0x0800c655

0800c468 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c484:	bf00      	nop
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c498:	bf00      	nop
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4b0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4b2:	f7fb fe89 	bl	80081c8 <HAL_GetTick>
 800c4b6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 0320 	and.w	r3, r3, #32
 800c4c2:	2b20      	cmp	r3, #32
 800c4c4:	d03c      	beq.n	800c540 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f022 0220 	bic.w	r2, r2, #32
 800c4d4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d10d      	bne.n	800c4fa <SPI_DMAReceiveCplt+0x56>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4e6:	d108      	bne.n	800c4fa <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f022 0203 	bic.w	r2, r2, #3
 800c4f6:	605a      	str	r2, [r3, #4]
 800c4f8:	e007      	b.n	800c50a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f022 0201 	bic.w	r2, r2, #1
 800c508:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	2164      	movs	r1, #100	; 0x64
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f000 fade 	bl	800cad0 <SPI_EndRxTransaction>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d002      	beq.n	800c520 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2220      	movs	r2, #32
 800c51e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2201      	movs	r2, #1
 800c52c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c534:	2b00      	cmp	r3, #0
 800c536:	d003      	beq.n	800c540 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f7fb f8f7 	bl	800772c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c53e:	e002      	b.n	800c546 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f7ff ff91 	bl	800c468 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c558:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c55a:	f7fb fe35 	bl	80081c8 <HAL_GetTick>
 800c55e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 0320 	and.w	r3, r3, #32
 800c56a:	2b20      	cmp	r3, #32
 800c56c:	d030      	beq.n	800c5d0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f022 0220 	bic.w	r2, r2, #32
 800c57c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	2164      	movs	r1, #100	; 0x64
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f000 fafc 	bl	800cb80 <SPI_EndRxTxTransaction>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d005      	beq.n	800c59a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c592:	f043 0220 	orr.w	r2, r3, #32
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	685a      	ldr	r2, [r3, #4]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f022 0203 	bic.w	r2, r2, #3
 800c5a8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d003      	beq.n	800c5d0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f7fb f8af 	bl	800772c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c5ce:	e002      	b.n	800c5d6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f7fb f889 	bl	80076e8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f7ff ff46 	bl	800c47c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5f0:	bf00      	nop
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c604:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f7ff ff42 	bl	800c490 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c60c:	bf00      	nop
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c620:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	685a      	ldr	r2, [r3, #4]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f022 0203 	bic.w	r2, r2, #3
 800c630:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c636:	f043 0210 	orr.w	r2, r3, #16
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2201      	movs	r2, #1
 800c642:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f7fb f870 	bl	800772c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c64c:	bf00      	nop
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c660:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f7fb f85b 	bl	800772c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c676:	bf00      	nop
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b082      	sub	sp, #8
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d923      	bls.n	800c6da <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	68da      	ldr	r2, [r3, #12]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c69c:	b292      	uxth	r2, r2
 800c69e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a4:	1c9a      	adds	r2, r3, #2
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	3b02      	subs	r3, #2
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d11f      	bne.n	800c708 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c6d6:	605a      	str	r2, [r3, #4]
 800c6d8:	e016      	b.n	800c708 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f103 020c 	add.w	r2, r3, #12
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e6:	7812      	ldrb	r2, [r2, #0]
 800c6e8:	b2d2      	uxtb	r2, r2
 800c6ea:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f0:	1c5a      	adds	r2, r3, #1
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	3b01      	subs	r3, #1
 800c700:	b29a      	uxth	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c70e:	b29b      	uxth	r3, r3
 800c710:	2b00      	cmp	r3, #0
 800c712:	d10f      	bne.n	800c734 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	685a      	ldr	r2, [r3, #4]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c722:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c728:	b29b      	uxth	r3, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d102      	bne.n	800c734 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fa6c 	bl	800cc0c <SPI_CloseRxTx_ISR>
    }
  }
}
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c748:	b29b      	uxth	r3, r3
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d912      	bls.n	800c774 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c752:	881a      	ldrh	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75e:	1c9a      	adds	r2, r3, #2
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c768:	b29b      	uxth	r3, r3
 800c76a:	3b02      	subs	r3, #2
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c772:	e012      	b.n	800c79a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	330c      	adds	r3, #12
 800c77e:	7812      	ldrb	r2, [r2, #0]
 800c780:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c790:	b29b      	uxth	r3, r3
 800c792:	3b01      	subs	r3, #1
 800c794:	b29a      	uxth	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d110      	bne.n	800c7c6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	685a      	ldr	r2, [r3, #4]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7b2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d102      	bne.n	800c7c6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fa23 	bl	800cc0c <SPI_CloseRxTx_ISR>
    }
  }
}
 800c7c6:	bf00      	nop
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68da      	ldr	r2, [r3, #12]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e0:	b292      	uxth	r2, r2
 800c7e2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e8:	1c9a      	adds	r2, r3, #2
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c806:	b29b      	uxth	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10f      	bne.n	800c82c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	685a      	ldr	r2, [r3, #4]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c81a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c820:	b29b      	uxth	r3, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	d102      	bne.n	800c82c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f9f0 	bl	800cc0c <SPI_CloseRxTx_ISR>
    }
  }
}
 800c82c:	bf00      	nop
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c840:	881a      	ldrh	r2, [r3, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84c:	1c9a      	adds	r2, r3, #2
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c856:	b29b      	uxth	r3, r3
 800c858:	3b01      	subs	r3, #1
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c864:	b29b      	uxth	r3, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	d110      	bne.n	800c88c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	685a      	ldr	r2, [r3, #4]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c878:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c880:	b29b      	uxth	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d102      	bne.n	800c88c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 f9c0 	bl	800cc0c <SPI_CloseRxTx_ISR>
    }
  }
}
 800c88c:	bf00      	nop
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	603b      	str	r3, [r7, #0]
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c8a4:	f7fb fc90 	bl	80081c8 <HAL_GetTick>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	1a9b      	subs	r3, r3, r2
 800c8ae:	683a      	ldr	r2, [r7, #0]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c8b4:	f7fb fc88 	bl	80081c8 <HAL_GetTick>
 800c8b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c8ba:	4b39      	ldr	r3, [pc, #228]	; (800c9a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	015b      	lsls	r3, r3, #5
 800c8c0:	0d1b      	lsrs	r3, r3, #20
 800c8c2:	69fa      	ldr	r2, [r7, #28]
 800c8c4:	fb02 f303 	mul.w	r3, r2, r3
 800c8c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c8ca:	e054      	b.n	800c976 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8d2:	d050      	beq.n	800c976 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c8d4:	f7fb fc78 	bl	80081c8 <HAL_GetTick>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	69fa      	ldr	r2, [r7, #28]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d902      	bls.n	800c8ea <SPI_WaitFlagStateUntilTimeout+0x56>
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d13d      	bne.n	800c966 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	685a      	ldr	r2, [r3, #4]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c8f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c902:	d111      	bne.n	800c928 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c90c:	d004      	beq.n	800c918 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c916:	d107      	bne.n	800c928 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c926:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c92c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c930:	d10f      	bne.n	800c952 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c950:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2201      	movs	r2, #1
 800c956:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e017      	b.n	800c996 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d101      	bne.n	800c970 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c96c:	2300      	movs	r3, #0
 800c96e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	3b01      	subs	r3, #1
 800c974:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	689a      	ldr	r2, [r3, #8]
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	4013      	ands	r3, r2
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	429a      	cmp	r2, r3
 800c984:	bf0c      	ite	eq
 800c986:	2301      	moveq	r3, #1
 800c988:	2300      	movne	r3, #0
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	461a      	mov	r2, r3
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	429a      	cmp	r2, r3
 800c992:	d19b      	bne.n	800c8cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3720      	adds	r7, #32
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	2000012c 	.word	0x2000012c

0800c9a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b08a      	sub	sp, #40	; 0x28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c9b6:	f7fb fc07 	bl	80081c8 <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	1a9b      	subs	r3, r3, r2
 800c9c0:	683a      	ldr	r2, [r7, #0]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c9c6:	f7fb fbff 	bl	80081c8 <HAL_GetTick>
 800c9ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	330c      	adds	r3, #12
 800c9d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c9d4:	4b3d      	ldr	r3, [pc, #244]	; (800cacc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	4613      	mov	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4413      	add	r3, r2
 800c9de:	00da      	lsls	r2, r3, #3
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	0d1b      	lsrs	r3, r3, #20
 800c9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9e6:	fb02 f303 	mul.w	r3, r2, r3
 800c9ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c9ec:	e060      	b.n	800cab0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c9f4:	d107      	bne.n	800ca06 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d104      	bne.n	800ca06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca0c:	d050      	beq.n	800cab0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ca0e:	f7fb fbdb 	bl	80081c8 <HAL_GetTick>
 800ca12:	4602      	mov	r2, r0
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	1ad3      	subs	r3, r2, r3
 800ca18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d902      	bls.n	800ca24 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ca1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d13d      	bne.n	800caa0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	685a      	ldr	r2, [r3, #4]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ca32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca3c:	d111      	bne.n	800ca62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca46:	d004      	beq.n	800ca52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca50:	d107      	bne.n	800ca62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca6a:	d10f      	bne.n	800ca8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	e010      	b.n	800cac2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d101      	bne.n	800caaa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800caa6:	2300      	movs	r3, #0
 800caa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	3b01      	subs	r3, #1
 800caae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	689a      	ldr	r2, [r3, #8]
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	4013      	ands	r3, r2
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d196      	bne.n	800c9ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3728      	adds	r7, #40	; 0x28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	2000012c 	.word	0x2000012c

0800cad0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af02      	add	r7, sp, #8
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cae4:	d111      	bne.n	800cb0a <SPI_EndRxTransaction+0x3a>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caee:	d004      	beq.n	800cafa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caf8:	d107      	bne.n	800cb0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb08:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2200      	movs	r2, #0
 800cb12:	2180      	movs	r1, #128	; 0x80
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f7ff febd 	bl	800c894 <SPI_WaitFlagStateUntilTimeout>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d007      	beq.n	800cb30 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb24:	f043 0220 	orr.w	r2, r3, #32
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	e023      	b.n	800cb78 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb38:	d11d      	bne.n	800cb76 <SPI_EndRxTransaction+0xa6>
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb42:	d004      	beq.n	800cb4e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb4c:	d113      	bne.n	800cb76 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	f7ff ff22 	bl	800c9a4 <SPI_WaitFifoStateUntilTimeout>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d007      	beq.n	800cb76 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb6a:	f043 0220 	orr.w	r2, r3, #32
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800cb72:	2303      	movs	r3, #3
 800cb74:	e000      	b.n	800cb78 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af02      	add	r7, sp, #8
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7ff ff03 	bl	800c9a4 <SPI_WaitFifoStateUntilTimeout>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d007      	beq.n	800cbb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cba8:	f043 0220 	orr.w	r2, r3, #32
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e027      	b.n	800cc04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	2180      	movs	r1, #128	; 0x80
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f7ff fe68 	bl	800c894 <SPI_WaitFlagStateUntilTimeout>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d007      	beq.n	800cbda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbce:	f043 0220 	orr.w	r2, r3, #32
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	e014      	b.n	800cc04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f7ff fedc 	bl	800c9a4 <SPI_WaitFifoStateUntilTimeout>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d007      	beq.n	800cc02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbf6:	f043 0220 	orr.w	r2, r3, #32
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	e000      	b.n	800cc04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc14:	f7fb fad8 	bl	80081c8 <HAL_GetTick>
 800cc18:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	685a      	ldr	r2, [r3, #4]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f022 0220 	bic.w	r2, r2, #32
 800cc28:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	2164      	movs	r1, #100	; 0x64
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7ff ffa6 	bl	800cb80 <SPI_EndRxTxTransaction>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d005      	beq.n	800cc46 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc3e:	f043 0220 	orr.w	r2, r3, #32
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d115      	bne.n	800cc7a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b04      	cmp	r3, #4
 800cc58:	d107      	bne.n	800cc6a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7ff fc00 	bl	800c468 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800cc68:	e00e      	b.n	800cc88 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7fa fd38 	bl	80076e8 <HAL_SPI_TxRxCpltCallback>
}
 800cc78:	e006      	b.n	800cc88 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7fa fd52 	bl	800772c <HAL_SPI_ErrorCallback>
}
 800cc88:	bf00      	nop
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d101      	bne.n	800cca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e042      	b.n	800cd28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d106      	bne.n	800ccba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7fb f997 	bl	8007fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2224      	movs	r2, #36	; 0x24
 800ccbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f022 0201 	bic.w	r2, r2, #1
 800ccd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d002      	beq.n	800cce0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 feee 	bl	800dabc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 fbef 	bl	800d4c4 <UART_SetConfig>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d101      	bne.n	800ccf0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e01b      	b.n	800cd28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	685a      	ldr	r2, [r3, #4]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	689a      	ldr	r2, [r3, #8]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f042 0201 	orr.w	r2, r2, #1
 800cd1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 ff6d 	bl	800dc00 <UART_CheckIdleState>
 800cd26:	4603      	mov	r3, r0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b08a      	sub	sp, #40	; 0x28
 800cd34:	af02      	add	r7, sp, #8
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	603b      	str	r3, [r7, #0]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd46:	2b20      	cmp	r3, #32
 800cd48:	d17c      	bne.n	800ce44 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <HAL_UART_Transmit+0x26>
 800cd50:	88fb      	ldrh	r3, [r7, #6]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d101      	bne.n	800cd5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	e075      	b.n	800ce46 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2221      	movs	r2, #33	; 0x21
 800cd66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd6a:	f7fb fa2d 	bl	80081c8 <HAL_GetTick>
 800cd6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	88fa      	ldrh	r2, [r7, #6]
 800cd74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	88fa      	ldrh	r2, [r7, #6]
 800cd7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd88:	d108      	bne.n	800cd9c <HAL_UART_Transmit+0x6c>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d104      	bne.n	800cd9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	61bb      	str	r3, [r7, #24]
 800cd9a:	e003      	b.n	800cda4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cda0:	2300      	movs	r3, #0
 800cda2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cda4:	e031      	b.n	800ce0a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2200      	movs	r2, #0
 800cdae:	2180      	movs	r1, #128	; 0x80
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f000 ffcf 	bl	800dd54 <UART_WaitOnFlagUntilTimeout>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d005      	beq.n	800cdc8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2220      	movs	r2, #32
 800cdc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	e03e      	b.n	800ce46 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10b      	bne.n	800cde6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	881a      	ldrh	r2, [r3, #0]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cdda:	b292      	uxth	r2, r2
 800cddc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	3302      	adds	r3, #2
 800cde2:	61bb      	str	r3, [r7, #24]
 800cde4:	e008      	b.n	800cdf8 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	781a      	ldrb	r2, [r3, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	b292      	uxth	r2, r2
 800cdf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	3b01      	subs	r3, #1
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1c7      	bne.n	800cda6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	2140      	movs	r1, #64	; 0x40
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f000 ff97 	bl	800dd54 <UART_WaitOnFlagUntilTimeout>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d005      	beq.n	800ce38 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2220      	movs	r2, #32
 800ce30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ce34:	2303      	movs	r3, #3
 800ce36:	e006      	b.n	800ce46 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2220      	movs	r2, #32
 800ce3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	e000      	b.n	800ce46 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800ce44:	2302      	movs	r3, #2
  }
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3720      	adds	r7, #32
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b0ba      	sub	sp, #232	; 0xe8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	69db      	ldr	r3, [r3, #28]
 800ce5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ce76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ce7a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ce7e:	4013      	ands	r3, r2
 800ce80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ce84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d11b      	bne.n	800cec4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce90:	f003 0320 	and.w	r3, r3, #32
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d015      	beq.n	800cec4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce9c:	f003 0320 	and.w	r3, r3, #32
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d105      	bne.n	800ceb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d009      	beq.n	800cec4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f000 82e3 	beq.w	800d480 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	4798      	blx	r3
      }
      return;
 800cec2:	e2dd      	b.n	800d480 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800cec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 8123 	beq.w	800d114 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cece:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ced2:	4b8d      	ldr	r3, [pc, #564]	; (800d108 <HAL_UART_IRQHandler+0x2b8>)
 800ced4:	4013      	ands	r3, r2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d106      	bne.n	800cee8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ceda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cede:	4b8b      	ldr	r3, [pc, #556]	; (800d10c <HAL_UART_IRQHandler+0x2bc>)
 800cee0:	4013      	ands	r3, r2
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 8116 	beq.w	800d114 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceec:	f003 0301 	and.w	r3, r3, #1
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d011      	beq.n	800cf18 <HAL_UART_IRQHandler+0xc8>
 800cef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00b      	beq.n	800cf18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2201      	movs	r2, #1
 800cf06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf0e:	f043 0201 	orr.w	r2, r3, #1
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf1c:	f003 0302 	and.w	r3, r3, #2
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d011      	beq.n	800cf48 <HAL_UART_IRQHandler+0xf8>
 800cf24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf28:	f003 0301 	and.w	r3, r3, #1
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00b      	beq.n	800cf48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2202      	movs	r2, #2
 800cf36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf3e:	f043 0204 	orr.w	r2, r3, #4
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf4c:	f003 0304 	and.w	r3, r3, #4
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d011      	beq.n	800cf78 <HAL_UART_IRQHandler+0x128>
 800cf54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf58:	f003 0301 	and.w	r3, r3, #1
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00b      	beq.n	800cf78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2204      	movs	r2, #4
 800cf66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf6e:	f043 0202 	orr.w	r2, r3, #2
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cf78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf7c:	f003 0308 	and.w	r3, r3, #8
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d017      	beq.n	800cfb4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf88:	f003 0320 	and.w	r3, r3, #32
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d105      	bne.n	800cf9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cf90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf94:	4b5c      	ldr	r3, [pc, #368]	; (800d108 <HAL_UART_IRQHandler+0x2b8>)
 800cf96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00b      	beq.n	800cfb4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2208      	movs	r2, #8
 800cfa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfaa:	f043 0208 	orr.w	r2, r3, #8
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cfb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d012      	beq.n	800cfe6 <HAL_UART_IRQHandler+0x196>
 800cfc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00c      	beq.n	800cfe6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfdc:	f043 0220 	orr.w	r2, r3, #32
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f000 8249 	beq.w	800d484 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cff6:	f003 0320 	and.w	r3, r3, #32
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d013      	beq.n	800d026 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d002:	f003 0320 	and.w	r3, r3, #32
 800d006:	2b00      	cmp	r3, #0
 800d008:	d105      	bne.n	800d016 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d00a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d00e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d007      	beq.n	800d026 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d003      	beq.n	800d026 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d02c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d03a:	2b40      	cmp	r3, #64	; 0x40
 800d03c:	d005      	beq.n	800d04a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d03e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d042:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d046:	2b00      	cmp	r3, #0
 800d048:	d054      	beq.n	800d0f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fee9 	bl	800de22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d05a:	2b40      	cmp	r3, #64	; 0x40
 800d05c:	d146      	bne.n	800d0ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	3308      	adds	r3, #8
 800d064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d068:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d06c:	e853 3f00 	ldrex	r3, [r3]
 800d070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d07c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3308      	adds	r3, #8
 800d086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d08a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d08e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d09a:	e841 2300 	strex	r3, r2, [r1]
 800d09e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d0a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d1d9      	bne.n	800d05e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d017      	beq.n	800d0e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0ba:	4a15      	ldr	r2, [pc, #84]	; (800d110 <HAL_UART_IRQHandler+0x2c0>)
 800d0bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fc fd96 	bl	8009bf6 <HAL_DMA_Abort_IT>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d019      	beq.n	800d104 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d0de:	4610      	mov	r0, r2
 800d0e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0e2:	e00f      	b.n	800d104 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f7fa ffd3 	bl	8008090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0ea:	e00b      	b.n	800d104 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7fa ffcf 	bl	8008090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0f2:	e007      	b.n	800d104 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7fa ffcb 	bl	8008090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d102:	e1bf      	b.n	800d484 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d104:	bf00      	nop
    return;
 800d106:	e1bd      	b.n	800d484 <HAL_UART_IRQHandler+0x634>
 800d108:	10000001 	.word	0x10000001
 800d10c:	04000120 	.word	0x04000120
 800d110:	0800deef 	.word	0x0800deef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d118:	2b01      	cmp	r3, #1
 800d11a:	f040 8153 	bne.w	800d3c4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d122:	f003 0310 	and.w	r3, r3, #16
 800d126:	2b00      	cmp	r3, #0
 800d128:	f000 814c 	beq.w	800d3c4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d130:	f003 0310 	and.w	r3, r3, #16
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 8145 	beq.w	800d3c4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2210      	movs	r2, #16
 800d140:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d14c:	2b40      	cmp	r3, #64	; 0x40
 800d14e:	f040 80bb 	bne.w	800d2c8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d160:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d164:	2b00      	cmp	r3, #0
 800d166:	f000 818f 	beq.w	800d488 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d170:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d174:	429a      	cmp	r2, r3
 800d176:	f080 8187 	bcs.w	800d488 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f003 0320 	and.w	r3, r3, #32
 800d192:	2b00      	cmp	r3, #0
 800d194:	f040 8087 	bne.w	800d2a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d1a4:	e853 3f00 	ldrex	r3, [r3]
 800d1a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d1ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d1b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d1c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d1c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d1ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d1d2:	e841 2300 	strex	r3, r2, [r1]
 800d1d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d1da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1da      	bne.n	800d198 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3308      	adds	r3, #8
 800d1e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1ec:	e853 3f00 	ldrex	r3, [r3]
 800d1f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d1f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1f4:	f023 0301 	bic.w	r3, r3, #1
 800d1f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	3308      	adds	r3, #8
 800d202:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d206:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d20a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d20e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d212:	e841 2300 	strex	r3, r2, [r1]
 800d216:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1e1      	bne.n	800d1e2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	3308      	adds	r3, #8
 800d224:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d228:	e853 3f00 	ldrex	r3, [r3]
 800d22c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d22e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	3308      	adds	r3, #8
 800d23e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d242:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d244:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d246:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d248:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d24a:	e841 2300 	strex	r3, r2, [r1]
 800d24e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1e3      	bne.n	800d21e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2220      	movs	r2, #32
 800d25a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d26c:	e853 3f00 	ldrex	r3, [r3]
 800d270:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d274:	f023 0310 	bic.w	r3, r3, #16
 800d278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	461a      	mov	r2, r3
 800d282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d286:	65bb      	str	r3, [r7, #88]	; 0x58
 800d288:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d28a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d28c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d28e:	e841 2300 	strex	r3, r2, [r1]
 800d292:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1e4      	bne.n	800d264 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fc fc4c 	bl	8009b3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2202      	movs	r2, #2
 800d2aa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 f8f3 	bl	800d4ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d2c6:	e0df      	b.n	800d488 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 80d1 	beq.w	800d48c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800d2ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 80cc 	beq.w	800d48c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	e853 3f00 	ldrex	r3, [r3]
 800d300:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	461a      	mov	r2, r3
 800d312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d316:	647b      	str	r3, [r7, #68]	; 0x44
 800d318:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d31a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d31c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d31e:	e841 2300 	strex	r3, r2, [r1]
 800d322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1e4      	bne.n	800d2f4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	3308      	adds	r3, #8
 800d330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d334:	e853 3f00 	ldrex	r3, [r3]
 800d338:	623b      	str	r3, [r7, #32]
   return(result);
 800d33a:	6a3b      	ldr	r3, [r7, #32]
 800d33c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d340:	f023 0301 	bic.w	r3, r3, #1
 800d344:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	3308      	adds	r3, #8
 800d34e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d352:	633a      	str	r2, [r7, #48]	; 0x30
 800d354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d35a:	e841 2300 	strex	r3, r2, [r1]
 800d35e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1e1      	bne.n	800d32a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2220      	movs	r2, #32
 800d36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	e853 3f00 	ldrex	r3, [r3]
 800d386:	60fb      	str	r3, [r7, #12]
   return(result);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f023 0310 	bic.w	r3, r3, #16
 800d38e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	461a      	mov	r2, r3
 800d398:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d39c:	61fb      	str	r3, [r7, #28]
 800d39e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a0:	69b9      	ldr	r1, [r7, #24]
 800d3a2:	69fa      	ldr	r2, [r7, #28]
 800d3a4:	e841 2300 	strex	r3, r2, [r1]
 800d3a8:	617b      	str	r3, [r7, #20]
   return(result);
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1e4      	bne.n	800d37a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2202      	movs	r2, #2
 800d3b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f875 	bl	800d4ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3c2:	e063      	b.n	800d48c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00e      	beq.n	800d3ee <HAL_UART_IRQHandler+0x59e>
 800d3d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d008      	beq.n	800d3ee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d3e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 fdc2 	bl	800df70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3ec:	e051      	b.n	800d492 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d3ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d014      	beq.n	800d424 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d3fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d402:	2b00      	cmp	r3, #0
 800d404:	d105      	bne.n	800d412 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d40a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d008      	beq.n	800d424 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d416:	2b00      	cmp	r3, #0
 800d418:	d03a      	beq.n	800d490 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	4798      	blx	r3
    }
    return;
 800d422:	e035      	b.n	800d490 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d009      	beq.n	800d444 <HAL_UART_IRQHandler+0x5f4>
 800d430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d003      	beq.n	800d444 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fd6c 	bl	800df1a <UART_EndTransmit_IT>
    return;
 800d442:	e026      	b.n	800d492 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d009      	beq.n	800d464 <HAL_UART_IRQHandler+0x614>
 800d450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d454:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d003      	beq.n	800d464 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fd9b 	bl	800df98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d462:	e016      	b.n	800d492 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d010      	beq.n	800d492 <HAL_UART_IRQHandler+0x642>
 800d470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d474:	2b00      	cmp	r3, #0
 800d476:	da0c      	bge.n	800d492 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fd83 	bl	800df84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d47e:	e008      	b.n	800d492 <HAL_UART_IRQHandler+0x642>
      return;
 800d480:	bf00      	nop
 800d482:	e006      	b.n	800d492 <HAL_UART_IRQHandler+0x642>
    return;
 800d484:	bf00      	nop
 800d486:	e004      	b.n	800d492 <HAL_UART_IRQHandler+0x642>
      return;
 800d488:	bf00      	nop
 800d48a:	e002      	b.n	800d492 <HAL_UART_IRQHandler+0x642>
      return;
 800d48c:	bf00      	nop
 800d48e:	e000      	b.n	800d492 <HAL_UART_IRQHandler+0x642>
    return;
 800d490:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800d492:	37e8      	adds	r7, #232	; 0xe8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d4a0:	bf00      	nop
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4c8:	b08c      	sub	sp, #48	; 0x30
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	689a      	ldr	r2, [r3, #8]
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	431a      	orrs	r2, r3
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	695b      	ldr	r3, [r3, #20]
 800d4e2:	431a      	orrs	r2, r3
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	69db      	ldr	r3, [r3, #28]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	4baa      	ldr	r3, [pc, #680]	; (800d79c <UART_SetConfig+0x2d8>)
 800d4f4:	4013      	ands	r3, r2
 800d4f6:	697a      	ldr	r2, [r7, #20]
 800d4f8:	6812      	ldr	r2, [r2, #0]
 800d4fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4fc:	430b      	orrs	r3, r1
 800d4fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	68da      	ldr	r2, [r3, #12]
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	430a      	orrs	r2, r1
 800d514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	699b      	ldr	r3, [r3, #24]
 800d51a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a9f      	ldr	r2, [pc, #636]	; (800d7a0 <UART_SetConfig+0x2dc>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d004      	beq.n	800d530 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	6a1b      	ldr	r3, [r3, #32]
 800d52a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d52c:	4313      	orrs	r3, r2
 800d52e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d53a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	6812      	ldr	r2, [r2, #0]
 800d542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d544:	430b      	orrs	r3, r1
 800d546:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54e:	f023 010f 	bic.w	r1, r3, #15
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	430a      	orrs	r2, r1
 800d55c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a90      	ldr	r2, [pc, #576]	; (800d7a4 <UART_SetConfig+0x2e0>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d125      	bne.n	800d5b4 <UART_SetConfig+0xf0>
 800d568:	4b8f      	ldr	r3, [pc, #572]	; (800d7a8 <UART_SetConfig+0x2e4>)
 800d56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d56e:	f003 0303 	and.w	r3, r3, #3
 800d572:	2b03      	cmp	r3, #3
 800d574:	d81a      	bhi.n	800d5ac <UART_SetConfig+0xe8>
 800d576:	a201      	add	r2, pc, #4	; (adr r2, 800d57c <UART_SetConfig+0xb8>)
 800d578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d57c:	0800d58d 	.word	0x0800d58d
 800d580:	0800d59d 	.word	0x0800d59d
 800d584:	0800d595 	.word	0x0800d595
 800d588:	0800d5a5 	.word	0x0800d5a5
 800d58c:	2301      	movs	r3, #1
 800d58e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d592:	e116      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d594:	2302      	movs	r3, #2
 800d596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d59a:	e112      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d59c:	2304      	movs	r3, #4
 800d59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d5a2:	e10e      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d5a4:	2308      	movs	r3, #8
 800d5a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d5aa:	e10a      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d5ac:	2310      	movs	r3, #16
 800d5ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d5b2:	e106      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a7c      	ldr	r2, [pc, #496]	; (800d7ac <UART_SetConfig+0x2e8>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d138      	bne.n	800d630 <UART_SetConfig+0x16c>
 800d5be:	4b7a      	ldr	r3, [pc, #488]	; (800d7a8 <UART_SetConfig+0x2e4>)
 800d5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5c4:	f003 030c 	and.w	r3, r3, #12
 800d5c8:	2b0c      	cmp	r3, #12
 800d5ca:	d82d      	bhi.n	800d628 <UART_SetConfig+0x164>
 800d5cc:	a201      	add	r2, pc, #4	; (adr r2, 800d5d4 <UART_SetConfig+0x110>)
 800d5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d2:	bf00      	nop
 800d5d4:	0800d609 	.word	0x0800d609
 800d5d8:	0800d629 	.word	0x0800d629
 800d5dc:	0800d629 	.word	0x0800d629
 800d5e0:	0800d629 	.word	0x0800d629
 800d5e4:	0800d619 	.word	0x0800d619
 800d5e8:	0800d629 	.word	0x0800d629
 800d5ec:	0800d629 	.word	0x0800d629
 800d5f0:	0800d629 	.word	0x0800d629
 800d5f4:	0800d611 	.word	0x0800d611
 800d5f8:	0800d629 	.word	0x0800d629
 800d5fc:	0800d629 	.word	0x0800d629
 800d600:	0800d629 	.word	0x0800d629
 800d604:	0800d621 	.word	0x0800d621
 800d608:	2300      	movs	r3, #0
 800d60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d60e:	e0d8      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d610:	2302      	movs	r3, #2
 800d612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d616:	e0d4      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d618:	2304      	movs	r3, #4
 800d61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d61e:	e0d0      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d620:	2308      	movs	r3, #8
 800d622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d626:	e0cc      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d628:	2310      	movs	r3, #16
 800d62a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d62e:	e0c8      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a5e      	ldr	r2, [pc, #376]	; (800d7b0 <UART_SetConfig+0x2ec>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d125      	bne.n	800d686 <UART_SetConfig+0x1c2>
 800d63a:	4b5b      	ldr	r3, [pc, #364]	; (800d7a8 <UART_SetConfig+0x2e4>)
 800d63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d640:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d644:	2b30      	cmp	r3, #48	; 0x30
 800d646:	d016      	beq.n	800d676 <UART_SetConfig+0x1b2>
 800d648:	2b30      	cmp	r3, #48	; 0x30
 800d64a:	d818      	bhi.n	800d67e <UART_SetConfig+0x1ba>
 800d64c:	2b20      	cmp	r3, #32
 800d64e:	d00a      	beq.n	800d666 <UART_SetConfig+0x1a2>
 800d650:	2b20      	cmp	r3, #32
 800d652:	d814      	bhi.n	800d67e <UART_SetConfig+0x1ba>
 800d654:	2b00      	cmp	r3, #0
 800d656:	d002      	beq.n	800d65e <UART_SetConfig+0x19a>
 800d658:	2b10      	cmp	r3, #16
 800d65a:	d008      	beq.n	800d66e <UART_SetConfig+0x1aa>
 800d65c:	e00f      	b.n	800d67e <UART_SetConfig+0x1ba>
 800d65e:	2300      	movs	r3, #0
 800d660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d664:	e0ad      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d666:	2302      	movs	r3, #2
 800d668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d66c:	e0a9      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d66e:	2304      	movs	r3, #4
 800d670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d674:	e0a5      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d676:	2308      	movs	r3, #8
 800d678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d67c:	e0a1      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d67e:	2310      	movs	r3, #16
 800d680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d684:	e09d      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a4a      	ldr	r2, [pc, #296]	; (800d7b4 <UART_SetConfig+0x2f0>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d125      	bne.n	800d6dc <UART_SetConfig+0x218>
 800d690:	4b45      	ldr	r3, [pc, #276]	; (800d7a8 <UART_SetConfig+0x2e4>)
 800d692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d696:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d69a:	2bc0      	cmp	r3, #192	; 0xc0
 800d69c:	d016      	beq.n	800d6cc <UART_SetConfig+0x208>
 800d69e:	2bc0      	cmp	r3, #192	; 0xc0
 800d6a0:	d818      	bhi.n	800d6d4 <UART_SetConfig+0x210>
 800d6a2:	2b80      	cmp	r3, #128	; 0x80
 800d6a4:	d00a      	beq.n	800d6bc <UART_SetConfig+0x1f8>
 800d6a6:	2b80      	cmp	r3, #128	; 0x80
 800d6a8:	d814      	bhi.n	800d6d4 <UART_SetConfig+0x210>
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d002      	beq.n	800d6b4 <UART_SetConfig+0x1f0>
 800d6ae:	2b40      	cmp	r3, #64	; 0x40
 800d6b0:	d008      	beq.n	800d6c4 <UART_SetConfig+0x200>
 800d6b2:	e00f      	b.n	800d6d4 <UART_SetConfig+0x210>
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6ba:	e082      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d6bc:	2302      	movs	r3, #2
 800d6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6c2:	e07e      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d6c4:	2304      	movs	r3, #4
 800d6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6ca:	e07a      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d6cc:	2308      	movs	r3, #8
 800d6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6d2:	e076      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d6d4:	2310      	movs	r3, #16
 800d6d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6da:	e072      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a35      	ldr	r2, [pc, #212]	; (800d7b8 <UART_SetConfig+0x2f4>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d12a      	bne.n	800d73c <UART_SetConfig+0x278>
 800d6e6:	4b30      	ldr	r3, [pc, #192]	; (800d7a8 <UART_SetConfig+0x2e4>)
 800d6e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d6f4:	d01a      	beq.n	800d72c <UART_SetConfig+0x268>
 800d6f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d6fa:	d81b      	bhi.n	800d734 <UART_SetConfig+0x270>
 800d6fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d700:	d00c      	beq.n	800d71c <UART_SetConfig+0x258>
 800d702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d706:	d815      	bhi.n	800d734 <UART_SetConfig+0x270>
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d003      	beq.n	800d714 <UART_SetConfig+0x250>
 800d70c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d710:	d008      	beq.n	800d724 <UART_SetConfig+0x260>
 800d712:	e00f      	b.n	800d734 <UART_SetConfig+0x270>
 800d714:	2300      	movs	r3, #0
 800d716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d71a:	e052      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d71c:	2302      	movs	r3, #2
 800d71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d722:	e04e      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d724:	2304      	movs	r3, #4
 800d726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d72a:	e04a      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d72c:	2308      	movs	r3, #8
 800d72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d732:	e046      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d734:	2310      	movs	r3, #16
 800d736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d73a:	e042      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a17      	ldr	r2, [pc, #92]	; (800d7a0 <UART_SetConfig+0x2dc>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d13a      	bne.n	800d7bc <UART_SetConfig+0x2f8>
 800d746:	4b18      	ldr	r3, [pc, #96]	; (800d7a8 <UART_SetConfig+0x2e4>)
 800d748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d74c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d754:	d01a      	beq.n	800d78c <UART_SetConfig+0x2c8>
 800d756:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d75a:	d81b      	bhi.n	800d794 <UART_SetConfig+0x2d0>
 800d75c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d760:	d00c      	beq.n	800d77c <UART_SetConfig+0x2b8>
 800d762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d766:	d815      	bhi.n	800d794 <UART_SetConfig+0x2d0>
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d003      	beq.n	800d774 <UART_SetConfig+0x2b0>
 800d76c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d770:	d008      	beq.n	800d784 <UART_SetConfig+0x2c0>
 800d772:	e00f      	b.n	800d794 <UART_SetConfig+0x2d0>
 800d774:	2300      	movs	r3, #0
 800d776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d77a:	e022      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d77c:	2302      	movs	r3, #2
 800d77e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d782:	e01e      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d784:	2304      	movs	r3, #4
 800d786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d78a:	e01a      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d78c:	2308      	movs	r3, #8
 800d78e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d792:	e016      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d794:	2310      	movs	r3, #16
 800d796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d79a:	e012      	b.n	800d7c2 <UART_SetConfig+0x2fe>
 800d79c:	cfff69f3 	.word	0xcfff69f3
 800d7a0:	40008000 	.word	0x40008000
 800d7a4:	40013800 	.word	0x40013800
 800d7a8:	40021000 	.word	0x40021000
 800d7ac:	40004400 	.word	0x40004400
 800d7b0:	40004800 	.word	0x40004800
 800d7b4:	40004c00 	.word	0x40004c00
 800d7b8:	40005000 	.word	0x40005000
 800d7bc:	2310      	movs	r3, #16
 800d7be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4aae      	ldr	r2, [pc, #696]	; (800da80 <UART_SetConfig+0x5bc>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	f040 8097 	bne.w	800d8fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d7ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7d2:	2b08      	cmp	r3, #8
 800d7d4:	d823      	bhi.n	800d81e <UART_SetConfig+0x35a>
 800d7d6:	a201      	add	r2, pc, #4	; (adr r2, 800d7dc <UART_SetConfig+0x318>)
 800d7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7dc:	0800d801 	.word	0x0800d801
 800d7e0:	0800d81f 	.word	0x0800d81f
 800d7e4:	0800d809 	.word	0x0800d809
 800d7e8:	0800d81f 	.word	0x0800d81f
 800d7ec:	0800d80f 	.word	0x0800d80f
 800d7f0:	0800d81f 	.word	0x0800d81f
 800d7f4:	0800d81f 	.word	0x0800d81f
 800d7f8:	0800d81f 	.word	0x0800d81f
 800d7fc:	0800d817 	.word	0x0800d817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d800:	f7fd fc64 	bl	800b0cc <HAL_RCC_GetPCLK1Freq>
 800d804:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d806:	e010      	b.n	800d82a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d808:	4b9e      	ldr	r3, [pc, #632]	; (800da84 <UART_SetConfig+0x5c0>)
 800d80a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d80c:	e00d      	b.n	800d82a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d80e:	f7fd fbc5 	bl	800af9c <HAL_RCC_GetSysClockFreq>
 800d812:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d814:	e009      	b.n	800d82a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d81a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d81c:	e005      	b.n	800d82a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d81e:	2300      	movs	r3, #0
 800d820:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d822:	2301      	movs	r3, #1
 800d824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d828:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f000 8130 	beq.w	800da92 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	4a94      	ldr	r2, [pc, #592]	; (800da88 <UART_SetConfig+0x5c4>)
 800d838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d83c:	461a      	mov	r2, r3
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	fbb3 f3f2 	udiv	r3, r3, r2
 800d844:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	685a      	ldr	r2, [r3, #4]
 800d84a:	4613      	mov	r3, r2
 800d84c:	005b      	lsls	r3, r3, #1
 800d84e:	4413      	add	r3, r2
 800d850:	69ba      	ldr	r2, [r7, #24]
 800d852:	429a      	cmp	r2, r3
 800d854:	d305      	bcc.n	800d862 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d85c:	69ba      	ldr	r2, [r7, #24]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d903      	bls.n	800d86a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d868:	e113      	b.n	800da92 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	2200      	movs	r2, #0
 800d86e:	60bb      	str	r3, [r7, #8]
 800d870:	60fa      	str	r2, [r7, #12]
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d876:	4a84      	ldr	r2, [pc, #528]	; (800da88 <UART_SetConfig+0x5c4>)
 800d878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	2200      	movs	r2, #0
 800d880:	603b      	str	r3, [r7, #0]
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d888:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d88c:	f7f3 f95e 	bl	8000b4c <__aeabi_uldivmod>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	4610      	mov	r0, r2
 800d896:	4619      	mov	r1, r3
 800d898:	f04f 0200 	mov.w	r2, #0
 800d89c:	f04f 0300 	mov.w	r3, #0
 800d8a0:	020b      	lsls	r3, r1, #8
 800d8a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d8a6:	0202      	lsls	r2, r0, #8
 800d8a8:	6979      	ldr	r1, [r7, #20]
 800d8aa:	6849      	ldr	r1, [r1, #4]
 800d8ac:	0849      	lsrs	r1, r1, #1
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	460c      	mov	r4, r1
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	eb12 0804 	adds.w	r8, r2, r4
 800d8b8:	eb43 0905 	adc.w	r9, r3, r5
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	469a      	mov	sl, r3
 800d8c4:	4693      	mov	fp, r2
 800d8c6:	4652      	mov	r2, sl
 800d8c8:	465b      	mov	r3, fp
 800d8ca:	4640      	mov	r0, r8
 800d8cc:	4649      	mov	r1, r9
 800d8ce:	f7f3 f93d 	bl	8000b4c <__aeabi_uldivmod>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d8da:	6a3b      	ldr	r3, [r7, #32]
 800d8dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8e0:	d308      	bcc.n	800d8f4 <UART_SetConfig+0x430>
 800d8e2:	6a3b      	ldr	r3, [r7, #32]
 800d8e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8e8:	d204      	bcs.n	800d8f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	6a3a      	ldr	r2, [r7, #32]
 800d8f0:	60da      	str	r2, [r3, #12]
 800d8f2:	e0ce      	b.n	800da92 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d8fa:	e0ca      	b.n	800da92 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	69db      	ldr	r3, [r3, #28]
 800d900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d904:	d166      	bne.n	800d9d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d906:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d90a:	2b08      	cmp	r3, #8
 800d90c:	d827      	bhi.n	800d95e <UART_SetConfig+0x49a>
 800d90e:	a201      	add	r2, pc, #4	; (adr r2, 800d914 <UART_SetConfig+0x450>)
 800d910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d914:	0800d939 	.word	0x0800d939
 800d918:	0800d941 	.word	0x0800d941
 800d91c:	0800d949 	.word	0x0800d949
 800d920:	0800d95f 	.word	0x0800d95f
 800d924:	0800d94f 	.word	0x0800d94f
 800d928:	0800d95f 	.word	0x0800d95f
 800d92c:	0800d95f 	.word	0x0800d95f
 800d930:	0800d95f 	.word	0x0800d95f
 800d934:	0800d957 	.word	0x0800d957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d938:	f7fd fbc8 	bl	800b0cc <HAL_RCC_GetPCLK1Freq>
 800d93c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d93e:	e014      	b.n	800d96a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d940:	f7fd fbda 	bl	800b0f8 <HAL_RCC_GetPCLK2Freq>
 800d944:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d946:	e010      	b.n	800d96a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d948:	4b4e      	ldr	r3, [pc, #312]	; (800da84 <UART_SetConfig+0x5c0>)
 800d94a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d94c:	e00d      	b.n	800d96a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d94e:	f7fd fb25 	bl	800af9c <HAL_RCC_GetSysClockFreq>
 800d952:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d954:	e009      	b.n	800d96a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d95a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d95c:	e005      	b.n	800d96a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d95e:	2300      	movs	r3, #0
 800d960:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 8090 	beq.w	800da92 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d976:	4a44      	ldr	r2, [pc, #272]	; (800da88 <UART_SetConfig+0x5c4>)
 800d978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d97c:	461a      	mov	r2, r3
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	fbb3 f3f2 	udiv	r3, r3, r2
 800d984:	005a      	lsls	r2, r3, #1
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	085b      	lsrs	r3, r3, #1
 800d98c:	441a      	add	r2, r3
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	fbb2 f3f3 	udiv	r3, r2, r3
 800d996:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d998:	6a3b      	ldr	r3, [r7, #32]
 800d99a:	2b0f      	cmp	r3, #15
 800d99c:	d916      	bls.n	800d9cc <UART_SetConfig+0x508>
 800d99e:	6a3b      	ldr	r3, [r7, #32]
 800d9a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9a4:	d212      	bcs.n	800d9cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d9a6:	6a3b      	ldr	r3, [r7, #32]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	f023 030f 	bic.w	r3, r3, #15
 800d9ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d9b0:	6a3b      	ldr	r3, [r7, #32]
 800d9b2:	085b      	lsrs	r3, r3, #1
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	f003 0307 	and.w	r3, r3, #7
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	8bfb      	ldrh	r3, [r7, #30]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	8bfa      	ldrh	r2, [r7, #30]
 800d9c8:	60da      	str	r2, [r3, #12]
 800d9ca:	e062      	b.n	800da92 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d9d2:	e05e      	b.n	800da92 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d9d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9d8:	2b08      	cmp	r3, #8
 800d9da:	d828      	bhi.n	800da2e <UART_SetConfig+0x56a>
 800d9dc:	a201      	add	r2, pc, #4	; (adr r2, 800d9e4 <UART_SetConfig+0x520>)
 800d9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e2:	bf00      	nop
 800d9e4:	0800da09 	.word	0x0800da09
 800d9e8:	0800da11 	.word	0x0800da11
 800d9ec:	0800da19 	.word	0x0800da19
 800d9f0:	0800da2f 	.word	0x0800da2f
 800d9f4:	0800da1f 	.word	0x0800da1f
 800d9f8:	0800da2f 	.word	0x0800da2f
 800d9fc:	0800da2f 	.word	0x0800da2f
 800da00:	0800da2f 	.word	0x0800da2f
 800da04:	0800da27 	.word	0x0800da27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da08:	f7fd fb60 	bl	800b0cc <HAL_RCC_GetPCLK1Freq>
 800da0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800da0e:	e014      	b.n	800da3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da10:	f7fd fb72 	bl	800b0f8 <HAL_RCC_GetPCLK2Freq>
 800da14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800da16:	e010      	b.n	800da3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da18:	4b1a      	ldr	r3, [pc, #104]	; (800da84 <UART_SetConfig+0x5c0>)
 800da1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800da1c:	e00d      	b.n	800da3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da1e:	f7fd fabd 	bl	800af9c <HAL_RCC_GetSysClockFreq>
 800da22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800da24:	e009      	b.n	800da3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800da2c:	e005      	b.n	800da3a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800da2e:	2300      	movs	r3, #0
 800da30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800da38:	bf00      	nop
    }

    if (pclk != 0U)
 800da3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d028      	beq.n	800da92 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da44:	4a10      	ldr	r2, [pc, #64]	; (800da88 <UART_SetConfig+0x5c4>)
 800da46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da4a:	461a      	mov	r2, r3
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	085b      	lsrs	r3, r3, #1
 800da58:	441a      	add	r2, r3
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da62:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	2b0f      	cmp	r3, #15
 800da68:	d910      	bls.n	800da8c <UART_SetConfig+0x5c8>
 800da6a:	6a3b      	ldr	r3, [r7, #32]
 800da6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da70:	d20c      	bcs.n	800da8c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800da72:	6a3b      	ldr	r3, [r7, #32]
 800da74:	b29a      	uxth	r2, r3
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	60da      	str	r2, [r3, #12]
 800da7c:	e009      	b.n	800da92 <UART_SetConfig+0x5ce>
 800da7e:	bf00      	nop
 800da80:	40008000 	.word	0x40008000
 800da84:	00f42400 	.word	0x00f42400
 800da88:	0801c330 	.word	0x0801c330
      }
      else
      {
        ret = HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	2201      	movs	r2, #1
 800da96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	2200      	movs	r2, #0
 800daa6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2200      	movs	r2, #0
 800daac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800daae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3730      	adds	r7, #48	; 0x30
 800dab6:	46bd      	mov	sp, r7
 800dab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dabc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac8:	f003 0308 	and.w	r3, r3, #8
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00a      	beq.n	800dae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	430a      	orrs	r2, r1
 800dae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daea:	f003 0301 	and.w	r3, r3, #1
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00a      	beq.n	800db08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	430a      	orrs	r2, r1
 800db06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0c:	f003 0302 	and.w	r3, r3, #2
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00a      	beq.n	800db2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	430a      	orrs	r2, r1
 800db28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db2e:	f003 0304 	and.w	r3, r3, #4
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00a      	beq.n	800db4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	430a      	orrs	r2, r1
 800db4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db50:	f003 0310 	and.w	r3, r3, #16
 800db54:	2b00      	cmp	r3, #0
 800db56:	d00a      	beq.n	800db6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	430a      	orrs	r2, r1
 800db6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db72:	f003 0320 	and.w	r3, r3, #32
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00a      	beq.n	800db90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	430a      	orrs	r2, r1
 800db8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d01a      	beq.n	800dbd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbba:	d10a      	bne.n	800dbd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	430a      	orrs	r2, r1
 800dbd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	430a      	orrs	r2, r1
 800dbf2:	605a      	str	r2, [r3, #4]
  }
}
 800dbf4:	bf00      	nop
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b098      	sub	sp, #96	; 0x60
 800dc04:	af02      	add	r7, sp, #8
 800dc06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc10:	f7fa fada 	bl	80081c8 <HAL_GetTick>
 800dc14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f003 0308 	and.w	r3, r3, #8
 800dc20:	2b08      	cmp	r3, #8
 800dc22:	d12f      	bne.n	800dc84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 f88e 	bl	800dd54 <UART_WaitOnFlagUntilTimeout>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d022      	beq.n	800dc84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc46:	e853 3f00 	ldrex	r3, [r3]
 800dc4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc52:	653b      	str	r3, [r7, #80]	; 0x50
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	461a      	mov	r2, r3
 800dc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc5c:	647b      	str	r3, [r7, #68]	; 0x44
 800dc5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc64:	e841 2300 	strex	r3, r2, [r1]
 800dc68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1e6      	bne.n	800dc3e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2220      	movs	r2, #32
 800dc74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc80:	2303      	movs	r3, #3
 800dc82:	e063      	b.n	800dd4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f003 0304 	and.w	r3, r3, #4
 800dc8e:	2b04      	cmp	r3, #4
 800dc90:	d149      	bne.n	800dd26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 f857 	bl	800dd54 <UART_WaitOnFlagUntilTimeout>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d03c      	beq.n	800dd26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb4:	e853 3f00 	ldrex	r3, [r3]
 800dcb8:	623b      	str	r3, [r7, #32]
   return(result);
 800dcba:	6a3b      	ldr	r3, [r7, #32]
 800dcbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dcc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcca:	633b      	str	r3, [r7, #48]	; 0x30
 800dccc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcd2:	e841 2300 	strex	r3, r2, [r1]
 800dcd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1e6      	bne.n	800dcac <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3308      	adds	r3, #8
 800dce4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	e853 3f00 	ldrex	r3, [r3]
 800dcec:	60fb      	str	r3, [r7, #12]
   return(result);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f023 0301 	bic.w	r3, r3, #1
 800dcf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	3308      	adds	r3, #8
 800dcfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcfe:	61fa      	str	r2, [r7, #28]
 800dd00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd02:	69b9      	ldr	r1, [r7, #24]
 800dd04:	69fa      	ldr	r2, [r7, #28]
 800dd06:	e841 2300 	strex	r3, r2, [r1]
 800dd0a:	617b      	str	r3, [r7, #20]
   return(result);
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d1e5      	bne.n	800dcde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2220      	movs	r2, #32
 800dd16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd22:	2303      	movs	r3, #3
 800dd24:	e012      	b.n	800dd4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2220      	movs	r2, #32
 800dd2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2220      	movs	r2, #32
 800dd32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dd4a:	2300      	movs	r3, #0
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3758      	adds	r7, #88	; 0x58
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	603b      	str	r3, [r7, #0]
 800dd60:	4613      	mov	r3, r2
 800dd62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd64:	e049      	b.n	800ddfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd6c:	d045      	beq.n	800ddfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd6e:	f7fa fa2b 	bl	80081c8 <HAL_GetTick>
 800dd72:	4602      	mov	r2, r0
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	69ba      	ldr	r2, [r7, #24]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d302      	bcc.n	800dd84 <UART_WaitOnFlagUntilTimeout+0x30>
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d101      	bne.n	800dd88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dd84:	2303      	movs	r3, #3
 800dd86:	e048      	b.n	800de1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f003 0304 	and.w	r3, r3, #4
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d031      	beq.n	800ddfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	69db      	ldr	r3, [r3, #28]
 800dd9c:	f003 0308 	and.w	r3, r3, #8
 800dda0:	2b08      	cmp	r3, #8
 800dda2:	d110      	bne.n	800ddc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2208      	movs	r2, #8
 800ddaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f000 f838 	bl	800de22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2208      	movs	r2, #8
 800ddb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	e029      	b.n	800de1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	69db      	ldr	r3, [r3, #28]
 800ddcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ddd4:	d111      	bne.n	800ddfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ddde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f000 f81e 	bl	800de22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2220      	movs	r2, #32
 800ddea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	e00f      	b.n	800de1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	69da      	ldr	r2, [r3, #28]
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	4013      	ands	r3, r2
 800de04:	68ba      	ldr	r2, [r7, #8]
 800de06:	429a      	cmp	r2, r3
 800de08:	bf0c      	ite	eq
 800de0a:	2301      	moveq	r3, #1
 800de0c:	2300      	movne	r3, #0
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	461a      	mov	r2, r3
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	429a      	cmp	r2, r3
 800de16:	d0a6      	beq.n	800dd66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}

0800de22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800de22:	b480      	push	{r7}
 800de24:	b095      	sub	sp, #84	; 0x54
 800de26:	af00      	add	r7, sp, #0
 800de28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de32:	e853 3f00 	ldrex	r3, [r3]
 800de36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800de38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	461a      	mov	r2, r3
 800de46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de48:	643b      	str	r3, [r7, #64]	; 0x40
 800de4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de50:	e841 2300 	strex	r3, r2, [r1]
 800de54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1e6      	bne.n	800de2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3308      	adds	r3, #8
 800de62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	e853 3f00 	ldrex	r3, [r3]
 800de6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de72:	f023 0301 	bic.w	r3, r3, #1
 800de76:	64bb      	str	r3, [r7, #72]	; 0x48
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	3308      	adds	r3, #8
 800de7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de80:	62fa      	str	r2, [r7, #44]	; 0x2c
 800de82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de88:	e841 2300 	strex	r3, r2, [r1]
 800de8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1e3      	bne.n	800de5c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d118      	bne.n	800dece <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	e853 3f00 	ldrex	r3, [r3]
 800dea8:	60bb      	str	r3, [r7, #8]
   return(result);
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	f023 0310 	bic.w	r3, r3, #16
 800deb0:	647b      	str	r3, [r7, #68]	; 0x44
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	461a      	mov	r2, r3
 800deb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800deba:	61bb      	str	r3, [r7, #24]
 800debc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debe:	6979      	ldr	r1, [r7, #20]
 800dec0:	69ba      	ldr	r2, [r7, #24]
 800dec2:	e841 2300 	strex	r3, r2, [r1]
 800dec6:	613b      	str	r3, [r7, #16]
   return(result);
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1e6      	bne.n	800de9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2220      	movs	r2, #32
 800ded2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2200      	movs	r2, #0
 800deda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800dee2:	bf00      	nop
 800dee4:	3754      	adds	r7, #84	; 0x54
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800deee:	b580      	push	{r7, lr}
 800def0:	b084      	sub	sp, #16
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800defa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2200      	movs	r2, #0
 800df00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f7fa f8bf 	bl	8008090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df12:	bf00      	nop
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800df1a:	b580      	push	{r7, lr}
 800df1c:	b088      	sub	sp, #32
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	e853 3f00 	ldrex	r3, [r3]
 800df2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df36:	61fb      	str	r3, [r7, #28]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	461a      	mov	r2, r3
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	61bb      	str	r3, [r7, #24]
 800df42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df44:	6979      	ldr	r1, [r7, #20]
 800df46:	69ba      	ldr	r2, [r7, #24]
 800df48:	e841 2300 	strex	r3, r2, [r1]
 800df4c:	613b      	str	r3, [r7, #16]
   return(result);
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1e6      	bne.n	800df22 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2220      	movs	r2, #32
 800df58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f7ff fa98 	bl	800d498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df68:	bf00      	nop
 800df6a:	3720      	adds	r7, #32
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800df78:	bf00      	nop
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800df8c:	bf00      	nop
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dfa0:	bf00      	nop
 800dfa2:	370c      	adds	r7, #12
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d002      	beq.n	800dfc2 <fs_open+0x16>
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d102      	bne.n	800dfc8 <fs_open+0x1c>
    return ERR_ARG;
 800dfc2:	f06f 030f 	mvn.w	r3, #15
 800dfc6:	e028      	b.n	800e01a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800dfc8:	4b16      	ldr	r3, [pc, #88]	; (800e024 <fs_open+0x78>)
 800dfca:	60fb      	str	r3, [r7, #12]
 800dfcc:	e020      	b.n	800e010 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	6838      	ldr	r0, [r7, #0]
 800dfd6:	f7f2 f913 	bl	8000200 <strcmp>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d114      	bne.n	800e00a <fs_open+0x5e>
      file->data = (const char *)f->data;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	689a      	ldr	r2, [r3, #8]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	68da      	ldr	r2, [r3, #12]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	68da      	ldr	r2, [r3, #12]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	7c1a      	ldrb	r2, [r3, #16]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800e006:	2300      	movs	r3, #0
 800e008:	e007      	b.n	800e01a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	60fb      	str	r3, [r7, #12]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1db      	bne.n	800dfce <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800e016:	f06f 0305 	mvn.w	r3, #5
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	0801d110 	.word	0x0801d110

0800e028 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800e030:	bf00      	nop
 800e032:	370c      	adds	r7, #12
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	685a      	ldr	r2, [r3, #4]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	1ad3      	subs	r3, r2, r3
}
 800e04e:	4618      	mov	r0, r3
 800e050:	370c      	adds	r7, #12
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr
	...

0800e05c <http_add_connection>:
    running out of memory */
static struct http_state *http_connections;

static void
http_add_connection(struct http_state *hs)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  /* add the connection to the list */
  hs->next = http_connections;
 800e064:	4b06      	ldr	r3, [pc, #24]	; (800e080 <http_add_connection+0x24>)
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	601a      	str	r2, [r3, #0]
  http_connections = hs;
 800e06c:	4a04      	ldr	r2, [pc, #16]	; (800e080 <http_add_connection+0x24>)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6013      	str	r3, [r2, #0]
}
 800e072:	bf00      	nop
 800e074:	370c      	adds	r7, #12
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	2000776c 	.word	0x2000776c

0800e084 <http_remove_connection>:

static void
http_remove_connection(struct http_state *hs)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  /* take the connection off the list */
  if (http_connections) {
 800e08c:	4b14      	ldr	r3, [pc, #80]	; (800e0e0 <http_remove_connection+0x5c>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d01f      	beq.n	800e0d4 <http_remove_connection+0x50>
    if (http_connections == hs) {
 800e094:	4b12      	ldr	r3, [pc, #72]	; (800e0e0 <http_remove_connection+0x5c>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d104      	bne.n	800e0a8 <http_remove_connection+0x24>
      http_connections = hs->next;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4a0f      	ldr	r2, [pc, #60]	; (800e0e0 <http_remove_connection+0x5c>)
 800e0a4:	6013      	str	r3, [r2, #0]
          break;
        }
      }
    }
  }
}
 800e0a6:	e015      	b.n	800e0d4 <http_remove_connection+0x50>
      for (last = http_connections; last->next != NULL; last = last->next) {
 800e0a8:	4b0d      	ldr	r3, [pc, #52]	; (800e0e0 <http_remove_connection+0x5c>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	e00d      	b.n	800e0cc <http_remove_connection+0x48>
        if (last->next == hs) {
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d105      	bne.n	800e0c6 <http_remove_connection+0x42>
          last->next = hs->next;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	601a      	str	r2, [r3, #0]
          break;
 800e0c2:	bf00      	nop
}
 800e0c4:	e006      	b.n	800e0d4 <http_remove_connection+0x50>
      for (last = http_connections; last->next != NULL; last = last->next) {
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	60fb      	str	r3, [r7, #12]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d1ed      	bne.n	800e0b0 <http_remove_connection+0x2c>
}
 800e0d4:	bf00      	nop
 800e0d6:	3714      	adds	r7, #20
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr
 800e0e0:	2000776c 	.word	0x2000776c

0800e0e4 <http_kill_oldest_connection>:

static void
http_kill_oldest_connection(u8_t ssi_required)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs = http_connections;
 800e0ee:	4b16      	ldr	r3, [pc, #88]	; (800e148 <http_kill_oldest_connection+0x64>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	60fb      	str	r3, [r7, #12]
  struct http_state *hs_free_next = NULL;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	60bb      	str	r3, [r7, #8]
  while (hs && hs->next) {
 800e0f8:	e00f      	b.n	800e11a <http_kill_oldest_connection+0x36>
#if LWIP_HTTPD_SSI
    if (ssi_required) {
 800e0fa:	79fb      	ldrb	r3, [r7, #7]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d007      	beq.n	800e110 <http_kill_oldest_connection+0x2c>
      if (hs->next->ssi != NULL) {
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e106:	2b00      	cmp	r3, #0
 800e108:	d004      	beq.n	800e114 <http_kill_oldest_connection+0x30>
        hs_free_next = hs;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	60bb      	str	r3, [r7, #8]
 800e10e:	e001      	b.n	800e114 <http_kill_oldest_connection+0x30>
    } else
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(ssi_required);
#endif /* LWIP_HTTPD_SSI */
    {
      hs_free_next = hs;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	60bb      	str	r3, [r7, #8]
    }
    LWIP_ASSERT("broken list", hs != hs->next);
    hs = hs->next;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	60fb      	str	r3, [r7, #12]
  while (hs && hs->next) {
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d003      	beq.n	800e128 <http_kill_oldest_connection+0x44>
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d1e8      	bne.n	800e0fa <http_kill_oldest_connection+0x16>
  }
  if (hs_free_next != NULL) {
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d008      	beq.n	800e140 <http_kill_oldest_connection+0x5c>
    LWIP_ASSERT("hs_free_next->next != NULL", hs_free_next->next != NULL);
    LWIP_ASSERT("hs_free_next->next->pcb != NULL", hs_free_next->next->pcb != NULL);
    /* send RST when killing a connection because of memory shortage */
    http_close_or_abort_conn(hs_free_next->next->pcb, hs_free_next->next, 1); /* this also unlinks the http_state from the list */
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	6a18      	ldr	r0, [r3, #32]
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2201      	movs	r2, #1
 800e13a:	4619      	mov	r1, r3
 800e13c:	f000 f90e 	bl	800e35c <http_close_or_abort_conn>
  }
}
 800e140:	bf00      	nop
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	2000776c 	.word	0x2000776c

0800e14c <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800e152:	480e      	ldr	r0, [pc, #56]	; (800e18c <http_ssi_state_alloc+0x40>)
 800e154:	f001 fca5 	bl	800faa2 <memp_malloc_pool>
 800e158:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED
  if (ret == NULL) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d106      	bne.n	800e16e <http_ssi_state_alloc+0x22>
    http_kill_oldest_connection(1);
 800e160:	2001      	movs	r0, #1
 800e162:	f7ff ffbf 	bl	800e0e4 <http_kill_oldest_connection>
    ret = HTTP_ALLOC_SSI_STATE();
 800e166:	4809      	ldr	r0, [pc, #36]	; (800e18c <http_ssi_state_alloc+0x40>)
 800e168:	f001 fc9b 	bl	800faa2 <memp_malloc_pool>
 800e16c:	6078      	str	r0, [r7, #4]
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d005      	beq.n	800e180 <http_ssi_state_alloc+0x34>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800e174:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 800e178:	2100      	movs	r1, #0
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f00c fd61 	bl	801ac42 <memset>
  }
  return ret;
 800e180:	687b      	ldr	r3, [r7, #4]
}
 800e182:	4618      	mov	r0, r3
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	0801d168 	.word	0x0801d168

0800e190 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d003      	beq.n	800e1a6 <http_ssi_state_free+0x16>
    HTTP_FREE_SSI_STATE(ssi);
 800e19e:	6879      	ldr	r1, [r7, #4]
 800e1a0:	4803      	ldr	r0, [pc, #12]	; (800e1b0 <http_ssi_state_free+0x20>)
 800e1a2:	f001 fcb7 	bl	800fb14 <memp_free_pool>
  }
}
 800e1a6:	bf00      	nop
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	0801d168 	.word	0x0801d168

0800e1b4 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800e1bc:	2234      	movs	r2, #52	; 0x34
 800e1be:	2100      	movs	r1, #0
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f00c fd3e 	bl	801ac42 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800e1c6:	bf00      	nop
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
	...

0800e1d0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800e1d6:	480e      	ldr	r0, [pc, #56]	; (800e210 <http_state_alloc+0x40>)
 800e1d8:	f001 fc63 	bl	800faa2 <memp_malloc_pool>
 800e1dc:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED
  if (ret == NULL) {
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d106      	bne.n	800e1f2 <http_state_alloc+0x22>
    http_kill_oldest_connection(0);
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	f7ff ff7d 	bl	800e0e4 <http_kill_oldest_connection>
    ret = HTTP_ALLOC_HTTP_STATE();
 800e1ea:	4809      	ldr	r0, [pc, #36]	; (800e210 <http_state_alloc+0x40>)
 800e1ec:	f001 fc59 	bl	800faa2 <memp_malloc_pool>
 800e1f0:	6078      	str	r0, [r7, #4]
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d005      	beq.n	800e204 <http_state_alloc+0x34>
    http_state_init(ret);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7ff ffdb 	bl	800e1b4 <http_state_init>
    http_add_connection(ret);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7ff ff2c 	bl	800e05c <http_add_connection>
  }
  return ret;
 800e204:	687b      	ldr	r3, [r7, #4]
}
 800e206:	4618      	mov	r0, r3
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	0801d160 	.word	0x0801d160

0800e214 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	699b      	ldr	r3, [r3, #24]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d007      	beq.n	800e234 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	4618      	mov	r0, r3
 800e22a:	f7ff fefd 	bl	800e028 <fs_close>
    hs->handle = NULL;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2200      	movs	r2, #0
 800e232:	619a      	str	r2, [r3, #24]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d007      	beq.n	800e24c <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e240:	4618      	mov	r0, r3
 800e242:	f7ff ffa5 	bl	800e190 <http_ssi_state_free>
    hs->ssi = NULL;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e250:	2b00      	cmp	r3, #0
 800e252:	d007      	beq.n	800e264 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e258:	4618      	mov	r0, r3
 800e25a:	f002 f94b 	bl	80104f4 <pbuf_free>
    hs->req = NULL;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800e264:	bf00      	nop
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d009      	beq.n	800e28e <http_state_free+0x22>
    http_state_eof(hs);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7ff ffca 	bl	800e214 <http_state_eof>
    http_remove_connection(hs);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7ff feff 	bl	800e084 <http_remove_connection>
    HTTP_FREE_HTTP_STATE(hs);
 800e286:	6879      	ldr	r1, [r7, #4]
 800e288:	4803      	ldr	r0, [pc, #12]	; (800e298 <http_state_free+0x2c>)
 800e28a:	f001 fc43 	bl	800fb14 <memp_free_pool>
  }
}
 800e28e:	bf00      	nop
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	0801d160 	.word	0x0801d160

0800e29c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b086      	sub	sp, #24
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800e2b0:	8afb      	ldrh	r3, [r7, #22]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <http_write+0x1e>
    return ERR_OK;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	e04b      	b.n	800e352 <http_write+0xb6>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e2c0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800e2c2:	8aba      	ldrh	r2, [r7, #20]
 800e2c4:	8afb      	ldrh	r3, [r7, #22]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d201      	bcs.n	800e2ce <http_write+0x32>
    len = max_len;
 800e2ca:	8abb      	ldrh	r3, [r7, #20]
 800e2cc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800e2ce:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800e2d2:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800e2d4:	8afa      	ldrh	r2, [r7, #22]
 800e2d6:	8abb      	ldrh	r3, [r7, #20]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d901      	bls.n	800e2e0 <http_write+0x44>
    len = max_len;
 800e2dc:	8abb      	ldrh	r3, [r7, #20]
 800e2de:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	8afa      	ldrh	r2, [r7, #22]
 800e2e4:	68b9      	ldr	r1, [r7, #8]
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f006 f8fe 	bl	80144e8 <tcp_write>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800e2f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2f8:	d10f      	bne.n	800e31a <http_write+0x7e>
      if ((altcp_sndbuf(pcb) == 0) ||
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e300:	2b00      	cmp	r3, #0
 800e302:	d004      	beq.n	800e30e <http_write+0x72>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800e30a:	2b0b      	cmp	r3, #11
 800e30c:	d902      	bls.n	800e314 <http_write+0x78>
        /* no need to try smaller sizes */
        len = 1;
 800e30e:	2301      	movs	r3, #1
 800e310:	82fb      	strh	r3, [r7, #22]
 800e312:	e002      	b.n	800e31a <http_write+0x7e>
      } else {
        len /= 2;
 800e314:	8afb      	ldrh	r3, [r7, #22]
 800e316:	085b      	lsrs	r3, r3, #1
 800e318:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800e31a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e31e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e322:	d102      	bne.n	800e32a <http_write+0x8e>
 800e324:	8afb      	ldrh	r3, [r7, #22]
 800e326:	2b01      	cmp	r3, #1
 800e328:	d8da      	bhi.n	800e2e0 <http_write+0x44>

  if (err == ERR_OK) {
 800e32a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d103      	bne.n	800e33a <http_write+0x9e>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	8afa      	ldrh	r2, [r7, #22]
 800e336:	801a      	strh	r2, [r3, #0]
 800e338:	e002      	b.n	800e340 <http_write+0xa4>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	801a      	strh	r2, [r3, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	8b5b      	ldrh	r3, [r3, #26]
 800e344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e348:	b29a      	uxth	r2, r3
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	835a      	strh	r2, [r3, #26]
#endif

  return err;
 800e34e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3718      	adds	r7, #24
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
	...

0800e35c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b086      	sub	sp, #24
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	4613      	mov	r3, r2
 800e368:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800e36a:	2100      	movs	r1, #0
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f003 fc5b 	bl	8011c28 <tcp_arg>
  altcp_recv(pcb, NULL);
 800e372:	2100      	movs	r1, #0
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f003 fc68 	bl	8011c4a <tcp_recv>
  altcp_err(pcb, NULL);
 800e37a:	2100      	movs	r1, #0
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f003 fc88 	bl	8011c92 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800e382:	2200      	movs	r2, #0
 800e384:	2100      	movs	r1, #0
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f003 fcac 	bl	8011ce4 <tcp_poll>
  altcp_sent(pcb, NULL);
 800e38c:	2100      	movs	r1, #0
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f003 fc6d 	bl	8011c6e <tcp_sent>
  if (hs != NULL) {
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d002      	beq.n	800e3a0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800e39a:	68b8      	ldr	r0, [r7, #8]
 800e39c:	f7ff ff66 	bl	800e26c <http_state_free>
  }

  if (abort_conn) {
 800e3a0:	79fb      	ldrb	r3, [r7, #7]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d004      	beq.n	800e3b0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f002 fcc8 	bl	8010d3c <tcp_abort>
    return ERR_OK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	e00f      	b.n	800e3d0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800e3b0:	68f8      	ldr	r0, [r7, #12]
 800e3b2:	f002 fc00 	bl	8010bb6 <tcp_close>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800e3ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d004      	beq.n	800e3cc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800e3c2:	2204      	movs	r2, #4
 800e3c4:	4904      	ldr	r1, [pc, #16]	; (800e3d8 <http_close_or_abort_conn+0x7c>)
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f003 fc8c 	bl	8011ce4 <tcp_poll>
  }
  return err;
 800e3cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	0800f287 	.word	0x0800f287

0800e3dc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f7ff ffb6 	bl	800e35c <http_close_or_abort_conn>
 800e3f0:	4603      	mov	r3, r0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b082      	sub	sp, #8
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	6039      	str	r1, [r7, #0]
  /* HTTP/1.1 persistent connection? (Not supported for SSI) */
#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  if (hs->keepalive) {
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d01a      	beq.n	800e444 <http_eof+0x4a>
    http_remove_connection(hs);
 800e40e:	6838      	ldr	r0, [r7, #0]
 800e410:	f7ff fe38 	bl	800e084 <http_remove_connection>

    http_state_eof(hs);
 800e414:	6838      	ldr	r0, [r7, #0]
 800e416:	f7ff fefd 	bl	800e214 <http_state_eof>
    http_state_init(hs);
 800e41a:	6838      	ldr	r0, [r7, #0]
 800e41c:	f7ff feca 	bl	800e1b4 <http_state_init>
    /* restore state: */
    hs->pcb = pcb;
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	621a      	str	r2, [r3, #32]
    hs->keepalive = 1;
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2201      	movs	r2, #1
 800e42a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    http_add_connection(hs);
 800e42e:	6838      	ldr	r0, [r7, #0]
 800e430:	f7ff fe14 	bl	800e05c <http_add_connection>
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	8b5b      	ldrh	r3, [r3, #26]
 800e438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	835a      	strh	r2, [r3, #26]
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
  }
}
 800e442:	e003      	b.n	800e44c <http_eof+0x52>
    http_close_conn(pcb, hs);
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f7ff ffc8 	bl	800e3dc <http_close_conn>
}
 800e44c:	bf00      	nop
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b086      	sub	sp, #24
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
  ssi = hs->ssi;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e460:	617b      	str	r3, [r7, #20]
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
  ssi->tag_part = HTTPD_LAST_TAG_PART;
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	3312      	adds	r3, #18
 800e466:	613b      	str	r3, [r7, #16]
#endif

  if (httpd_ssi_handler
 800e468:	4b37      	ldr	r3, [pc, #220]	; (800e548 <get_tag_insert+0xf4>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d012      	beq.n	800e496 <get_tag_insert+0x42>
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800e470:	4b35      	ldr	r3, [pc, #212]	; (800e548 <get_tag_insert+0xf4>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	697a      	ldr	r2, [r7, #20]
 800e476:	f102 011b 	add.w	r1, r2, #27
 800e47a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e47e:	6938      	ldr	r0, [r7, #16]
 800e480:	4798      	blx	r3
 800e482:	4603      	mov	r3, r0
 800e484:	461a      	mov	r2, r3
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	81da      	strh	r2, [r3, #14]
#if LWIP_HTTPD_FILE_STATE
                                              , (hs->handle ? hs->handle->state : NULL)
#endif /* LWIP_HTTPD_FILE_STATE */
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	89db      	ldrh	r3, [r3, #14]
 800e48e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e492:	4293      	cmp	r3, r2
 800e494:	d153      	bne.n	800e53e <get_tag_insert+0xea>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	3312      	adds	r3, #18
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7f1 feba 	bl	8000214 <strlen>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	f640 72e6 	movw	r2, #4070	; 0xfe6
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d81b      	bhi.n	800e4e2 <get_tag_insert+0x8e>
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	3312      	adds	r3, #18
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7f1 feb0 	bl	8000214 <strlen>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b09      	cmp	r3, #9
 800e4b8:	d813      	bhi.n	800e4e2 <get_tag_insert+0x8e>
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	3312      	adds	r3, #18
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7f1 fea8 	bl	8000214 <strlen>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	f640 72e6 	movw	r2, #4070	; 0xfe6
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d806      	bhi.n	800e4dc <get_tag_insert+0x88>
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	3312      	adds	r3, #18
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7f1 fe9e 	bl	8000214 <strlen>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	e003      	b.n	800e4e4 <get_tag_insert+0x90>
 800e4dc:	f640 73e7 	movw	r3, #4071	; 0xfe7
 800e4e0:	e000      	b.n	800e4e4 <get_tag_insert+0x90>
 800e4e2:	2309      	movs	r3, #9
 800e4e4:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	331b      	adds	r3, #27
 800e4ea:	2212      	movs	r2, #18
 800e4ec:	4917      	ldr	r1, [pc, #92]	; (800e54c <get_tag_insert+0xf8>)
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f00c fc51 	bl	801ad96 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	3312      	adds	r3, #18
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	4619      	mov	r1, r3
 800e502:	f00c fc48 	bl	801ad96 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	3312      	adds	r3, #18
 800e50a:	3318      	adds	r3, #24
 800e50c:	697a      	ldr	r2, [r7, #20]
 800e50e:	4413      	add	r3, r2
 800e510:	3303      	adds	r3, #3
 800e512:	2207      	movs	r2, #7
 800e514:	490e      	ldr	r1, [pc, #56]	; (800e550 <get_tag_insert+0xfc>)
 800e516:	4618      	mov	r0, r3
 800e518:	f00c fc3d 	bl	801ad96 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	3319      	adds	r3, #25
 800e520:	697a      	ldr	r2, [r7, #20]
 800e522:	4413      	add	r3, r2
 800e524:	2200      	movs	r2, #0
 800e526:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	331b      	adds	r3, #27
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7f1 fe71 	bl	8000214 <strlen>
 800e532:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
  ssi->tag_insert_len = (u16_t)len;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	b29a      	uxth	r2, r3
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	81da      	strh	r2, [r3, #14]
 800e53c:	e000      	b.n	800e540 <get_tag_insert+0xec>
          return;
 800e53e:	bf00      	nop
}
 800e540:	3718      	adds	r7, #24
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	20007768 	.word	0x20007768
 800e54c:	0801bdcc 	.word	0x0801bdcc
 800e550:	0801bde0 	.word	0x0801bde0

0800e554 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	699b      	ldr	r3, [r3, #24]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d105      	bne.n	800e572 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800e566:	6839      	ldr	r1, [r7, #0]
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f7ff ff46 	bl	800e3fa <http_eof>
    return 0;
 800e56e:	2300      	movs	r3, #0
 800e570:	e00f      	b.n	800e592 <http_check_eof+0x3e>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	699b      	ldr	r3, [r3, #24]
 800e576:	4618      	mov	r0, r3
 800e578:	f7ff fd60 	bl	800e03c <fs_bytes_left>
 800e57c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2b00      	cmp	r3, #0
 800e582:	dc05      	bgt.n	800e590 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800e584:	6839      	ldr	r1, [r7, #0]
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f7ff ff37 	bl	800e3fa <http_eof>
    return 0;
 800e58c:	2300      	movs	r3, #0
 800e58e:	e000      	b.n	800e592 <http_check_eof+0x3e>
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800e590:	2301      	movs	r3, #1
}
 800e592:	4618      	mov	r0, r3
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}

0800e59a <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b084      	sub	sp, #16
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
 800e5a2:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d803      	bhi.n	800e5bc <http_send_data_nonssi+0x22>
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	e001      	b.n	800e5c0 <http_send_data_nonssi+0x26>
 800e5bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5c0:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	69d9      	ldr	r1, [r3, #28]
 800e5c6:	f107 020c 	add.w	r2, r7, #12
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7ff fe65 	bl	800e29c <http_write>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800e5d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10d      	bne.n	800e5fa <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	69db      	ldr	r3, [r3, #28]
 800e5e6:	89ba      	ldrh	r2, [r7, #12]
 800e5e8:	441a      	add	r2, r3
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	61da      	str	r2, [r3, #28]
    hs->left -= len;
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5f2:	89ba      	ldrh	r2, [r7, #12]
 800e5f4:	1a9a      	subs	r2, r3, r2
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  return data_to_send;
 800e5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800e60e:	2300      	movs	r3, #0
 800e610:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e61a:	613b      	str	r3, [r7, #16]
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e622:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	69db      	ldr	r3, [r3, #28]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	f240 8261 	bls.w	800eaf4 <http_send_data_ssi+0x4f0>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	69db      	ldr	r3, [r3, #28]
 800e63a:	1ad3      	subs	r3, r2, r3
 800e63c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e640:	4293      	cmp	r3, r2
 800e642:	dc06      	bgt.n	800e652 <http_send_data_ssi+0x4e>
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	681a      	ldr	r2, [r3, #0]
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	69db      	ldr	r3, [r3, #28]
 800e64c:	1ad3      	subs	r3, r2, r3
 800e64e:	b29b      	uxth	r3, r3
 800e650:	e001      	b.n	800e656 <http_send_data_ssi+0x52>
 800e652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e656:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	69d9      	ldr	r1, [r3, #28]
 800e65c:	f107 020e 	add.w	r2, r7, #14
 800e660:	2300      	movs	r3, #0
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7ff fe1a 	bl	800e29c <http_write>
 800e668:	4603      	mov	r3, r0
 800e66a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800e66c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d10d      	bne.n	800e690 <http_send_data_ssi+0x8c>
      data_to_send = 1;
 800e674:	2301      	movs	r3, #1
 800e676:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	69db      	ldr	r3, [r3, #28]
 800e67c:	89fa      	ldrh	r2, [r7, #14]
 800e67e:	441a      	add	r2, r3
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	61da      	str	r2, [r3, #28]
      hs->left -= len;
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e688:	89fa      	ldrh	r2, [r7, #14]
 800e68a:	1a9a      	subs	r2, r3, r2
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e696:	2b00      	cmp	r3, #0
 800e698:	f040 822c 	bne.w	800eaf4 <http_send_data_ssi+0x4f0>
      return data_to_send;
 800e69c:	7dbb      	ldrb	r3, [r7, #22]
 800e69e:	e277      	b.n	800eb90 <http_send_data_ssi+0x58c>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800e6a0:	89fb      	ldrh	r3, [r7, #14]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d101      	bne.n	800e6aa <http_send_data_ssi+0xa6>
      return data_to_send;
 800e6a6:	7dbb      	ldrb	r3, [r7, #22]
 800e6a8:	e272      	b.n	800eb90 <http_send_data_ssi+0x58c>
    }
    switch (ssi->tag_state) {
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6b0:	7f1b      	ldrb	r3, [r3, #28]
 800e6b2:	2b04      	cmp	r3, #4
 800e6b4:	f200 821d 	bhi.w	800eaf2 <http_send_data_ssi+0x4ee>
 800e6b8:	a201      	add	r2, pc, #4	; (adr r2, 800e6c0 <http_send_data_ssi+0xbc>)
 800e6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6be:	bf00      	nop
 800e6c0:	0800e6d5 	.word	0x0800e6d5
 800e6c4:	0800e729 	.word	0x0800e729
 800e6c8:	0800e79f 	.word	0x0800e79f
 800e6cc:	0800e8c7 	.word	0x0800e8c7
 800e6d0:	0800ea17 	.word	0x0800ea17
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	757b      	strb	r3, [r7, #21]
 800e6d8:	e018      	b.n	800e70c <http_send_data_ssi+0x108>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	781a      	ldrb	r2, [r3, #0]
 800e6e0:	7d7b      	ldrb	r3, [r7, #21]
 800e6e2:	498a      	ldr	r1, [pc, #552]	; (800e90c <http_send_data_ssi+0x308>)
 800e6e4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d10b      	bne.n	800e706 <http_send_data_ssi+0x102>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	7d7a      	ldrb	r2, [r7, #21]
 800e6f2:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	771a      	strb	r2, [r3, #28]
            ssi->tag_index = 1;
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	2201      	movs	r2, #1
 800e702:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800e704:	e005      	b.n	800e712 <http_send_data_ssi+0x10e>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800e706:	7d7b      	ldrb	r3, [r7, #21]
 800e708:	3301      	adds	r3, #1
 800e70a:	757b      	strb	r3, [r7, #21]
 800e70c:	7d7b      	ldrb	r3, [r7, #21]
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d9e3      	bls.n	800e6da <http_send_data_ssi+0xd6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	1e5a      	subs	r2, r3, #1
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	1c5a      	adds	r2, r3, #1
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	601a      	str	r2, [r3, #0]
        break;
 800e726:	e1e5      	b.n	800eaf4 <http_send_data_ssi+0x4f0>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	7c1b      	ldrb	r3, [r3, #16]
 800e72c:	461a      	mov	r2, r3
 800e72e:	4b77      	ldr	r3, [pc, #476]	; (800e90c <http_send_data_ssi+0x308>)
 800e730:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800e734:	693a      	ldr	r2, [r7, #16]
 800e736:	8992      	ldrh	r2, [r2, #12]
 800e738:	4413      	add	r3, r2
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d108      	bne.n	800e752 <http_send_data_ssi+0x14e>
          ssi->tag_index = 0;
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	2200      	movs	r2, #0
 800e744:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e74c:	2202      	movs	r2, #2
 800e74e:	771a      	strb	r2, [r3, #28]
 800e750:	e1d0      	b.n	800eaf4 <http_send_data_ssi+0x4f0>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	781a      	ldrb	r2, [r3, #0]
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	7c1b      	ldrb	r3, [r3, #16]
 800e75c:	4619      	mov	r1, r3
 800e75e:	4b6b      	ldr	r3, [pc, #428]	; (800e90c <http_send_data_ssi+0x308>)
 800e760:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800e764:	6939      	ldr	r1, [r7, #16]
 800e766:	8989      	ldrh	r1, [r1, #12]
 800e768:	440b      	add	r3, r1
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d106      	bne.n	800e77e <http_send_data_ssi+0x17a>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	899b      	ldrh	r3, [r3, #12]
 800e774:	3301      	adds	r3, #1
 800e776:	b29a      	uxth	r2, r3
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	819a      	strh	r2, [r3, #12]
 800e77c:	e004      	b.n	800e788 <http_send_data_ssi+0x184>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e784:	2200      	movs	r2, #0
 800e786:	771a      	strb	r2, [r3, #28]
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	1e5a      	subs	r2, r3, #1
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	1c5a      	adds	r2, r3, #1
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	601a      	str	r2, [r3, #0]
        }
        break;
 800e79c:	e1aa      	b.n	800eaf4 <http_send_data_ssi+0x4f0>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	899b      	ldrh	r3, [r3, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d11e      	bne.n	800e7e4 <http_send_data_ssi+0x1e0>
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	2b20      	cmp	r3, #32
 800e7ae:	d00e      	beq.n	800e7ce <http_send_data_ssi+0x1ca>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800e7b6:	2b09      	cmp	r3, #9
 800e7b8:	d009      	beq.n	800e7ce <http_send_data_ssi+0x1ca>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	2b0a      	cmp	r3, #10
 800e7c2:	d004      	beq.n	800e7ce <http_send_data_ssi+0x1ca>
                                      (*ssi->parsed == '\r'))) {
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800e7ca:	2b0d      	cmp	r3, #13
 800e7cc:	d10a      	bne.n	800e7e4 <http_send_data_ssi+0x1e0>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	1e5a      	subs	r2, r3, #1
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	1c5a      	adds	r2, r3, #1
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	601a      	str	r2, [r3, #0]
          break;
 800e7e2:	e187      	b.n	800eaf4 <http_send_data_ssi+0x4f0>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	781a      	ldrb	r2, [r3, #0]
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	7c1b      	ldrb	r3, [r3, #16]
 800e7ee:	4947      	ldr	r1, [pc, #284]	; (800e90c <http_send_data_ssi+0x308>)
 800e7f0:	00db      	lsls	r3, r3, #3
 800e7f2:	440b      	add	r3, r1
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d013      	beq.n	800e824 <http_send_data_ssi+0x220>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800e802:	2b20      	cmp	r3, #32
 800e804:	d00e      	beq.n	800e824 <http_send_data_ssi+0x220>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	2b09      	cmp	r3, #9
 800e80e:	d009      	beq.n	800e824 <http_send_data_ssi+0x220>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800e816:	2b0a      	cmp	r3, #10
 800e818:	d004      	beq.n	800e824 <http_send_data_ssi+0x220>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	2b0d      	cmp	r3, #13
 800e822:	d12e      	bne.n	800e882 <http_send_data_ssi+0x27e>

          if (ssi->tag_index == 0) {
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	899b      	ldrh	r3, [r3, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d105      	bne.n	800e838 <http_send_data_ssi+0x234>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e832:	2200      	movs	r2, #0
 800e834:	771a      	strb	r2, [r3, #28]
          if (ssi->tag_index == 0) {
 800e836:	e03b      	b.n	800e8b0 <http_send_data_ssi+0x2ac>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e83e:	2203      	movs	r2, #3
 800e840:	771a      	strb	r2, [r3, #28]
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	899b      	ldrh	r3, [r3, #12]
 800e846:	b2da      	uxtb	r2, r3
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	899b      	ldrh	r3, [r3, #12]
 800e850:	461a      	mov	r2, r3
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	4413      	add	r3, r2
 800e856:	2200      	movs	r2, #0
 800e858:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	781a      	ldrb	r2, [r3, #0]
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	7c1b      	ldrb	r3, [r3, #16]
 800e864:	4929      	ldr	r1, [pc, #164]	; (800e90c <http_send_data_ssi+0x308>)
 800e866:	00db      	lsls	r3, r3, #3
 800e868:	440b      	add	r3, r1
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d103      	bne.n	800e87a <http_send_data_ssi+0x276>
              ssi->tag_index = 1;
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	2201      	movs	r2, #1
 800e876:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800e878:	e01a      	b.n	800e8b0 <http_send_data_ssi+0x2ac>
            } else {
              ssi->tag_index = 0;
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	2200      	movs	r2, #0
 800e87e:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800e880:	e016      	b.n	800e8b0 <http_send_data_ssi+0x2ac>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	899b      	ldrh	r3, [r3, #12]
 800e886:	2b07      	cmp	r3, #7
 800e888:	d80d      	bhi.n	800e8a6 <http_send_data_ssi+0x2a2>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	899b      	ldrh	r3, [r3, #12]
 800e892:	1c59      	adds	r1, r3, #1
 800e894:	b288      	uxth	r0, r1
 800e896:	6939      	ldr	r1, [r7, #16]
 800e898:	8188      	strh	r0, [r1, #12]
 800e89a:	4619      	mov	r1, r3
 800e89c:	7812      	ldrb	r2, [r2, #0]
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	440b      	add	r3, r1
 800e8a2:	749a      	strb	r2, [r3, #18]
 800e8a4:	e004      	b.n	800e8b0 <http_send_data_ssi+0x2ac>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	771a      	strb	r2, [r3, #28]
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	1e5a      	subs	r2, r3, #1
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	1c5a      	adds	r2, r3, #1
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	601a      	str	r2, [r3, #0]

        break;
 800e8c4:	e116      	b.n	800eaf4 <http_send_data_ssi+0x4f0>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	899b      	ldrh	r3, [r3, #12]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d120      	bne.n	800e910 <http_send_data_ssi+0x30c>
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	2b20      	cmp	r3, #32
 800e8d6:	d00e      	beq.n	800e8f6 <http_send_data_ssi+0x2f2>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800e8de:	2b09      	cmp	r3, #9
 800e8e0:	d009      	beq.n	800e8f6 <http_send_data_ssi+0x2f2>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	2b0a      	cmp	r3, #10
 800e8ea:	d004      	beq.n	800e8f6 <http_send_data_ssi+0x2f2>
                                      (*ssi->parsed == '\r'))) {
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800e8f2:	2b0d      	cmp	r3, #13
 800e8f4:	d10c      	bne.n	800e910 <http_send_data_ssi+0x30c>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	1e5a      	subs	r2, r3, #1
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	601a      	str	r2, [r3, #0]
          break;
 800e90a:	e0f3      	b.n	800eaf4 <http_send_data_ssi+0x4f0>
 800e90c:	0801d170 	.word	0x0801d170
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	781a      	ldrb	r2, [r3, #0]
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	7c1b      	ldrb	r3, [r3, #16]
 800e91a:	498c      	ldr	r1, [pc, #560]	; (800eb4c <http_send_data_ssi+0x548>)
 800e91c:	00db      	lsls	r3, r3, #3
 800e91e:	440b      	add	r3, r1
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	6939      	ldr	r1, [r7, #16]
 800e924:	8989      	ldrh	r1, [r1, #12]
 800e926:	440b      	add	r3, r1
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d163      	bne.n	800e9f6 <http_send_data_ssi+0x3f2>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	1e5a      	subs	r2, r3, #1
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	1c5a      	adds	r2, r3, #1
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	899b      	ldrh	r3, [r3, #12]
 800e946:	3301      	adds	r3, #1
 800e948:	b29a      	uxth	r2, r3
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	7c1b      	ldrb	r3, [r3, #16]
 800e952:	4a7e      	ldr	r2, [pc, #504]	; (800eb4c <http_send_data_ssi+0x548>)
 800e954:	00db      	lsls	r3, r3, #3
 800e956:	4413      	add	r3, r2
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	693a      	ldr	r2, [r7, #16]
 800e95c:	8992      	ldrh	r2, [r2, #12]
 800e95e:	4413      	add	r3, r2
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	f040 80c6 	bne.w	800eaf4 <http_send_data_ssi+0x4f0>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800e968:	6838      	ldr	r0, [r7, #0]
 800e96a:	f7ff fd73 	bl	800e454 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	2200      	movs	r2, #0
 800e972:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e97a:	2204      	movs	r2, #4
 800e97c:	771a      	strb	r2, [r3, #28]
            ssi->tag_end = ssi->parsed;
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	685a      	ldr	r2, [r3, #4]
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	69db      	ldr	r3, [r3, #28]
 800e98e:	429a      	cmp	r2, r3
 800e990:	f240 80b0 	bls.w	800eaf4 <http_send_data_ssi+0x4f0>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	685a      	ldr	r2, [r3, #4]
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	69db      	ldr	r3, [r3, #28]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	dc06      	bgt.n	800e9b4 <http_send_data_ssi+0x3b0>
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	685a      	ldr	r2, [r3, #4]
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	69db      	ldr	r3, [r3, #28]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	e001      	b.n	800e9b8 <http_send_data_ssi+0x3b4>
 800e9b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9b8:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	69d9      	ldr	r1, [r3, #28]
 800e9be:	f107 020e 	add.w	r2, r7, #14
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7ff fc69 	bl	800e29c <http_write>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800e9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f040 808e 	bne.w	800eaf4 <http_send_data_ssi+0x4f0>
                data_to_send = 1;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	69db      	ldr	r3, [r3, #28]
 800e9e0:	89fa      	ldrh	r2, [r7, #14]
 800e9e2:	441a      	add	r2, r3
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	61da      	str	r2, [r3, #28]
                hs->left -= len;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ec:	89fa      	ldrh	r2, [r7, #14]
 800e9ee:	1a9a      	subs	r2, r3, r2
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	629a      	str	r2, [r3, #40]	; 0x28
 800e9f4:	e07e      	b.n	800eaf4 <http_send_data_ssi+0x4f0>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	1e5a      	subs	r2, r3, #1
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	1c5a      	adds	r2, r3, #1
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea10:	2200      	movs	r2, #0
 800ea12:	771a      	strb	r2, [r3, #28]
        }
        break;
 800ea14:	e06e      	b.n	800eaf4 <http_send_data_ssi+0x4f0>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	69db      	ldr	r3, [r3, #28]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d935      	bls.n	800ea8e <http_send_data_ssi+0x48a>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	685a      	ldr	r2, [r3, #4]
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	69db      	ldr	r3, [r3, #28]
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea30:	4293      	cmp	r3, r2
 800ea32:	dc06      	bgt.n	800ea42 <http_send_data_ssi+0x43e>
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	69db      	ldr	r3, [r3, #28]
 800ea3c:	1ad3      	subs	r3, r2, r3
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	e001      	b.n	800ea46 <http_send_data_ssi+0x442>
 800ea42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea46:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800ea48:	89fb      	ldrh	r3, [r7, #14]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00a      	beq.n	800ea64 <http_send_data_ssi+0x460>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	69d9      	ldr	r1, [r3, #28]
 800ea52:	f107 020e 	add.w	r2, r7, #14
 800ea56:	2300      	movs	r3, #0
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7ff fc1f 	bl	800e29c <http_write>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	75fb      	strb	r3, [r7, #23]
 800ea62:	e001      	b.n	800ea68 <http_send_data_ssi+0x464>
          } else {
            err = ERR_OK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800ea68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d141      	bne.n	800eaf4 <http_send_data_ssi+0x4f0>
            data_to_send = 1;
 800ea70:	2301      	movs	r3, #1
 800ea72:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	69db      	ldr	r3, [r3, #28]
 800ea78:	89fa      	ldrh	r2, [r7, #14]
 800ea7a:	441a      	add	r2, r3
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	61da      	str	r2, [r3, #28]
            hs->left -= len;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea84:	89fa      	ldrh	r2, [r7, #14]
 800ea86:	1a9a      	subs	r2, r3, r2
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	629a      	str	r2, [r3, #40]	; 0x28
 800ea8c:	e032      	b.n	800eaf4 <http_send_data_ssi+0x4f0>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	899a      	ldrh	r2, [r3, #12]
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	89db      	ldrh	r3, [r3, #14]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d222      	bcs.n	800eae0 <http_send_data_ssi+0x4dc>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	89da      	ldrh	r2, [r3, #14]
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	899b      	ldrh	r3, [r3, #12]
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	899b      	ldrh	r3, [r3, #12]
 800eaac:	3318      	adds	r3, #24
 800eaae:	693a      	ldr	r2, [r7, #16]
 800eab0:	4413      	add	r3, r2
 800eab2:	1cd9      	adds	r1, r3, #3
 800eab4:	f107 020e 	add.w	r2, r7, #14
 800eab8:	2301      	movs	r3, #1
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f7ff fbee 	bl	800e29c <http_write>
 800eac0:	4603      	mov	r3, r0
 800eac2:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800eac4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d113      	bne.n	800eaf4 <http_send_data_ssi+0x4f0>
              data_to_send = 1;
 800eacc:	2301      	movs	r3, #1
 800eace:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	899a      	ldrh	r2, [r3, #12]
 800ead4:	89fb      	ldrh	r3, [r7, #14]
 800ead6:	4413      	add	r3, r2
 800ead8:	b29a      	uxth	r2, r3
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	819a      	strh	r2, [r3, #12]
 800eade:	e009      	b.n	800eaf4 <http_send_data_ssi+0x4f0>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	2200      	movs	r2, #0
 800eae4:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eaec:	2200      	movs	r2, #0
 800eaee:	771a      	strb	r2, [r3, #28]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800eaf0:	e000      	b.n	800eaf4 <http_send_data_ssi+0x4f0>
        default:
          break;
 800eaf2:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eafa:	7f1b      	ldrb	r3, [r3, #28]
 800eafc:	2b04      	cmp	r3, #4
 800eafe:	d003      	beq.n	800eb08 <http_send_data_ssi+0x504>
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	689b      	ldr	r3, [r3, #8]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d004      	beq.n	800eb12 <http_send_data_ssi+0x50e>
 800eb08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f43f adc7 	beq.w	800e6a0 <http_send_data_ssi+0x9c>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eb18:	7f1b      	ldrb	r3, [r3, #28]
 800eb1a:	2b04      	cmp	r3, #4
 800eb1c:	d037      	beq.n	800eb8e <http_send_data_ssi+0x58a>
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	69db      	ldr	r3, [r3, #28]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d931      	bls.n	800eb8e <http_send_data_ssi+0x58a>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	69db      	ldr	r3, [r3, #28]
 800eb32:	1ad3      	subs	r3, r2, r3
 800eb34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	dc09      	bgt.n	800eb50 <http_send_data_ssi+0x54c>
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	69db      	ldr	r3, [r3, #28]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	e004      	b.n	800eb54 <http_send_data_ssi+0x550>
 800eb4a:	bf00      	nop
 800eb4c:	0801d170 	.word	0x0801d170
 800eb50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb54:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	69d9      	ldr	r1, [r3, #28]
 800eb5a:	f107 020e 	add.w	r2, r7, #14
 800eb5e:	2300      	movs	r3, #0
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f7ff fb9b 	bl	800e29c <http_write>
 800eb66:	4603      	mov	r3, r0
 800eb68:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800eb6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d10d      	bne.n	800eb8e <http_send_data_ssi+0x58a>
      data_to_send = 1;
 800eb72:	2301      	movs	r3, #1
 800eb74:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	69db      	ldr	r3, [r3, #28]
 800eb7a:	89fa      	ldrh	r2, [r7, #14]
 800eb7c:	441a      	add	r2, r3
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	61da      	str	r2, [r3, #28]
      hs->left -= len;
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb86:	89fa      	ldrh	r2, [r7, #14]
 800eb88:	1a9a      	subs	r2, r3, r2
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  return data_to_send;
 800eb8e:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3718      	adds	r7, #24
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800eba2:	2300      	movs	r3, #0
 800eba4:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d101      	bne.n	800ebb0 <http_send+0x18>
    return 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	e030      	b.n	800ec12 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d108      	bne.n	800ebca <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800ebb8:	6839      	ldr	r1, [r7, #0]
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7ff fcca 	bl	800e554 <http_check_eof>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d101      	bne.n	800ebca <http_send+0x32>
      return 0;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	e023      	b.n	800ec12 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d006      	beq.n	800ebe0 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800ebd2:	6839      	ldr	r1, [r7, #0]
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7ff fd15 	bl	800e604 <http_send_data_ssi>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	73fb      	strb	r3, [r7, #15]
 800ebde:	e005      	b.n	800ebec <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ebe0:	6839      	ldr	r1, [r7, #0]
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7ff fcd9 	bl	800e59a <http_send_data_nonssi>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d10d      	bne.n	800ec10 <http_send+0x78>
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	699b      	ldr	r3, [r3, #24]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7ff fa1f 	bl	800e03c <fs_bytes_left>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	dc05      	bgt.n	800ec10 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ec04:	6839      	ldr	r1, [r7, #0]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7ff fbf7 	bl	800e3fa <http_eof>
    return 0;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	e000      	b.n	800ec12 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ec10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
	...

0800ec1c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	4a1e      	ldr	r2, [pc, #120]	; (800eca4 <http_get_404_file+0x88>)
 800ec2a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	1d1a      	adds	r2, r3, #4
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4619      	mov	r1, r3
 800ec36:	4610      	mov	r0, r2
 800ec38:	f7ff f9b8 	bl	800dfac <fs_open>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ec40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d026      	beq.n	800ec96 <http_get_404_file+0x7a>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	4a17      	ldr	r2, [pc, #92]	; (800eca8 <http_get_404_file+0x8c>)
 800ec4c:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	1d1a      	adds	r2, r3, #4
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4619      	mov	r1, r3
 800ec58:	4610      	mov	r0, r2
 800ec5a:	f7ff f9a7 	bl	800dfac <fs_open>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ec62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d015      	beq.n	800ec96 <http_get_404_file+0x7a>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	4a0f      	ldr	r2, [pc, #60]	; (800ecac <http_get_404_file+0x90>)
 800ec6e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	1d1a      	adds	r2, r3, #4
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4619      	mov	r1, r3
 800ec7a:	4610      	mov	r0, r2
 800ec7c:	f7ff f996 	bl	800dfac <fs_open>
 800ec80:	4603      	mov	r3, r0
 800ec82:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800ec84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d004      	beq.n	800ec96 <http_get_404_file+0x7a>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	601a      	str	r2, [r3, #0]
        return NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	e001      	b.n	800ec9a <http_get_404_file+0x7e>
      }
    }
  }

  return &hs->file_handle;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	3304      	adds	r3, #4
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	0801bde8 	.word	0x0801bde8
 800eca8:	0801bdf4 	.word	0x0801bdf4
 800ecac:	0801be00 	.word	0x0801be00

0800ecb0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b08e      	sub	sp, #56	; 0x38
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
  LWIP_ASSERT("hs != NULL", hs != NULL);

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	699b      	ldr	r3, [r3, #24]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d103      	bne.n	800ecd0 <http_parse_request+0x20>
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	69db      	ldr	r3, [r3, #28]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d002      	beq.n	800ecd6 <http_parse_request+0x26>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800ecd0:	f06f 0307 	mvn.w	r3, #7
 800ecd4:	e0c8      	b.n	800ee68 <http_parse_request+0x1b8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d103      	bne.n	800ece6 <http_parse_request+0x36>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ece2:	625a      	str	r2, [r3, #36]	; 0x24
 800ece4:	e005      	b.n	800ecf2 <http_parse_request+0x42>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ecec:	4618      	mov	r0, r3
 800ecee:	f001 fc7e 	bl	80105ee <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800ecf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ecf4:	f001 fc68 	bl	80105c8 <pbuf_ref>

  if (hs->req->next != NULL) {
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d012      	beq.n	800ed28 <http_parse_request+0x78>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed06:	891b      	ldrh	r3, [r3, #8]
 800ed08:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	bf28      	it	cs
 800ed10:	4613      	movcs	r3, r2
 800ed12:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ed18:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	4954      	ldr	r1, [pc, #336]	; (800ee70 <http_parse_request+0x1c0>)
 800ed1e:	f001 fd2f 	bl	8010780 <pbuf_copy_partial>
    data = httpd_req_buf;
 800ed22:	4b53      	ldr	r3, [pc, #332]	; (800ee70 <http_parse_request+0x1c0>)
 800ed24:	637b      	str	r3, [r7, #52]	; 0x34
 800ed26:	e005      	b.n	800ed34 <http_parse_request+0x84>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800ed2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed30:	895b      	ldrh	r3, [r3, #10]
 800ed32:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800ed34:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ed36:	2b06      	cmp	r3, #6
 800ed38:	f240 8081 	bls.w	800ee3e <http_parse_request+0x18e>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800ed3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ed3e:	461a      	mov	r2, r3
 800ed40:	494c      	ldr	r1, [pc, #304]	; (800ee74 <http_parse_request+0x1c4>)
 800ed42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed44:	f000 fc0c 	bl	800f560 <lwip_strnstr>
 800ed48:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800ed4a:	6a3b      	ldr	r3, [r7, #32]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d076      	beq.n	800ee3e <http_parse_request+0x18e>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800ed50:	2300      	movs	r3, #0
 800ed52:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800ed54:	2204      	movs	r2, #4
 800ed56:	4948      	ldr	r1, [pc, #288]	; (800ee78 <http_parse_request+0x1c8>)
 800ed58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed5a:	f00b ff87 	bl	801ac6c <strncmp>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d116      	bne.n	800ed92 <http_parse_request+0xe2>
        sp1 = data + 3;
 800ed64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed66:	3303      	adds	r3, #3
 800ed68:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	1c5a      	adds	r2, r3, #1
 800ed6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed70:	1ad3      	subs	r3, r2, r3
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ed76:	1ad3      	subs	r3, r2, r3
 800ed78:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	8b7a      	ldrh	r2, [r7, #26]
 800ed80:	493e      	ldr	r1, [pc, #248]	; (800ee7c <http_parse_request+0x1cc>)
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 fbec 	bl	800f560 <lwip_strnstr>
 800ed88:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800ed8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d111      	bne.n	800edb4 <http_parse_request+0x104>
 800ed90:	e006      	b.n	800eda0 <http_parse_request+0xf0>
        data[4] = 0;
 800ed92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed94:	3304      	adds	r3, #4
 800ed96:	2200      	movs	r2, #0
 800ed98:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800ed9a:	f06f 030f 	mvn.w	r3, #15
 800ed9e:	e063      	b.n	800ee68 <http_parse_request+0x1b8>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	3301      	adds	r3, #1
 800eda4:	8b7a      	ldrh	r2, [r7, #26]
 800eda6:	4933      	ldr	r1, [pc, #204]	; (800ee74 <http_parse_request+0x1c4>)
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 fbd9 	bl	800f560 <lwip_strnstr>
 800edae:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800edb0:	2301      	movs	r3, #1
 800edb2:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	3301      	adds	r3, #1
 800edb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800edbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d03c      	beq.n	800ee3e <http_parse_request+0x18e>
 800edc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d938      	bls.n	800ee3e <http_parse_request+0x18e>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800edcc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800edce:	461a      	mov	r2, r3
 800edd0:	492b      	ldr	r1, [pc, #172]	; (800ee80 <http_parse_request+0x1d0>)
 800edd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edd4:	f000 fbc4 	bl	800f560 <lwip_strnstr>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d02f      	beq.n	800ee3e <http_parse_request+0x18e>
          char *uri = sp1 + 1;
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	3301      	adds	r3, #1
 800ede2:	617b      	str	r3, [r7, #20]
#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
          /* This is HTTP/1.0 compatible: for strict 1.1, a connection
             would always be persistent unless "close" was specified. */
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 800ede4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d116      	bne.n	800ee18 <http_parse_request+0x168>
 800edea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800edec:	461a      	mov	r2, r3
 800edee:	4925      	ldr	r1, [pc, #148]	; (800ee84 <http_parse_request+0x1d4>)
 800edf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800edf2:	f000 fbb5 	bl	800f560 <lwip_strnstr>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d108      	bne.n	800ee0e <http_parse_request+0x15e>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 800edfc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800edfe:	461a      	mov	r2, r3
 800ee00:	4921      	ldr	r1, [pc, #132]	; (800ee88 <http_parse_request+0x1d8>)
 800ee02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee04:	f000 fbac 	bl	800f560 <lwip_strnstr>
 800ee08:	4603      	mov	r3, r0
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d004      	beq.n	800ee18 <http_parse_request+0x168>
            hs->keepalive = 1;
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	2201      	movs	r2, #1
 800ee12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800ee16:	e003      	b.n	800ee20 <http_parse_request+0x170>
          } else {
            hs->keepalive = 0;
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	2200      	movs	r2, #0
 800ee24:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800ee26:	8b3b      	ldrh	r3, [r7, #24]
 800ee28:	697a      	ldr	r2, [r7, #20]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800ee30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee32:	6979      	ldr	r1, [r7, #20]
 800ee34:	68b8      	ldr	r0, [r7, #8]
 800ee36:	f000 f87b 	bl	800ef30 <http_find_file>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	e014      	b.n	800ee68 <http_parse_request+0x1b8>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee42:	4618      	mov	r0, r3
 800ee44:	f001 fba9 	bl	801059a <pbuf_clen>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee50:	891b      	ldrh	r3, [r3, #8]
 800ee52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee56:	d205      	bcs.n	800ee64 <http_parse_request+0x1b4>
 800ee58:	8a7b      	ldrh	r3, [r7, #18]
 800ee5a:	2b05      	cmp	r3, #5
 800ee5c:	d802      	bhi.n	800ee64 <http_parse_request+0x1b4>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800ee5e:	f06f 0304 	mvn.w	r3, #4
 800ee62:	e001      	b.n	800ee68 <http_parse_request+0x1b8>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800ee64:	f06f 030f 	mvn.w	r3, #15
  }
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3738      	adds	r7, #56	; 0x38
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}
 800ee70:	20007328 	.word	0x20007328
 800ee74:	0801be0c 	.word	0x0801be0c
 800ee78:	0801be10 	.word	0x0801be10
 800ee7c:	0801be18 	.word	0x0801be18
 800ee80:	0801be1c 	.word	0x0801be1c
 800ee84:	0801be24 	.word	0x0801be24
 800ee88:	0801be3c 	.word	0x0801be3c

0800ee8c <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b088      	sub	sp, #32
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800ee96:	2300      	movs	r3, #0
 800ee98:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d040      	beq.n	800ef22 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800eea0:	2300      	movs	r3, #0
 800eea2:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800eea4:	213f      	movs	r1, #63	; 0x3f
 800eea6:	6838      	ldr	r0, [r7, #0]
 800eea8:	f00b fed3 	bl	801ac52 <strchr>
 800eeac:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d002      	beq.n	800eeba <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	613b      	str	r3, [r7, #16]
    ext = uri;
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800eec2:	212e      	movs	r1, #46	; 0x2e
 800eec4:	6938      	ldr	r0, [r7, #16]
 800eec6:	f00b fec4 	bl	801ac52 <strchr>
 800eeca:	6138      	str	r0, [r7, #16]
 800eecc:	e009      	b.n	800eee2 <http_uri_is_ssi+0x56>
      ext = sub;
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	617b      	str	r3, [r7, #20]
      sub++;
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	3301      	adds	r3, #1
 800eed6:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800eed8:	212e      	movs	r1, #46	; 0x2e
 800eeda:	6938      	ldr	r0, [r7, #16]
 800eedc:	f00b feb9 	bl	801ac52 <strchr>
 800eee0:	6138      	str	r0, [r7, #16]
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d1f2      	bne.n	800eece <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800eee8:	2300      	movs	r3, #0
 800eeea:	61fb      	str	r3, [r7, #28]
 800eeec:	e010      	b.n	800ef10 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800eeee:	4a0f      	ldr	r2, [pc, #60]	; (800ef2c <http_uri_is_ssi+0xa0>)
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eef6:	4619      	mov	r1, r3
 800eef8:	6978      	ldr	r0, [r7, #20]
 800eefa:	f000 fb67 	bl	800f5cc <lwip_stricmp>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d102      	bne.n	800ef0a <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800ef04:	2301      	movs	r3, #1
 800ef06:	76fb      	strb	r3, [r7, #27]
        break;
 800ef08:	e005      	b.n	800ef16 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800ef0a:	69fb      	ldr	r3, [r7, #28]
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	61fb      	str	r3, [r7, #28]
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	2b04      	cmp	r3, #4
 800ef14:	d9eb      	bls.n	800eeee <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d002      	beq.n	800ef22 <http_uri_is_ssi+0x96>
      *param = '?';
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	223f      	movs	r2, #63	; 0x3f
 800ef20:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800ef22:	7efb      	ldrb	r3, [r7, #27]
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3720      	adds	r7, #32
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	0801d124 	.word	0x0801d124

0800ef30 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b092      	sub	sp, #72	; 0x48
 800ef34:	af02      	add	r7, sp, #8
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800ef40:	2300      	movs	r3, #0
 800ef42:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800ef44:	2300      	movs	r3, #0
 800ef46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f7f1 f961 	bl	8000214 <strlen>
 800ef52:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800ef54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d074      	beq.n	800f044 <http_find_file+0x114>
 800ef5a:	68ba      	ldr	r2, [r7, #8]
 800ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5e:	3b01      	subs	r3, #1
 800ef60:	4413      	add	r3, r2
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	2b2f      	cmp	r3, #47	; 0x2f
 800ef66:	d16d      	bne.n	800f044 <http_find_file+0x114>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800ef68:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800ef6a:	4a63      	ldr	r2, [pc, #396]	; (800f0f8 <http_find_file+0x1c8>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d102      	bne.n	800ef76 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800ef70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d166      	bne.n	800f044 <http_find_file+0x114>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800ef76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	2b3f      	cmp	r3, #63	; 0x3f
 800ef7c:	bf28      	it	cs
 800ef7e:	233f      	movcs	r3, #63	; 0x3f
 800ef80:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800ef82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d00a      	beq.n	800ef9e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	485a      	ldr	r0, [pc, #360]	; (800f0f8 <http_find_file+0x1c8>)
 800ef90:	f00b ff01 	bl	801ad96 <memcpy>
      http_uri_buf[copy_len] = 0;
 800ef94:	4a58      	ldr	r2, [pc, #352]	; (800f0f8 <http_find_file+0x1c8>)
 800ef96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef98:	4413      	add	r3, r2
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800ef9e:	2300      	movs	r3, #0
 800efa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efa2:	e04c      	b.n	800f03e <http_find_file+0x10e>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d028      	beq.n	800effc <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800efb0:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800efb2:	6a3b      	ldr	r3, [r7, #32]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d01e      	beq.n	800eff6 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800efb8:	4a50      	ldr	r2, [pc, #320]	; (800f0fc <http_find_file+0x1cc>)
 800efba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7f1 f927 	bl	8000214 <strlen>
 800efc6:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800efc8:	69fa      	ldr	r2, [r7, #28]
 800efca:	6a3b      	ldr	r3, [r7, #32]
 800efcc:	4293      	cmp	r3, r2
 800efce:	bf28      	it	cs
 800efd0:	4613      	movcs	r3, r2
 800efd2:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	4a48      	ldr	r2, [pc, #288]	; (800f0f8 <http_find_file+0x1c8>)
 800efd8:	1898      	adds	r0, r3, r2
 800efda:	4a48      	ldr	r2, [pc, #288]	; (800f0fc <http_find_file+0x1cc>)
 800efdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efde:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800efe2:	69ba      	ldr	r2, [r7, #24]
 800efe4:	4619      	mov	r1, r3
 800efe6:	f00b fed6 	bl	801ad96 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800efea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	4413      	add	r3, r2
 800eff0:	4a41      	ldr	r2, [pc, #260]	; (800f0f8 <http_find_file+0x1c8>)
 800eff2:	2100      	movs	r1, #0
 800eff4:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800eff6:	4b40      	ldr	r3, [pc, #256]	; (800f0f8 <http_find_file+0x1c8>)
 800eff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800effa:	e004      	b.n	800f006 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800effc:	4a3f      	ldr	r2, [pc, #252]	; (800f0fc <http_find_file+0x1cc>)
 800effe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	3304      	adds	r3, #4
 800f00a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fe ffcd 	bl	800dfac <fs_open>
 800f012:	4603      	mov	r3, r0
 800f014:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800f016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10c      	bne.n	800f038 <http_find_file+0x108>
        uri = file_name;
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	3304      	adds	r3, #4
 800f026:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800f028:	4a34      	ldr	r2, [pc, #208]	; (800f0fc <http_find_file+0x1cc>)
 800f02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f02c:	00db      	lsls	r3, r3, #3
 800f02e:	4413      	add	r3, r2
 800f030:	791b      	ldrb	r3, [r3, #4]
 800f032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI */
        break;
 800f036:	e005      	b.n	800f044 <http_find_file+0x114>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f03a:	3301      	adds	r3, #1
 800f03c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f040:	2b04      	cmp	r3, #4
 800f042:	d9af      	bls.n	800efa4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800f044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f046:	2b00      	cmp	r3, #0
 800f048:	d13b      	bne.n	800f0c2 <http_find_file+0x192>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	213f      	movs	r1, #63	; 0x3f
 800f04e:	4618      	mov	r0, r3
 800f050:	f00b fdff 	bl	801ac52 <strchr>
 800f054:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800f056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d005      	beq.n	800f068 <http_find_file+0x138>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800f05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f05e:	2200      	movs	r2, #0
 800f060:	701a      	strb	r2, [r3, #0]
      params++;
 800f062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f064:	3301      	adds	r3, #1
 800f066:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	3304      	adds	r3, #4
 800f06c:	68ba      	ldr	r2, [r7, #8]
 800f06e:	4611      	mov	r1, r2
 800f070:	4618      	mov	r0, r3
 800f072:	f7fe ff9b 	bl	800dfac <fs_open>
 800f076:	4603      	mov	r3, r0
 800f078:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800f07a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d103      	bne.n	800f08a <http_find_file+0x15a>
      file = &hs->file_handle;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	3304      	adds	r3, #4
 800f086:	63bb      	str	r3, [r7, #56]	; 0x38
 800f088:	e006      	b.n	800f098 <http_find_file+0x168>
    } else {
      file = http_get_404_file(hs, &uri);
 800f08a:	f107 0308 	add.w	r3, r7, #8
 800f08e:	4619      	mov	r1, r3
 800f090:	68f8      	ldr	r0, [r7, #12]
 800f092:	f7ff fdc3 	bl	800ec1c <http_get_404_file>
 800f096:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800f098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d011      	beq.n	800f0c2 <http_find_file+0x192>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800f09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a0:	7c1b      	ldrb	r3, [r3, #16]
 800f0a2:	f003 0308 	and.w	r3, r3, #8
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d003      	beq.n	800f0b2 <http_find_file+0x182>
        tag_check = 1;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0b0:	e007      	b.n	800f0c2 <http_find_file+0x192>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0b8:	f7ff fee8 	bl	800ee8c <http_uri_is_ssi>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800f0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d106      	bne.n	800f0d6 <http_find_file+0x1a6>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800f0c8:	f107 0308 	add.w	r3, r7, #8
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f7ff fda4 	bl	800ec1c <http_get_404_file>
 800f0d4:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800f0d6:	68ba      	ldr	r2, [r7, #8]
 800f0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0da:	9301      	str	r3, [sp, #4]
 800f0dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f000 f809 	bl	800f100 <http_init_file>
 800f0ee:	4603      	mov	r3, r0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3740      	adds	r7, #64	; 0x40
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	20007728 	.word	0x20007728
 800f0fc:	0801d138 	.word	0x0801d138

0800f100 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b088      	sub	sp, #32
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
 800f10c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d05a      	beq.n	800f1ca <http_init_file+0xca>
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800f114:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d01d      	beq.n	800f158 <http_init_file+0x58>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800f11c:	f7ff f816 	bl	800e14c <http_ssi_state_alloc>
 800f120:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d017      	beq.n	800f158 <http_init_file+0x58>
        ssi->tag_index = 0;
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	2200      	movs	r2, #0
 800f12c:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f134:	2200      	movs	r2, #0
 800f136:	771a      	strb	r2, [r3, #28]
        ssi->parsed = file->data;
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	461a      	mov	r2, r3
 800f146:	69fb      	ldr	r3, [r7, #28]
 800f148:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	69fa      	ldr	r2, [r7, #28]
 800f156:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	68ba      	ldr	r2, [r7, #8]
 800f15c:	619a      	str	r2, [r3, #24]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	681a      	ldr	r2, [r3, #0]
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	61da      	str	r2, [r3, #28]
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	461a      	mov	r2, r3
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hs->retries = 0;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d032      	beq.n	800f1e4 <http_init_file+0xe4>
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	699b      	ldr	r3, [r3, #24]
 800f182:	7c1b      	ldrb	r3, [r3, #16]
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d02b      	beq.n	800f1e4 <http_init_file+0xe4>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	69d8      	ldr	r0, [r3, #28]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f194:	461a      	mov	r2, r3
 800f196:	4924      	ldr	r1, [pc, #144]	; (800f228 <http_init_file+0x128>)
 800f198:	f000 f9e2 	bl	800f560 <lwip_strnstr>
 800f19c:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d01f      	beq.n	800f1e4 <http_init_file+0xe4>
        int diff = file_start + 4 - hs->file;
 800f1a4:	69bb      	ldr	r3, [r7, #24]
 800f1a6:	1d1a      	adds	r2, r3, #4
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	69db      	ldr	r3, [r3, #28]
 800f1ac:	1ad3      	subs	r3, r2, r3
 800f1ae:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	69da      	ldr	r2, [r3, #28]
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	441a      	add	r2, r3
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	61da      	str	r2, [r3, #28]
        hs->left -= (u32_t)diff;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	1ad2      	subs	r2, r2, r3
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	629a      	str	r2, [r3, #40]	; 0x28
 800f1c8:	e00c      	b.n	800f1e4 <http_init_file+0xe4>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	619a      	str	r2, [r3, #24]
    hs->file = NULL;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	61da      	str	r2, [r3, #28]
    hs->left = 0;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	629a      	str	r2, [r3, #40]	; 0x28
    hs->retries = 0;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
#else /* LWIP_HTTPD_DYNAMIC_HEADERS */
  LWIP_UNUSED_ARG(uri);
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  if (hs->keepalive) {
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d017      	beq.n	800f21e <http_init_file+0x11e>
#if LWIP_HTTPD_SSI
    if (hs->ssi != NULL) {
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d004      	beq.n	800f200 <http_init_file+0x100>
      hs->keepalive = 0;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800f1fe:	e00e      	b.n	800f21e <http_init_file+0x11e>
    } else
#endif /* LWIP_HTTPD_SSI */
    {
      if ((hs->handle != NULL) &&
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	699b      	ldr	r3, [r3, #24]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00a      	beq.n	800f21e <http_init_file+0x11e>
          ((hs->handle->flags & (FS_FILE_FLAGS_HEADER_INCLUDED | FS_FILE_FLAGS_HEADER_PERSISTENT)) == FS_FILE_FLAGS_HEADER_INCLUDED)) {
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	699b      	ldr	r3, [r3, #24]
 800f20c:	7c1b      	ldrb	r3, [r3, #16]
 800f20e:	f003 0303 	and.w	r3, r3, #3
      if ((hs->handle != NULL) &&
 800f212:	2b01      	cmp	r3, #1
 800f214:	d103      	bne.n	800f21e <http_init_file+0x11e>
        hs->keepalive = 0;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2200      	movs	r2, #0
 800f21a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800f21e:	2300      	movs	r3, #0
}
 800f220:	4618      	mov	r0, r3
 800f222:	3720      	adds	r7, #32
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	0801be1c 	.word	0x0801be1c

0800f22c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	460b      	mov	r3, r1
 800f236:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d002      	beq.n	800f248 <http_err+0x1c>
    http_state_free(hs);
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f7ff f812 	bl	800e26c <http_state_free>
  }
}
 800f248:	bf00      	nop
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af00      	add	r7, sp, #0
 800f256:	60f8      	str	r0, [r7, #12]
 800f258:	60b9      	str	r1, [r7, #8]
 800f25a:	4613      	mov	r3, r2
 800f25c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d101      	bne.n	800f26c <http_sent+0x1c>
    return ERR_OK;
 800f268:	2300      	movs	r3, #0
 800f26a:	e008      	b.n	800f27e <http_sent+0x2e>
  }

  hs->retries = 0;
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	2200      	movs	r2, #0
 800f270:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  http_send(pcb, hs);
 800f274:	6979      	ldr	r1, [r7, #20]
 800f276:	68b8      	ldr	r0, [r7, #8]
 800f278:	f7ff fc8e 	bl	800eb98 <http_send>

  return ERR_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3718      	adds	r7, #24
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}

0800f286 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800f286:	b580      	push	{r7, lr}
 800f288:	b084      	sub	sp, #16
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
 800f28e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d112      	bne.n	800f2c0 <http_poll+0x3a>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800f29a:	2100      	movs	r1, #0
 800f29c:	6838      	ldr	r0, [r7, #0]
 800f29e:	f7ff f89d 	bl	800e3dc <http_close_conn>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	72fb      	strb	r3, [r7, #11]
    LWIP_UNUSED_ARG(closed);
#if LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR
    if (closed == ERR_MEM) {
 800f2a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f2aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2ae:	d105      	bne.n	800f2bc <http_poll+0x36>
      altcp_abort(pcb);
 800f2b0:	6838      	ldr	r0, [r7, #0]
 800f2b2:	f001 fd43 	bl	8010d3c <tcp_abort>
      return ERR_ABRT;
 800f2b6:	f06f 030c 	mvn.w	r3, #12
 800f2ba:	e023      	b.n	800f304 <http_poll+0x7e>
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	e021      	b.n	800f304 <http_poll+0x7e>
  } else {
    hs->retries++;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	b2da      	uxtb	r2, r3
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f2d6:	2b04      	cmp	r3, #4
 800f2d8:	d105      	bne.n	800f2e6 <http_poll+0x60>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800f2da:	68f9      	ldr	r1, [r7, #12]
 800f2dc:	6838      	ldr	r0, [r7, #0]
 800f2de:	f7ff f87d 	bl	800e3dc <http_close_conn>
      return ERR_OK;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	e00e      	b.n	800f304 <http_poll+0x7e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	699b      	ldr	r3, [r3, #24]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d009      	beq.n	800f302 <http_poll+0x7c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800f2ee:	68f9      	ldr	r1, [r7, #12]
 800f2f0:	6838      	ldr	r0, [r7, #0]
 800f2f2:	f7ff fc51 	bl	800eb98 <http_send>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <http_poll+0x7c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800f2fc:	6838      	ldr	r0, [r7, #0]
 800f2fe:	f005 fdb9 	bl	8014e74 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800f302:	2300      	movs	r3, #0
}
 800f304:	4618      	mov	r0, r3
 800f306:	3710      	adds	r7, #16
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b086      	sub	sp, #24
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	607a      	str	r2, [r7, #4]
 800f318:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800f31e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d105      	bne.n	800f332 <http_recv+0x26>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <http_recv+0x26>
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d111      	bne.n	800f356 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d008      	beq.n	800f34a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	891b      	ldrh	r3, [r3, #8]
 800f33c:	4619      	mov	r1, r3
 800f33e:	68b8      	ldr	r0, [r7, #8]
 800f340:	f001 fe7e 	bl	8011040 <tcp_recved>
      pbuf_free(p);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f001 f8d5 	bl	80104f4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800f34a:	6979      	ldr	r1, [r7, #20]
 800f34c:	68b8      	ldr	r0, [r7, #8]
 800f34e:	f7ff f845 	bl	800e3dc <http_close_conn>
    return ERR_OK;
 800f352:	2300      	movs	r3, #0
 800f354:	e03b      	b.n	800f3ce <http_recv+0xc2>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	891b      	ldrh	r3, [r3, #8]
 800f35a:	4619      	mov	r1, r3
 800f35c:	68b8      	ldr	r0, [r7, #8]
 800f35e:	f001 fe6f 	bl	8011040 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	699b      	ldr	r3, [r3, #24]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d12d      	bne.n	800f3c6 <http_recv+0xba>
      err_t parsed = http_parse_request(p, hs, pcb);
 800f36a:	68ba      	ldr	r2, [r7, #8]
 800f36c:	6979      	ldr	r1, [r7, #20]
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff fc9e 	bl	800ecb0 <http_parse_request>
 800f374:	4603      	mov	r3, r0
 800f376:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800f378:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f37c:	f113 0f05 	cmn.w	r3, #5
 800f380:	d00b      	beq.n	800f39a <http_recv+0x8e>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f386:	2b00      	cmp	r3, #0
 800f388:	d007      	beq.n	800f39a <http_recv+0x8e>
          pbuf_free(hs->req);
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f38e:	4618      	mov	r0, r3
 800f390:	f001 f8b0 	bl	80104f4 <pbuf_free>
          hs->req = NULL;
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	2200      	movs	r2, #0
 800f398:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f001 f8aa 	bl	80104f4 <pbuf_free>
      if (parsed == ERR_OK) {
 800f3a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d104      	bne.n	800f3b2 <http_recv+0xa6>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800f3a8:	6979      	ldr	r1, [r7, #20]
 800f3aa:	68b8      	ldr	r0, [r7, #8]
 800f3ac:	f7ff fbf4 	bl	800eb98 <http_send>
 800f3b0:	e00c      	b.n	800f3cc <http_recv+0xc0>
        }
      } else if (parsed == ERR_ARG) {
 800f3b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3b6:	f113 0f10 	cmn.w	r3, #16
 800f3ba:	d107      	bne.n	800f3cc <http_recv+0xc0>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800f3bc:	6979      	ldr	r1, [r7, #20]
 800f3be:	68b8      	ldr	r0, [r7, #8]
 800f3c0:	f7ff f80c 	bl	800e3dc <http_close_conn>
 800f3c4:	e002      	b.n	800f3cc <http_recv+0xc0>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f001 f894 	bl	80104f4 <pbuf_free>
    }
  }
  return ERR_OK;
 800f3cc:	2300      	movs	r3, #0
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3718      	adds	r7, #24
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
	...

0800f3d8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b086      	sub	sp, #24
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800f3e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d102      	bne.n	800f3f4 <http_accept+0x1c>
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d102      	bne.n	800f3fa <http_accept+0x22>
    return ERR_VAL;
 800f3f4:	f06f 0305 	mvn.w	r3, #5
 800f3f8:	e025      	b.n	800f446 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f3fa:	2101      	movs	r1, #1
 800f3fc:	68b8      	ldr	r0, [r7, #8]
 800f3fe:	f002 fa47 	bl	8011890 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800f402:	f7fe fee5 	bl	800e1d0 <http_state_alloc>
 800f406:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d102      	bne.n	800f414 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800f40e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f412:	e018      	b.n	800f446 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	68ba      	ldr	r2, [r7, #8]
 800f418:	621a      	str	r2, [r3, #32]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800f41a:	6979      	ldr	r1, [r7, #20]
 800f41c:	68b8      	ldr	r0, [r7, #8]
 800f41e:	f002 fc03 	bl	8011c28 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800f422:	490b      	ldr	r1, [pc, #44]	; (800f450 <http_accept+0x78>)
 800f424:	68b8      	ldr	r0, [r7, #8]
 800f426:	f002 fc10 	bl	8011c4a <tcp_recv>
  altcp_err(pcb, http_err);
 800f42a:	490a      	ldr	r1, [pc, #40]	; (800f454 <http_accept+0x7c>)
 800f42c:	68b8      	ldr	r0, [r7, #8]
 800f42e:	f002 fc30 	bl	8011c92 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800f432:	2204      	movs	r2, #4
 800f434:	4908      	ldr	r1, [pc, #32]	; (800f458 <http_accept+0x80>)
 800f436:	68b8      	ldr	r0, [r7, #8]
 800f438:	f002 fc54 	bl	8011ce4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800f43c:	4907      	ldr	r1, [pc, #28]	; (800f45c <http_accept+0x84>)
 800f43e:	68b8      	ldr	r0, [r7, #8]
 800f440:	f002 fc15 	bl	8011c6e <tcp_sent>

  return ERR_OK;
 800f444:	2300      	movs	r3, #0
}
 800f446:	4618      	mov	r0, r3
 800f448:	3718      	adds	r7, #24
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	0800f30d 	.word	0x0800f30d
 800f454:	0800f22d 	.word	0x0800f22d
 800f458:	0800f287 	.word	0x0800f287
 800f45c:	0800f251 	.word	0x0800f251

0800f460 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	460b      	mov	r3, r1
 800f46a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d014      	beq.n	800f49c <httpd_init_pcb+0x3c>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f472:	2101      	movs	r1, #1
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f002 fa0b 	bl	8011890 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800f47a:	887b      	ldrh	r3, [r7, #2]
 800f47c:	461a      	mov	r2, r3
 800f47e:	4909      	ldr	r1, [pc, #36]	; (800f4a4 <httpd_init_pcb+0x44>)
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f001 fc67 	bl	8010d54 <tcp_bind>
 800f486:	4603      	mov	r3, r0
 800f488:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
    pcb = altcp_listen(pcb);
 800f48a:	21ff      	movs	r1, #255	; 0xff
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f001 fcf3 	bl	8010e78 <tcp_listen_with_backlog>
 800f492:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
    altcp_accept(pcb, http_accept);
 800f494:	4904      	ldr	r1, [pc, #16]	; (800f4a8 <httpd_init_pcb+0x48>)
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f002 fc0d 	bl	8011cb6 <tcp_accept>
  }
}
 800f49c:	bf00      	nop
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	0801d248 	.word	0x0801d248
 800f4a8:	0800f3d9 	.word	0x0800f3d9

0800f4ac <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
  struct altcp_pcb *pcb;

#if HTTPD_USE_MEM_POOL
  LWIP_MEMPOOL_INIT(HTTPD_STATE);
 800f4b2:	4809      	ldr	r0, [pc, #36]	; (800f4d8 <httpd_init+0x2c>)
 800f4b4:	f000 faba 	bl	800fa2c <memp_init_pool>
#if LWIP_HTTPD_SSI
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
 800f4b8:	4808      	ldr	r0, [pc, #32]	; (800f4dc <httpd_init+0x30>)
 800f4ba:	f000 fab7 	bl	800fa2c <memp_init_pool>
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800f4be:	202e      	movs	r0, #46	; 0x2e
 800f4c0:	f002 fba4 	bl	8011c0c <tcp_new_ip_type>
 800f4c4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800f4c6:	2150      	movs	r1, #80	; 0x50
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f7ff ffc9 	bl	800f460 <httpd_init_pcb>
}
 800f4ce:	bf00      	nop
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	0801d160 	.word	0x0801d160
 800f4dc:	0801d168 	.word	0x0801d168

0800f4e0 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b085      	sub	sp, #20
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
  httpd_ssi_handler = ssi_handler;
 800f4ec:	4a04      	ldr	r2, [pc, #16]	; (800f500 <http_set_ssi_handler+0x20>)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	6013      	str	r3, [r2, #0]
  LWIP_ASSERT("invalid number of tags", num_tags > 0);

  httpd_tags = tags;
  httpd_num_tags = num_tags;
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800f4f2:	bf00      	nop
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	20007768 	.word	0x20007768

0800f504 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	4603      	mov	r3, r0
 800f50c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f50e:	88fb      	ldrh	r3, [r7, #6]
 800f510:	021b      	lsls	r3, r3, #8
 800f512:	b21a      	sxth	r2, r3
 800f514:	88fb      	ldrh	r3, [r7, #6]
 800f516:	0a1b      	lsrs	r3, r3, #8
 800f518:	b29b      	uxth	r3, r3
 800f51a:	b21b      	sxth	r3, r3
 800f51c:	4313      	orrs	r3, r2
 800f51e:	b21b      	sxth	r3, r3
 800f520:	b29b      	uxth	r3, r3
}
 800f522:	4618      	mov	r0, r3
 800f524:	370c      	adds	r7, #12
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr

0800f52e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f52e:	b480      	push	{r7}
 800f530:	b083      	sub	sp, #12
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	061a      	lsls	r2, r3, #24
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	021b      	lsls	r3, r3, #8
 800f53e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f542:	431a      	orrs	r2, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	0a1b      	lsrs	r3, r3, #8
 800f548:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f54c:	431a      	orrs	r2, r3
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	0e1b      	lsrs	r3, r3, #24
 800f552:	4313      	orrs	r3, r2
}
 800f554:	4618      	mov	r0, r3
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b086      	sub	sp, #24
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800f56c:	68b8      	ldr	r0, [r7, #8]
 800f56e:	f7f0 fe51 	bl	8000214 <strlen>
 800f572:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d101      	bne.n	800f57e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	e022      	b.n	800f5c4 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	617b      	str	r3, [r7, #20]
 800f582:	e012      	b.n	800f5aa <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	781a      	ldrb	r2, [r3, #0]
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d109      	bne.n	800f5a4 <lwip_strnstr+0x44>
 800f590:	693a      	ldr	r2, [r7, #16]
 800f592:	68b9      	ldr	r1, [r7, #8]
 800f594:	6978      	ldr	r0, [r7, #20]
 800f596:	f00b fb69 	bl	801ac6c <strncmp>
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d101      	bne.n	800f5a4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	e00f      	b.n	800f5c4 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	617b      	str	r3, [r7, #20]
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d007      	beq.n	800f5c2 <lwip_strnstr+0x62>
 800f5b2:	697a      	ldr	r2, [r7, #20]
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	441a      	add	r2, r3
 800f5b8:	68f9      	ldr	r1, [r7, #12]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	440b      	add	r3, r1
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d9e0      	bls.n	800f584 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3718      	adds	r7, #24
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	1c5a      	adds	r2, r3, #1
 800f5da:	607a      	str	r2, [r7, #4]
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	1c5a      	adds	r2, r3, #1
 800f5e4:	603a      	str	r2, [r7, #0]
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800f5ea:	7bfa      	ldrb	r2, [r7, #15]
 800f5ec:	7bbb      	ldrb	r3, [r7, #14]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d016      	beq.n	800f620 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800f5f2:	7bfb      	ldrb	r3, [r7, #15]
 800f5f4:	f043 0320 	orr.w	r3, r3, #32
 800f5f8:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800f5fa:	7b7b      	ldrb	r3, [r7, #13]
 800f5fc:	2b60      	cmp	r3, #96	; 0x60
 800f5fe:	d90c      	bls.n	800f61a <lwip_stricmp+0x4e>
 800f600:	7b7b      	ldrb	r3, [r7, #13]
 800f602:	2b7a      	cmp	r3, #122	; 0x7a
 800f604:	d809      	bhi.n	800f61a <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800f606:	7bbb      	ldrb	r3, [r7, #14]
 800f608:	f043 0320 	orr.w	r3, r3, #32
 800f60c:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800f60e:	7b7a      	ldrb	r2, [r7, #13]
 800f610:	7b3b      	ldrb	r3, [r7, #12]
 800f612:	429a      	cmp	r2, r3
 800f614:	d003      	beq.n	800f61e <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800f616:	2301      	movs	r3, #1
 800f618:	e006      	b.n	800f628 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800f61a:	2301      	movs	r3, #1
 800f61c:	e004      	b.n	800f628 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800f61e:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800f620:	7bfb      	ldrb	r3, [r7, #15]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d1d7      	bne.n	800f5d6 <lwip_stricmp+0xa>
  return 0;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3714      	adds	r7, #20
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <lwip_standard_chksum>:
 *
 * by Curt McDowell, Broadcom Corp. December 8th, 2005
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f634:	b480      	push	{r7}
 800f636:	b08b      	sub	sp, #44	; 0x2c
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	627b      	str	r3, [r7, #36]	; 0x24
  const u16_t *ps;
  u16_t t = 0;
 800f642:	2300      	movs	r3, #0
 800f644:	81fb      	strh	r3, [r7, #14]
  const u32_t *pl;
  u32_t sum = 0, tmp;
 800f646:	2300      	movs	r3, #0
 800f648:	61bb      	str	r3, [r7, #24]
  /* starts at odd byte address? */
  int odd = ((mem_ptr_t)pb & 1);
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	f003 0301 	and.w	r3, r3, #1
 800f650:	613b      	str	r3, [r7, #16]

  if (odd && len > 0) {
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d00d      	beq.n	800f674 <lwip_standard_chksum+0x40>
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	dd0a      	ble.n	800f674 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f65e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f660:	1c53      	adds	r3, r2, #1
 800f662:	627b      	str	r3, [r7, #36]	; 0x24
 800f664:	f107 030e 	add.w	r3, r7, #14
 800f668:	3301      	adds	r3, #1
 800f66a:	7812      	ldrb	r2, [r2, #0]
 800f66c:	701a      	strb	r2, [r3, #0]
    len--;
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	3b01      	subs	r3, #1
 800f672:	603b      	str	r3, [r7, #0]
  }

  ps = (const u16_t *)(const void *)pb;
 800f674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f676:	623b      	str	r3, [r7, #32]

  if (((mem_ptr_t)ps & 3) && len > 1) {
 800f678:	6a3b      	ldr	r3, [r7, #32]
 800f67a:	f003 0303 	and.w	r3, r3, #3
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d00d      	beq.n	800f69e <lwip_standard_chksum+0x6a>
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	2b01      	cmp	r3, #1
 800f686:	dd0a      	ble.n	800f69e <lwip_standard_chksum+0x6a>
    sum += *ps++;
 800f688:	6a3b      	ldr	r3, [r7, #32]
 800f68a:	1c9a      	adds	r2, r3, #2
 800f68c:	623a      	str	r2, [r7, #32]
 800f68e:	881b      	ldrh	r3, [r3, #0]
 800f690:	461a      	mov	r2, r3
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	4413      	add	r3, r2
 800f696:	61bb      	str	r3, [r7, #24]
    len -= 2;
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	3b02      	subs	r3, #2
 800f69c:	603b      	str	r3, [r7, #0]
  }

  pl = (const u32_t *)(const void *)ps;
 800f69e:	6a3b      	ldr	r3, [r7, #32]
 800f6a0:	61fb      	str	r3, [r7, #28]

  while (len > 7)  {
 800f6a2:	e01e      	b.n	800f6e2 <lwip_standard_chksum+0xae>
    tmp = sum + *pl++;          /* ping */
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	1d1a      	adds	r2, r3, #4
 800f6a8:	61fa      	str	r2, [r7, #28]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	69ba      	ldr	r2, [r7, #24]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	617b      	str	r3, [r7, #20]
    if (tmp < sum) {
 800f6b2:	697a      	ldr	r2, [r7, #20]
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d202      	bcs.n	800f6c0 <lwip_standard_chksum+0x8c>
      tmp++;                    /* add back carry */
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	617b      	str	r3, [r7, #20]
    }

    sum = tmp + *pl++;          /* pong */
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	1d1a      	adds	r2, r3, #4
 800f6c4:	61fa      	str	r2, [r7, #28]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	697a      	ldr	r2, [r7, #20]
 800f6ca:	4413      	add	r3, r2
 800f6cc:	61bb      	str	r3, [r7, #24]
    if (sum < tmp) {
 800f6ce:	69ba      	ldr	r2, [r7, #24]
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d202      	bcs.n	800f6dc <lwip_standard_chksum+0xa8>
      sum++;                    /* add back carry */
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	61bb      	str	r3, [r7, #24]
    }

    len -= 8;
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	3b08      	subs	r3, #8
 800f6e0:	603b      	str	r3, [r7, #0]
  while (len > 7)  {
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	2b07      	cmp	r3, #7
 800f6e6:	dcdd      	bgt.n	800f6a4 <lwip_standard_chksum+0x70>
  }

  /* make room in upper bits */
  sum = FOLD_U32T(sum);
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	0c1a      	lsrs	r2, r3, #16
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	b29b      	uxth	r3, r3
 800f6f0:	4413      	add	r3, r2
 800f6f2:	61bb      	str	r3, [r7, #24]

  ps = (const u16_t *)pl;
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	623b      	str	r3, [r7, #32]

  /* 16-bit aligned word remaining? */
  while (len > 1) {
 800f6f8:	e00a      	b.n	800f710 <lwip_standard_chksum+0xdc>
    sum += *ps++;
 800f6fa:	6a3b      	ldr	r3, [r7, #32]
 800f6fc:	1c9a      	adds	r2, r3, #2
 800f6fe:	623a      	str	r2, [r7, #32]
 800f700:	881b      	ldrh	r3, [r3, #0]
 800f702:	461a      	mov	r2, r3
 800f704:	69bb      	ldr	r3, [r7, #24]
 800f706:	4413      	add	r3, r2
 800f708:	61bb      	str	r3, [r7, #24]
    len -= 2;
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	3b02      	subs	r3, #2
 800f70e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	2b01      	cmp	r3, #1
 800f714:	dcf1      	bgt.n	800f6fa <lwip_standard_chksum+0xc6>
  }

  /* dangling tail byte remaining? */
  if (len > 0) {                /* include odd byte */
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	dd04      	ble.n	800f726 <lwip_standard_chksum+0xf2>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f71c:	f107 030e 	add.w	r3, r7, #14
 800f720:	6a3a      	ldr	r2, [r7, #32]
 800f722:	7812      	ldrb	r2, [r2, #0]
 800f724:	701a      	strb	r2, [r3, #0]
  }

  sum += t;                     /* add end bytes */
 800f726:	89fb      	ldrh	r3, [r7, #14]
 800f728:	461a      	mov	r2, r3
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	4413      	add	r3, r2
 800f72e:	61bb      	str	r3, [r7, #24]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	0c1a      	lsrs	r2, r3, #16
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	b29b      	uxth	r3, r3
 800f738:	4413      	add	r3, r2
 800f73a:	61bb      	str	r3, [r7, #24]
  sum = FOLD_U32T(sum);
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	0c1a      	lsrs	r2, r3, #16
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	b29b      	uxth	r3, r3
 800f744:	4413      	add	r3, r2
 800f746:	61bb      	str	r3, [r7, #24]

  if (odd) {
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d007      	beq.n	800f75e <lwip_standard_chksum+0x12a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	021b      	lsls	r3, r3, #8
 800f752:	b29a      	uxth	r2, r3
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	0a1b      	lsrs	r3, r3, #8
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	4313      	orrs	r3, r2
 800f75c:	61bb      	str	r3, [r7, #24]
  }

  return (u16_t)sum;
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	b29b      	uxth	r3, r3
}
 800f762:	4618      	mov	r0, r3
 800f764:	372c      	adds	r7, #44	; 0x2c
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr

0800f76e <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800f76e:	b580      	push	{r7, lr}
 800f770:	b086      	sub	sp, #24
 800f772:	af00      	add	r7, sp, #0
 800f774:	60f8      	str	r0, [r7, #12]
 800f776:	607b      	str	r3, [r7, #4]
 800f778:	460b      	mov	r3, r1
 800f77a:	72fb      	strb	r3, [r7, #11]
 800f77c:	4613      	mov	r3, r2
 800f77e:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800f780:	2300      	movs	r3, #0
 800f782:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	617b      	str	r3, [r7, #20]
 800f788:	e02b      	b.n	800f7e2 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	685a      	ldr	r2, [r3, #4]
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	895b      	ldrh	r3, [r3, #10]
 800f792:	4619      	mov	r1, r3
 800f794:	4610      	mov	r0, r2
 800f796:	f7ff ff4d 	bl	800f634 <lwip_standard_chksum>
 800f79a:	4603      	mov	r3, r0
 800f79c:	461a      	mov	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	0c1a      	lsrs	r2, r3, #16
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	4413      	add	r3, r2
 800f7ae:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	895b      	ldrh	r3, [r3, #10]
 800f7b4:	f003 0301 	and.w	r3, r3, #1
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d00e      	beq.n	800f7dc <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	bf0c      	ite	eq
 800f7c4:	2301      	moveq	r3, #1
 800f7c6:	2300      	movne	r3, #0
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	021b      	lsls	r3, r3, #8
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	0a1b      	lsrs	r3, r3, #8
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	617b      	str	r3, [r7, #20]
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d1d0      	bne.n	800f78a <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d007      	beq.n	800f7fe <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	021b      	lsls	r3, r3, #8
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	0a1b      	lsrs	r3, r3, #8
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800f7fe:	7afb      	ldrb	r3, [r7, #11]
 800f800:	b29b      	uxth	r3, r3
 800f802:	4618      	mov	r0, r3
 800f804:	f7ff fe7e 	bl	800f504 <lwip_htons>
 800f808:	4603      	mov	r3, r0
 800f80a:	461a      	mov	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4413      	add	r3, r2
 800f810:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800f812:	893b      	ldrh	r3, [r7, #8]
 800f814:	4618      	mov	r0, r3
 800f816:	f7ff fe75 	bl	800f504 <lwip_htons>
 800f81a:	4603      	mov	r3, r0
 800f81c:	461a      	mov	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4413      	add	r3, r2
 800f822:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	0c1a      	lsrs	r2, r3, #16
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	4413      	add	r3, r2
 800f82e:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	0c1a      	lsrs	r2, r3, #16
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	b29b      	uxth	r3, r3
 800f838:	4413      	add	r3, r2
 800f83a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	b29b      	uxth	r3, r3
 800f840:	43db      	mvns	r3, r3
 800f842:	b29b      	uxth	r3, r3
}
 800f844:	4618      	mov	r0, r3
 800f846:	3718      	adds	r7, #24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	607b      	str	r3, [r7, #4]
 800f856:	460b      	mov	r3, r1
 800f858:	72fb      	strb	r3, [r7, #11]
 800f85a:	4613      	mov	r3, r2
 800f85c:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	b29b      	uxth	r3, r3
 800f868:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	0c1b      	lsrs	r3, r3, #16
 800f86e:	693a      	ldr	r2, [r7, #16]
 800f870:	4413      	add	r3, r2
 800f872:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	693a      	ldr	r2, [r7, #16]
 800f880:	4413      	add	r3, r2
 800f882:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	0c1b      	lsrs	r3, r3, #16
 800f888:	693a      	ldr	r2, [r7, #16]
 800f88a:	4413      	add	r3, r2
 800f88c:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	0c1a      	lsrs	r2, r3, #16
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	b29b      	uxth	r3, r3
 800f896:	4413      	add	r3, r2
 800f898:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	0c1a      	lsrs	r2, r3, #16
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	4413      	add	r3, r2
 800f8a4:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800f8a6:	893a      	ldrh	r2, [r7, #8]
 800f8a8:	7af9      	ldrb	r1, [r7, #11]
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f7ff ff5e 	bl	800f76e <inet_cksum_pseudo_base>
 800f8b2:	4603      	mov	r3, r0
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3718      	adds	r7, #24
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b086      	sub	sp, #24
 800f8c0:	af02      	add	r7, sp, #8
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	607b      	str	r3, [r7, #4]
 800f8c6:	460b      	mov	r3, r1
 800f8c8:	72fb      	strb	r3, [r7, #11]
 800f8ca:	4613      	mov	r3, r2
 800f8cc:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800f8ce:	893a      	ldrh	r2, [r7, #8]
 800f8d0:	7af9      	ldrb	r1, [r7, #11]
 800f8d2:	69bb      	ldr	r3, [r7, #24]
 800f8d4:	9300      	str	r3, [sp, #0]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f7ff ffb7 	bl	800f84c <inet_chksum_pseudo>
 800f8de:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f8f4:	887b      	ldrh	r3, [r7, #2]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7ff fe9b 	bl	800f634 <lwip_standard_chksum>
 800f8fe:	4603      	mov	r3, r0
 800f900:	43db      	mvns	r3, r3
 800f902:	b29b      	uxth	r3, r3
}
 800f904:	4618      	mov	r0, r3
 800f906:	3708      	adds	r7, #8
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b086      	sub	sp, #24
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f914:	2300      	movs	r3, #0
 800f916:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f918:	2300      	movs	r3, #0
 800f91a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	613b      	str	r3, [r7, #16]
 800f920:	e02b      	b.n	800f97a <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	685a      	ldr	r2, [r3, #4]
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	895b      	ldrh	r3, [r3, #10]
 800f92a:	4619      	mov	r1, r3
 800f92c:	4610      	mov	r0, r2
 800f92e:	f7ff fe81 	bl	800f634 <lwip_standard_chksum>
 800f932:	4603      	mov	r3, r0
 800f934:	461a      	mov	r2, r3
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	4413      	add	r3, r2
 800f93a:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	0c1a      	lsrs	r2, r3, #16
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	b29b      	uxth	r3, r3
 800f944:	4413      	add	r3, r2
 800f946:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	895b      	ldrh	r3, [r3, #10]
 800f94c:	f003 0301 	and.w	r3, r3, #1
 800f950:	b29b      	uxth	r3, r3
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00e      	beq.n	800f974 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	bf0c      	ite	eq
 800f95c:	2301      	moveq	r3, #1
 800f95e:	2300      	movne	r3, #0
 800f960:	b2db      	uxtb	r3, r3
 800f962:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	021b      	lsls	r3, r3, #8
 800f968:	b29a      	uxth	r2, r3
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	0a1b      	lsrs	r3, r3, #8
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	4313      	orrs	r3, r2
 800f972:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	613b      	str	r3, [r7, #16]
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d1d0      	bne.n	800f922 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d007      	beq.n	800f996 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	021b      	lsls	r3, r3, #8
 800f98a:	b29a      	uxth	r2, r3
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	0a1b      	lsrs	r3, r3, #8
 800f990:	b2db      	uxtb	r3, r3
 800f992:	4313      	orrs	r3, r2
 800f994:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	b29b      	uxth	r3, r3
 800f99a:	43db      	mvns	r3, r3
 800f99c:	b29b      	uxth	r3, r3
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3718      	adds	r7, #24
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b082      	sub	sp, #8
 800f9aa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 800f9b0:	f000 ff62 	bl	8010878 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800f9b4:	f000 f80e 	bl	800f9d4 <mem_init>
  memp_init();
 800f9b8:	f000 f842 	bl	800fa40 <memp_init>
  pbuf_init();
  netif_init();
 800f9bc:	f000 f8da 	bl	800fb74 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f9c0:	f006 f9c6 	bl	8015d50 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f9c4:	f000 ff60 	bl	8010888 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f9c8:	f006 f948 	bl	8015c5c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f9cc:	bf00      	nop
 800f9ce:	3708      	adds	r7, #8
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <mem_init>:
/** mem_init is not used when using pools instead of a heap or using
 * C library malloc().
 */
void
mem_init(void)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	af00      	add	r7, sp, #0
}
 800f9d8:	bf00      	nop
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr

0800f9e2 <mem_trim>:
 * C library malloc(): we can't free part of a pool element and the stack
 * support mem_trim() to return a different pointer
 */
void *
mem_trim(void *mem, mem_size_t size)
{
 800f9e2:	b480      	push	{r7}
 800f9e4:	b083      	sub	sp, #12
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	6039      	str	r1, [r7, #0]
  LWIP_UNUSED_ARG(size);
  return mem;
 800f9ec:	687b      	ldr	r3, [r7, #4]
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	370c      	adds	r7, #12
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr

0800f9fa <mem_malloc>:
 *
 * Note that the returned value must always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
  void *ret = mem_clib_malloc(size + MEM_LIBC_STATSHELPER_SIZE);
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f00a fea0 	bl	801a748 <malloc>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	60fb      	str	r3, [r7, #12]
    *(mem_size_t *)ret = size;
    ret = (u8_t *)ret + MEM_LIBC_STATSHELPER_SIZE;
    MEM_STATS_INC_USED_LOCKED(used, size);
#endif
  }
  return ret;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <mem_free>:
 *
 * @param rmem is the pointer as returned by a previous call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b082      	sub	sp, #8
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("rmem == MEM_ALIGN(rmem)", (rmem == LWIP_MEM_ALIGN(rmem)));
#if LWIP_STATS && MEM_STATS
  rmem = (u8_t *)rmem - MEM_LIBC_STATSHELPER_SIZE;
  MEM_STATS_DEC_USED_LOCKED(used, *(mem_size_t *)rmem);
#endif
  mem_clib_free(rmem);
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f00a fe9a 	bl	801a758 <free>
}
 800fa24:	bf00      	nop
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}

0800fa2c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fa34:	bf00      	nop
 800fa36:	370c      	adds	r7, #12
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fa46:	2300      	movs	r3, #0
 800fa48:	80fb      	strh	r3, [r7, #6]
 800fa4a:	e009      	b.n	800fa60 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fa4c:	88fb      	ldrh	r3, [r7, #6]
 800fa4e:	4a08      	ldr	r2, [pc, #32]	; (800fa70 <memp_init+0x30>)
 800fa50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff ffe9 	bl	800fa2c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fa5a:	88fb      	ldrh	r3, [r7, #6]
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	80fb      	strh	r3, [r7, #6]
 800fa60:	88fb      	ldrh	r3, [r7, #6]
 800fa62:	2b09      	cmp	r3, #9
 800fa64:	d9f2      	bls.n	800fa4c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fa66:	bf00      	nop
 800fa68:	bf00      	nop
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	0801d1d0 	.word	0x0801d1d0

0800fa74 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	889b      	ldrh	r3, [r3, #4]
 800fa80:	3303      	adds	r3, #3
 800fa82:	f023 0303 	bic.w	r3, r3, #3
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7ff ffb7 	bl	800f9fa <mem_malloc>
 800fa8c:	60f8      	str	r0, [r7, #12]
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <do_memp_malloc_pool+0x24>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	e000      	b.n	800fa9a <do_memp_malloc_pool+0x26>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800fa98:	2300      	movs	r3, #0
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3710      	adds	r7, #16
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}

0800faa2 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800faa2:	b580      	push	{r7, lr}
 800faa4:	b082      	sub	sp, #8
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  if (desc == NULL) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <memp_malloc_pool+0x12>
    return NULL;
 800fab0:	2300      	movs	r3, #0
 800fab2:	e003      	b.n	800fabc <memp_malloc_pool+0x1a>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7ff ffdd 	bl	800fa74 <do_memp_malloc_pool>
 800faba:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	4603      	mov	r3, r0
 800facc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800face:	79fb      	ldrb	r3, [r7, #7]
 800fad0:	2b09      	cmp	r3, #9
 800fad2:	d901      	bls.n	800fad8 <memp_malloc+0x14>
 800fad4:	2300      	movs	r3, #0
 800fad6:	e008      	b.n	800faea <memp_malloc+0x26>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fad8:	79fb      	ldrb	r3, [r7, #7]
 800fada:	4a06      	ldr	r2, [pc, #24]	; (800faf4 <memp_malloc+0x30>)
 800fadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7ff ffc7 	bl	800fa74 <do_memp_malloc_pool>
 800fae6:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fae8:	68fb      	ldr	r3, [r7, #12]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop
 800faf4:	0801d1d0 	.word	0x0801d1d0

0800faf8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	60fb      	str	r3, [r7, #12]
#endif

#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
 800fb06:	68f8      	ldr	r0, [r7, #12]
 800fb08:	f7ff ff85 	bl	800fa16 <mem_free>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800fb0c:	bf00      	nop
 800fb0e:	3710      	adds	r7, #16
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  if ((desc == NULL) || (mem == NULL)) {
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d007      	beq.n	800fb34 <memp_free_pool+0x20>
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d004      	beq.n	800fb34 <memp_free_pool+0x20>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7ff ffe3 	bl	800faf8 <do_memp_free_pool>
 800fb32:	e000      	b.n	800fb36 <memp_free_pool+0x22>
    return;
 800fb34:	bf00      	nop
}
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	4603      	mov	r3, r0
 800fb44:	6039      	str	r1, [r7, #0]
 800fb46:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fb48:	79fb      	ldrb	r3, [r7, #7]
 800fb4a:	2b09      	cmp	r3, #9
 800fb4c:	d80c      	bhi.n	800fb68 <memp_free+0x2c>

  if (mem == NULL) {
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d008      	beq.n	800fb66 <memp_free+0x2a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fb54:	79fb      	ldrb	r3, [r7, #7]
 800fb56:	4a06      	ldr	r2, [pc, #24]	; (800fb70 <memp_free+0x34>)
 800fb58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7ff ffca 	bl	800faf8 <do_memp_free_pool>
 800fb64:	e000      	b.n	800fb68 <memp_free+0x2c>
    return;
 800fb66:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}
 800fb6e:	bf00      	nop
 800fb70:	0801d1d0 	.word	0x0801d1d0

0800fb74 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fb74:	b480      	push	{r7}
 800fb76:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fb78:	bf00      	nop
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
	...

0800fb84 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b086      	sub	sp, #24
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
 800fb90:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d101      	bne.n	800fb9c <netif_add+0x18>
 800fb98:	2300      	movs	r3, #0
 800fb9a:	e08a      	b.n	800fcb2 <netif_add+0x12e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d101      	bne.n	800fba6 <netif_add+0x22>
 800fba2:	2300      	movs	r3, #0
 800fba4:	e085      	b.n	800fcb2 <netif_add+0x12e>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d101      	bne.n	800fbb0 <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fbac:	4b43      	ldr	r3, [pc, #268]	; (800fcbc <netif_add+0x138>)
 800fbae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d101      	bne.n	800fbba <netif_add+0x36>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fbb6:	4b41      	ldr	r3, [pc, #260]	; (800fcbc <netif_add+0x138>)
 800fbb8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d101      	bne.n	800fbc4 <netif_add+0x40>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fbc0:	4b3e      	ldr	r3, [pc, #248]	; (800fcbc <netif_add+0x138>)
 800fbc2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	4a39      	ldr	r2, [pc, #228]	; (800fcc0 <netif_add+0x13c>)
 800fbda:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	3320      	adds	r3, #32
 800fbee:	2204      	movs	r2, #4
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f00b f825 	bl	801ac42 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	6a3a      	ldr	r2, [r7, #32]
 800fbfc:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800fbfe:	4b31      	ldr	r3, [pc, #196]	; (800fcc4 <netif_add+0x140>)
 800fc00:	781a      	ldrb	r2, [r3, #0]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc0c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	68b9      	ldr	r1, [r7, #8]
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f000 f8d7 	bl	800fdc8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	68f8      	ldr	r0, [r7, #12]
 800fc1e:	4798      	blx	r3
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d001      	beq.n	800fc2a <netif_add+0xa6>
    return NULL;
 800fc26:	2300      	movs	r3, #0
 800fc28:	e043      	b.n	800fcb2 <netif_add+0x12e>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc30:	2bff      	cmp	r3, #255	; 0xff
 800fc32:	d103      	bne.n	800fc3c <netif_add+0xb8>
        netif->num = 0;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	617b      	str	r3, [r7, #20]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc40:	4b21      	ldr	r3, [pc, #132]	; (800fcc8 <netif_add+0x144>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	613b      	str	r3, [r7, #16]
 800fc46:	e016      	b.n	800fc76 <netif_add+0xf2>
        LWIP_ASSERT("netif already added", netif2 != netif);
        num_netifs++;
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	617b      	str	r3, [r7, #20]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
        if (netif2->num == netif->num) {
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d108      	bne.n	800fc70 <netif_add+0xec>
          netif->num++;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc64:	3301      	adds	r3, #1
 800fc66:	b2da      	uxtb	r2, r3
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800fc6e:	e005      	b.n	800fc7c <netif_add+0xf8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	613b      	str	r3, [r7, #16]
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d1e5      	bne.n	800fc48 <netif_add+0xc4>
        }
      }
    } while (netif2 != NULL);
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1d3      	bne.n	800fc2a <netif_add+0xa6>
  }
  if (netif->num == 254) {
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc88:	2bfe      	cmp	r3, #254	; 0xfe
 800fc8a:	d103      	bne.n	800fc94 <netif_add+0x110>
    netif_num = 0;
 800fc8c:	4b0d      	ldr	r3, [pc, #52]	; (800fcc4 <netif_add+0x140>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	701a      	strb	r2, [r3, #0]
 800fc92:	e006      	b.n	800fca2 <netif_add+0x11e>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	4b09      	ldr	r3, [pc, #36]	; (800fcc4 <netif_add+0x140>)
 800fca0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fca2:	4b09      	ldr	r3, [pc, #36]	; (800fcc8 <netif_add+0x144>)
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fcaa:	4a07      	ldr	r2, [pc, #28]	; (800fcc8 <netif_add+0x144>)
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3718      	adds	r7, #24
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	0801d248 	.word	0x0801d248
 800fcc0:	0800ff5b 	.word	0x0800ff5b
 800fcc4:	20007790 	.word	0x20007790
 800fcc8:	20007788 	.word	0x20007788

0800fccc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fcd6:	6839      	ldr	r1, [r7, #0]
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f002 f90d 	bl	8011ef8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f006 fc6d 	bl	80165c0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fce6:	bf00      	nop
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	b086      	sub	sp, #24
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	60f8      	str	r0, [r7, #12]
 800fcf6:	60b9      	str	r1, [r7, #8]
 800fcf8:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
  LWIP_ASSERT("invalid pointer", old_addr != NULL);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	681a      	ldr	r2, [r3, #0]
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	3304      	adds	r3, #4
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d01c      	beq.n	800fd42 <netif_do_set_ipaddr+0x54>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	3304      	adds	r3, #4
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fd18:	f107 0314 	add.w	r3, r7, #20
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f7ff ffd4 	bl	800fccc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d002      	beq.n	800fd30 <netif_do_set_ipaddr+0x42>
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	e000      	b.n	800fd32 <netif_do_set_ipaddr+0x44>
 800fd30:	2300      	movs	r3, #0
 800fd32:	68fa      	ldr	r2, [r7, #12]
 800fd34:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fd36:	2101      	movs	r1, #1
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f000 f8bd 	bl	800feb8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fd3e:	2301      	movs	r3, #1
 800fd40:	e000      	b.n	800fd44 <netif_do_set_ipaddr+0x56>
  }
  return 0; /* address unchanged */
 800fd42:	2300      	movs	r3, #0
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3718      	adds	r7, #24
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b085      	sub	sp, #20
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	60b9      	str	r1, [r7, #8]
 800fd56:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	3308      	adds	r3, #8
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d00a      	beq.n	800fd7c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d002      	beq.n	800fd72 <netif_do_set_netmask+0x26>
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	e000      	b.n	800fd74 <netif_do_set_netmask+0x28>
 800fd72:	2300      	movs	r3, #0
 800fd74:	68fa      	ldr	r2, [r7, #12]
 800fd76:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e000      	b.n	800fd7e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fd7c:	2300      	movs	r3, #0
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3714      	adds	r7, #20
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr

0800fd8a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fd8a:	b480      	push	{r7}
 800fd8c:	b085      	sub	sp, #20
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	60f8      	str	r0, [r7, #12]
 800fd92:	60b9      	str	r1, [r7, #8]
 800fd94:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	330c      	adds	r3, #12
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d00a      	beq.n	800fdba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d002      	beq.n	800fdb0 <netif_do_set_gw+0x26>
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	e000      	b.n	800fdb2 <netif_do_set_gw+0x28>
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	68fa      	ldr	r2, [r7, #12]
 800fdb4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e000      	b.n	800fdbc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fdba:	2300      	movs	r3, #0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3714      	adds	r7, #20
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b088      	sub	sp, #32
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	60f8      	str	r0, [r7, #12]
 800fdd0:	60b9      	str	r1, [r7, #8]
 800fdd2:	607a      	str	r2, [r7, #4]
 800fdd4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fdda:	2300      	movs	r3, #0
 800fddc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d101      	bne.n	800fde8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fde4:	4b1c      	ldr	r3, [pc, #112]	; (800fe58 <netif_set_addr+0x90>)
 800fde6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d101      	bne.n	800fdf2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fdee:	4b1a      	ldr	r3, [pc, #104]	; (800fe58 <netif_set_addr+0x90>)
 800fdf0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d101      	bne.n	800fdfc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fdf8:	4b17      	ldr	r3, [pc, #92]	; (800fe58 <netif_set_addr+0x90>)
 800fdfa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d003      	beq.n	800fe0a <netif_set_addr+0x42>
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d101      	bne.n	800fe0e <netif_set_addr+0x46>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e000      	b.n	800fe10 <netif_set_addr+0x48>
 800fe0e:	2300      	movs	r3, #0
 800fe10:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d006      	beq.n	800fe26 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fe18:	f107 0310 	add.w	r3, r7, #16
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	68b9      	ldr	r1, [r7, #8]
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f7ff ff64 	bl	800fcee <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fe26:	69fa      	ldr	r2, [r7, #28]
 800fe28:	6879      	ldr	r1, [r7, #4]
 800fe2a:	68f8      	ldr	r0, [r7, #12]
 800fe2c:	f7ff ff8e 	bl	800fd4c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fe30:	69ba      	ldr	r2, [r7, #24]
 800fe32:	6839      	ldr	r1, [r7, #0]
 800fe34:	68f8      	ldr	r0, [r7, #12]
 800fe36:	f7ff ffa8 	bl	800fd8a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d106      	bne.n	800fe4e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fe40:	f107 0310 	add.w	r3, r7, #16
 800fe44:	461a      	mov	r2, r3
 800fe46:	68b9      	ldr	r1, [r7, #8]
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f7ff ff50 	bl	800fcee <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fe4e:	bf00      	nop
 800fe50:	3720      	adds	r7, #32
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	0801d248 	.word	0x0801d248

0800fe5c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fe64:	4a04      	ldr	r2, [pc, #16]	; (800fe78 <netif_set_default+0x1c>)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fe6a:	bf00      	nop
 800fe6c:	370c      	adds	r7, #12
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop
 800fe78:	2000778c 	.word	0x2000778c

0800fe7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d013      	beq.n	800feb2 <netif_set_up+0x36>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe90:	f003 0301 	and.w	r3, r3, #1
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d10c      	bne.n	800feb2 <netif_set_up+0x36>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe9e:	f043 0301 	orr.w	r3, r3, #1
 800fea2:	b2da      	uxtb	r2, r3
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800feaa:	2103      	movs	r1, #3
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 f803 	bl	800feb8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	460b      	mov	r3, r1
 800fec2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800feca:	f003 0304 	and.w	r3, r3, #4
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d01e      	beq.n	800ff10 <netif_issue_reports+0x58>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fed8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d017      	beq.n	800ff10 <netif_issue_reports+0x58>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fee0:	78fb      	ldrb	r3, [r7, #3]
 800fee2:	f003 0301 	and.w	r3, r3, #1
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d013      	beq.n	800ff12 <netif_issue_reports+0x5a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	3304      	adds	r3, #4
 800feee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00e      	beq.n	800ff12 <netif_issue_reports+0x5a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fefa:	f003 0308 	and.w	r3, r3, #8
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d007      	beq.n	800ff12 <netif_issue_reports+0x5a>
      etharp_gratuitous(netif);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	3304      	adds	r3, #4
 800ff06:	4619      	mov	r1, r3
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f008 ffed 	bl	8018ee8 <etharp_request>
 800ff0e:	e000      	b.n	800ff12 <netif_issue_reports+0x5a>
    return;
 800ff10:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d016      	beq.n	800ff54 <netif_set_link_up+0x3c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff2c:	f003 0304 	and.w	r3, r3, #4
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d10f      	bne.n	800ff54 <netif_set_link_up+0x3c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ff3a:	f043 0304 	orr.w	r3, r3, #4
 800ff3e:	b2da      	uxtb	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f006 ff20 	bl	8016d8c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ff4c:	2103      	movs	r1, #3
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7ff ffb2 	bl	800feb8 <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ff54:	3708      	adds	r7, #8
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b085      	sub	sp, #20
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	60f8      	str	r0, [r7, #12]
 800ff62:	60b9      	str	r1, [r7, #8]
 800ff64:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ff66:	f06f 030b 	mvn.w	r3, #11
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3714      	adds	r7, #20
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
	...

0800ff78 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ff82:	79fb      	ldrb	r3, [r7, #7]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d013      	beq.n	800ffb0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ff88:	4b0d      	ldr	r3, [pc, #52]	; (800ffc0 <netif_get_by_index+0x48>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	60fb      	str	r3, [r7, #12]
 800ff8e:	e00c      	b.n	800ffaa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff96:	3301      	adds	r3, #1
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	79fa      	ldrb	r2, [r7, #7]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d101      	bne.n	800ffa4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	e006      	b.n	800ffb2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	60fb      	str	r3, [r7, #12]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d1ef      	bne.n	800ff90 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ffb0:	2300      	movs	r3, #0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3714      	adds	r7, #20
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop
 800ffc0:	20007788 	.word	0x20007788

0800ffc4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ffca:	4b0c      	ldr	r3, [pc, #48]	; (800fffc <pbuf_free_ooseq+0x38>)
 800ffcc:	2200      	movs	r2, #0
 800ffce:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ffd0:	4b0b      	ldr	r3, [pc, #44]	; (8010000 <pbuf_free_ooseq+0x3c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	607b      	str	r3, [r7, #4]
 800ffd6:	e00a      	b.n	800ffee <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d003      	beq.n	800ffe8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f001 ffc7 	bl	8011f74 <tcp_free_ooseq>
      return;
 800ffe6:	e005      	b.n	800fff4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	607b      	str	r3, [r7, #4]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d1f1      	bne.n	800ffd8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800fff4:	3708      	adds	r7, #8
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
 800fffa:	bf00      	nop
 800fffc:	20007791 	.word	0x20007791
 8010000:	20007848 	.word	0x20007848

08010004 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010004:	b480      	push	{r7}
 8010006:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010008:	4b03      	ldr	r3, [pc, #12]	; (8010018 <pbuf_pool_is_empty+0x14>)
 801000a:	2201      	movs	r2, #1
 801000c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801000e:	bf00      	nop
 8010010:	46bd      	mov	sp, r7
 8010012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010016:	4770      	bx	lr
 8010018:	20007791 	.word	0x20007791

0801001c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801001c:	b480      	push	{r7}
 801001e:	b085      	sub	sp, #20
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	4611      	mov	r1, r2
 8010028:	461a      	mov	r2, r3
 801002a:	460b      	mov	r3, r1
 801002c:	80fb      	strh	r3, [r7, #6]
 801002e:	4613      	mov	r3, r2
 8010030:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2200      	movs	r2, #0
 8010036:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	68ba      	ldr	r2, [r7, #8]
 801003c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	88fa      	ldrh	r2, [r7, #6]
 8010042:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	88ba      	ldrh	r2, [r7, #4]
 8010048:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801004a:	8b3b      	ldrh	r3, [r7, #24]
 801004c:	b2da      	uxtb	r2, r3
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	7f3a      	ldrb	r2, [r7, #28]
 8010056:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	2201      	movs	r2, #1
 801005c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	73da      	strb	r2, [r3, #15]
}
 8010064:	bf00      	nop
 8010066:	3714      	adds	r7, #20
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b08c      	sub	sp, #48	; 0x30
 8010074:	af02      	add	r7, sp, #8
 8010076:	4603      	mov	r3, r0
 8010078:	71fb      	strb	r3, [r7, #7]
 801007a:	460b      	mov	r3, r1
 801007c:	80bb      	strh	r3, [r7, #4]
 801007e:	4613      	mov	r3, r2
 8010080:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010082:	79fb      	ldrb	r3, [r7, #7]
 8010084:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010086:	887b      	ldrh	r3, [r7, #2]
 8010088:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801008c:	d065      	beq.n	801015a <pbuf_alloc+0xea>
 801008e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010092:	f300 80a0 	bgt.w	80101d6 <pbuf_alloc+0x166>
 8010096:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801009a:	d010      	beq.n	80100be <pbuf_alloc+0x4e>
 801009c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80100a0:	f300 8099 	bgt.w	80101d6 <pbuf_alloc+0x166>
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	d002      	beq.n	80100ae <pbuf_alloc+0x3e>
 80100a8:	2b41      	cmp	r3, #65	; 0x41
 80100aa:	f040 8094 	bne.w	80101d6 <pbuf_alloc+0x166>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80100ae:	887a      	ldrh	r2, [r7, #2]
 80100b0:	88bb      	ldrh	r3, [r7, #4]
 80100b2:	4619      	mov	r1, r3
 80100b4:	2000      	movs	r0, #0
 80100b6:	f000 f895 	bl	80101e4 <pbuf_alloc_reference>
 80100ba:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80100bc:	e08d      	b.n	80101da <pbuf_alloc+0x16a>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80100be:	2300      	movs	r3, #0
 80100c0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80100c2:	2300      	movs	r3, #0
 80100c4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80100c6:	88bb      	ldrh	r3, [r7, #4]
 80100c8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80100ca:	2009      	movs	r0, #9
 80100cc:	f7ff fcfa 	bl	800fac4 <memp_malloc>
 80100d0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d109      	bne.n	80100ec <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80100d8:	f7ff ff94 	bl	8010004 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80100dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d002      	beq.n	80100e8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80100e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100e4:	f000 fa06 	bl	80104f4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80100e8:	2300      	movs	r3, #0
 80100ea:	e077      	b.n	80101dc <pbuf_alloc+0x16c>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80100ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80100ee:	3303      	adds	r3, #3
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	f023 0303 	bic.w	r3, r3, #3
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
 80100fc:	3304      	adds	r3, #4
 80100fe:	b29b      	uxth	r3, r3
 8010100:	8b7a      	ldrh	r2, [r7, #26]
 8010102:	4293      	cmp	r3, r2
 8010104:	bf28      	it	cs
 8010106:	4613      	movcs	r3, r2
 8010108:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801010a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801010c:	3310      	adds	r3, #16
 801010e:	693a      	ldr	r2, [r7, #16]
 8010110:	4413      	add	r3, r2
 8010112:	3303      	adds	r3, #3
 8010114:	f023 0303 	bic.w	r3, r3, #3
 8010118:	4618      	mov	r0, r3
 801011a:	89f9      	ldrh	r1, [r7, #14]
 801011c:	8b7a      	ldrh	r2, [r7, #26]
 801011e:	2300      	movs	r3, #0
 8010120:	9301      	str	r3, [sp, #4]
 8010122:	887b      	ldrh	r3, [r7, #2]
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	460b      	mov	r3, r1
 8010128:	4601      	mov	r1, r0
 801012a:	6938      	ldr	r0, [r7, #16]
 801012c:	f7ff ff76 	bl	801001c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010132:	2b00      	cmp	r3, #0
 8010134:	d102      	bne.n	801013c <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	627b      	str	r3, [r7, #36]	; 0x24
 801013a:	e002      	b.n	8010142 <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	693a      	ldr	r2, [r7, #16]
 8010140:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010146:	8b7a      	ldrh	r2, [r7, #26]
 8010148:	89fb      	ldrh	r3, [r7, #14]
 801014a:	1ad3      	subs	r3, r2, r3
 801014c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801014e:	2300      	movs	r3, #0
 8010150:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010152:	8b7b      	ldrh	r3, [r7, #26]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d1b8      	bne.n	80100ca <pbuf_alloc+0x5a>
      break;
 8010158:	e03f      	b.n	80101da <pbuf_alloc+0x16a>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801015a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801015c:	3303      	adds	r3, #3
 801015e:	b29b      	uxth	r3, r3
 8010160:	f023 0303 	bic.w	r3, r3, #3
 8010164:	b29a      	uxth	r2, r3
 8010166:	88bb      	ldrh	r3, [r7, #4]
 8010168:	3303      	adds	r3, #3
 801016a:	b29b      	uxth	r3, r3
 801016c:	f023 0303 	bic.w	r3, r3, #3
 8010170:	b29b      	uxth	r3, r3
 8010172:	4413      	add	r3, r2
 8010174:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010176:	8b3b      	ldrh	r3, [r7, #24]
 8010178:	3310      	adds	r3, #16
 801017a:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801017c:	8b3a      	ldrh	r2, [r7, #24]
 801017e:	88bb      	ldrh	r3, [r7, #4]
 8010180:	3303      	adds	r3, #3
 8010182:	f023 0303 	bic.w	r3, r3, #3
 8010186:	429a      	cmp	r2, r3
 8010188:	d306      	bcc.n	8010198 <pbuf_alloc+0x128>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801018a:	88bb      	ldrh	r3, [r7, #4]
 801018c:	3303      	adds	r3, #3
 801018e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010192:	697a      	ldr	r2, [r7, #20]
 8010194:	429a      	cmp	r2, r3
 8010196:	d201      	bcs.n	801019c <pbuf_alloc+0x12c>
        return NULL;
 8010198:	2300      	movs	r3, #0
 801019a:	e01f      	b.n	80101dc <pbuf_alloc+0x16c>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801019c:	6978      	ldr	r0, [r7, #20]
 801019e:	f7ff fc2c 	bl	800f9fa <mem_malloc>
 80101a2:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d101      	bne.n	80101ae <pbuf_alloc+0x13e>
        return NULL;
 80101aa:	2300      	movs	r3, #0
 80101ac:	e016      	b.n	80101dc <pbuf_alloc+0x16c>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80101ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80101b0:	3310      	adds	r3, #16
 80101b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101b4:	4413      	add	r3, r2
 80101b6:	3303      	adds	r3, #3
 80101b8:	f023 0303 	bic.w	r3, r3, #3
 80101bc:	4618      	mov	r0, r3
 80101be:	88b9      	ldrh	r1, [r7, #4]
 80101c0:	88ba      	ldrh	r2, [r7, #4]
 80101c2:	2300      	movs	r3, #0
 80101c4:	9301      	str	r3, [sp, #4]
 80101c6:	887b      	ldrh	r3, [r7, #2]
 80101c8:	9300      	str	r3, [sp, #0]
 80101ca:	460b      	mov	r3, r1
 80101cc:	4601      	mov	r1, r0
 80101ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101d0:	f7ff ff24 	bl	801001c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80101d4:	e001      	b.n	80101da <pbuf_alloc+0x16a>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
      return NULL;
 80101d6:	2300      	movs	r3, #0
 80101d8:	e000      	b.n	80101dc <pbuf_alloc+0x16c>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80101da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3728      	adds	r7, #40	; 0x28
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b086      	sub	sp, #24
 80101e8:	af02      	add	r7, sp, #8
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	460b      	mov	r3, r1
 80101ee:	807b      	strh	r3, [r7, #2]
 80101f0:	4613      	mov	r3, r2
 80101f2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80101f4:	2008      	movs	r0, #8
 80101f6:	f7ff fc65 	bl	800fac4 <memp_malloc>
 80101fa:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d101      	bne.n	8010206 <pbuf_alloc_reference+0x22>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010202:	2300      	movs	r3, #0
 8010204:	e00b      	b.n	801021e <pbuf_alloc_reference+0x3a>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010206:	8879      	ldrh	r1, [r7, #2]
 8010208:	887a      	ldrh	r2, [r7, #2]
 801020a:	2300      	movs	r3, #0
 801020c:	9301      	str	r3, [sp, #4]
 801020e:	883b      	ldrh	r3, [r7, #0]
 8010210:	9300      	str	r3, [sp, #0]
 8010212:	460b      	mov	r3, r1
 8010214:	6879      	ldr	r1, [r7, #4]
 8010216:	68f8      	ldr	r0, [r7, #12]
 8010218:	f7ff ff00 	bl	801001c <pbuf_init_alloced_pbuf>
  return p;
 801021c:	68fb      	ldr	r3, [r7, #12]
}
 801021e:	4618      	mov	r0, r3
 8010220:	3710      	adds	r7, #16
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010226:	b580      	push	{r7, lr}
 8010228:	b088      	sub	sp, #32
 801022a:	af02      	add	r7, sp, #8
 801022c:	607b      	str	r3, [r7, #4]
 801022e:	4603      	mov	r3, r0
 8010230:	73fb      	strb	r3, [r7, #15]
 8010232:	460b      	mov	r3, r1
 8010234:	81bb      	strh	r3, [r7, #12]
 8010236:	4613      	mov	r3, r2
 8010238:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801023a:	7bfb      	ldrb	r3, [r7, #15]
 801023c:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801023e:	8a7b      	ldrh	r3, [r7, #18]
 8010240:	3303      	adds	r3, #3
 8010242:	f023 0203 	bic.w	r2, r3, #3
 8010246:	89bb      	ldrh	r3, [r7, #12]
 8010248:	441a      	add	r2, r3
 801024a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801024c:	429a      	cmp	r2, r3
 801024e:	d901      	bls.n	8010254 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010250:	2300      	movs	r3, #0
 8010252:	e018      	b.n	8010286 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010254:	6a3b      	ldr	r3, [r7, #32]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d007      	beq.n	801026a <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801025a:	8a7b      	ldrh	r3, [r7, #18]
 801025c:	3303      	adds	r3, #3
 801025e:	f023 0303 	bic.w	r3, r3, #3
 8010262:	6a3a      	ldr	r2, [r7, #32]
 8010264:	4413      	add	r3, r2
 8010266:	617b      	str	r3, [r7, #20]
 8010268:	e001      	b.n	801026e <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801026a:	2300      	movs	r3, #0
 801026c:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	89b9      	ldrh	r1, [r7, #12]
 8010272:	89ba      	ldrh	r2, [r7, #12]
 8010274:	2302      	movs	r3, #2
 8010276:	9301      	str	r3, [sp, #4]
 8010278:	897b      	ldrh	r3, [r7, #10]
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	460b      	mov	r3, r1
 801027e:	6979      	ldr	r1, [r7, #20]
 8010280:	f7ff fecc 	bl	801001c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010284:	687b      	ldr	r3, [r7, #4]
}
 8010286:	4618      	mov	r0, r3
 8010288:	3718      	adds	r7, #24
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}

0801028e <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801028e:	b580      	push	{r7, lr}
 8010290:	b084      	sub	sp, #16
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
 8010296:	460b      	mov	r3, r1
 8010298:	807b      	strh	r3, [r7, #2]
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	891b      	ldrh	r3, [r3, #8]
 801029e:	887a      	ldrh	r2, [r7, #2]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d24d      	bcs.n	8010340 <pbuf_realloc+0xb2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	891a      	ldrh	r2, [r3, #8]
 80102a8:	887b      	ldrh	r3, [r7, #2]
 80102aa:	1ad3      	subs	r3, r2, r3
 80102ac:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80102ae:	887b      	ldrh	r3, [r7, #2]
 80102b0:	817b      	strh	r3, [r7, #10]
  q = p;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80102b6:	e00e      	b.n	80102d6 <pbuf_realloc+0x48>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	895b      	ldrh	r3, [r3, #10]
 80102bc:	897a      	ldrh	r2, [r7, #10]
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	891a      	ldrh	r2, [r3, #8]
 80102c6:	893b      	ldrh	r3, [r7, #8]
 80102c8:	1ad3      	subs	r3, r2, r3
 80102ca:	b29a      	uxth	r2, r3
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	60fb      	str	r3, [r7, #12]
  while (rem_len > q->len) {
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	895b      	ldrh	r3, [r3, #10]
 80102da:	897a      	ldrh	r2, [r7, #10]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d8eb      	bhi.n	80102b8 <pbuf_realloc+0x2a>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	7b1b      	ldrb	r3, [r3, #12]
 80102e4:	f003 030f 	and.w	r3, r3, #15
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d115      	bne.n	8010318 <pbuf_realloc+0x8a>
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	895b      	ldrh	r3, [r3, #10]
 80102f0:	897a      	ldrh	r2, [r7, #10]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d010      	beq.n	8010318 <pbuf_realloc+0x8a>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	7b5b      	ldrb	r3, [r3, #13]
 80102fa:	f003 0302 	and.w	r3, r3, #2
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d10a      	bne.n	8010318 <pbuf_realloc+0x8a>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	685a      	ldr	r2, [r3, #4]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	1ad2      	subs	r2, r2, r3
 801030a:	897b      	ldrh	r3, [r7, #10]
 801030c:	4413      	add	r3, r2
 801030e:	4619      	mov	r1, r3
 8010310:	68f8      	ldr	r0, [r7, #12]
 8010312:	f7ff fb66 	bl	800f9e2 <mem_trim>
 8010316:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	897a      	ldrh	r2, [r7, #10]
 801031c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	895a      	ldrh	r2, [r3, #10]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d004      	beq.n	8010338 <pbuf_realloc+0xaa>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4618      	mov	r0, r3
 8010334:	f000 f8de 	bl	80104f4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2200      	movs	r2, #0
 801033c:	601a      	str	r2, [r3, #0]
 801033e:	e000      	b.n	8010342 <pbuf_realloc+0xb4>
    return;
 8010340:	bf00      	nop

}
 8010342:	3710      	adds	r7, #16
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010348:	b480      	push	{r7}
 801034a:	b087      	sub	sp, #28
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	4613      	mov	r3, r2
 8010354:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d003      	beq.n	8010364 <pbuf_add_header_impl+0x1c>
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010362:	d301      	bcc.n	8010368 <pbuf_add_header_impl+0x20>
    return 1;
 8010364:	2301      	movs	r3, #1
 8010366:	e043      	b.n	80103f0 <pbuf_add_header_impl+0xa8>
  }
  if (header_size_increment == 0) {
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d101      	bne.n	8010372 <pbuf_add_header_impl+0x2a>
    return 0;
 801036e:	2300      	movs	r3, #0
 8010370:	e03e      	b.n	80103f0 <pbuf_add_header_impl+0xa8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	891a      	ldrh	r2, [r3, #8]
 801037a:	8a7b      	ldrh	r3, [r7, #18]
 801037c:	4413      	add	r3, r2
 801037e:	b29b      	uxth	r3, r3
 8010380:	8a7a      	ldrh	r2, [r7, #18]
 8010382:	429a      	cmp	r2, r3
 8010384:	d901      	bls.n	801038a <pbuf_add_header_impl+0x42>
    return 1;
 8010386:	2301      	movs	r3, #1
 8010388:	e032      	b.n	80103f0 <pbuf_add_header_impl+0xa8>
  }

  type_internal = p->type_internal;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	7b1b      	ldrb	r3, [r3, #12]
 801038e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010390:	8a3b      	ldrh	r3, [r7, #16]
 8010392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010396:	2b00      	cmp	r3, #0
 8010398:	d00c      	beq.n	80103b4 <pbuf_add_header_impl+0x6c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	685a      	ldr	r2, [r3, #4]
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	425b      	negs	r3, r3
 80103a2:	4413      	add	r3, r2
 80103a4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	3310      	adds	r3, #16
 80103aa:	697a      	ldr	r2, [r7, #20]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d20d      	bcs.n	80103cc <pbuf_add_header_impl+0x84>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80103b0:	2301      	movs	r3, #1
 80103b2:	e01d      	b.n	80103f0 <pbuf_add_header_impl+0xa8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80103b4:	79fb      	ldrb	r3, [r7, #7]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d006      	beq.n	80103c8 <pbuf_add_header_impl+0x80>
      payload = (u8_t *)p->payload - header_size_increment;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	685a      	ldr	r2, [r3, #4]
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	425b      	negs	r3, r3
 80103c2:	4413      	add	r3, r2
 80103c4:	617b      	str	r3, [r7, #20]
 80103c6:	e001      	b.n	80103cc <pbuf_add_header_impl+0x84>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80103c8:	2301      	movs	r3, #1
 80103ca:	e011      	b.n	80103f0 <pbuf_add_header_impl+0xa8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	697a      	ldr	r2, [r7, #20]
 80103d0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	895a      	ldrh	r2, [r3, #10]
 80103d6:	8a7b      	ldrh	r3, [r7, #18]
 80103d8:	4413      	add	r3, r2
 80103da:	b29a      	uxth	r2, r3
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	891a      	ldrh	r2, [r3, #8]
 80103e4:	8a7b      	ldrh	r3, [r7, #18]
 80103e6:	4413      	add	r3, r2
 80103e8:	b29a      	uxth	r2, r3
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	811a      	strh	r2, [r3, #8]


  return 0;
 80103ee:	2300      	movs	r3, #0
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	371c      	adds	r7, #28
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr

080103fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010406:	2200      	movs	r2, #0
 8010408:	6839      	ldr	r1, [r7, #0]
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7ff ff9c 	bl	8010348 <pbuf_add_header_impl>
 8010410:	4603      	mov	r3, r0
}
 8010412:	4618      	mov	r0, r3
 8010414:	3708      	adds	r7, #8
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}

0801041a <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801041a:	b480      	push	{r7}
 801041c:	b085      	sub	sp, #20
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
 8010422:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d003      	beq.n	8010432 <pbuf_remove_header+0x18>
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010430:	d301      	bcc.n	8010436 <pbuf_remove_header+0x1c>
    return 1;
 8010432:	2301      	movs	r3, #1
 8010434:	e025      	b.n	8010482 <pbuf_remove_header+0x68>
  }
  if (header_size_decrement == 0) {
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d101      	bne.n	8010440 <pbuf_remove_header+0x26>
    return 0;
 801043c:	2300      	movs	r3, #0
 801043e:	e020      	b.n	8010482 <pbuf_remove_header+0x68>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	895b      	ldrh	r3, [r3, #10]
 8010448:	89fa      	ldrh	r2, [r7, #14]
 801044a:	429a      	cmp	r2, r3
 801044c:	d901      	bls.n	8010452 <pbuf_remove_header+0x38>
 801044e:	2301      	movs	r3, #1
 8010450:	e017      	b.n	8010482 <pbuf_remove_header+0x68>

  /* remember current payload pointer */
  payload = p->payload;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	685a      	ldr	r2, [r3, #4]
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	441a      	add	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	895a      	ldrh	r2, [r3, #10]
 8010468:	89fb      	ldrh	r3, [r7, #14]
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	b29a      	uxth	r2, r3
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	891a      	ldrh	r2, [r3, #8]
 8010476:	89fb      	ldrh	r3, [r7, #14]
 8010478:	1ad3      	subs	r3, r2, r3
 801047a:	b29a      	uxth	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010480:	2300      	movs	r3, #0
}
 8010482:	4618      	mov	r0, r3
 8010484:	3714      	adds	r7, #20
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr

0801048e <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801048e:	b580      	push	{r7, lr}
 8010490:	b082      	sub	sp, #8
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
 8010496:	460b      	mov	r3, r1
 8010498:	807b      	strh	r3, [r7, #2]
 801049a:	4613      	mov	r3, r2
 801049c:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801049e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	da08      	bge.n	80104b8 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80104a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80104aa:	425b      	negs	r3, r3
 80104ac:	4619      	mov	r1, r3
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f7ff ffb3 	bl	801041a <pbuf_remove_header>
 80104b4:	4603      	mov	r3, r0
 80104b6:	e007      	b.n	80104c8 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80104b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80104bc:	787a      	ldrb	r2, [r7, #1]
 80104be:	4619      	mov	r1, r3
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f7ff ff41 	bl	8010348 <pbuf_add_header_impl>
 80104c6:	4603      	mov	r3, r0
  }
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	460b      	mov	r3, r1
 80104da:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80104dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80104e0:	2201      	movs	r2, #1
 80104e2:	4619      	mov	r1, r3
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f7ff ffd2 	bl	801048e <pbuf_header_impl>
 80104ea:	4603      	mov	r3, r0
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b086      	sub	sp, #24
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010502:	2300      	movs	r3, #0
 8010504:	e045      	b.n	8010592 <pbuf_free+0x9e>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801050a:	e03e      	b.n	801058a <pbuf_free+0x96>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	7b9b      	ldrb	r3, [r3, #14]
 8010510:	3b01      	subs	r3, #1
 8010512:	b2da      	uxtb	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	739a      	strb	r2, [r3, #14]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	7b9b      	ldrb	r3, [r3, #14]
 801051c:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801051e:	7dbb      	ldrb	r3, [r7, #22]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d130      	bne.n	8010586 <pbuf_free+0x92>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	7b1b      	ldrb	r3, [r3, #12]
 801052e:	f003 030f 	and.w	r3, r3, #15
 8010532:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	7b5b      	ldrb	r3, [r3, #13]
 8010538:	f003 0302 	and.w	r3, r3, #2
 801053c:	2b00      	cmp	r3, #0
 801053e:	d006      	beq.n	801054e <pbuf_free+0x5a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	691b      	ldr	r3, [r3, #16]
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	4798      	blx	r3
 801054c:	e015      	b.n	801057a <pbuf_free+0x86>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801054e:	7bfb      	ldrb	r3, [r7, #15]
 8010550:	2b02      	cmp	r3, #2
 8010552:	d104      	bne.n	801055e <pbuf_free+0x6a>
          memp_free(MEMP_PBUF_POOL, p);
 8010554:	6879      	ldr	r1, [r7, #4]
 8010556:	2009      	movs	r0, #9
 8010558:	f7ff faf0 	bl	800fb3c <memp_free>
 801055c:	e00d      	b.n	801057a <pbuf_free+0x86>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801055e:	7bfb      	ldrb	r3, [r7, #15]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d104      	bne.n	801056e <pbuf_free+0x7a>
          memp_free(MEMP_PBUF, p);
 8010564:	6879      	ldr	r1, [r7, #4]
 8010566:	2008      	movs	r0, #8
 8010568:	f7ff fae8 	bl	800fb3c <memp_free>
 801056c:	e005      	b.n	801057a <pbuf_free+0x86>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801056e:	7bfb      	ldrb	r3, [r7, #15]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d102      	bne.n	801057a <pbuf_free+0x86>
          mem_free(p);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7ff fa4e 	bl	800fa16 <mem_free>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801057a:	7dfb      	ldrb	r3, [r7, #23]
 801057c:	3301      	adds	r3, #1
 801057e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	607b      	str	r3, [r7, #4]
 8010584:	e001      	b.n	801058a <pbuf_free+0x96>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010586:	2300      	movs	r3, #0
 8010588:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d1bd      	bne.n	801050c <pbuf_free+0x18>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010590:	7dfb      	ldrb	r3, [r7, #23]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3718      	adds	r7, #24
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801059a:	b480      	push	{r7}
 801059c:	b085      	sub	sp, #20
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80105a2:	2300      	movs	r3, #0
 80105a4:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80105a6:	e005      	b.n	80105b4 <pbuf_clen+0x1a>
    ++len;
 80105a8:	89fb      	ldrh	r3, [r7, #14]
 80105aa:	3301      	adds	r3, #1
 80105ac:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d1f6      	bne.n	80105a8 <pbuf_clen+0xe>
  }
  return len;
 80105ba:	89fb      	ldrh	r3, [r7, #14]
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3714      	adds	r7, #20
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d005      	beq.n	80105e2 <pbuf_ref+0x1a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	7b9b      	ldrb	r3, [r3, #14]
 80105da:	3301      	adds	r3, #1
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  }
}
 80105e2:	bf00      	nop
 80105e4:	370c      	adds	r7, #12
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr

080105ee <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80105ee:	b480      	push	{r7}
 80105f0:	b085      	sub	sp, #20
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
 80105f6:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d01f      	beq.n	801063e <pbuf_cat+0x50>
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d01c      	beq.n	801063e <pbuf_cat+0x50>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	60fb      	str	r3, [r7, #12]
 8010608:	e00a      	b.n	8010620 <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	891a      	ldrh	r2, [r3, #8]
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	891b      	ldrh	r3, [r3, #8]
 8010612:	4413      	add	r3, r2
 8010614:	b29a      	uxth	r2, r3
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	60fb      	str	r3, [r7, #12]
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d1f0      	bne.n	801060a <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	891a      	ldrh	r2, [r3, #8]
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	891b      	ldrh	r3, [r3, #8]
 8010630:	4413      	add	r3, r2
 8010632:	b29a      	uxth	r2, r3
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	683a      	ldr	r2, [r7, #0]
 801063c:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801063e:	3714      	adds	r7, #20
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010652:	6839      	ldr	r1, [r7, #0]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f7ff ffca 	bl	80105ee <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801065a:	6838      	ldr	r0, [r7, #0]
 801065c:	f7ff ffb4 	bl	80105c8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010660:	bf00      	nop
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b086      	sub	sp, #24
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010672:	2300      	movs	r3, #0
 8010674:	617b      	str	r3, [r7, #20]
 8010676:	2300      	movs	r3, #0
 8010678:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d008      	beq.n	8010692 <pbuf_copy+0x2a>
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d005      	beq.n	8010692 <pbuf_copy+0x2a>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	891a      	ldrh	r2, [r3, #8]
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	891b      	ldrh	r3, [r3, #8]
 801068e:	429a      	cmp	r2, r3
 8010690:	d202      	bcs.n	8010698 <pbuf_copy+0x30>
 8010692:	f06f 030f 	mvn.w	r3, #15
 8010696:	e06f      	b.n	8010778 <pbuf_copy+0x110>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	895b      	ldrh	r3, [r3, #10]
 801069c:	461a      	mov	r2, r3
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	1ad2      	subs	r2, r2, r3
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	895b      	ldrh	r3, [r3, #10]
 80106a6:	4619      	mov	r1, r3
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	1acb      	subs	r3, r1, r3
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d306      	bcc.n	80106be <pbuf_copy+0x56>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	895b      	ldrh	r3, [r3, #10]
 80106b4:	461a      	mov	r2, r3
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	60fb      	str	r3, [r7, #12]
 80106bc:	e005      	b.n	80106ca <pbuf_copy+0x62>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	895b      	ldrh	r3, [r3, #10]
 80106c2:	461a      	mov	r2, r3
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	1ad3      	subs	r3, r2, r3
 80106c8:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	685a      	ldr	r2, [r3, #4]
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	18d0      	adds	r0, r2, r3
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	685a      	ldr	r2, [r3, #4]
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	4413      	add	r3, r2
 80106da:	68fa      	ldr	r2, [r7, #12]
 80106dc:	4619      	mov	r1, r3
 80106de:	f00a fb5a 	bl	801ad96 <memcpy>
    offset_to += len;
 80106e2:	697a      	ldr	r2, [r7, #20]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	4413      	add	r3, r2
 80106e8:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	4413      	add	r3, r2
 80106f0:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	895b      	ldrh	r3, [r3, #10]
 80106f6:	461a      	mov	r2, r3
 80106f8:	693b      	ldr	r3, [r7, #16]
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d304      	bcc.n	8010708 <pbuf_copy+0xa0>
      /* on to next p_from (if any) */
      offset_from = 0;
 80106fe:	2300      	movs	r3, #0
 8010700:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	895b      	ldrh	r3, [r3, #10]
 801070c:	461a      	mov	r2, r3
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	4293      	cmp	r3, r2
 8010712:	d10d      	bne.n	8010730 <pbuf_copy+0xc8>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010714:	2300      	movs	r3, #0
 8010716:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d105      	bne.n	8010730 <pbuf_copy+0xc8>
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d002      	beq.n	8010730 <pbuf_copy+0xc8>
 801072a:	f06f 030f 	mvn.w	r3, #15
 801072e:	e023      	b.n	8010778 <pbuf_copy+0x110>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00c      	beq.n	8010750 <pbuf_copy+0xe8>
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	895a      	ldrh	r2, [r3, #10]
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	891b      	ldrh	r3, [r3, #8]
 801073e:	429a      	cmp	r2, r3
 8010740:	d106      	bne.n	8010750 <pbuf_copy+0xe8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d002      	beq.n	8010750 <pbuf_copy+0xe8>
 801074a:	f06f 0305 	mvn.w	r3, #5
 801074e:	e013      	b.n	8010778 <pbuf_copy+0x110>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00c      	beq.n	8010770 <pbuf_copy+0x108>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	895a      	ldrh	r2, [r3, #10]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	891b      	ldrh	r3, [r3, #8]
 801075e:	429a      	cmp	r2, r3
 8010760:	d106      	bne.n	8010770 <pbuf_copy+0x108>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d002      	beq.n	8010770 <pbuf_copy+0x108>
 801076a:	f06f 0305 	mvn.w	r3, #5
 801076e:	e003      	b.n	8010778 <pbuf_copy+0x110>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d190      	bne.n	8010698 <pbuf_copy+0x30>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010776:	2300      	movs	r3, #0
}
 8010778:	4618      	mov	r0, r3
 801077a:	3718      	adds	r7, #24
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b088      	sub	sp, #32
 8010784:	af00      	add	r7, sp, #0
 8010786:	60f8      	str	r0, [r7, #12]
 8010788:	60b9      	str	r1, [r7, #8]
 801078a:	4611      	mov	r1, r2
 801078c:	461a      	mov	r2, r3
 801078e:	460b      	mov	r3, r1
 8010790:	80fb      	strh	r3, [r7, #6]
 8010792:	4613      	mov	r3, r2
 8010794:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801079a:	2300      	movs	r3, #0
 801079c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d101      	bne.n	80107a8 <pbuf_copy_partial+0x28>
 80107a4:	2300      	movs	r3, #0
 80107a6:	e043      	b.n	8010830 <pbuf_copy_partial+0xb0>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d101      	bne.n	80107b2 <pbuf_copy_partial+0x32>
 80107ae:	2300      	movs	r3, #0
 80107b0:	e03e      	b.n	8010830 <pbuf_copy_partial+0xb0>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	61fb      	str	r3, [r7, #28]
 80107b6:	e034      	b.n	8010822 <pbuf_copy_partial+0xa2>
    if ((offset != 0) && (offset >= p->len)) {
 80107b8:	88bb      	ldrh	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d00a      	beq.n	80107d4 <pbuf_copy_partial+0x54>
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	895b      	ldrh	r3, [r3, #10]
 80107c2:	88ba      	ldrh	r2, [r7, #4]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d305      	bcc.n	80107d4 <pbuf_copy_partial+0x54>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	895b      	ldrh	r3, [r3, #10]
 80107cc:	88ba      	ldrh	r2, [r7, #4]
 80107ce:	1ad3      	subs	r3, r2, r3
 80107d0:	80bb      	strh	r3, [r7, #4]
 80107d2:	e023      	b.n	801081c <pbuf_copy_partial+0x9c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	895a      	ldrh	r2, [r3, #10]
 80107d8:	88bb      	ldrh	r3, [r7, #4]
 80107da:	1ad3      	subs	r3, r2, r3
 80107dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80107de:	8b3a      	ldrh	r2, [r7, #24]
 80107e0:	88fb      	ldrh	r3, [r7, #6]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d901      	bls.n	80107ea <pbuf_copy_partial+0x6a>
        buf_copy_len = len;
 80107e6:	88fb      	ldrh	r3, [r7, #6]
 80107e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80107ea:	8b7b      	ldrh	r3, [r7, #26]
 80107ec:	68ba      	ldr	r2, [r7, #8]
 80107ee:	18d0      	adds	r0, r2, r3
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	685a      	ldr	r2, [r3, #4]
 80107f4:	88bb      	ldrh	r3, [r7, #4]
 80107f6:	4413      	add	r3, r2
 80107f8:	8b3a      	ldrh	r2, [r7, #24]
 80107fa:	4619      	mov	r1, r3
 80107fc:	f00a facb 	bl	801ad96 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010800:	8afa      	ldrh	r2, [r7, #22]
 8010802:	8b3b      	ldrh	r3, [r7, #24]
 8010804:	4413      	add	r3, r2
 8010806:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010808:	8b7a      	ldrh	r2, [r7, #26]
 801080a:	8b3b      	ldrh	r3, [r7, #24]
 801080c:	4413      	add	r3, r2
 801080e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010810:	88fa      	ldrh	r2, [r7, #6]
 8010812:	8b3b      	ldrh	r3, [r7, #24]
 8010814:	1ad3      	subs	r3, r2, r3
 8010816:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010818:	2300      	movs	r3, #0
 801081a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	61fb      	str	r3, [r7, #28]
 8010822:	88fb      	ldrh	r3, [r7, #6]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d002      	beq.n	801082e <pbuf_copy_partial+0xae>
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1c4      	bne.n	80107b8 <pbuf_copy_partial+0x38>
    }
  }
  return copied_total;
 801082e:	8afb      	ldrh	r3, [r7, #22]
}
 8010830:	4618      	mov	r0, r3
 8010832:	3720      	adds	r7, #32
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	4603      	mov	r3, r0
 8010840:	603a      	str	r2, [r7, #0]
 8010842:	71fb      	strb	r3, [r7, #7]
 8010844:	460b      	mov	r3, r1
 8010846:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	8919      	ldrh	r1, [r3, #8]
 801084c:	88ba      	ldrh	r2, [r7, #4]
 801084e:	79fb      	ldrb	r3, [r7, #7]
 8010850:	4618      	mov	r0, r3
 8010852:	f7ff fc0d 	bl	8010070 <pbuf_alloc>
 8010856:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d101      	bne.n	8010862 <pbuf_clone+0x2a>
    return NULL;
 801085e:	2300      	movs	r3, #0
 8010860:	e006      	b.n	8010870 <pbuf_clone+0x38>
  }
  err = pbuf_copy(q, p);
 8010862:	6839      	ldr	r1, [r7, #0]
 8010864:	68f8      	ldr	r0, [r7, #12]
 8010866:	f7ff feff 	bl	8010668 <pbuf_copy>
 801086a:	4603      	mov	r3, r0
 801086c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  return q;
 801086e:	68fb      	ldr	r3, [r7, #12]
}
 8010870:	4618      	mov	r0, r3
 8010872:	3710      	adds	r7, #16
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8010878:	b480      	push	{r7}
 801087a:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 801087c:	bf00      	nop
 801087e:	46bd      	mov	sp, r7
 8010880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010884:	4770      	bx	lr
	...

08010888 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801088c:	f00a f818 	bl	801a8c0 <rand>
 8010890:	4603      	mov	r3, r0
 8010892:	b29b      	uxth	r3, r3
 8010894:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010898:	b29b      	uxth	r3, r3
 801089a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801089e:	b29a      	uxth	r2, r3
 80108a0:	4b01      	ldr	r3, [pc, #4]	; (80108a8 <tcp_init+0x20>)
 80108a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80108a4:	bf00      	nop
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	2000013a 	.word	0x2000013a

080108ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80108b4:	6879      	ldr	r1, [r7, #4]
 80108b6:	2001      	movs	r0, #1
 80108b8:	f7ff f940 	bl	800fb3c <memp_free>
}
 80108bc:	bf00      	nop
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80108cc:	6879      	ldr	r1, [r7, #4]
 80108ce:	2002      	movs	r0, #2
 80108d0:	f7ff f934 	bl	800fb3c <memp_free>
}
 80108d4:	bf00      	nop
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80108e0:	f000 fed6 	bl	8011690 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80108e4:	4b07      	ldr	r3, [pc, #28]	; (8010904 <tcp_tmr+0x28>)
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	3301      	adds	r3, #1
 80108ea:	b2da      	uxtb	r2, r3
 80108ec:	4b05      	ldr	r3, [pc, #20]	; (8010904 <tcp_tmr+0x28>)
 80108ee:	701a      	strb	r2, [r3, #0]
 80108f0:	4b04      	ldr	r3, [pc, #16]	; (8010904 <tcp_tmr+0x28>)
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	f003 0301 	and.w	r3, r3, #1
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d001      	beq.n	8010900 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80108fc:	f000 fc1a 	bl	8011134 <tcp_slowtmr>
  }
}
 8010900:	bf00      	nop
 8010902:	bd80      	pop	{r7, pc}
 8010904:	20007851 	.word	0x20007851

08010908 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	60fb      	str	r3, [r7, #12]
 8010916:	e00a      	b.n	801092e <tcp_remove_listener+0x26>
    if (pcb->listener == lpcb) {
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801091c:	683a      	ldr	r2, [r7, #0]
 801091e:	429a      	cmp	r2, r3
 8010920:	d102      	bne.n	8010928 <tcp_remove_listener+0x20>
      pcb->listener = NULL;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2200      	movs	r2, #0
 8010926:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	60fb      	str	r3, [r7, #12]
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d1f1      	bne.n	8010918 <tcp_remove_listener+0x10>
    }
  }
}
 8010934:	bf00      	nop
 8010936:	bf00      	nop
 8010938:	3714      	adds	r7, #20
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr
	...

08010944 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801094c:	2301      	movs	r3, #1
 801094e:	60fb      	str	r3, [r7, #12]
 8010950:	e00b      	b.n	801096a <tcp_listen_closed+0x26>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010952:	4a0a      	ldr	r2, [pc, #40]	; (801097c <tcp_listen_closed+0x38>)
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	6879      	ldr	r1, [r7, #4]
 801095e:	4618      	mov	r0, r3
 8010960:	f7ff ffd2 	bl	8010908 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	3301      	adds	r3, #1
 8010968:	60fb      	str	r3, [r7, #12]
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2b03      	cmp	r3, #3
 801096e:	d9f0      	bls.n	8010952 <tcp_listen_closed+0xe>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010970:	bf00      	nop
 8010972:	bf00      	nop
 8010974:	3710      	adds	r7, #16
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	0801d210 	.word	0x0801d210

08010980 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010980:	b5b0      	push	{r4, r5, r7, lr}
 8010982:	b088      	sub	sp, #32
 8010984:	af04      	add	r7, sp, #16
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	460b      	mov	r3, r1
 801098a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801098c:	78fb      	ldrb	r3, [r7, #3]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d059      	beq.n	8010a46 <tcp_close_shutdown+0xc6>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	7d1b      	ldrb	r3, [r3, #20]
 8010996:	2b04      	cmp	r3, #4
 8010998:	d003      	beq.n	80109a2 <tcp_close_shutdown+0x22>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	7d1b      	ldrb	r3, [r3, #20]
 801099e:	2b07      	cmp	r3, #7
 80109a0:	d151      	bne.n	8010a46 <tcp_close_shutdown+0xc6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d104      	bne.n	80109b4 <tcp_close_shutdown+0x34>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80109b2:	d048      	beq.n	8010a46 <tcp_close_shutdown+0xc6>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80109bc:	687d      	ldr	r5, [r7, #4]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	3304      	adds	r3, #4
 80109c2:	687a      	ldr	r2, [r7, #4]
 80109c4:	8ad2      	ldrh	r2, [r2, #22]
 80109c6:	6879      	ldr	r1, [r7, #4]
 80109c8:	8b09      	ldrh	r1, [r1, #24]
 80109ca:	9102      	str	r1, [sp, #8]
 80109cc:	9201      	str	r2, [sp, #4]
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	462b      	mov	r3, r5
 80109d2:	4622      	mov	r2, r4
 80109d4:	4601      	mov	r1, r0
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f004 ff1c 	bl	8015814 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f001 f997 	bl	8011d10 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80109e2:	4b43      	ldr	r3, [pc, #268]	; (8010af0 <tcp_close_shutdown+0x170>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d105      	bne.n	80109f8 <tcp_close_shutdown+0x78>
 80109ec:	4b40      	ldr	r3, [pc, #256]	; (8010af0 <tcp_close_shutdown+0x170>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	4a3f      	ldr	r2, [pc, #252]	; (8010af0 <tcp_close_shutdown+0x170>)
 80109f4:	6013      	str	r3, [r2, #0]
 80109f6:	e013      	b.n	8010a20 <tcp_close_shutdown+0xa0>
 80109f8:	4b3d      	ldr	r3, [pc, #244]	; (8010af0 <tcp_close_shutdown+0x170>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	60fb      	str	r3, [r7, #12]
 80109fe:	e00c      	b.n	8010a1a <tcp_close_shutdown+0x9a>
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	687a      	ldr	r2, [r7, #4]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d104      	bne.n	8010a14 <tcp_close_shutdown+0x94>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	68da      	ldr	r2, [r3, #12]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	60da      	str	r2, [r3, #12]
 8010a12:	e005      	b.n	8010a20 <tcp_close_shutdown+0xa0>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	68db      	ldr	r3, [r3, #12]
 8010a18:	60fb      	str	r3, [r7, #12]
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d1ef      	bne.n	8010a00 <tcp_close_shutdown+0x80>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2200      	movs	r2, #0
 8010a24:	60da      	str	r2, [r3, #12]
 8010a26:	4b33      	ldr	r3, [pc, #204]	; (8010af4 <tcp_close_shutdown+0x174>)
 8010a28:	2201      	movs	r2, #1
 8010a2a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010a2c:	4b32      	ldr	r3, [pc, #200]	; (8010af8 <tcp_close_shutdown+0x178>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d102      	bne.n	8010a3c <tcp_close_shutdown+0xbc>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010a36:	f003 fc09 	bl	801424c <tcp_trigger_input_pcb_close>
 8010a3a:	e002      	b.n	8010a42 <tcp_close_shutdown+0xc2>
      } else {
        tcp_free(pcb);
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f7ff ff35 	bl	80108ac <tcp_free>
      }
      return ERR_OK;
 8010a42:	2300      	movs	r3, #0
 8010a44:	e050      	b.n	8010ae8 <tcp_close_shutdown+0x168>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	7d1b      	ldrb	r3, [r3, #20]
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	d03b      	beq.n	8010ac6 <tcp_close_shutdown+0x146>
 8010a4e:	2b02      	cmp	r3, #2
 8010a50:	dc44      	bgt.n	8010adc <tcp_close_shutdown+0x15c>
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d002      	beq.n	8010a5c <tcp_close_shutdown+0xdc>
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d02a      	beq.n	8010ab0 <tcp_close_shutdown+0x130>
 8010a5a:	e03f      	b.n	8010adc <tcp_close_shutdown+0x15c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	8adb      	ldrh	r3, [r3, #22]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d021      	beq.n	8010aa8 <tcp_close_shutdown+0x128>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010a64:	4b25      	ldr	r3, [pc, #148]	; (8010afc <tcp_close_shutdown+0x17c>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d105      	bne.n	8010a7a <tcp_close_shutdown+0xfa>
 8010a6e:	4b23      	ldr	r3, [pc, #140]	; (8010afc <tcp_close_shutdown+0x17c>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	4a21      	ldr	r2, [pc, #132]	; (8010afc <tcp_close_shutdown+0x17c>)
 8010a76:	6013      	str	r3, [r2, #0]
 8010a78:	e013      	b.n	8010aa2 <tcp_close_shutdown+0x122>
 8010a7a:	4b20      	ldr	r3, [pc, #128]	; (8010afc <tcp_close_shutdown+0x17c>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	60bb      	str	r3, [r7, #8]
 8010a80:	e00c      	b.n	8010a9c <tcp_close_shutdown+0x11c>
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	68db      	ldr	r3, [r3, #12]
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d104      	bne.n	8010a96 <tcp_close_shutdown+0x116>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	68da      	ldr	r2, [r3, #12]
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	60da      	str	r2, [r3, #12]
 8010a94:	e005      	b.n	8010aa2 <tcp_close_shutdown+0x122>
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	68db      	ldr	r3, [r3, #12]
 8010a9a:	60bb      	str	r3, [r7, #8]
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d1ef      	bne.n	8010a82 <tcp_close_shutdown+0x102>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f7ff feff 	bl	80108ac <tcp_free>
      break;
 8010aae:	e01a      	b.n	8010ae6 <tcp_close_shutdown+0x166>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f7ff ff47 	bl	8010944 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010ab6:	6879      	ldr	r1, [r7, #4]
 8010ab8:	4811      	ldr	r0, [pc, #68]	; (8010b00 <tcp_close_shutdown+0x180>)
 8010aba:	f001 f96b 	bl	8011d94 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f7ff ff00 	bl	80108c4 <tcp_free_listen>
      break;
 8010ac4:	e00f      	b.n	8010ae6 <tcp_close_shutdown+0x166>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010ac6:	6879      	ldr	r1, [r7, #4]
 8010ac8:	4809      	ldr	r0, [pc, #36]	; (8010af0 <tcp_close_shutdown+0x170>)
 8010aca:	f001 f963 	bl	8011d94 <tcp_pcb_remove>
 8010ace:	4b09      	ldr	r3, [pc, #36]	; (8010af4 <tcp_close_shutdown+0x174>)
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7ff fee9 	bl	80108ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010ada:	e004      	b.n	8010ae6 <tcp_close_shutdown+0x166>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f000 f811 	bl	8010b04 <tcp_close_shutdown_fin>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	e000      	b.n	8010ae8 <tcp_close_shutdown+0x168>
  }
  return ERR_OK;
 8010ae6:	2300      	movs	r3, #0
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3710      	adds	r7, #16
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bdb0      	pop	{r4, r5, r7, pc}
 8010af0:	20007848 	.word	0x20007848
 8010af4:	20007850 	.word	0x20007850
 8010af8:	2000788c 	.word	0x2000788c
 8010afc:	20007840 	.word	0x20007840
 8010b00:	20007844 	.word	0x20007844

08010b04 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);

  switch (pcb->state) {
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	7d1b      	ldrb	r3, [r3, #20]
 8010b10:	2b07      	cmp	r3, #7
 8010b12:	d020      	beq.n	8010b56 <tcp_close_shutdown_fin+0x52>
 8010b14:	2b07      	cmp	r3, #7
 8010b16:	dc2b      	bgt.n	8010b70 <tcp_close_shutdown_fin+0x6c>
 8010b18:	2b03      	cmp	r3, #3
 8010b1a:	d002      	beq.n	8010b22 <tcp_close_shutdown_fin+0x1e>
 8010b1c:	2b04      	cmp	r3, #4
 8010b1e:	d00d      	beq.n	8010b3c <tcp_close_shutdown_fin+0x38>
 8010b20:	e026      	b.n	8010b70 <tcp_close_shutdown_fin+0x6c>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f004 f8c6 	bl	8014cb4 <tcp_send_fin>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d11f      	bne.n	8010b74 <tcp_close_shutdown_fin+0x70>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2205      	movs	r2, #5
 8010b38:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b3a:	e01b      	b.n	8010b74 <tcp_close_shutdown_fin+0x70>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f004 f8b9 	bl	8014cb4 <tcp_send_fin>
 8010b42:	4603      	mov	r3, r0
 8010b44:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d114      	bne.n	8010b78 <tcp_close_shutdown_fin+0x74>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2205      	movs	r2, #5
 8010b52:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b54:	e010      	b.n	8010b78 <tcp_close_shutdown_fin+0x74>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f004 f8ac 	bl	8014cb4 <tcp_send_fin>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d109      	bne.n	8010b7c <tcp_close_shutdown_fin+0x78>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2209      	movs	r2, #9
 8010b6c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b6e:	e005      	b.n	8010b7c <tcp_close_shutdown_fin+0x78>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010b70:	2300      	movs	r3, #0
 8010b72:	e01c      	b.n	8010bae <tcp_close_shutdown_fin+0xaa>
      break;
 8010b74:	bf00      	nop
 8010b76:	e002      	b.n	8010b7e <tcp_close_shutdown_fin+0x7a>
      break;
 8010b78:	bf00      	nop
 8010b7a:	e000      	b.n	8010b7e <tcp_close_shutdown_fin+0x7a>
      break;
 8010b7c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d103      	bne.n	8010b8e <tcp_close_shutdown_fin+0x8a>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f004 f974 	bl	8014e74 <tcp_output>
 8010b8c:	e00d      	b.n	8010baa <tcp_close_shutdown_fin+0xa6>
  } else if (err == ERR_MEM) {
 8010b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b96:	d108      	bne.n	8010baa <tcp_close_shutdown_fin+0xa6>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	8b5b      	ldrh	r3, [r3, #26]
 8010b9c:	f043 0308 	orr.w	r3, r3, #8
 8010ba0:	b29a      	uxth	r2, r3
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	e001      	b.n	8010bae <tcp_close_shutdown_fin+0xaa>
  }
  return err;
 8010baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3710      	adds	r7, #16
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b082      	sub	sp, #8
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d102      	bne.n	8010bca <tcp_close+0x14>
 8010bc4:	f06f 030f 	mvn.w	r3, #15
 8010bc8:	e00f      	b.n	8010bea <tcp_close+0x34>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	7d1b      	ldrb	r3, [r3, #20]
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d006      	beq.n	8010be0 <tcp_close+0x2a>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	8b5b      	ldrh	r3, [r3, #26]
 8010bd6:	f043 0310 	orr.w	r3, r3, #16
 8010bda:	b29a      	uxth	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010be0:	2101      	movs	r1, #1
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f7ff fecc 	bl	8010980 <tcp_close_shutdown>
 8010be8:	4603      	mov	r3, r0
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3708      	adds	r7, #8
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
	...

08010bf4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b08e      	sub	sp, #56	; 0x38
 8010bf8:	af04      	add	r7, sp, #16
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f000 808f 	beq.w	8010d24 <tcp_abandon+0x130>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	7d1b      	ldrb	r3, [r3, #20]
 8010c0a:	2b0a      	cmp	r3, #10
 8010c0c:	d107      	bne.n	8010c1e <tcp_abandon+0x2a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010c0e:	6879      	ldr	r1, [r7, #4]
 8010c10:	4846      	ldr	r0, [pc, #280]	; (8010d2c <tcp_abandon+0x138>)
 8010c12:	f001 f8bf 	bl	8011d94 <tcp_pcb_remove>
    tcp_free(pcb);
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f7ff fe48 	bl	80108ac <tcp_free>
 8010c1c:	e082      	b.n	8010d24 <tcp_abandon+0x130>
  } else {
    int send_rst = 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010c22:	2300      	movs	r3, #0
 8010c24:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c2a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c30:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c38:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	7d1b      	ldrb	r3, [r3, #20]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d126      	bne.n	8010c96 <tcp_abandon+0xa2>
      if (pcb->local_port != 0) {
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	8adb      	ldrh	r3, [r3, #22]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d02e      	beq.n	8010cae <tcp_abandon+0xba>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010c50:	4b37      	ldr	r3, [pc, #220]	; (8010d30 <tcp_abandon+0x13c>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	687a      	ldr	r2, [r7, #4]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d105      	bne.n	8010c66 <tcp_abandon+0x72>
 8010c5a:	4b35      	ldr	r3, [pc, #212]	; (8010d30 <tcp_abandon+0x13c>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	4a33      	ldr	r2, [pc, #204]	; (8010d30 <tcp_abandon+0x13c>)
 8010c62:	6013      	str	r3, [r2, #0]
 8010c64:	e013      	b.n	8010c8e <tcp_abandon+0x9a>
 8010c66:	4b32      	ldr	r3, [pc, #200]	; (8010d30 <tcp_abandon+0x13c>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	61fb      	str	r3, [r7, #28]
 8010c6c:	e00c      	b.n	8010c88 <tcp_abandon+0x94>
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	687a      	ldr	r2, [r7, #4]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d104      	bne.n	8010c82 <tcp_abandon+0x8e>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	68da      	ldr	r2, [r3, #12]
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	60da      	str	r2, [r3, #12]
 8010c80:	e005      	b.n	8010c8e <tcp_abandon+0x9a>
 8010c82:	69fb      	ldr	r3, [r7, #28]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	61fb      	str	r3, [r7, #28]
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d1ef      	bne.n	8010c6e <tcp_abandon+0x7a>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2200      	movs	r2, #0
 8010c92:	60da      	str	r2, [r3, #12]
 8010c94:	e00b      	b.n	8010cae <tcp_abandon+0xba>
      }
    } else {
      send_rst = reset;
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	8adb      	ldrh	r3, [r3, #22]
 8010c9e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010ca0:	6879      	ldr	r1, [r7, #4]
 8010ca2:	4824      	ldr	r0, [pc, #144]	; (8010d34 <tcp_abandon+0x140>)
 8010ca4:	f001 f876 	bl	8011d94 <tcp_pcb_remove>
 8010ca8:	4b23      	ldr	r3, [pc, #140]	; (8010d38 <tcp_abandon+0x144>)
 8010caa:	2201      	movs	r2, #1
 8010cac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d004      	beq.n	8010cc0 <tcp_abandon+0xcc>
      tcp_segs_free(pcb->unacked);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f000 fdbb 	bl	8011836 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d004      	beq.n	8010cd2 <tcp_abandon+0xde>
      tcp_segs_free(pcb->unsent);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f000 fdb2 	bl	8011836 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d004      	beq.n	8010ce4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->ooseq);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f000 fda9 	bl	8011836 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d00e      	beq.n	8010d08 <tcp_abandon+0x114>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010cea:	6879      	ldr	r1, [r7, #4]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	3304      	adds	r3, #4
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	8b12      	ldrh	r2, [r2, #24]
 8010cf4:	9202      	str	r2, [sp, #8]
 8010cf6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010cf8:	9201      	str	r2, [sp, #4]
 8010cfa:	9300      	str	r3, [sp, #0]
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	697a      	ldr	r2, [r7, #20]
 8010d00:	69b9      	ldr	r1, [r7, #24]
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f004 fd86 	bl	8015814 <tcp_rst>
    }
    last_state = pcb->state;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	7d1b      	ldrb	r3, [r3, #20]
 8010d0c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7ff fdcc 	bl	80108ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d004      	beq.n	8010d24 <tcp_abandon+0x130>
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	f06f 010c 	mvn.w	r1, #12
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	4798      	blx	r3
  }
}
 8010d24:	3728      	adds	r7, #40	; 0x28
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	2000784c 	.word	0x2000784c
 8010d30:	20007840 	.word	0x20007840
 8010d34:	20007848 	.word	0x20007848
 8010d38:	20007850 	.word	0x20007850

08010d3c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010d44:	2101      	movs	r1, #1
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7ff ff54 	bl	8010bf4 <tcp_abandon>
}
 8010d4c:	bf00      	nop
 8010d4e:	3708      	adds	r7, #8
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b088      	sub	sp, #32
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010d62:	2304      	movs	r3, #4
 8010d64:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d101      	bne.n	8010d70 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010d6c:	4b37      	ldr	r3, [pc, #220]	; (8010e4c <tcp_bind+0xf8>)
 8010d6e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d102      	bne.n	8010d7c <tcp_bind+0x28>
 8010d76:	f06f 030f 	mvn.w	r3, #15
 8010d7a:	e063      	b.n	8010e44 <tcp_bind+0xf0>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	7d1b      	ldrb	r3, [r3, #20]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d002      	beq.n	8010d8a <tcp_bind+0x36>
 8010d84:	f06f 0305 	mvn.w	r3, #5
 8010d88:	e05c      	b.n	8010e44 <tcp_bind+0xf0>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8010d8a:	88fb      	ldrh	r3, [r7, #6]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d109      	bne.n	8010da4 <tcp_bind+0x50>
    port = tcp_new_port();
 8010d90:	f000 f98a 	bl	80110a8 <tcp_new_port>
 8010d94:	4603      	mov	r3, r0
 8010d96:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010d98:	88fb      	ldrh	r3, [r7, #6]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d135      	bne.n	8010e0a <tcp_bind+0xb6>
      return ERR_BUF;
 8010d9e:	f06f 0301 	mvn.w	r3, #1
 8010da2:	e04f      	b.n	8010e44 <tcp_bind+0xf0>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010da4:	2300      	movs	r3, #0
 8010da6:	61fb      	str	r3, [r7, #28]
 8010da8:	e02b      	b.n	8010e02 <tcp_bind+0xae>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010daa:	4a29      	ldr	r2, [pc, #164]	; (8010e50 <tcp_bind+0xfc>)
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	61bb      	str	r3, [r7, #24]
 8010db6:	e01e      	b.n	8010df6 <tcp_bind+0xa2>
        if (cpcb->local_port == port) {
 8010db8:	69bb      	ldr	r3, [r7, #24]
 8010dba:	8adb      	ldrh	r3, [r3, #22]
 8010dbc:	88fa      	ldrh	r2, [r7, #6]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d116      	bne.n	8010df0 <tcp_bind+0x9c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010dc2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d010      	beq.n	8010dea <tcp_bind+0x96>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d00c      	beq.n	8010dea <tcp_bind+0x96>
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d009      	beq.n	8010dea <tcp_bind+0x96>
                 ip_addr_isany(ipaddr) ||
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d005      	beq.n	8010dea <tcp_bind+0x96>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8010dde:	69bb      	ldr	r3, [r7, #24]
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d102      	bne.n	8010df0 <tcp_bind+0x9c>
              return ERR_USE;
 8010dea:	f06f 0307 	mvn.w	r3, #7
 8010dee:	e029      	b.n	8010e44 <tcp_bind+0xf0>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010df0:	69bb      	ldr	r3, [r7, #24]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	61bb      	str	r3, [r7, #24]
 8010df6:	69bb      	ldr	r3, [r7, #24]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d1dd      	bne.n	8010db8 <tcp_bind+0x64>
    for (i = 0; i < max_pcb_list; i++) {
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	61fb      	str	r3, [r7, #28]
 8010e02:	69fa      	ldr	r2, [r7, #28]
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	dbcf      	blt.n	8010daa <tcp_bind+0x56>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d00c      	beq.n	8010e2a <tcp_bind+0xd6>
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d008      	beq.n	8010e2a <tcp_bind+0xd6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d002      	beq.n	8010e24 <tcp_bind+0xd0>
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	e000      	b.n	8010e26 <tcp_bind+0xd2>
 8010e24:	2300      	movs	r3, #0
 8010e26:	68fa      	ldr	r2, [r7, #12]
 8010e28:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	88fa      	ldrh	r2, [r7, #6]
 8010e2e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010e30:	4b08      	ldr	r3, [pc, #32]	; (8010e54 <tcp_bind+0x100>)
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	60da      	str	r2, [r3, #12]
 8010e38:	4a06      	ldr	r2, [pc, #24]	; (8010e54 <tcp_bind+0x100>)
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	6013      	str	r3, [r2, #0]
 8010e3e:	f004 fe5d 	bl	8015afc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010e42:	2300      	movs	r3, #0
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3720      	adds	r7, #32
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	0801d248 	.word	0x0801d248
 8010e50:	0801d210 	.word	0x0801d210
 8010e54:	20007840 	.word	0x20007840

08010e58 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	4613      	mov	r3, r2
 8010e64:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);

  tcp_abort(pcb);
 8010e66:	68b8      	ldr	r0, [r7, #8]
 8010e68:	f7ff ff68 	bl	8010d3c <tcp_abort>

  return ERR_ABRT;
 8010e6c:	f06f 030c 	mvn.w	r3, #12
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	460b      	mov	r3, r1
 8010e82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8010e84:	78fb      	ldrb	r3, [r7, #3]
 8010e86:	2200      	movs	r2, #0
 8010e88:	4619      	mov	r1, r3
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 f806 	bl	8010e9c <tcp_listen_with_backlog_and_err>
 8010e90:	4603      	mov	r3, r0
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3708      	adds	r7, #8
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
	...

08010e9c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b088      	sub	sp, #32
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	607a      	str	r2, [r7, #4]
 8010ea8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d102      	bne.n	8010eba <tcp_listen_with_backlog_and_err+0x1e>
 8010eb4:	23f0      	movs	r3, #240	; 0xf0
 8010eb6:	76fb      	strb	r3, [r7, #27]
 8010eb8:	e072      	b.n	8010fa0 <tcp_listen_with_backlog_and_err+0x104>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	7d1b      	ldrb	r3, [r3, #20]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d002      	beq.n	8010ec8 <tcp_listen_with_backlog_and_err+0x2c>
 8010ec2:	23f1      	movs	r3, #241	; 0xf1
 8010ec4:	76fb      	strb	r3, [r7, #27]
 8010ec6:	e06b      	b.n	8010fa0 <tcp_listen_with_backlog_and_err+0x104>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	7d1b      	ldrb	r3, [r3, #20]
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d104      	bne.n	8010eda <tcp_listen_with_backlog_and_err+0x3e>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8010ed4:	23f7      	movs	r3, #247	; 0xf7
 8010ed6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010ed8:	e062      	b.n	8010fa0 <tcp_listen_with_backlog_and_err+0x104>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010eda:	2002      	movs	r0, #2
 8010edc:	f7fe fdf2 	bl	800fac4 <memp_malloc>
 8010ee0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d102      	bne.n	8010eee <tcp_listen_with_backlog_and_err+0x52>
    res = ERR_MEM;
 8010ee8:	23ff      	movs	r3, #255	; 0xff
 8010eea:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010eec:	e058      	b.n	8010fa0 <tcp_listen_with_backlog_and_err+0x104>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	691a      	ldr	r2, [r3, #16]
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	8ada      	ldrh	r2, [r3, #22]
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	2201      	movs	r2, #1
 8010f02:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	7d5a      	ldrb	r2, [r3, #21]
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	7a5a      	ldrb	r2, [r3, #9]
 8010f10:	69fb      	ldr	r3, [r7, #28]
 8010f12:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	2200      	movs	r2, #0
 8010f18:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	7ada      	ldrb	r2, [r3, #11]
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	7a9a      	ldrb	r2, [r3, #10]
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	69fb      	ldr	r3, [r7, #28]
 8010f30:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	8adb      	ldrh	r3, [r3, #22]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d021      	beq.n	8010f7e <tcp_listen_with_backlog_and_err+0xe2>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f3a:	4b1f      	ldr	r3, [pc, #124]	; (8010fb8 <tcp_listen_with_backlog_and_err+0x11c>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	68fa      	ldr	r2, [r7, #12]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d105      	bne.n	8010f50 <tcp_listen_with_backlog_and_err+0xb4>
 8010f44:	4b1c      	ldr	r3, [pc, #112]	; (8010fb8 <tcp_listen_with_backlog_and_err+0x11c>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	4a1b      	ldr	r2, [pc, #108]	; (8010fb8 <tcp_listen_with_backlog_and_err+0x11c>)
 8010f4c:	6013      	str	r3, [r2, #0]
 8010f4e:	e013      	b.n	8010f78 <tcp_listen_with_backlog_and_err+0xdc>
 8010f50:	4b19      	ldr	r3, [pc, #100]	; (8010fb8 <tcp_listen_with_backlog_and_err+0x11c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	617b      	str	r3, [r7, #20]
 8010f56:	e00c      	b.n	8010f72 <tcp_listen_with_backlog_and_err+0xd6>
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	68fa      	ldr	r2, [r7, #12]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d104      	bne.n	8010f6c <tcp_listen_with_backlog_and_err+0xd0>
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	68da      	ldr	r2, [r3, #12]
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	60da      	str	r2, [r3, #12]
 8010f6a:	e005      	b.n	8010f78 <tcp_listen_with_backlog_and_err+0xdc>
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	617b      	str	r3, [r7, #20]
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1ef      	bne.n	8010f58 <tcp_listen_with_backlog_and_err+0xbc>
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8010f7e:	68f8      	ldr	r0, [r7, #12]
 8010f80:	f7ff fc94 	bl	80108ac <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	4a0d      	ldr	r2, [pc, #52]	; (8010fbc <tcp_listen_with_backlog_and_err+0x120>)
 8010f88:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010f8a:	4b0d      	ldr	r3, [pc, #52]	; (8010fc0 <tcp_listen_with_backlog_and_err+0x124>)
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	69fb      	ldr	r3, [r7, #28]
 8010f90:	60da      	str	r2, [r3, #12]
 8010f92:	4a0b      	ldr	r2, [pc, #44]	; (8010fc0 <tcp_listen_with_backlog_and_err+0x124>)
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	6013      	str	r3, [r2, #0]
 8010f98:	f004 fdb0 	bl	8015afc <tcp_timer_needed>
  res = ERR_OK;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d002      	beq.n	8010fac <tcp_listen_with_backlog_and_err+0x110>
    *err = res;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	7efa      	ldrb	r2, [r7, #27]
 8010faa:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8010fac:	69fb      	ldr	r3, [r7, #28]
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3720      	adds	r7, #32
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	20007840 	.word	0x20007840
 8010fbc:	08010e59 	.word	0x08010e59
 8010fc0:	20007844 	.word	0x20007844

08010fc4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b085      	sub	sp, #20
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010fd4:	4413      	add	r3, r2
 8010fd6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fdc:	687a      	ldr	r2, [r7, #4]
 8010fde:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010fe0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010fe4:	bf28      	it	cs
 8010fe6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010fea:	b292      	uxth	r2, r2
 8010fec:	4413      	add	r3, r2
 8010fee:	68fa      	ldr	r2, [r7, #12]
 8010ff0:	1ad3      	subs	r3, r2, r3
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	db08      	blt.n	8011008 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011002:	68fa      	ldr	r2, [r7, #12]
 8011004:	1ad3      	subs	r3, r2, r3
 8011006:	e015      	b.n	8011034 <tcp_update_rcv_ann_wnd+0x70>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011010:	1ad3      	subs	r3, r2, r3
 8011012:	2b00      	cmp	r3, #0
 8011014:	dd03      	ble.n	801101e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2200      	movs	r2, #0
 801101a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801101c:	e009      	b.n	8011032 <tcp_update_rcv_ann_wnd+0x6e>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011026:	1ad3      	subs	r3, r2, r3
 8011028:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	b29a      	uxth	r2, r3
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011032:	2300      	movs	r3, #0
  }
}
 8011034:	4618      	mov	r0, r3
 8011036:	3714      	adds	r7, #20
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr

08011040 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	460b      	mov	r3, r1
 801104a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d027      	beq.n	80110a2 <tcp_recved+0x62>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011056:	887b      	ldrh	r3, [r7, #2]
 8011058:	4413      	add	r3, r2
 801105a:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801105c:	89fb      	ldrh	r3, [r7, #14]
 801105e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011062:	d804      	bhi.n	801106e <tcp_recved+0x2e>
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011068:	89fa      	ldrh	r2, [r7, #14]
 801106a:	429a      	cmp	r2, r3
 801106c:	d204      	bcs.n	8011078 <tcp_recved+0x38>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011074:	851a      	strh	r2, [r3, #40]	; 0x28
 8011076:	e002      	b.n	801107e <tcp_recved+0x3e>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	89fa      	ldrh	r2, [r7, #14]
 801107c:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7ff ffa0 	bl	8010fc4 <tcp_update_rcv_ann_wnd>
 8011084:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801108c:	d309      	bcc.n	80110a2 <tcp_recved+0x62>
    tcp_ack_now(pcb);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	8b5b      	ldrh	r3, [r3, #26]
 8011092:	f043 0302 	orr.w	r3, r3, #2
 8011096:	b29a      	uxth	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f003 fee9 	bl	8014e74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80110a2:	3710      	adds	r7, #16
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80110ae:	2300      	movs	r3, #0
 80110b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80110b2:	4b1e      	ldr	r3, [pc, #120]	; (801112c <tcp_new_port+0x84>)
 80110b4:	881b      	ldrh	r3, [r3, #0]
 80110b6:	3301      	adds	r3, #1
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	4b1c      	ldr	r3, [pc, #112]	; (801112c <tcp_new_port+0x84>)
 80110bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80110be:	4b1b      	ldr	r3, [pc, #108]	; (801112c <tcp_new_port+0x84>)
 80110c0:	881b      	ldrh	r3, [r3, #0]
 80110c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d103      	bne.n	80110d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80110ca:	4b18      	ldr	r3, [pc, #96]	; (801112c <tcp_new_port+0x84>)
 80110cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80110d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80110d2:	2300      	movs	r3, #0
 80110d4:	71fb      	strb	r3, [r7, #7]
 80110d6:	e01e      	b.n	8011116 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80110d8:	79fb      	ldrb	r3, [r7, #7]
 80110da:	4a15      	ldr	r2, [pc, #84]	; (8011130 <tcp_new_port+0x88>)
 80110dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	603b      	str	r3, [r7, #0]
 80110e4:	e011      	b.n	801110a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	8ada      	ldrh	r2, [r3, #22]
 80110ea:	4b10      	ldr	r3, [pc, #64]	; (801112c <tcp_new_port+0x84>)
 80110ec:	881b      	ldrh	r3, [r3, #0]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d108      	bne.n	8011104 <tcp_new_port+0x5c>
        n++;
 80110f2:	88bb      	ldrh	r3, [r7, #4]
 80110f4:	3301      	adds	r3, #1
 80110f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80110f8:	88bb      	ldrh	r3, [r7, #4]
 80110fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80110fe:	d3d8      	bcc.n	80110b2 <tcp_new_port+0xa>
          return 0;
 8011100:	2300      	movs	r3, #0
 8011102:	e00d      	b.n	8011120 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	603b      	str	r3, [r7, #0]
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d1ea      	bne.n	80110e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011110:	79fb      	ldrb	r3, [r7, #7]
 8011112:	3301      	adds	r3, #1
 8011114:	71fb      	strb	r3, [r7, #7]
 8011116:	79fb      	ldrb	r3, [r7, #7]
 8011118:	2b03      	cmp	r3, #3
 801111a:	d9dd      	bls.n	80110d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801111c:	4b03      	ldr	r3, [pc, #12]	; (801112c <tcp_new_port+0x84>)
 801111e:	881b      	ldrh	r3, [r3, #0]
}
 8011120:	4618      	mov	r0, r3
 8011122:	370c      	adds	r7, #12
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr
 801112c:	2000013a 	.word	0x2000013a
 8011130:	0801d210 	.word	0x0801d210

08011134 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011134:	b5b0      	push	{r4, r5, r7, lr}
 8011136:	b090      	sub	sp, #64	; 0x40
 8011138:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801113a:	2300      	movs	r3, #0
 801113c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011140:	4b79      	ldr	r3, [pc, #484]	; (8011328 <tcp_slowtmr+0x1f4>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	3301      	adds	r3, #1
 8011146:	4a78      	ldr	r2, [pc, #480]	; (8011328 <tcp_slowtmr+0x1f4>)
 8011148:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801114a:	4b78      	ldr	r3, [pc, #480]	; (801132c <tcp_slowtmr+0x1f8>)
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	3301      	adds	r3, #1
 8011150:	b2da      	uxtb	r2, r3
 8011152:	4b76      	ldr	r3, [pc, #472]	; (801132c <tcp_slowtmr+0x1f8>)
 8011154:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011156:	2300      	movs	r3, #0
 8011158:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801115a:	4b75      	ldr	r3, [pc, #468]	; (8011330 <tcp_slowtmr+0x1fc>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011160:	e243      	b.n	80115ea <tcp_slowtmr+0x4b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 8011162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011164:	7f9a      	ldrb	r2, [r3, #30]
 8011166:	4b71      	ldr	r3, [pc, #452]	; (801132c <tcp_slowtmr+0x1f8>)
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	429a      	cmp	r2, r3
 801116c:	d105      	bne.n	801117a <tcp_slowtmr+0x46>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011170:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011178:	e237      	b.n	80115ea <tcp_slowtmr+0x4b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 801117a:	4b6c      	ldr	r3, [pc, #432]	; (801132c <tcp_slowtmr+0x1f8>)
 801117c:	781a      	ldrb	r2, [r3, #0]
 801117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011180:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011182:	2300      	movs	r3, #0
 8011184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011188:	2300      	movs	r3, #0
 801118a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011190:	7d1b      	ldrb	r3, [r3, #20]
 8011192:	2b02      	cmp	r3, #2
 8011194:	d10a      	bne.n	80111ac <tcp_slowtmr+0x78>
 8011196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011198:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801119c:	2b05      	cmp	r3, #5
 801119e:	d905      	bls.n	80111ac <tcp_slowtmr+0x78>
      ++pcb_remove;
 80111a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111a4:	3301      	adds	r3, #1
 80111a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80111aa:	e0fb      	b.n	80113a4 <tcp_slowtmr+0x270>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80111ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80111b2:	2b0b      	cmp	r3, #11
 80111b4:	d905      	bls.n	80111c2 <tcp_slowtmr+0x8e>
      ++pcb_remove;
 80111b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111ba:	3301      	adds	r3, #1
 80111bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111c0:	e0f0      	b.n	80113a4 <tcp_slowtmr+0x270>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80111c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d05f      	beq.n	801128c <tcp_slowtmr+0x158>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80111cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80111d2:	2b0b      	cmp	r3, #11
 80111d4:	d905      	bls.n	80111e2 <tcp_slowtmr+0xae>
          ++pcb_remove; /* max probes reached */
 80111d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111da:	3301      	adds	r3, #1
 80111dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111e0:	e0e0      	b.n	80113a4 <tcp_slowtmr+0x270>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80111e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80111e8:	3b01      	subs	r3, #1
 80111ea:	4a52      	ldr	r2, [pc, #328]	; (8011334 <tcp_slowtmr+0x200>)
 80111ec:	5cd3      	ldrb	r3, [r2, r3]
 80111ee:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80111f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80111f6:	7c7a      	ldrb	r2, [r7, #17]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d907      	bls.n	801120c <tcp_slowtmr+0xd8>
            pcb->persist_cnt++;
 80111fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011202:	3301      	adds	r3, #1
 8011204:	b2da      	uxtb	r2, r3
 8011206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011208:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011212:	7c7a      	ldrb	r2, [r7, #17]
 8011214:	429a      	cmp	r2, r3
 8011216:	f200 80c5 	bhi.w	80113a4 <tcp_slowtmr+0x270>
            int next_slot = 1; /* increment timer to next slot */
 801121a:	2301      	movs	r3, #1
 801121c:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011220:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011224:	2b00      	cmp	r3, #0
 8011226:	d108      	bne.n	801123a <tcp_slowtmr+0x106>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801122a:	f004 fba9 	bl	8015980 <tcp_zero_window_probe>
 801122e:	4603      	mov	r3, r0
 8011230:	2b00      	cmp	r3, #0
 8011232:	d014      	beq.n	801125e <tcp_slowtmr+0x12a>
                next_slot = 0; /* try probe again with current slot */
 8011234:	2300      	movs	r3, #0
 8011236:	623b      	str	r3, [r7, #32]
 8011238:	e011      	b.n	801125e <tcp_slowtmr+0x12a>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011240:	4619      	mov	r1, r3
 8011242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011244:	f003 fc20 	bl	8014a88 <tcp_split_unsent_seg>
 8011248:	4603      	mov	r3, r0
 801124a:	2b00      	cmp	r3, #0
 801124c:	d107      	bne.n	801125e <tcp_slowtmr+0x12a>
                if (tcp_output(pcb) == ERR_OK) {
 801124e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011250:	f003 fe10 	bl	8014e74 <tcp_output>
 8011254:	4603      	mov	r3, r0
 8011256:	2b00      	cmp	r3, #0
 8011258:	d101      	bne.n	801125e <tcp_slowtmr+0x12a>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801125a:	2300      	movs	r3, #0
 801125c:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801125e:	6a3b      	ldr	r3, [r7, #32]
 8011260:	2b00      	cmp	r3, #0
 8011262:	f000 809f 	beq.w	80113a4 <tcp_slowtmr+0x270>
              pcb->persist_cnt = 0;
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	2200      	movs	r2, #0
 801126a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011270:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011274:	2b06      	cmp	r3, #6
 8011276:	f200 8095 	bhi.w	80113a4 <tcp_slowtmr+0x270>
                pcb->persist_backoff++;
 801127a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801127c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011280:	3301      	adds	r3, #1
 8011282:	b2da      	uxtb	r2, r3
 8011284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011286:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801128a:	e08b      	b.n	80113a4 <tcp_slowtmr+0x270>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011292:	2b00      	cmp	r3, #0
 8011294:	db0f      	blt.n	80112b6 <tcp_slowtmr+0x182>
 8011296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011298:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801129c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d008      	beq.n	80112b6 <tcp_slowtmr+0x182>
          ++pcb->rtime;
 80112a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	3301      	adds	r3, #1
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	b21a      	sxth	r2, r3
 80112b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b4:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80112b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80112bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80112c2:	429a      	cmp	r2, r3
 80112c4:	db6e      	blt.n	80113a4 <tcp_slowtmr+0x270>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80112c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112c8:	f004 f86c 	bl	80153a4 <tcp_rexmit_rto_prepare>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d007      	beq.n	80112e2 <tcp_slowtmr+0x1ae>
 80112d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d164      	bne.n	80113a4 <tcp_slowtmr+0x270>
 80112da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d060      	beq.n	80113a4 <tcp_slowtmr+0x270>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80112e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e4:	7d1b      	ldrb	r3, [r3, #20]
 80112e6:	2b02      	cmp	r3, #2
 80112e8:	d02d      	beq.n	8011346 <tcp_slowtmr+0x212>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80112ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80112f0:	2b0c      	cmp	r3, #12
 80112f2:	bf28      	it	cs
 80112f4:	230c      	movcs	r3, #12
 80112f6:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80112f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80112fe:	10db      	asrs	r3, r3, #3
 8011300:	b21b      	sxth	r3, r3
 8011302:	461a      	mov	r2, r3
 8011304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011306:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801130a:	4413      	add	r3, r2
 801130c:	7efa      	ldrb	r2, [r7, #27]
 801130e:	490a      	ldr	r1, [pc, #40]	; (8011338 <tcp_slowtmr+0x204>)
 8011310:	5c8a      	ldrb	r2, [r1, r2]
 8011312:	4093      	lsls	r3, r2
 8011314:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801131c:	4293      	cmp	r3, r2
 801131e:	dc0d      	bgt.n	801133c <tcp_slowtmr+0x208>
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	b21a      	sxth	r2, r3
 8011324:	e00c      	b.n	8011340 <tcp_slowtmr+0x20c>
 8011326:	bf00      	nop
 8011328:	2000783c 	.word	0x2000783c
 801132c:	20007852 	.word	0x20007852
 8011330:	20007848 	.word	0x20007848
 8011334:	0801d208 	.word	0x0801d208
 8011338:	0801d1f8 	.word	0x0801d1f8
 801133c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011342:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011348:	2200      	movs	r2, #0
 801134a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801134c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011354:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011358:	4293      	cmp	r3, r2
 801135a:	bf28      	it	cs
 801135c:	4613      	movcs	r3, r2
 801135e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011360:	8a7b      	ldrh	r3, [r7, #18]
 8011362:	085b      	lsrs	r3, r3, #1
 8011364:	b29a      	uxth	r2, r3
 8011366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011368:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011376:	005b      	lsls	r3, r3, #1
 8011378:	b29b      	uxth	r3, r3
 801137a:	429a      	cmp	r2, r3
 801137c:	d206      	bcs.n	801138c <tcp_slowtmr+0x258>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011382:	005b      	lsls	r3, r3, #1
 8011384:	b29a      	uxth	r2, r3
 8011386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011388:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011392:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011398:	2200      	movs	r2, #0
 801139a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801139e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113a0:	f004 f869 	bl	8015476 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80113a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113a6:	7d1b      	ldrb	r3, [r3, #20]
 80113a8:	2b06      	cmp	r3, #6
 80113aa:	d111      	bne.n	80113d0 <tcp_slowtmr+0x29c>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80113ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ae:	8b5b      	ldrh	r3, [r3, #26]
 80113b0:	f003 0310 	and.w	r3, r3, #16
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d00b      	beq.n	80113d0 <tcp_slowtmr+0x29c>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80113b8:	4b91      	ldr	r3, [pc, #580]	; (8011600 <tcp_slowtmr+0x4cc>)
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113be:	6a1b      	ldr	r3, [r3, #32]
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	2b28      	cmp	r3, #40	; 0x28
 80113c4:	d904      	bls.n	80113d0 <tcp_slowtmr+0x29c>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80113c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113ca:	3301      	adds	r3, #1
 80113cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80113d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d2:	7a5b      	ldrb	r3, [r3, #9]
 80113d4:	f003 0308 	and.w	r3, r3, #8
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d04c      	beq.n	8011476 <tcp_slowtmr+0x342>
        ((pcb->state == ESTABLISHED) ||
 80113dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113de:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80113e0:	2b04      	cmp	r3, #4
 80113e2:	d003      	beq.n	80113ec <tcp_slowtmr+0x2b8>
         (pcb->state == CLOSE_WAIT))) {
 80113e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80113e8:	2b07      	cmp	r3, #7
 80113ea:	d144      	bne.n	8011476 <tcp_slowtmr+0x342>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80113ec:	4b84      	ldr	r3, [pc, #528]	; (8011600 <tcp_slowtmr+0x4cc>)
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f2:	6a1b      	ldr	r3, [r3, #32]
 80113f4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80113f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80113fc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011400:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011404:	497f      	ldr	r1, [pc, #508]	; (8011604 <tcp_slowtmr+0x4d0>)
 8011406:	fba1 1303 	umull	r1, r3, r1, r3
 801140a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801140c:	429a      	cmp	r2, r3
 801140e:	d90a      	bls.n	8011426 <tcp_slowtmr+0x2f2>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011414:	3301      	adds	r3, #1
 8011416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801141a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801141e:	3301      	adds	r3, #1
 8011420:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011424:	e027      	b.n	8011476 <tcp_slowtmr+0x342>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011426:	4b76      	ldr	r3, [pc, #472]	; (8011600 <tcp_slowtmr+0x4cc>)
 8011428:	681a      	ldr	r2, [r3, #0]
 801142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142c:	6a1b      	ldr	r3, [r3, #32]
 801142e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011432:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011438:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801143c:	4618      	mov	r0, r3
 801143e:	4b72      	ldr	r3, [pc, #456]	; (8011608 <tcp_slowtmr+0x4d4>)
 8011440:	fb00 f303 	mul.w	r3, r0, r3
 8011444:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011446:	496f      	ldr	r1, [pc, #444]	; (8011604 <tcp_slowtmr+0x4d0>)
 8011448:	fba1 1303 	umull	r1, r3, r1, r3
 801144c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801144e:	429a      	cmp	r2, r3
 8011450:	d911      	bls.n	8011476 <tcp_slowtmr+0x342>
        err = tcp_keepalive(pcb);
 8011452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011454:	f004 fa64 	bl	8015920 <tcp_keepalive>
 8011458:	4603      	mov	r3, r0
 801145a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801145e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011462:	2b00      	cmp	r3, #0
 8011464:	d107      	bne.n	8011476 <tcp_slowtmr+0x342>
          pcb->keep_cnt_sent++;
 8011466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011468:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801146c:	3301      	adds	r3, #1
 801146e:	b2da      	uxtb	r2, r3
 8011470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011472:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801147a:	2b00      	cmp	r3, #0
 801147c:	d011      	beq.n	80114a2 <tcp_slowtmr+0x36e>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801147e:	4b60      	ldr	r3, [pc, #384]	; (8011600 <tcp_slowtmr+0x4cc>)
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011484:	6a1b      	ldr	r3, [r3, #32]
 8011486:	1ad2      	subs	r2, r2, r3
 8011488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801148e:	4619      	mov	r1, r3
 8011490:	460b      	mov	r3, r1
 8011492:	005b      	lsls	r3, r3, #1
 8011494:	440b      	add	r3, r1
 8011496:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011498:	429a      	cmp	r2, r3
 801149a:	d302      	bcc.n	80114a2 <tcp_slowtmr+0x36e>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801149c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801149e:	f000 fd69 	bl	8011f74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80114a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a4:	7d1b      	ldrb	r3, [r3, #20]
 80114a6:	2b03      	cmp	r3, #3
 80114a8:	d10b      	bne.n	80114c2 <tcp_slowtmr+0x38e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114aa:	4b55      	ldr	r3, [pc, #340]	; (8011600 <tcp_slowtmr+0x4cc>)
 80114ac:	681a      	ldr	r2, [r3, #0]
 80114ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b0:	6a1b      	ldr	r3, [r3, #32]
 80114b2:	1ad3      	subs	r3, r2, r3
 80114b4:	2b28      	cmp	r3, #40	; 0x28
 80114b6:	d904      	bls.n	80114c2 <tcp_slowtmr+0x38e>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80114b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114bc:	3301      	adds	r3, #1
 80114be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80114c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c4:	7d1b      	ldrb	r3, [r3, #20]
 80114c6:	2b09      	cmp	r3, #9
 80114c8:	d10b      	bne.n	80114e2 <tcp_slowtmr+0x3ae>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80114ca:	4b4d      	ldr	r3, [pc, #308]	; (8011600 <tcp_slowtmr+0x4cc>)
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d0:	6a1b      	ldr	r3, [r3, #32]
 80114d2:	1ad3      	subs	r3, r2, r3
 80114d4:	2bf0      	cmp	r3, #240	; 0xf0
 80114d6:	d904      	bls.n	80114e2 <tcp_slowtmr+0x3ae>
        ++pcb_remove;
 80114d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114dc:	3301      	adds	r3, #1
 80114de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80114e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d048      	beq.n	801157c <tcp_slowtmr+0x448>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80114ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114f0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80114f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114f4:	f000 fc0c 	bl	8011d10 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80114f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d004      	beq.n	8011508 <tcp_slowtmr+0x3d4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 80114fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011500:	68da      	ldr	r2, [r3, #12]
 8011502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011504:	60da      	str	r2, [r3, #12]
 8011506:	e003      	b.n	8011510 <tcp_slowtmr+0x3dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 8011508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	4a3f      	ldr	r2, [pc, #252]	; (801160c <tcp_slowtmr+0x4d8>)
 801150e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011510:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011514:	2b00      	cmp	r3, #0
 8011516:	d013      	beq.n	8011540 <tcp_slowtmr+0x40c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011520:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011524:	3304      	adds	r3, #4
 8011526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011528:	8ad2      	ldrh	r2, [r2, #22]
 801152a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801152c:	8b09      	ldrh	r1, [r1, #24]
 801152e:	9102      	str	r1, [sp, #8]
 8011530:	9201      	str	r2, [sp, #4]
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	462b      	mov	r3, r5
 8011536:	4622      	mov	r2, r4
 8011538:	4601      	mov	r1, r0
 801153a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801153c:	f004 f96a 	bl	8015814 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011542:	691b      	ldr	r3, [r3, #16]
 8011544:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011548:	7d1b      	ldrb	r3, [r3, #20]
 801154a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011556:	6838      	ldr	r0, [r7, #0]
 8011558:	f7ff f9a8 	bl	80108ac <tcp_free>

      tcp_active_pcbs_changed = 0;
 801155c:	4b2c      	ldr	r3, [pc, #176]	; (8011610 <tcp_slowtmr+0x4dc>)
 801155e:	2200      	movs	r2, #0
 8011560:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d004      	beq.n	8011572 <tcp_slowtmr+0x43e>
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	f06f 010c 	mvn.w	r1, #12
 801156e:	68b8      	ldr	r0, [r7, #8]
 8011570:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011572:	4b27      	ldr	r3, [pc, #156]	; (8011610 <tcp_slowtmr+0x4dc>)
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d037      	beq.n	80115ea <tcp_slowtmr+0x4b6>
        goto tcp_slowtmr_start;
 801157a:	e5ec      	b.n	8011156 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011588:	7f1b      	ldrb	r3, [r3, #28]
 801158a:	3301      	adds	r3, #1
 801158c:	b2da      	uxtb	r2, r3
 801158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011590:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011594:	7f1a      	ldrb	r2, [r3, #28]
 8011596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011598:	7f5b      	ldrb	r3, [r3, #29]
 801159a:	429a      	cmp	r2, r3
 801159c:	d325      	bcc.n	80115ea <tcp_slowtmr+0x4b6>
        prev->polltmr = 0;
 801159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a0:	2200      	movs	r2, #0
 80115a2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80115a4:	4b1a      	ldr	r3, [pc, #104]	; (8011610 <tcp_slowtmr+0x4dc>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80115aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d00b      	beq.n	80115cc <tcp_slowtmr+0x498>
 80115b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115bc:	6912      	ldr	r2, [r2, #16]
 80115be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80115c0:	4610      	mov	r0, r2
 80115c2:	4798      	blx	r3
 80115c4:	4603      	mov	r3, r0
 80115c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80115ca:	e002      	b.n	80115d2 <tcp_slowtmr+0x49e>
 80115cc:	2300      	movs	r3, #0
 80115ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80115d2:	4b0f      	ldr	r3, [pc, #60]	; (8011610 <tcp_slowtmr+0x4dc>)
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d000      	beq.n	80115dc <tcp_slowtmr+0x4a8>
          goto tcp_slowtmr_start;
 80115da:	e5bc      	b.n	8011156 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80115dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d102      	bne.n	80115ea <tcp_slowtmr+0x4b6>
          tcp_output(prev);
 80115e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115e6:	f003 fc45 	bl	8014e74 <tcp_output>
  while (pcb != NULL) {
 80115ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	f47f adb8 	bne.w	8011162 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80115f2:	2300      	movs	r3, #0
 80115f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80115f6:	4b07      	ldr	r3, [pc, #28]	; (8011614 <tcp_slowtmr+0x4e0>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80115fc:	e03c      	b.n	8011678 <tcp_slowtmr+0x544>
 80115fe:	bf00      	nop
 8011600:	2000783c 	.word	0x2000783c
 8011604:	10624dd3 	.word	0x10624dd3
 8011608:	000124f8 	.word	0x000124f8
 801160c:	20007848 	.word	0x20007848
 8011610:	20007850 	.word	0x20007850
 8011614:	2000784c 	.word	0x2000784c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 8011618:	2300      	movs	r3, #0
 801161a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801161e:	4b1a      	ldr	r3, [pc, #104]	; (8011688 <tcp_slowtmr+0x554>)
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011624:	6a1b      	ldr	r3, [r3, #32]
 8011626:	1ad3      	subs	r3, r2, r3
 8011628:	2bf0      	cmp	r3, #240	; 0xf0
 801162a:	d904      	bls.n	8011636 <tcp_slowtmr+0x502>
      ++pcb_remove;
 801162c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011630:	3301      	adds	r3, #1
 8011632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801163a:	2b00      	cmp	r3, #0
 801163c:	d017      	beq.n	801166e <tcp_slowtmr+0x53a>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801163e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011640:	f000 fb66 	bl	8011d10 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011646:	2b00      	cmp	r3, #0
 8011648:	d004      	beq.n	8011654 <tcp_slowtmr+0x520>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 801164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164c:	68da      	ldr	r2, [r3, #12]
 801164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011650:	60da      	str	r2, [r3, #12]
 8011652:	e003      	b.n	801165c <tcp_slowtmr+0x528>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 8011654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	4a0c      	ldr	r2, [pc, #48]	; (801168c <tcp_slowtmr+0x558>)
 801165a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165e:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011666:	69f8      	ldr	r0, [r7, #28]
 8011668:	f7ff f920 	bl	80108ac <tcp_free>
 801166c:	e004      	b.n	8011678 <tcp_slowtmr+0x544>
    } else {
      prev = pcb;
 801166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011670:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167a:	2b00      	cmp	r3, #0
 801167c:	d1cc      	bne.n	8011618 <tcp_slowtmr+0x4e4>
    }
  }
}
 801167e:	bf00      	nop
 8011680:	bf00      	nop
 8011682:	3730      	adds	r7, #48	; 0x30
 8011684:	46bd      	mov	sp, r7
 8011686:	bdb0      	pop	{r4, r5, r7, pc}
 8011688:	2000783c 	.word	0x2000783c
 801168c:	2000784c 	.word	0x2000784c

08011690 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011696:	4b2d      	ldr	r3, [pc, #180]	; (801174c <tcp_fasttmr+0xbc>)
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	3301      	adds	r3, #1
 801169c:	b2da      	uxtb	r2, r3
 801169e:	4b2b      	ldr	r3, [pc, #172]	; (801174c <tcp_fasttmr+0xbc>)
 80116a0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80116a2:	4b2b      	ldr	r3, [pc, #172]	; (8011750 <tcp_fasttmr+0xc0>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80116a8:	e048      	b.n	801173c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	7f9a      	ldrb	r2, [r3, #30]
 80116ae:	4b27      	ldr	r3, [pc, #156]	; (801174c <tcp_fasttmr+0xbc>)
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d03f      	beq.n	8011736 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80116b6:	4b25      	ldr	r3, [pc, #148]	; (801174c <tcp_fasttmr+0xbc>)
 80116b8:	781a      	ldrb	r2, [r3, #0]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	8b5b      	ldrh	r3, [r3, #26]
 80116c2:	f003 0301 	and.w	r3, r3, #1
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d010      	beq.n	80116ec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	8b5b      	ldrh	r3, [r3, #26]
 80116ce:	f043 0302 	orr.w	r3, r3, #2
 80116d2:	b29a      	uxth	r2, r3
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f003 fbcb 	bl	8014e74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	8b5b      	ldrh	r3, [r3, #26]
 80116e2:	f023 0303 	bic.w	r3, r3, #3
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	8b5b      	ldrh	r3, [r3, #26]
 80116f0:	f003 0308 	and.w	r3, r3, #8
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d009      	beq.n	801170c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	8b5b      	ldrh	r3, [r3, #26]
 80116fc:	f023 0308 	bic.w	r3, r3, #8
 8011700:	b29a      	uxth	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f7ff f9fc 	bl	8010b04 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011716:	2b00      	cmp	r3, #0
 8011718:	d00a      	beq.n	8011730 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801171a:	4b0e      	ldr	r3, [pc, #56]	; (8011754 <tcp_fasttmr+0xc4>)
 801171c:	2200      	movs	r2, #0
 801171e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f000 f819 	bl	8011758 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011726:	4b0b      	ldr	r3, [pc, #44]	; (8011754 <tcp_fasttmr+0xc4>)
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d000      	beq.n	8011730 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801172e:	e7b8      	b.n	80116a2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	607b      	str	r3, [r7, #4]
 8011734:	e002      	b.n	801173c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1b3      	bne.n	80116aa <tcp_fasttmr+0x1a>
    }
  }
}
 8011742:	bf00      	nop
 8011744:	bf00      	nop
 8011746:	3708      	adds	r7, #8
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	20007852 	.word	0x20007852
 8011750:	20007848 	.word	0x20007848
 8011754:	20007850 	.word	0x20007850

08011758 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011758:	b590      	push	{r4, r7, lr}
 801175a:	b085      	sub	sp, #20
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d102      	bne.n	801176c <tcp_process_refused_data+0x14>
 8011766:	f06f 030f 	mvn.w	r3, #15
 801176a:	e060      	b.n	801182e <tcp_process_refused_data+0xd6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011770:	7b5b      	ldrb	r3, [r3, #13]
 8011772:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011778:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2200      	movs	r2, #0
 801177e:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011786:	2b00      	cmp	r3, #0
 8011788:	d00b      	beq.n	80117a2 <tcp_process_refused_data+0x4a>
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6918      	ldr	r0, [r3, #16]
 8011794:	2300      	movs	r3, #0
 8011796:	68ba      	ldr	r2, [r7, #8]
 8011798:	6879      	ldr	r1, [r7, #4]
 801179a:	47a0      	blx	r4
 801179c:	4603      	mov	r3, r0
 801179e:	73fb      	strb	r3, [r7, #15]
 80117a0:	e007      	b.n	80117b2 <tcp_process_refused_data+0x5a>
 80117a2:	2300      	movs	r3, #0
 80117a4:	68ba      	ldr	r2, [r7, #8]
 80117a6:	6879      	ldr	r1, [r7, #4]
 80117a8:	2000      	movs	r0, #0
 80117aa:	f000 f89e 	bl	80118ea <tcp_recv_null>
 80117ae:	4603      	mov	r3, r0
 80117b0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80117b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d12a      	bne.n	8011810 <tcp_process_refused_data+0xb8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80117ba:	7bbb      	ldrb	r3, [r7, #14]
 80117bc:	f003 0320 	and.w	r3, r3, #32
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d033      	beq.n	801182c <tcp_process_refused_data+0xd4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117c8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80117cc:	d005      	beq.n	80117da <tcp_process_refused_data+0x82>
          pcb->rcv_wnd++;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117d2:	3301      	adds	r3, #1
 80117d4:	b29a      	uxth	r2, r3
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d00b      	beq.n	80117fc <tcp_process_refused_data+0xa4>
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6918      	ldr	r0, [r3, #16]
 80117ee:	2300      	movs	r3, #0
 80117f0:	2200      	movs	r2, #0
 80117f2:	6879      	ldr	r1, [r7, #4]
 80117f4:	47a0      	blx	r4
 80117f6:	4603      	mov	r3, r0
 80117f8:	73fb      	strb	r3, [r7, #15]
 80117fa:	e001      	b.n	8011800 <tcp_process_refused_data+0xa8>
 80117fc:	2300      	movs	r3, #0
 80117fe:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011804:	f113 0f0d 	cmn.w	r3, #13
 8011808:	d110      	bne.n	801182c <tcp_process_refused_data+0xd4>
          return ERR_ABRT;
 801180a:	f06f 030c 	mvn.w	r3, #12
 801180e:	e00e      	b.n	801182e <tcp_process_refused_data+0xd6>
        }
      }
    } else if (err == ERR_ABRT) {
 8011810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011814:	f113 0f0d 	cmn.w	r3, #13
 8011818:	d102      	bne.n	8011820 <tcp_process_refused_data+0xc8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801181a:	f06f 030c 	mvn.w	r3, #12
 801181e:	e006      	b.n	801182e <tcp_process_refused_data+0xd6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	68ba      	ldr	r2, [r7, #8]
 8011824:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011826:	f06f 0304 	mvn.w	r3, #4
 801182a:	e000      	b.n	801182e <tcp_process_refused_data+0xd6>
    }
  }
  return ERR_OK;
 801182c:	2300      	movs	r3, #0
}
 801182e:	4618      	mov	r0, r3
 8011830:	3714      	adds	r7, #20
 8011832:	46bd      	mov	sp, r7
 8011834:	bd90      	pop	{r4, r7, pc}

08011836 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011836:	b580      	push	{r7, lr}
 8011838:	b084      	sub	sp, #16
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801183e:	e007      	b.n	8011850 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f000 f80a 	bl	8011860 <tcp_seg_free>
    seg = next;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d1f4      	bne.n	8011840 <tcp_segs_free+0xa>
  }
}
 8011856:	bf00      	nop
 8011858:	bf00      	nop
 801185a:	3710      	adds	r7, #16
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00c      	beq.n	8011888 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	685b      	ldr	r3, [r3, #4]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d004      	beq.n	8011880 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	4618      	mov	r0, r3
 801187c:	f7fe fe3a 	bl	80104f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011880:	6879      	ldr	r1, [r7, #4]
 8011882:	2003      	movs	r0, #3
 8011884:	f7fe f95a 	bl	800fb3c <memp_free>
  }
}
 8011888:	bf00      	nop
 801188a:	3708      	adds	r7, #8
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}

08011890 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8011890:	b480      	push	{r7}
 8011892:	b083      	sub	sp, #12
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	460b      	mov	r3, r1
 801189a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d002      	beq.n	80118a8 <tcp_setprio+0x18>

  pcb->prio = prio;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	78fa      	ldrb	r2, [r7, #3]
 80118a6:	755a      	strb	r2, [r3, #21]
}
 80118a8:	370c      	adds	r7, #12
 80118aa:	46bd      	mov	sp, r7
 80118ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b0:	4770      	bx	lr

080118b2 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80118b2:	b580      	push	{r7, lr}
 80118b4:	b084      	sub	sp, #16
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80118ba:	2003      	movs	r0, #3
 80118bc:	f7fe f902 	bl	800fac4 <memp_malloc>
 80118c0:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d101      	bne.n	80118cc <tcp_seg_copy+0x1a>
    return NULL;
 80118c8:	2300      	movs	r3, #0
 80118ca:	e00a      	b.n	80118e2 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80118cc:	2214      	movs	r2, #20
 80118ce:	6879      	ldr	r1, [r7, #4]
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	f009 fa60 	bl	801ad96 <memcpy>
  pbuf_ref(cseg->p);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	4618      	mov	r0, r3
 80118dc:	f7fe fe74 	bl	80105c8 <pbuf_ref>
  return cseg;
 80118e0:	68fb      	ldr	r3, [r7, #12]
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3710      	adds	r7, #16
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}

080118ea <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80118ea:	b580      	push	{r7, lr}
 80118ec:	b084      	sub	sp, #16
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	60f8      	str	r0, [r7, #12]
 80118f2:	60b9      	str	r1, [r7, #8]
 80118f4:	607a      	str	r2, [r7, #4]
 80118f6:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d102      	bne.n	8011904 <tcp_recv_null+0x1a>
 80118fe:	f06f 030f 	mvn.w	r3, #15
 8011902:	e016      	b.n	8011932 <tcp_recv_null+0x48>

  if (p != NULL) {
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d009      	beq.n	801191e <tcp_recv_null+0x34>
    tcp_recved(pcb, p->tot_len);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	891b      	ldrh	r3, [r3, #8]
 801190e:	4619      	mov	r1, r3
 8011910:	68b8      	ldr	r0, [r7, #8]
 8011912:	f7ff fb95 	bl	8011040 <tcp_recved>
    pbuf_free(p);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f7fe fdec 	bl	80104f4 <pbuf_free>
 801191c:	e008      	b.n	8011930 <tcp_recv_null+0x46>
  } else if (err == ERR_OK) {
 801191e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d104      	bne.n	8011930 <tcp_recv_null+0x46>
    return tcp_close(pcb);
 8011926:	68b8      	ldr	r0, [r7, #8]
 8011928:	f7ff f945 	bl	8010bb6 <tcp_close>
 801192c:	4603      	mov	r3, r0
 801192e:	e000      	b.n	8011932 <tcp_recv_null+0x48>
  }
  return ERR_OK;
 8011930:	2300      	movs	r3, #0
}
 8011932:	4618      	mov	r0, r3
 8011934:	3710      	adds	r7, #16
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
	...

0801193c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b086      	sub	sp, #24
 8011940:	af00      	add	r7, sp, #0
 8011942:	4603      	mov	r3, r0
 8011944:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801194a:	2b00      	cmp	r3, #0
 801194c:	db01      	blt.n	8011952 <tcp_kill_prio+0x16>
 801194e:	79fb      	ldrb	r3, [r7, #7]
 8011950:	e000      	b.n	8011954 <tcp_kill_prio+0x18>
 8011952:	237f      	movs	r3, #127	; 0x7f
 8011954:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011956:	7afb      	ldrb	r3, [r7, #11]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d034      	beq.n	80119c6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801195c:	7afb      	ldrb	r3, [r7, #11]
 801195e:	3b01      	subs	r3, #1
 8011960:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011962:	2300      	movs	r3, #0
 8011964:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011966:	2300      	movs	r3, #0
 8011968:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801196a:	4b19      	ldr	r3, [pc, #100]	; (80119d0 <tcp_kill_prio+0x94>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	617b      	str	r3, [r7, #20]
 8011970:	e01f      	b.n	80119b2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	7d5b      	ldrb	r3, [r3, #21]
 8011976:	7afa      	ldrb	r2, [r7, #11]
 8011978:	429a      	cmp	r2, r3
 801197a:	d80c      	bhi.n	8011996 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011980:	7afa      	ldrb	r2, [r7, #11]
 8011982:	429a      	cmp	r2, r3
 8011984:	d112      	bne.n	80119ac <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011986:	4b13      	ldr	r3, [pc, #76]	; (80119d4 <tcp_kill_prio+0x98>)
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	6a1b      	ldr	r3, [r3, #32]
 801198e:	1ad3      	subs	r3, r2, r3
 8011990:	68fa      	ldr	r2, [r7, #12]
 8011992:	429a      	cmp	r2, r3
 8011994:	d80a      	bhi.n	80119ac <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011996:	4b0f      	ldr	r3, [pc, #60]	; (80119d4 <tcp_kill_prio+0x98>)
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	6a1b      	ldr	r3, [r3, #32]
 801199e:	1ad3      	subs	r3, r2, r3
 80119a0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	7d5b      	ldrb	r3, [r3, #21]
 80119aa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	617b      	str	r3, [r7, #20]
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1dc      	bne.n	8011972 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d004      	beq.n	80119c8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80119be:	6938      	ldr	r0, [r7, #16]
 80119c0:	f7ff f9bc 	bl	8010d3c <tcp_abort>
 80119c4:	e000      	b.n	80119c8 <tcp_kill_prio+0x8c>
    return;
 80119c6:	bf00      	nop
  }
}
 80119c8:	3718      	adds	r7, #24
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop
 80119d0:	20007848 	.word	0x20007848
 80119d4:	2000783c 	.word	0x2000783c

080119d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b086      	sub	sp, #24
 80119dc:	af00      	add	r7, sp, #0
 80119de:	4603      	mov	r3, r0
 80119e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));

  inactivity = 0;
 80119e2:	2300      	movs	r3, #0
 80119e4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80119e6:	2300      	movs	r3, #0
 80119e8:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80119ea:	4b15      	ldr	r3, [pc, #84]	; (8011a40 <tcp_kill_state+0x68>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	617b      	str	r3, [r7, #20]
 80119f0:	e017      	b.n	8011a22 <tcp_kill_state+0x4a>
    if (pcb->state == state) {
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	7d1b      	ldrb	r3, [r3, #20]
 80119f6:	79fa      	ldrb	r2, [r7, #7]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d10f      	bne.n	8011a1c <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80119fc:	4b11      	ldr	r3, [pc, #68]	; (8011a44 <tcp_kill_state+0x6c>)
 80119fe:	681a      	ldr	r2, [r3, #0]
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	6a1b      	ldr	r3, [r3, #32]
 8011a04:	1ad3      	subs	r3, r2, r3
 8011a06:	68fa      	ldr	r2, [r7, #12]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d807      	bhi.n	8011a1c <tcp_kill_state+0x44>
        inactivity = tcp_ticks - pcb->tmr;
 8011a0c:	4b0d      	ldr	r3, [pc, #52]	; (8011a44 <tcp_kill_state+0x6c>)
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	6a1b      	ldr	r3, [r3, #32]
 8011a14:	1ad3      	subs	r3, r2, r3
 8011a16:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011a18:	697b      	ldr	r3, [r7, #20]
 8011a1a:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	617b      	str	r3, [r7, #20]
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d1e4      	bne.n	80119f2 <tcp_kill_state+0x1a>
      }
    }
  }
  if (inactive != NULL) {
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d003      	beq.n	8011a36 <tcp_kill_state+0x5e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011a2e:	2100      	movs	r1, #0
 8011a30:	6938      	ldr	r0, [r7, #16]
 8011a32:	f7ff f8df 	bl	8010bf4 <tcp_abandon>
  }
}
 8011a36:	bf00      	nop
 8011a38:	3718      	adds	r7, #24
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	20007848 	.word	0x20007848
 8011a44:	2000783c 	.word	0x2000783c

08011a48 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011a52:	2300      	movs	r3, #0
 8011a54:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a56:	4b12      	ldr	r3, [pc, #72]	; (8011aa0 <tcp_kill_timewait+0x58>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	60fb      	str	r3, [r7, #12]
 8011a5c:	e012      	b.n	8011a84 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011a5e:	4b11      	ldr	r3, [pc, #68]	; (8011aa4 <tcp_kill_timewait+0x5c>)
 8011a60:	681a      	ldr	r2, [r3, #0]
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	6a1b      	ldr	r3, [r3, #32]
 8011a66:	1ad3      	subs	r3, r2, r3
 8011a68:	687a      	ldr	r2, [r7, #4]
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d807      	bhi.n	8011a7e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011a6e:	4b0d      	ldr	r3, [pc, #52]	; (8011aa4 <tcp_kill_timewait+0x5c>)
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	6a1b      	ldr	r3, [r3, #32]
 8011a76:	1ad3      	subs	r3, r2, r3
 8011a78:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	68db      	ldr	r3, [r3, #12]
 8011a82:	60fb      	str	r3, [r7, #12]
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d1e9      	bne.n	8011a5e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d002      	beq.n	8011a96 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011a90:	68b8      	ldr	r0, [r7, #8]
 8011a92:	f7ff f953 	bl	8010d3c <tcp_abort>
  }
}
 8011a96:	bf00      	nop
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop
 8011aa0:	2000784c 	.word	0x2000784c
 8011aa4:	2000783c 	.word	0x2000783c

08011aa8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011aae:	4b10      	ldr	r3, [pc, #64]	; (8011af0 <tcp_handle_closepend+0x48>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011ab4:	e014      	b.n	8011ae0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	68db      	ldr	r3, [r3, #12]
 8011aba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	8b5b      	ldrh	r3, [r3, #26]
 8011ac0:	f003 0308 	and.w	r3, r3, #8
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d009      	beq.n	8011adc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	8b5b      	ldrh	r3, [r3, #26]
 8011acc:	f023 0308 	bic.w	r3, r3, #8
 8011ad0:	b29a      	uxth	r2, r3
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f7ff f814 	bl	8010b04 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d1e7      	bne.n	8011ab6 <tcp_handle_closepend+0xe>
  }
}
 8011ae6:	bf00      	nop
 8011ae8:	bf00      	nop
 8011aea:	3708      	adds	r7, #8
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}
 8011af0:	20007848 	.word	0x20007848

08011af4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	4603      	mov	r3, r0
 8011afc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011afe:	2001      	movs	r0, #1
 8011b00:	f7fd ffe0 	bl	800fac4 <memp_malloc>
 8011b04:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d126      	bne.n	8011b5a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011b0c:	f7ff ffcc 	bl	8011aa8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011b10:	f7ff ff9a 	bl	8011a48 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011b14:	2001      	movs	r0, #1
 8011b16:	f7fd ffd5 	bl	800fac4 <memp_malloc>
 8011b1a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d11b      	bne.n	8011b5a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011b22:	2009      	movs	r0, #9
 8011b24:	f7ff ff58 	bl	80119d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011b28:	2001      	movs	r0, #1
 8011b2a:	f7fd ffcb 	bl	800fac4 <memp_malloc>
 8011b2e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d111      	bne.n	8011b5a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011b36:	2008      	movs	r0, #8
 8011b38:	f7ff ff4e 	bl	80119d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011b3c:	2001      	movs	r0, #1
 8011b3e:	f7fd ffc1 	bl	800fac4 <memp_malloc>
 8011b42:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d107      	bne.n	8011b5a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011b4a:	79fb      	ldrb	r3, [r7, #7]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7ff fef5 	bl	801193c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011b52:	2001      	movs	r0, #1
 8011b54:	f7fd ffb6 	bl	800fac4 <memp_malloc>
 8011b58:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d03f      	beq.n	8011be0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011b60:	229c      	movs	r2, #156	; 0x9c
 8011b62:	2100      	movs	r1, #0
 8011b64:	68f8      	ldr	r0, [r7, #12]
 8011b66:	f009 f86c 	bl	801ac42 <memset>
    pcb->prio = prio;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	79fa      	ldrb	r2, [r7, #7]
 8011b6e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011b76:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011b80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	22ff      	movs	r2, #255	; 0xff
 8011b8e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011b96:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2206      	movs	r2, #6
 8011b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2206      	movs	r2, #6
 8011ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011bb6:	4b0d      	ldr	r3, [pc, #52]	; (8011bec <tcp_alloc+0xf8>)
 8011bb8:	681a      	ldr	r2, [r3, #0]
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011bbe:	4b0c      	ldr	r3, [pc, #48]	; (8011bf0 <tcp_alloc+0xfc>)
 8011bc0:	781a      	ldrb	r2, [r3, #0]
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011bcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	4a08      	ldr	r2, [pc, #32]	; (8011bf4 <tcp_alloc+0x100>)
 8011bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	4a07      	ldr	r2, [pc, #28]	; (8011bf8 <tcp_alloc+0x104>)
 8011bdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011be0:	68fb      	ldr	r3, [r7, #12]
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3710      	adds	r7, #16
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	2000783c 	.word	0x2000783c
 8011bf0:	20007852 	.word	0x20007852
 8011bf4:	080118eb 	.word	0x080118eb
 8011bf8:	006ddd00 	.word	0x006ddd00

08011bfc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8011c00:	2040      	movs	r0, #64	; 0x40
 8011c02:	f7ff ff77 	bl	8011af4 <tcp_alloc>
 8011c06:	4603      	mov	r3, r0
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	4603      	mov	r3, r0
 8011c14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8011c16:	2040      	movs	r0, #64	; 0x40
 8011c18:	f7ff ff6c 	bl	8011af4 <tcp_alloc>
 8011c1c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3710      	adds	r7, #16
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b083      	sub	sp, #12
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d002      	beq.n	8011c3e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	683a      	ldr	r2, [r7, #0]
 8011c3c:	611a      	str	r2, [r3, #16]
  }
}
 8011c3e:	bf00      	nop
 8011c40:	370c      	adds	r7, #12
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr

08011c4a <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011c4a:	b480      	push	{r7}
 8011c4c:	b083      	sub	sp, #12
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
 8011c52:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d003      	beq.n	8011c62 <tcp_recv+0x18>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
    pcb->recv = recv;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	683a      	ldr	r2, [r7, #0]
 8011c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8011c62:	bf00      	nop
 8011c64:	370c      	adds	r7, #12
 8011c66:	46bd      	mov	sp, r7
 8011c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6c:	4770      	bx	lr

08011c6e <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011c6e:	b480      	push	{r7}
 8011c70:	b083      	sub	sp, #12
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	6078      	str	r0, [r7, #4]
 8011c76:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d003      	beq.n	8011c86 <tcp_sent+0x18>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
    pcb->sent = sent;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	683a      	ldr	r2, [r7, #0]
 8011c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011c86:	bf00      	nop
 8011c88:	370c      	adds	r7, #12
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c90:	4770      	bx	lr

08011c92 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011c92:	b480      	push	{r7}
 8011c94:	b083      	sub	sp, #12
 8011c96:	af00      	add	r7, sp, #0
 8011c98:	6078      	str	r0, [r7, #4]
 8011c9a:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d003      	beq.n	8011caa <tcp_err+0x18>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
    pcb->errf = err;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	683a      	ldr	r2, [r7, #0]
 8011ca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8011caa:	bf00      	nop
 8011cac:	370c      	adds	r7, #12
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr

08011cb6 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011cb6:	b480      	push	{r7}
 8011cb8:	b085      	sub	sp, #20
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	6078      	str	r0, [r7, #4]
 8011cbe:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d008      	beq.n	8011cd8 <tcp_accept+0x22>
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	7d1b      	ldrb	r3, [r3, #20]
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d104      	bne.n	8011cd8 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	683a      	ldr	r2, [r7, #0]
 8011cd6:	619a      	str	r2, [r3, #24]
  }
}
 8011cd8:	bf00      	nop
 8011cda:	3714      	adds	r7, #20
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce2:	4770      	bx	lr

08011ce4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b085      	sub	sp, #20
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	4613      	mov	r3, r2
 8011cf0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d006      	beq.n	8011d06 <tcp_poll+0x22>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	68ba      	ldr	r2, [r7, #8]
 8011cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	79fa      	ldrb	r2, [r7, #7]
 8011d04:	775a      	strb	r2, [r3, #29]
}
 8011d06:	3714      	adds	r7, #20
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr

08011d10 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b082      	sub	sp, #8
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d037      	beq.n	8011d8e <tcp_pcb_purge+0x7e>

  if (pcb->state != CLOSED &&
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	7d1b      	ldrb	r3, [r3, #20]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d033      	beq.n	8011d8e <tcp_pcb_purge+0x7e>
      pcb->state != TIME_WAIT &&
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011d2a:	2b0a      	cmp	r3, #10
 8011d2c:	d02f      	beq.n	8011d8e <tcp_pcb_purge+0x7e>
      pcb->state != LISTEN) {
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011d32:	2b01      	cmp	r3, #1
 8011d34:	d02b      	beq.n	8011d8e <tcp_pcb_purge+0x7e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d007      	beq.n	8011d4e <tcp_pcb_purge+0x3e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fe fbd6 	bl	80104f4 <pbuf_free>
      pcb->refused_data = NULL;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d002      	beq.n	8011d5c <tcp_pcb_purge+0x4c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 f90c 	bl	8011f74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d62:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7ff fd64 	bl	8011836 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7ff fd5f 	bl	8011836 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011d8e:	3708      	adds	r7, #8
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);

  TCP_RMV(pcblist, pcb);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	683a      	ldr	r2, [r7, #0]
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d105      	bne.n	8011db4 <tcp_pcb_remove+0x20>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	68da      	ldr	r2, [r3, #12]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	601a      	str	r2, [r3, #0]
 8011db2:	e013      	b.n	8011ddc <tcp_pcb_remove+0x48>
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	60fb      	str	r3, [r7, #12]
 8011dba:	e00c      	b.n	8011dd6 <tcp_pcb_remove+0x42>
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	683a      	ldr	r2, [r7, #0]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d104      	bne.n	8011dd0 <tcp_pcb_remove+0x3c>
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	68da      	ldr	r2, [r3, #12]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	60da      	str	r2, [r3, #12]
 8011dce:	e005      	b.n	8011ddc <tcp_pcb_remove+0x48>
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	60fb      	str	r3, [r7, #12]
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d1ef      	bne.n	8011dbc <tcp_pcb_remove+0x28>
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	2200      	movs	r2, #0
 8011de0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011de2:	6838      	ldr	r0, [r7, #0]
 8011de4:	f7ff ff94 	bl	8011d10 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	7d1b      	ldrb	r3, [r3, #20]
 8011dec:	2b0a      	cmp	r3, #10
 8011dee:	d013      	beq.n	8011e18 <tcp_pcb_remove+0x84>
      (pcb->state != LISTEN) &&
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d00f      	beq.n	8011e18 <tcp_pcb_remove+0x84>
      (pcb->flags & TF_ACK_DELAY)) {
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	8b5b      	ldrh	r3, [r3, #26]
 8011dfc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d009      	beq.n	8011e18 <tcp_pcb_remove+0x84>
    tcp_ack_now(pcb);
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	8b5b      	ldrh	r3, [r3, #26]
 8011e08:	f043 0302 	orr.w	r3, r3, #2
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011e12:	6838      	ldr	r0, [r7, #0]
 8011e14:	f003 f82e 	bl	8014e74 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	2200      	movs	r2, #0
 8011e22:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011e24:	bf00      	nop
 8011e26:	3710      	adds	r7, #16
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}

08011e2c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	b083      	sub	sp, #12
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011e34:	4b07      	ldr	r3, [pc, #28]	; (8011e54 <tcp_next_iss+0x28>)
 8011e36:	681a      	ldr	r2, [r3, #0]
 8011e38:	4b07      	ldr	r3, [pc, #28]	; (8011e58 <tcp_next_iss+0x2c>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	4a05      	ldr	r2, [pc, #20]	; (8011e54 <tcp_next_iss+0x28>)
 8011e40:	6013      	str	r3, [r2, #0]
  return iss;
 8011e42:	4b04      	ldr	r3, [pc, #16]	; (8011e54 <tcp_next_iss+0x28>)
 8011e44:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	370c      	adds	r7, #12
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e50:	4770      	bx	lr
 8011e52:	bf00      	nop
 8011e54:	2000013c 	.word	0x2000013c
 8011e58:	2000783c 	.word	0x2000783c

08011e5c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	b087      	sub	sp, #28
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	4603      	mov	r3, r0
 8011e64:	60b9      	str	r1, [r7, #8]
 8011e66:	607a      	str	r2, [r7, #4]
 8011e68:	81fb      	strh	r3, [r7, #14]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d101      	bne.n	8011e74 <tcp_eff_send_mss_netif+0x18>
      return sendmss;
 8011e70:	89fb      	ldrh	r3, [r7, #14]
 8011e72:	e019      	b.n	8011ea8 <tcp_eff_send_mss_netif+0x4c>
    }
    mtu = outif->mtu;
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e78:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011e7a:	8afb      	ldrh	r3, [r7, #22]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d012      	beq.n	8011ea6 <tcp_eff_send_mss_netif+0x4a>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011e80:	2328      	movs	r3, #40	; 0x28
 8011e82:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011e84:	8afa      	ldrh	r2, [r7, #22]
 8011e86:	8abb      	ldrh	r3, [r7, #20]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d904      	bls.n	8011e96 <tcp_eff_send_mss_netif+0x3a>
 8011e8c:	8afa      	ldrh	r2, [r7, #22]
 8011e8e:	8abb      	ldrh	r3, [r7, #20]
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	e000      	b.n	8011e98 <tcp_eff_send_mss_netif+0x3c>
 8011e96:	2300      	movs	r3, #0
 8011e98:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011e9a:	8a7a      	ldrh	r2, [r7, #18]
 8011e9c:	89fb      	ldrh	r3, [r7, #14]
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	bf28      	it	cs
 8011ea2:	4613      	movcs	r3, r2
 8011ea4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011ea6:	89fb      	ldrh	r3, [r7, #14]
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	371c      	adds	r7, #28
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr

08011eb4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);

  while (pcb != NULL) {
 8011ec2:	e011      	b.n	8011ee8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d108      	bne.n	8011ee2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	68db      	ldr	r3, [r3, #12]
 8011ed4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011ed6:	68f8      	ldr	r0, [r7, #12]
 8011ed8:	f7fe ff30 	bl	8010d3c <tcp_abort>
      pcb = next;
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	60fb      	str	r3, [r7, #12]
 8011ee0:	e002      	b.n	8011ee8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	68db      	ldr	r3, [r3, #12]
 8011ee6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d1ea      	bne.n	8011ec4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8011eee:	bf00      	nop
 8011ef0:	bf00      	nop
 8011ef2:	3710      	adds	r7, #16
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d02a      	beq.n	8011f5e <tcp_netif_ip_addr_changed+0x66>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d026      	beq.n	8011f5e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011f10:	4b15      	ldr	r3, [pc, #84]	; (8011f68 <tcp_netif_ip_addr_changed+0x70>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4619      	mov	r1, r3
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7ff ffcc 	bl	8011eb4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011f1c:	4b13      	ldr	r3, [pc, #76]	; (8011f6c <tcp_netif_ip_addr_changed+0x74>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4619      	mov	r1, r3
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f7ff ffc6 	bl	8011eb4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d017      	beq.n	8011f5e <tcp_netif_ip_addr_changed+0x66>
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d013      	beq.n	8011f5e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011f36:	4b0e      	ldr	r3, [pc, #56]	; (8011f70 <tcp_netif_ip_addr_changed+0x78>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	60fb      	str	r3, [r7, #12]
 8011f3c:	e00c      	b.n	8011f58 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d103      	bne.n	8011f52 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	68db      	ldr	r3, [r3, #12]
 8011f56:	60fb      	str	r3, [r7, #12]
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d1ef      	bne.n	8011f3e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011f5e:	bf00      	nop
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	20007848 	.word	0x20007848
 8011f6c:	20007840 	.word	0x20007840
 8011f70:	20007844 	.word	0x20007844

08011f74 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d007      	beq.n	8011f94 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7ff fc54 	bl	8011836 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2200      	movs	r2, #0
 8011f92:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011f94:	bf00      	nop
 8011f96:	3708      	adds	r7, #8
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011f9c:	b590      	push	{r4, r7, lr}
 8011f9e:	b08d      	sub	sp, #52	; 0x34
 8011fa0:	af04      	add	r7, sp, #16
 8011fa2:	6078      	str	r0, [r7, #4]
 8011fa4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8011fa6:	4b9b      	ldr	r3, [pc, #620]	; (8012214 <tcp_input+0x278>)
 8011fa8:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8011fac:	3301      	adds	r3, #1
 8011fae:	b29a      	uxth	r2, r3
 8011fb0:	4b98      	ldr	r3, [pc, #608]	; (8012214 <tcp_input+0x278>)
 8011fb2:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	685b      	ldr	r3, [r3, #4]
 8011fba:	4a97      	ldr	r2, [pc, #604]	; (8012218 <tcp_input+0x27c>)
 8011fbc:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	895b      	ldrh	r3, [r3, #10]
 8011fc2:	2b13      	cmp	r3, #19
 8011fc4:	d808      	bhi.n	8011fd8 <tcp_input+0x3c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8011fc6:	4b93      	ldr	r3, [pc, #588]	; (8012214 <tcp_input+0x278>)
 8011fc8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8011fcc:	3301      	adds	r3, #1
 8011fce:	b29a      	uxth	r2, r3
 8011fd0:	4b90      	ldr	r3, [pc, #576]	; (8012214 <tcp_input+0x278>)
 8011fd2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8011fd6:	e3a3      	b.n	8012720 <tcp_input+0x784>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011fd8:	4b90      	ldr	r3, [pc, #576]	; (801221c <tcp_input+0x280>)
 8011fda:	695b      	ldr	r3, [r3, #20]
 8011fdc:	4a8f      	ldr	r2, [pc, #572]	; (801221c <tcp_input+0x280>)
 8011fde:	6812      	ldr	r2, [r2, #0]
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f007 fd16 	bl	8019a14 <ip4_addr_isbroadcast_u32>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d105      	bne.n	8011ffa <tcp_input+0x5e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011fee:	4b8b      	ldr	r3, [pc, #556]	; (801221c <tcp_input+0x280>)
 8011ff0:	695b      	ldr	r3, [r3, #20]
 8011ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011ff6:	2be0      	cmp	r3, #224	; 0xe0
 8011ff8:	d108      	bne.n	801200c <tcp_input+0x70>
    TCP_STATS_INC(tcp.proterr);
 8011ffa:	4b86      	ldr	r3, [pc, #536]	; (8012214 <tcp_input+0x278>)
 8011ffc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8012000:	3301      	adds	r3, #1
 8012002:	b29a      	uxth	r2, r3
 8012004:	4b83      	ldr	r3, [pc, #524]	; (8012214 <tcp_input+0x278>)
 8012006:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 801200a:	e389      	b.n	8012720 <tcp_input+0x784>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	891a      	ldrh	r2, [r3, #8]
 8012010:	4b83      	ldr	r3, [pc, #524]	; (8012220 <tcp_input+0x284>)
 8012012:	9300      	str	r3, [sp, #0]
 8012014:	4b83      	ldr	r3, [pc, #524]	; (8012224 <tcp_input+0x288>)
 8012016:	2106      	movs	r1, #6
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f7fd fc4f 	bl	800f8bc <ip_chksum_pseudo>
 801201e:	4603      	mov	r3, r0
 8012020:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8012022:	8a3b      	ldrh	r3, [r7, #16]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d008      	beq.n	801203a <tcp_input+0x9e>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 8012028:	4b7a      	ldr	r3, [pc, #488]	; (8012214 <tcp_input+0x278>)
 801202a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 801202e:	3301      	adds	r3, #1
 8012030:	b29a      	uxth	r2, r3
 8012032:	4b78      	ldr	r3, [pc, #480]	; (8012214 <tcp_input+0x278>)
 8012034:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
      goto dropped;
 8012038:	e372      	b.n	8012720 <tcp_input+0x784>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801203a:	4b77      	ldr	r3, [pc, #476]	; (8012218 <tcp_input+0x27c>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	899b      	ldrh	r3, [r3, #12]
 8012040:	b29b      	uxth	r3, r3
 8012042:	4618      	mov	r0, r3
 8012044:	f7fd fa5e 	bl	800f504 <lwip_htons>
 8012048:	4603      	mov	r3, r0
 801204a:	0b1b      	lsrs	r3, r3, #12
 801204c:	b29b      	uxth	r3, r3
 801204e:	b2db      	uxtb	r3, r3
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012054:	7bfb      	ldrb	r3, [r7, #15]
 8012056:	2b13      	cmp	r3, #19
 8012058:	d905      	bls.n	8012066 <tcp_input+0xca>
 801205a:	7bfb      	ldrb	r3, [r7, #15]
 801205c:	b29a      	uxth	r2, r3
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	891b      	ldrh	r3, [r3, #8]
 8012062:	429a      	cmp	r2, r3
 8012064:	d908      	bls.n	8012078 <tcp_input+0xdc>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8012066:	4b6b      	ldr	r3, [pc, #428]	; (8012214 <tcp_input+0x278>)
 8012068:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 801206c:	3301      	adds	r3, #1
 801206e:	b29a      	uxth	r2, r3
 8012070:	4b68      	ldr	r3, [pc, #416]	; (8012214 <tcp_input+0x278>)
 8012072:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8012076:	e353      	b.n	8012720 <tcp_input+0x784>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012078:	7bfb      	ldrb	r3, [r7, #15]
 801207a:	b29b      	uxth	r3, r3
 801207c:	3b14      	subs	r3, #20
 801207e:	b29a      	uxth	r2, r3
 8012080:	4b69      	ldr	r3, [pc, #420]	; (8012228 <tcp_input+0x28c>)
 8012082:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012084:	4b69      	ldr	r3, [pc, #420]	; (801222c <tcp_input+0x290>)
 8012086:	2200      	movs	r2, #0
 8012088:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	895a      	ldrh	r2, [r3, #10]
 801208e:	7bfb      	ldrb	r3, [r7, #15]
 8012090:	b29b      	uxth	r3, r3
 8012092:	429a      	cmp	r2, r3
 8012094:	d309      	bcc.n	80120aa <tcp_input+0x10e>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012096:	4b64      	ldr	r3, [pc, #400]	; (8012228 <tcp_input+0x28c>)
 8012098:	881a      	ldrh	r2, [r3, #0]
 801209a:	4b65      	ldr	r3, [pc, #404]	; (8012230 <tcp_input+0x294>)
 801209c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801209e:	7bfb      	ldrb	r3, [r7, #15]
 80120a0:	4619      	mov	r1, r3
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7fe f9b9 	bl	801041a <pbuf_remove_header>
 80120a8:	e035      	b.n	8012116 <tcp_input+0x17a>
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80120aa:	2114      	movs	r1, #20
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f7fe f9b4 	bl	801041a <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	895a      	ldrh	r2, [r3, #10]
 80120b6:	4b5e      	ldr	r3, [pc, #376]	; (8012230 <tcp_input+0x294>)
 80120b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80120ba:	4b5b      	ldr	r3, [pc, #364]	; (8012228 <tcp_input+0x28c>)
 80120bc:	881a      	ldrh	r2, [r3, #0]
 80120be:	4b5c      	ldr	r3, [pc, #368]	; (8012230 <tcp_input+0x294>)
 80120c0:	881b      	ldrh	r3, [r3, #0]
 80120c2:	1ad3      	subs	r3, r2, r3
 80120c4:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80120c6:	4b5a      	ldr	r3, [pc, #360]	; (8012230 <tcp_input+0x294>)
 80120c8:	881b      	ldrh	r3, [r3, #0]
 80120ca:	4619      	mov	r1, r3
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f7fe f9a4 	bl	801041a <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	895b      	ldrh	r3, [r3, #10]
 80120d8:	89ba      	ldrh	r2, [r7, #12]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d908      	bls.n	80120f0 <tcp_input+0x154>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 80120de:	4b4d      	ldr	r3, [pc, #308]	; (8012214 <tcp_input+0x278>)
 80120e0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80120e4:	3301      	adds	r3, #1
 80120e6:	b29a      	uxth	r2, r3
 80120e8:	4b4a      	ldr	r3, [pc, #296]	; (8012214 <tcp_input+0x278>)
 80120ea:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 80120ee:	e317      	b.n	8012720 <tcp_input+0x784>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	4a4d      	ldr	r2, [pc, #308]	; (801222c <tcp_input+0x290>)
 80120f8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	89ba      	ldrh	r2, [r7, #12]
 8012100:	4611      	mov	r1, r2
 8012102:	4618      	mov	r0, r3
 8012104:	f7fe f989 	bl	801041a <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	891a      	ldrh	r2, [r3, #8]
 801210c:	89bb      	ldrh	r3, [r7, #12]
 801210e:	1ad3      	subs	r3, r2, r3
 8012110:	b29a      	uxth	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012116:	4b40      	ldr	r3, [pc, #256]	; (8012218 <tcp_input+0x27c>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	881b      	ldrh	r3, [r3, #0]
 801211c:	b29b      	uxth	r3, r3
 801211e:	4a3e      	ldr	r2, [pc, #248]	; (8012218 <tcp_input+0x27c>)
 8012120:	6814      	ldr	r4, [r2, #0]
 8012122:	4618      	mov	r0, r3
 8012124:	f7fd f9ee 	bl	800f504 <lwip_htons>
 8012128:	4603      	mov	r3, r0
 801212a:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801212c:	4b3a      	ldr	r3, [pc, #232]	; (8012218 <tcp_input+0x27c>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	885b      	ldrh	r3, [r3, #2]
 8012132:	b29b      	uxth	r3, r3
 8012134:	4a38      	ldr	r2, [pc, #224]	; (8012218 <tcp_input+0x27c>)
 8012136:	6814      	ldr	r4, [r2, #0]
 8012138:	4618      	mov	r0, r3
 801213a:	f7fd f9e3 	bl	800f504 <lwip_htons>
 801213e:	4603      	mov	r3, r0
 8012140:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012142:	4b35      	ldr	r3, [pc, #212]	; (8012218 <tcp_input+0x27c>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	4a33      	ldr	r2, [pc, #204]	; (8012218 <tcp_input+0x27c>)
 801214a:	6814      	ldr	r4, [r2, #0]
 801214c:	4618      	mov	r0, r3
 801214e:	f7fd f9ee 	bl	800f52e <lwip_htonl>
 8012152:	4603      	mov	r3, r0
 8012154:	6063      	str	r3, [r4, #4]
 8012156:	6863      	ldr	r3, [r4, #4]
 8012158:	4a36      	ldr	r2, [pc, #216]	; (8012234 <tcp_input+0x298>)
 801215a:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801215c:	4b2e      	ldr	r3, [pc, #184]	; (8012218 <tcp_input+0x27c>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	689b      	ldr	r3, [r3, #8]
 8012162:	4a2d      	ldr	r2, [pc, #180]	; (8012218 <tcp_input+0x27c>)
 8012164:	6814      	ldr	r4, [r2, #0]
 8012166:	4618      	mov	r0, r3
 8012168:	f7fd f9e1 	bl	800f52e <lwip_htonl>
 801216c:	4603      	mov	r3, r0
 801216e:	60a3      	str	r3, [r4, #8]
 8012170:	68a3      	ldr	r3, [r4, #8]
 8012172:	4a31      	ldr	r2, [pc, #196]	; (8012238 <tcp_input+0x29c>)
 8012174:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012176:	4b28      	ldr	r3, [pc, #160]	; (8012218 <tcp_input+0x27c>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	89db      	ldrh	r3, [r3, #14]
 801217c:	b29b      	uxth	r3, r3
 801217e:	4a26      	ldr	r2, [pc, #152]	; (8012218 <tcp_input+0x27c>)
 8012180:	6814      	ldr	r4, [r2, #0]
 8012182:	4618      	mov	r0, r3
 8012184:	f7fd f9be 	bl	800f504 <lwip_htons>
 8012188:	4603      	mov	r3, r0
 801218a:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801218c:	4b22      	ldr	r3, [pc, #136]	; (8012218 <tcp_input+0x27c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	899b      	ldrh	r3, [r3, #12]
 8012192:	b29b      	uxth	r3, r3
 8012194:	4618      	mov	r0, r3
 8012196:	f7fd f9b5 	bl	800f504 <lwip_htons>
 801219a:	4603      	mov	r3, r0
 801219c:	b2db      	uxtb	r3, r3
 801219e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121a2:	b2da      	uxtb	r2, r3
 80121a4:	4b25      	ldr	r3, [pc, #148]	; (801223c <tcp_input+0x2a0>)
 80121a6:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	891a      	ldrh	r2, [r3, #8]
 80121ac:	4b24      	ldr	r3, [pc, #144]	; (8012240 <tcp_input+0x2a4>)
 80121ae:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80121b0:	4b22      	ldr	r3, [pc, #136]	; (801223c <tcp_input+0x2a0>)
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	f003 0303 	and.w	r3, r3, #3
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d014      	beq.n	80121e6 <tcp_input+0x24a>
    tcplen++;
 80121bc:	4b20      	ldr	r3, [pc, #128]	; (8012240 <tcp_input+0x2a4>)
 80121be:	881b      	ldrh	r3, [r3, #0]
 80121c0:	3301      	adds	r3, #1
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	4b1e      	ldr	r3, [pc, #120]	; (8012240 <tcp_input+0x2a4>)
 80121c6:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	891a      	ldrh	r2, [r3, #8]
 80121cc:	4b1c      	ldr	r3, [pc, #112]	; (8012240 <tcp_input+0x2a4>)
 80121ce:	881b      	ldrh	r3, [r3, #0]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d908      	bls.n	80121e6 <tcp_input+0x24a>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 80121d4:	4b0f      	ldr	r3, [pc, #60]	; (8012214 <tcp_input+0x278>)
 80121d6:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80121da:	3301      	adds	r3, #1
 80121dc:	b29a      	uxth	r2, r3
 80121de:	4b0d      	ldr	r3, [pc, #52]	; (8012214 <tcp_input+0x278>)
 80121e0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 80121e4:	e29c      	b.n	8012720 <tcp_input+0x784>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80121e6:	2300      	movs	r3, #0
 80121e8:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80121ea:	4b16      	ldr	r3, [pc, #88]	; (8012244 <tcp_input+0x2a8>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	61bb      	str	r3, [r7, #24]
 80121f0:	e063      	b.n	80122ba <tcp_input+0x31e>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80121f2:	69bb      	ldr	r3, [r7, #24]
 80121f4:	7a1b      	ldrb	r3, [r3, #8]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d026      	beq.n	8012248 <tcp_input+0x2ac>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	7a1a      	ldrb	r2, [r3, #8]
 80121fe:	4b07      	ldr	r3, [pc, #28]	; (801221c <tcp_input+0x280>)
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012206:	3301      	adds	r3, #1
 8012208:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801220a:	429a      	cmp	r2, r3
 801220c:	d01c      	beq.n	8012248 <tcp_input+0x2ac>
      prev = pcb;
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	61fb      	str	r3, [r7, #28]
      continue;
 8012212:	e04f      	b.n	80122b4 <tcp_input+0x318>
 8012214:	20007794 	.word	0x20007794
 8012218:	20007868 	.word	0x20007868
 801221c:	20007770 	.word	0x20007770
 8012220:	20007784 	.word	0x20007784
 8012224:	20007780 	.word	0x20007780
 8012228:	2000786c 	.word	0x2000786c
 801222c:	20007870 	.word	0x20007870
 8012230:	2000786e 	.word	0x2000786e
 8012234:	20007878 	.word	0x20007878
 8012238:	2000787c 	.word	0x2000787c
 801223c:	20007884 	.word	0x20007884
 8012240:	20007882 	.word	0x20007882
 8012244:	20007848 	.word	0x20007848
    }

    if (pcb->remote_port == tcphdr->src &&
 8012248:	69bb      	ldr	r3, [r7, #24]
 801224a:	8b1a      	ldrh	r2, [r3, #24]
 801224c:	4b68      	ldr	r3, [pc, #416]	; (80123f0 <tcp_input+0x454>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	881b      	ldrh	r3, [r3, #0]
 8012252:	b29b      	uxth	r3, r3
 8012254:	429a      	cmp	r2, r3
 8012256:	d12b      	bne.n	80122b0 <tcp_input+0x314>
        pcb->local_port == tcphdr->dest &&
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	8ada      	ldrh	r2, [r3, #22]
 801225c:	4b64      	ldr	r3, [pc, #400]	; (80123f0 <tcp_input+0x454>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	885b      	ldrh	r3, [r3, #2]
 8012262:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012264:	429a      	cmp	r2, r3
 8012266:	d123      	bne.n	80122b0 <tcp_input+0x314>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	685a      	ldr	r2, [r3, #4]
 801226c:	4b61      	ldr	r3, [pc, #388]	; (80123f4 <tcp_input+0x458>)
 801226e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012270:	429a      	cmp	r2, r3
 8012272:	d11d      	bne.n	80122b0 <tcp_input+0x314>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012274:	69bb      	ldr	r3, [r7, #24]
 8012276:	681a      	ldr	r2, [r3, #0]
 8012278:	4b5e      	ldr	r3, [pc, #376]	; (80123f4 <tcp_input+0x458>)
 801227a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801227c:	429a      	cmp	r2, r3
 801227e:	d117      	bne.n	80122b0 <tcp_input+0x314>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 8012280:	69fb      	ldr	r3, [r7, #28]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d00b      	beq.n	801229e <tcp_input+0x302>
        prev->next = pcb->next;
 8012286:	69bb      	ldr	r3, [r7, #24]
 8012288:	68da      	ldr	r2, [r3, #12]
 801228a:	69fb      	ldr	r3, [r7, #28]
 801228c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801228e:	4b5a      	ldr	r3, [pc, #360]	; (80123f8 <tcp_input+0x45c>)
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	69bb      	ldr	r3, [r7, #24]
 8012294:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012296:	4a58      	ldr	r2, [pc, #352]	; (80123f8 <tcp_input+0x45c>)
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 801229c:	e010      	b.n	80122c0 <tcp_input+0x324>
        TCP_STATS_INC(tcp.cachehit);
 801229e:	4b57      	ldr	r3, [pc, #348]	; (80123fc <tcp_input+0x460>)
 80122a0:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80122a4:	3301      	adds	r3, #1
 80122a6:	b29a      	uxth	r2, r3
 80122a8:	4b54      	ldr	r3, [pc, #336]	; (80123fc <tcp_input+0x460>)
 80122aa:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      break;
 80122ae:	e007      	b.n	80122c0 <tcp_input+0x324>
    }
    prev = pcb;
 80122b0:	69bb      	ldr	r3, [r7, #24]
 80122b2:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	61bb      	str	r3, [r7, #24]
 80122ba:	69bb      	ldr	r3, [r7, #24]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d198      	bne.n	80121f2 <tcp_input+0x256>
  }

  if (pcb == NULL) {
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	f040 80a0 	bne.w	8012408 <tcp_input+0x46c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80122c8:	4b4d      	ldr	r3, [pc, #308]	; (8012400 <tcp_input+0x464>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	61bb      	str	r3, [r7, #24]
 80122ce:	e034      	b.n	801233a <tcp_input+0x39e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	7a1b      	ldrb	r3, [r3, #8]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d009      	beq.n	80122ec <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80122d8:	69bb      	ldr	r3, [r7, #24]
 80122da:	7a1a      	ldrb	r2, [r3, #8]
 80122dc:	4b45      	ldr	r3, [pc, #276]	; (80123f4 <tcp_input+0x458>)
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80122e4:	3301      	adds	r3, #1
 80122e6:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d122      	bne.n	8012332 <tcp_input+0x396>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80122ec:	69bb      	ldr	r3, [r7, #24]
 80122ee:	8b1a      	ldrh	r2, [r3, #24]
 80122f0:	4b3f      	ldr	r3, [pc, #252]	; (80123f0 <tcp_input+0x454>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	881b      	ldrh	r3, [r3, #0]
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d11b      	bne.n	8012334 <tcp_input+0x398>
          pcb->local_port == tcphdr->dest &&
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	8ada      	ldrh	r2, [r3, #22]
 8012300:	4b3b      	ldr	r3, [pc, #236]	; (80123f0 <tcp_input+0x454>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	885b      	ldrh	r3, [r3, #2]
 8012306:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012308:	429a      	cmp	r2, r3
 801230a:	d113      	bne.n	8012334 <tcp_input+0x398>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801230c:	69bb      	ldr	r3, [r7, #24]
 801230e:	685a      	ldr	r2, [r3, #4]
 8012310:	4b38      	ldr	r3, [pc, #224]	; (80123f4 <tcp_input+0x458>)
 8012312:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012314:	429a      	cmp	r2, r3
 8012316:	d10d      	bne.n	8012334 <tcp_input+0x398>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012318:	69bb      	ldr	r3, [r7, #24]
 801231a:	681a      	ldr	r2, [r3, #0]
 801231c:	4b35      	ldr	r3, [pc, #212]	; (80123f4 <tcp_input+0x458>)
 801231e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012320:	429a      	cmp	r2, r3
 8012322:	d107      	bne.n	8012334 <tcp_input+0x398>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012324:	69b8      	ldr	r0, [r7, #24]
 8012326:	f000 fb41 	bl	80129ac <tcp_timewait_input>
        }
        pbuf_free(p);
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f7fe f8e2 	bl	80104f4 <pbuf_free>
        return;
 8012330:	e203      	b.n	801273a <tcp_input+0x79e>
        continue;
 8012332:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012334:	69bb      	ldr	r3, [r7, #24]
 8012336:	68db      	ldr	r3, [r3, #12]
 8012338:	61bb      	str	r3, [r7, #24]
 801233a:	69bb      	ldr	r3, [r7, #24]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d1c7      	bne.n	80122d0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012340:	2300      	movs	r3, #0
 8012342:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012344:	4b2f      	ldr	r3, [pc, #188]	; (8012404 <tcp_input+0x468>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	617b      	str	r3, [r7, #20]
 801234a:	e02a      	b.n	80123a2 <tcp_input+0x406>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	7a1b      	ldrb	r3, [r3, #8]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d00c      	beq.n	801236e <tcp_input+0x3d2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	7a1a      	ldrb	r2, [r3, #8]
 8012358:	4b26      	ldr	r3, [pc, #152]	; (80123f4 <tcp_input+0x458>)
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012360:	3301      	adds	r3, #1
 8012362:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012364:	429a      	cmp	r2, r3
 8012366:	d002      	beq.n	801236e <tcp_input+0x3d2>
        prev = (struct tcp_pcb *)lpcb;
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	61fb      	str	r3, [r7, #28]
        continue;
 801236c:	e016      	b.n	801239c <tcp_input+0x400>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	8ada      	ldrh	r2, [r3, #22]
 8012372:	4b1f      	ldr	r3, [pc, #124]	; (80123f0 <tcp_input+0x454>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	885b      	ldrh	r3, [r3, #2]
 8012378:	b29b      	uxth	r3, r3
 801237a:	429a      	cmp	r2, r3
 801237c:	d10c      	bne.n	8012398 <tcp_input+0x3fc>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	4b1c      	ldr	r3, [pc, #112]	; (80123f4 <tcp_input+0x458>)
 8012384:	695b      	ldr	r3, [r3, #20]
 8012386:	429a      	cmp	r2, r3
 8012388:	d00f      	beq.n	80123aa <tcp_input+0x40e>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00d      	beq.n	80123ac <tcp_input+0x410>
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d009      	beq.n	80123ac <tcp_input+0x410>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	617b      	str	r3, [r7, #20]
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1d1      	bne.n	801234c <tcp_input+0x3b0>
 80123a8:	e000      	b.n	80123ac <tcp_input+0x410>
            break;
 80123aa:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d02a      	beq.n	8012408 <tcp_input+0x46c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d00b      	beq.n	80123d0 <tcp_input+0x434>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	68da      	ldr	r2, [r3, #12]
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80123c0:	4b10      	ldr	r3, [pc, #64]	; (8012404 <tcp_input+0x468>)
 80123c2:	681a      	ldr	r2, [r3, #0]
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80123c8:	4a0e      	ldr	r2, [pc, #56]	; (8012404 <tcp_input+0x468>)
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	6013      	str	r3, [r2, #0]
 80123ce:	e007      	b.n	80123e0 <tcp_input+0x444>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80123d0:	4b0a      	ldr	r3, [pc, #40]	; (80123fc <tcp_input+0x460>)
 80123d2:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80123d6:	3301      	adds	r3, #1
 80123d8:	b29a      	uxth	r2, r3
 80123da:	4b08      	ldr	r3, [pc, #32]	; (80123fc <tcp_input+0x460>)
 80123dc:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80123e0:	6978      	ldr	r0, [r7, #20]
 80123e2:	f000 f9eb 	bl	80127bc <tcp_listen_input>
      }
      pbuf_free(p);
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f7fe f884 	bl	80104f4 <pbuf_free>
      return;
 80123ec:	e1a5      	b.n	801273a <tcp_input+0x79e>
 80123ee:	bf00      	nop
 80123f0:	20007868 	.word	0x20007868
 80123f4:	20007770 	.word	0x20007770
 80123f8:	20007848 	.word	0x20007848
 80123fc:	20007794 	.word	0x20007794
 8012400:	2000784c 	.word	0x2000784c
 8012404:	20007844 	.word	0x20007844
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012408:	69bb      	ldr	r3, [r7, #24]
 801240a:	2b00      	cmp	r3, #0
 801240c:	f000 814e 	beq.w	80126ac <tcp_input+0x710>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012410:	4b9c      	ldr	r3, [pc, #624]	; (8012684 <tcp_input+0x6e8>)
 8012412:	2200      	movs	r2, #0
 8012414:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	891a      	ldrh	r2, [r3, #8]
 801241a:	4b9a      	ldr	r3, [pc, #616]	; (8012684 <tcp_input+0x6e8>)
 801241c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801241e:	4a99      	ldr	r2, [pc, #612]	; (8012684 <tcp_input+0x6e8>)
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012424:	4b98      	ldr	r3, [pc, #608]	; (8012688 <tcp_input+0x6ec>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	4a96      	ldr	r2, [pc, #600]	; (8012684 <tcp_input+0x6e8>)
 801242a:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 801242c:	4b97      	ldr	r3, [pc, #604]	; (801268c <tcp_input+0x6f0>)
 801242e:	2200      	movs	r2, #0
 8012430:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012432:	4b97      	ldr	r3, [pc, #604]	; (8012690 <tcp_input+0x6f4>)
 8012434:	2200      	movs	r2, #0
 8012436:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012438:	4b96      	ldr	r3, [pc, #600]	; (8012694 <tcp_input+0x6f8>)
 801243a:	2200      	movs	r2, #0
 801243c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801243e:	4b96      	ldr	r3, [pc, #600]	; (8012698 <tcp_input+0x6fc>)
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	f003 0308 	and.w	r3, r3, #8
 8012446:	2b00      	cmp	r3, #0
 8012448:	d006      	beq.n	8012458 <tcp_input+0x4bc>
      p->flags |= PBUF_FLAG_PUSH;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	7b5b      	ldrb	r3, [r3, #13]
 801244e:	f043 0301 	orr.w	r3, r3, #1
 8012452:	b2da      	uxtb	r2, r3
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012458:	69bb      	ldr	r3, [r7, #24]
 801245a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801245c:	2b00      	cmp	r3, #0
 801245e:	d01e      	beq.n	801249e <tcp_input+0x502>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012460:	69b8      	ldr	r0, [r7, #24]
 8012462:	f7ff f979 	bl	8011758 <tcp_process_refused_data>
 8012466:	4603      	mov	r3, r0
 8012468:	f113 0f0d 	cmn.w	r3, #13
 801246c:	d007      	beq.n	801247e <tcp_input+0x4e2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012472:	2b00      	cmp	r3, #0
 8012474:	d013      	beq.n	801249e <tcp_input+0x502>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012476:	4b89      	ldr	r3, [pc, #548]	; (801269c <tcp_input+0x700>)
 8012478:	881b      	ldrh	r3, [r3, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d00f      	beq.n	801249e <tcp_input+0x502>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012482:	2b00      	cmp	r3, #0
 8012484:	d102      	bne.n	801248c <tcp_input+0x4f0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012486:	69b8      	ldr	r0, [r7, #24]
 8012488:	f003 f9f9 	bl	801587e <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 801248c:	4b84      	ldr	r3, [pc, #528]	; (80126a0 <tcp_input+0x704>)
 801248e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8012492:	3301      	adds	r3, #1
 8012494:	b29a      	uxth	r2, r3
 8012496:	4b82      	ldr	r3, [pc, #520]	; (80126a0 <tcp_input+0x704>)
 8012498:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801249c:	e0de      	b.n	801265c <tcp_input+0x6c0>
      }
    }
    tcp_input_pcb = pcb;
 801249e:	4a81      	ldr	r2, [pc, #516]	; (80126a4 <tcp_input+0x708>)
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80124a4:	69b8      	ldr	r0, [r7, #24]
 80124a6:	f000 faeb 	bl	8012a80 <tcp_process>
 80124aa:	4603      	mov	r3, r0
 80124ac:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80124ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80124b2:	f113 0f0d 	cmn.w	r3, #13
 80124b6:	f000 80c6 	beq.w	8012646 <tcp_input+0x6aa>
      if (recv_flags & TF_RESET) {
 80124ba:	4b75      	ldr	r3, [pc, #468]	; (8012690 <tcp_input+0x6f4>)
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	f003 0308 	and.w	r3, r3, #8
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d015      	beq.n	80124f2 <tcp_input+0x556>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80124c6:	69bb      	ldr	r3, [r7, #24]
 80124c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d008      	beq.n	80124e2 <tcp_input+0x546>
 80124d0:	69bb      	ldr	r3, [r7, #24]
 80124d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124d6:	69ba      	ldr	r2, [r7, #24]
 80124d8:	6912      	ldr	r2, [r2, #16]
 80124da:	f06f 010d 	mvn.w	r1, #13
 80124de:	4610      	mov	r0, r2
 80124e0:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80124e2:	69b9      	ldr	r1, [r7, #24]
 80124e4:	4870      	ldr	r0, [pc, #448]	; (80126a8 <tcp_input+0x70c>)
 80124e6:	f7ff fc55 	bl	8011d94 <tcp_pcb_remove>
        tcp_free(pcb);
 80124ea:	69b8      	ldr	r0, [r7, #24]
 80124ec:	f7fe f9de 	bl	80108ac <tcp_free>
 80124f0:	e0b4      	b.n	801265c <tcp_input+0x6c0>
      } else {
        err = ERR_OK;
 80124f2:	2300      	movs	r3, #0
 80124f4:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80124f6:	4b67      	ldr	r3, [pc, #412]	; (8012694 <tcp_input+0x6f8>)
 80124f8:	881b      	ldrh	r3, [r3, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d01d      	beq.n	801253a <tcp_input+0x59e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80124fe:	4b65      	ldr	r3, [pc, #404]	; (8012694 <tcp_input+0x6f8>)
 8012500:	881b      	ldrh	r3, [r3, #0]
 8012502:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012504:	69bb      	ldr	r3, [r7, #24]
 8012506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801250a:	2b00      	cmp	r3, #0
 801250c:	d00a      	beq.n	8012524 <tcp_input+0x588>
 801250e:	69bb      	ldr	r3, [r7, #24]
 8012510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012514:	69ba      	ldr	r2, [r7, #24]
 8012516:	6910      	ldr	r0, [r2, #16]
 8012518:	897a      	ldrh	r2, [r7, #10]
 801251a:	69b9      	ldr	r1, [r7, #24]
 801251c:	4798      	blx	r3
 801251e:	4603      	mov	r3, r0
 8012520:	74fb      	strb	r3, [r7, #19]
 8012522:	e001      	b.n	8012528 <tcp_input+0x58c>
 8012524:	2300      	movs	r3, #0
 8012526:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012528:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801252c:	f113 0f0d 	cmn.w	r3, #13
 8012530:	f000 808b 	beq.w	801264a <tcp_input+0x6ae>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012534:	4b57      	ldr	r3, [pc, #348]	; (8012694 <tcp_input+0x6f8>)
 8012536:	2200      	movs	r2, #0
 8012538:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801253a:	69b8      	ldr	r0, [r7, #24]
 801253c:	f000 f90e 	bl	801275c <tcp_input_delayed_close>
 8012540:	4603      	mov	r3, r0
 8012542:	2b00      	cmp	r3, #0
 8012544:	f040 8083 	bne.w	801264e <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012548:	4b50      	ldr	r3, [pc, #320]	; (801268c <tcp_input+0x6f0>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d036      	beq.n	80125be <tcp_input+0x622>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	8b5b      	ldrh	r3, [r3, #26]
 8012554:	f003 0310 	and.w	r3, r3, #16
 8012558:	2b00      	cmp	r3, #0
 801255a:	d008      	beq.n	801256e <tcp_input+0x5d2>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801255c:	4b4b      	ldr	r3, [pc, #300]	; (801268c <tcp_input+0x6f0>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	4618      	mov	r0, r3
 8012562:	f7fd ffc7 	bl	80104f4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012566:	69b8      	ldr	r0, [r7, #24]
 8012568:	f7fe fbe8 	bl	8010d3c <tcp_abort>
            goto aborted;
 801256c:	e076      	b.n	801265c <tcp_input+0x6c0>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801256e:	69bb      	ldr	r3, [r7, #24]
 8012570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012574:	2b00      	cmp	r3, #0
 8012576:	d00c      	beq.n	8012592 <tcp_input+0x5f6>
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	6918      	ldr	r0, [r3, #16]
 8012582:	4b42      	ldr	r3, [pc, #264]	; (801268c <tcp_input+0x6f0>)
 8012584:	681a      	ldr	r2, [r3, #0]
 8012586:	2300      	movs	r3, #0
 8012588:	69b9      	ldr	r1, [r7, #24]
 801258a:	47a0      	blx	r4
 801258c:	4603      	mov	r3, r0
 801258e:	74fb      	strb	r3, [r7, #19]
 8012590:	e008      	b.n	80125a4 <tcp_input+0x608>
 8012592:	4b3e      	ldr	r3, [pc, #248]	; (801268c <tcp_input+0x6f0>)
 8012594:	681a      	ldr	r2, [r3, #0]
 8012596:	2300      	movs	r3, #0
 8012598:	69b9      	ldr	r1, [r7, #24]
 801259a:	2000      	movs	r0, #0
 801259c:	f7ff f9a5 	bl	80118ea <tcp_recv_null>
 80125a0:	4603      	mov	r3, r0
 80125a2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80125a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125a8:	f113 0f0d 	cmn.w	r3, #13
 80125ac:	d051      	beq.n	8012652 <tcp_input+0x6b6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80125ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d003      	beq.n	80125be <tcp_input+0x622>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80125b6:	4b35      	ldr	r3, [pc, #212]	; (801268c <tcp_input+0x6f0>)
 80125b8:	681a      	ldr	r2, [r3, #0]
 80125ba:	69bb      	ldr	r3, [r7, #24]
 80125bc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80125be:	4b34      	ldr	r3, [pc, #208]	; (8012690 <tcp_input+0x6f4>)
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	f003 0320 	and.w	r3, r3, #32
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d030      	beq.n	801262c <tcp_input+0x690>
          if (pcb->refused_data != NULL) {
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d009      	beq.n	80125e6 <tcp_input+0x64a>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125d6:	7b5a      	ldrb	r2, [r3, #13]
 80125d8:	69bb      	ldr	r3, [r7, #24]
 80125da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125dc:	f042 0220 	orr.w	r2, r2, #32
 80125e0:	b2d2      	uxtb	r2, r2
 80125e2:	735a      	strb	r2, [r3, #13]
 80125e4:	e022      	b.n	801262c <tcp_input+0x690>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80125ee:	d005      	beq.n	80125fc <tcp_input+0x660>
              pcb->rcv_wnd++;
 80125f0:	69bb      	ldr	r3, [r7, #24]
 80125f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125f4:	3301      	adds	r3, #1
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80125fc:	69bb      	ldr	r3, [r7, #24]
 80125fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012602:	2b00      	cmp	r3, #0
 8012604:	d00b      	beq.n	801261e <tcp_input+0x682>
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801260c:	69bb      	ldr	r3, [r7, #24]
 801260e:	6918      	ldr	r0, [r3, #16]
 8012610:	2300      	movs	r3, #0
 8012612:	2200      	movs	r2, #0
 8012614:	69b9      	ldr	r1, [r7, #24]
 8012616:	47a0      	blx	r4
 8012618:	4603      	mov	r3, r0
 801261a:	74fb      	strb	r3, [r7, #19]
 801261c:	e001      	b.n	8012622 <tcp_input+0x686>
 801261e:	2300      	movs	r3, #0
 8012620:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012622:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012626:	f113 0f0d 	cmn.w	r3, #13
 801262a:	d014      	beq.n	8012656 <tcp_input+0x6ba>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801262c:	4b1d      	ldr	r3, [pc, #116]	; (80126a4 <tcp_input+0x708>)
 801262e:	2200      	movs	r2, #0
 8012630:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012632:	69b8      	ldr	r0, [r7, #24]
 8012634:	f000 f892 	bl	801275c <tcp_input_delayed_close>
 8012638:	4603      	mov	r3, r0
 801263a:	2b00      	cmp	r3, #0
 801263c:	d10d      	bne.n	801265a <tcp_input+0x6be>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801263e:	69b8      	ldr	r0, [r7, #24]
 8012640:	f002 fc18 	bl	8014e74 <tcp_output>
 8012644:	e00a      	b.n	801265c <tcp_input+0x6c0>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012646:	bf00      	nop
 8012648:	e008      	b.n	801265c <tcp_input+0x6c0>
              goto aborted;
 801264a:	bf00      	nop
 801264c:	e006      	b.n	801265c <tcp_input+0x6c0>
          goto aborted;
 801264e:	bf00      	nop
 8012650:	e004      	b.n	801265c <tcp_input+0x6c0>
            goto aborted;
 8012652:	bf00      	nop
 8012654:	e002      	b.n	801265c <tcp_input+0x6c0>
              goto aborted;
 8012656:	bf00      	nop
 8012658:	e000      	b.n	801265c <tcp_input+0x6c0>
          goto aborted;
 801265a:	bf00      	nop
    tcp_input_pcb = NULL;
 801265c:	4b11      	ldr	r3, [pc, #68]	; (80126a4 <tcp_input+0x708>)
 801265e:	2200      	movs	r2, #0
 8012660:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012662:	4b0a      	ldr	r3, [pc, #40]	; (801268c <tcp_input+0x6f0>)
 8012664:	2200      	movs	r2, #0
 8012666:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012668:	4b06      	ldr	r3, [pc, #24]	; (8012684 <tcp_input+0x6e8>)
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d063      	beq.n	8012738 <tcp_input+0x79c>
      pbuf_free(inseg.p);
 8012670:	4b04      	ldr	r3, [pc, #16]	; (8012684 <tcp_input+0x6e8>)
 8012672:	685b      	ldr	r3, [r3, #4]
 8012674:	4618      	mov	r0, r3
 8012676:	f7fd ff3d 	bl	80104f4 <pbuf_free>
      inseg.p = NULL;
 801267a:	4b02      	ldr	r3, [pc, #8]	; (8012684 <tcp_input+0x6e8>)
 801267c:	2200      	movs	r2, #0
 801267e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012680:	e05a      	b.n	8012738 <tcp_input+0x79c>
 8012682:	bf00      	nop
 8012684:	20007854 	.word	0x20007854
 8012688:	20007868 	.word	0x20007868
 801268c:	20007888 	.word	0x20007888
 8012690:	20007885 	.word	0x20007885
 8012694:	20007880 	.word	0x20007880
 8012698:	20007884 	.word	0x20007884
 801269c:	20007882 	.word	0x20007882
 80126a0:	20007794 	.word	0x20007794
 80126a4:	2000788c 	.word	0x2000788c
 80126a8:	20007848 	.word	0x20007848
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80126ac:	4b24      	ldr	r3, [pc, #144]	; (8012740 <tcp_input+0x7a4>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	899b      	ldrh	r3, [r3, #12]
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fc ff25 	bl	800f504 <lwip_htons>
 80126ba:	4603      	mov	r3, r0
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	f003 0304 	and.w	r3, r3, #4
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d128      	bne.n	8012718 <tcp_input+0x77c>
      TCP_STATS_INC(tcp.proterr);
 80126c6:	4b1f      	ldr	r3, [pc, #124]	; (8012744 <tcp_input+0x7a8>)
 80126c8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80126cc:	3301      	adds	r3, #1
 80126ce:	b29a      	uxth	r2, r3
 80126d0:	4b1c      	ldr	r3, [pc, #112]	; (8012744 <tcp_input+0x7a8>)
 80126d2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 80126d6:	4b1b      	ldr	r3, [pc, #108]	; (8012744 <tcp_input+0x7a8>)
 80126d8:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80126dc:	3301      	adds	r3, #1
 80126de:	b29a      	uxth	r2, r3
 80126e0:	4b18      	ldr	r3, [pc, #96]	; (8012744 <tcp_input+0x7a8>)
 80126e2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126e6:	4b18      	ldr	r3, [pc, #96]	; (8012748 <tcp_input+0x7ac>)
 80126e8:	6819      	ldr	r1, [r3, #0]
 80126ea:	4b18      	ldr	r3, [pc, #96]	; (801274c <tcp_input+0x7b0>)
 80126ec:	881b      	ldrh	r3, [r3, #0]
 80126ee:	461a      	mov	r2, r3
 80126f0:	4b17      	ldr	r3, [pc, #92]	; (8012750 <tcp_input+0x7b4>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80126f6:	4b12      	ldr	r3, [pc, #72]	; (8012740 <tcp_input+0x7a4>)
 80126f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80126fa:	885b      	ldrh	r3, [r3, #2]
 80126fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80126fe:	4a10      	ldr	r2, [pc, #64]	; (8012740 <tcp_input+0x7a4>)
 8012700:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012702:	8812      	ldrh	r2, [r2, #0]
 8012704:	b292      	uxth	r2, r2
 8012706:	9202      	str	r2, [sp, #8]
 8012708:	9301      	str	r3, [sp, #4]
 801270a:	4b12      	ldr	r3, [pc, #72]	; (8012754 <tcp_input+0x7b8>)
 801270c:	9300      	str	r3, [sp, #0]
 801270e:	4b12      	ldr	r3, [pc, #72]	; (8012758 <tcp_input+0x7bc>)
 8012710:	4602      	mov	r2, r0
 8012712:	2000      	movs	r0, #0
 8012714:	f003 f87e 	bl	8015814 <tcp_rst>
    pbuf_free(p);
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7fd feeb 	bl	80104f4 <pbuf_free>
  return;
 801271e:	e00b      	b.n	8012738 <tcp_input+0x79c>
dropped:
  TCP_STATS_INC(tcp.drop);
 8012720:	4b08      	ldr	r3, [pc, #32]	; (8012744 <tcp_input+0x7a8>)
 8012722:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8012726:	3301      	adds	r3, #1
 8012728:	b29a      	uxth	r2, r3
 801272a:	4b06      	ldr	r3, [pc, #24]	; (8012744 <tcp_input+0x7a8>)
 801272c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f7fd fedf 	bl	80104f4 <pbuf_free>
 8012736:	e000      	b.n	801273a <tcp_input+0x79e>
  return;
 8012738:	bf00      	nop
}
 801273a:	3724      	adds	r7, #36	; 0x24
 801273c:	46bd      	mov	sp, r7
 801273e:	bd90      	pop	{r4, r7, pc}
 8012740:	20007868 	.word	0x20007868
 8012744:	20007794 	.word	0x20007794
 8012748:	2000787c 	.word	0x2000787c
 801274c:	20007882 	.word	0x20007882
 8012750:	20007878 	.word	0x20007878
 8012754:	20007780 	.word	0x20007780
 8012758:	20007784 	.word	0x20007784

0801275c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);

  if (recv_flags & TF_CLOSED) {
 8012764:	4b13      	ldr	r3, [pc, #76]	; (80127b4 <tcp_input_delayed_close+0x58>)
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	f003 0310 	and.w	r3, r3, #16
 801276c:	2b00      	cmp	r3, #0
 801276e:	d01c      	beq.n	80127aa <tcp_input_delayed_close+0x4e>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	8b5b      	ldrh	r3, [r3, #26]
 8012774:	f003 0310 	and.w	r3, r3, #16
 8012778:	2b00      	cmp	r3, #0
 801277a:	d10d      	bne.n	8012798 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012782:	2b00      	cmp	r3, #0
 8012784:	d008      	beq.n	8012798 <tcp_input_delayed_close+0x3c>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801278c:	687a      	ldr	r2, [r7, #4]
 801278e:	6912      	ldr	r2, [r2, #16]
 8012790:	f06f 010e 	mvn.w	r1, #14
 8012794:	4610      	mov	r0, r2
 8012796:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012798:	6879      	ldr	r1, [r7, #4]
 801279a:	4807      	ldr	r0, [pc, #28]	; (80127b8 <tcp_input_delayed_close+0x5c>)
 801279c:	f7ff fafa 	bl	8011d94 <tcp_pcb_remove>
    tcp_free(pcb);
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7fe f883 	bl	80108ac <tcp_free>
    return 1;
 80127a6:	2301      	movs	r3, #1
 80127a8:	e000      	b.n	80127ac <tcp_input_delayed_close+0x50>
  }
  return 0;
 80127aa:	2300      	movs	r3, #0
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	20007885 	.word	0x20007885
 80127b8:	20007848 	.word	0x20007848

080127bc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80127bc:	b590      	push	{r4, r7, lr}
 80127be:	b08b      	sub	sp, #44	; 0x2c
 80127c0:	af04      	add	r7, sp, #16
 80127c2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80127c4:	4b6e      	ldr	r3, [pc, #440]	; (8012980 <tcp_listen_input+0x1c4>)
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	f003 0304 	and.w	r3, r3, #4
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f040 80d0 	bne.w	8012972 <tcp_listen_input+0x1b6>

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80127d2:	4b6b      	ldr	r3, [pc, #428]	; (8012980 <tcp_listen_input+0x1c4>)
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	f003 0310 	and.w	r3, r3, #16
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d019      	beq.n	8012812 <tcp_listen_input+0x56>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127de:	4b69      	ldr	r3, [pc, #420]	; (8012984 <tcp_listen_input+0x1c8>)
 80127e0:	6819      	ldr	r1, [r3, #0]
 80127e2:	4b69      	ldr	r3, [pc, #420]	; (8012988 <tcp_listen_input+0x1cc>)
 80127e4:	881b      	ldrh	r3, [r3, #0]
 80127e6:	461a      	mov	r2, r3
 80127e8:	4b68      	ldr	r3, [pc, #416]	; (801298c <tcp_listen_input+0x1d0>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127ee:	4b68      	ldr	r3, [pc, #416]	; (8012990 <tcp_listen_input+0x1d4>)
 80127f0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127f2:	885b      	ldrh	r3, [r3, #2]
 80127f4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127f6:	4a66      	ldr	r2, [pc, #408]	; (8012990 <tcp_listen_input+0x1d4>)
 80127f8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127fa:	8812      	ldrh	r2, [r2, #0]
 80127fc:	b292      	uxth	r2, r2
 80127fe:	9202      	str	r2, [sp, #8]
 8012800:	9301      	str	r3, [sp, #4]
 8012802:	4b64      	ldr	r3, [pc, #400]	; (8012994 <tcp_listen_input+0x1d8>)
 8012804:	9300      	str	r3, [sp, #0]
 8012806:	4b64      	ldr	r3, [pc, #400]	; (8012998 <tcp_listen_input+0x1dc>)
 8012808:	4602      	mov	r2, r0
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f003 f802 	bl	8015814 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012810:	e0b1      	b.n	8012976 <tcp_listen_input+0x1ba>
  } else if (flags & TCP_SYN) {
 8012812:	4b5b      	ldr	r3, [pc, #364]	; (8012980 <tcp_listen_input+0x1c4>)
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	f003 0302 	and.w	r3, r3, #2
 801281a:	2b00      	cmp	r3, #0
 801281c:	f000 80ab 	beq.w	8012976 <tcp_listen_input+0x1ba>
    npcb = tcp_alloc(pcb->prio);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	7d5b      	ldrb	r3, [r3, #21]
 8012824:	4618      	mov	r0, r3
 8012826:	f7ff f965 	bl	8011af4 <tcp_alloc>
 801282a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d119      	bne.n	8012866 <tcp_listen_input+0xaa>
      TCP_STATS_INC(tcp.memerr);
 8012832:	4b5a      	ldr	r3, [pc, #360]	; (801299c <tcp_listen_input+0x1e0>)
 8012834:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8012838:	3301      	adds	r3, #1
 801283a:	b29a      	uxth	r2, r3
 801283c:	4b57      	ldr	r3, [pc, #348]	; (801299c <tcp_listen_input+0x1e0>)
 801283e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	699b      	ldr	r3, [r3, #24]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d00a      	beq.n	8012860 <tcp_listen_input+0xa4>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	699b      	ldr	r3, [r3, #24]
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	6910      	ldr	r0, [r2, #16]
 8012852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012856:	2100      	movs	r1, #0
 8012858:	4798      	blx	r3
 801285a:	4603      	mov	r3, r0
 801285c:	73bb      	strb	r3, [r7, #14]
      return;
 801285e:	e08b      	b.n	8012978 <tcp_listen_input+0x1bc>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012860:	23f0      	movs	r3, #240	; 0xf0
 8012862:	73bb      	strb	r3, [r7, #14]
      return;
 8012864:	e088      	b.n	8012978 <tcp_listen_input+0x1bc>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012866:	4b4e      	ldr	r3, [pc, #312]	; (80129a0 <tcp_listen_input+0x1e4>)
 8012868:	695a      	ldr	r2, [r3, #20]
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801286e:	4b4c      	ldr	r3, [pc, #304]	; (80129a0 <tcp_listen_input+0x1e4>)
 8012870:	691a      	ldr	r2, [r3, #16]
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	8ada      	ldrh	r2, [r3, #22]
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801287e:	4b44      	ldr	r3, [pc, #272]	; (8012990 <tcp_listen_input+0x1d4>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	881b      	ldrh	r3, [r3, #0]
 8012884:	b29a      	uxth	r2, r3
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	2203      	movs	r2, #3
 801288e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012890:	4b3e      	ldr	r3, [pc, #248]	; (801298c <tcp_listen_input+0x1d0>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	1c5a      	adds	r2, r3, #1
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80128a2:	6978      	ldr	r0, [r7, #20]
 80128a4:	f7ff fac2 	bl	8011e2c <tcp_next_iss>
 80128a8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	693a      	ldr	r2, [r7, #16]
 80128ae:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	693a      	ldr	r2, [r7, #16]
 80128b4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	693a      	ldr	r2, [r7, #16]
 80128ba:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80128bc:	697b      	ldr	r3, [r7, #20]
 80128be:	693a      	ldr	r2, [r7, #16]
 80128c0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80128c2:	4b32      	ldr	r3, [pc, #200]	; (801298c <tcp_listen_input+0x1d0>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	1e5a      	subs	r2, r3, #1
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	691a      	ldr	r2, [r3, #16]
 80128d0:	697b      	ldr	r3, [r7, #20]
 80128d2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	7a5b      	ldrb	r3, [r3, #9]
 80128de:	f003 030c 	and.w	r3, r3, #12
 80128e2:	b2da      	uxtb	r2, r3
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	7a1a      	ldrb	r2, [r3, #8]
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80128f0:	4b2c      	ldr	r3, [pc, #176]	; (80129a4 <tcp_listen_input+0x1e8>)
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	60da      	str	r2, [r3, #12]
 80128f8:	4a2a      	ldr	r2, [pc, #168]	; (80129a4 <tcp_listen_input+0x1e8>)
 80128fa:	697b      	ldr	r3, [r7, #20]
 80128fc:	6013      	str	r3, [r2, #0]
 80128fe:	f003 f8fd 	bl	8015afc <tcp_timer_needed>
 8012902:	4b29      	ldr	r3, [pc, #164]	; (80129a8 <tcp_listen_input+0x1ec>)
 8012904:	2201      	movs	r2, #1
 8012906:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012908:	6978      	ldr	r0, [r7, #20]
 801290a:	f001 fc39 	bl	8014180 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801290e:	4b20      	ldr	r3, [pc, #128]	; (8012990 <tcp_listen_input+0x1d4>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	89db      	ldrh	r3, [r3, #14]
 8012914:	b29a      	uxth	r2, r3
 8012916:	697b      	ldr	r3, [r7, #20]
 8012918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	3304      	adds	r3, #4
 8012930:	4618      	mov	r0, r3
 8012932:	f006 fccd 	bl	80192d0 <ip4_route>
 8012936:	4601      	mov	r1, r0
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	3304      	adds	r3, #4
 801293c:	461a      	mov	r2, r3
 801293e:	4620      	mov	r0, r4
 8012940:	f7ff fa8c 	bl	8011e5c <tcp_eff_send_mss_netif>
 8012944:	4603      	mov	r3, r0
 8012946:	461a      	mov	r2, r3
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801294c:	2112      	movs	r1, #18
 801294e:	6978      	ldr	r0, [r7, #20]
 8012950:	f002 f9f0 	bl	8014d34 <tcp_enqueue_flags>
 8012954:	4603      	mov	r3, r0
 8012956:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d004      	beq.n	801296a <tcp_listen_input+0x1ae>
      tcp_abandon(npcb, 0);
 8012960:	2100      	movs	r1, #0
 8012962:	6978      	ldr	r0, [r7, #20]
 8012964:	f7fe f946 	bl	8010bf4 <tcp_abandon>
      return;
 8012968:	e006      	b.n	8012978 <tcp_listen_input+0x1bc>
    tcp_output(npcb);
 801296a:	6978      	ldr	r0, [r7, #20]
 801296c:	f002 fa82 	bl	8014e74 <tcp_output>
  return;
 8012970:	e001      	b.n	8012976 <tcp_listen_input+0x1ba>
    return;
 8012972:	bf00      	nop
 8012974:	e000      	b.n	8012978 <tcp_listen_input+0x1bc>
  return;
 8012976:	bf00      	nop
}
 8012978:	371c      	adds	r7, #28
 801297a:	46bd      	mov	sp, r7
 801297c:	bd90      	pop	{r4, r7, pc}
 801297e:	bf00      	nop
 8012980:	20007884 	.word	0x20007884
 8012984:	2000787c 	.word	0x2000787c
 8012988:	20007882 	.word	0x20007882
 801298c:	20007878 	.word	0x20007878
 8012990:	20007868 	.word	0x20007868
 8012994:	20007780 	.word	0x20007780
 8012998:	20007784 	.word	0x20007784
 801299c:	20007794 	.word	0x20007794
 80129a0:	20007770 	.word	0x20007770
 80129a4:	20007848 	.word	0x20007848
 80129a8:	20007850 	.word	0x20007850

080129ac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b086      	sub	sp, #24
 80129b0:	af04      	add	r7, sp, #16
 80129b2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80129b4:	4b2a      	ldr	r3, [pc, #168]	; (8012a60 <tcp_timewait_input+0xb4>)
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	f003 0304 	and.w	r3, r3, #4
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d149      	bne.n	8012a54 <tcp_timewait_input+0xa8>
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80129c0:	4b27      	ldr	r3, [pc, #156]	; (8012a60 <tcp_timewait_input+0xb4>)
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	f003 0302 	and.w	r3, r3, #2
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d02a      	beq.n	8012a22 <tcp_timewait_input+0x76>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80129cc:	4b25      	ldr	r3, [pc, #148]	; (8012a64 <tcp_timewait_input+0xb8>)
 80129ce:	681a      	ldr	r2, [r3, #0]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129d4:	1ad3      	subs	r3, r2, r3
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	db2d      	blt.n	8012a36 <tcp_timewait_input+0x8a>
 80129da:	4b22      	ldr	r3, [pc, #136]	; (8012a64 <tcp_timewait_input+0xb8>)
 80129dc:	681a      	ldr	r2, [r3, #0]
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129e2:	6879      	ldr	r1, [r7, #4]
 80129e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80129e6:	440b      	add	r3, r1
 80129e8:	1ad3      	subs	r3, r2, r3
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	dc23      	bgt.n	8012a36 <tcp_timewait_input+0x8a>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129ee:	4b1e      	ldr	r3, [pc, #120]	; (8012a68 <tcp_timewait_input+0xbc>)
 80129f0:	6819      	ldr	r1, [r3, #0]
 80129f2:	4b1e      	ldr	r3, [pc, #120]	; (8012a6c <tcp_timewait_input+0xc0>)
 80129f4:	881b      	ldrh	r3, [r3, #0]
 80129f6:	461a      	mov	r2, r3
 80129f8:	4b1a      	ldr	r3, [pc, #104]	; (8012a64 <tcp_timewait_input+0xb8>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129fe:	4b1c      	ldr	r3, [pc, #112]	; (8012a70 <tcp_timewait_input+0xc4>)
 8012a00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a02:	885b      	ldrh	r3, [r3, #2]
 8012a04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012a06:	4a1a      	ldr	r2, [pc, #104]	; (8012a70 <tcp_timewait_input+0xc4>)
 8012a08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012a0a:	8812      	ldrh	r2, [r2, #0]
 8012a0c:	b292      	uxth	r2, r2
 8012a0e:	9202      	str	r2, [sp, #8]
 8012a10:	9301      	str	r3, [sp, #4]
 8012a12:	4b18      	ldr	r3, [pc, #96]	; (8012a74 <tcp_timewait_input+0xc8>)
 8012a14:	9300      	str	r3, [sp, #0]
 8012a16:	4b18      	ldr	r3, [pc, #96]	; (8012a78 <tcp_timewait_input+0xcc>)
 8012a18:	4602      	mov	r2, r0
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f002 fefa 	bl	8015814 <tcp_rst>
      return;
 8012a20:	e01b      	b.n	8012a5a <tcp_timewait_input+0xae>
    }
  } else if (flags & TCP_FIN) {
 8012a22:	4b0f      	ldr	r3, [pc, #60]	; (8012a60 <tcp_timewait_input+0xb4>)
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	f003 0301 	and.w	r3, r3, #1
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d003      	beq.n	8012a36 <tcp_timewait_input+0x8a>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012a2e:	4b13      	ldr	r3, [pc, #76]	; (8012a7c <tcp_timewait_input+0xd0>)
 8012a30:	681a      	ldr	r2, [r3, #0]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012a36:	4b0d      	ldr	r3, [pc, #52]	; (8012a6c <tcp_timewait_input+0xc0>)
 8012a38:	881b      	ldrh	r3, [r3, #0]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d00c      	beq.n	8012a58 <tcp_timewait_input+0xac>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	8b5b      	ldrh	r3, [r3, #26]
 8012a42:	f043 0302 	orr.w	r3, r3, #2
 8012a46:	b29a      	uxth	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f002 fa11 	bl	8014e74 <tcp_output>
  }
  return;
 8012a52:	e001      	b.n	8012a58 <tcp_timewait_input+0xac>
    return;
 8012a54:	bf00      	nop
 8012a56:	e000      	b.n	8012a5a <tcp_timewait_input+0xae>
  return;
 8012a58:	bf00      	nop
}
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	20007884 	.word	0x20007884
 8012a64:	20007878 	.word	0x20007878
 8012a68:	2000787c 	.word	0x2000787c
 8012a6c:	20007882 	.word	0x20007882
 8012a70:	20007868 	.word	0x20007868
 8012a74:	20007780 	.word	0x20007780
 8012a78:	20007784 	.word	0x20007784
 8012a7c:	2000783c 	.word	0x2000783c

08012a80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012a80:	b590      	push	{r4, r7, lr}
 8012a82:	b08d      	sub	sp, #52	; 0x34
 8012a84:	af04      	add	r7, sp, #16
 8012a86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	76bb      	strb	r3, [r7, #26]
  err_t err;

  err = ERR_OK;
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	76fb      	strb	r3, [r7, #27]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012a90:	4b9c      	ldr	r3, [pc, #624]	; (8012d04 <tcp_process+0x284>)
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	f003 0304 	and.w	r3, r3, #4
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d043      	beq.n	8012b24 <tcp_process+0xa4>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	7d1b      	ldrb	r3, [r3, #20]
 8012aa0:	2b02      	cmp	r3, #2
 8012aa2:	d108      	bne.n	8012ab6 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012aa8:	4b97      	ldr	r3, [pc, #604]	; (8012d08 <tcp_process+0x288>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d123      	bne.n	8012af8 <tcp_process+0x78>
        acceptable = 1;
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	76bb      	strb	r3, [r7, #26]
 8012ab4:	e020      	b.n	8012af8 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012aba:	4b94      	ldr	r3, [pc, #592]	; (8012d0c <tcp_process+0x28c>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	d102      	bne.n	8012ac8 <tcp_process+0x48>
        acceptable = 1;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	76bb      	strb	r3, [r7, #26]
 8012ac6:	e017      	b.n	8012af8 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012ac8:	4b90      	ldr	r3, [pc, #576]	; (8012d0c <tcp_process+0x28c>)
 8012aca:	681a      	ldr	r2, [r3, #0]
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	db10      	blt.n	8012af8 <tcp_process+0x78>
 8012ad6:	4b8d      	ldr	r3, [pc, #564]	; (8012d0c <tcp_process+0x28c>)
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ade:	6879      	ldr	r1, [r7, #4]
 8012ae0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ae2:	440b      	add	r3, r1
 8012ae4:	1ad3      	subs	r3, r2, r3
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	dc06      	bgt.n	8012af8 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	8b5b      	ldrh	r3, [r3, #26]
 8012aee:	f043 0302 	orr.w	r3, r3, #2
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012af8:	7ebb      	ldrb	r3, [r7, #26]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d010      	beq.n	8012b20 <tcp_process+0xa0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 8012afe:	4b84      	ldr	r3, [pc, #528]	; (8012d10 <tcp_process+0x290>)
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	f043 0308 	orr.w	r3, r3, #8
 8012b06:	b2da      	uxtb	r2, r3
 8012b08:	4b81      	ldr	r3, [pc, #516]	; (8012d10 <tcp_process+0x290>)
 8012b0a:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	8b5b      	ldrh	r3, [r3, #26]
 8012b10:	f023 0301 	bic.w	r3, r3, #1
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012b1a:	f06f 030d 	mvn.w	r3, #13
 8012b1e:	e345      	b.n	80131ac <tcp_process+0x72c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012b20:	2300      	movs	r3, #0
 8012b22:	e343      	b.n	80131ac <tcp_process+0x72c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012b24:	4b77      	ldr	r3, [pc, #476]	; (8012d04 <tcp_process+0x284>)
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	f003 0302 	and.w	r3, r3, #2
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d010      	beq.n	8012b52 <tcp_process+0xd2>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	7d1b      	ldrb	r3, [r3, #20]
 8012b34:	2b02      	cmp	r3, #2
 8012b36:	d00c      	beq.n	8012b52 <tcp_process+0xd2>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	7d1b      	ldrb	r3, [r3, #20]
 8012b3c:	2b03      	cmp	r3, #3
 8012b3e:	d008      	beq.n	8012b52 <tcp_process+0xd2>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	8b5b      	ldrh	r3, [r3, #26]
 8012b44:	f043 0302 	orr.w	r3, r3, #2
 8012b48:	b29a      	uxth	r2, r3
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	e32c      	b.n	80131ac <tcp_process+0x72c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	8b5b      	ldrh	r3, [r3, #26]
 8012b56:	f003 0310 	and.w	r3, r3, #16
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d103      	bne.n	8012b66 <tcp_process+0xe6>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012b5e:	4b6d      	ldr	r3, [pc, #436]	; (8012d14 <tcp_process+0x294>)
 8012b60:	681a      	ldr	r2, [r3, #0]
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2200      	movs	r2, #0
 8012b72:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f001 fb02 	bl	8014180 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	7d1b      	ldrb	r3, [r3, #20]
 8012b80:	3b02      	subs	r3, #2
 8012b82:	2b07      	cmp	r3, #7
 8012b84:	f200 8302 	bhi.w	801318c <tcp_process+0x70c>
 8012b88:	a201      	add	r2, pc, #4	; (adr r2, 8012b90 <tcp_process+0x110>)
 8012b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b8e:	bf00      	nop
 8012b90:	08012bb1 	.word	0x08012bb1
 8012b94:	08012d9b 	.word	0x08012d9b
 8012b98:	08012efb 	.word	0x08012efb
 8012b9c:	08012f25 	.word	0x08012f25
 8012ba0:	0801303b 	.word	0x0801303b
 8012ba4:	08012efb 	.word	0x08012efb
 8012ba8:	080130c7 	.word	0x080130c7
 8012bac:	08013157 	.word	0x08013157
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012bb0:	4b54      	ldr	r3, [pc, #336]	; (8012d04 <tcp_process+0x284>)
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	f003 0310 	and.w	r3, r3, #16
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	f000 80c1 	beq.w	8012d40 <tcp_process+0x2c0>
 8012bbe:	4b51      	ldr	r3, [pc, #324]	; (8012d04 <tcp_process+0x284>)
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	f003 0302 	and.w	r3, r3, #2
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	f000 80ba 	beq.w	8012d40 <tcp_process+0x2c0>
          && (ackno == pcb->lastack + 1)) {
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bd0:	1c5a      	adds	r2, r3, #1
 8012bd2:	4b4d      	ldr	r3, [pc, #308]	; (8012d08 <tcp_process+0x288>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	f040 80b2 	bne.w	8012d40 <tcp_process+0x2c0>
        pcb->rcv_nxt = seqno + 1;
 8012bdc:	4b4b      	ldr	r3, [pc, #300]	; (8012d0c <tcp_process+0x28c>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	1c5a      	adds	r2, r3, #1
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012bee:	4b46      	ldr	r3, [pc, #280]	; (8012d08 <tcp_process+0x288>)
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012bf6:	4b48      	ldr	r3, [pc, #288]	; (8012d18 <tcp_process+0x298>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	89db      	ldrh	r3, [r3, #14]
 8012bfc:	b29a      	uxth	r2, r3
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012c10:	4b3e      	ldr	r3, [pc, #248]	; (8012d0c <tcp_process+0x28c>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	1e5a      	subs	r2, r3, #1
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2204      	movs	r2, #4
 8012c1e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	3304      	adds	r3, #4
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f006 fb51 	bl	80192d0 <ip4_route>
 8012c2e:	4601      	mov	r1, r0
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	3304      	adds	r3, #4
 8012c34:	461a      	mov	r2, r3
 8012c36:	4620      	mov	r0, r4
 8012c38:	f7ff f910 	bl	8011e5c <tcp_eff_send_mss_netif>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	461a      	mov	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c48:	009a      	lsls	r2, r3, #2
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c4e:	005b      	lsls	r3, r3, #1
 8012c50:	f241 111c 	movw	r1, #4380	; 0x111c
 8012c54:	428b      	cmp	r3, r1
 8012c56:	bf38      	it	cc
 8012c58:	460b      	movcc	r3, r1
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d204      	bcs.n	8012c68 <tcp_process+0x1e8>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c62:	009b      	lsls	r3, r3, #2
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	e00d      	b.n	8012c84 <tcp_process+0x204>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c6c:	005b      	lsls	r3, r3, #1
 8012c6e:	f241 121c 	movw	r2, #4380	; 0x111c
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d904      	bls.n	8012c80 <tcp_process+0x200>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c7a:	005b      	lsls	r3, r3, #1
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	e001      	b.n	8012c84 <tcp_process+0x204>
 8012c80:	f241 131c 	movw	r3, #4380	; 0x111c
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
        --pcb->snd_queuelen;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c90:	3b01      	subs	r3, #1
 8012c92:	b29a      	uxth	r2, r3
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c9e:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8012ca0:	697b      	ldr	r3, [r7, #20]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d107      	bne.n	8012cb6 <tcp_process+0x236>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012caa:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
          pcb->unsent = rseg->next;
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	66da      	str	r2, [r3, #108]	; 0x6c
 8012cb4:	e003      	b.n	8012cbe <tcp_process+0x23e>
        } else {
          pcb->unacked = rseg->next;
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	681a      	ldr	r2, [r3, #0]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012cbe:	6978      	ldr	r0, [r7, #20]
 8012cc0:	f7fe fdce 	bl	8011860 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d104      	bne.n	8012cd6 <tcp_process+0x256>
          pcb->rtime = -1;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012cd2:	861a      	strh	r2, [r3, #48]	; 0x30
 8012cd4:	e006      	b.n	8012ce4 <tcp_process+0x264>
        } else {
          pcb->rtime = 0;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d016      	beq.n	8012d1c <tcp_process+0x29c>
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	6910      	ldr	r0, [r2, #16]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	6879      	ldr	r1, [r7, #4]
 8012cfc:	4798      	blx	r3
 8012cfe:	4603      	mov	r3, r0
 8012d00:	76fb      	strb	r3, [r7, #27]
 8012d02:	e00d      	b.n	8012d20 <tcp_process+0x2a0>
 8012d04:	20007884 	.word	0x20007884
 8012d08:	2000787c 	.word	0x2000787c
 8012d0c:	20007878 	.word	0x20007878
 8012d10:	20007885 	.word	0x20007885
 8012d14:	2000783c 	.word	0x2000783c
 8012d18:	20007868 	.word	0x20007868
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	76fb      	strb	r3, [r7, #27]
        if (err == ERR_ABRT) {
 8012d20:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012d24:	f113 0f0d 	cmn.w	r3, #13
 8012d28:	d102      	bne.n	8012d30 <tcp_process+0x2b0>
          return ERR_ABRT;
 8012d2a:	f06f 030c 	mvn.w	r3, #12
 8012d2e:	e23d      	b.n	80131ac <tcp_process+0x72c>
        }
        tcp_ack_now(pcb);
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	8b5b      	ldrh	r3, [r3, #26]
 8012d34:	f043 0302 	orr.w	r3, r3, #2
 8012d38:	b29a      	uxth	r2, r3
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012d3e:	e227      	b.n	8013190 <tcp_process+0x710>
      else if (flags & TCP_ACK) {
 8012d40:	4b96      	ldr	r3, [pc, #600]	; (8012f9c <tcp_process+0x51c>)
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	f003 0310 	and.w	r3, r3, #16
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	f000 8221 	beq.w	8013190 <tcp_process+0x710>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d4e:	4b94      	ldr	r3, [pc, #592]	; (8012fa0 <tcp_process+0x520>)
 8012d50:	6819      	ldr	r1, [r3, #0]
 8012d52:	4b94      	ldr	r3, [pc, #592]	; (8012fa4 <tcp_process+0x524>)
 8012d54:	881b      	ldrh	r3, [r3, #0]
 8012d56:	461a      	mov	r2, r3
 8012d58:	4b93      	ldr	r3, [pc, #588]	; (8012fa8 <tcp_process+0x528>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d5e:	4b93      	ldr	r3, [pc, #588]	; (8012fac <tcp_process+0x52c>)
 8012d60:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d62:	885b      	ldrh	r3, [r3, #2]
 8012d64:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d66:	4a91      	ldr	r2, [pc, #580]	; (8012fac <tcp_process+0x52c>)
 8012d68:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d6a:	8812      	ldrh	r2, [r2, #0]
 8012d6c:	b292      	uxth	r2, r2
 8012d6e:	9202      	str	r2, [sp, #8]
 8012d70:	9301      	str	r3, [sp, #4]
 8012d72:	4b8f      	ldr	r3, [pc, #572]	; (8012fb0 <tcp_process+0x530>)
 8012d74:	9300      	str	r3, [sp, #0]
 8012d76:	4b8f      	ldr	r3, [pc, #572]	; (8012fb4 <tcp_process+0x534>)
 8012d78:	4602      	mov	r2, r0
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f002 fd4a 	bl	8015814 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012d86:	2b05      	cmp	r3, #5
 8012d88:	f200 8202 	bhi.w	8013190 <tcp_process+0x710>
          pcb->rtime = 0;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f002 fb87 	bl	80154a6 <tcp_rexmit_rto>
      break;
 8012d98:	e1fa      	b.n	8013190 <tcp_process+0x710>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012d9a:	4b80      	ldr	r3, [pc, #512]	; (8012f9c <tcp_process+0x51c>)
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	f003 0310 	and.w	r3, r3, #16
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	f000 8095 	beq.w	8012ed2 <tcp_process+0x452>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012da8:	4b7d      	ldr	r3, [pc, #500]	; (8012fa0 <tcp_process+0x520>)
 8012daa:	681a      	ldr	r2, [r3, #0]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012db0:	1ad3      	subs	r3, r2, r3
 8012db2:	3b01      	subs	r3, #1
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	db72      	blt.n	8012e9e <tcp_process+0x41e>
 8012db8:	4b79      	ldr	r3, [pc, #484]	; (8012fa0 <tcp_process+0x520>)
 8012dba:	681a      	ldr	r2, [r3, #0]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012dc0:	1ad3      	subs	r3, r2, r3
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	dc6b      	bgt.n	8012e9e <tcp_process+0x41e>
          pcb->state = ESTABLISHED;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2204      	movs	r2, #4
 8012dca:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d102      	bne.n	8012dda <tcp_process+0x35a>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012dd4:	23fa      	movs	r3, #250	; 0xfa
 8012dd6:	76fb      	strb	r3, [r7, #27]
 8012dd8:	e011      	b.n	8012dfe <tcp_process+0x37e>
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012dde:	699b      	ldr	r3, [r3, #24]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d00a      	beq.n	8012dfa <tcp_process+0x37a>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012de8:	699b      	ldr	r3, [r3, #24]
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	6910      	ldr	r0, [r2, #16]
 8012dee:	2200      	movs	r2, #0
 8012df0:	6879      	ldr	r1, [r7, #4]
 8012df2:	4798      	blx	r3
 8012df4:	4603      	mov	r3, r0
 8012df6:	76fb      	strb	r3, [r7, #27]
 8012df8:	e001      	b.n	8012dfe <tcp_process+0x37e>
 8012dfa:	23f0      	movs	r3, #240	; 0xf0
 8012dfc:	76fb      	strb	r3, [r7, #27]
          }
          if (err != ERR_OK) {
 8012dfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d00a      	beq.n	8012e1c <tcp_process+0x39c>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012e06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012e0a:	f113 0f0d 	cmn.w	r3, #13
 8012e0e:	d002      	beq.n	8012e16 <tcp_process+0x396>
              tcp_abort(pcb);
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f7fd ff93 	bl	8010d3c <tcp_abort>
            }
            return ERR_ABRT;
 8012e16:	f06f 030c 	mvn.w	r3, #12
 8012e1a:	e1c7      	b.n	80131ac <tcp_process+0x72c>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f000 faa3 	bl	8013368 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012e22:	4b65      	ldr	r3, [pc, #404]	; (8012fb8 <tcp_process+0x538>)
 8012e24:	881b      	ldrh	r3, [r3, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d005      	beq.n	8012e36 <tcp_process+0x3b6>
            recv_acked--;
 8012e2a:	4b63      	ldr	r3, [pc, #396]	; (8012fb8 <tcp_process+0x538>)
 8012e2c:	881b      	ldrh	r3, [r3, #0]
 8012e2e:	3b01      	subs	r3, #1
 8012e30:	b29a      	uxth	r2, r3
 8012e32:	4b61      	ldr	r3, [pc, #388]	; (8012fb8 <tcp_process+0x538>)
 8012e34:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e3a:	009a      	lsls	r2, r3, #2
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e40:	005b      	lsls	r3, r3, #1
 8012e42:	f241 111c 	movw	r1, #4380	; 0x111c
 8012e46:	428b      	cmp	r3, r1
 8012e48:	bf38      	it	cc
 8012e4a:	460b      	movcc	r3, r1
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d204      	bcs.n	8012e5a <tcp_process+0x3da>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	e00d      	b.n	8012e76 <tcp_process+0x3f6>
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e5e:	005b      	lsls	r3, r3, #1
 8012e60:	f241 121c 	movw	r2, #4380	; 0x111c
 8012e64:	4293      	cmp	r3, r2
 8012e66:	d904      	bls.n	8012e72 <tcp_process+0x3f2>
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e6c:	005b      	lsls	r3, r3, #1
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	e001      	b.n	8012e76 <tcp_process+0x3f6>
 8012e72:	f241 131c 	movw	r3, #4380	; 0x111c
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012e7c:	4b4f      	ldr	r3, [pc, #316]	; (8012fbc <tcp_process+0x53c>)
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	f003 0320 	and.w	r3, r3, #32
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d037      	beq.n	8012ef8 <tcp_process+0x478>
            tcp_ack_now(pcb);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	8b5b      	ldrh	r3, [r3, #26]
 8012e8c:	f043 0302 	orr.w	r3, r3, #2
 8012e90:	b29a      	uxth	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2207      	movs	r2, #7
 8012e9a:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012e9c:	e02c      	b.n	8012ef8 <tcp_process+0x478>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e9e:	4b40      	ldr	r3, [pc, #256]	; (8012fa0 <tcp_process+0x520>)
 8012ea0:	6819      	ldr	r1, [r3, #0]
 8012ea2:	4b40      	ldr	r3, [pc, #256]	; (8012fa4 <tcp_process+0x524>)
 8012ea4:	881b      	ldrh	r3, [r3, #0]
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	4b3f      	ldr	r3, [pc, #252]	; (8012fa8 <tcp_process+0x528>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012eae:	4b3f      	ldr	r3, [pc, #252]	; (8012fac <tcp_process+0x52c>)
 8012eb0:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012eb2:	885b      	ldrh	r3, [r3, #2]
 8012eb4:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012eb6:	4a3d      	ldr	r2, [pc, #244]	; (8012fac <tcp_process+0x52c>)
 8012eb8:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012eba:	8812      	ldrh	r2, [r2, #0]
 8012ebc:	b292      	uxth	r2, r2
 8012ebe:	9202      	str	r2, [sp, #8]
 8012ec0:	9301      	str	r3, [sp, #4]
 8012ec2:	4b3b      	ldr	r3, [pc, #236]	; (8012fb0 <tcp_process+0x530>)
 8012ec4:	9300      	str	r3, [sp, #0]
 8012ec6:	4b3b      	ldr	r3, [pc, #236]	; (8012fb4 <tcp_process+0x534>)
 8012ec8:	4602      	mov	r2, r0
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	f002 fca2 	bl	8015814 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012ed0:	e160      	b.n	8013194 <tcp_process+0x714>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012ed2:	4b32      	ldr	r3, [pc, #200]	; (8012f9c <tcp_process+0x51c>)
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	f003 0302 	and.w	r3, r3, #2
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f000 815a 	beq.w	8013194 <tcp_process+0x714>
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ee4:	1e5a      	subs	r2, r3, #1
 8012ee6:	4b30      	ldr	r3, [pc, #192]	; (8012fa8 <tcp_process+0x528>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	429a      	cmp	r2, r3
 8012eec:	f040 8152 	bne.w	8013194 <tcp_process+0x714>
        tcp_rexmit(pcb);
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f002 fae9 	bl	80154c8 <tcp_rexmit>
      break;
 8012ef6:	e14d      	b.n	8013194 <tcp_process+0x714>
 8012ef8:	e14c      	b.n	8013194 <tcp_process+0x714>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f000 fa34 	bl	8013368 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012f00:	4b2e      	ldr	r3, [pc, #184]	; (8012fbc <tcp_process+0x53c>)
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	f003 0320 	and.w	r3, r3, #32
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	f000 8145 	beq.w	8013198 <tcp_process+0x718>
        tcp_ack_now(pcb);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	8b5b      	ldrh	r3, [r3, #26]
 8012f12:	f043 0302 	orr.w	r3, r3, #2
 8012f16:	b29a      	uxth	r2, r3
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2207      	movs	r2, #7
 8012f20:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012f22:	e139      	b.n	8013198 <tcp_process+0x718>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 fa1f 	bl	8013368 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012f2a:	4b24      	ldr	r3, [pc, #144]	; (8012fbc <tcp_process+0x53c>)
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	f003 0320 	and.w	r3, r3, #32
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d06a      	beq.n	801300c <tcp_process+0x58c>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f36:	4b19      	ldr	r3, [pc, #100]	; (8012f9c <tcp_process+0x51c>)
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	f003 0310 	and.w	r3, r3, #16
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d059      	beq.n	8012ff6 <tcp_process+0x576>
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f46:	4b16      	ldr	r3, [pc, #88]	; (8012fa0 <tcp_process+0x520>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d153      	bne.n	8012ff6 <tcp_process+0x576>
            pcb->unsent == NULL) {
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d14f      	bne.n	8012ff6 <tcp_process+0x576>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	8b5b      	ldrh	r3, [r3, #26]
 8012f5a:	f043 0302 	orr.w	r3, r3, #2
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7fe fed3 	bl	8011d10 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012f6a:	4b15      	ldr	r3, [pc, #84]	; (8012fc0 <tcp_process+0x540>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	687a      	ldr	r2, [r7, #4]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d105      	bne.n	8012f80 <tcp_process+0x500>
 8012f74:	4b12      	ldr	r3, [pc, #72]	; (8012fc0 <tcp_process+0x540>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	68db      	ldr	r3, [r3, #12]
 8012f7a:	4a11      	ldr	r2, [pc, #68]	; (8012fc0 <tcp_process+0x540>)
 8012f7c:	6013      	str	r3, [r2, #0]
 8012f7e:	e027      	b.n	8012fd0 <tcp_process+0x550>
 8012f80:	4b0f      	ldr	r3, [pc, #60]	; (8012fc0 <tcp_process+0x540>)
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	613b      	str	r3, [r7, #16]
 8012f86:	e020      	b.n	8012fca <tcp_process+0x54a>
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	68db      	ldr	r3, [r3, #12]
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d118      	bne.n	8012fc4 <tcp_process+0x544>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	68da      	ldr	r2, [r3, #12]
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	60da      	str	r2, [r3, #12]
 8012f9a:	e019      	b.n	8012fd0 <tcp_process+0x550>
 8012f9c:	20007884 	.word	0x20007884
 8012fa0:	2000787c 	.word	0x2000787c
 8012fa4:	20007882 	.word	0x20007882
 8012fa8:	20007878 	.word	0x20007878
 8012fac:	20007868 	.word	0x20007868
 8012fb0:	20007780 	.word	0x20007780
 8012fb4:	20007784 	.word	0x20007784
 8012fb8:	20007880 	.word	0x20007880
 8012fbc:	20007885 	.word	0x20007885
 8012fc0:	20007848 	.word	0x20007848
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	68db      	ldr	r3, [r3, #12]
 8012fc8:	613b      	str	r3, [r7, #16]
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d1db      	bne.n	8012f88 <tcp_process+0x508>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	60da      	str	r2, [r3, #12]
 8012fd6:	4b77      	ldr	r3, [pc, #476]	; (80131b4 <tcp_process+0x734>)
 8012fd8:	2201      	movs	r2, #1
 8012fda:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	220a      	movs	r2, #10
 8012fe0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012fe2:	4b75      	ldr	r3, [pc, #468]	; (80131b8 <tcp_process+0x738>)
 8012fe4:	681a      	ldr	r2, [r3, #0]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	60da      	str	r2, [r3, #12]
 8012fea:	4a73      	ldr	r2, [pc, #460]	; (80131b8 <tcp_process+0x738>)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6013      	str	r3, [r2, #0]
 8012ff0:	f002 fd84 	bl	8015afc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012ff4:	e0d2      	b.n	801319c <tcp_process+0x71c>
          tcp_ack_now(pcb);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	8b5b      	ldrh	r3, [r3, #26]
 8012ffa:	f043 0302 	orr.w	r3, r3, #2
 8012ffe:	b29a      	uxth	r2, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2208      	movs	r2, #8
 8013008:	751a      	strb	r2, [r3, #20]
      break;
 801300a:	e0c7      	b.n	801319c <tcp_process+0x71c>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801300c:	4b6b      	ldr	r3, [pc, #428]	; (80131bc <tcp_process+0x73c>)
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	f003 0310 	and.w	r3, r3, #16
 8013014:	2b00      	cmp	r3, #0
 8013016:	f000 80c1 	beq.w	801319c <tcp_process+0x71c>
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801301e:	4b68      	ldr	r3, [pc, #416]	; (80131c0 <tcp_process+0x740>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	429a      	cmp	r2, r3
 8013024:	f040 80ba 	bne.w	801319c <tcp_process+0x71c>
                 pcb->unsent == NULL) {
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801302c:	2b00      	cmp	r3, #0
 801302e:	f040 80b5 	bne.w	801319c <tcp_process+0x71c>
        pcb->state = FIN_WAIT_2;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2206      	movs	r2, #6
 8013036:	751a      	strb	r2, [r3, #20]
      break;
 8013038:	e0b0      	b.n	801319c <tcp_process+0x71c>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 f994 	bl	8013368 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013040:	4b60      	ldr	r3, [pc, #384]	; (80131c4 <tcp_process+0x744>)
 8013042:	781b      	ldrb	r3, [r3, #0]
 8013044:	f003 0320 	and.w	r3, r3, #32
 8013048:	2b00      	cmp	r3, #0
 801304a:	f000 80a9 	beq.w	80131a0 <tcp_process+0x720>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	8b5b      	ldrh	r3, [r3, #26]
 8013052:	f043 0302 	orr.w	r3, r3, #2
 8013056:	b29a      	uxth	r2, r3
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f7fe fe57 	bl	8011d10 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013062:	4b59      	ldr	r3, [pc, #356]	; (80131c8 <tcp_process+0x748>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	687a      	ldr	r2, [r7, #4]
 8013068:	429a      	cmp	r2, r3
 801306a:	d105      	bne.n	8013078 <tcp_process+0x5f8>
 801306c:	4b56      	ldr	r3, [pc, #344]	; (80131c8 <tcp_process+0x748>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	68db      	ldr	r3, [r3, #12]
 8013072:	4a55      	ldr	r2, [pc, #340]	; (80131c8 <tcp_process+0x748>)
 8013074:	6013      	str	r3, [r2, #0]
 8013076:	e013      	b.n	80130a0 <tcp_process+0x620>
 8013078:	4b53      	ldr	r3, [pc, #332]	; (80131c8 <tcp_process+0x748>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	60fb      	str	r3, [r7, #12]
 801307e:	e00c      	b.n	801309a <tcp_process+0x61a>
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	68db      	ldr	r3, [r3, #12]
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	429a      	cmp	r2, r3
 8013088:	d104      	bne.n	8013094 <tcp_process+0x614>
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	68da      	ldr	r2, [r3, #12]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	60da      	str	r2, [r3, #12]
 8013092:	e005      	b.n	80130a0 <tcp_process+0x620>
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	68db      	ldr	r3, [r3, #12]
 8013098:	60fb      	str	r3, [r7, #12]
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d1ef      	bne.n	8013080 <tcp_process+0x600>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2200      	movs	r2, #0
 80130a4:	60da      	str	r2, [r3, #12]
 80130a6:	4b43      	ldr	r3, [pc, #268]	; (80131b4 <tcp_process+0x734>)
 80130a8:	2201      	movs	r2, #1
 80130aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	220a      	movs	r2, #10
 80130b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80130b2:	4b41      	ldr	r3, [pc, #260]	; (80131b8 <tcp_process+0x738>)
 80130b4:	681a      	ldr	r2, [r3, #0]
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	60da      	str	r2, [r3, #12]
 80130ba:	4a3f      	ldr	r2, [pc, #252]	; (80131b8 <tcp_process+0x738>)
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6013      	str	r3, [r2, #0]
 80130c0:	f002 fd1c 	bl	8015afc <tcp_timer_needed>
      }
      break;
 80130c4:	e06c      	b.n	80131a0 <tcp_process+0x720>
    case CLOSING:
      tcp_receive(pcb);
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f000 f94e 	bl	8013368 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80130cc:	4b3b      	ldr	r3, [pc, #236]	; (80131bc <tcp_process+0x73c>)
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	f003 0310 	and.w	r3, r3, #16
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d065      	beq.n	80131a4 <tcp_process+0x724>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80130dc:	4b38      	ldr	r3, [pc, #224]	; (80131c0 <tcp_process+0x740>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d15f      	bne.n	80131a4 <tcp_process+0x724>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d15b      	bne.n	80131a4 <tcp_process+0x724>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80130ec:	6878      	ldr	r0, [r7, #4]
 80130ee:	f7fe fe0f 	bl	8011d10 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80130f2:	4b35      	ldr	r3, [pc, #212]	; (80131c8 <tcp_process+0x748>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	687a      	ldr	r2, [r7, #4]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d105      	bne.n	8013108 <tcp_process+0x688>
 80130fc:	4b32      	ldr	r3, [pc, #200]	; (80131c8 <tcp_process+0x748>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	68db      	ldr	r3, [r3, #12]
 8013102:	4a31      	ldr	r2, [pc, #196]	; (80131c8 <tcp_process+0x748>)
 8013104:	6013      	str	r3, [r2, #0]
 8013106:	e013      	b.n	8013130 <tcp_process+0x6b0>
 8013108:	4b2f      	ldr	r3, [pc, #188]	; (80131c8 <tcp_process+0x748>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	61fb      	str	r3, [r7, #28]
 801310e:	e00c      	b.n	801312a <tcp_process+0x6aa>
 8013110:	69fb      	ldr	r3, [r7, #28]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	429a      	cmp	r2, r3
 8013118:	d104      	bne.n	8013124 <tcp_process+0x6a4>
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	68da      	ldr	r2, [r3, #12]
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	60da      	str	r2, [r3, #12]
 8013122:	e005      	b.n	8013130 <tcp_process+0x6b0>
 8013124:	69fb      	ldr	r3, [r7, #28]
 8013126:	68db      	ldr	r3, [r3, #12]
 8013128:	61fb      	str	r3, [r7, #28]
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d1ef      	bne.n	8013110 <tcp_process+0x690>
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	2200      	movs	r2, #0
 8013134:	60da      	str	r2, [r3, #12]
 8013136:	4b1f      	ldr	r3, [pc, #124]	; (80131b4 <tcp_process+0x734>)
 8013138:	2201      	movs	r2, #1
 801313a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	220a      	movs	r2, #10
 8013140:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013142:	4b1d      	ldr	r3, [pc, #116]	; (80131b8 <tcp_process+0x738>)
 8013144:	681a      	ldr	r2, [r3, #0]
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	60da      	str	r2, [r3, #12]
 801314a:	4a1b      	ldr	r2, [pc, #108]	; (80131b8 <tcp_process+0x738>)
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6013      	str	r3, [r2, #0]
 8013150:	f002 fcd4 	bl	8015afc <tcp_timer_needed>
      }
      break;
 8013154:	e026      	b.n	80131a4 <tcp_process+0x724>
    case LAST_ACK:
      tcp_receive(pcb);
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	f000 f906 	bl	8013368 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801315c:	4b17      	ldr	r3, [pc, #92]	; (80131bc <tcp_process+0x73c>)
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	f003 0310 	and.w	r3, r3, #16
 8013164:	2b00      	cmp	r3, #0
 8013166:	d01f      	beq.n	80131a8 <tcp_process+0x728>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801316c:	4b14      	ldr	r3, [pc, #80]	; (80131c0 <tcp_process+0x740>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	429a      	cmp	r2, r3
 8013172:	d119      	bne.n	80131a8 <tcp_process+0x728>
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013178:	2b00      	cmp	r3, #0
 801317a:	d115      	bne.n	80131a8 <tcp_process+0x728>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801317c:	4b11      	ldr	r3, [pc, #68]	; (80131c4 <tcp_process+0x744>)
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	f043 0310 	orr.w	r3, r3, #16
 8013184:	b2da      	uxtb	r2, r3
 8013186:	4b0f      	ldr	r3, [pc, #60]	; (80131c4 <tcp_process+0x744>)
 8013188:	701a      	strb	r2, [r3, #0]
      }
      break;
 801318a:	e00d      	b.n	80131a8 <tcp_process+0x728>
    default:
      break;
 801318c:	bf00      	nop
 801318e:	e00c      	b.n	80131aa <tcp_process+0x72a>
      break;
 8013190:	bf00      	nop
 8013192:	e00a      	b.n	80131aa <tcp_process+0x72a>
      break;
 8013194:	bf00      	nop
 8013196:	e008      	b.n	80131aa <tcp_process+0x72a>
      break;
 8013198:	bf00      	nop
 801319a:	e006      	b.n	80131aa <tcp_process+0x72a>
      break;
 801319c:	bf00      	nop
 801319e:	e004      	b.n	80131aa <tcp_process+0x72a>
      break;
 80131a0:	bf00      	nop
 80131a2:	e002      	b.n	80131aa <tcp_process+0x72a>
      break;
 80131a4:	bf00      	nop
 80131a6:	e000      	b.n	80131aa <tcp_process+0x72a>
      break;
 80131a8:	bf00      	nop
  }
  return ERR_OK;
 80131aa:	2300      	movs	r3, #0
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3724      	adds	r7, #36	; 0x24
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd90      	pop	{r4, r7, pc}
 80131b4:	20007850 	.word	0x20007850
 80131b8:	2000784c 	.word	0x2000784c
 80131bc:	20007884 	.word	0x20007884
 80131c0:	2000787c 	.word	0x2000787c
 80131c4:	20007885 	.word	0x20007885
 80131c8:	20007848 	.word	0x20007848

080131cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80131cc:	b590      	push	{r4, r7, lr}
 80131ce:	b085      	sub	sp, #20
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	691b      	ldr	r3, [r3, #16]
 80131da:	899b      	ldrh	r3, [r3, #12]
 80131dc:	b29b      	uxth	r3, r3
 80131de:	4618      	mov	r0, r3
 80131e0:	f7fc f990 	bl	800f504 <lwip_htons>
 80131e4:	4603      	mov	r3, r0
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	f003 0301 	and.w	r3, r3, #1
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d028      	beq.n	8013242 <tcp_oos_insert_segment+0x76>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80131f0:	6838      	ldr	r0, [r7, #0]
 80131f2:	f7fe fb20 	bl	8011836 <tcp_segs_free>
    next = NULL;
 80131f6:	2300      	movs	r3, #0
 80131f8:	603b      	str	r3, [r7, #0]
 80131fa:	e056      	b.n	80132aa <tcp_oos_insert_segment+0xde>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	691b      	ldr	r3, [r3, #16]
 8013200:	899b      	ldrh	r3, [r3, #12]
 8013202:	b29b      	uxth	r3, r3
 8013204:	4618      	mov	r0, r3
 8013206:	f7fc f97d 	bl	800f504 <lwip_htons>
 801320a:	4603      	mov	r3, r0
 801320c:	b2db      	uxtb	r3, r3
 801320e:	f003 0301 	and.w	r3, r3, #1
 8013212:	2b00      	cmp	r3, #0
 8013214:	d00d      	beq.n	8013232 <tcp_oos_insert_segment+0x66>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	691b      	ldr	r3, [r3, #16]
 801321a:	899b      	ldrh	r3, [r3, #12]
 801321c:	b29c      	uxth	r4, r3
 801321e:	2001      	movs	r0, #1
 8013220:	f7fc f970 	bl	800f504 <lwip_htons>
 8013224:	4603      	mov	r3, r0
 8013226:	461a      	mov	r2, r3
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	691b      	ldr	r3, [r3, #16]
 801322c:	4322      	orrs	r2, r4
 801322e:	b292      	uxth	r2, r2
 8013230:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801323c:	68f8      	ldr	r0, [r7, #12]
 801323e:	f7fe fb0f 	bl	8011860 <tcp_seg_free>
    while (next &&
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d00e      	beq.n	8013266 <tcp_oos_insert_segment+0x9a>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	891b      	ldrh	r3, [r3, #8]
 801324c:	461a      	mov	r2, r3
 801324e:	4b1a      	ldr	r3, [pc, #104]	; (80132b8 <tcp_oos_insert_segment+0xec>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	441a      	add	r2, r3
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	691b      	ldr	r3, [r3, #16]
 8013258:	685b      	ldr	r3, [r3, #4]
 801325a:	6839      	ldr	r1, [r7, #0]
 801325c:	8909      	ldrh	r1, [r1, #8]
 801325e:	440b      	add	r3, r1
 8013260:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013262:	2b00      	cmp	r3, #0
 8013264:	daca      	bge.n	80131fc <tcp_oos_insert_segment+0x30>
    }
    if (next &&
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d01e      	beq.n	80132aa <tcp_oos_insert_segment+0xde>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	891b      	ldrh	r3, [r3, #8]
 8013270:	461a      	mov	r2, r3
 8013272:	4b11      	ldr	r3, [pc, #68]	; (80132b8 <tcp_oos_insert_segment+0xec>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	441a      	add	r2, r3
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	691b      	ldr	r3, [r3, #16]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013280:	2b00      	cmp	r3, #0
 8013282:	dd12      	ble.n	80132aa <tcp_oos_insert_segment+0xde>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	691b      	ldr	r3, [r3, #16]
 8013288:	685b      	ldr	r3, [r3, #4]
 801328a:	b29a      	uxth	r2, r3
 801328c:	4b0a      	ldr	r3, [pc, #40]	; (80132b8 <tcp_oos_insert_segment+0xec>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	b29b      	uxth	r3, r3
 8013292:	1ad3      	subs	r3, r2, r3
 8013294:	b29a      	uxth	r2, r3
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	685a      	ldr	r2, [r3, #4]
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	891b      	ldrh	r3, [r3, #8]
 80132a2:	4619      	mov	r1, r3
 80132a4:	4610      	mov	r0, r2
 80132a6:	f7fc fff2 	bl	801028e <pbuf_realloc>
    }
  }
  cseg->next = next;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	683a      	ldr	r2, [r7, #0]
 80132ae:	601a      	str	r2, [r3, #0]
}
 80132b0:	bf00      	nop
 80132b2:	3714      	adds	r7, #20
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd90      	pop	{r4, r7, pc}
 80132b8:	20007878 	.word	0x20007878

080132bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80132bc:	b5b0      	push	{r4, r5, r7, lr}
 80132be:	b086      	sub	sp, #24
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	607a      	str	r2, [r7, #4]
 80132c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80132ca:	e01f      	b.n	801330c <tcp_free_acked_segments+0x50>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	685b      	ldr	r3, [r3, #4]
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fd f95d 	bl	801059a <pbuf_clen>
 80132e0:	4603      	mov	r3, r0
 80132e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80132ea:	8a7b      	ldrh	r3, [r7, #18]
 80132ec:	1ad3      	subs	r3, r2, r3
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	891a      	ldrh	r2, [r3, #8]
 80132fa:	4b19      	ldr	r3, [pc, #100]	; (8013360 <tcp_free_acked_segments+0xa4>)
 80132fc:	881b      	ldrh	r3, [r3, #0]
 80132fe:	4413      	add	r3, r2
 8013300:	b29a      	uxth	r2, r3
 8013302:	4b17      	ldr	r3, [pc, #92]	; (8013360 <tcp_free_acked_segments+0xa4>)
 8013304:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013306:	6978      	ldr	r0, [r7, #20]
 8013308:	f7fe faaa 	bl	8011860 <tcp_seg_free>
  while (seg_list != NULL &&
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d020      	beq.n	8013354 <tcp_free_acked_segments+0x98>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	691b      	ldr	r3, [r3, #16]
 8013316:	685b      	ldr	r3, [r3, #4]
 8013318:	4618      	mov	r0, r3
 801331a:	f7fc f908 	bl	800f52e <lwip_htonl>
 801331e:	4604      	mov	r4, r0
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	891b      	ldrh	r3, [r3, #8]
 8013324:	461d      	mov	r5, r3
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	691b      	ldr	r3, [r3, #16]
 801332a:	899b      	ldrh	r3, [r3, #12]
 801332c:	b29b      	uxth	r3, r3
 801332e:	4618      	mov	r0, r3
 8013330:	f7fc f8e8 	bl	800f504 <lwip_htons>
 8013334:	4603      	mov	r3, r0
 8013336:	b2db      	uxtb	r3, r3
 8013338:	f003 0303 	and.w	r3, r3, #3
 801333c:	2b00      	cmp	r3, #0
 801333e:	d001      	beq.n	8013344 <tcp_free_acked_segments+0x88>
 8013340:	2301      	movs	r3, #1
 8013342:	e000      	b.n	8013346 <tcp_free_acked_segments+0x8a>
 8013344:	2300      	movs	r3, #0
 8013346:	442b      	add	r3, r5
 8013348:	18e2      	adds	r2, r4, r3
 801334a:	4b06      	ldr	r3, [pc, #24]	; (8013364 <tcp_free_acked_segments+0xa8>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013350:	2b00      	cmp	r3, #0
 8013352:	ddbb      	ble.n	80132cc <tcp_free_acked_segments+0x10>
    if (pcb->snd_queuelen != 0) {
      LWIP_ASSERT("tcp_receive: valid queue length",
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013354:	68bb      	ldr	r3, [r7, #8]
}
 8013356:	4618      	mov	r0, r3
 8013358:	3718      	adds	r7, #24
 801335a:	46bd      	mov	sp, r7
 801335c:	bdb0      	pop	{r4, r5, r7, pc}
 801335e:	bf00      	nop
 8013360:	20007880 	.word	0x20007880
 8013364:	2000787c 	.word	0x2000787c

08013368 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013368:	b590      	push	{r4, r7, lr}
 801336a:	b095      	sub	sp, #84	; 0x54
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013370:	2300      	movs	r3, #0
 8013372:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 8013374:	4b9d      	ldr	r3, [pc, #628]	; (80135ec <tcp_receive+0x284>)
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	f003 0310 	and.w	r3, r3, #16
 801337c:	2b00      	cmp	r3, #0
 801337e:	f000 825c 	beq.w	801383a <tcp_receive+0x4d2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013388:	461a      	mov	r2, r3
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801338e:	4413      	add	r3, r2
 8013390:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013396:	4b96      	ldr	r3, [pc, #600]	; (80135f0 <tcp_receive+0x288>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	1ad3      	subs	r3, r2, r3
 801339c:	2b00      	cmp	r3, #0
 801339e:	db1b      	blt.n	80133d8 <tcp_receive+0x70>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80133a4:	4b92      	ldr	r3, [pc, #584]	; (80135f0 <tcp_receive+0x288>)
 80133a6:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d106      	bne.n	80133ba <tcp_receive+0x52>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80133b0:	4b90      	ldr	r3, [pc, #576]	; (80135f4 <tcp_receive+0x28c>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	1ad3      	subs	r3, r2, r3
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	db0e      	blt.n	80133d8 <tcp_receive+0x70>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80133be:	4b8d      	ldr	r3, [pc, #564]	; (80135f4 <tcp_receive+0x28c>)
 80133c0:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d125      	bne.n	8013412 <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80133c6:	4b8c      	ldr	r3, [pc, #560]	; (80135f8 <tcp_receive+0x290>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	89db      	ldrh	r3, [r3, #14]
 80133cc:	b29a      	uxth	r2, r3
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80133d4:	429a      	cmp	r2, r3
 80133d6:	d91c      	bls.n	8013412 <tcp_receive+0xaa>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80133d8:	4b87      	ldr	r3, [pc, #540]	; (80135f8 <tcp_receive+0x290>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	89db      	ldrh	r3, [r3, #14]
 80133de:	b29a      	uxth	r2, r3
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d205      	bcs.n	8013402 <tcp_receive+0x9a>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013402:	4b7b      	ldr	r3, [pc, #492]	; (80135f0 <tcp_receive+0x288>)
 8013404:	681a      	ldr	r2, [r3, #0]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801340a:	4b7a      	ldr	r3, [pc, #488]	; (80135f4 <tcp_receive+0x28c>)
 801340c:	681a      	ldr	r2, [r3, #0]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013412:	4b78      	ldr	r3, [pc, #480]	; (80135f4 <tcp_receive+0x28c>)
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801341a:	1ad3      	subs	r3, r2, r3
 801341c:	2b00      	cmp	r3, #0
 801341e:	dc58      	bgt.n	80134d2 <tcp_receive+0x16a>
      /* Clause 2 */
      if (tcplen == 0) {
 8013420:	4b76      	ldr	r3, [pc, #472]	; (80135fc <tcp_receive+0x294>)
 8013422:	881b      	ldrh	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d14b      	bne.n	80134c0 <tcp_receive+0x158>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013432:	4413      	add	r3, r2
 8013434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013436:	429a      	cmp	r2, r3
 8013438:	d142      	bne.n	80134c0 <tcp_receive+0x158>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013440:	2b00      	cmp	r3, #0
 8013442:	db3d      	blt.n	80134c0 <tcp_receive+0x158>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013448:	4b6a      	ldr	r3, [pc, #424]	; (80135f4 <tcp_receive+0x28c>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	429a      	cmp	r2, r3
 801344e:	d137      	bne.n	80134c0 <tcp_receive+0x158>
              found_dupack = 1;
 8013450:	2301      	movs	r3, #1
 8013452:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801345a:	2bff      	cmp	r3, #255	; 0xff
 801345c:	d007      	beq.n	801346e <tcp_receive+0x106>
                ++pcb->dupacks;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013464:	3301      	adds	r3, #1
 8013466:	b2da      	uxtb	r2, r3
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013474:	2b03      	cmp	r3, #3
 8013476:	d91b      	bls.n	80134b0 <tcp_receive+0x148>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013482:	4413      	add	r3, r2
 8013484:	b29a      	uxth	r2, r3
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801348c:	429a      	cmp	r2, r3
 801348e:	d30a      	bcc.n	80134a6 <tcp_receive+0x13e>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801349a:	4413      	add	r3, r2
 801349c:	b29a      	uxth	r2, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80134a4:	e004      	b.n	80134b0 <tcp_receive+0x148>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80134b6:	2b02      	cmp	r3, #2
 80134b8:	d902      	bls.n	80134c0 <tcp_receive+0x158>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f002 f860 	bl	8015580 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80134c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	f040 8159 	bne.w	801377a <tcp_receive+0x412>
        pcb->dupacks = 0;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2200      	movs	r2, #0
 80134cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80134d0:	e153      	b.n	801377a <tcp_receive+0x412>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80134d2:	4b48      	ldr	r3, [pc, #288]	; (80135f4 <tcp_receive+0x28c>)
 80134d4:	681a      	ldr	r2, [r3, #0]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134da:	1ad3      	subs	r3, r2, r3
 80134dc:	3b01      	subs	r3, #1
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f2c0 8146 	blt.w	8013770 <tcp_receive+0x408>
 80134e4:	4b43      	ldr	r3, [pc, #268]	; (80135f4 <tcp_receive+0x28c>)
 80134e6:	681a      	ldr	r2, [r3, #0]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134ec:	1ad3      	subs	r3, r2, r3
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	f300 813e 	bgt.w	8013770 <tcp_receive+0x408>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	8b5b      	ldrh	r3, [r3, #26]
 80134f8:	f003 0304 	and.w	r3, r3, #4
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d010      	beq.n	8013522 <tcp_receive+0x1ba>
        tcp_clear_flags(pcb, TF_INFR);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	8b5b      	ldrh	r3, [r3, #26]
 8013504:	f023 0304 	bic.w	r3, r3, #4
 8013508:	b29a      	uxth	r2, r3
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	2200      	movs	r2, #0
 801351e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2200      	movs	r2, #0
 8013526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013530:	10db      	asrs	r3, r3, #3
 8013532:	b21b      	sxth	r3, r3
 8013534:	b29a      	uxth	r2, r3
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801353c:	b29b      	uxth	r3, r3
 801353e:	4413      	add	r3, r2
 8013540:	b29b      	uxth	r3, r3
 8013542:	b21a      	sxth	r2, r3
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801354a:	4b2a      	ldr	r3, [pc, #168]	; (80135f4 <tcp_receive+0x28c>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	b29a      	uxth	r2, r3
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013554:	b29b      	uxth	r3, r3
 8013556:	1ad3      	subs	r3, r2, r3
 8013558:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2200      	movs	r2, #0
 801355e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013562:	4b24      	ldr	r3, [pc, #144]	; (80135f4 <tcp_receive+0x28c>)
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	7d1b      	ldrb	r3, [r3, #20]
 801356e:	2b03      	cmp	r3, #3
 8013570:	f240 808f 	bls.w	8013692 <tcp_receive+0x32a>
        if (pcb->cwnd < pcb->ssthresh) {
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013580:	429a      	cmp	r2, r3
 8013582:	d23d      	bcs.n	8013600 <tcp_receive+0x298>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	8b5b      	ldrh	r3, [r3, #26]
 8013588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801358c:	2b00      	cmp	r3, #0
 801358e:	d001      	beq.n	8013594 <tcp_receive+0x22c>
 8013590:	2301      	movs	r3, #1
 8013592:	e000      	b.n	8013596 <tcp_receive+0x22e>
 8013594:	2302      	movs	r3, #2
 8013596:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801359a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801359e:	b29a      	uxth	r2, r3
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135a4:	fb12 f303 	smulbb	r3, r2, r3
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80135ac:	4293      	cmp	r3, r2
 80135ae:	bf28      	it	cs
 80135b0:	4613      	movcs	r3, r2
 80135b2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135bc:	4413      	add	r3, r2
 80135be:	b29a      	uxth	r2, r3
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d309      	bcc.n	80135de <tcp_receive+0x276>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135d2:	4413      	add	r3, r2
 80135d4:	b29a      	uxth	r2, r3
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80135dc:	e059      	b.n	8013692 <tcp_receive+0x32a>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80135e8:	e053      	b.n	8013692 <tcp_receive+0x32a>
 80135ea:	bf00      	nop
 80135ec:	20007884 	.word	0x20007884
 80135f0:	20007878 	.word	0x20007878
 80135f4:	2000787c 	.word	0x2000787c
 80135f8:	20007868 	.word	0x20007868
 80135fc:	20007882 	.word	0x20007882
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013606:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013608:	4413      	add	r3, r2
 801360a:	b29a      	uxth	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013612:	429a      	cmp	r2, r3
 8013614:	d309      	bcc.n	801362a <tcp_receive+0x2c2>
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801361c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801361e:	4413      	add	r3, r2
 8013620:	b29a      	uxth	r2, r3
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013628:	e004      	b.n	8013634 <tcp_receive+0x2cc>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013640:	429a      	cmp	r2, r3
 8013642:	d326      	bcc.n	8013692 <tcp_receive+0x32a>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013650:	1ad3      	subs	r3, r2, r3
 8013652:	b29a      	uxth	r2, r3
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013664:	4413      	add	r3, r2
 8013666:	b29a      	uxth	r2, r3
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801366e:	429a      	cmp	r2, r3
 8013670:	d30a      	bcc.n	8013688 <tcp_receive+0x320>
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801367c:	4413      	add	r3, r2
 801367e:	b29a      	uxth	r2, r3
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013686:	e004      	b.n	8013692 <tcp_receive+0x32a>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801368e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801369a:	4a98      	ldr	r2, [pc, #608]	; (80138fc <tcp_receive+0x594>)
 801369c:	6878      	ldr	r0, [r7, #4]
 801369e:	f7ff fe0d 	bl	80132bc <tcp_free_acked_segments>
 80136a2:	4602      	mov	r2, r0
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136b0:	4a93      	ldr	r2, [pc, #588]	; (8013900 <tcp_receive+0x598>)
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f7ff fe02 	bl	80132bc <tcp_free_acked_segments>
 80136b8:	4602      	mov	r2, r0
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d104      	bne.n	80136d0 <tcp_receive+0x368>
        pcb->rtime = -1;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136cc:	861a      	strh	r2, [r3, #48]	; 0x30
 80136ce:	e002      	b.n	80136d6 <tcp_receive+0x36e>
      } else {
        pcb->rtime = 0;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2200      	movs	r2, #0
 80136d4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	2200      	movs	r2, #0
 80136da:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d103      	bne.n	80136ec <tcp_receive+0x384>
        pcb->unsent_oversize = 0;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2200      	movs	r2, #0
 80136e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80136f2:	4b84      	ldr	r3, [pc, #528]	; (8013904 <tcp_receive+0x59c>)
 80136f4:	881b      	ldrh	r3, [r3, #0]
 80136f6:	4413      	add	r3, r2
 80136f8:	b29a      	uxth	r2, r3
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	8b5b      	ldrh	r3, [r3, #26]
 8013704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013708:	2b00      	cmp	r3, #0
 801370a:	d035      	beq.n	8013778 <tcp_receive+0x410>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013710:	2b00      	cmp	r3, #0
 8013712:	d118      	bne.n	8013746 <tcp_receive+0x3de>
          if ((pcb->unsent == NULL) ||
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013718:	2b00      	cmp	r3, #0
 801371a:	d00c      	beq.n	8013736 <tcp_receive+0x3ce>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013724:	691b      	ldr	r3, [r3, #16]
 8013726:	685b      	ldr	r3, [r3, #4]
 8013728:	4618      	mov	r0, r3
 801372a:	f7fb ff00 	bl	800f52e <lwip_htonl>
 801372e:	4603      	mov	r3, r0
 8013730:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013732:	2b00      	cmp	r3, #0
 8013734:	dc20      	bgt.n	8013778 <tcp_receive+0x410>
            tcp_clear_flags(pcb, TF_RTO);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	8b5b      	ldrh	r3, [r3, #26]
 801373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801373e:	b29a      	uxth	r2, r3
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013744:	e018      	b.n	8013778 <tcp_receive+0x410>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801374e:	691b      	ldr	r3, [r3, #16]
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	4618      	mov	r0, r3
 8013754:	f7fb feeb 	bl	800f52e <lwip_htonl>
 8013758:	4603      	mov	r3, r0
 801375a:	1ae3      	subs	r3, r4, r3
 801375c:	2b00      	cmp	r3, #0
 801375e:	dc0b      	bgt.n	8013778 <tcp_receive+0x410>
          tcp_clear_flags(pcb, TF_RTO);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	8b5b      	ldrh	r3, [r3, #26]
 8013764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013768:	b29a      	uxth	r2, r3
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801376e:	e003      	b.n	8013778 <tcp_receive+0x410>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f002 f884 	bl	801587e <tcp_send_empty_ack>
 8013776:	e000      	b.n	801377a <tcp_receive+0x412>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013778:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801377e:	2b00      	cmp	r3, #0
 8013780:	d05b      	beq.n	801383a <tcp_receive+0x4d2>
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013786:	4b60      	ldr	r3, [pc, #384]	; (8013908 <tcp_receive+0x5a0>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	1ad3      	subs	r3, r2, r3
 801378c:	2b00      	cmp	r3, #0
 801378e:	da54      	bge.n	801383a <tcp_receive+0x4d2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013790:	4b5e      	ldr	r3, [pc, #376]	; (801390c <tcp_receive+0x5a4>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	b29a      	uxth	r2, r3
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801379a:	b29b      	uxth	r3, r3
 801379c:	1ad3      	subs	r3, r2, r3
 801379e:	b29b      	uxth	r3, r3
 80137a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80137a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80137ae:	10db      	asrs	r3, r3, #3
 80137b0:	b21b      	sxth	r3, r3
 80137b2:	b29b      	uxth	r3, r3
 80137b4:	1ad3      	subs	r3, r2, r3
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80137c8:	4413      	add	r3, r2
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	b21a      	sxth	r2, r3
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80137d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	da05      	bge.n	80137e6 <tcp_receive+0x47e>
        m = (s16_t) - m;
 80137da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80137de:	425b      	negs	r3, r3
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80137e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80137f0:	109b      	asrs	r3, r3, #2
 80137f2:	b21b      	sxth	r3, r3
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	1ad3      	subs	r3, r2, r3
 80137f8:	b29b      	uxth	r3, r3
 80137fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013804:	b29a      	uxth	r2, r3
 8013806:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801380a:	4413      	add	r3, r2
 801380c:	b29b      	uxth	r3, r3
 801380e:	b21a      	sxth	r2, r3
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801381a:	10db      	asrs	r3, r3, #3
 801381c:	b21b      	sxth	r3, r3
 801381e:	b29a      	uxth	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013826:	b29b      	uxth	r3, r3
 8013828:	4413      	add	r3, r2
 801382a:	b29b      	uxth	r3, r3
 801382c:	b21a      	sxth	r2, r3
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2200      	movs	r2, #0
 8013838:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801383a:	4b35      	ldr	r3, [pc, #212]	; (8013910 <tcp_receive+0x5a8>)
 801383c:	881b      	ldrh	r3, [r3, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	f000 8444 	beq.w	80140cc <tcp_receive+0xd64>
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	7d1b      	ldrb	r3, [r3, #20]
 8013848:	2b06      	cmp	r3, #6
 801384a:	f200 843f 	bhi.w	80140cc <tcp_receive+0xd64>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013852:	4b30      	ldr	r3, [pc, #192]	; (8013914 <tcp_receive+0x5ac>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	1ad3      	subs	r3, r2, r3
 8013858:	3b01      	subs	r3, #1
 801385a:	2b00      	cmp	r3, #0
 801385c:	db5e      	blt.n	801391c <tcp_receive+0x5b4>
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013862:	4b2b      	ldr	r3, [pc, #172]	; (8013910 <tcp_receive+0x5a8>)
 8013864:	881b      	ldrh	r3, [r3, #0]
 8013866:	4619      	mov	r1, r3
 8013868:	4b2a      	ldr	r3, [pc, #168]	; (8013914 <tcp_receive+0x5ac>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	440b      	add	r3, r1
 801386e:	1ad3      	subs	r3, r2, r3
 8013870:	3301      	adds	r3, #1
 8013872:	2b00      	cmp	r3, #0
 8013874:	dc52      	bgt.n	801391c <tcp_receive+0x5b4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013876:	4b28      	ldr	r3, [pc, #160]	; (8013918 <tcp_receive+0x5b0>)
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013880:	4b24      	ldr	r3, [pc, #144]	; (8013914 <tcp_receive+0x5ac>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	1ad3      	subs	r3, r2, r3
 8013886:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
      off = (u16_t)off32;
 8013888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
      inseg.len -= off;
 801388e:	4b22      	ldr	r3, [pc, #136]	; (8013918 <tcp_receive+0x5b0>)
 8013890:	891a      	ldrh	r2, [r3, #8]
 8013892:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013896:	1ad3      	subs	r3, r2, r3
 8013898:	b29a      	uxth	r2, r3
 801389a:	4b1f      	ldr	r3, [pc, #124]	; (8013918 <tcp_receive+0x5b0>)
 801389c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801389e:	4b1e      	ldr	r3, [pc, #120]	; (8013918 <tcp_receive+0x5b0>)
 80138a0:	685b      	ldr	r3, [r3, #4]
 80138a2:	891a      	ldrh	r2, [r3, #8]
 80138a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138a8:	1ad3      	subs	r3, r2, r3
 80138aa:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80138ac:	e00f      	b.n	80138ce <tcp_receive+0x566>
        off -= p->len;
 80138ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138b0:	895b      	ldrh	r3, [r3, #10]
 80138b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138b6:	1ad3      	subs	r3, r2, r3
 80138b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80138bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80138c0:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80138c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138c4:	2200      	movs	r2, #0
 80138c6:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80138c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80138ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138d0:	895b      	ldrh	r3, [r3, #10]
 80138d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d8e9      	bhi.n	80138ae <tcp_receive+0x546>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80138da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138de:	4619      	mov	r1, r3
 80138e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80138e2:	f7fc fd9a 	bl	801041a <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ea:	4a0a      	ldr	r2, [pc, #40]	; (8013914 <tcp_receive+0x5ac>)
 80138ec:	6013      	str	r3, [r2, #0]
 80138ee:	4b0a      	ldr	r3, [pc, #40]	; (8013918 <tcp_receive+0x5b0>)
 80138f0:	691b      	ldr	r3, [r3, #16]
 80138f2:	4a08      	ldr	r2, [pc, #32]	; (8013914 <tcp_receive+0x5ac>)
 80138f4:	6812      	ldr	r2, [r2, #0]
 80138f6:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80138f8:	e01e      	b.n	8013938 <tcp_receive+0x5d0>
 80138fa:	bf00      	nop
 80138fc:	0801bec8 	.word	0x0801bec8
 8013900:	0801bed0 	.word	0x0801bed0
 8013904:	20007880 	.word	0x20007880
 8013908:	2000787c 	.word	0x2000787c
 801390c:	2000783c 	.word	0x2000783c
 8013910:	20007882 	.word	0x20007882
 8013914:	20007878 	.word	0x20007878
 8013918:	20007854 	.word	0x20007854
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801391c:	4b83      	ldr	r3, [pc, #524]	; (8013b2c <tcp_receive+0x7c4>)
 801391e:	681a      	ldr	r2, [r3, #0]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013924:	1ad3      	subs	r3, r2, r3
 8013926:	2b00      	cmp	r3, #0
 8013928:	da06      	bge.n	8013938 <tcp_receive+0x5d0>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	8b5b      	ldrh	r3, [r3, #26]
 801392e:	f043 0302 	orr.w	r3, r3, #2
 8013932:	b29a      	uxth	r2, r3
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013938:	4b7c      	ldr	r3, [pc, #496]	; (8013b2c <tcp_receive+0x7c4>)
 801393a:	681a      	ldr	r2, [r3, #0]
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013940:	1ad3      	subs	r3, r2, r3
 8013942:	2b00      	cmp	r3, #0
 8013944:	f2c0 83bd 	blt.w	80140c2 <tcp_receive+0xd5a>
 8013948:	4b78      	ldr	r3, [pc, #480]	; (8013b2c <tcp_receive+0x7c4>)
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013950:	6879      	ldr	r1, [r7, #4]
 8013952:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013954:	440b      	add	r3, r1
 8013956:	1ad3      	subs	r3, r2, r3
 8013958:	3301      	adds	r3, #1
 801395a:	2b00      	cmp	r3, #0
 801395c:	f300 83b1 	bgt.w	80140c2 <tcp_receive+0xd5a>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013964:	4b71      	ldr	r3, [pc, #452]	; (8013b2c <tcp_receive+0x7c4>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	429a      	cmp	r2, r3
 801396a:	f040 8242 	bne.w	8013df2 <tcp_receive+0xa8a>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801396e:	4b70      	ldr	r3, [pc, #448]	; (8013b30 <tcp_receive+0x7c8>)
 8013970:	891c      	ldrh	r4, [r3, #8]
 8013972:	4b6f      	ldr	r3, [pc, #444]	; (8013b30 <tcp_receive+0x7c8>)
 8013974:	691b      	ldr	r3, [r3, #16]
 8013976:	899b      	ldrh	r3, [r3, #12]
 8013978:	b29b      	uxth	r3, r3
 801397a:	4618      	mov	r0, r3
 801397c:	f7fb fdc2 	bl	800f504 <lwip_htons>
 8013980:	4603      	mov	r3, r0
 8013982:	b2db      	uxtb	r3, r3
 8013984:	f003 0303 	and.w	r3, r3, #3
 8013988:	2b00      	cmp	r3, #0
 801398a:	d001      	beq.n	8013990 <tcp_receive+0x628>
 801398c:	2301      	movs	r3, #1
 801398e:	e000      	b.n	8013992 <tcp_receive+0x62a>
 8013990:	2300      	movs	r3, #0
 8013992:	4423      	add	r3, r4
 8013994:	b29a      	uxth	r2, r3
 8013996:	4b67      	ldr	r3, [pc, #412]	; (8013b34 <tcp_receive+0x7cc>)
 8013998:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801399e:	4b65      	ldr	r3, [pc, #404]	; (8013b34 <tcp_receive+0x7cc>)
 80139a0:	881b      	ldrh	r3, [r3, #0]
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d261      	bcs.n	8013a6a <tcp_receive+0x702>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80139a6:	4b62      	ldr	r3, [pc, #392]	; (8013b30 <tcp_receive+0x7c8>)
 80139a8:	691b      	ldr	r3, [r3, #16]
 80139aa:	899b      	ldrh	r3, [r3, #12]
 80139ac:	b29b      	uxth	r3, r3
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7fb fda8 	bl	800f504 <lwip_htons>
 80139b4:	4603      	mov	r3, r0
 80139b6:	b2db      	uxtb	r3, r3
 80139b8:	f003 0301 	and.w	r3, r3, #1
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d01f      	beq.n	8013a00 <tcp_receive+0x698>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80139c0:	4b5b      	ldr	r3, [pc, #364]	; (8013b30 <tcp_receive+0x7c8>)
 80139c2:	691b      	ldr	r3, [r3, #16]
 80139c4:	899b      	ldrh	r3, [r3, #12]
 80139c6:	b29b      	uxth	r3, r3
 80139c8:	b21b      	sxth	r3, r3
 80139ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80139ce:	b21c      	sxth	r4, r3
 80139d0:	4b57      	ldr	r3, [pc, #348]	; (8013b30 <tcp_receive+0x7c8>)
 80139d2:	691b      	ldr	r3, [r3, #16]
 80139d4:	899b      	ldrh	r3, [r3, #12]
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	4618      	mov	r0, r3
 80139da:	f7fb fd93 	bl	800f504 <lwip_htons>
 80139de:	4603      	mov	r3, r0
 80139e0:	b2db      	uxtb	r3, r3
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7fb fd8a 	bl	800f504 <lwip_htons>
 80139f0:	4603      	mov	r3, r0
 80139f2:	b21b      	sxth	r3, r3
 80139f4:	4323      	orrs	r3, r4
 80139f6:	b21a      	sxth	r2, r3
 80139f8:	4b4d      	ldr	r3, [pc, #308]	; (8013b30 <tcp_receive+0x7c8>)
 80139fa:	691b      	ldr	r3, [r3, #16]
 80139fc:	b292      	uxth	r2, r2
 80139fe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013a04:	4b4a      	ldr	r3, [pc, #296]	; (8013b30 <tcp_receive+0x7c8>)
 8013a06:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013a08:	4b49      	ldr	r3, [pc, #292]	; (8013b30 <tcp_receive+0x7c8>)
 8013a0a:	691b      	ldr	r3, [r3, #16]
 8013a0c:	899b      	ldrh	r3, [r3, #12]
 8013a0e:	b29b      	uxth	r3, r3
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7fb fd77 	bl	800f504 <lwip_htons>
 8013a16:	4603      	mov	r3, r0
 8013a18:	b2db      	uxtb	r3, r3
 8013a1a:	f003 0302 	and.w	r3, r3, #2
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d005      	beq.n	8013a2e <tcp_receive+0x6c6>
            inseg.len -= 1;
 8013a22:	4b43      	ldr	r3, [pc, #268]	; (8013b30 <tcp_receive+0x7c8>)
 8013a24:	891b      	ldrh	r3, [r3, #8]
 8013a26:	3b01      	subs	r3, #1
 8013a28:	b29a      	uxth	r2, r3
 8013a2a:	4b41      	ldr	r3, [pc, #260]	; (8013b30 <tcp_receive+0x7c8>)
 8013a2c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013a2e:	4b40      	ldr	r3, [pc, #256]	; (8013b30 <tcp_receive+0x7c8>)
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	4a3f      	ldr	r2, [pc, #252]	; (8013b30 <tcp_receive+0x7c8>)
 8013a34:	8912      	ldrh	r2, [r2, #8]
 8013a36:	4611      	mov	r1, r2
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f7fc fc28 	bl	801028e <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013a3e:	4b3c      	ldr	r3, [pc, #240]	; (8013b30 <tcp_receive+0x7c8>)
 8013a40:	891c      	ldrh	r4, [r3, #8]
 8013a42:	4b3b      	ldr	r3, [pc, #236]	; (8013b30 <tcp_receive+0x7c8>)
 8013a44:	691b      	ldr	r3, [r3, #16]
 8013a46:	899b      	ldrh	r3, [r3, #12]
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7fb fd5a 	bl	800f504 <lwip_htons>
 8013a50:	4603      	mov	r3, r0
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	f003 0303 	and.w	r3, r3, #3
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d001      	beq.n	8013a60 <tcp_receive+0x6f8>
 8013a5c:	2301      	movs	r3, #1
 8013a5e:	e000      	b.n	8013a62 <tcp_receive+0x6fa>
 8013a60:	2300      	movs	r3, #0
 8013a62:	4423      	add	r3, r4
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	4b33      	ldr	r3, [pc, #204]	; (8013b34 <tcp_receive+0x7cc>)
 8013a68:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	f000 80cf 	beq.w	8013c12 <tcp_receive+0x8aa>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013a74:	4b2e      	ldr	r3, [pc, #184]	; (8013b30 <tcp_receive+0x7c8>)
 8013a76:	691b      	ldr	r3, [r3, #16]
 8013a78:	899b      	ldrh	r3, [r3, #12]
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fb fd41 	bl	800f504 <lwip_htons>
 8013a82:	4603      	mov	r3, r0
 8013a84:	b2db      	uxtb	r3, r3
 8013a86:	f003 0301 	and.w	r3, r3, #1
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d010      	beq.n	8013ab0 <tcp_receive+0x748>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013a8e:	e00a      	b.n	8013aa6 <tcp_receive+0x73e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a94:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a9a:	681a      	ldr	r2, [r3, #0]
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013aa0:	68f8      	ldr	r0, [r7, #12]
 8013aa2:	f7fd fedd 	bl	8011860 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d1f0      	bne.n	8013a90 <tcp_receive+0x728>
 8013aae:	e0b0      	b.n	8013c12 <tcp_receive+0x8aa>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013ab6:	e04c      	b.n	8013b52 <tcp_receive+0x7ea>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aba:	691b      	ldr	r3, [r3, #16]
 8013abc:	899b      	ldrh	r3, [r3, #12]
 8013abe:	b29b      	uxth	r3, r3
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7fb fd1f 	bl	800f504 <lwip_htons>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	b2db      	uxtb	r3, r3
 8013aca:	f003 0301 	and.w	r3, r3, #1
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d037      	beq.n	8013b42 <tcp_receive+0x7da>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013ad2:	4b17      	ldr	r3, [pc, #92]	; (8013b30 <tcp_receive+0x7c8>)
 8013ad4:	691b      	ldr	r3, [r3, #16]
 8013ad6:	899b      	ldrh	r3, [r3, #12]
 8013ad8:	b29b      	uxth	r3, r3
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7fb fd12 	bl	800f504 <lwip_htons>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	b2db      	uxtb	r3, r3
 8013ae4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d12a      	bne.n	8013b42 <tcp_receive+0x7da>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013aec:	4b10      	ldr	r3, [pc, #64]	; (8013b30 <tcp_receive+0x7c8>)
 8013aee:	691b      	ldr	r3, [r3, #16]
 8013af0:	899b      	ldrh	r3, [r3, #12]
 8013af2:	b29c      	uxth	r4, r3
 8013af4:	2001      	movs	r0, #1
 8013af6:	f7fb fd05 	bl	800f504 <lwip_htons>
 8013afa:	4603      	mov	r3, r0
 8013afc:	461a      	mov	r2, r3
 8013afe:	4b0c      	ldr	r3, [pc, #48]	; (8013b30 <tcp_receive+0x7c8>)
 8013b00:	691b      	ldr	r3, [r3, #16]
 8013b02:	4322      	orrs	r2, r4
 8013b04:	b292      	uxth	r2, r2
 8013b06:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013b08:	4b09      	ldr	r3, [pc, #36]	; (8013b30 <tcp_receive+0x7c8>)
 8013b0a:	891c      	ldrh	r4, [r3, #8]
 8013b0c:	4b08      	ldr	r3, [pc, #32]	; (8013b30 <tcp_receive+0x7c8>)
 8013b0e:	691b      	ldr	r3, [r3, #16]
 8013b10:	899b      	ldrh	r3, [r3, #12]
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7fb fcf5 	bl	800f504 <lwip_htons>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	f003 0303 	and.w	r3, r3, #3
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d008      	beq.n	8013b38 <tcp_receive+0x7d0>
 8013b26:	2301      	movs	r3, #1
 8013b28:	e007      	b.n	8013b3a <tcp_receive+0x7d2>
 8013b2a:	bf00      	nop
 8013b2c:	20007878 	.word	0x20007878
 8013b30:	20007854 	.word	0x20007854
 8013b34:	20007882 	.word	0x20007882
 8013b38:	2300      	movs	r3, #0
 8013b3a:	4423      	add	r3, r4
 8013b3c:	b29a      	uxth	r2, r3
 8013b3e:	4b7e      	ldr	r3, [pc, #504]	; (8013d38 <tcp_receive+0x9d0>)
 8013b40:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b44:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013b4c:	6938      	ldr	r0, [r7, #16]
 8013b4e:	f7fd fe87 	bl	8011860 <tcp_seg_free>
            while (next &&
 8013b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d00e      	beq.n	8013b76 <tcp_receive+0x80e>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013b58:	4b77      	ldr	r3, [pc, #476]	; (8013d38 <tcp_receive+0x9d0>)
 8013b5a:	881b      	ldrh	r3, [r3, #0]
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	4b77      	ldr	r3, [pc, #476]	; (8013d3c <tcp_receive+0x9d4>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	441a      	add	r2, r3
 8013b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b66:	691b      	ldr	r3, [r3, #16]
 8013b68:	685b      	ldr	r3, [r3, #4]
 8013b6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013b6c:	8909      	ldrh	r1, [r1, #8]
 8013b6e:	440b      	add	r3, r1
 8013b70:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	daa0      	bge.n	8013ab8 <tcp_receive+0x750>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d047      	beq.n	8013c0c <tcp_receive+0x8a4>
                TCP_SEQ_GT(seqno + tcplen,
 8013b7c:	4b6e      	ldr	r3, [pc, #440]	; (8013d38 <tcp_receive+0x9d0>)
 8013b7e:	881b      	ldrh	r3, [r3, #0]
 8013b80:	461a      	mov	r2, r3
 8013b82:	4b6e      	ldr	r3, [pc, #440]	; (8013d3c <tcp_receive+0x9d4>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	441a      	add	r2, r3
 8013b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b8a:	691b      	ldr	r3, [r3, #16]
 8013b8c:	685b      	ldr	r3, [r3, #4]
 8013b8e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	dd3b      	ble.n	8013c0c <tcp_receive+0x8a4>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b96:	691b      	ldr	r3, [r3, #16]
 8013b98:	685b      	ldr	r3, [r3, #4]
 8013b9a:	b29a      	uxth	r2, r3
 8013b9c:	4b67      	ldr	r3, [pc, #412]	; (8013d3c <tcp_receive+0x9d4>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	1ad3      	subs	r3, r2, r3
 8013ba4:	b29a      	uxth	r2, r3
 8013ba6:	4b66      	ldr	r3, [pc, #408]	; (8013d40 <tcp_receive+0x9d8>)
 8013ba8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013baa:	4b65      	ldr	r3, [pc, #404]	; (8013d40 <tcp_receive+0x9d8>)
 8013bac:	691b      	ldr	r3, [r3, #16]
 8013bae:	899b      	ldrh	r3, [r3, #12]
 8013bb0:	b29b      	uxth	r3, r3
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7fb fca6 	bl	800f504 <lwip_htons>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	f003 0302 	and.w	r3, r3, #2
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d005      	beq.n	8013bd0 <tcp_receive+0x868>
                inseg.len -= 1;
 8013bc4:	4b5e      	ldr	r3, [pc, #376]	; (8013d40 <tcp_receive+0x9d8>)
 8013bc6:	891b      	ldrh	r3, [r3, #8]
 8013bc8:	3b01      	subs	r3, #1
 8013bca:	b29a      	uxth	r2, r3
 8013bcc:	4b5c      	ldr	r3, [pc, #368]	; (8013d40 <tcp_receive+0x9d8>)
 8013bce:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013bd0:	4b5b      	ldr	r3, [pc, #364]	; (8013d40 <tcp_receive+0x9d8>)
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	4a5a      	ldr	r2, [pc, #360]	; (8013d40 <tcp_receive+0x9d8>)
 8013bd6:	8912      	ldrh	r2, [r2, #8]
 8013bd8:	4611      	mov	r1, r2
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7fc fb57 	bl	801028e <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013be0:	4b57      	ldr	r3, [pc, #348]	; (8013d40 <tcp_receive+0x9d8>)
 8013be2:	891c      	ldrh	r4, [r3, #8]
 8013be4:	4b56      	ldr	r3, [pc, #344]	; (8013d40 <tcp_receive+0x9d8>)
 8013be6:	691b      	ldr	r3, [r3, #16]
 8013be8:	899b      	ldrh	r3, [r3, #12]
 8013bea:	b29b      	uxth	r3, r3
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7fb fc89 	bl	800f504 <lwip_htons>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	f003 0303 	and.w	r3, r3, #3
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d001      	beq.n	8013c02 <tcp_receive+0x89a>
 8013bfe:	2301      	movs	r3, #1
 8013c00:	e000      	b.n	8013c04 <tcp_receive+0x89c>
 8013c02:	2300      	movs	r3, #0
 8013c04:	4423      	add	r3, r4
 8013c06:	b29a      	uxth	r2, r3
 8013c08:	4b4b      	ldr	r3, [pc, #300]	; (8013d38 <tcp_receive+0x9d0>)
 8013c0a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c10:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013c12:	4b49      	ldr	r3, [pc, #292]	; (8013d38 <tcp_receive+0x9d0>)
 8013c14:	881b      	ldrh	r3, [r3, #0]
 8013c16:	461a      	mov	r2, r3
 8013c18:	4b48      	ldr	r3, [pc, #288]	; (8013d3c <tcp_receive+0x9d4>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	441a      	add	r2, r3
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c26:	4b44      	ldr	r3, [pc, #272]	; (8013d38 <tcp_receive+0x9d0>)
 8013c28:	881b      	ldrh	r3, [r3, #0]
 8013c2a:	1ad3      	subs	r3, r2, r3
 8013c2c:	b29a      	uxth	r2, r3
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013c32:	6878      	ldr	r0, [r7, #4]
 8013c34:	f7fd f9c6 	bl	8010fc4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013c38:	4b41      	ldr	r3, [pc, #260]	; (8013d40 <tcp_receive+0x9d8>)
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	891b      	ldrh	r3, [r3, #8]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d006      	beq.n	8013c50 <tcp_receive+0x8e8>
          recv_data = inseg.p;
 8013c42:	4b3f      	ldr	r3, [pc, #252]	; (8013d40 <tcp_receive+0x9d8>)
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	4a3f      	ldr	r2, [pc, #252]	; (8013d44 <tcp_receive+0x9dc>)
 8013c48:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013c4a:	4b3d      	ldr	r3, [pc, #244]	; (8013d40 <tcp_receive+0x9d8>)
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013c50:	4b3b      	ldr	r3, [pc, #236]	; (8013d40 <tcp_receive+0x9d8>)
 8013c52:	691b      	ldr	r3, [r3, #16]
 8013c54:	899b      	ldrh	r3, [r3, #12]
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7fb fc53 	bl	800f504 <lwip_htons>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	b2db      	uxtb	r3, r3
 8013c62:	f003 0301 	and.w	r3, r3, #1
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	f000 8099 	beq.w	8013d9e <tcp_receive+0xa36>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013c6c:	4b36      	ldr	r3, [pc, #216]	; (8013d48 <tcp_receive+0x9e0>)
 8013c6e:	781b      	ldrb	r3, [r3, #0]
 8013c70:	f043 0320 	orr.w	r3, r3, #32
 8013c74:	b2da      	uxtb	r2, r3
 8013c76:	4b34      	ldr	r3, [pc, #208]	; (8013d48 <tcp_receive+0x9e0>)
 8013c78:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013c7a:	e090      	b.n	8013d9e <tcp_receive+0xa36>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c80:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c86:	691b      	ldr	r3, [r3, #16]
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	4a2c      	ldr	r2, [pc, #176]	; (8013d3c <tcp_receive+0x9d4>)
 8013c8c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013c8e:	68bb      	ldr	r3, [r7, #8]
 8013c90:	891b      	ldrh	r3, [r3, #8]
 8013c92:	461c      	mov	r4, r3
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	691b      	ldr	r3, [r3, #16]
 8013c98:	899b      	ldrh	r3, [r3, #12]
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f7fb fc31 	bl	800f504 <lwip_htons>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	b2db      	uxtb	r3, r3
 8013ca6:	f003 0303 	and.w	r3, r3, #3
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d001      	beq.n	8013cb2 <tcp_receive+0x94a>
 8013cae:	2301      	movs	r3, #1
 8013cb0:	e000      	b.n	8013cb4 <tcp_receive+0x94c>
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	191a      	adds	r2, r3, r4
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cba:	441a      	add	r2, r3
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	691b      	ldr	r3, [r3, #16]
 8013cc4:	899b      	ldrh	r3, [r3, #12]
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7fb fc1b 	bl	800f504 <lwip_htons>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	b2db      	uxtb	r3, r3
 8013cd2:	f003 0303 	and.w	r3, r3, #3
 8013cd6:	2b00      	cmp	r3, #0
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	891b      	ldrh	r3, [r3, #8]
 8013cdc:	461c      	mov	r4, r3
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	691b      	ldr	r3, [r3, #16]
 8013ce2:	899b      	ldrh	r3, [r3, #12]
 8013ce4:	b29b      	uxth	r3, r3
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7fb fc0c 	bl	800f504 <lwip_htons>
 8013cec:	4603      	mov	r3, r0
 8013cee:	b2db      	uxtb	r3, r3
 8013cf0:	f003 0303 	and.w	r3, r3, #3
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d001      	beq.n	8013cfc <tcp_receive+0x994>
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	e000      	b.n	8013cfe <tcp_receive+0x996>
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	1919      	adds	r1, r3, r4
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013d04:	b28b      	uxth	r3, r1
 8013d06:	1ad3      	subs	r3, r2, r3
 8013d08:	b29a      	uxth	r2, r3
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7fd f958 	bl	8010fc4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	891b      	ldrh	r3, [r3, #8]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d01d      	beq.n	8013d5a <tcp_receive+0x9f2>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013d1e:	4b09      	ldr	r3, [pc, #36]	; (8013d44 <tcp_receive+0x9dc>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d012      	beq.n	8013d4c <tcp_receive+0x9e4>
              pbuf_cat(recv_data, cseg->p);
 8013d26:	4b07      	ldr	r3, [pc, #28]	; (8013d44 <tcp_receive+0x9dc>)
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	685b      	ldr	r3, [r3, #4]
 8013d2e:	4619      	mov	r1, r3
 8013d30:	4610      	mov	r0, r2
 8013d32:	f7fc fc5c 	bl	80105ee <pbuf_cat>
 8013d36:	e00d      	b.n	8013d54 <tcp_receive+0x9ec>
 8013d38:	20007882 	.word	0x20007882
 8013d3c:	20007878 	.word	0x20007878
 8013d40:	20007854 	.word	0x20007854
 8013d44:	20007888 	.word	0x20007888
 8013d48:	20007885 	.word	0x20007885
            } else {
              recv_data = cseg->p;
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	4a70      	ldr	r2, [pc, #448]	; (8013f14 <tcp_receive+0xbac>)
 8013d52:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	2200      	movs	r2, #0
 8013d58:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	691b      	ldr	r3, [r3, #16]
 8013d5e:	899b      	ldrh	r3, [r3, #12]
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7fb fbce 	bl	800f504 <lwip_htons>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	b2db      	uxtb	r3, r3
 8013d6c:	f003 0301 	and.w	r3, r3, #1
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d00d      	beq.n	8013d90 <tcp_receive+0xa28>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013d74:	4b68      	ldr	r3, [pc, #416]	; (8013f18 <tcp_receive+0xbb0>)
 8013d76:	781b      	ldrb	r3, [r3, #0]
 8013d78:	f043 0320 	orr.w	r3, r3, #32
 8013d7c:	b2da      	uxtb	r2, r3
 8013d7e:	4b66      	ldr	r3, [pc, #408]	; (8013f18 <tcp_receive+0xbb0>)
 8013d80:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	7d1b      	ldrb	r3, [r3, #20]
 8013d86:	2b04      	cmp	r3, #4
 8013d88:	d102      	bne.n	8013d90 <tcp_receive+0xa28>
              pcb->state = CLOSE_WAIT;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2207      	movs	r2, #7
 8013d8e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013d98:	68b8      	ldr	r0, [r7, #8]
 8013d9a:	f7fd fd61 	bl	8011860 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d008      	beq.n	8013db8 <tcp_receive+0xa50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013daa:	691b      	ldr	r3, [r3, #16]
 8013dac:	685a      	ldr	r2, [r3, #4]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013db2:	429a      	cmp	r2, r3
 8013db4:	f43f af62 	beq.w	8013c7c <tcp_receive+0x914>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	8b5b      	ldrh	r3, [r3, #26]
 8013dbc:	f003 0301 	and.w	r3, r3, #1
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d00e      	beq.n	8013de2 <tcp_receive+0xa7a>
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	8b5b      	ldrh	r3, [r3, #26]
 8013dc8:	f023 0301 	bic.w	r3, r3, #1
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	835a      	strh	r2, [r3, #26]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	8b5b      	ldrh	r3, [r3, #26]
 8013dd6:	f043 0302 	orr.w	r3, r3, #2
 8013dda:	b29a      	uxth	r2, r3
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013de0:	e173      	b.n	80140ca <tcp_receive+0xd62>
        tcp_ack(pcb);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	8b5b      	ldrh	r3, [r3, #26]
 8013de6:	f043 0301 	orr.w	r3, r3, #1
 8013dea:	b29a      	uxth	r2, r3
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013df0:	e16b      	b.n	80140ca <tcp_receive+0xd62>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d106      	bne.n	8013e08 <tcp_receive+0xaa0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013dfa:	4848      	ldr	r0, [pc, #288]	; (8013f1c <tcp_receive+0xbb4>)
 8013dfc:	f7fd fd59 	bl	80118b2 <tcp_seg_copy>
 8013e00:	4602      	mov	r2, r0
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	675a      	str	r2, [r3, #116]	; 0x74
 8013e06:	e158      	b.n	80140ba <tcp_receive+0xd52>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013e08:	2300      	movs	r3, #0
 8013e0a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8013e12:	e142      	b.n	801409a <tcp_receive+0xd32>
            if (seqno == next->tcphdr->seqno) {
 8013e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e16:	691b      	ldr	r3, [r3, #16]
 8013e18:	685a      	ldr	r2, [r3, #4]
 8013e1a:	4b41      	ldr	r3, [pc, #260]	; (8013f20 <tcp_receive+0xbb8>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d11d      	bne.n	8013e5e <tcp_receive+0xaf6>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013e22:	4b3e      	ldr	r3, [pc, #248]	; (8013f1c <tcp_receive+0xbb4>)
 8013e24:	891a      	ldrh	r2, [r3, #8]
 8013e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e28:	891b      	ldrh	r3, [r3, #8]
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	f240 813a 	bls.w	80140a4 <tcp_receive+0xd3c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013e30:	483a      	ldr	r0, [pc, #232]	; (8013f1c <tcp_receive+0xbb4>)
 8013e32:	f7fd fd3e 	bl	80118b2 <tcp_seg_copy>
 8013e36:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	f000 8134 	beq.w	80140a8 <tcp_receive+0xd40>
                  if (prev != NULL) {
 8013e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d003      	beq.n	8013e4e <tcp_receive+0xae6>
                    prev->next = cseg;
 8013e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e48:	697a      	ldr	r2, [r7, #20]
 8013e4a:	601a      	str	r2, [r3, #0]
 8013e4c:	e002      	b.n	8013e54 <tcp_receive+0xaec>
                  } else {
                    pcb->ooseq = cseg;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	697a      	ldr	r2, [r7, #20]
 8013e52:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013e54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013e56:	6978      	ldr	r0, [r7, #20]
 8013e58:	f7ff f9b8 	bl	80131cc <tcp_oos_insert_segment>
                }
                break;
 8013e5c:	e124      	b.n	80140a8 <tcp_receive+0xd40>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d117      	bne.n	8013e94 <tcp_receive+0xb2c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013e64:	4b2e      	ldr	r3, [pc, #184]	; (8013f20 <tcp_receive+0xbb8>)
 8013e66:	681a      	ldr	r2, [r3, #0]
 8013e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e6a:	691b      	ldr	r3, [r3, #16]
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	1ad3      	subs	r3, r2, r3
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	da57      	bge.n	8013f24 <tcp_receive+0xbbc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013e74:	4829      	ldr	r0, [pc, #164]	; (8013f1c <tcp_receive+0xbb4>)
 8013e76:	f7fd fd1c 	bl	80118b2 <tcp_seg_copy>
 8013e7a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013e7c:	69bb      	ldr	r3, [r7, #24]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	f000 8114 	beq.w	80140ac <tcp_receive+0xd44>
                    pcb->ooseq = cseg;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	69ba      	ldr	r2, [r7, #24]
 8013e88:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013e8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013e8c:	69b8      	ldr	r0, [r7, #24]
 8013e8e:	f7ff f99d 	bl	80131cc <tcp_oos_insert_segment>
                  }
                  break;
 8013e92:	e10b      	b.n	80140ac <tcp_receive+0xd44>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013e94:	4b22      	ldr	r3, [pc, #136]	; (8013f20 <tcp_receive+0xbb8>)
 8013e96:	681a      	ldr	r2, [r3, #0]
 8013e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e9a:	691b      	ldr	r3, [r3, #16]
 8013e9c:	685b      	ldr	r3, [r3, #4]
 8013e9e:	1ad3      	subs	r3, r2, r3
 8013ea0:	3b01      	subs	r3, #1
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	db3e      	blt.n	8013f24 <tcp_receive+0xbbc>
 8013ea6:	4b1e      	ldr	r3, [pc, #120]	; (8013f20 <tcp_receive+0xbb8>)
 8013ea8:	681a      	ldr	r2, [r3, #0]
 8013eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013eac:	691b      	ldr	r3, [r3, #16]
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	1ad3      	subs	r3, r2, r3
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	dc35      	bgt.n	8013f24 <tcp_receive+0xbbc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013eb8:	4818      	ldr	r0, [pc, #96]	; (8013f1c <tcp_receive+0xbb4>)
 8013eba:	f7fd fcfa 	bl	80118b2 <tcp_seg_copy>
 8013ebe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	f000 80f4 	beq.w	80140b0 <tcp_receive+0xd48>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eca:	691b      	ldr	r3, [r3, #16]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ed0:	8912      	ldrh	r2, [r2, #8]
 8013ed2:	441a      	add	r2, r3
 8013ed4:	4b12      	ldr	r3, [pc, #72]	; (8013f20 <tcp_receive+0xbb8>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	1ad3      	subs	r3, r2, r3
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	dd12      	ble.n	8013f04 <tcp_receive+0xb9c>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013ede:	4b10      	ldr	r3, [pc, #64]	; (8013f20 <tcp_receive+0xbb8>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	b29a      	uxth	r2, r3
 8013ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ee6:	691b      	ldr	r3, [r3, #16]
 8013ee8:	685b      	ldr	r3, [r3, #4]
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	1ad3      	subs	r3, r2, r3
 8013eee:	b29a      	uxth	r2, r3
 8013ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ef2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ef6:	685a      	ldr	r2, [r3, #4]
 8013ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013efa:	891b      	ldrh	r3, [r3, #8]
 8013efc:	4619      	mov	r1, r3
 8013efe:	4610      	mov	r0, r2
 8013f00:	f7fc f9c5 	bl	801028e <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f06:	69fa      	ldr	r2, [r7, #28]
 8013f08:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013f0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013f0c:	69f8      	ldr	r0, [r7, #28]
 8013f0e:	f7ff f95d 	bl	80131cc <tcp_oos_insert_segment>
                  }
                  break;
 8013f12:	e0cd      	b.n	80140b0 <tcp_receive+0xd48>
 8013f14:	20007888 	.word	0x20007888
 8013f18:	20007885 	.word	0x20007885
 8013f1c:	20007854 	.word	0x20007854
 8013f20:	20007878 	.word	0x20007878
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f26:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	f040 80b1 	bne.w	8014094 <tcp_receive+0xd2c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013f32:	4b75      	ldr	r3, [pc, #468]	; (8014108 <tcp_receive+0xda0>)
 8013f34:	681a      	ldr	r2, [r3, #0]
 8013f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f38:	691b      	ldr	r3, [r3, #16]
 8013f3a:	685b      	ldr	r3, [r3, #4]
 8013f3c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	f340 80a8 	ble.w	8014094 <tcp_receive+0xd2c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f46:	691b      	ldr	r3, [r3, #16]
 8013f48:	899b      	ldrh	r3, [r3, #12]
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f7fb fad9 	bl	800f504 <lwip_htons>
 8013f52:	4603      	mov	r3, r0
 8013f54:	b2db      	uxtb	r3, r3
 8013f56:	f003 0301 	and.w	r3, r3, #1
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	f040 80aa 	bne.w	80140b4 <tcp_receive+0xd4c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013f60:	486a      	ldr	r0, [pc, #424]	; (801410c <tcp_receive+0xda4>)
 8013f62:	f7fd fca6 	bl	80118b2 <tcp_seg_copy>
 8013f66:	4602      	mov	r2, r0
 8013f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f6a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	f000 80a1 	beq.w	80140b8 <tcp_receive+0xd50>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f78:	691b      	ldr	r3, [r3, #16]
 8013f7a:	685b      	ldr	r3, [r3, #4]
 8013f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f7e:	8912      	ldrh	r2, [r2, #8]
 8013f80:	441a      	add	r2, r3
 8013f82:	4b61      	ldr	r3, [pc, #388]	; (8014108 <tcp_receive+0xda0>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	1ad3      	subs	r3, r2, r3
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	dd12      	ble.n	8013fb2 <tcp_receive+0xc4a>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013f8c:	4b5e      	ldr	r3, [pc, #376]	; (8014108 <tcp_receive+0xda0>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	b29a      	uxth	r2, r3
 8013f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f94:	691b      	ldr	r3, [r3, #16]
 8013f96:	685b      	ldr	r3, [r3, #4]
 8013f98:	b29b      	uxth	r3, r3
 8013f9a:	1ad3      	subs	r3, r2, r3
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa4:	685a      	ldr	r2, [r3, #4]
 8013fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa8:	891b      	ldrh	r3, [r3, #8]
 8013faa:	4619      	mov	r1, r3
 8013fac:	4610      	mov	r0, r2
 8013fae:	f7fc f96e 	bl	801028e <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013fb2:	4b57      	ldr	r3, [pc, #348]	; (8014110 <tcp_receive+0xda8>)
 8013fb4:	881b      	ldrh	r3, [r3, #0]
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	4b53      	ldr	r3, [pc, #332]	; (8014108 <tcp_receive+0xda0>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	441a      	add	r2, r3
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fc2:	6879      	ldr	r1, [r7, #4]
 8013fc4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013fc6:	440b      	add	r3, r1
 8013fc8:	1ad3      	subs	r3, r2, r3
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	dd74      	ble.n	80140b8 <tcp_receive+0xd50>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	691b      	ldr	r3, [r3, #16]
 8013fd4:	899b      	ldrh	r3, [r3, #12]
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7fb fa93 	bl	800f504 <lwip_htons>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	f003 0301 	and.w	r3, r3, #1
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d022      	beq.n	8014030 <tcp_receive+0xcc8>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	691b      	ldr	r3, [r3, #16]
 8013ff0:	899b      	ldrh	r3, [r3, #12]
 8013ff2:	b29b      	uxth	r3, r3
 8013ff4:	b21b      	sxth	r3, r3
 8013ff6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013ffa:	b21c      	sxth	r4, r3
 8013ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	691b      	ldr	r3, [r3, #16]
 8014002:	899b      	ldrh	r3, [r3, #12]
 8014004:	b29b      	uxth	r3, r3
 8014006:	4618      	mov	r0, r3
 8014008:	f7fb fa7c 	bl	800f504 <lwip_htons>
 801400c:	4603      	mov	r3, r0
 801400e:	b2db      	uxtb	r3, r3
 8014010:	b29b      	uxth	r3, r3
 8014012:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014016:	b29b      	uxth	r3, r3
 8014018:	4618      	mov	r0, r3
 801401a:	f7fb fa73 	bl	800f504 <lwip_htons>
 801401e:	4603      	mov	r3, r0
 8014020:	b21b      	sxth	r3, r3
 8014022:	4323      	orrs	r3, r4
 8014024:	b21a      	sxth	r2, r3
 8014026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	691b      	ldr	r3, [r3, #16]
 801402c:	b292      	uxth	r2, r2
 801402e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014034:	b29a      	uxth	r2, r3
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801403a:	4413      	add	r3, r2
 801403c:	b299      	uxth	r1, r3
 801403e:	4b32      	ldr	r3, [pc, #200]	; (8014108 <tcp_receive+0xda0>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	b29a      	uxth	r2, r3
 8014044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	1a8a      	subs	r2, r1, r2
 801404a:	b292      	uxth	r2, r2
 801404c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	685a      	ldr	r2, [r3, #4]
 8014054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	891b      	ldrh	r3, [r3, #8]
 801405a:	4619      	mov	r1, r3
 801405c:	4610      	mov	r0, r2
 801405e:	f7fc f916 	bl	801028e <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	891c      	ldrh	r4, [r3, #8]
 8014068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	691b      	ldr	r3, [r3, #16]
 801406e:	899b      	ldrh	r3, [r3, #12]
 8014070:	b29b      	uxth	r3, r3
 8014072:	4618      	mov	r0, r3
 8014074:	f7fb fa46 	bl	800f504 <lwip_htons>
 8014078:	4603      	mov	r3, r0
 801407a:	b2db      	uxtb	r3, r3
 801407c:	f003 0303 	and.w	r3, r3, #3
 8014080:	2b00      	cmp	r3, #0
 8014082:	d001      	beq.n	8014088 <tcp_receive+0xd20>
 8014084:	2301      	movs	r3, #1
 8014086:	e000      	b.n	801408a <tcp_receive+0xd22>
 8014088:	2300      	movs	r3, #0
 801408a:	4423      	add	r3, r4
 801408c:	b29a      	uxth	r2, r3
 801408e:	4b20      	ldr	r3, [pc, #128]	; (8014110 <tcp_receive+0xda8>)
 8014090:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014092:	e011      	b.n	80140b8 <tcp_receive+0xd50>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	63bb      	str	r3, [r7, #56]	; 0x38
 801409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409c:	2b00      	cmp	r3, #0
 801409e:	f47f aeb9 	bne.w	8013e14 <tcp_receive+0xaac>
 80140a2:	e00a      	b.n	80140ba <tcp_receive+0xd52>
                break;
 80140a4:	bf00      	nop
 80140a6:	e008      	b.n	80140ba <tcp_receive+0xd52>
                break;
 80140a8:	bf00      	nop
 80140aa:	e006      	b.n	80140ba <tcp_receive+0xd52>
                  break;
 80140ac:	bf00      	nop
 80140ae:	e004      	b.n	80140ba <tcp_receive+0xd52>
                  break;
 80140b0:	bf00      	nop
 80140b2:	e002      	b.n	80140ba <tcp_receive+0xd52>
                  break;
 80140b4:	bf00      	nop
 80140b6:	e000      	b.n	80140ba <tcp_receive+0xd52>
                break;
 80140b8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f001 fbdf 	bl	801587e <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80140c0:	e003      	b.n	80140ca <tcp_receive+0xd62>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f001 fbdb 	bl	801587e <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80140c8:	e01a      	b.n	8014100 <tcp_receive+0xd98>
 80140ca:	e019      	b.n	8014100 <tcp_receive+0xd98>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80140cc:	4b0e      	ldr	r3, [pc, #56]	; (8014108 <tcp_receive+0xda0>)
 80140ce:	681a      	ldr	r2, [r3, #0]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140d4:	1ad3      	subs	r3, r2, r3
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	db0a      	blt.n	80140f0 <tcp_receive+0xd88>
 80140da:	4b0b      	ldr	r3, [pc, #44]	; (8014108 <tcp_receive+0xda0>)
 80140dc:	681a      	ldr	r2, [r3, #0]
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140e2:	6879      	ldr	r1, [r7, #4]
 80140e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80140e6:	440b      	add	r3, r1
 80140e8:	1ad3      	subs	r3, r2, r3
 80140ea:	3301      	adds	r3, #1
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	dd07      	ble.n	8014100 <tcp_receive+0xd98>
      tcp_ack_now(pcb);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	8b5b      	ldrh	r3, [r3, #26]
 80140f4:	f043 0302 	orr.w	r3, r3, #2
 80140f8:	b29a      	uxth	r2, r3
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80140fe:	e7ff      	b.n	8014100 <tcp_receive+0xd98>
 8014100:	bf00      	nop
 8014102:	3754      	adds	r7, #84	; 0x54
 8014104:	46bd      	mov	sp, r7
 8014106:	bd90      	pop	{r4, r7, pc}
 8014108:	20007878 	.word	0x20007878
 801410c:	20007854 	.word	0x20007854
 8014110:	20007882 	.word	0x20007882

08014114 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014114:	b480      	push	{r7}
 8014116:	b083      	sub	sp, #12
 8014118:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801411a:	4b15      	ldr	r3, [pc, #84]	; (8014170 <tcp_get_next_optbyte+0x5c>)
 801411c:	881b      	ldrh	r3, [r3, #0]
 801411e:	1c5a      	adds	r2, r3, #1
 8014120:	b291      	uxth	r1, r2
 8014122:	4a13      	ldr	r2, [pc, #76]	; (8014170 <tcp_get_next_optbyte+0x5c>)
 8014124:	8011      	strh	r1, [r2, #0]
 8014126:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014128:	4b12      	ldr	r3, [pc, #72]	; (8014174 <tcp_get_next_optbyte+0x60>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d004      	beq.n	801413a <tcp_get_next_optbyte+0x26>
 8014130:	4b11      	ldr	r3, [pc, #68]	; (8014178 <tcp_get_next_optbyte+0x64>)
 8014132:	881b      	ldrh	r3, [r3, #0]
 8014134:	88fa      	ldrh	r2, [r7, #6]
 8014136:	429a      	cmp	r2, r3
 8014138:	d208      	bcs.n	801414c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801413a:	4b10      	ldr	r3, [pc, #64]	; (801417c <tcp_get_next_optbyte+0x68>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	3314      	adds	r3, #20
 8014140:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014142:	88fb      	ldrh	r3, [r7, #6]
 8014144:	683a      	ldr	r2, [r7, #0]
 8014146:	4413      	add	r3, r2
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	e00b      	b.n	8014164 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801414c:	88fb      	ldrh	r3, [r7, #6]
 801414e:	b2da      	uxtb	r2, r3
 8014150:	4b09      	ldr	r3, [pc, #36]	; (8014178 <tcp_get_next_optbyte+0x64>)
 8014152:	881b      	ldrh	r3, [r3, #0]
 8014154:	b2db      	uxtb	r3, r3
 8014156:	1ad3      	subs	r3, r2, r3
 8014158:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801415a:	4b06      	ldr	r3, [pc, #24]	; (8014174 <tcp_get_next_optbyte+0x60>)
 801415c:	681a      	ldr	r2, [r3, #0]
 801415e:	797b      	ldrb	r3, [r7, #5]
 8014160:	4413      	add	r3, r2
 8014162:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014164:	4618      	mov	r0, r3
 8014166:	370c      	adds	r7, #12
 8014168:	46bd      	mov	sp, r7
 801416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416e:	4770      	bx	lr
 8014170:	20007874 	.word	0x20007874
 8014174:	20007870 	.word	0x20007870
 8014178:	2000786e 	.word	0x2000786e
 801417c:	20007868 	.word	0x20007868

08014180 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b084      	sub	sp, #16
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014188:	4b2e      	ldr	r3, [pc, #184]	; (8014244 <tcp_parseopt+0xc4>)
 801418a:	881b      	ldrh	r3, [r3, #0]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d055      	beq.n	801423c <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014190:	4b2d      	ldr	r3, [pc, #180]	; (8014248 <tcp_parseopt+0xc8>)
 8014192:	2200      	movs	r2, #0
 8014194:	801a      	strh	r2, [r3, #0]
 8014196:	e045      	b.n	8014224 <tcp_parseopt+0xa4>
      u8_t opt = tcp_get_next_optbyte();
 8014198:	f7ff ffbc 	bl	8014114 <tcp_get_next_optbyte>
 801419c:	4603      	mov	r3, r0
 801419e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80141a0:	7bfb      	ldrb	r3, [r7, #15]
 80141a2:	2b02      	cmp	r3, #2
 80141a4:	d006      	beq.n	80141b4 <tcp_parseopt+0x34>
 80141a6:	2b02      	cmp	r3, #2
 80141a8:	dc2b      	bgt.n	8014202 <tcp_parseopt+0x82>
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d041      	beq.n	8014232 <tcp_parseopt+0xb2>
 80141ae:	2b01      	cmp	r3, #1
 80141b0:	d127      	bne.n	8014202 <tcp_parseopt+0x82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80141b2:	e037      	b.n	8014224 <tcp_parseopt+0xa4>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80141b4:	f7ff ffae 	bl	8014114 <tcp_get_next_optbyte>
 80141b8:	4603      	mov	r3, r0
 80141ba:	2b04      	cmp	r3, #4
 80141bc:	d13b      	bne.n	8014236 <tcp_parseopt+0xb6>
 80141be:	4b22      	ldr	r3, [pc, #136]	; (8014248 <tcp_parseopt+0xc8>)
 80141c0:	881b      	ldrh	r3, [r3, #0]
 80141c2:	3301      	adds	r3, #1
 80141c4:	4a1f      	ldr	r2, [pc, #124]	; (8014244 <tcp_parseopt+0xc4>)
 80141c6:	8812      	ldrh	r2, [r2, #0]
 80141c8:	4293      	cmp	r3, r2
 80141ca:	da34      	bge.n	8014236 <tcp_parseopt+0xb6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80141cc:	f7ff ffa2 	bl	8014114 <tcp_get_next_optbyte>
 80141d0:	4603      	mov	r3, r0
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	021b      	lsls	r3, r3, #8
 80141d6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80141d8:	f7ff ff9c 	bl	8014114 <tcp_get_next_optbyte>
 80141dc:	4603      	mov	r3, r0
 80141de:	b29a      	uxth	r2, r3
 80141e0:	89bb      	ldrh	r3, [r7, #12]
 80141e2:	4313      	orrs	r3, r2
 80141e4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80141e6:	89bb      	ldrh	r3, [r7, #12]
 80141e8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80141ec:	d804      	bhi.n	80141f8 <tcp_parseopt+0x78>
 80141ee:	89bb      	ldrh	r3, [r7, #12]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d001      	beq.n	80141f8 <tcp_parseopt+0x78>
 80141f4:	89ba      	ldrh	r2, [r7, #12]
 80141f6:	e001      	b.n	80141fc <tcp_parseopt+0x7c>
 80141f8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014200:	e010      	b.n	8014224 <tcp_parseopt+0xa4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014202:	f7ff ff87 	bl	8014114 <tcp_get_next_optbyte>
 8014206:	4603      	mov	r3, r0
 8014208:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801420a:	7afb      	ldrb	r3, [r7, #11]
 801420c:	2b01      	cmp	r3, #1
 801420e:	d914      	bls.n	801423a <tcp_parseopt+0xba>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014210:	7afb      	ldrb	r3, [r7, #11]
 8014212:	b29a      	uxth	r2, r3
 8014214:	4b0c      	ldr	r3, [pc, #48]	; (8014248 <tcp_parseopt+0xc8>)
 8014216:	881b      	ldrh	r3, [r3, #0]
 8014218:	4413      	add	r3, r2
 801421a:	b29b      	uxth	r3, r3
 801421c:	3b02      	subs	r3, #2
 801421e:	b29a      	uxth	r2, r3
 8014220:	4b09      	ldr	r3, [pc, #36]	; (8014248 <tcp_parseopt+0xc8>)
 8014222:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014224:	4b08      	ldr	r3, [pc, #32]	; (8014248 <tcp_parseopt+0xc8>)
 8014226:	881a      	ldrh	r2, [r3, #0]
 8014228:	4b06      	ldr	r3, [pc, #24]	; (8014244 <tcp_parseopt+0xc4>)
 801422a:	881b      	ldrh	r3, [r3, #0]
 801422c:	429a      	cmp	r2, r3
 801422e:	d3b3      	bcc.n	8014198 <tcp_parseopt+0x18>
 8014230:	e004      	b.n	801423c <tcp_parseopt+0xbc>
          return;
 8014232:	bf00      	nop
 8014234:	e002      	b.n	801423c <tcp_parseopt+0xbc>
            return;
 8014236:	bf00      	nop
 8014238:	e000      	b.n	801423c <tcp_parseopt+0xbc>
            return;
 801423a:	bf00      	nop
      }
    }
  }
}
 801423c:	3710      	adds	r7, #16
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}
 8014242:	bf00      	nop
 8014244:	2000786c 	.word	0x2000786c
 8014248:	20007874 	.word	0x20007874

0801424c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801424c:	b480      	push	{r7}
 801424e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014250:	4b05      	ldr	r3, [pc, #20]	; (8014268 <tcp_trigger_input_pcb_close+0x1c>)
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	f043 0310 	orr.w	r3, r3, #16
 8014258:	b2da      	uxtb	r2, r3
 801425a:	4b03      	ldr	r3, [pc, #12]	; (8014268 <tcp_trigger_input_pcb_close+0x1c>)
 801425c:	701a      	strb	r2, [r3, #0]
}
 801425e:	bf00      	nop
 8014260:	46bd      	mov	sp, r7
 8014262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014266:	4770      	bx	lr
 8014268:	20007885 	.word	0x20007885

0801426c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b084      	sub	sp, #16
 8014270:	af00      	add	r7, sp, #0
 8014272:	60f8      	str	r0, [r7, #12]
 8014274:	60b9      	str	r1, [r7, #8]
 8014276:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d00a      	beq.n	8014294 <tcp_route+0x28>
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	7a1b      	ldrb	r3, [r3, #8]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d006      	beq.n	8014294 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	7a1b      	ldrb	r3, [r3, #8]
 801428a:	4618      	mov	r0, r3
 801428c:	f7fb fe74 	bl	800ff78 <netif_get_by_index>
 8014290:	4603      	mov	r3, r0
 8014292:	e003      	b.n	801429c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f005 f81b 	bl	80192d0 <ip4_route>
 801429a:	4603      	mov	r3, r0
  }
}
 801429c:	4618      	mov	r0, r3
 801429e:	3710      	adds	r7, #16
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80142a4:	b590      	push	{r4, r7, lr}
 80142a6:	b087      	sub	sp, #28
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	60f8      	str	r0, [r7, #12]
 80142ac:	60b9      	str	r1, [r7, #8]
 80142ae:	603b      	str	r3, [r7, #0]
 80142b0:	4613      	mov	r3, r2
 80142b2:	71fb      	strb	r3, [r7, #7]
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80142b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80142b8:	009b      	lsls	r3, r3, #2
 80142ba:	b2db      	uxtb	r3, r3
 80142bc:	f003 0304 	and.w	r3, r3, #4
 80142c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80142c2:	2003      	movs	r0, #3
 80142c4:	f7fb fbfe 	bl	800fac4 <memp_malloc>
 80142c8:	6138      	str	r0, [r7, #16]
 80142ca:	693b      	ldr	r3, [r7, #16]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d104      	bne.n	80142da <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80142d0:	68b8      	ldr	r0, [r7, #8]
 80142d2:	f7fc f90f 	bl	80104f4 <pbuf_free>
    return NULL;
 80142d6:	2300      	movs	r3, #0
 80142d8:	e060      	b.n	801439c <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80142e0:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	2200      	movs	r2, #0
 80142e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	68ba      	ldr	r2, [r7, #8]
 80142ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	891a      	ldrh	r2, [r3, #8]
 80142f2:	7dfb      	ldrb	r3, [r7, #23]
 80142f4:	b29b      	uxth	r3, r3
 80142f6:	1ad3      	subs	r3, r2, r3
 80142f8:	b29a      	uxth	r2, r3
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 80142fe:	693b      	ldr	r3, [r7, #16]
 8014300:	2200      	movs	r2, #0
 8014302:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014304:	2114      	movs	r1, #20
 8014306:	68b8      	ldr	r0, [r7, #8]
 8014308:	f7fc f878 	bl	80103fc <pbuf_add_header>
 801430c:	4603      	mov	r3, r0
 801430e:	2b00      	cmp	r3, #0
 8014310:	d00c      	beq.n	801432c <tcp_create_segment+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8014312:	4b24      	ldr	r3, [pc, #144]	; (80143a4 <tcp_create_segment+0x100>)
 8014314:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8014318:	3301      	adds	r3, #1
 801431a:	b29a      	uxth	r2, r3
 801431c:	4b21      	ldr	r3, [pc, #132]	; (80143a4 <tcp_create_segment+0x100>)
 801431e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 8014322:	6938      	ldr	r0, [r7, #16]
 8014324:	f7fd fa9c 	bl	8011860 <tcp_seg_free>
    return NULL;
 8014328:	2300      	movs	r3, #0
 801432a:	e037      	b.n	801439c <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	685a      	ldr	r2, [r3, #4]
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	8ada      	ldrh	r2, [r3, #22]
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	691c      	ldr	r4, [r3, #16]
 801433e:	4610      	mov	r0, r2
 8014340:	f7fb f8e0 	bl	800f504 <lwip_htons>
 8014344:	4603      	mov	r3, r0
 8014346:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	8b1a      	ldrh	r2, [r3, #24]
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	691c      	ldr	r4, [r3, #16]
 8014350:	4610      	mov	r0, r2
 8014352:	f7fb f8d7 	bl	800f504 <lwip_htons>
 8014356:	4603      	mov	r3, r0
 8014358:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	691c      	ldr	r4, [r3, #16]
 801435e:	6838      	ldr	r0, [r7, #0]
 8014360:	f7fb f8e5 	bl	800f52e <lwip_htonl>
 8014364:	4603      	mov	r3, r0
 8014366:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014368:	7dfb      	ldrb	r3, [r7, #23]
 801436a:	089b      	lsrs	r3, r3, #2
 801436c:	b2db      	uxtb	r3, r3
 801436e:	b29b      	uxth	r3, r3
 8014370:	3305      	adds	r3, #5
 8014372:	b29b      	uxth	r3, r3
 8014374:	031b      	lsls	r3, r3, #12
 8014376:	b29a      	uxth	r2, r3
 8014378:	79fb      	ldrb	r3, [r7, #7]
 801437a:	b29b      	uxth	r3, r3
 801437c:	4313      	orrs	r3, r2
 801437e:	b29a      	uxth	r2, r3
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	691c      	ldr	r4, [r3, #16]
 8014384:	4610      	mov	r0, r2
 8014386:	f7fb f8bd 	bl	800f504 <lwip_htons>
 801438a:	4603      	mov	r3, r0
 801438c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	691b      	ldr	r3, [r3, #16]
 8014392:	2200      	movs	r2, #0
 8014394:	749a      	strb	r2, [r3, #18]
 8014396:	2200      	movs	r2, #0
 8014398:	74da      	strb	r2, [r3, #19]
  return seg;
 801439a:	693b      	ldr	r3, [r7, #16]
}
 801439c:	4618      	mov	r0, r3
 801439e:	371c      	adds	r7, #28
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd90      	pop	{r4, r7, pc}
 80143a4:	20007794 	.word	0x20007794

080143a8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b086      	sub	sp, #24
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	607b      	str	r3, [r7, #4]
 80143b0:	4603      	mov	r3, r0
 80143b2:	73fb      	strb	r3, [r7, #15]
 80143b4:	460b      	mov	r3, r1
 80143b6:	81bb      	strh	r3, [r7, #12]
 80143b8:	4613      	mov	r3, r2
 80143ba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80143bc:	89bb      	ldrh	r3, [r7, #12]
 80143be:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80143c0:	89ba      	ldrh	r2, [r7, #12]
 80143c2:	897b      	ldrh	r3, [r7, #10]
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d221      	bcs.n	801440c <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80143c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80143cc:	f003 0302 	and.w	r3, r3, #2
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d111      	bne.n	80143f8 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 80143d4:	6a3b      	ldr	r3, [r7, #32]
 80143d6:	8b5b      	ldrh	r3, [r3, #26]
 80143d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d115      	bne.n	801440c <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 80143e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d007      	beq.n	80143f8 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80143e8:	6a3b      	ldr	r3, [r7, #32]
 80143ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d103      	bne.n	80143f8 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 80143f0:	6a3b      	ldr	r3, [r7, #32]
 80143f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d009      	beq.n	801440c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80143f8:	89bb      	ldrh	r3, [r7, #12]
 80143fa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80143fe:	f023 0203 	bic.w	r2, r3, #3
 8014402:	897b      	ldrh	r3, [r7, #10]
 8014404:	4293      	cmp	r3, r2
 8014406:	bf28      	it	cs
 8014408:	4613      	movcs	r3, r2
 801440a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801440c:	8af9      	ldrh	r1, [r7, #22]
 801440e:	7bfb      	ldrb	r3, [r7, #15]
 8014410:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014414:	4618      	mov	r0, r3
 8014416:	f7fb fe2b 	bl	8010070 <pbuf_alloc>
 801441a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d101      	bne.n	8014426 <tcp_pbuf_prealloc+0x7e>
    return NULL;
 8014422:	2300      	movs	r3, #0
 8014424:	e00e      	b.n	8014444 <tcp_pbuf_prealloc+0x9c>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 8014426:	693b      	ldr	r3, [r7, #16]
 8014428:	895a      	ldrh	r2, [r3, #10]
 801442a:	89bb      	ldrh	r3, [r7, #12]
 801442c:	1ad3      	subs	r3, r2, r3
 801442e:	b29a      	uxth	r2, r3
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014434:	693b      	ldr	r3, [r7, #16]
 8014436:	89ba      	ldrh	r2, [r7, #12]
 8014438:	811a      	strh	r2, [r3, #8]
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	891a      	ldrh	r2, [r3, #8]
 801443e:	693b      	ldr	r3, [r7, #16]
 8014440:	815a      	strh	r2, [r3, #10]
  return p;
 8014442:	693b      	ldr	r3, [r7, #16]
}
 8014444:	4618      	mov	r0, r3
 8014446:	3718      	adds	r7, #24
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}

0801444c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801444c:	b480      	push	{r7}
 801444e:	b083      	sub	sp, #12
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	460b      	mov	r3, r1
 8014456:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	7d1b      	ldrb	r3, [r3, #20]
 801445c:	2b04      	cmp	r3, #4
 801445e:	d00e      	beq.n	801447e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014464:	2b07      	cmp	r3, #7
 8014466:	d00a      	beq.n	801447e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801446c:	2b02      	cmp	r3, #2
 801446e:	d006      	beq.n	801447e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014474:	2b03      	cmp	r3, #3
 8014476:	d002      	beq.n	801447e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014478:	f06f 030a 	mvn.w	r3, #10
 801447c:	e02c      	b.n	80144d8 <tcp_write_checks+0x8c>
  } else if (len == 0) {
 801447e:	887b      	ldrh	r3, [r7, #2]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d101      	bne.n	8014488 <tcp_write_checks+0x3c>
    return ERR_OK;
 8014484:	2300      	movs	r3, #0
 8014486:	e027      	b.n	80144d8 <tcp_write_checks+0x8c>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801448e:	887a      	ldrh	r2, [r7, #2]
 8014490:	429a      	cmp	r2, r3
 8014492:	d909      	bls.n	80144a8 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	8b5b      	ldrh	r3, [r3, #26]
 8014498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801449c:	b29a      	uxth	r2, r3
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80144a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144a6:	e017      	b.n	80144d8 <tcp_write_checks+0x8c>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80144ae:	2b0b      	cmp	r3, #11
 80144b0:	d911      	bls.n	80144d6 <tcp_write_checks+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 80144b2:	4b0c      	ldr	r3, [pc, #48]	; (80144e4 <tcp_write_checks+0x98>)
 80144b4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80144b8:	3301      	adds	r3, #1
 80144ba:	b29a      	uxth	r2, r3
 80144bc:	4b09      	ldr	r3, [pc, #36]	; (80144e4 <tcp_write_checks+0x98>)
 80144be:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	8b5b      	ldrh	r3, [r3, #26]
 80144c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144ca:	b29a      	uxth	r2, r3
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80144d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144d4:	e000      	b.n	80144d8 <tcp_write_checks+0x8c>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80144d6:	2300      	movs	r3, #0
}
 80144d8:	4618      	mov	r0, r3
 80144da:	370c      	adds	r7, #12
 80144dc:	46bd      	mov	sp, r7
 80144de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e2:	4770      	bx	lr
 80144e4:	20007794 	.word	0x20007794

080144e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80144e8:	b590      	push	{r4, r7, lr}
 80144ea:	b09d      	sub	sp, #116	; 0x74
 80144ec:	af04      	add	r7, sp, #16
 80144ee:	60f8      	str	r0, [r7, #12]
 80144f0:	60b9      	str	r1, [r7, #8]
 80144f2:	4611      	mov	r1, r2
 80144f4:	461a      	mov	r2, r3
 80144f6:	460b      	mov	r3, r1
 80144f8:	80fb      	strh	r3, [r7, #6]
 80144fa:	4613      	mov	r3, r2
 80144fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80144fe:	2300      	movs	r3, #0
 8014500:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014502:	2300      	movs	r3, #0
 8014504:	643b      	str	r3, [r7, #64]	; 0x40
 8014506:	2300      	movs	r3, #0
 8014508:	657b      	str	r3, [r7, #84]	; 0x54
 801450a:	2300      	movs	r3, #0
 801450c:	653b      	str	r3, [r7, #80]	; 0x50
 801450e:	2300      	movs	r3, #0
 8014510:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8014512:	2300      	movs	r3, #0
 8014514:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014518:	2300      	movs	r3, #0
 801451a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801451e:	2300      	movs	r3, #0
 8014520:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8014522:	2300      	movs	r3, #0
 8014524:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8014528:	2300      	movs	r3, #0
 801452a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801452e:	2300      	movs	r3, #0
 8014530:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d102      	bne.n	8014540 <tcp_write+0x58>
 801453a:	f06f 030f 	mvn.w	r3, #15
 801453e:	e29c      	b.n	8014a7a <tcp_write+0x592>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014546:	085b      	lsrs	r3, r3, #1
 8014548:	b29a      	uxth	r2, r3
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801454e:	4293      	cmp	r3, r2
 8014550:	bf28      	it	cs
 8014552:	4613      	movcs	r3, r2
 8014554:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8014556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014558:	2b00      	cmp	r3, #0
 801455a:	d102      	bne.n	8014562 <tcp_write+0x7a>
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014560:	e000      	b.n	8014564 <tcp_write+0x7c>
 8014562:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014564:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d102      	bne.n	8014572 <tcp_write+0x8a>
 801456c:	f06f 030f 	mvn.w	r3, #15
 8014570:	e283      	b.n	8014a7a <tcp_write+0x592>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014572:	88fb      	ldrh	r3, [r7, #6]
 8014574:	4619      	mov	r1, r3
 8014576:	68f8      	ldr	r0, [r7, #12]
 8014578:	f7ff ff68 	bl	801444c <tcp_write_checks>
 801457c:	4603      	mov	r3, r0
 801457e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8014582:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014586:	2b00      	cmp	r3, #0
 8014588:	d002      	beq.n	8014590 <tcp_write+0xa8>
    return err;
 801458a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801458e:	e274      	b.n	8014a7a <tcp_write+0x592>
  }
  queuelen = pcb->snd_queuelen;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014596:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801459a:	2300      	movs	r3, #0
 801459c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	f000 8171 	beq.w	801488c <tcp_write+0x3a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145ae:	643b      	str	r3, [r7, #64]	; 0x40
 80145b0:	e002      	b.n	80145b8 <tcp_write+0xd0>
         last_unsent = last_unsent->next);
 80145b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80145b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d1f8      	bne.n	80145b2 <tcp_write+0xca>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80145c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145c2:	7b1b      	ldrb	r3, [r3, #12]
 80145c4:	009b      	lsls	r3, r3, #2
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	f003 0304 	and.w	r3, r3, #4
 80145cc:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 80145ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145d0:	891a      	ldrh	r2, [r3, #8]
 80145d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80145d4:	4413      	add	r3, r2
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80145da:	1ad3      	subs	r3, r2, r3
 80145dc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80145e6:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 80145e8:	8afb      	ldrh	r3, [r7, #22]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d022      	beq.n	8014634 <tcp_write+0x14c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
      seg = last_unsent;
 80145ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145f0:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80145f2:	8afb      	ldrh	r3, [r7, #22]
 80145f4:	88fa      	ldrh	r2, [r7, #6]
 80145f6:	4293      	cmp	r3, r2
 80145f8:	bf28      	it	cs
 80145fa:	4613      	movcs	r3, r2
 80145fc:	b29b      	uxth	r3, r3
 80145fe:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8014602:	4293      	cmp	r3, r2
 8014604:	bf28      	it	cs
 8014606:	4613      	movcs	r3, r2
 8014608:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 801460c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8014610:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014614:	4413      	add	r3, r2
 8014616:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 801461a:	8afa      	ldrh	r2, [r7, #22]
 801461c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014620:	1ad3      	subs	r3, r2, r3
 8014622:	b29b      	uxth	r3, r3
 8014624:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8014626:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801462a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801462e:	1ad3      	subs	r3, r2, r3
 8014630:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014634:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8014638:	88fb      	ldrh	r3, [r7, #6]
 801463a:	429a      	cmp	r2, r3
 801463c:	f080 8126 	bcs.w	801488c <tcp_write+0x3a4>
 8014640:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8014644:	2b00      	cmp	r3, #0
 8014646:	f000 8121 	beq.w	801488c <tcp_write+0x3a4>
 801464a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801464c:	891b      	ldrh	r3, [r3, #8]
 801464e:	2b00      	cmp	r3, #0
 8014650:	f000 811c 	beq.w	801488c <tcp_write+0x3a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014654:	88fa      	ldrh	r2, [r7, #6]
 8014656:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801465a:	1ad2      	subs	r2, r2, r3
 801465c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8014660:	4293      	cmp	r3, r2
 8014662:	bfa8      	it	ge
 8014664:	4613      	movge	r3, r2
 8014666:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 8014668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801466a:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801466c:	797b      	ldrb	r3, [r7, #5]
 801466e:	f003 0301 	and.w	r3, r3, #1
 8014672:	2b00      	cmp	r3, #0
 8014674:	d02b      	beq.n	80146ce <tcp_write+0x1e6>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8014676:	f107 0016 	add.w	r0, r7, #22
 801467a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801467e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8014680:	2301      	movs	r3, #1
 8014682:	9302      	str	r3, [sp, #8]
 8014684:	797b      	ldrb	r3, [r7, #5]
 8014686:	9301      	str	r3, [sp, #4]
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	9300      	str	r3, [sp, #0]
 801468c:	4603      	mov	r3, r0
 801468e:	2000      	movs	r0, #0
 8014690:	f7ff fe8a 	bl	80143a8 <tcp_pbuf_prealloc>
 8014694:	63f8      	str	r0, [r7, #60]	; 0x3c
 8014696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014698:	2b00      	cmp	r3, #0
 801469a:	f000 81c8 	beq.w	8014a2e <tcp_write+0x546>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 801469e:	8afb      	ldrh	r3, [r7, #22]
 80146a0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80146a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146a6:	6858      	ldr	r0, [r3, #4]
 80146a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80146ac:	68ba      	ldr	r2, [r7, #8]
 80146ae:	4413      	add	r3, r2
 80146b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80146b2:	4619      	mov	r1, r3
 80146b4:	f006 fb6f 	bl	801ad96 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80146b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80146ba:	f7fb ff6e 	bl	801059a <pbuf_clen>
 80146be:	4603      	mov	r3, r0
 80146c0:	461a      	mov	r2, r3
 80146c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80146c6:	4413      	add	r3, r2
 80146c8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80146cc:	e037      	b.n	801473e <tcp_write+0x256>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80146ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80146d4:	e002      	b.n	80146dc <tcp_write+0x1f4>
 80146d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	63bb      	str	r3, [r7, #56]	; 0x38
 80146dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d1f8      	bne.n	80146d6 <tcp_write+0x1ee>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80146e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e6:	7b1b      	ldrb	r3, [r3, #12]
 80146e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d10b      	bne.n	8014708 <tcp_write+0x220>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80146f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146f6:	8952      	ldrh	r2, [r2, #10]
 80146f8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80146fa:	68ba      	ldr	r2, [r7, #8]
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d103      	bne.n	8014708 <tcp_write+0x220>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
          extendlen = seglen;
 8014700:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014702:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8014706:	e01a      	b.n	801473e <tcp_write+0x256>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014708:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801470a:	2201      	movs	r2, #1
 801470c:	4619      	mov	r1, r3
 801470e:	2000      	movs	r0, #0
 8014710:	f7fb fcae 	bl	8010070 <pbuf_alloc>
 8014714:	63f8      	str	r0, [r7, #60]	; 0x3c
 8014716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014718:	2b00      	cmp	r3, #0
 801471a:	f000 818a 	beq.w	8014a32 <tcp_write+0x54a>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801471e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014722:	68ba      	ldr	r2, [r7, #8]
 8014724:	441a      	add	r2, r3
 8014726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014728:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801472a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801472c:	f7fb ff35 	bl	801059a <pbuf_clen>
 8014730:	4603      	mov	r3, r0
 8014732:	461a      	mov	r2, r3
 8014734:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014738:	4413      	add	r3, r2
 801473a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801473e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8014742:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014744:	4413      	add	r3, r2
 8014746:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801474a:	e09f      	b.n	801488c <tcp_write+0x3a4>
    struct pbuf *p;
    u16_t left = len - pos;
 801474c:	88fa      	ldrh	r2, [r7, #6]
 801474e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014752:	1ad3      	subs	r3, r2, r3
 8014754:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8014756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801475a:	b29b      	uxth	r3, r3
 801475c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801475e:	1ad3      	subs	r3, r2, r3
 8014760:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014762:	8bfa      	ldrh	r2, [r7, #30]
 8014764:	8c3b      	ldrh	r3, [r7, #32]
 8014766:	4293      	cmp	r3, r2
 8014768:	bf28      	it	cs
 801476a:	4613      	movcs	r3, r2
 801476c:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801476e:	797b      	ldrb	r3, [r7, #5]
 8014770:	f003 0301 	and.w	r3, r3, #1
 8014774:	2b00      	cmp	r3, #0
 8014776:	d02a      	beq.n	80147ce <tcp_write+0x2e6>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014778:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801477c:	b29a      	uxth	r2, r3
 801477e:	8bbb      	ldrh	r3, [r7, #28]
 8014780:	4413      	add	r3, r2
 8014782:	b299      	uxth	r1, r3
 8014784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014786:	2b00      	cmp	r3, #0
 8014788:	bf0c      	ite	eq
 801478a:	2301      	moveq	r3, #1
 801478c:	2300      	movne	r3, #0
 801478e:	b2db      	uxtb	r3, r3
 8014790:	f107 0016 	add.w	r0, r7, #22
 8014794:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8014796:	9302      	str	r3, [sp, #8]
 8014798:	797b      	ldrb	r3, [r7, #5]
 801479a:	9301      	str	r3, [sp, #4]
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	9300      	str	r3, [sp, #0]
 80147a0:	4603      	mov	r3, r0
 80147a2:	2038      	movs	r0, #56	; 0x38
 80147a4:	f7ff fe00 	bl	80143a8 <tcp_pbuf_prealloc>
 80147a8:	6378      	str	r0, [r7, #52]	; 0x34
 80147aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	f000 8142 	beq.w	8014a36 <tcp_write+0x54e>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80147b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147b4:	685a      	ldr	r2, [r3, #4]
 80147b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80147ba:	18d0      	adds	r0, r2, r3
 80147bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80147c0:	68ba      	ldr	r2, [r7, #8]
 80147c2:	4413      	add	r3, r2
 80147c4:	8bba      	ldrh	r2, [r7, #28]
 80147c6:	4619      	mov	r1, r3
 80147c8:	f006 fae5 	bl	801ad96 <memcpy>
 80147cc:	e025      	b.n	801481a <tcp_write+0x332>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80147ce:	8bbb      	ldrh	r3, [r7, #28]
 80147d0:	2201      	movs	r2, #1
 80147d2:	4619      	mov	r1, r3
 80147d4:	2038      	movs	r0, #56	; 0x38
 80147d6:	f7fb fc4b 	bl	8010070 <pbuf_alloc>
 80147da:	61b8      	str	r0, [r7, #24]
 80147dc:	69bb      	ldr	r3, [r7, #24]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	f000 812b 	beq.w	8014a3a <tcp_write+0x552>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80147e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80147e8:	68ba      	ldr	r2, [r7, #8]
 80147ea:	441a      	add	r2, r3
 80147ec:	69bb      	ldr	r3, [r7, #24]
 80147ee:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80147f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80147fa:	4619      	mov	r1, r3
 80147fc:	2038      	movs	r0, #56	; 0x38
 80147fe:	f7fb fc37 	bl	8010070 <pbuf_alloc>
 8014802:	6378      	str	r0, [r7, #52]	; 0x34
 8014804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014806:	2b00      	cmp	r3, #0
 8014808:	d103      	bne.n	8014812 <tcp_write+0x32a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801480a:	69b8      	ldr	r0, [r7, #24]
 801480c:	f7fb fe72 	bl	80104f4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014810:	e116      	b.n	8014a40 <tcp_write+0x558>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014812:	69b9      	ldr	r1, [r7, #24]
 8014814:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014816:	f7fb feea 	bl	80105ee <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801481a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801481c:	f7fb febd 	bl	801059a <pbuf_clen>
 8014820:	4603      	mov	r3, r0
 8014822:	461a      	mov	r2, r3
 8014824:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014828:	4413      	add	r3, r2
 801482a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801482e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014832:	2b0c      	cmp	r3, #12
 8014834:	d903      	bls.n	801483e <tcp_write+0x356>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014836:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014838:	f7fb fe5c 	bl	80104f4 <pbuf_free>
      goto memerr;
 801483c:	e100      	b.n	8014a40 <tcp_write+0x558>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014842:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014846:	441a      	add	r2, r3
 8014848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801484c:	9300      	str	r3, [sp, #0]
 801484e:	4613      	mov	r3, r2
 8014850:	2200      	movs	r2, #0
 8014852:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014854:	68f8      	ldr	r0, [r7, #12]
 8014856:	f7ff fd25 	bl	80142a4 <tcp_create_segment>
 801485a:	6578      	str	r0, [r7, #84]	; 0x54
 801485c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801485e:	2b00      	cmp	r3, #0
 8014860:	f000 80ed 	beq.w	8014a3e <tcp_write+0x556>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8014864:	8afa      	ldrh	r2, [r7, #22]
 8014866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014868:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801486c:	2b00      	cmp	r3, #0
 801486e:	d102      	bne.n	8014876 <tcp_write+0x38e>
      queue = seg;
 8014870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014874:	e002      	b.n	801487c <tcp_write+0x394>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 8014876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801487a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801487c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801487e:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014880:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8014884:	8bbb      	ldrh	r3, [r7, #28]
 8014886:	4413      	add	r3, r2
 8014888:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 801488c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8014890:	88fb      	ldrh	r3, [r7, #6]
 8014892:	429a      	cmp	r2, r3
 8014894:	f4ff af5a 	bcc.w	801474c <tcp_write+0x264>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8014898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801489a:	2b00      	cmp	r3, #0
 801489c:	d00b      	beq.n	80148b6 <tcp_write+0x3ce>
 801489e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d007      	beq.n	80148b6 <tcp_write+0x3ce>
    last_unsent->oversize_left += oversize_add;
 80148a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148a8:	895a      	ldrh	r2, [r3, #10]
 80148aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80148ae:	4413      	add	r3, r2
 80148b0:	b29a      	uxth	r2, r3
 80148b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148b4:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80148b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d038      	beq.n	8014930 <tcp_write+0x448>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80148be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148c0:	685b      	ldr	r3, [r3, #4]
 80148c2:	633b      	str	r3, [r7, #48]	; 0x30
 80148c4:	e021      	b.n	801490a <tcp_write+0x422>
      p->tot_len += oversize_used;
 80148c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148c8:	891a      	ldrh	r2, [r3, #8]
 80148ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80148ce:	4413      	add	r3, r2
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80148d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d112      	bne.n	8014904 <tcp_write+0x41c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80148de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e0:	685b      	ldr	r3, [r3, #4]
 80148e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148e4:	8952      	ldrh	r2, [r2, #10]
 80148e6:	4413      	add	r3, r2
 80148e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80148ec:	68b9      	ldr	r1, [r7, #8]
 80148ee:	4618      	mov	r0, r3
 80148f0:	f006 fa51 	bl	801ad96 <memcpy>
        p->len += oversize_used;
 80148f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f6:	895a      	ldrh	r2, [r3, #10]
 80148f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80148fc:	4413      	add	r3, r2
 80148fe:	b29a      	uxth	r2, r3
 8014900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014902:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	633b      	str	r3, [r7, #48]	; 0x30
 801490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490c:	2b00      	cmp	r3, #0
 801490e:	d1da      	bne.n	80148c6 <tcp_write+0x3de>
      }
    }
    last_unsent->len += oversize_used;
 8014910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014912:	891a      	ldrh	r2, [r3, #8]
 8014914:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014918:	4413      	add	r3, r2
 801491a:	b29a      	uxth	r2, r3
 801491c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801491e:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8014920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014922:	895a      	ldrh	r2, [r3, #10]
 8014924:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014928:	1ad3      	subs	r3, r2, r3
 801492a:	b29a      	uxth	r2, r3
 801492c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801492e:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014930:	8afa      	ldrh	r2, [r7, #22]
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801493a:	2b00      	cmp	r3, #0
 801493c:	d00e      	beq.n	801495c <tcp_write+0x474>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801493e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014940:	685b      	ldr	r3, [r3, #4]
 8014942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014944:	4618      	mov	r0, r3
 8014946:	f7fb fe52 	bl	80105ee <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801494a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801494c:	891a      	ldrh	r2, [r3, #8]
 801494e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014950:	891b      	ldrh	r3, [r3, #8]
 8014952:	4413      	add	r3, r2
 8014954:	b29a      	uxth	r2, r3
 8014956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014958:	811a      	strh	r2, [r3, #8]
 801495a:	e02e      	b.n	80149ba <tcp_write+0x4d2>
  } else if (extendlen > 0) {
 801495c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014960:	2b00      	cmp	r3, #0
 8014962:	d02a      	beq.n	80149ba <tcp_write+0x4d2>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014966:	685b      	ldr	r3, [r3, #4]
 8014968:	62fb      	str	r3, [r7, #44]	; 0x2c
 801496a:	e00a      	b.n	8014982 <tcp_write+0x49a>
      p->tot_len += extendlen;
 801496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801496e:	891a      	ldrh	r2, [r3, #8]
 8014970:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014974:	4413      	add	r3, r2
 8014976:	b29a      	uxth	r2, r3
 8014978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801497a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d1f0      	bne.n	801496c <tcp_write+0x484>
    }
    p->tot_len += extendlen;
 801498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498c:	891a      	ldrh	r2, [r3, #8]
 801498e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014992:	4413      	add	r3, r2
 8014994:	b29a      	uxth	r2, r3
 8014996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014998:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801499c:	895a      	ldrh	r2, [r3, #10]
 801499e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80149a2:	4413      	add	r3, r2
 80149a4:	b29a      	uxth	r2, r3
 80149a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80149aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149ac:	891a      	ldrh	r2, [r3, #8]
 80149ae:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80149b2:	4413      	add	r3, r2
 80149b4:	b29a      	uxth	r2, r3
 80149b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149b8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80149ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d103      	bne.n	80149c8 <tcp_write+0x4e0>
    pcb->unsent = queue;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80149c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80149c6:	e002      	b.n	80149ce <tcp_write+0x4e6>
  } else {
    last_unsent->next = queue;
 80149c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80149ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80149cc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80149d2:	88fb      	ldrh	r3, [r7, #6]
 80149d4:	441a      	add	r2, r3
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80149e0:	88fb      	ldrh	r3, [r7, #6]
 80149e2:	1ad3      	subs	r3, r2, r3
 80149e4:	b29a      	uxth	r2, r3
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80149f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80149f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d016      	beq.n	8014a2a <tcp_write+0x542>
 80149fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149fe:	691b      	ldr	r3, [r3, #16]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d012      	beq.n	8014a2a <tcp_write+0x542>
 8014a04:	797b      	ldrb	r3, [r7, #5]
 8014a06:	f003 0302 	and.w	r3, r3, #2
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d10d      	bne.n	8014a2a <tcp_write+0x542>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a10:	691b      	ldr	r3, [r3, #16]
 8014a12:	899b      	ldrh	r3, [r3, #12]
 8014a14:	b29c      	uxth	r4, r3
 8014a16:	2008      	movs	r0, #8
 8014a18:	f7fa fd74 	bl	800f504 <lwip_htons>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	461a      	mov	r2, r3
 8014a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a22:	691b      	ldr	r3, [r3, #16]
 8014a24:	4322      	orrs	r2, r4
 8014a26:	b292      	uxth	r2, r2
 8014a28:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	e025      	b.n	8014a7a <tcp_write+0x592>
          goto memerr;
 8014a2e:	bf00      	nop
 8014a30:	e006      	b.n	8014a40 <tcp_write+0x558>
            goto memerr;
 8014a32:	bf00      	nop
 8014a34:	e004      	b.n	8014a40 <tcp_write+0x558>
        goto memerr;
 8014a36:	bf00      	nop
 8014a38:	e002      	b.n	8014a40 <tcp_write+0x558>
        goto memerr;
 8014a3a:	bf00      	nop
 8014a3c:	e000      	b.n	8014a40 <tcp_write+0x558>
      goto memerr;
 8014a3e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	8b5b      	ldrh	r3, [r3, #26]
 8014a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a48:	b29a      	uxth	r2, r3
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 8014a4e:	4b0d      	ldr	r3, [pc, #52]	; (8014a84 <tcp_write+0x59c>)
 8014a50:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8014a54:	3301      	adds	r3, #1
 8014a56:	b29a      	uxth	r2, r3
 8014a58:	4b0a      	ldr	r3, [pc, #40]	; (8014a84 <tcp_write+0x59c>)
 8014a5a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  if (concat_p != NULL) {
 8014a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d002      	beq.n	8014a6a <tcp_write+0x582>
    pbuf_free(concat_p);
 8014a64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014a66:	f7fb fd45 	bl	80104f4 <pbuf_free>
  }
  if (queue != NULL) {
 8014a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d002      	beq.n	8014a76 <tcp_write+0x58e>
    tcp_segs_free(queue);
 8014a70:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014a72:	f7fc fee0 	bl	8011836 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	3764      	adds	r7, #100	; 0x64
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd90      	pop	{r4, r7, pc}
 8014a82:	bf00      	nop
 8014a84:	20007794 	.word	0x20007794

08014a88 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014a88:	b590      	push	{r4, r7, lr}
 8014a8a:	b08b      	sub	sp, #44	; 0x2c
 8014a8c:	af02      	add	r7, sp, #8
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	460b      	mov	r3, r1
 8014a92:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014a94:	2300      	movs	r3, #0
 8014a96:	61bb      	str	r3, [r7, #24]
 8014a98:	2300      	movs	r3, #0
 8014a9a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	613b      	str	r3, [r7, #16]
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);

  useg = pcb->unsent;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014aa4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d102      	bne.n	8014ab2 <tcp_split_unsent_seg+0x2a>
    return ERR_MEM;
 8014aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ab0:	e0f9      	b.n	8014ca6 <tcp_split_unsent_seg+0x21e>
  }

  if (split == 0) {
 8014ab2:	887b      	ldrh	r3, [r7, #2]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d102      	bne.n	8014abe <tcp_split_unsent_seg+0x36>
    LWIP_ASSERT("Can't split segment into length 0", 0);
    return ERR_VAL;
 8014ab8:	f06f 0305 	mvn.w	r3, #5
 8014abc:	e0f3      	b.n	8014ca6 <tcp_split_unsent_seg+0x21e>
  }

  if (useg->len <= split) {
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	891b      	ldrh	r3, [r3, #8]
 8014ac2:	887a      	ldrh	r2, [r7, #2]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d301      	bcc.n	8014acc <tcp_split_unsent_seg+0x44>
    return ERR_OK;
 8014ac8:	2300      	movs	r3, #0
 8014aca:	e0ec      	b.n	8014ca6 <tcp_split_unsent_seg+0x21e>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	7b1b      	ldrb	r3, [r3, #12]
 8014ad0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014ad2:	7bfb      	ldrb	r3, [r7, #15]
 8014ad4:	009b      	lsls	r3, r3, #2
 8014ad6:	b2db      	uxtb	r3, r3
 8014ad8:	f003 0304 	and.w	r3, r3, #4
 8014adc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	891a      	ldrh	r2, [r3, #8]
 8014ae2:	887b      	ldrh	r3, [r7, #2]
 8014ae4:	1ad3      	subs	r3, r2, r3
 8014ae6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014ae8:	7bbb      	ldrb	r3, [r7, #14]
 8014aea:	b29a      	uxth	r2, r3
 8014aec:	89bb      	ldrh	r3, [r7, #12]
 8014aee:	4413      	add	r3, r2
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014af6:	4619      	mov	r1, r3
 8014af8:	2038      	movs	r0, #56	; 0x38
 8014afa:	f7fb fab9 	bl	8010070 <pbuf_alloc>
 8014afe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014b00:	693b      	ldr	r3, [r7, #16]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	f000 80ba 	beq.w	8014c7c <tcp_split_unsent_seg+0x1f4>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	685b      	ldr	r3, [r3, #4]
 8014b0c:	891a      	ldrh	r2, [r3, #8]
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	891b      	ldrh	r3, [r3, #8]
 8014b12:	1ad3      	subs	r3, r2, r3
 8014b14:	b29a      	uxth	r2, r3
 8014b16:	887b      	ldrh	r3, [r7, #2]
 8014b18:	4413      	add	r3, r2
 8014b1a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	6858      	ldr	r0, [r3, #4]
 8014b20:	693b      	ldr	r3, [r7, #16]
 8014b22:	685a      	ldr	r2, [r3, #4]
 8014b24:	7bbb      	ldrb	r3, [r7, #14]
 8014b26:	18d1      	adds	r1, r2, r3
 8014b28:	897b      	ldrh	r3, [r7, #10]
 8014b2a:	89ba      	ldrh	r2, [r7, #12]
 8014b2c:	f7fb fe28 	bl	8010780 <pbuf_copy_partial>
 8014b30:	4603      	mov	r3, r0
 8014b32:	461a      	mov	r2, r3
 8014b34:	89bb      	ldrh	r3, [r7, #12]
 8014b36:	4293      	cmp	r3, r2
 8014b38:	f040 80a2 	bne.w	8014c80 <tcp_split_unsent_seg+0x1f8>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	691b      	ldr	r3, [r3, #16]
 8014b40:	899b      	ldrh	r3, [r3, #12]
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	4618      	mov	r0, r3
 8014b46:	f7fa fcdd 	bl	800f504 <lwip_htons>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	b2db      	uxtb	r3, r3
 8014b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b52:	77bb      	strb	r3, [r7, #30]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014b54:	2300      	movs	r3, #0
 8014b56:	77fb      	strb	r3, [r7, #31]

  if (split_flags & TCP_PSH) {
 8014b58:	7fbb      	ldrb	r3, [r7, #30]
 8014b5a:	f003 0308 	and.w	r3, r3, #8
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d007      	beq.n	8014b72 <tcp_split_unsent_seg+0xea>
    split_flags &= ~TCP_PSH;
 8014b62:	7fbb      	ldrb	r3, [r7, #30]
 8014b64:	f023 0308 	bic.w	r3, r3, #8
 8014b68:	77bb      	strb	r3, [r7, #30]
    remainder_flags |= TCP_PSH;
 8014b6a:	7ffb      	ldrb	r3, [r7, #31]
 8014b6c:	f043 0308 	orr.w	r3, r3, #8
 8014b70:	77fb      	strb	r3, [r7, #31]
  }
  if (split_flags & TCP_FIN) {
 8014b72:	7fbb      	ldrb	r3, [r7, #30]
 8014b74:	f003 0301 	and.w	r3, r3, #1
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d007      	beq.n	8014b8c <tcp_split_unsent_seg+0x104>
    split_flags &= ~TCP_FIN;
 8014b7c:	7fbb      	ldrb	r3, [r7, #30]
 8014b7e:	f023 0301 	bic.w	r3, r3, #1
 8014b82:	77bb      	strb	r3, [r7, #30]
    remainder_flags |= TCP_FIN;
 8014b84:	7ffb      	ldrb	r3, [r7, #31]
 8014b86:	f043 0301 	orr.w	r3, r3, #1
 8014b8a:	77fb      	strb	r3, [r7, #31]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	691b      	ldr	r3, [r3, #16]
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7fa fccb 	bl	800f52e <lwip_htonl>
 8014b98:	4602      	mov	r2, r0
 8014b9a:	887b      	ldrh	r3, [r7, #2]
 8014b9c:	18d1      	adds	r1, r2, r3
 8014b9e:	7ffa      	ldrb	r2, [r7, #31]
 8014ba0:	7bfb      	ldrb	r3, [r7, #15]
 8014ba2:	9300      	str	r3, [sp, #0]
 8014ba4:	460b      	mov	r3, r1
 8014ba6:	6939      	ldr	r1, [r7, #16]
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f7ff fb7b 	bl	80142a4 <tcp_create_segment>
 8014bae:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8014bb0:	69bb      	ldr	r3, [r7, #24]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d066      	beq.n	8014c84 <tcp_split_unsent_seg+0x1fc>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	685b      	ldr	r3, [r3, #4]
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7fb fced 	bl	801059a <pbuf_clen>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bca:	1a9b      	subs	r3, r3, r2
 8014bcc:	b29a      	uxth	r2, r3
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	6858      	ldr	r0, [r3, #4]
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	685b      	ldr	r3, [r3, #4]
 8014bdc:	891a      	ldrh	r2, [r3, #8]
 8014bde:	89bb      	ldrh	r3, [r7, #12]
 8014be0:	1ad3      	subs	r3, r2, r3
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	4619      	mov	r1, r3
 8014be6:	f7fb fb52 	bl	801028e <pbuf_realloc>
  useg->len -= remainder;
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	891a      	ldrh	r2, [r3, #8]
 8014bee:	89bb      	ldrh	r3, [r7, #12]
 8014bf0:	1ad3      	subs	r3, r2, r3
 8014bf2:	b29a      	uxth	r2, r3
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	691b      	ldr	r3, [r3, #16]
 8014bfc:	899b      	ldrh	r3, [r3, #12]
 8014bfe:	b29c      	uxth	r4, r3
 8014c00:	7fbb      	ldrb	r3, [r7, #30]
 8014c02:	b29b      	uxth	r3, r3
 8014c04:	4618      	mov	r0, r3
 8014c06:	f7fa fc7d 	bl	800f504 <lwip_htons>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	461a      	mov	r2, r3
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	691b      	ldr	r3, [r3, #16]
 8014c12:	4322      	orrs	r2, r4
 8014c14:	b292      	uxth	r2, r2
 8014c16:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	685b      	ldr	r3, [r3, #4]
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7fb fcb9 	bl	801059a <pbuf_clen>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	461a      	mov	r2, r3
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c32:	4413      	add	r3, r2
 8014c34:	b29a      	uxth	r2, r3
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	685b      	ldr	r3, [r3, #4]
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7fb fcaa 	bl	801059a <pbuf_clen>
 8014c46:	4603      	mov	r3, r0
 8014c48:	461a      	mov	r2, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c50:	4413      	add	r3, r2
 8014c52:	b29a      	uxth	r2, r3
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014c5a:	697b      	ldr	r3, [r7, #20]
 8014c5c:	681a      	ldr	r2, [r3, #0]
 8014c5e:	69bb      	ldr	r3, [r7, #24]
 8014c60:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014c62:	697b      	ldr	r3, [r7, #20]
 8014c64:	69ba      	ldr	r2, [r7, #24]
 8014c66:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014c68:	69bb      	ldr	r3, [r7, #24]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d103      	bne.n	8014c78 <tcp_split_unsent_seg+0x1f0>
    pcb->unsent_oversize = 0;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2200      	movs	r2, #0
 8014c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014c78:	2300      	movs	r3, #0
 8014c7a:	e014      	b.n	8014ca6 <tcp_split_unsent_seg+0x21e>
    goto memerr;
 8014c7c:	bf00      	nop
 8014c7e:	e002      	b.n	8014c86 <tcp_split_unsent_seg+0x1fe>
    goto memerr;
 8014c80:	bf00      	nop
 8014c82:	e000      	b.n	8014c86 <tcp_split_unsent_seg+0x1fe>
    goto memerr;
 8014c84:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 8014c86:	4b0a      	ldr	r3, [pc, #40]	; (8014cb0 <tcp_split_unsent_seg+0x228>)
 8014c88:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8014c8c:	3301      	adds	r3, #1
 8014c8e:	b29a      	uxth	r2, r3
 8014c90:	4b07      	ldr	r3, [pc, #28]	; (8014cb0 <tcp_split_unsent_seg+0x228>)
 8014c92:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
  if (p != NULL) {
 8014c96:	693b      	ldr	r3, [r7, #16]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d002      	beq.n	8014ca2 <tcp_split_unsent_seg+0x21a>
    pbuf_free(p);
 8014c9c:	6938      	ldr	r0, [r7, #16]
 8014c9e:	f7fb fc29 	bl	80104f4 <pbuf_free>
  }

  return ERR_MEM;
 8014ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3724      	adds	r7, #36	; 0x24
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd90      	pop	{r4, r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	20007794 	.word	0x20007794

08014cb4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014cb4:	b590      	push	{r4, r7, lr}
 8014cb6:	b085      	sub	sp, #20
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d02e      	beq.n	8014d22 <tcp_send_fin+0x6e>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cc8:	60fb      	str	r3, [r7, #12]
 8014cca:	e002      	b.n	8014cd2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d1f8      	bne.n	8014ccc <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	691b      	ldr	r3, [r3, #16]
 8014cde:	899b      	ldrh	r3, [r3, #12]
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f7fa fc0e 	bl	800f504 <lwip_htons>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	b2db      	uxtb	r3, r3
 8014cec:	f003 0307 	and.w	r3, r3, #7
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d116      	bne.n	8014d22 <tcp_send_fin+0x6e>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	691b      	ldr	r3, [r3, #16]
 8014cf8:	899b      	ldrh	r3, [r3, #12]
 8014cfa:	b29c      	uxth	r4, r3
 8014cfc:	2001      	movs	r0, #1
 8014cfe:	f7fa fc01 	bl	800f504 <lwip_htons>
 8014d02:	4603      	mov	r3, r0
 8014d04:	461a      	mov	r2, r3
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	691b      	ldr	r3, [r3, #16]
 8014d0a:	4322      	orrs	r2, r4
 8014d0c:	b292      	uxth	r2, r2
 8014d0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	8b5b      	ldrh	r3, [r3, #26]
 8014d14:	f043 0320 	orr.w	r3, r3, #32
 8014d18:	b29a      	uxth	r2, r3
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	e004      	b.n	8014d2c <tcp_send_fin+0x78>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014d22:	2101      	movs	r1, #1
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f000 f805 	bl	8014d34 <tcp_enqueue_flags>
 8014d2a:	4603      	mov	r3, r0
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3714      	adds	r7, #20
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd90      	pop	{r4, r7, pc}

08014d34 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b088      	sub	sp, #32
 8014d38:	af02      	add	r7, sp, #8
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014d40:	2300      	movs	r3, #0
 8014d42:	74fb      	strb	r3, [r7, #19]
  u8_t optlen = 0;
 8014d44:	2300      	movs	r3, #0
 8014d46:	74bb      	strb	r3, [r7, #18]

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014d48:	78fb      	ldrb	r3, [r7, #3]
 8014d4a:	f003 0302 	and.w	r3, r3, #2
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d001      	beq.n	8014d56 <tcp_enqueue_flags+0x22>
    optflags = TF_SEG_OPTS_MSS;
 8014d52:	2301      	movs	r3, #1
 8014d54:	74fb      	strb	r3, [r7, #19]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014d56:	7cfb      	ldrb	r3, [r7, #19]
 8014d58:	009b      	lsls	r3, r3, #2
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	f003 0304 	and.w	r3, r3, #4
 8014d60:	74bb      	strb	r3, [r7, #18]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014d62:	7cbb      	ldrb	r3, [r7, #18]
 8014d64:	b29b      	uxth	r3, r3
 8014d66:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d6a:	4619      	mov	r1, r3
 8014d6c:	2038      	movs	r0, #56	; 0x38
 8014d6e:	f7fb f97f 	bl	8010070 <pbuf_alloc>
 8014d72:	60f8      	str	r0, [r7, #12]
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d111      	bne.n	8014d9e <tcp_enqueue_flags+0x6a>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	8b5b      	ldrh	r3, [r3, #26]
 8014d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d82:	b29a      	uxth	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8014d88:	4b39      	ldr	r3, [pc, #228]	; (8014e70 <tcp_enqueue_flags+0x13c>)
 8014d8a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8014d8e:	3301      	adds	r3, #1
 8014d90:	b29a      	uxth	r2, r3
 8014d92:	4b37      	ldr	r3, [pc, #220]	; (8014e70 <tcp_enqueue_flags+0x13c>)
 8014d94:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 8014d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d9c:	e064      	b.n	8014e68 <tcp_enqueue_flags+0x134>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014da2:	78fa      	ldrb	r2, [r7, #3]
 8014da4:	7cfb      	ldrb	r3, [r7, #19]
 8014da6:	9300      	str	r3, [sp, #0]
 8014da8:	460b      	mov	r3, r1
 8014daa:	68f9      	ldr	r1, [r7, #12]
 8014dac:	6878      	ldr	r0, [r7, #4]
 8014dae:	f7ff fa79 	bl	80142a4 <tcp_create_segment>
 8014db2:	60b8      	str	r0, [r7, #8]
 8014db4:	68bb      	ldr	r3, [r7, #8]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d111      	bne.n	8014dde <tcp_enqueue_flags+0xaa>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	8b5b      	ldrh	r3, [r3, #26]
 8014dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014dc2:	b29a      	uxth	r2, r3
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8014dc8:	4b29      	ldr	r3, [pc, #164]	; (8014e70 <tcp_enqueue_flags+0x13c>)
 8014dca:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8014dce:	3301      	adds	r3, #1
 8014dd0:	b29a      	uxth	r2, r3
 8014dd2:	4b27      	ldr	r3, [pc, #156]	; (8014e70 <tcp_enqueue_flags+0x13c>)
 8014dd4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 8014dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ddc:	e044      	b.n	8014e68 <tcp_enqueue_flags+0x134>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d103      	bne.n	8014dee <tcp_enqueue_flags+0xba>
    pcb->unsent = seg;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	68ba      	ldr	r2, [r7, #8]
 8014dea:	66da      	str	r2, [r3, #108]	; 0x6c
 8014dec:	e00d      	b.n	8014e0a <tcp_enqueue_flags+0xd6>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014df2:	617b      	str	r3, [r7, #20]
 8014df4:	e002      	b.n	8014dfc <tcp_enqueue_flags+0xc8>
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	617b      	str	r3, [r7, #20]
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d1f8      	bne.n	8014df6 <tcp_enqueue_flags+0xc2>
    useg->next = seg;
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	68ba      	ldr	r2, [r7, #8]
 8014e08:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014e12:	78fb      	ldrb	r3, [r7, #3]
 8014e14:	f003 0302 	and.w	r3, r3, #2
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d104      	bne.n	8014e26 <tcp_enqueue_flags+0xf2>
 8014e1c:	78fb      	ldrb	r3, [r7, #3]
 8014e1e:	f003 0301 	and.w	r3, r3, #1
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d004      	beq.n	8014e30 <tcp_enqueue_flags+0xfc>
    pcb->snd_lbb++;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014e2a:	1c5a      	adds	r2, r3, #1
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014e30:	78fb      	ldrb	r3, [r7, #3]
 8014e32:	f003 0301 	and.w	r3, r3, #1
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d006      	beq.n	8014e48 <tcp_enqueue_flags+0x114>
    tcp_set_flags(pcb, TF_FIN);
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	8b5b      	ldrh	r3, [r3, #26]
 8014e3e:	f043 0320 	orr.w	r3, r3, #32
 8014e42:	b29a      	uxth	r2, r3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7fb fba4 	bl	801059a <pbuf_clen>
 8014e52:	4603      	mov	r3, r0
 8014e54:	461a      	mov	r2, r3
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e5c:	4413      	add	r3, r2
 8014e5e:	b29a      	uxth	r2, r3
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014e66:	2300      	movs	r3, #0
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3718      	adds	r7, #24
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	20007794 	.word	0x20007794

08014e74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014e74:	b5b0      	push	{r4, r5, r7, lr}
 8014e76:	b08a      	sub	sp, #40	; 0x28
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014e7c:	4b8f      	ldr	r3, [pc, #572]	; (80150bc <tcp_output+0x248>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	687a      	ldr	r2, [r7, #4]
 8014e82:	429a      	cmp	r2, r3
 8014e84:	d101      	bne.n	8014e8a <tcp_output+0x16>
    return ERR_OK;
 8014e86:	2300      	movs	r3, #0
 8014e88:	e1b9      	b.n	80151fe <tcp_output+0x38a>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014e96:	4293      	cmp	r3, r2
 8014e98:	bf28      	it	cs
 8014e9a:	4613      	movcs	r3, r2
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ea4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d10b      	bne.n	8014ec4 <tcp_output+0x50>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	8b5b      	ldrh	r3, [r3, #26]
 8014eb0:	f003 0302 	and.w	r3, r3, #2
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	f000 8195 	beq.w	80151e4 <tcp_output+0x370>
      return tcp_send_empty_ack(pcb);
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 fcdf 	bl	801587e <tcp_send_empty_ack>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	e19c      	b.n	80151fe <tcp_output+0x38a>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014ec4:	6879      	ldr	r1, [r7, #4]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	3304      	adds	r3, #4
 8014eca:	461a      	mov	r2, r3
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f7ff f9cd 	bl	801426c <tcp_route>
 8014ed2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d102      	bne.n	8014ee0 <tcp_output+0x6c>
    return ERR_RTE;
 8014eda:	f06f 0303 	mvn.w	r3, #3
 8014ede:	e18e      	b.n	80151fe <tcp_output+0x38a>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d003      	beq.n	8014eee <tcp_output+0x7a>
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d111      	bne.n	8014f12 <tcp_output+0x9e>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d002      	beq.n	8014efa <tcp_output+0x86>
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	3304      	adds	r3, #4
 8014ef8:	e000      	b.n	8014efc <tcp_output+0x88>
 8014efa:	2300      	movs	r3, #0
 8014efc:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d102      	bne.n	8014f0a <tcp_output+0x96>
      return ERR_RTE;
 8014f04:	f06f 0303 	mvn.w	r3, #3
 8014f08:	e179      	b.n	80151fe <tcp_output+0x38a>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	681a      	ldr	r2, [r3, #0]
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f14:	691b      	ldr	r3, [r3, #16]
 8014f16:	685b      	ldr	r3, [r3, #4]
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f7fa fb08 	bl	800f52e <lwip_htonl>
 8014f1e:	4602      	mov	r2, r0
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f24:	1ad3      	subs	r3, r2, r3
 8014f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f28:	8912      	ldrh	r2, [r2, #8]
 8014f2a:	4413      	add	r3, r2
 8014f2c:	69ba      	ldr	r2, [r7, #24]
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d227      	bcs.n	8014f82 <tcp_output+0x10e>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f38:	461a      	mov	r2, r3
 8014f3a:	69bb      	ldr	r3, [r7, #24]
 8014f3c:	4293      	cmp	r3, r2
 8014f3e:	d114      	bne.n	8014f6a <tcp_output+0xf6>
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d110      	bne.n	8014f6a <tcp_output+0xf6>
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d10b      	bne.n	8014f6a <tcp_output+0xf6>
      pcb->persist_cnt = 0;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2200      	movs	r2, #0
 8014f56:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	2201      	movs	r2, #1
 8014f5e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2200      	movs	r2, #0
 8014f66:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	8b5b      	ldrh	r3, [r3, #26]
 8014f6e:	f003 0302 	and.w	r3, r3, #2
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	f000 8138 	beq.w	80151e8 <tcp_output+0x374>
      return tcp_send_empty_ack(pcb);
 8014f78:	6878      	ldr	r0, [r7, #4]
 8014f7a:	f000 fc80 	bl	801587e <tcp_send_empty_ack>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	e13d      	b.n	80151fe <tcp_output+0x38a>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	2200      	movs	r2, #0
 8014f86:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f8e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014f90:	6a3b      	ldr	r3, [r7, #32]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	f000 8107 	beq.w	80151a6 <tcp_output+0x332>
    for (; useg->next != NULL; useg = useg->next);
 8014f98:	e002      	b.n	8014fa0 <tcp_output+0x12c>
 8014f9a:	6a3b      	ldr	r3, [r7, #32]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	623b      	str	r3, [r7, #32]
 8014fa0:	6a3b      	ldr	r3, [r7, #32]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d1f8      	bne.n	8014f9a <tcp_output+0x126>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014fa8:	e0fd      	b.n	80151a6 <tcp_output+0x332>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fac:	691b      	ldr	r3, [r3, #16]
 8014fae:	899b      	ldrh	r3, [r3, #12]
 8014fb0:	b29b      	uxth	r3, r3
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f7fa faa6 	bl	800f504 <lwip_htons>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d01f      	beq.n	8015000 <tcp_output+0x18c>
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	8b5b      	ldrh	r3, [r3, #26]
 8014fc4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d119      	bne.n	8015000 <tcp_output+0x18c>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d00b      	beq.n	8014fec <tcp_output+0x178>
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d110      	bne.n	8015000 <tcp_output+0x18c>
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fe2:	891a      	ldrh	r2, [r3, #8]
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014fe8:	429a      	cmp	r2, r3
 8014fea:	d209      	bcs.n	8015000 <tcp_output+0x18c>
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d004      	beq.n	8015000 <tcp_output+0x18c>
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014ffc:	2b0b      	cmp	r3, #11
 8014ffe:	d901      	bls.n	8015004 <tcp_output+0x190>
 8015000:	2301      	movs	r3, #1
 8015002:	e000      	b.n	8015006 <tcp_output+0x192>
 8015004:	2300      	movs	r3, #0
 8015006:	2b00      	cmp	r3, #0
 8015008:	d106      	bne.n	8015018 <tcp_output+0x1a4>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	8b5b      	ldrh	r3, [r3, #26]
 801500e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015012:	2b00      	cmp	r3, #0
 8015014:	f000 80dc 	beq.w	80151d0 <tcp_output+0x35c>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	7d1b      	ldrb	r3, [r3, #20]
 801501c:	2b02      	cmp	r3, #2
 801501e:	d00d      	beq.n	801503c <tcp_output+0x1c8>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015022:	691b      	ldr	r3, [r3, #16]
 8015024:	899b      	ldrh	r3, [r3, #12]
 8015026:	b29c      	uxth	r4, r3
 8015028:	2010      	movs	r0, #16
 801502a:	f7fa fa6b 	bl	800f504 <lwip_htons>
 801502e:	4603      	mov	r3, r0
 8015030:	461a      	mov	r2, r3
 8015032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015034:	691b      	ldr	r3, [r3, #16]
 8015036:	4322      	orrs	r2, r4
 8015038:	b292      	uxth	r2, r2
 801503a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801503c:	697a      	ldr	r2, [r7, #20]
 801503e:	6879      	ldr	r1, [r7, #4]
 8015040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015042:	f000 f8f3 	bl	801522c <tcp_output_segment>
 8015046:	4603      	mov	r3, r0
 8015048:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801504a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d009      	beq.n	8015066 <tcp_output+0x1f2>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	8b5b      	ldrh	r3, [r3, #26]
 8015056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801505a:	b29a      	uxth	r2, r3
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	835a      	strh	r2, [r3, #26]
      return err;
 8015060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015064:	e0cb      	b.n	80151fe <tcp_output+0x38a>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8015066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015068:	2200      	movs	r2, #0
 801506a:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	7d1b      	ldrb	r3, [r3, #20]
 8015078:	2b02      	cmp	r3, #2
 801507a:	d006      	beq.n	801508a <tcp_output+0x216>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	8b5b      	ldrh	r3, [r3, #26]
 8015080:	f023 0303 	bic.w	r3, r3, #3
 8015084:	b29a      	uxth	r2, r3
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508c:	691b      	ldr	r3, [r3, #16]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	4618      	mov	r0, r3
 8015092:	f7fa fa4c 	bl	800f52e <lwip_htonl>
 8015096:	4604      	mov	r4, r0
 8015098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509a:	891b      	ldrh	r3, [r3, #8]
 801509c:	461d      	mov	r5, r3
 801509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a0:	691b      	ldr	r3, [r3, #16]
 80150a2:	899b      	ldrh	r3, [r3, #12]
 80150a4:	b29b      	uxth	r3, r3
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7fa fa2c 	bl	800f504 <lwip_htons>
 80150ac:	4603      	mov	r3, r0
 80150ae:	b2db      	uxtb	r3, r3
 80150b0:	f003 0303 	and.w	r3, r3, #3
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d003      	beq.n	80150c0 <tcp_output+0x24c>
 80150b8:	2301      	movs	r3, #1
 80150ba:	e002      	b.n	80150c2 <tcp_output+0x24e>
 80150bc:	2000788c 	.word	0x2000788c
 80150c0:	2300      	movs	r3, #0
 80150c2:	442b      	add	r3, r5
 80150c4:	4423      	add	r3, r4
 80150c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80150cc:	68bb      	ldr	r3, [r7, #8]
 80150ce:	1ad3      	subs	r3, r2, r3
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	da02      	bge.n	80150da <tcp_output+0x266>
      pcb->snd_nxt = snd_nxt;
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	68ba      	ldr	r2, [r7, #8]
 80150d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80150da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150dc:	891b      	ldrh	r3, [r3, #8]
 80150de:	461c      	mov	r4, r3
 80150e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e2:	691b      	ldr	r3, [r3, #16]
 80150e4:	899b      	ldrh	r3, [r3, #12]
 80150e6:	b29b      	uxth	r3, r3
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7fa fa0b 	bl	800f504 <lwip_htons>
 80150ee:	4603      	mov	r3, r0
 80150f0:	b2db      	uxtb	r3, r3
 80150f2:	f003 0303 	and.w	r3, r3, #3
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d001      	beq.n	80150fe <tcp_output+0x28a>
 80150fa:	2301      	movs	r3, #1
 80150fc:	e000      	b.n	8015100 <tcp_output+0x28c>
 80150fe:	2300      	movs	r3, #0
 8015100:	4423      	add	r3, r4
 8015102:	2b00      	cmp	r3, #0
 8015104:	d049      	beq.n	801519a <tcp_output+0x326>
      seg->next = NULL;
 8015106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015108:	2200      	movs	r2, #0
 801510a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015110:	2b00      	cmp	r3, #0
 8015112:	d105      	bne.n	8015120 <tcp_output+0x2ac>
        pcb->unacked = seg;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015118:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511c:	623b      	str	r3, [r7, #32]
 801511e:	e03f      	b.n	80151a0 <tcp_output+0x32c>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015122:	691b      	ldr	r3, [r3, #16]
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	4618      	mov	r0, r3
 8015128:	f7fa fa01 	bl	800f52e <lwip_htonl>
 801512c:	4604      	mov	r4, r0
 801512e:	6a3b      	ldr	r3, [r7, #32]
 8015130:	691b      	ldr	r3, [r3, #16]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	4618      	mov	r0, r3
 8015136:	f7fa f9fa 	bl	800f52e <lwip_htonl>
 801513a:	4603      	mov	r3, r0
 801513c:	1ae3      	subs	r3, r4, r3
 801513e:	2b00      	cmp	r3, #0
 8015140:	da24      	bge.n	801518c <tcp_output+0x318>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	3370      	adds	r3, #112	; 0x70
 8015146:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015148:	e002      	b.n	8015150 <tcp_output+0x2dc>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801514a:	69fb      	ldr	r3, [r7, #28]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d011      	beq.n	801517c <tcp_output+0x308>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	691b      	ldr	r3, [r3, #16]
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	4618      	mov	r0, r3
 8015162:	f7fa f9e4 	bl	800f52e <lwip_htonl>
 8015166:	4604      	mov	r4, r0
 8015168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801516a:	691b      	ldr	r3, [r3, #16]
 801516c:	685b      	ldr	r3, [r3, #4]
 801516e:	4618      	mov	r0, r3
 8015170:	f7fa f9dd 	bl	800f52e <lwip_htonl>
 8015174:	4603      	mov	r3, r0
 8015176:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015178:	2b00      	cmp	r3, #0
 801517a:	dbe6      	blt.n	801514a <tcp_output+0x2d6>
          }
          seg->next = (*cur_seg);
 801517c:	69fb      	ldr	r3, [r7, #28]
 801517e:	681a      	ldr	r2, [r3, #0]
 8015180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015182:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015184:	69fb      	ldr	r3, [r7, #28]
 8015186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015188:	601a      	str	r2, [r3, #0]
 801518a:	e009      	b.n	80151a0 <tcp_output+0x32c>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801518c:	6a3b      	ldr	r3, [r7, #32]
 801518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015190:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015192:	6a3b      	ldr	r3, [r7, #32]
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	623b      	str	r3, [r7, #32]
 8015198:	e002      	b.n	80151a0 <tcp_output+0x32c>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801519a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801519c:	f7fc fb60 	bl	8011860 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80151a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d012      	beq.n	80151d2 <tcp_output+0x35e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80151ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ae:	691b      	ldr	r3, [r3, #16]
 80151b0:	685b      	ldr	r3, [r3, #4]
 80151b2:	4618      	mov	r0, r3
 80151b4:	f7fa f9bb 	bl	800f52e <lwip_htonl>
 80151b8:	4602      	mov	r2, r0
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151be:	1ad3      	subs	r3, r2, r3
 80151c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151c2:	8912      	ldrh	r2, [r2, #8]
 80151c4:	4413      	add	r3, r2
  while (seg != NULL &&
 80151c6:	69ba      	ldr	r2, [r7, #24]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	f4bf aeee 	bcs.w	8014faa <tcp_output+0x136>
 80151ce:	e000      	b.n	80151d2 <tcp_output+0x35e>
      break;
 80151d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d108      	bne.n	80151ec <tcp_output+0x378>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	2200      	movs	r2, #0
 80151de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80151e2:	e004      	b.n	80151ee <tcp_output+0x37a>
    goto output_done;
 80151e4:	bf00      	nop
 80151e6:	e002      	b.n	80151ee <tcp_output+0x37a>
    goto output_done;
 80151e8:	bf00      	nop
 80151ea:	e000      	b.n	80151ee <tcp_output+0x37a>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80151ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	8b5b      	ldrh	r3, [r3, #26]
 80151f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80151f6:	b29a      	uxth	r2, r3
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80151fc:	2300      	movs	r3, #0
}
 80151fe:	4618      	mov	r0, r3
 8015200:	3728      	adds	r7, #40	; 0x28
 8015202:	46bd      	mov	sp, r7
 8015204:	bdb0      	pop	{r4, r5, r7, pc}
 8015206:	bf00      	nop

08015208 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015208:	b480      	push	{r7}
 801520a:	b083      	sub	sp, #12
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	7b9b      	ldrb	r3, [r3, #14]
 8015216:	2b01      	cmp	r3, #1
 8015218:	d001      	beq.n	801521e <tcp_output_segment_busy+0x16>
    /* other reference found */
    return 1;
 801521a:	2301      	movs	r3, #1
 801521c:	e000      	b.n	8015220 <tcp_output_segment_busy+0x18>
  }
  /* no other references found */
  return 0;
 801521e:	2300      	movs	r3, #0
}
 8015220:	4618      	mov	r0, r3
 8015222:	370c      	adds	r7, #12
 8015224:	46bd      	mov	sp, r7
 8015226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522a:	4770      	bx	lr

0801522c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801522c:	b5b0      	push	{r4, r5, r7, lr}
 801522e:	b08c      	sub	sp, #48	; 0x30
 8015230:	af04      	add	r7, sp, #16
 8015232:	60f8      	str	r0, [r7, #12]
 8015234:	60b9      	str	r1, [r7, #8]
 8015236:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);

  if (tcp_output_segment_busy(seg)) {
 8015238:	68f8      	ldr	r0, [r7, #12]
 801523a:	f7ff ffe5 	bl	8015208 <tcp_output_segment_busy>
 801523e:	4603      	mov	r3, r0
 8015240:	2b00      	cmp	r3, #0
 8015242:	d001      	beq.n	8015248 <tcp_output_segment+0x1c>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015244:	2300      	movs	r3, #0
 8015246:	e0a5      	b.n	8015394 <tcp_output_segment+0x168>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	691c      	ldr	r4, [r3, #16]
 8015250:	4610      	mov	r0, r2
 8015252:	f7fa f96c 	bl	800f52e <lwip_htonl>
 8015256:	4603      	mov	r3, r0
 8015258:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	691c      	ldr	r4, [r3, #16]
 8015262:	4610      	mov	r0, r2
 8015264:	f7fa f94e 	bl	800f504 <lwip_htons>
 8015268:	4603      	mov	r3, r0
 801526a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801526c:	68bb      	ldr	r3, [r7, #8]
 801526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015270:	68ba      	ldr	r2, [r7, #8]
 8015272:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015274:	441a      	add	r2, r3
 8015276:	68bb      	ldr	r3, [r7, #8]
 8015278:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	691b      	ldr	r3, [r3, #16]
 801527e:	3314      	adds	r3, #20
 8015280:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	7b1b      	ldrb	r3, [r3, #12]
 8015286:	f003 0301 	and.w	r3, r3, #1
 801528a:	2b00      	cmp	r3, #0
 801528c:	d015      	beq.n	80152ba <tcp_output_segment+0x8e>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	3304      	adds	r3, #4
 8015292:	461a      	mov	r2, r3
 8015294:	6879      	ldr	r1, [r7, #4]
 8015296:	f44f 7006 	mov.w	r0, #536	; 0x218
 801529a:	f7fc fddf 	bl	8011e5c <tcp_eff_send_mss_netif>
 801529e:	4603      	mov	r3, r0
 80152a0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80152a2:	8b7b      	ldrh	r3, [r7, #26]
 80152a4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7fa f940 	bl	800f52e <lwip_htonl>
 80152ae:	4602      	mov	r2, r0
 80152b0:	69fb      	ldr	r3, [r7, #28]
 80152b2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80152b4:	69fb      	ldr	r3, [r7, #28]
 80152b6:	3304      	adds	r3, #4
 80152b8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	da02      	bge.n	80152ca <tcp_output_segment+0x9e>
    pcb->rtime = 0;
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	2200      	movs	r2, #0
 80152c8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d10c      	bne.n	80152ec <tcp_output_segment+0xc0>
    pcb->rttest = tcp_ticks;
 80152d2:	4b32      	ldr	r3, [pc, #200]	; (801539c <tcp_output_segment+0x170>)
 80152d4:	681a      	ldr	r2, [r3, #0]
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	691b      	ldr	r3, [r3, #16]
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7fa f924 	bl	800f52e <lwip_htonl>
 80152e6:	4602      	mov	r2, r0
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	691a      	ldr	r2, [r3, #16]
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	685b      	ldr	r3, [r3, #4]
 80152f4:	685b      	ldr	r3, [r3, #4]
 80152f6:	1ad3      	subs	r3, r2, r3
 80152f8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	685b      	ldr	r3, [r3, #4]
 80152fe:	8959      	ldrh	r1, [r3, #10]
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	685b      	ldr	r3, [r3, #4]
 8015304:	8b3a      	ldrh	r2, [r7, #24]
 8015306:	1a8a      	subs	r2, r1, r2
 8015308:	b292      	uxth	r2, r2
 801530a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	685b      	ldr	r3, [r3, #4]
 8015310:	8919      	ldrh	r1, [r3, #8]
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	8b3a      	ldrh	r2, [r7, #24]
 8015318:	1a8a      	subs	r2, r1, r2
 801531a:	b292      	uxth	r2, r2
 801531c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	685b      	ldr	r3, [r3, #4]
 8015322:	68fa      	ldr	r2, [r7, #12]
 8015324:	6912      	ldr	r2, [r2, #16]
 8015326:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	691b      	ldr	r3, [r3, #16]
 801532c:	2200      	movs	r2, #0
 801532e:	741a      	strb	r2, [r3, #16]
 8015330:	2200      	movs	r2, #0
 8015332:	745a      	strb	r2, [r3, #17]
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801533c:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801533e:	68bd      	ldr	r5, [r7, #8]
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8015344:	68fa      	ldr	r2, [r7, #12]
 8015346:	6914      	ldr	r4, [r2, #16]
 8015348:	9300      	str	r3, [sp, #0]
 801534a:	462b      	mov	r3, r5
 801534c:	460a      	mov	r2, r1
 801534e:	2106      	movs	r1, #6
 8015350:	f7fa fab4 	bl	800f8bc <ip_chksum_pseudo>
 8015354:	4603      	mov	r3, r0
 8015356:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8015358:	4b11      	ldr	r3, [pc, #68]	; (80153a0 <tcp_output_segment+0x174>)
 801535a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 801535e:	3301      	adds	r3, #1
 8015360:	b29a      	uxth	r2, r3
 8015362:	4b0f      	ldr	r3, [pc, #60]	; (80153a0 <tcp_output_segment+0x174>)
 8015364:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	6858      	ldr	r0, [r3, #4]
 801536c:	68b9      	ldr	r1, [r7, #8]
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	1d1c      	adds	r4, r3, #4
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	7add      	ldrb	r5, [r3, #11]
 8015376:	68bb      	ldr	r3, [r7, #8]
 8015378:	7a9b      	ldrb	r3, [r3, #10]
 801537a:	687a      	ldr	r2, [r7, #4]
 801537c:	9202      	str	r2, [sp, #8]
 801537e:	2206      	movs	r2, #6
 8015380:	9201      	str	r2, [sp, #4]
 8015382:	9300      	str	r3, [sp, #0]
 8015384:	462b      	mov	r3, r5
 8015386:	4622      	mov	r2, r4
 8015388:	f004 fa0a 	bl	80197a0 <ip4_output_if>
 801538c:	4603      	mov	r3, r0
 801538e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015390:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015394:	4618      	mov	r0, r3
 8015396:	3720      	adds	r7, #32
 8015398:	46bd      	mov	sp, r7
 801539a:	bdb0      	pop	{r4, r5, r7, pc}
 801539c:	2000783c 	.word	0x2000783c
 80153a0:	20007794 	.word	0x20007794

080153a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80153a4:	b5b0      	push	{r4, r5, r7, lr}
 80153a6:	b084      	sub	sp, #16
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d102      	bne.n	80153ba <tcp_rexmit_rto_prepare+0x16>
    return ERR_VAL;
 80153b4:	f06f 0305 	mvn.w	r3, #5
 80153b8:	e059      	b.n	801546e <tcp_rexmit_rto_prepare+0xca>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153be:	60fb      	str	r3, [r7, #12]
 80153c0:	e00b      	b.n	80153da <tcp_rexmit_rto_prepare+0x36>
    if (tcp_output_segment_busy(seg)) {
 80153c2:	68f8      	ldr	r0, [r7, #12]
 80153c4:	f7ff ff20 	bl	8015208 <tcp_output_segment_busy>
 80153c8:	4603      	mov	r3, r0
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d002      	beq.n	80153d4 <tcp_rexmit_rto_prepare+0x30>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80153ce:	f06f 0305 	mvn.w	r3, #5
 80153d2:	e04c      	b.n	801546e <tcp_rexmit_rto_prepare+0xca>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	60fb      	str	r3, [r7, #12]
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d1ef      	bne.n	80153c2 <tcp_rexmit_rto_prepare+0x1e>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80153e2:	68f8      	ldr	r0, [r7, #12]
 80153e4:	f7ff ff10 	bl	8015208 <tcp_output_segment_busy>
 80153e8:	4603      	mov	r3, r0
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d002      	beq.n	80153f4 <tcp_rexmit_rto_prepare+0x50>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80153ee:	f06f 0305 	mvn.w	r3, #5
 80153f2:	e03c      	b.n	801546e <tcp_rexmit_rto_prepare+0xca>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015400:	2b00      	cmp	r3, #0
 8015402:	d104      	bne.n	801540e <tcp_rexmit_rto_prepare+0x6a>
    pcb->unsent_oversize = seg->oversize_left;
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	895a      	ldrh	r2, [r3, #10]
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2200      	movs	r2, #0
 801541a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	8b5b      	ldrh	r3, [r3, #26]
 8015420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015424:	b29a      	uxth	r2, r3
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	691b      	ldr	r3, [r3, #16]
 801542e:	685b      	ldr	r3, [r3, #4]
 8015430:	4618      	mov	r0, r3
 8015432:	f7fa f87c 	bl	800f52e <lwip_htonl>
 8015436:	4604      	mov	r4, r0
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	891b      	ldrh	r3, [r3, #8]
 801543c:	461d      	mov	r5, r3
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	691b      	ldr	r3, [r3, #16]
 8015442:	899b      	ldrh	r3, [r3, #12]
 8015444:	b29b      	uxth	r3, r3
 8015446:	4618      	mov	r0, r3
 8015448:	f7fa f85c 	bl	800f504 <lwip_htons>
 801544c:	4603      	mov	r3, r0
 801544e:	b2db      	uxtb	r3, r3
 8015450:	f003 0303 	and.w	r3, r3, #3
 8015454:	2b00      	cmp	r3, #0
 8015456:	d001      	beq.n	801545c <tcp_rexmit_rto_prepare+0xb8>
 8015458:	2301      	movs	r3, #1
 801545a:	e000      	b.n	801545e <tcp_rexmit_rto_prepare+0xba>
 801545c:	2300      	movs	r3, #0
 801545e:	442b      	add	r3, r5
 8015460:	18e2      	adds	r2, r4, r3
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2200      	movs	r2, #0
 801546a:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801546c:	2300      	movs	r3, #0
}
 801546e:	4618      	mov	r0, r3
 8015470:	3710      	adds	r7, #16
 8015472:	46bd      	mov	sp, r7
 8015474:	bdb0      	pop	{r4, r5, r7, pc}

08015476 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015476:	b580      	push	{r7, lr}
 8015478:	b082      	sub	sp, #8
 801547a:	af00      	add	r7, sp, #0
 801547c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015484:	2bff      	cmp	r3, #255	; 0xff
 8015486:	d007      	beq.n	8015498 <tcp_rexmit_rto_commit+0x22>
    ++pcb->nrtx;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801548e:	3301      	adds	r3, #1
 8015490:	b2da      	uxtb	r2, r3
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f7ff fceb 	bl	8014e74 <tcp_output>
}
 801549e:	bf00      	nop
 80154a0:	3708      	adds	r7, #8
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}

080154a6 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80154a6:	b580      	push	{r7, lr}
 80154a8:	b082      	sub	sp, #8
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80154ae:	6878      	ldr	r0, [r7, #4]
 80154b0:	f7ff ff78 	bl	80153a4 <tcp_rexmit_rto_prepare>
 80154b4:	4603      	mov	r3, r0
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d102      	bne.n	80154c0 <tcp_rexmit_rto+0x1a>
    tcp_rexmit_rto_commit(pcb);
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f7ff ffdb 	bl	8015476 <tcp_rexmit_rto_commit>
  }
}
 80154c0:	bf00      	nop
 80154c2:	3708      	adds	r7, #8
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}

080154c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80154c8:	b590      	push	{r4, r7, lr}
 80154ca:	b085      	sub	sp, #20
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d102      	bne.n	80154de <tcp_rexmit+0x16>
    return ERR_VAL;
 80154d8:	f06f 0305 	mvn.w	r3, #5
 80154dc:	e04c      	b.n	8015578 <tcp_rexmit+0xb0>
  }

  seg = pcb->unacked;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80154e2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80154e4:	68b8      	ldr	r0, [r7, #8]
 80154e6:	f7ff fe8f 	bl	8015208 <tcp_output_segment_busy>
 80154ea:	4603      	mov	r3, r0
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d002      	beq.n	80154f6 <tcp_rexmit+0x2e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80154f0:	f06f 0305 	mvn.w	r3, #5
 80154f4:	e040      	b.n	8015578 <tcp_rexmit+0xb0>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	681a      	ldr	r2, [r3, #0]
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	336c      	adds	r3, #108	; 0x6c
 8015502:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015504:	e002      	b.n	801550c <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d011      	beq.n	8015538 <tcp_rexmit+0x70>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	691b      	ldr	r3, [r3, #16]
 801551a:	685b      	ldr	r3, [r3, #4]
 801551c:	4618      	mov	r0, r3
 801551e:	f7fa f806 	bl	800f52e <lwip_htonl>
 8015522:	4604      	mov	r4, r0
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	691b      	ldr	r3, [r3, #16]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	4618      	mov	r0, r3
 801552c:	f7f9 ffff 	bl	800f52e <lwip_htonl>
 8015530:	4603      	mov	r3, r0
 8015532:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015534:	2b00      	cmp	r3, #0
 8015536:	dbe6      	blt.n	8015506 <tcp_rexmit+0x3e>
  }
  seg->next = *cur_seg;
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	68ba      	ldr	r2, [r7, #8]
 8015544:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015546:	68bb      	ldr	r3, [r7, #8]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d103      	bne.n	8015556 <tcp_rexmit+0x8e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	2200      	movs	r2, #0
 8015552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801555c:	2bff      	cmp	r3, #255	; 0xff
 801555e:	d007      	beq.n	8015570 <tcp_rexmit+0xa8>
    ++pcb->nrtx;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015566:	3301      	adds	r3, #1
 8015568:	b2da      	uxtb	r2, r3
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	2200      	movs	r2, #0
 8015574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015576:	2300      	movs	r3, #0
}
 8015578:	4618      	mov	r0, r3
 801557a:	3714      	adds	r7, #20
 801557c:	46bd      	mov	sp, r7
 801557e:	bd90      	pop	{r4, r7, pc}

08015580 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801558c:	2b00      	cmp	r3, #0
 801558e:	d044      	beq.n	801561a <tcp_rexmit_fast+0x9a>
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	8b5b      	ldrh	r3, [r3, #26]
 8015594:	f003 0304 	and.w	r3, r3, #4
 8015598:	2b00      	cmp	r3, #0
 801559a:	d13e      	bne.n	801561a <tcp_rexmit_fast+0x9a>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f7ff ff93 	bl	80154c8 <tcp_rexmit>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d138      	bne.n	801561a <tcp_rexmit_fast+0x9a>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80155b4:	4293      	cmp	r3, r2
 80155b6:	bf28      	it	cs
 80155b8:	4613      	movcs	r3, r2
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	0fda      	lsrs	r2, r3, #31
 80155be:	4413      	add	r3, r2
 80155c0:	105b      	asrs	r3, r3, #1
 80155c2:	b29a      	uxth	r2, r3
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80155d0:	461a      	mov	r2, r3
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155d6:	005b      	lsls	r3, r3, #1
 80155d8:	429a      	cmp	r2, r3
 80155da:	d206      	bcs.n	80155ea <tcp_rexmit_fast+0x6a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155e0:	005b      	lsls	r3, r3, #1
 80155e2:	b29a      	uxth	r2, r3
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155f4:	4619      	mov	r1, r3
 80155f6:	0049      	lsls	r1, r1, #1
 80155f8:	440b      	add	r3, r1
 80155fa:	b29b      	uxth	r3, r3
 80155fc:	4413      	add	r3, r2
 80155fe:	b29a      	uxth	r2, r3
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	8b5b      	ldrh	r3, [r3, #26]
 801560a:	f043 0304 	orr.w	r3, r3, #4
 801560e:	b29a      	uxth	r2, r3
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2200      	movs	r2, #0
 8015618:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801561a:	bf00      	nop
 801561c:	3708      	adds	r7, #8
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}

08015622 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015622:	b580      	push	{r7, lr}
 8015624:	b086      	sub	sp, #24
 8015626:	af00      	add	r7, sp, #0
 8015628:	60f8      	str	r0, [r7, #12]
 801562a:	607b      	str	r3, [r7, #4]
 801562c:	460b      	mov	r3, r1
 801562e:	817b      	strh	r3, [r7, #10]
 8015630:	4613      	mov	r3, r2
 8015632:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015634:	897a      	ldrh	r2, [r7, #10]
 8015636:	893b      	ldrh	r3, [r7, #8]
 8015638:	4413      	add	r3, r2
 801563a:	b29b      	uxth	r3, r3
 801563c:	3314      	adds	r3, #20
 801563e:	b29b      	uxth	r3, r3
 8015640:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015644:	4619      	mov	r1, r3
 8015646:	2024      	movs	r0, #36	; 0x24
 8015648:	f7fa fd12 	bl	8010070 <pbuf_alloc>
 801564c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d040      	beq.n	80156d6 <tcp_output_alloc_header_common+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	685b      	ldr	r3, [r3, #4]
 8015658:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801565a:	8c3b      	ldrh	r3, [r7, #32]
 801565c:	4618      	mov	r0, r3
 801565e:	f7f9 ff51 	bl	800f504 <lwip_htons>
 8015662:	4603      	mov	r3, r0
 8015664:	461a      	mov	r2, r3
 8015666:	693b      	ldr	r3, [r7, #16]
 8015668:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801566a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801566c:	4618      	mov	r0, r3
 801566e:	f7f9 ff49 	bl	800f504 <lwip_htons>
 8015672:	4603      	mov	r3, r0
 8015674:	461a      	mov	r2, r3
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801567a:	693b      	ldr	r3, [r7, #16]
 801567c:	687a      	ldr	r2, [r7, #4]
 801567e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015680:	68f8      	ldr	r0, [r7, #12]
 8015682:	f7f9 ff54 	bl	800f52e <lwip_htonl>
 8015686:	4602      	mov	r2, r0
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801568c:	897b      	ldrh	r3, [r7, #10]
 801568e:	089b      	lsrs	r3, r3, #2
 8015690:	b29b      	uxth	r3, r3
 8015692:	3305      	adds	r3, #5
 8015694:	b29b      	uxth	r3, r3
 8015696:	031b      	lsls	r3, r3, #12
 8015698:	b29a      	uxth	r2, r3
 801569a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801569e:	b29b      	uxth	r3, r3
 80156a0:	4313      	orrs	r3, r2
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7f9 ff2d 	bl	800f504 <lwip_htons>
 80156aa:	4603      	mov	r3, r0
 80156ac:	461a      	mov	r2, r3
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80156b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80156b4:	4618      	mov	r0, r3
 80156b6:	f7f9 ff25 	bl	800f504 <lwip_htons>
 80156ba:	4603      	mov	r3, r0
 80156bc:	461a      	mov	r2, r3
 80156be:	693b      	ldr	r3, [r7, #16]
 80156c0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	2200      	movs	r2, #0
 80156c6:	741a      	strb	r2, [r3, #16]
 80156c8:	2200      	movs	r2, #0
 80156ca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80156cc:	693b      	ldr	r3, [r7, #16]
 80156ce:	2200      	movs	r2, #0
 80156d0:	749a      	strb	r2, [r3, #18]
 80156d2:	2200      	movs	r2, #0
 80156d4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80156d6:	697b      	ldr	r3, [r7, #20]
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3718      	adds	r7, #24
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}

080156e0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80156e0:	b5b0      	push	{r4, r5, r7, lr}
 80156e2:	b08a      	sub	sp, #40	; 0x28
 80156e4:	af04      	add	r7, sp, #16
 80156e6:	60f8      	str	r0, [r7, #12]
 80156e8:	607b      	str	r3, [r7, #4]
 80156ea:	460b      	mov	r3, r1
 80156ec:	817b      	strh	r3, [r7, #10]
 80156ee:	4613      	mov	r3, r2
 80156f0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	8adb      	ldrh	r3, [r3, #22]
 80156fa:	68fa      	ldr	r2, [r7, #12]
 80156fc:	8b12      	ldrh	r2, [r2, #24]
 80156fe:	68f9      	ldr	r1, [r7, #12]
 8015700:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015702:	893d      	ldrh	r5, [r7, #8]
 8015704:	897c      	ldrh	r4, [r7, #10]
 8015706:	9103      	str	r1, [sp, #12]
 8015708:	2110      	movs	r1, #16
 801570a:	9102      	str	r1, [sp, #8]
 801570c:	9201      	str	r2, [sp, #4]
 801570e:	9300      	str	r3, [sp, #0]
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	462a      	mov	r2, r5
 8015714:	4621      	mov	r1, r4
 8015716:	f7ff ff84 	bl	8015622 <tcp_output_alloc_header_common>
 801571a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801571c:	697b      	ldr	r3, [r7, #20]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d006      	beq.n	8015730 <tcp_output_alloc_header+0x50>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015726:	68fa      	ldr	r2, [r7, #12]
 8015728:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801572a:	441a      	add	r2, r3
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015730:	697b      	ldr	r3, [r7, #20]
}
 8015732:	4618      	mov	r0, r3
 8015734:	3718      	adds	r7, #24
 8015736:	46bd      	mov	sp, r7
 8015738:	bdb0      	pop	{r4, r5, r7, pc}

0801573a <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801573a:	b480      	push	{r7}
 801573c:	b089      	sub	sp, #36	; 0x24
 801573e:	af00      	add	r7, sp, #0
 8015740:	60f8      	str	r0, [r7, #12]
 8015742:	60b9      	str	r1, [r7, #8]
 8015744:	4611      	mov	r1, r2
 8015746:	461a      	mov	r2, r3
 8015748:	460b      	mov	r3, r1
 801574a:	71fb      	strb	r3, [r7, #7]
 801574c:	4613      	mov	r3, r2
 801574e:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015750:	2300      	movs	r3, #0
 8015752:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	685b      	ldr	r3, [r3, #4]
 8015758:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801575a:	69bb      	ldr	r3, [r7, #24]
 801575c:	3314      	adds	r3, #20
 801575e:	617b      	str	r3, [r7, #20]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015760:	bf00      	nop
 8015762:	3724      	adds	r7, #36	; 0x24
 8015764:	46bd      	mov	sp, r7
 8015766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576a:	4770      	bx	lr

0801576c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b08c      	sub	sp, #48	; 0x30
 8015770:	af04      	add	r7, sp, #16
 8015772:	60f8      	str	r0, [r7, #12]
 8015774:	60b9      	str	r1, [r7, #8]
 8015776:	607a      	str	r2, [r7, #4]
 8015778:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);

  netif = tcp_route(pcb, src, dst);
 801577a:	683a      	ldr	r2, [r7, #0]
 801577c:	6879      	ldr	r1, [r7, #4]
 801577e:	68f8      	ldr	r0, [r7, #12]
 8015780:	f7fe fd74 	bl	801426c <tcp_route>
 8015784:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8015786:	69bb      	ldr	r3, [r7, #24]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d102      	bne.n	8015792 <tcp_output_control_segment+0x26>
    err = ERR_RTE;
 801578c:	23fc      	movs	r3, #252	; 0xfc
 801578e:	77fb      	strb	r3, [r7, #31]
 8015790:	e034      	b.n	80157fc <tcp_output_control_segment+0x90>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	685b      	ldr	r3, [r3, #4]
 8015796:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8015798:	68bb      	ldr	r3, [r7, #8]
 801579a:	891a      	ldrh	r2, [r3, #8]
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	9300      	str	r3, [sp, #0]
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2106      	movs	r1, #6
 80157a4:	68b8      	ldr	r0, [r7, #8]
 80157a6:	f7fa f889 	bl	800f8bc <ip_chksum_pseudo>
 80157aa:	4603      	mov	r3, r0
 80157ac:	461a      	mov	r2, r3
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d006      	beq.n	80157c6 <tcp_output_control_segment+0x5a>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	7adb      	ldrb	r3, [r3, #11]
 80157bc:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	7a9b      	ldrb	r3, [r3, #10]
 80157c2:	777b      	strb	r3, [r7, #29]
 80157c4:	e003      	b.n	80157ce <tcp_output_control_segment+0x62>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80157c6:	23ff      	movs	r3, #255	; 0xff
 80157c8:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 80157ca:	2300      	movs	r3, #0
 80157cc:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
 80157ce:	4b10      	ldr	r3, [pc, #64]	; (8015810 <tcp_output_control_segment+0xa4>)
 80157d0:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80157d4:	3301      	adds	r3, #1
 80157d6:	b29a      	uxth	r2, r3
 80157d8:	4b0d      	ldr	r3, [pc, #52]	; (8015810 <tcp_output_control_segment+0xa4>)
 80157da:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80157de:	7fba      	ldrb	r2, [r7, #30]
 80157e0:	69bb      	ldr	r3, [r7, #24]
 80157e2:	9302      	str	r3, [sp, #8]
 80157e4:	2306      	movs	r3, #6
 80157e6:	9301      	str	r3, [sp, #4]
 80157e8:	7f7b      	ldrb	r3, [r7, #29]
 80157ea:	9300      	str	r3, [sp, #0]
 80157ec:	4613      	mov	r3, r2
 80157ee:	683a      	ldr	r2, [r7, #0]
 80157f0:	6879      	ldr	r1, [r7, #4]
 80157f2:	68b8      	ldr	r0, [r7, #8]
 80157f4:	f003 ffd4 	bl	80197a0 <ip4_output_if>
 80157f8:	4603      	mov	r3, r0
 80157fa:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80157fc:	68b8      	ldr	r0, [r7, #8]
 80157fe:	f7fa fe79 	bl	80104f4 <pbuf_free>
  return err;
 8015802:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015806:	4618      	mov	r0, r3
 8015808:	3720      	adds	r7, #32
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
 801580e:	bf00      	nop
 8015810:	20007794 	.word	0x20007794

08015814 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015814:	b590      	push	{r4, r7, lr}
 8015816:	b08b      	sub	sp, #44	; 0x2c
 8015818:	af04      	add	r7, sp, #16
 801581a:	60f8      	str	r0, [r7, #12]
 801581c:	60b9      	str	r1, [r7, #8]
 801581e:	607a      	str	r2, [r7, #4]
 8015820:	603b      	str	r3, [r7, #0]
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015822:	2300      	movs	r3, #0
 8015824:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015826:	f246 0308 	movw	r3, #24584	; 0x6008
 801582a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801582c:	7dfb      	ldrb	r3, [r7, #23]
 801582e:	b29c      	uxth	r4, r3
 8015830:	68b8      	ldr	r0, [r7, #8]
 8015832:	f7f9 fe7c 	bl	800f52e <lwip_htonl>
 8015836:	4602      	mov	r2, r0
 8015838:	8abb      	ldrh	r3, [r7, #20]
 801583a:	9303      	str	r3, [sp, #12]
 801583c:	2314      	movs	r3, #20
 801583e:	9302      	str	r3, [sp, #8]
 8015840:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015842:	9301      	str	r3, [sp, #4]
 8015844:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015846:	9300      	str	r3, [sp, #0]
 8015848:	4613      	mov	r3, r2
 801584a:	2200      	movs	r2, #0
 801584c:	4621      	mov	r1, r4
 801584e:	6878      	ldr	r0, [r7, #4]
 8015850:	f7ff fee7 	bl	8015622 <tcp_output_alloc_header_common>
 8015854:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015856:	693b      	ldr	r3, [r7, #16]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d00c      	beq.n	8015876 <tcp_rst+0x62>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801585c:	7dfb      	ldrb	r3, [r7, #23]
 801585e:	2200      	movs	r2, #0
 8015860:	6939      	ldr	r1, [r7, #16]
 8015862:	68f8      	ldr	r0, [r7, #12]
 8015864:	f7ff ff69 	bl	801573a <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586a:	683a      	ldr	r2, [r7, #0]
 801586c:	6939      	ldr	r1, [r7, #16]
 801586e:	68f8      	ldr	r0, [r7, #12]
 8015870:	f7ff ff7c 	bl	801576c <tcp_output_control_segment>
 8015874:	e000      	b.n	8015878 <tcp_rst+0x64>
    return;
 8015876:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015878:	371c      	adds	r7, #28
 801587a:	46bd      	mov	sp, r7
 801587c:	bd90      	pop	{r4, r7, pc}

0801587e <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801587e:	b590      	push	{r4, r7, lr}
 8015880:	b087      	sub	sp, #28
 8015882:	af00      	add	r7, sp, #0
 8015884:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015886:	2300      	movs	r3, #0
 8015888:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801588a:	2300      	movs	r3, #0
 801588c:	75bb      	strb	r3, [r7, #22]
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801588e:	7dfb      	ldrb	r3, [r7, #23]
 8015890:	009b      	lsls	r3, r3, #2
 8015892:	b2db      	uxtb	r3, r3
 8015894:	f003 0304 	and.w	r3, r3, #4
 8015898:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801589a:	7d7b      	ldrb	r3, [r7, #21]
 801589c:	b29c      	uxth	r4, r3
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158a2:	4618      	mov	r0, r3
 80158a4:	f7f9 fe43 	bl	800f52e <lwip_htonl>
 80158a8:	4603      	mov	r3, r0
 80158aa:	2200      	movs	r2, #0
 80158ac:	4621      	mov	r1, r4
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f7ff ff16 	bl	80156e0 <tcp_output_alloc_header>
 80158b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d109      	bne.n	80158d0 <tcp_send_empty_ack+0x52>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	8b5b      	ldrh	r3, [r3, #26]
 80158c0:	f043 0303 	orr.w	r3, r3, #3
 80158c4:	b29a      	uxth	r2, r3
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80158ca:	f06f 0301 	mvn.w	r3, #1
 80158ce:	e023      	b.n	8015918 <tcp_send_empty_ack+0x9a>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80158d0:	7dbb      	ldrb	r3, [r7, #22]
 80158d2:	7dfa      	ldrb	r2, [r7, #23]
 80158d4:	6939      	ldr	r1, [r7, #16]
 80158d6:	6878      	ldr	r0, [r7, #4]
 80158d8:	f7ff ff2f 	bl	801573a <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80158dc:	687a      	ldr	r2, [r7, #4]
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	3304      	adds	r3, #4
 80158e2:	6939      	ldr	r1, [r7, #16]
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f7ff ff41 	bl	801576c <tcp_output_control_segment>
 80158ea:	4603      	mov	r3, r0
 80158ec:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80158ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d007      	beq.n	8015906 <tcp_send_empty_ack+0x88>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	8b5b      	ldrh	r3, [r3, #26]
 80158fa:	f043 0303 	orr.w	r3, r3, #3
 80158fe:	b29a      	uxth	r2, r3
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	835a      	strh	r2, [r3, #26]
 8015904:	e006      	b.n	8015914 <tcp_send_empty_ack+0x96>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	8b5b      	ldrh	r3, [r3, #26]
 801590a:	f023 0303 	bic.w	r3, r3, #3
 801590e:	b29a      	uxth	r2, r3
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015918:	4618      	mov	r0, r3
 801591a:	371c      	adds	r7, #28
 801591c:	46bd      	mov	sp, r7
 801591e:	bd90      	pop	{r4, r7, pc}

08015920 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015920:	b590      	push	{r4, r7, lr}
 8015922:	b087      	sub	sp, #28
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015928:	2300      	movs	r3, #0
 801592a:	73fb      	strb	r3, [r7, #15]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801592c:	7bfb      	ldrb	r3, [r7, #15]
 801592e:	b29c      	uxth	r4, r3
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015934:	3b01      	subs	r3, #1
 8015936:	4618      	mov	r0, r3
 8015938:	f7f9 fdf9 	bl	800f52e <lwip_htonl>
 801593c:	4603      	mov	r3, r0
 801593e:	2200      	movs	r2, #0
 8015940:	4621      	mov	r1, r4
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7ff fecc 	bl	80156e0 <tcp_output_alloc_header>
 8015948:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801594a:	693b      	ldr	r3, [r7, #16]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d102      	bne.n	8015956 <tcp_keepalive+0x36>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015954:	e010      	b.n	8015978 <tcp_keepalive+0x58>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015956:	7bfb      	ldrb	r3, [r7, #15]
 8015958:	2200      	movs	r2, #0
 801595a:	6939      	ldr	r1, [r7, #16]
 801595c:	6878      	ldr	r0, [r7, #4]
 801595e:	f7ff feec 	bl	801573a <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015962:	687a      	ldr	r2, [r7, #4]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	3304      	adds	r3, #4
 8015968:	6939      	ldr	r1, [r7, #16]
 801596a:	6878      	ldr	r0, [r7, #4]
 801596c:	f7ff fefe 	bl	801576c <tcp_output_control_segment>
 8015970:	4603      	mov	r3, r0
 8015972:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015974:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015978:	4618      	mov	r0, r3
 801597a:	371c      	adds	r7, #28
 801597c:	46bd      	mov	sp, r7
 801597e:	bd90      	pop	{r4, r7, pc}

08015980 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015980:	b590      	push	{r4, r7, lr}
 8015982:	b08b      	sub	sp, #44	; 0x2c
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015988:	2300      	movs	r3, #0
 801598a:	74fb      	strb	r3, [r7, #19]
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015990:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 8015992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015994:	2b00      	cmp	r3, #0
 8015996:	d101      	bne.n	801599c <tcp_zero_window_probe+0x1c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015998:	2300      	movs	r3, #0
 801599a:	e087      	b.n	8015aac <tcp_zero_window_probe+0x12c>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80159a2:	2bff      	cmp	r3, #255	; 0xff
 80159a4:	d007      	beq.n	80159b6 <tcp_zero_window_probe+0x36>
    ++pcb->persist_probe;
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80159ac:	3301      	adds	r3, #1
 80159ae:	b2da      	uxtb	r2, r3
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80159b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b8:	691b      	ldr	r3, [r3, #16]
 80159ba:	899b      	ldrh	r3, [r3, #12]
 80159bc:	b29b      	uxth	r3, r3
 80159be:	4618      	mov	r0, r3
 80159c0:	f7f9 fda0 	bl	800f504 <lwip_htons>
 80159c4:	4603      	mov	r3, r0
 80159c6:	b2db      	uxtb	r3, r3
 80159c8:	f003 0301 	and.w	r3, r3, #1
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d005      	beq.n	80159dc <tcp_zero_window_probe+0x5c>
 80159d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d2:	891b      	ldrh	r3, [r3, #8]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d101      	bne.n	80159dc <tcp_zero_window_probe+0x5c>
 80159d8:	2301      	movs	r3, #1
 80159da:	e000      	b.n	80159de <tcp_zero_window_probe+0x5e>
 80159dc:	2300      	movs	r3, #0
 80159de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80159e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	bf0c      	ite	eq
 80159ea:	2301      	moveq	r3, #1
 80159ec:	2300      	movne	r3, #0
 80159ee:	b2db      	uxtb	r3, r3
 80159f0:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80159f2:	7cfb      	ldrb	r3, [r7, #19]
 80159f4:	b299      	uxth	r1, r3
 80159f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f8:	691b      	ldr	r3, [r3, #16]
 80159fa:	685b      	ldr	r3, [r3, #4]
 80159fc:	8c3a      	ldrh	r2, [r7, #32]
 80159fe:	6878      	ldr	r0, [r7, #4]
 8015a00:	f7ff fe6e 	bl	80156e0 <tcp_output_alloc_header>
 8015a04:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8015a06:	69fb      	ldr	r3, [r7, #28]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d102      	bne.n	8015a12 <tcp_zero_window_probe+0x92>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a10:	e04c      	b.n	8015aac <tcp_zero_window_probe+0x12c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015a12:	69fb      	ldr	r3, [r7, #28]
 8015a14:	685b      	ldr	r3, [r3, #4]
 8015a16:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8015a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d011      	beq.n	8015a44 <tcp_zero_window_probe+0xc4>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015a20:	69bb      	ldr	r3, [r7, #24]
 8015a22:	899b      	ldrh	r3, [r3, #12]
 8015a24:	b29b      	uxth	r3, r3
 8015a26:	b21b      	sxth	r3, r3
 8015a28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015a2c:	b21c      	sxth	r4, r3
 8015a2e:	2011      	movs	r0, #17
 8015a30:	f7f9 fd68 	bl	800f504 <lwip_htons>
 8015a34:	4603      	mov	r3, r0
 8015a36:	b21b      	sxth	r3, r3
 8015a38:	4323      	orrs	r3, r4
 8015a3a:	b21b      	sxth	r3, r3
 8015a3c:	b29a      	uxth	r2, r3
 8015a3e:	69bb      	ldr	r3, [r7, #24]
 8015a40:	819a      	strh	r2, [r3, #12]
 8015a42:	e010      	b.n	8015a66 <tcp_zero_window_probe+0xe6>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015a44:	69fb      	ldr	r3, [r7, #28]
 8015a46:	685b      	ldr	r3, [r3, #4]
 8015a48:	3314      	adds	r3, #20
 8015a4a:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a4e:	6858      	ldr	r0, [r3, #4]
 8015a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	891a      	ldrh	r2, [r3, #8]
 8015a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a58:	891b      	ldrh	r3, [r3, #8]
 8015a5a:	1ad3      	subs	r3, r2, r3
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	2201      	movs	r2, #1
 8015a60:	6979      	ldr	r1, [r7, #20]
 8015a62:	f7fa fe8d 	bl	8010780 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a68:	691b      	ldr	r3, [r3, #16]
 8015a6a:	685b      	ldr	r3, [r3, #4]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7f9 fd5e 	bl	800f52e <lwip_htonl>
 8015a72:	4603      	mov	r3, r0
 8015a74:	3301      	adds	r3, #1
 8015a76:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	1ad3      	subs	r3, r2, r3
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	da02      	bge.n	8015a8a <tcp_zero_window_probe+0x10a>
    pcb->snd_nxt = snd_nxt;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	68fa      	ldr	r2, [r7, #12]
 8015a88:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015a8a:	7cfb      	ldrb	r3, [r7, #19]
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	69f9      	ldr	r1, [r7, #28]
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f7ff fe52 	bl	801573a <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015a96:	687a      	ldr	r2, [r7, #4]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	3304      	adds	r3, #4
 8015a9c:	69f9      	ldr	r1, [r7, #28]
 8015a9e:	6878      	ldr	r0, [r7, #4]
 8015aa0:	f7ff fe64 	bl	801576c <tcp_output_control_segment>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015aa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	372c      	adds	r7, #44	; 0x2c
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd90      	pop	{r4, r7, pc}

08015ab4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015abc:	f7fa ff0e 	bl	80108dc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015ac0:	4b0a      	ldr	r3, [pc, #40]	; (8015aec <tcpip_tcp_timer+0x38>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d103      	bne.n	8015ad0 <tcpip_tcp_timer+0x1c>
 8015ac8:	4b09      	ldr	r3, [pc, #36]	; (8015af0 <tcpip_tcp_timer+0x3c>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d005      	beq.n	8015adc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	4908      	ldr	r1, [pc, #32]	; (8015af4 <tcpip_tcp_timer+0x40>)
 8015ad4:	20fa      	movs	r0, #250	; 0xfa
 8015ad6:	f000 f8e3 	bl	8015ca0 <sys_timeout>
 8015ada:	e003      	b.n	8015ae4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015adc:	4b06      	ldr	r3, [pc, #24]	; (8015af8 <tcpip_tcp_timer+0x44>)
 8015ade:	2200      	movs	r2, #0
 8015ae0:	601a      	str	r2, [r3, #0]
  }
}
 8015ae2:	bf00      	nop
 8015ae4:	bf00      	nop
 8015ae6:	3708      	adds	r7, #8
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}
 8015aec:	20007848 	.word	0x20007848
 8015af0:	2000784c 	.word	0x2000784c
 8015af4:	08015ab5 	.word	0x08015ab5
 8015af8:	20007898 	.word	0x20007898

08015afc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015b00:	4b0a      	ldr	r3, [pc, #40]	; (8015b2c <tcp_timer_needed+0x30>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d10f      	bne.n	8015b28 <tcp_timer_needed+0x2c>
 8015b08:	4b09      	ldr	r3, [pc, #36]	; (8015b30 <tcp_timer_needed+0x34>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d103      	bne.n	8015b18 <tcp_timer_needed+0x1c>
 8015b10:	4b08      	ldr	r3, [pc, #32]	; (8015b34 <tcp_timer_needed+0x38>)
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d007      	beq.n	8015b28 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015b18:	4b04      	ldr	r3, [pc, #16]	; (8015b2c <tcp_timer_needed+0x30>)
 8015b1a:	2201      	movs	r2, #1
 8015b1c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015b1e:	2200      	movs	r2, #0
 8015b20:	4905      	ldr	r1, [pc, #20]	; (8015b38 <tcp_timer_needed+0x3c>)
 8015b22:	20fa      	movs	r0, #250	; 0xfa
 8015b24:	f000 f8bc 	bl	8015ca0 <sys_timeout>
  }
}
 8015b28:	bf00      	nop
 8015b2a:	bd80      	pop	{r7, pc}
 8015b2c:	20007898 	.word	0x20007898
 8015b30:	20007848 	.word	0x20007848
 8015b34:	2000784c 	.word	0x2000784c
 8015b38:	08015ab5 	.word	0x08015ab5

08015b3c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b086      	sub	sp, #24
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	60f8      	str	r0, [r7, #12]
 8015b44:	60b9      	str	r1, [r7, #8]
 8015b46:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015b48:	2007      	movs	r0, #7
 8015b4a:	f7f9 ffbb 	bl	800fac4 <memp_malloc>
 8015b4e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d04a      	beq.n	8015bec <sys_timeout_abs+0xb0>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	2200      	movs	r2, #0
 8015b5a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	68ba      	ldr	r2, [r7, #8]
 8015b60:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	687a      	ldr	r2, [r7, #4]
 8015b66:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015b68:	693b      	ldr	r3, [r7, #16]
 8015b6a:	68fa      	ldr	r2, [r7, #12]
 8015b6c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015b6e:	4b21      	ldr	r3, [pc, #132]	; (8015bf4 <sys_timeout_abs+0xb8>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d103      	bne.n	8015b7e <sys_timeout_abs+0x42>
    next_timeout = timeout;
 8015b76:	4a1f      	ldr	r2, [pc, #124]	; (8015bf4 <sys_timeout_abs+0xb8>)
 8015b78:	693b      	ldr	r3, [r7, #16]
 8015b7a:	6013      	str	r3, [r2, #0]
    return;
 8015b7c:	e037      	b.n	8015bee <sys_timeout_abs+0xb2>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	685a      	ldr	r2, [r3, #4]
 8015b82:	4b1c      	ldr	r3, [pc, #112]	; (8015bf4 <sys_timeout_abs+0xb8>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	1ad3      	subs	r3, r2, r3
 8015b8a:	0fdb      	lsrs	r3, r3, #31
 8015b8c:	f003 0301 	and.w	r3, r3, #1
 8015b90:	b2db      	uxtb	r3, r3
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d007      	beq.n	8015ba6 <sys_timeout_abs+0x6a>
    timeout->next = next_timeout;
 8015b96:	4b17      	ldr	r3, [pc, #92]	; (8015bf4 <sys_timeout_abs+0xb8>)
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015b9e:	4a15      	ldr	r2, [pc, #84]	; (8015bf4 <sys_timeout_abs+0xb8>)
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	6013      	str	r3, [r2, #0]
 8015ba4:	e023      	b.n	8015bee <sys_timeout_abs+0xb2>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015ba6:	4b13      	ldr	r3, [pc, #76]	; (8015bf4 <sys_timeout_abs+0xb8>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	617b      	str	r3, [r7, #20]
 8015bac:	e01a      	b.n	8015be4 <sys_timeout_abs+0xa8>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d00b      	beq.n	8015bce <sys_timeout_abs+0x92>
 8015bb6:	693b      	ldr	r3, [r7, #16]
 8015bb8:	685a      	ldr	r2, [r3, #4]
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	685b      	ldr	r3, [r3, #4]
 8015bc0:	1ad3      	subs	r3, r2, r3
 8015bc2:	0fdb      	lsrs	r3, r3, #31
 8015bc4:	f003 0301 	and.w	r3, r3, #1
 8015bc8:	b2db      	uxtb	r3, r3
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d007      	beq.n	8015bde <sys_timeout_abs+0xa2>
        timeout->next = t->next;
 8015bce:	697b      	ldr	r3, [r7, #20]
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	693b      	ldr	r3, [r7, #16]
 8015bd4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015bd6:	697b      	ldr	r3, [r7, #20]
 8015bd8:	693a      	ldr	r2, [r7, #16]
 8015bda:	601a      	str	r2, [r3, #0]
        break;
 8015bdc:	e007      	b.n	8015bee <sys_timeout_abs+0xb2>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	617b      	str	r3, [r7, #20]
 8015be4:	697b      	ldr	r3, [r7, #20]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d1e1      	bne.n	8015bae <sys_timeout_abs+0x72>
 8015bea:	e000      	b.n	8015bee <sys_timeout_abs+0xb2>
    return;
 8015bec:	bf00      	nop
      }
    }
  }
}
 8015bee:	3718      	adds	r7, #24
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}
 8015bf4:	20007890 	.word	0x20007890

08015bf8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b086      	sub	sp, #24
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	685b      	ldr	r3, [r3, #4]
 8015c08:	4798      	blx	r3

  now = sys_now();
 8015c0a:	f7f0 fe33 	bl	8006874 <sys_now>
 8015c0e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015c10:	697b      	ldr	r3, [r7, #20]
 8015c12:	681a      	ldr	r2, [r3, #0]
 8015c14:	4b0f      	ldr	r3, [pc, #60]	; (8015c54 <lwip_cyclic_timer+0x5c>)
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	4413      	add	r3, r2
 8015c1a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015c1c:	68fa      	ldr	r2, [r7, #12]
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	1ad3      	subs	r3, r2, r3
 8015c22:	0fdb      	lsrs	r3, r3, #31
 8015c24:	f003 0301 	and.w	r3, r3, #1
 8015c28:	b2db      	uxtb	r3, r3
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d009      	beq.n	8015c42 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	4413      	add	r3, r2
 8015c36:	687a      	ldr	r2, [r7, #4]
 8015c38:	4907      	ldr	r1, [pc, #28]	; (8015c58 <lwip_cyclic_timer+0x60>)
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f7ff ff7e 	bl	8015b3c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015c40:	e004      	b.n	8015c4c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	4904      	ldr	r1, [pc, #16]	; (8015c58 <lwip_cyclic_timer+0x60>)
 8015c46:	68f8      	ldr	r0, [r7, #12]
 8015c48:	f7ff ff78 	bl	8015b3c <sys_timeout_abs>
}
 8015c4c:	bf00      	nop
 8015c4e:	3718      	adds	r7, #24
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	20007894 	.word	0x20007894
 8015c58:	08015bf9 	.word	0x08015bf9

08015c5c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b082      	sub	sp, #8
 8015c60:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015c62:	2301      	movs	r3, #1
 8015c64:	607b      	str	r3, [r7, #4]
 8015c66:	e00e      	b.n	8015c86 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015c68:	4a0b      	ldr	r2, [pc, #44]	; (8015c98 <sys_timeouts_init+0x3c>)
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	00db      	lsls	r3, r3, #3
 8015c74:	4a08      	ldr	r2, [pc, #32]	; (8015c98 <sys_timeouts_init+0x3c>)
 8015c76:	4413      	add	r3, r2
 8015c78:	461a      	mov	r2, r3
 8015c7a:	4908      	ldr	r1, [pc, #32]	; (8015c9c <sys_timeouts_init+0x40>)
 8015c7c:	f000 f810 	bl	8015ca0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	3301      	adds	r3, #1
 8015c84:	607b      	str	r3, [r7, #4]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	2b04      	cmp	r3, #4
 8015c8a:	d9ed      	bls.n	8015c68 <sys_timeouts_init+0xc>
  }
}
 8015c8c:	bf00      	nop
 8015c8e:	bf00      	nop
 8015c90:	3708      	adds	r7, #8
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}
 8015c96:	bf00      	nop
 8015c98:	0801d220 	.word	0x0801d220
 8015c9c:	08015bf9 	.word	0x08015bf9

08015ca0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b086      	sub	sp, #24
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	60f8      	str	r0, [r7, #12]
 8015ca8:	60b9      	str	r1, [r7, #8]
 8015caa:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015cac:	f7f0 fde2 	bl	8006874 <sys_now>
 8015cb0:	4602      	mov	r2, r0
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	4413      	add	r3, r2
 8015cb6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015cb8:	687a      	ldr	r2, [r7, #4]
 8015cba:	68b9      	ldr	r1, [r7, #8]
 8015cbc:	6978      	ldr	r0, [r7, #20]
 8015cbe:	f7ff ff3d 	bl	8015b3c <sys_timeout_abs>
#endif
}
 8015cc2:	bf00      	nop
 8015cc4:	3718      	adds	r7, #24
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	bd80      	pop	{r7, pc}
	...

08015ccc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b084      	sub	sp, #16
 8015cd0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015cd2:	f7f0 fdcf 	bl	8006874 <sys_now>
 8015cd6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8015cd8:	4b1a      	ldr	r3, [pc, #104]	; (8015d44 <sys_check_timeouts+0x78>)
 8015cda:	781b      	ldrb	r3, [r3, #0]
 8015cdc:	b2db      	uxtb	r3, r3
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d001      	beq.n	8015ce6 <sys_check_timeouts+0x1a>
 8015ce2:	f7fa f96f 	bl	800ffc4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8015ce6:	4b18      	ldr	r3, [pc, #96]	; (8015d48 <sys_check_timeouts+0x7c>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015cec:	68bb      	ldr	r3, [r7, #8]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d022      	beq.n	8015d38 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	685b      	ldr	r3, [r3, #4]
 8015cf6:	68fa      	ldr	r2, [r7, #12]
 8015cf8:	1ad3      	subs	r3, r2, r3
 8015cfa:	0fdb      	lsrs	r3, r3, #31
 8015cfc:	f003 0301 	and.w	r3, r3, #1
 8015d00:	b2db      	uxtb	r3, r3
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d11a      	bne.n	8015d3c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	4a0f      	ldr	r2, [pc, #60]	; (8015d48 <sys_check_timeouts+0x7c>)
 8015d0c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015d0e:	68bb      	ldr	r3, [r7, #8]
 8015d10:	689b      	ldr	r3, [r3, #8]
 8015d12:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015d14:	68bb      	ldr	r3, [r7, #8]
 8015d16:	68db      	ldr	r3, [r3, #12]
 8015d18:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	4a0b      	ldr	r2, [pc, #44]	; (8015d4c <sys_check_timeouts+0x80>)
 8015d20:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015d22:	68b9      	ldr	r1, [r7, #8]
 8015d24:	2007      	movs	r0, #7
 8015d26:	f7f9 ff09 	bl	800fb3c <memp_free>
    if (handler != NULL) {
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d0d3      	beq.n	8015cd8 <sys_check_timeouts+0xc>
      handler(arg);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	6838      	ldr	r0, [r7, #0]
 8015d34:	4798      	blx	r3
  do {
 8015d36:	e7cf      	b.n	8015cd8 <sys_check_timeouts+0xc>
      return;
 8015d38:	bf00      	nop
 8015d3a:	e000      	b.n	8015d3e <sys_check_timeouts+0x72>
      return;
 8015d3c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015d3e:	3710      	adds	r7, #16
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}
 8015d44:	20007791 	.word	0x20007791
 8015d48:	20007890 	.word	0x20007890
 8015d4c:	20007894 	.word	0x20007894

08015d50 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015d54:	f004 fdb4 	bl	801a8c0 <rand>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015d60:	b29b      	uxth	r3, r3
 8015d62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015d66:	b29a      	uxth	r2, r3
 8015d68:	4b01      	ldr	r3, [pc, #4]	; (8015d70 <udp_init+0x20>)
 8015d6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015d6c:	bf00      	nop
 8015d6e:	bd80      	pop	{r7, pc}
 8015d70:	20000140 	.word	0x20000140

08015d74 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015d74:	b480      	push	{r7}
 8015d76:	b083      	sub	sp, #12
 8015d78:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015d7e:	4b17      	ldr	r3, [pc, #92]	; (8015ddc <udp_new_port+0x68>)
 8015d80:	881b      	ldrh	r3, [r3, #0]
 8015d82:	1c5a      	adds	r2, r3, #1
 8015d84:	b291      	uxth	r1, r2
 8015d86:	4a15      	ldr	r2, [pc, #84]	; (8015ddc <udp_new_port+0x68>)
 8015d88:	8011      	strh	r1, [r2, #0]
 8015d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d8e:	4293      	cmp	r3, r2
 8015d90:	d103      	bne.n	8015d9a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015d92:	4b12      	ldr	r3, [pc, #72]	; (8015ddc <udp_new_port+0x68>)
 8015d94:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015d98:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d9a:	4b11      	ldr	r3, [pc, #68]	; (8015de0 <udp_new_port+0x6c>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	603b      	str	r3, [r7, #0]
 8015da0:	e011      	b.n	8015dc6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	8a5a      	ldrh	r2, [r3, #18]
 8015da6:	4b0d      	ldr	r3, [pc, #52]	; (8015ddc <udp_new_port+0x68>)
 8015da8:	881b      	ldrh	r3, [r3, #0]
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d108      	bne.n	8015dc0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015dae:	88fb      	ldrh	r3, [r7, #6]
 8015db0:	3301      	adds	r3, #1
 8015db2:	80fb      	strh	r3, [r7, #6]
 8015db4:	88fb      	ldrh	r3, [r7, #6]
 8015db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015dba:	d3e0      	bcc.n	8015d7e <udp_new_port+0xa>
        return 0;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	e007      	b.n	8015dd0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	68db      	ldr	r3, [r3, #12]
 8015dc4:	603b      	str	r3, [r7, #0]
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d1ea      	bne.n	8015da2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015dcc:	4b03      	ldr	r3, [pc, #12]	; (8015ddc <udp_new_port+0x68>)
 8015dce:	881b      	ldrh	r3, [r3, #0]
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	370c      	adds	r7, #12
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dda:	4770      	bx	lr
 8015ddc:	20000140 	.word	0x20000140
 8015de0:	2000789c 	.word	0x2000789c

08015de4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015de4:	b480      	push	{r7}
 8015de6:	b085      	sub	sp, #20
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	60f8      	str	r0, [r7, #12]
 8015dec:	60b9      	str	r1, [r7, #8]
 8015dee:	4613      	mov	r3, r2
 8015df0:	71fb      	strb	r3, [r7, #7]

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	7a1b      	ldrb	r3, [r3, #8]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d00b      	beq.n	8015e12 <udp_input_local_match+0x2e>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	7a1a      	ldrb	r2, [r3, #8]
 8015dfe:	4b1e      	ldr	r3, [pc, #120]	; (8015e78 <udp_input_local_match+0x94>)
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015e06:	3301      	adds	r3, #1
 8015e08:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015e0a:	429a      	cmp	r2, r3
 8015e0c:	d001      	beq.n	8015e12 <udp_input_local_match+0x2e>
    return 0;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	e02b      	b.n	8015e6a <udp_input_local_match+0x86>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015e12:	79fb      	ldrb	r3, [r7, #7]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d018      	beq.n	8015e4a <udp_input_local_match+0x66>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d013      	beq.n	8015e46 <udp_input_local_match+0x62>
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d00f      	beq.n	8015e46 <udp_input_local_match+0x62>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015e26:	4b14      	ldr	r3, [pc, #80]	; (8015e78 <udp_input_local_match+0x94>)
 8015e28:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e2e:	d00a      	beq.n	8015e46 <udp_input_local_match+0x62>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	4b10      	ldr	r3, [pc, #64]	; (8015e78 <udp_input_local_match+0x94>)
 8015e36:	695b      	ldr	r3, [r3, #20]
 8015e38:	405a      	eors	r2, r3
 8015e3a:	68bb      	ldr	r3, [r7, #8]
 8015e3c:	3308      	adds	r3, #8
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d110      	bne.n	8015e68 <udp_input_local_match+0x84>
          return 1;
 8015e46:	2301      	movs	r3, #1
 8015e48:	e00f      	b.n	8015e6a <udp_input_local_match+0x86>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d009      	beq.n	8015e64 <udp_input_local_match+0x80>
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d005      	beq.n	8015e64 <udp_input_local_match+0x80>
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	681a      	ldr	r2, [r3, #0]
 8015e5c:	4b06      	ldr	r3, [pc, #24]	; (8015e78 <udp_input_local_match+0x94>)
 8015e5e:	695b      	ldr	r3, [r3, #20]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	d101      	bne.n	8015e68 <udp_input_local_match+0x84>
        return 1;
 8015e64:	2301      	movs	r3, #1
 8015e66:	e000      	b.n	8015e6a <udp_input_local_match+0x86>
      }
  }

  return 0;
 8015e68:	2300      	movs	r3, #0
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3714      	adds	r7, #20
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e74:	4770      	bx	lr
 8015e76:	bf00      	nop
 8015e78:	20007770 	.word	0x20007770

08015e7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015e7c:	b590      	push	{r4, r7, lr}
 8015e7e:	b08d      	sub	sp, #52	; 0x34
 8015e80:	af02      	add	r7, sp, #8
 8015e82:	6078      	str	r0, [r7, #4]
 8015e84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015e86:	2300      	movs	r3, #0
 8015e88:	77fb      	strb	r3, [r7, #31]
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 8015e8a:	4b95      	ldr	r3, [pc, #596]	; (80160e0 <udp_input+0x264>)
 8015e8c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8015e90:	3301      	adds	r3, #1
 8015e92:	b29a      	uxth	r2, r3
 8015e94:	4b92      	ldr	r3, [pc, #584]	; (80160e0 <udp_input+0x264>)
 8015e96:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	895b      	ldrh	r3, [r3, #10]
 8015e9e:	2b07      	cmp	r3, #7
 8015ea0:	d813      	bhi.n	8015eca <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 8015ea2:	4b8f      	ldr	r3, [pc, #572]	; (80160e0 <udp_input+0x264>)
 8015ea4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	b29a      	uxth	r2, r3
 8015eac:	4b8c      	ldr	r3, [pc, #560]	; (80160e0 <udp_input+0x264>)
 8015eae:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 8015eb2:	4b8b      	ldr	r3, [pc, #556]	; (80160e0 <udp_input+0x264>)
 8015eb4:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8015eb8:	3301      	adds	r3, #1
 8015eba:	b29a      	uxth	r2, r3
 8015ebc:	4b88      	ldr	r3, [pc, #544]	; (80160e0 <udp_input+0x264>)
 8015ebe:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f7fa fb16 	bl	80104f4 <pbuf_free>
    goto end;
 8015ec8:	e108      	b.n	80160dc <udp_input+0x260>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015ed0:	4b84      	ldr	r3, [pc, #528]	; (80160e4 <udp_input+0x268>)
 8015ed2:	695b      	ldr	r3, [r3, #20]
 8015ed4:	4a83      	ldr	r2, [pc, #524]	; (80160e4 <udp_input+0x268>)
 8015ed6:	6812      	ldr	r2, [r2, #0]
 8015ed8:	4611      	mov	r1, r2
 8015eda:	4618      	mov	r0, r3
 8015edc:	f003 fd9a 	bl	8019a14 <ip4_addr_isbroadcast_u32>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015ee4:	697b      	ldr	r3, [r7, #20]
 8015ee6:	881b      	ldrh	r3, [r3, #0]
 8015ee8:	b29b      	uxth	r3, r3
 8015eea:	4618      	mov	r0, r3
 8015eec:	f7f9 fb0a 	bl	800f504 <lwip_htons>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	885b      	ldrh	r3, [r3, #2]
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7f9 fb02 	bl	800f504 <lwip_htons>
 8015f00:	4603      	mov	r3, r0
 8015f02:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015f04:	2300      	movs	r3, #0
 8015f06:	623b      	str	r3, [r7, #32]
  prev = NULL;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f10:	4b75      	ldr	r3, [pc, #468]	; (80160e8 <udp_input+0x26c>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	623b      	str	r3, [r7, #32]
 8015f16:	e05d      	b.n	8015fd4 <udp_input+0x158>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015f18:	6a3b      	ldr	r3, [r7, #32]
 8015f1a:	8a5b      	ldrh	r3, [r3, #18]
 8015f1c:	89fa      	ldrh	r2, [r7, #14]
 8015f1e:	429a      	cmp	r2, r3
 8015f20:	d153      	bne.n	8015fca <udp_input+0x14e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015f22:	7cfb      	ldrb	r3, [r7, #19]
 8015f24:	461a      	mov	r2, r3
 8015f26:	6839      	ldr	r1, [r7, #0]
 8015f28:	6a38      	ldr	r0, [r7, #32]
 8015f2a:	f7ff ff5b 	bl	8015de4 <udp_input_local_match>
 8015f2e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d04a      	beq.n	8015fca <udp_input+0x14e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015f34:	6a3b      	ldr	r3, [r7, #32]
 8015f36:	7c1b      	ldrb	r3, [r3, #16]
 8015f38:	f003 0304 	and.w	r3, r3, #4
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d11d      	bne.n	8015f7c <udp_input+0x100>
        if (uncon_pcb == NULL) {
 8015f40:	69bb      	ldr	r3, [r7, #24]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d102      	bne.n	8015f4c <udp_input+0xd0>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015f46:	6a3b      	ldr	r3, [r7, #32]
 8015f48:	61bb      	str	r3, [r7, #24]
 8015f4a:	e017      	b.n	8015f7c <udp_input+0x100>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015f4c:	7cfb      	ldrb	r3, [r7, #19]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d014      	beq.n	8015f7c <udp_input+0x100>
 8015f52:	4b64      	ldr	r3, [pc, #400]	; (80160e4 <udp_input+0x268>)
 8015f54:	695b      	ldr	r3, [r3, #20]
 8015f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f5a:	d10f      	bne.n	8015f7c <udp_input+0x100>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015f5c:	69bb      	ldr	r3, [r7, #24]
 8015f5e:	681a      	ldr	r2, [r3, #0]
 8015f60:	683b      	ldr	r3, [r7, #0]
 8015f62:	3304      	adds	r3, #4
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d008      	beq.n	8015f7c <udp_input+0x100>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015f6a:	6a3b      	ldr	r3, [r7, #32]
 8015f6c:	681a      	ldr	r2, [r3, #0]
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	3304      	adds	r3, #4
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d101      	bne.n	8015f7c <udp_input+0x100>
              /* better match */
              uncon_pcb = pcb;
 8015f78:	6a3b      	ldr	r3, [r7, #32]
 8015f7a:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015f7c:	6a3b      	ldr	r3, [r7, #32]
 8015f7e:	8a9b      	ldrh	r3, [r3, #20]
 8015f80:	8a3a      	ldrh	r2, [r7, #16]
 8015f82:	429a      	cmp	r2, r3
 8015f84:	d121      	bne.n	8015fca <udp_input+0x14e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015f86:	6a3b      	ldr	r3, [r7, #32]
 8015f88:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d005      	beq.n	8015f9a <udp_input+0x11e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015f8e:	6a3b      	ldr	r3, [r7, #32]
 8015f90:	685a      	ldr	r2, [r3, #4]
 8015f92:	4b54      	ldr	r3, [pc, #336]	; (80160e4 <udp_input+0x268>)
 8015f94:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015f96:	429a      	cmp	r2, r3
 8015f98:	d117      	bne.n	8015fca <udp_input+0x14e>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d00b      	beq.n	8015fb8 <udp_input+0x13c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015fa0:	6a3b      	ldr	r3, [r7, #32]
 8015fa2:	68da      	ldr	r2, [r3, #12]
 8015fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015fa8:	4b4f      	ldr	r3, [pc, #316]	; (80160e8 <udp_input+0x26c>)
 8015faa:	681a      	ldr	r2, [r3, #0]
 8015fac:	6a3b      	ldr	r3, [r7, #32]
 8015fae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015fb0:	4a4d      	ldr	r2, [pc, #308]	; (80160e8 <udp_input+0x26c>)
 8015fb2:	6a3b      	ldr	r3, [r7, #32]
 8015fb4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015fb6:	e010      	b.n	8015fda <udp_input+0x15e>
          UDP_STATS_INC(udp.cachehit);
 8015fb8:	4b49      	ldr	r3, [pc, #292]	; (80160e0 <udp_input+0x264>)
 8015fba:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	b29a      	uxth	r2, r3
 8015fc2:	4b47      	ldr	r3, [pc, #284]	; (80160e0 <udp_input+0x264>)
 8015fc4:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 8015fc8:	e007      	b.n	8015fda <udp_input+0x15e>
      }
    }

    prev = pcb;
 8015fca:	6a3b      	ldr	r3, [r7, #32]
 8015fcc:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fce:	6a3b      	ldr	r3, [r7, #32]
 8015fd0:	68db      	ldr	r3, [r3, #12]
 8015fd2:	623b      	str	r3, [r7, #32]
 8015fd4:	6a3b      	ldr	r3, [r7, #32]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d19e      	bne.n	8015f18 <udp_input+0x9c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015fda:	6a3b      	ldr	r3, [r7, #32]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d101      	bne.n	8015fe4 <udp_input+0x168>
    pcb = uncon_pcb;
 8015fe0:	69bb      	ldr	r3, [r7, #24]
 8015fe2:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015fe4:	6a3b      	ldr	r3, [r7, #32]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d002      	beq.n	8015ff0 <udp_input+0x174>
    for_us = 1;
 8015fea:	2301      	movs	r3, #1
 8015fec:	77fb      	strb	r3, [r7, #31]
 8015fee:	e00a      	b.n	8016006 <udp_input+0x18a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015ff0:	683b      	ldr	r3, [r7, #0]
 8015ff2:	3304      	adds	r3, #4
 8015ff4:	681a      	ldr	r2, [r3, #0]
 8015ff6:	4b3b      	ldr	r3, [pc, #236]	; (80160e4 <udp_input+0x268>)
 8015ff8:	695b      	ldr	r3, [r3, #20]
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	bf0c      	ite	eq
 8015ffe:	2301      	moveq	r3, #1
 8016000:	2300      	movne	r3, #0
 8016002:	b2db      	uxtb	r3, r3
 8016004:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016006:	7ffb      	ldrb	r3, [r7, #31]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d063      	beq.n	80160d4 <udp_input+0x258>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	88db      	ldrh	r3, [r3, #6]
 8016010:	b29b      	uxth	r3, r3
 8016012:	2b00      	cmp	r3, #0
 8016014:	d00b      	beq.n	801602e <udp_input+0x1b2>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	891a      	ldrh	r2, [r3, #8]
 801601a:	4b34      	ldr	r3, [pc, #208]	; (80160ec <udp_input+0x270>)
 801601c:	9300      	str	r3, [sp, #0]
 801601e:	4b34      	ldr	r3, [pc, #208]	; (80160f0 <udp_input+0x274>)
 8016020:	2111      	movs	r1, #17
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f7f9 fc4a 	bl	800f8bc <ip_chksum_pseudo>
 8016028:	4603      	mov	r3, r0
 801602a:	2b00      	cmp	r3, #0
 801602c:	d162      	bne.n	80160f4 <udp_input+0x278>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801602e:	2108      	movs	r1, #8
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f7fa f9f2 	bl	801041a <pbuf_remove_header>
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d00b      	beq.n	8016054 <udp_input+0x1d8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
 801603c:	4b28      	ldr	r3, [pc, #160]	; (80160e0 <udp_input+0x264>)
 801603e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8016042:	3301      	adds	r3, #1
 8016044:	b29a      	uxth	r2, r3
 8016046:	4b26      	ldr	r3, [pc, #152]	; (80160e0 <udp_input+0x264>)
 8016048:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f7fa fa51 	bl	80104f4 <pbuf_free>
      goto end;
 8016052:	e043      	b.n	80160dc <udp_input+0x260>
    }

    if (pcb != NULL) {
 8016054:	6a3b      	ldr	r3, [r7, #32]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d012      	beq.n	8016080 <udp_input+0x204>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801605a:	6a3b      	ldr	r3, [r7, #32]
 801605c:	699b      	ldr	r3, [r3, #24]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d00a      	beq.n	8016078 <udp_input+0x1fc>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016062:	6a3b      	ldr	r3, [r7, #32]
 8016064:	699c      	ldr	r4, [r3, #24]
 8016066:	6a3b      	ldr	r3, [r7, #32]
 8016068:	69d8      	ldr	r0, [r3, #28]
 801606a:	8a3b      	ldrh	r3, [r7, #16]
 801606c:	9300      	str	r3, [sp, #0]
 801606e:	4b20      	ldr	r3, [pc, #128]	; (80160f0 <udp_input+0x274>)
 8016070:	687a      	ldr	r2, [r7, #4]
 8016072:	6a39      	ldr	r1, [r7, #32]
 8016074:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016076:	e051      	b.n	801611c <udp_input+0x2a0>
        pbuf_free(p);
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7fa fa3b 	bl	80104f4 <pbuf_free>
        goto end;
 801607e:	e02d      	b.n	80160dc <udp_input+0x260>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016080:	7cfb      	ldrb	r3, [r7, #19]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d112      	bne.n	80160ac <udp_input+0x230>
 8016086:	4b17      	ldr	r3, [pc, #92]	; (80160e4 <udp_input+0x268>)
 8016088:	695b      	ldr	r3, [r3, #20]
 801608a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801608e:	2be0      	cmp	r3, #224	; 0xe0
 8016090:	d00c      	beq.n	80160ac <udp_input+0x230>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016092:	4b14      	ldr	r3, [pc, #80]	; (80160e4 <udp_input+0x268>)
 8016094:	899b      	ldrh	r3, [r3, #12]
 8016096:	3308      	adds	r3, #8
 8016098:	b29b      	uxth	r3, r3
 801609a:	b21b      	sxth	r3, r3
 801609c:	4619      	mov	r1, r3
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f7fa fa16 	bl	80104d0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80160a4:	2103      	movs	r1, #3
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f003 f886 	bl	80191b8 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 80160ac:	4b0c      	ldr	r3, [pc, #48]	; (80160e0 <udp_input+0x264>)
 80160ae:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80160b2:	3301      	adds	r3, #1
 80160b4:	b29a      	uxth	r2, r3
 80160b6:	4b0a      	ldr	r3, [pc, #40]	; (80160e0 <udp_input+0x264>)
 80160b8:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 80160bc:	4b08      	ldr	r3, [pc, #32]	; (80160e0 <udp_input+0x264>)
 80160be:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80160c2:	3301      	adds	r3, #1
 80160c4:	b29a      	uxth	r2, r3
 80160c6:	4b06      	ldr	r3, [pc, #24]	; (80160e0 <udp_input+0x264>)
 80160c8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	f7fa fa11 	bl	80104f4 <pbuf_free>
  return;
 80160d2:	e023      	b.n	801611c <udp_input+0x2a0>
    pbuf_free(p);
 80160d4:	6878      	ldr	r0, [r7, #4]
 80160d6:	f7fa fa0d 	bl	80104f4 <pbuf_free>
  return;
 80160da:	e01f      	b.n	801611c <udp_input+0x2a0>
 80160dc:	e01e      	b.n	801611c <udp_input+0x2a0>
 80160de:	bf00      	nop
 80160e0:	20007794 	.word	0x20007794
 80160e4:	20007770 	.word	0x20007770
 80160e8:	2000789c 	.word	0x2000789c
 80160ec:	20007784 	.word	0x20007784
 80160f0:	20007780 	.word	0x20007780
            goto chkerr;
 80160f4:	bf00      	nop
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
 80160f6:	4b0b      	ldr	r3, [pc, #44]	; (8016124 <udp_input+0x2a8>)
 80160f8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80160fc:	3301      	adds	r3, #1
 80160fe:	b29a      	uxth	r2, r3
 8016100:	4b08      	ldr	r3, [pc, #32]	; (8016124 <udp_input+0x2a8>)
 8016102:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
  UDP_STATS_INC(udp.drop);
 8016106:	4b07      	ldr	r3, [pc, #28]	; (8016124 <udp_input+0x2a8>)
 8016108:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801610c:	3301      	adds	r3, #1
 801610e:	b29a      	uxth	r2, r3
 8016110:	4b04      	ldr	r3, [pc, #16]	; (8016124 <udp_input+0x2a8>)
 8016112:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f7fa f9ec 	bl	80104f4 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801611c:	372c      	adds	r7, #44	; 0x2c
 801611e:	46bd      	mov	sp, r7
 8016120:	bd90      	pop	{r4, r7, pc}
 8016122:	bf00      	nop
 8016124:	20007794 	.word	0x20007794

08016128 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b088      	sub	sp, #32
 801612c:	af02      	add	r7, sp, #8
 801612e:	60f8      	str	r0, [r7, #12]
 8016130:	60b9      	str	r1, [r7, #8]
 8016132:	607a      	str	r2, [r7, #4]
 8016134:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d102      	bne.n	8016142 <udp_sendto_if+0x1a>
 801613c:	f06f 030f 	mvn.w	r3, #15
 8016140:	e03a      	b.n	80161b8 <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016142:	68bb      	ldr	r3, [r7, #8]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d102      	bne.n	801614e <udp_sendto_if+0x26>
 8016148:	f06f 030f 	mvn.w	r3, #15
 801614c:	e034      	b.n	80161b8 <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d102      	bne.n	801615a <udp_sendto_if+0x32>
 8016154:	f06f 030f 	mvn.w	r3, #15
 8016158:	e02e      	b.n	80161b8 <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801615a:	6a3b      	ldr	r3, [r7, #32]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d102      	bne.n	8016166 <udp_sendto_if+0x3e>
 8016160:	f06f 030f 	mvn.w	r3, #15
 8016164:	e028      	b.n	80161b8 <udp_sendto_if+0x90>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d009      	beq.n	8016180 <udp_sendto_if+0x58>
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d005      	beq.n	8016180 <udp_sendto_if+0x58>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801617c:	2be0      	cmp	r3, #224	; 0xe0
 801617e:	d103      	bne.n	8016188 <udp_sendto_if+0x60>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016180:	6a3b      	ldr	r3, [r7, #32]
 8016182:	3304      	adds	r3, #4
 8016184:	617b      	str	r3, [r7, #20]
 8016186:	e00b      	b.n	80161a0 <udp_sendto_if+0x78>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	681a      	ldr	r2, [r3, #0]
 801618c:	6a3b      	ldr	r3, [r7, #32]
 801618e:	3304      	adds	r3, #4
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	429a      	cmp	r2, r3
 8016194:	d002      	beq.n	801619c <udp_sendto_if+0x74>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016196:	f06f 0303 	mvn.w	r3, #3
 801619a:	e00d      	b.n	80161b8 <udp_sendto_if+0x90>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80161a0:	887a      	ldrh	r2, [r7, #2]
 80161a2:	697b      	ldr	r3, [r7, #20]
 80161a4:	9301      	str	r3, [sp, #4]
 80161a6:	6a3b      	ldr	r3, [r7, #32]
 80161a8:	9300      	str	r3, [sp, #0]
 80161aa:	4613      	mov	r3, r2
 80161ac:	687a      	ldr	r2, [r7, #4]
 80161ae:	68b9      	ldr	r1, [r7, #8]
 80161b0:	68f8      	ldr	r0, [r7, #12]
 80161b2:	f000 f805 	bl	80161c0 <udp_sendto_if_src>
 80161b6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80161b8:	4618      	mov	r0, r3
 80161ba:	3718      	adds	r7, #24
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}

080161c0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b08e      	sub	sp, #56	; 0x38
 80161c4:	af04      	add	r7, sp, #16
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	60b9      	str	r1, [r7, #8]
 80161ca:	607a      	str	r2, [r7, #4]
 80161cc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d102      	bne.n	80161da <udp_sendto_if_src+0x1a>
 80161d4:	f06f 030f 	mvn.w	r3, #15
 80161d8:	e0b7      	b.n	801634a <udp_sendto_if_src+0x18a>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d102      	bne.n	80161e6 <udp_sendto_if_src+0x26>
 80161e0:	f06f 030f 	mvn.w	r3, #15
 80161e4:	e0b1      	b.n	801634a <udp_sendto_if_src+0x18a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d102      	bne.n	80161f2 <udp_sendto_if_src+0x32>
 80161ec:	f06f 030f 	mvn.w	r3, #15
 80161f0:	e0ab      	b.n	801634a <udp_sendto_if_src+0x18a>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80161f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d102      	bne.n	80161fe <udp_sendto_if_src+0x3e>
 80161f8:	f06f 030f 	mvn.w	r3, #15
 80161fc:	e0a5      	b.n	801634a <udp_sendto_if_src+0x18a>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80161fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016200:	2b00      	cmp	r3, #0
 8016202:	d102      	bne.n	801620a <udp_sendto_if_src+0x4a>
 8016204:	f06f 030f 	mvn.w	r3, #15
 8016208:	e09f      	b.n	801634a <udp_sendto_if_src+0x18a>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	8a5b      	ldrh	r3, [r3, #18]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d10f      	bne.n	8016232 <udp_sendto_if_src+0x72>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016212:	68f9      	ldr	r1, [r7, #12]
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	8a5b      	ldrh	r3, [r3, #18]
 8016218:	461a      	mov	r2, r3
 801621a:	68f8      	ldr	r0, [r7, #12]
 801621c:	f000 f89c 	bl	8016358 <udp_bind>
 8016220:	4603      	mov	r3, r0
 8016222:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 8016224:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d002      	beq.n	8016232 <udp_sendto_if_src+0x72>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801622c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016230:	e08b      	b.n	801634a <udp_sendto_if_src+0x18a>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	891b      	ldrh	r3, [r3, #8]
 8016236:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801623a:	4293      	cmp	r3, r2
 801623c:	d902      	bls.n	8016244 <udp_sendto_if_src+0x84>
    return ERR_MEM;
 801623e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016242:	e082      	b.n	801634a <udp_sendto_if_src+0x18a>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016244:	2108      	movs	r1, #8
 8016246:	68b8      	ldr	r0, [r7, #8]
 8016248:	f7fa f8d8 	bl	80103fc <pbuf_add_header>
 801624c:	4603      	mov	r3, r0
 801624e:	2b00      	cmp	r3, #0
 8016250:	d015      	beq.n	801627e <udp_sendto_if_src+0xbe>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016252:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016256:	2108      	movs	r1, #8
 8016258:	2024      	movs	r0, #36	; 0x24
 801625a:	f7f9 ff09 	bl	8010070 <pbuf_alloc>
 801625e:	6238      	str	r0, [r7, #32]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016260:	6a3b      	ldr	r3, [r7, #32]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d102      	bne.n	801626c <udp_sendto_if_src+0xac>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801626a:	e06e      	b.n	801634a <udp_sendto_if_src+0x18a>
    }
    if (p->tot_len != 0) {
 801626c:	68bb      	ldr	r3, [r7, #8]
 801626e:	891b      	ldrh	r3, [r3, #8]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d006      	beq.n	8016282 <udp_sendto_if_src+0xc2>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016274:	68b9      	ldr	r1, [r7, #8]
 8016276:	6a38      	ldr	r0, [r7, #32]
 8016278:	f7fa f9e6 	bl	8010648 <pbuf_chain>
 801627c:	e001      	b.n	8016282 <udp_sendto_if_src+0xc2>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801627e:	68bb      	ldr	r3, [r7, #8]
 8016280:	623b      	str	r3, [r7, #32]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016282:	6a3b      	ldr	r3, [r7, #32]
 8016284:	685b      	ldr	r3, [r3, #4]
 8016286:	61bb      	str	r3, [r7, #24]
  udphdr->src = lwip_htons(pcb->local_port);
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	8a5b      	ldrh	r3, [r3, #18]
 801628c:	4618      	mov	r0, r3
 801628e:	f7f9 f939 	bl	800f504 <lwip_htons>
 8016292:	4603      	mov	r3, r0
 8016294:	461a      	mov	r2, r3
 8016296:	69bb      	ldr	r3, [r7, #24]
 8016298:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801629a:	887b      	ldrh	r3, [r7, #2]
 801629c:	4618      	mov	r0, r3
 801629e:	f7f9 f931 	bl	800f504 <lwip_htons>
 80162a2:	4603      	mov	r3, r0
 80162a4:	461a      	mov	r2, r3
 80162a6:	69bb      	ldr	r3, [r7, #24]
 80162a8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80162aa:	69bb      	ldr	r3, [r7, #24]
 80162ac:	2200      	movs	r2, #0
 80162ae:	719a      	strb	r2, [r3, #6]
 80162b0:	2200      	movs	r2, #0
 80162b2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80162b4:	6a3b      	ldr	r3, [r7, #32]
 80162b6:	891b      	ldrh	r3, [r3, #8]
 80162b8:	4618      	mov	r0, r3
 80162ba:	f7f9 f923 	bl	800f504 <lwip_htons>
 80162be:	4603      	mov	r3, r0
 80162c0:	461a      	mov	r2, r3
 80162c2:	69bb      	ldr	r3, [r7, #24]
 80162c4:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	7c1b      	ldrb	r3, [r3, #16]
 80162ca:	f003 0301 	and.w	r3, r3, #1
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d113      	bne.n	80162fa <udp_sendto_if_src+0x13a>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 80162d2:	6a3b      	ldr	r3, [r7, #32]
 80162d4:	891a      	ldrh	r2, [r3, #8]
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	9300      	str	r3, [sp, #0]
 80162da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162dc:	2111      	movs	r1, #17
 80162de:	6a38      	ldr	r0, [r7, #32]
 80162e0:	f7f9 faec 	bl	800f8bc <ip_chksum_pseudo>
 80162e4:	4603      	mov	r3, r0
 80162e6:	84fb      	strh	r3, [r7, #38]	; 0x26
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 80162e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d102      	bne.n	80162f4 <udp_sendto_if_src+0x134>
          udpchksum = 0xffff;
 80162ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162f2:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        udphdr->chksum = udpchksum;
 80162f4:	69bb      	ldr	r3, [r7, #24]
 80162f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80162f8:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80162fa:	2311      	movs	r3, #17
 80162fc:	75fb      	strb	r3, [r7, #23]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	7adb      	ldrb	r3, [r3, #11]
 8016302:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	7a9b      	ldrb	r3, [r3, #10]
 8016308:	7db9      	ldrb	r1, [r7, #22]
 801630a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801630c:	9202      	str	r2, [sp, #8]
 801630e:	7dfa      	ldrb	r2, [r7, #23]
 8016310:	9201      	str	r2, [sp, #4]
 8016312:	9300      	str	r3, [sp, #0]
 8016314:	460b      	mov	r3, r1
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801631a:	6a38      	ldr	r0, [r7, #32]
 801631c:	f003 fa6a 	bl	80197f4 <ip4_output_if_src>
 8016320:	4603      	mov	r3, r0
 8016322:	77fb      	strb	r3, [r7, #31]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016324:	6a3a      	ldr	r2, [r7, #32]
 8016326:	68bb      	ldr	r3, [r7, #8]
 8016328:	429a      	cmp	r2, r3
 801632a:	d004      	beq.n	8016336 <udp_sendto_if_src+0x176>
    /* free the header pbuf */
    pbuf_free(q);
 801632c:	6a38      	ldr	r0, [r7, #32]
 801632e:	f7fa f8e1 	bl	80104f4 <pbuf_free>
    q = NULL;
 8016332:	2300      	movs	r3, #0
 8016334:	623b      	str	r3, [r7, #32]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 8016336:	4b07      	ldr	r3, [pc, #28]	; (8016354 <udp_sendto_if_src+0x194>)
 8016338:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 801633c:	3301      	adds	r3, #1
 801633e:	b29a      	uxth	r2, r3
 8016340:	4b04      	ldr	r3, [pc, #16]	; (8016354 <udp_sendto_if_src+0x194>)
 8016342:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 8016346:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801634a:	4618      	mov	r0, r3
 801634c:	3728      	adds	r7, #40	; 0x28
 801634e:	46bd      	mov	sp, r7
 8016350:	bd80      	pop	{r7, pc}
 8016352:	bf00      	nop
 8016354:	20007794 	.word	0x20007794

08016358 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b086      	sub	sp, #24
 801635c:	af00      	add	r7, sp, #0
 801635e:	60f8      	str	r0, [r7, #12]
 8016360:	60b9      	str	r1, [r7, #8]
 8016362:	4613      	mov	r3, r2
 8016364:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016366:	68bb      	ldr	r3, [r7, #8]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d101      	bne.n	8016370 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801636c:	4b36      	ldr	r3, [pc, #216]	; (8016448 <udp_bind+0xf0>)
 801636e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d102      	bne.n	801637c <udp_bind+0x24>
 8016376:	f06f 030f 	mvn.w	r3, #15
 801637a:	e060      	b.n	801643e <udp_bind+0xe6>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801637c:	2300      	movs	r3, #0
 801637e:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016380:	4b32      	ldr	r3, [pc, #200]	; (801644c <udp_bind+0xf4>)
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	617b      	str	r3, [r7, #20]
 8016386:	e009      	b.n	801639c <udp_bind+0x44>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016388:	68fa      	ldr	r2, [r7, #12]
 801638a:	697b      	ldr	r3, [r7, #20]
 801638c:	429a      	cmp	r2, r3
 801638e:	d102      	bne.n	8016396 <udp_bind+0x3e>
      rebind = 1;
 8016390:	2301      	movs	r3, #1
 8016392:	74fb      	strb	r3, [r7, #19]
      break;
 8016394:	e005      	b.n	80163a2 <udp_bind+0x4a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	68db      	ldr	r3, [r3, #12]
 801639a:	617b      	str	r3, [r7, #20]
 801639c:	697b      	ldr	r3, [r7, #20]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d1f2      	bne.n	8016388 <udp_bind+0x30>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80163a2:	88fb      	ldrh	r3, [r7, #6]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d109      	bne.n	80163bc <udp_bind+0x64>
    port = udp_new_port();
 80163a8:	f7ff fce4 	bl	8015d74 <udp_new_port>
 80163ac:	4603      	mov	r3, r0
 80163ae:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80163b0:	88fb      	ldrh	r3, [r7, #6]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d12c      	bne.n	8016410 <udp_bind+0xb8>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80163b6:	f06f 0307 	mvn.w	r3, #7
 80163ba:	e040      	b.n	801643e <udp_bind+0xe6>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80163bc:	4b23      	ldr	r3, [pc, #140]	; (801644c <udp_bind+0xf4>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	617b      	str	r3, [r7, #20]
 80163c2:	e022      	b.n	801640a <udp_bind+0xb2>
      if (pcb != ipcb) {
 80163c4:	68fa      	ldr	r2, [r7, #12]
 80163c6:	697b      	ldr	r3, [r7, #20]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d01b      	beq.n	8016404 <udp_bind+0xac>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80163cc:	697b      	ldr	r3, [r7, #20]
 80163ce:	8a5b      	ldrh	r3, [r3, #18]
 80163d0:	88fa      	ldrh	r2, [r7, #6]
 80163d2:	429a      	cmp	r2, r3
 80163d4:	d116      	bne.n	8016404 <udp_bind+0xac>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	681a      	ldr	r2, [r3, #0]
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80163de:	429a      	cmp	r2, r3
 80163e0:	d00d      	beq.n	80163fe <udp_bind+0xa6>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80163e2:	68bb      	ldr	r3, [r7, #8]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d00a      	beq.n	80163fe <udp_bind+0xa6>
 80163e8:	68bb      	ldr	r3, [r7, #8]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d006      	beq.n	80163fe <udp_bind+0xa6>
              ip_addr_isany(&ipcb->local_ip))) {
 80163f0:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d003      	beq.n	80163fe <udp_bind+0xa6>
              ip_addr_isany(&ipcb->local_ip))) {
 80163f6:	697b      	ldr	r3, [r7, #20]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d102      	bne.n	8016404 <udp_bind+0xac>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80163fe:	f06f 0307 	mvn.w	r3, #7
 8016402:	e01c      	b.n	801643e <udp_bind+0xe6>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016404:	697b      	ldr	r3, [r7, #20]
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	617b      	str	r3, [r7, #20]
 801640a:	697b      	ldr	r3, [r7, #20]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d1d9      	bne.n	80163c4 <udp_bind+0x6c>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d002      	beq.n	801641c <udp_bind+0xc4>
 8016416:	68bb      	ldr	r3, [r7, #8]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	e000      	b.n	801641e <udp_bind+0xc6>
 801641c:	2300      	movs	r3, #0
 801641e:	68fa      	ldr	r2, [r7, #12]
 8016420:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	88fa      	ldrh	r2, [r7, #6]
 8016426:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016428:	7cfb      	ldrb	r3, [r7, #19]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d106      	bne.n	801643c <udp_bind+0xe4>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801642e:	4b07      	ldr	r3, [pc, #28]	; (801644c <udp_bind+0xf4>)
 8016430:	681a      	ldr	r2, [r3, #0]
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016436:	4a05      	ldr	r2, [pc, #20]	; (801644c <udp_bind+0xf4>)
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801643c:	2300      	movs	r3, #0
}
 801643e:	4618      	mov	r0, r3
 8016440:	3718      	adds	r7, #24
 8016442:	46bd      	mov	sp, r7
 8016444:	bd80      	pop	{r7, pc}
 8016446:	bf00      	nop
 8016448:	0801d248 	.word	0x0801d248
 801644c:	2000789c 	.word	0x2000789c

08016450 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b086      	sub	sp, #24
 8016454:	af00      	add	r7, sp, #0
 8016456:	60f8      	str	r0, [r7, #12]
 8016458:	60b9      	str	r1, [r7, #8]
 801645a:	4613      	mov	r3, r2
 801645c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d102      	bne.n	801646a <udp_connect+0x1a>
 8016464:	f06f 030f 	mvn.w	r3, #15
 8016468:	e044      	b.n	80164f4 <udp_connect+0xa4>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d102      	bne.n	8016476 <udp_connect+0x26>
 8016470:	f06f 030f 	mvn.w	r3, #15
 8016474:	e03e      	b.n	80164f4 <udp_connect+0xa4>

  if (pcb->local_port == 0) {
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	8a5b      	ldrh	r3, [r3, #18]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d10f      	bne.n	801649e <udp_connect+0x4e>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801647e:	68f9      	ldr	r1, [r7, #12]
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	8a5b      	ldrh	r3, [r3, #18]
 8016484:	461a      	mov	r2, r3
 8016486:	68f8      	ldr	r0, [r7, #12]
 8016488:	f7ff ff66 	bl	8016358 <udp_bind>
 801648c:	4603      	mov	r3, r0
 801648e:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8016490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d002      	beq.n	801649e <udp_connect+0x4e>
      return err;
 8016498:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801649c:	e02a      	b.n	80164f4 <udp_connect+0xa4>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d002      	beq.n	80164aa <udp_connect+0x5a>
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	e000      	b.n	80164ac <udp_connect+0x5c>
 80164aa:	2300      	movs	r3, #0
 80164ac:	68fa      	ldr	r2, [r7, #12]
 80164ae:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	88fa      	ldrh	r2, [r7, #6]
 80164b4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	7c1b      	ldrb	r3, [r3, #16]
 80164ba:	f043 0304 	orr.w	r3, r3, #4
 80164be:	b2da      	uxtb	r2, r3
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80164c4:	4b0d      	ldr	r3, [pc, #52]	; (80164fc <udp_connect+0xac>)
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	613b      	str	r3, [r7, #16]
 80164ca:	e008      	b.n	80164de <udp_connect+0x8e>
    if (pcb == ipcb) {
 80164cc:	68fa      	ldr	r2, [r7, #12]
 80164ce:	693b      	ldr	r3, [r7, #16]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d101      	bne.n	80164d8 <udp_connect+0x88>
      /* already on the list, just return */
      return ERR_OK;
 80164d4:	2300      	movs	r3, #0
 80164d6:	e00d      	b.n	80164f4 <udp_connect+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	68db      	ldr	r3, [r3, #12]
 80164dc:	613b      	str	r3, [r7, #16]
 80164de:	693b      	ldr	r3, [r7, #16]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d1f3      	bne.n	80164cc <udp_connect+0x7c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80164e4:	4b05      	ldr	r3, [pc, #20]	; (80164fc <udp_connect+0xac>)
 80164e6:	681a      	ldr	r2, [r3, #0]
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80164ec:	4a03      	ldr	r2, [pc, #12]	; (80164fc <udp_connect+0xac>)
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80164f2:	2300      	movs	r3, #0
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	3718      	adds	r7, #24
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	2000789c 	.word	0x2000789c

08016500 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016500:	b480      	push	{r7}
 8016502:	b085      	sub	sp, #20
 8016504:	af00      	add	r7, sp, #0
 8016506:	60f8      	str	r0, [r7, #12]
 8016508:	60b9      	str	r1, [r7, #8]
 801650a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d005      	beq.n	801651e <udp_recv+0x1e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	68ba      	ldr	r2, [r7, #8]
 8016516:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	687a      	ldr	r2, [r7, #4]
 801651c:	61da      	str	r2, [r3, #28]
}
 801651e:	3714      	adds	r7, #20
 8016520:	46bd      	mov	sp, r7
 8016522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016526:	4770      	bx	lr

08016528 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b084      	sub	sp, #16
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d026      	beq.n	8016584 <udp_remove+0x5c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016536:	4b15      	ldr	r3, [pc, #84]	; (801658c <udp_remove+0x64>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	687a      	ldr	r2, [r7, #4]
 801653c:	429a      	cmp	r2, r3
 801653e:	d105      	bne.n	801654c <udp_remove+0x24>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016540:	4b12      	ldr	r3, [pc, #72]	; (801658c <udp_remove+0x64>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	68db      	ldr	r3, [r3, #12]
 8016546:	4a11      	ldr	r2, [pc, #68]	; (801658c <udp_remove+0x64>)
 8016548:	6013      	str	r3, [r2, #0]
 801654a:	e017      	b.n	801657c <udp_remove+0x54>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801654c:	4b0f      	ldr	r3, [pc, #60]	; (801658c <udp_remove+0x64>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	60fb      	str	r3, [r7, #12]
 8016552:	e010      	b.n	8016576 <udp_remove+0x4e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	68db      	ldr	r3, [r3, #12]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d009      	beq.n	8016570 <udp_remove+0x48>
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	68db      	ldr	r3, [r3, #12]
 8016560:	687a      	ldr	r2, [r7, #4]
 8016562:	429a      	cmp	r2, r3
 8016564:	d104      	bne.n	8016570 <udp_remove+0x48>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	68da      	ldr	r2, [r3, #12]
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	60da      	str	r2, [r3, #12]
        break;
 801656e:	e005      	b.n	801657c <udp_remove+0x54>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	68db      	ldr	r3, [r3, #12]
 8016574:	60fb      	str	r3, [r7, #12]
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d1eb      	bne.n	8016554 <udp_remove+0x2c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801657c:	6879      	ldr	r1, [r7, #4]
 801657e:	2000      	movs	r0, #0
 8016580:	f7f9 fadc 	bl	800fb3c <memp_free>
}
 8016584:	3710      	adds	r7, #16
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
 801658a:	bf00      	nop
 801658c:	2000789c 	.word	0x2000789c

08016590 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016596:	2000      	movs	r0, #0
 8016598:	f7f9 fa94 	bl	800fac4 <memp_malloc>
 801659c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d007      	beq.n	80165b4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80165a4:	2220      	movs	r2, #32
 80165a6:	2100      	movs	r1, #0
 80165a8:	6878      	ldr	r0, [r7, #4]
 80165aa:	f004 fb4a 	bl	801ac42 <memset>
    pcb->ttl = UDP_TTL;
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	22ff      	movs	r2, #255	; 0xff
 80165b2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80165b4:	687b      	ldr	r3, [r7, #4]
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3708      	adds	r7, #8
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}
	...

080165c0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80165c0:	b480      	push	{r7}
 80165c2:	b085      	sub	sp, #20
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
 80165c8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d01e      	beq.n	801660e <udp_netif_ip_addr_changed+0x4e>
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d01a      	beq.n	801660e <udp_netif_ip_addr_changed+0x4e>
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d017      	beq.n	801660e <udp_netif_ip_addr_changed+0x4e>
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d013      	beq.n	801660e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80165e6:	4b0d      	ldr	r3, [pc, #52]	; (801661c <udp_netif_ip_addr_changed+0x5c>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	60fb      	str	r3, [r7, #12]
 80165ec:	e00c      	b.n	8016608 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	429a      	cmp	r2, r3
 80165f8:	d103      	bne.n	8016602 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	681a      	ldr	r2, [r3, #0]
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	68db      	ldr	r3, [r3, #12]
 8016606:	60fb      	str	r3, [r7, #12]
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d1ef      	bne.n	80165ee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801660e:	bf00      	nop
 8016610:	3714      	adds	r7, #20
 8016612:	46bd      	mov	sp, r7
 8016614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016618:	4770      	bx	lr
 801661a:	bf00      	nop
 801661c:	2000789c 	.word	0x2000789c

08016620 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8016624:	4b1b      	ldr	r3, [pc, #108]	; (8016694 <dhcp_inc_pcb_refcount+0x74>)
 8016626:	781b      	ldrb	r3, [r3, #0]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d129      	bne.n	8016680 <dhcp_inc_pcb_refcount+0x60>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801662c:	f7ff ffb0 	bl	8016590 <udp_new>
 8016630:	4603      	mov	r3, r0
 8016632:	4a19      	ldr	r2, [pc, #100]	; (8016698 <dhcp_inc_pcb_refcount+0x78>)
 8016634:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8016636:	4b18      	ldr	r3, [pc, #96]	; (8016698 <dhcp_inc_pcb_refcount+0x78>)
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d102      	bne.n	8016644 <dhcp_inc_pcb_refcount+0x24>
      return ERR_MEM;
 801663e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016642:	e024      	b.n	801668e <dhcp_inc_pcb_refcount+0x6e>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8016644:	4b14      	ldr	r3, [pc, #80]	; (8016698 <dhcp_inc_pcb_refcount+0x78>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	7a5a      	ldrb	r2, [r3, #9]
 801664a:	4b13      	ldr	r3, [pc, #76]	; (8016698 <dhcp_inc_pcb_refcount+0x78>)
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	f042 0220 	orr.w	r2, r2, #32
 8016652:	b2d2      	uxtb	r2, r2
 8016654:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8016656:	4b10      	ldr	r3, [pc, #64]	; (8016698 <dhcp_inc_pcb_refcount+0x78>)
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	2244      	movs	r2, #68	; 0x44
 801665c:	490f      	ldr	r1, [pc, #60]	; (801669c <dhcp_inc_pcb_refcount+0x7c>)
 801665e:	4618      	mov	r0, r3
 8016660:	f7ff fe7a 	bl	8016358 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8016664:	4b0c      	ldr	r3, [pc, #48]	; (8016698 <dhcp_inc_pcb_refcount+0x78>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	2243      	movs	r2, #67	; 0x43
 801666a:	490c      	ldr	r1, [pc, #48]	; (801669c <dhcp_inc_pcb_refcount+0x7c>)
 801666c:	4618      	mov	r0, r3
 801666e:	f7ff feef 	bl	8016450 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8016672:	4b09      	ldr	r3, [pc, #36]	; (8016698 <dhcp_inc_pcb_refcount+0x78>)
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	2200      	movs	r2, #0
 8016678:	4909      	ldr	r1, [pc, #36]	; (80166a0 <dhcp_inc_pcb_refcount+0x80>)
 801667a:	4618      	mov	r0, r3
 801667c:	f7ff ff40 	bl	8016500 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8016680:	4b04      	ldr	r3, [pc, #16]	; (8016694 <dhcp_inc_pcb_refcount+0x74>)
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	3301      	adds	r3, #1
 8016686:	b2da      	uxtb	r2, r3
 8016688:	4b02      	ldr	r3, [pc, #8]	; (8016694 <dhcp_inc_pcb_refcount+0x74>)
 801668a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801668c:	2300      	movs	r3, #0
}
 801668e:	4618      	mov	r0, r3
 8016690:	bd80      	pop	{r7, pc}
 8016692:	bf00      	nop
 8016694:	200078cc 	.word	0x200078cc
 8016698:	200078c8 	.word	0x200078c8
 801669c:	0801d248 	.word	0x0801d248
 80166a0:	08017dc1 	.word	0x08017dc1

080166a4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  dhcp_pcb_refcount--;
 80166a8:	4b09      	ldr	r3, [pc, #36]	; (80166d0 <dhcp_dec_pcb_refcount+0x2c>)
 80166aa:	781b      	ldrb	r3, [r3, #0]
 80166ac:	3b01      	subs	r3, #1
 80166ae:	b2da      	uxtb	r2, r3
 80166b0:	4b07      	ldr	r3, [pc, #28]	; (80166d0 <dhcp_dec_pcb_refcount+0x2c>)
 80166b2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80166b4:	4b06      	ldr	r3, [pc, #24]	; (80166d0 <dhcp_dec_pcb_refcount+0x2c>)
 80166b6:	781b      	ldrb	r3, [r3, #0]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d107      	bne.n	80166cc <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 80166bc:	4b05      	ldr	r3, [pc, #20]	; (80166d4 <dhcp_dec_pcb_refcount+0x30>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	4618      	mov	r0, r3
 80166c2:	f7ff ff31 	bl	8016528 <udp_remove>
    dhcp_pcb = NULL;
 80166c6:	4b03      	ldr	r3, [pc, #12]	; (80166d4 <dhcp_dec_pcb_refcount+0x30>)
 80166c8:	2200      	movs	r2, #0
 80166ca:	601a      	str	r2, [r3, #0]
  }
}
 80166cc:	bf00      	nop
 80166ce:	bd80      	pop	{r7, pc}
 80166d0:	200078cc 	.word	0x200078cc
 80166d4:	200078c8 	.word	0x200078c8

080166d8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b084      	sub	sp, #16
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	6a1b      	ldr	r3, [r3, #32]
 80166e4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80166e6:	210c      	movs	r1, #12
 80166e8:	68f8      	ldr	r0, [r7, #12]
 80166ea:	f001 f815 	bl	8017718 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80166ee:	4b06      	ldr	r3, [pc, #24]	; (8016708 <dhcp_handle_nak+0x30>)
 80166f0:	4a05      	ldr	r2, [pc, #20]	; (8016708 <dhcp_handle_nak+0x30>)
 80166f2:	4905      	ldr	r1, [pc, #20]	; (8016708 <dhcp_handle_nak+0x30>)
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f7f9 fb67 	bl	800fdc8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80166fa:	6878      	ldr	r0, [r7, #4]
 80166fc:	f000 fc06 	bl	8016f0c <dhcp_discover>
}
 8016700:	bf00      	nop
 8016702:	3710      	adds	r7, #16
 8016704:	46bd      	mov	sp, r7
 8016706:	bd80      	pop	{r7, pc}
 8016708:	0801d248 	.word	0x0801d248

0801670c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b084      	sub	sp, #16
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	6a1b      	ldr	r3, [r3, #32]
 8016718:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801671a:	2108      	movs	r1, #8
 801671c:	68f8      	ldr	r0, [r7, #12]
 801671e:	f000 fffb 	bl	8017718 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	331c      	adds	r3, #28
 8016726:	2200      	movs	r2, #0
 8016728:	4619      	mov	r1, r3
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f002 f9fc 	bl	8018b28 <etharp_query>
 8016730:	4603      	mov	r3, r0
 8016732:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	799b      	ldrb	r3, [r3, #6]
 8016738:	2bff      	cmp	r3, #255	; 0xff
 801673a:	d005      	beq.n	8016748 <dhcp_check+0x3c>
    dhcp->tries++;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	799b      	ldrb	r3, [r3, #6]
 8016740:	3301      	adds	r3, #1
 8016742:	b2da      	uxtb	r2, r3
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8016748:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801674c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801674e:	893b      	ldrh	r3, [r7, #8]
 8016750:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016754:	4a06      	ldr	r2, [pc, #24]	; (8016770 <dhcp_check+0x64>)
 8016756:	fb82 1203 	smull	r1, r2, r2, r3
 801675a:	1152      	asrs	r2, r2, #5
 801675c:	17db      	asrs	r3, r3, #31
 801675e:	1ad3      	subs	r3, r2, r3
 8016760:	b29a      	uxth	r2, r3
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8016766:	bf00      	nop
 8016768:	3710      	adds	r7, #16
 801676a:	46bd      	mov	sp, r7
 801676c:	bd80      	pop	{r7, pc}
 801676e:	bf00      	nop
 8016770:	10624dd3 	.word	0x10624dd3

08016774 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b084      	sub	sp, #16
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
 801677c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	6a1b      	ldr	r3, [r3, #32]
 8016782:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8016784:	4b0c      	ldr	r3, [pc, #48]	; (80167b8 <dhcp_handle_offer+0x44>)
 8016786:	789b      	ldrb	r3, [r3, #2]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d011      	beq.n	80167b0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	2200      	movs	r2, #0
 8016790:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8016792:	4b0a      	ldr	r3, [pc, #40]	; (80167bc <dhcp_handle_offer+0x48>)
 8016794:	689b      	ldr	r3, [r3, #8]
 8016796:	4618      	mov	r0, r3
 8016798:	f7f8 fec9 	bl	800f52e <lwip_htonl>
 801679c:	4602      	mov	r2, r0
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	691a      	ldr	r2, [r3, #16]
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f000 f808 	bl	80167c0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80167b0:	bf00      	nop
 80167b2:	3710      	adds	r7, #16
 80167b4:	46bd      	mov	sp, r7
 80167b6:	bd80      	pop	{r7, pc}
 80167b8:	200078c0 	.word	0x200078c0
 80167bc:	200078a0 	.word	0x200078a0

080167c0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80167c0:	b5b0      	push	{r4, r5, r7, lr}
 80167c2:	b08a      	sub	sp, #40	; 0x28
 80167c4:	af02      	add	r7, sp, #8
 80167c6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d102      	bne.n	80167d4 <dhcp_select+0x14>
 80167ce:	f06f 030f 	mvn.w	r3, #15
 80167d2:	e0d5      	b.n	8016980 <dhcp_select+0x1c0>
  dhcp = netif_dhcp_data(netif);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	6a1b      	ldr	r3, [r3, #32]
 80167d8:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80167da:	69bb      	ldr	r3, [r7, #24]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d102      	bne.n	80167e6 <dhcp_select+0x26>
 80167e0:	f06f 0305 	mvn.w	r3, #5
 80167e4:	e0cc      	b.n	8016980 <dhcp_select+0x1c0>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80167e6:	2101      	movs	r1, #1
 80167e8:	69b8      	ldr	r0, [r7, #24]
 80167ea:	f000 ff95 	bl	8017718 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80167ee:	f107 030c 	add.w	r3, r7, #12
 80167f2:	2203      	movs	r2, #3
 80167f4:	69b9      	ldr	r1, [r7, #24]
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f001 fbac 	bl	8017f54 <dhcp_create_msg>
 80167fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80167fe:	697b      	ldr	r3, [r7, #20]
 8016800:	2b00      	cmp	r3, #0
 8016802:	f000 808e 	beq.w	8016922 <dhcp_select+0x162>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016806:	697b      	ldr	r3, [r7, #20]
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801680c:	89b8      	ldrh	r0, [r7, #12]
 801680e:	693b      	ldr	r3, [r7, #16]
 8016810:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016814:	2302      	movs	r3, #2
 8016816:	2239      	movs	r2, #57	; 0x39
 8016818:	f000 ff98 	bl	801774c <dhcp_option>
 801681c:	4603      	mov	r3, r0
 801681e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016820:	89b8      	ldrh	r0, [r7, #12]
 8016822:	693b      	ldr	r3, [r7, #16]
 8016824:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801682c:	461a      	mov	r2, r3
 801682e:	f000 ffc7 	bl	80177c0 <dhcp_option_short>
 8016832:	4603      	mov	r3, r0
 8016834:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016836:	89b8      	ldrh	r0, [r7, #12]
 8016838:	693b      	ldr	r3, [r7, #16]
 801683a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801683e:	2304      	movs	r3, #4
 8016840:	2232      	movs	r2, #50	; 0x32
 8016842:	f000 ff83 	bl	801774c <dhcp_option>
 8016846:	4603      	mov	r3, r0
 8016848:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801684a:	89bc      	ldrh	r4, [r7, #12]
 801684c:	693b      	ldr	r3, [r7, #16]
 801684e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016852:	69bb      	ldr	r3, [r7, #24]
 8016854:	69db      	ldr	r3, [r3, #28]
 8016856:	4618      	mov	r0, r3
 8016858:	f7f8 fe69 	bl	800f52e <lwip_htonl>
 801685c:	4603      	mov	r3, r0
 801685e:	461a      	mov	r2, r3
 8016860:	4629      	mov	r1, r5
 8016862:	4620      	mov	r0, r4
 8016864:	f000 ffcf 	bl	8017806 <dhcp_option_long>
 8016868:	4603      	mov	r3, r0
 801686a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801686c:	89b8      	ldrh	r0, [r7, #12]
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016874:	2304      	movs	r3, #4
 8016876:	2236      	movs	r2, #54	; 0x36
 8016878:	f000 ff68 	bl	801774c <dhcp_option>
 801687c:	4603      	mov	r3, r0
 801687e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016880:	89bc      	ldrh	r4, [r7, #12]
 8016882:	693b      	ldr	r3, [r7, #16]
 8016884:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016888:	69bb      	ldr	r3, [r7, #24]
 801688a:	699b      	ldr	r3, [r3, #24]
 801688c:	4618      	mov	r0, r3
 801688e:	f7f8 fe4e 	bl	800f52e <lwip_htonl>
 8016892:	4603      	mov	r3, r0
 8016894:	461a      	mov	r2, r3
 8016896:	4629      	mov	r1, r5
 8016898:	4620      	mov	r0, r4
 801689a:	f000 ffb4 	bl	8017806 <dhcp_option_long>
 801689e:	4603      	mov	r3, r0
 80168a0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80168a2:	89b8      	ldrh	r0, [r7, #12]
 80168a4:	693b      	ldr	r3, [r7, #16]
 80168a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168aa:	2303      	movs	r3, #3
 80168ac:	2237      	movs	r2, #55	; 0x37
 80168ae:	f000 ff4d 	bl	801774c <dhcp_option>
 80168b2:	4603      	mov	r3, r0
 80168b4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80168b6:	2300      	movs	r3, #0
 80168b8:	77fb      	strb	r3, [r7, #31]
 80168ba:	e00e      	b.n	80168da <dhcp_select+0x11a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80168bc:	89b8      	ldrh	r0, [r7, #12]
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168c4:	7ffb      	ldrb	r3, [r7, #31]
 80168c6:	4a30      	ldr	r2, [pc, #192]	; (8016988 <dhcp_select+0x1c8>)
 80168c8:	5cd3      	ldrb	r3, [r2, r3]
 80168ca:	461a      	mov	r2, r3
 80168cc:	f000 ff61 	bl	8017792 <dhcp_option_byte>
 80168d0:	4603      	mov	r3, r0
 80168d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80168d4:	7ffb      	ldrb	r3, [r7, #31]
 80168d6:	3301      	adds	r3, #1
 80168d8:	77fb      	strb	r3, [r7, #31]
 80168da:	7ffb      	ldrb	r3, [r7, #31]
 80168dc:	2b02      	cmp	r3, #2
 80168de:	d9ed      	bls.n	80168bc <dhcp_select+0xfc>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 80168e0:	89b8      	ldrh	r0, [r7, #12]
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	33f0      	adds	r3, #240	; 0xf0
 80168e6:	687a      	ldr	r2, [r7, #4]
 80168e8:	4619      	mov	r1, r3
 80168ea:	f000 ffc1 	bl	8017870 <dhcp_option_hostname>
 80168ee:	4603      	mov	r3, r0
 80168f0:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80168f2:	89b8      	ldrh	r0, [r7, #12]
 80168f4:	693b      	ldr	r3, [r7, #16]
 80168f6:	33f0      	adds	r3, #240	; 0xf0
 80168f8:	697a      	ldr	r2, [r7, #20]
 80168fa:	4619      	mov	r1, r3
 80168fc:	f001 fbdc 	bl	80180b8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016900:	4b22      	ldr	r3, [pc, #136]	; (801698c <dhcp_select+0x1cc>)
 8016902:	6818      	ldr	r0, [r3, #0]
 8016904:	4b22      	ldr	r3, [pc, #136]	; (8016990 <dhcp_select+0x1d0>)
 8016906:	9301      	str	r3, [sp, #4]
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	9300      	str	r3, [sp, #0]
 801690c:	2343      	movs	r3, #67	; 0x43
 801690e:	4a21      	ldr	r2, [pc, #132]	; (8016994 <dhcp_select+0x1d4>)
 8016910:	6979      	ldr	r1, [r7, #20]
 8016912:	f7ff fc55 	bl	80161c0 <udp_sendto_if_src>
 8016916:	4603      	mov	r3, r0
 8016918:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 801691a:	6978      	ldr	r0, [r7, #20]
 801691c:	f7f9 fdea 	bl	80104f4 <pbuf_free>
 8016920:	e001      	b.n	8016926 <dhcp_select+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016922:	23ff      	movs	r3, #255	; 0xff
 8016924:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8016926:	69bb      	ldr	r3, [r7, #24]
 8016928:	799b      	ldrb	r3, [r3, #6]
 801692a:	2bff      	cmp	r3, #255	; 0xff
 801692c:	d005      	beq.n	801693a <dhcp_select+0x17a>
    dhcp->tries++;
 801692e:	69bb      	ldr	r3, [r7, #24]
 8016930:	799b      	ldrb	r3, [r3, #6]
 8016932:	3301      	adds	r3, #1
 8016934:	b2da      	uxtb	r2, r3
 8016936:	69bb      	ldr	r3, [r7, #24]
 8016938:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801693a:	69bb      	ldr	r3, [r7, #24]
 801693c:	799b      	ldrb	r3, [r3, #6]
 801693e:	2b05      	cmp	r3, #5
 8016940:	d80d      	bhi.n	801695e <dhcp_select+0x19e>
 8016942:	69bb      	ldr	r3, [r7, #24]
 8016944:	799b      	ldrb	r3, [r3, #6]
 8016946:	461a      	mov	r2, r3
 8016948:	2301      	movs	r3, #1
 801694a:	4093      	lsls	r3, r2
 801694c:	b29b      	uxth	r3, r3
 801694e:	461a      	mov	r2, r3
 8016950:	0152      	lsls	r2, r2, #5
 8016952:	1ad2      	subs	r2, r2, r3
 8016954:	0092      	lsls	r2, r2, #2
 8016956:	4413      	add	r3, r2
 8016958:	00db      	lsls	r3, r3, #3
 801695a:	b29b      	uxth	r3, r3
 801695c:	e001      	b.n	8016962 <dhcp_select+0x1a2>
 801695e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016962:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016964:	89fb      	ldrh	r3, [r7, #14]
 8016966:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801696a:	4a0b      	ldr	r2, [pc, #44]	; (8016998 <dhcp_select+0x1d8>)
 801696c:	fb82 1203 	smull	r1, r2, r2, r3
 8016970:	1152      	asrs	r2, r2, #5
 8016972:	17db      	asrs	r3, r3, #31
 8016974:	1ad3      	subs	r3, r2, r3
 8016976:	b29a      	uxth	r2, r3
 8016978:	69bb      	ldr	r3, [r7, #24]
 801697a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801697c:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8016980:	4618      	mov	r0, r3
 8016982:	3720      	adds	r7, #32
 8016984:	46bd      	mov	sp, r7
 8016986:	bdb0      	pop	{r4, r5, r7, pc}
 8016988:	20000144 	.word	0x20000144
 801698c:	200078c8 	.word	0x200078c8
 8016990:	0801d248 	.word	0x0801d248
 8016994:	0801d24c 	.word	0x0801d24c
 8016998:	10624dd3 	.word	0x10624dd3

0801699c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b082      	sub	sp, #8
 80169a0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80169a2:	4b27      	ldr	r3, [pc, #156]	; (8016a40 <dhcp_coarse_tmr+0xa4>)
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	607b      	str	r3, [r7, #4]
 80169a8:	e042      	b.n	8016a30 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	6a1b      	ldr	r3, [r3, #32]
 80169ae:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d039      	beq.n	8016a2a <dhcp_coarse_tmr+0x8e>
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	795b      	ldrb	r3, [r3, #5]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d035      	beq.n	8016a2a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	8a9b      	ldrh	r3, [r3, #20]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d012      	beq.n	80169ec <dhcp_coarse_tmr+0x50>
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	8a5b      	ldrh	r3, [r3, #18]
 80169ca:	3301      	adds	r3, #1
 80169cc:	b29a      	uxth	r2, r3
 80169ce:	683b      	ldr	r3, [r7, #0]
 80169d0:	825a      	strh	r2, [r3, #18]
 80169d2:	683b      	ldr	r3, [r7, #0]
 80169d4:	8a5a      	ldrh	r2, [r3, #18]
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	8a9b      	ldrh	r3, [r3, #20]
 80169da:	429a      	cmp	r2, r3
 80169dc:	d106      	bne.n	80169ec <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80169de:	6878      	ldr	r0, [r7, #4]
 80169e0:	f000 fe00 	bl	80175e4 <dhcp_release_and_stop>
        dhcp_start(netif);
 80169e4:	6878      	ldr	r0, [r7, #4]
 80169e6:	f000 f969 	bl	8016cbc <dhcp_start>
 80169ea:	e01e      	b.n	8016a2a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	8a1b      	ldrh	r3, [r3, #16]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d00b      	beq.n	8016a0c <dhcp_coarse_tmr+0x70>
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	8a1b      	ldrh	r3, [r3, #16]
 80169f8:	1e5a      	subs	r2, r3, #1
 80169fa:	b291      	uxth	r1, r2
 80169fc:	683a      	ldr	r2, [r7, #0]
 80169fe:	8211      	strh	r1, [r2, #16]
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	d103      	bne.n	8016a0c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f000 f8c6 	bl	8016b96 <dhcp_t2_timeout>
 8016a0a:	e00e      	b.n	8016a2a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	89db      	ldrh	r3, [r3, #14]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d00a      	beq.n	8016a2a <dhcp_coarse_tmr+0x8e>
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	89db      	ldrh	r3, [r3, #14]
 8016a18:	1e5a      	subs	r2, r3, #1
 8016a1a:	b291      	uxth	r1, r2
 8016a1c:	683a      	ldr	r2, [r7, #0]
 8016a1e:	81d1      	strh	r1, [r2, #14]
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	d102      	bne.n	8016a2a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f000 f888 	bl	8016b3a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	607b      	str	r3, [r7, #4]
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d1b9      	bne.n	80169aa <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8016a36:	bf00      	nop
 8016a38:	bf00      	nop
 8016a3a:	3708      	adds	r7, #8
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}
 8016a40:	20007788 	.word	0x20007788

08016a44 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b082      	sub	sp, #8
 8016a48:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8016a4a:	4b16      	ldr	r3, [pc, #88]	; (8016aa4 <dhcp_fine_tmr+0x60>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	607b      	str	r3, [r7, #4]
 8016a50:	e020      	b.n	8016a94 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	6a1b      	ldr	r3, [r3, #32]
 8016a56:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d017      	beq.n	8016a8e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	891b      	ldrh	r3, [r3, #8]
 8016a62:	2b01      	cmp	r3, #1
 8016a64:	d906      	bls.n	8016a74 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8016a66:	683b      	ldr	r3, [r7, #0]
 8016a68:	891b      	ldrh	r3, [r3, #8]
 8016a6a:	3b01      	subs	r3, #1
 8016a6c:	b29a      	uxth	r2, r3
 8016a6e:	683b      	ldr	r3, [r7, #0]
 8016a70:	811a      	strh	r2, [r3, #8]
 8016a72:	e00c      	b.n	8016a8e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8016a74:	683b      	ldr	r3, [r7, #0]
 8016a76:	891b      	ldrh	r3, [r3, #8]
 8016a78:	2b01      	cmp	r3, #1
 8016a7a:	d108      	bne.n	8016a8e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	891b      	ldrh	r3, [r3, #8]
 8016a80:	3b01      	subs	r3, #1
 8016a82:	b29a      	uxth	r2, r3
 8016a84:	683b      	ldr	r3, [r7, #0]
 8016a86:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f000 f80d 	bl	8016aa8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	607b      	str	r3, [r7, #4]
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d1db      	bne.n	8016a52 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8016a9a:	bf00      	nop
 8016a9c:	bf00      	nop
 8016a9e:	3708      	adds	r7, #8
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}
 8016aa4:	20007788 	.word	0x20007788

08016aa8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b084      	sub	sp, #16
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	6a1b      	ldr	r3, [r3, #32]
 8016ab4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	795b      	ldrb	r3, [r3, #5]
 8016aba:	2b0c      	cmp	r3, #12
 8016abc:	d003      	beq.n	8016ac6 <dhcp_timeout+0x1e>
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	795b      	ldrb	r3, [r3, #5]
 8016ac2:	2b06      	cmp	r3, #6
 8016ac4:	d103      	bne.n	8016ace <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f000 fa20 	bl	8016f0c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8016acc:	e031      	b.n	8016b32 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	795b      	ldrb	r3, [r3, #5]
 8016ad2:	2b01      	cmp	r3, #1
 8016ad4:	d10e      	bne.n	8016af4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	799b      	ldrb	r3, [r3, #6]
 8016ada:	2b05      	cmp	r3, #5
 8016adc:	d803      	bhi.n	8016ae6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f7ff fe6e 	bl	80167c0 <dhcp_select>
}
 8016ae4:	e025      	b.n	8016b32 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f000 fd7c 	bl	80175e4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8016aec:	6878      	ldr	r0, [r7, #4]
 8016aee:	f000 f8e5 	bl	8016cbc <dhcp_start>
}
 8016af2:	e01e      	b.n	8016b32 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	795b      	ldrb	r3, [r3, #5]
 8016af8:	2b08      	cmp	r3, #8
 8016afa:	d10b      	bne.n	8016b14 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	799b      	ldrb	r3, [r3, #6]
 8016b00:	2b01      	cmp	r3, #1
 8016b02:	d803      	bhi.n	8016b0c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8016b04:	6878      	ldr	r0, [r7, #4]
 8016b06:	f7ff fe01 	bl	801670c <dhcp_check>
}
 8016b0a:	e012      	b.n	8016b32 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8016b0c:	6878      	ldr	r0, [r7, #4]
 8016b0e:	f000 fa9f 	bl	8017050 <dhcp_bind>
}
 8016b12:	e00e      	b.n	8016b32 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	795b      	ldrb	r3, [r3, #5]
 8016b18:	2b03      	cmp	r3, #3
 8016b1a:	d10a      	bne.n	8016b32 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	799b      	ldrb	r3, [r3, #6]
 8016b20:	2b01      	cmp	r3, #1
 8016b22:	d803      	bhi.n	8016b2c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8016b24:	6878      	ldr	r0, [r7, #4]
 8016b26:	f000 fc9f 	bl	8017468 <dhcp_reboot>
}
 8016b2a:	e002      	b.n	8016b32 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8016b2c:	6878      	ldr	r0, [r7, #4]
 8016b2e:	f000 f9ed 	bl	8016f0c <dhcp_discover>
}
 8016b32:	bf00      	nop
 8016b34:	3710      	adds	r7, #16
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}

08016b3a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8016b3a:	b580      	push	{r7, lr}
 8016b3c:	b084      	sub	sp, #16
 8016b3e:	af00      	add	r7, sp, #0
 8016b40:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	6a1b      	ldr	r3, [r3, #32]
 8016b46:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	795b      	ldrb	r3, [r3, #5]
 8016b4c:	2b01      	cmp	r3, #1
 8016b4e:	d007      	beq.n	8016b60 <dhcp_t1_timeout+0x26>
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	795b      	ldrb	r3, [r3, #5]
 8016b54:	2b0a      	cmp	r3, #10
 8016b56:	d003      	beq.n	8016b60 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016b5c:	2b05      	cmp	r3, #5
 8016b5e:	d116      	bne.n	8016b8e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f000 fb39 	bl	80171d8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	899b      	ldrh	r3, [r3, #12]
 8016b6a:	461a      	mov	r2, r3
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	8a5b      	ldrh	r3, [r3, #18]
 8016b70:	1ad3      	subs	r3, r2, r3
 8016b72:	2b01      	cmp	r3, #1
 8016b74:	dd0b      	ble.n	8016b8e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	899b      	ldrh	r3, [r3, #12]
 8016b7a:	461a      	mov	r2, r3
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	8a5b      	ldrh	r3, [r3, #18]
 8016b80:	1ad3      	subs	r3, r2, r3
 8016b82:	0fda      	lsrs	r2, r3, #31
 8016b84:	4413      	add	r3, r2
 8016b86:	105b      	asrs	r3, r3, #1
 8016b88:	b29a      	uxth	r2, r3
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8016b8e:	bf00      	nop
 8016b90:	3710      	adds	r7, #16
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}

08016b96 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8016b96:	b580      	push	{r7, lr}
 8016b98:	b084      	sub	sp, #16
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	6a1b      	ldr	r3, [r3, #32]
 8016ba2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	795b      	ldrb	r3, [r3, #5]
 8016ba8:	2b01      	cmp	r3, #1
 8016baa:	d00b      	beq.n	8016bc4 <dhcp_t2_timeout+0x2e>
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	795b      	ldrb	r3, [r3, #5]
 8016bb0:	2b0a      	cmp	r3, #10
 8016bb2:	d007      	beq.n	8016bc4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016bb8:	2b05      	cmp	r3, #5
 8016bba:	d003      	beq.n	8016bc4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	795b      	ldrb	r3, [r3, #5]
 8016bc0:	2b04      	cmp	r3, #4
 8016bc2:	d116      	bne.n	8016bf2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8016bc4:	6878      	ldr	r0, [r7, #4]
 8016bc6:	f000 fbab 	bl	8017320 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	8a9b      	ldrh	r3, [r3, #20]
 8016bce:	461a      	mov	r2, r3
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	8a5b      	ldrh	r3, [r3, #18]
 8016bd4:	1ad3      	subs	r3, r2, r3
 8016bd6:	2b01      	cmp	r3, #1
 8016bd8:	dd0b      	ble.n	8016bf2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	8a9b      	ldrh	r3, [r3, #20]
 8016bde:	461a      	mov	r2, r3
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	8a5b      	ldrh	r3, [r3, #18]
 8016be4:	1ad3      	subs	r3, r2, r3
 8016be6:	0fda      	lsrs	r2, r3, #31
 8016be8:	4413      	add	r3, r2
 8016bea:	105b      	asrs	r3, r3, #1
 8016bec:	b29a      	uxth	r2, r3
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8016bf2:	bf00      	nop
 8016bf4:	3710      	adds	r7, #16
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}
	...

08016bfc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b084      	sub	sp, #16
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
 8016c04:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	6a1b      	ldr	r3, [r3, #32]
 8016c0a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	2200      	movs	r2, #0
 8016c10:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	2200      	movs	r2, #0
 8016c16:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8016c18:	4b26      	ldr	r3, [pc, #152]	; (8016cb4 <dhcp_handle_ack+0xb8>)
 8016c1a:	78db      	ldrb	r3, [r3, #3]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d003      	beq.n	8016c28 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8016c20:	4b25      	ldr	r3, [pc, #148]	; (8016cb8 <dhcp_handle_ack+0xbc>)
 8016c22:	68da      	ldr	r2, [r3, #12]
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8016c28:	4b22      	ldr	r3, [pc, #136]	; (8016cb4 <dhcp_handle_ack+0xb8>)
 8016c2a:	791b      	ldrb	r3, [r3, #4]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d004      	beq.n	8016c3a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016c30:	4b21      	ldr	r3, [pc, #132]	; (8016cb8 <dhcp_handle_ack+0xbc>)
 8016c32:	691a      	ldr	r2, [r3, #16]
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	62da      	str	r2, [r3, #44]	; 0x2c
 8016c38:	e004      	b.n	8016c44 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c3e:	085a      	lsrs	r2, r3, #1
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016c44:	4b1b      	ldr	r3, [pc, #108]	; (8016cb4 <dhcp_handle_ack+0xb8>)
 8016c46:	795b      	ldrb	r3, [r3, #5]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d004      	beq.n	8016c56 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016c4c:	4b1a      	ldr	r3, [pc, #104]	; (8016cb8 <dhcp_handle_ack+0xbc>)
 8016c4e:	695a      	ldr	r2, [r3, #20]
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	631a      	str	r2, [r3, #48]	; 0x30
 8016c54:	e007      	b.n	8016c66 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016c5a:	4613      	mov	r3, r2
 8016c5c:	00db      	lsls	r3, r3, #3
 8016c5e:	1a9b      	subs	r3, r3, r2
 8016c60:	08da      	lsrs	r2, r3, #3
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	691a      	ldr	r2, [r3, #16]
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8016c6e:	4b11      	ldr	r3, [pc, #68]	; (8016cb4 <dhcp_handle_ack+0xb8>)
 8016c70:	799b      	ldrb	r3, [r3, #6]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d00b      	beq.n	8016c8e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016c76:	4b10      	ldr	r3, [pc, #64]	; (8016cb8 <dhcp_handle_ack+0xbc>)
 8016c78:	699b      	ldr	r3, [r3, #24]
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f7f8 fc57 	bl	800f52e <lwip_htonl>
 8016c80:	4602      	mov	r2, r0
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	2201      	movs	r2, #1
 8016c8a:	71da      	strb	r2, [r3, #7]
 8016c8c:	e002      	b.n	8016c94 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	2200      	movs	r2, #0
 8016c92:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016c94:	4b07      	ldr	r3, [pc, #28]	; (8016cb4 <dhcp_handle_ack+0xb8>)
 8016c96:	79db      	ldrb	r3, [r3, #7]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d007      	beq.n	8016cac <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8016c9c:	4b06      	ldr	r3, [pc, #24]	; (8016cb8 <dhcp_handle_ack+0xbc>)
 8016c9e:	69db      	ldr	r3, [r3, #28]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7f8 fc44 	bl	800f52e <lwip_htonl>
 8016ca6:	4602      	mov	r2, r0
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016cac:	bf00      	nop
 8016cae:	3710      	adds	r7, #16
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd80      	pop	{r7, pc}
 8016cb4:	200078c0 	.word	0x200078c0
 8016cb8:	200078a0 	.word	0x200078a0

08016cbc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b084      	sub	sp, #16
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d102      	bne.n	8016cd0 <dhcp_start+0x14>
 8016cca:	f06f 030f 	mvn.w	r3, #15
 8016cce:	e059      	b.n	8016d84 <dhcp_start+0xc8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016cd6:	f003 0301 	and.w	r3, r3, #1
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d102      	bne.n	8016ce4 <dhcp_start+0x28>
 8016cde:	f06f 030f 	mvn.w	r3, #15
 8016ce2:	e04f      	b.n	8016d84 <dhcp_start+0xc8>
  dhcp = netif_dhcp_data(netif);
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	6a1b      	ldr	r3, [r3, #32]
 8016ce8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cee:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8016cf2:	d202      	bcs.n	8016cfa <dhcp_start+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8016cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cf8:	e044      	b.n	8016d84 <dhcp_start+0xc8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d10d      	bne.n	8016d1c <dhcp_start+0x60>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8016d00:	2034      	movs	r0, #52	; 0x34
 8016d02:	f7f8 fe7a 	bl	800f9fa <mem_malloc>
 8016d06:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d102      	bne.n	8016d14 <dhcp_start+0x58>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8016d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d12:	e037      	b.n	8016d84 <dhcp_start+0xc8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	68fa      	ldr	r2, [r7, #12]
 8016d18:	621a      	str	r2, [r3, #32]
 8016d1a:	e005      	b.n	8016d28 <dhcp_start+0x6c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	791b      	ldrb	r3, [r3, #4]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d001      	beq.n	8016d28 <dhcp_start+0x6c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016d24:	f7ff fcbe 	bl	80166a4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016d28:	2234      	movs	r2, #52	; 0x34
 8016d2a:	2100      	movs	r1, #0
 8016d2c:	68f8      	ldr	r0, [r7, #12]
 8016d2e:	f003 ff88 	bl	801ac42 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8016d32:	f7ff fc75 	bl	8016620 <dhcp_inc_pcb_refcount>
 8016d36:	4603      	mov	r3, r0
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d002      	beq.n	8016d42 <dhcp_start+0x86>
    return ERR_MEM;
 8016d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d40:	e020      	b.n	8016d84 <dhcp_start+0xc8>
  }
  dhcp->pcb_allocated = 1;
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	2201      	movs	r2, #1
 8016d46:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016d4e:	f003 0304 	and.w	r3, r3, #4
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d105      	bne.n	8016d62 <dhcp_start+0xa6>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8016d56:	2102      	movs	r1, #2
 8016d58:	68f8      	ldr	r0, [r7, #12]
 8016d5a:	f000 fcdd 	bl	8017718 <dhcp_set_state>
    return ERR_OK;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	e010      	b.n	8016d84 <dhcp_start+0xc8>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8016d62:	6878      	ldr	r0, [r7, #4]
 8016d64:	f000 f8d2 	bl	8016f0c <dhcp_discover>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016d6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d005      	beq.n	8016d80 <dhcp_start+0xc4>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f000 fc35 	bl	80175e4 <dhcp_release_and_stop>
    return ERR_MEM;
 8016d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d7e:	e001      	b.n	8016d84 <dhcp_start+0xc8>
  }
  return result;
 8016d80:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016d84:	4618      	mov	r0, r3
 8016d86:	3710      	adds	r7, #16
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}

08016d8c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b084      	sub	sp, #16
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	6a1b      	ldr	r3, [r3, #32]
 8016d98:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d01a      	beq.n	8016dd6 <dhcp_network_changed+0x4a>
    return;
  }
  switch (dhcp->state) {
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	795b      	ldrb	r3, [r3, #5]
 8016da4:	2b0a      	cmp	r3, #10
 8016da6:	d008      	beq.n	8016dba <dhcp_network_changed+0x2e>
 8016da8:	2b0a      	cmp	r3, #10
 8016daa:	dc0d      	bgt.n	8016dc8 <dhcp_network_changed+0x3c>
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d014      	beq.n	8016dda <dhcp_network_changed+0x4e>
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	db09      	blt.n	8016dc8 <dhcp_network_changed+0x3c>
 8016db4:	3b03      	subs	r3, #3
 8016db6:	2b02      	cmp	r3, #2
 8016db8:	d806      	bhi.n	8016dc8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	2200      	movs	r2, #0
 8016dbe:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8016dc0:	6878      	ldr	r0, [r7, #4]
 8016dc2:	f000 fb51 	bl	8017468 <dhcp_reboot>
      break;
 8016dc6:	e009      	b.n	8016ddc <dhcp_network_changed+0x50>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	2200      	movs	r2, #0
 8016dcc:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8016dce:	6878      	ldr	r0, [r7, #4]
 8016dd0:	f000 f89c 	bl	8016f0c <dhcp_discover>
      break;
 8016dd4:	e002      	b.n	8016ddc <dhcp_network_changed+0x50>
    return;
 8016dd6:	bf00      	nop
 8016dd8:	e000      	b.n	8016ddc <dhcp_network_changed+0x50>
      break;
 8016dda:	bf00      	nop
  }
}
 8016ddc:	3710      	adds	r7, #16
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}

08016de2 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016de2:	b580      	push	{r7, lr}
 8016de4:	b084      	sub	sp, #16
 8016de6:	af00      	add	r7, sp, #0
 8016de8:	6078      	str	r0, [r7, #4]
 8016dea:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d012      	beq.n	8016e18 <dhcp_arp_reply+0x36>
  dhcp = netif_dhcp_data(netif);
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	6a1b      	ldr	r3, [r3, #32]
 8016df6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d00c      	beq.n	8016e18 <dhcp_arp_reply+0x36>
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	795b      	ldrb	r3, [r3, #5]
 8016e02:	2b08      	cmp	r3, #8
 8016e04:	d108      	bne.n	8016e18 <dhcp_arp_reply+0x36>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	681a      	ldr	r2, [r3, #0]
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	69db      	ldr	r3, [r3, #28]
 8016e0e:	429a      	cmp	r2, r3
 8016e10:	d102      	bne.n	8016e18 <dhcp_arp_reply+0x36>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016e12:	6878      	ldr	r0, [r7, #4]
 8016e14:	f000 f804 	bl	8016e20 <dhcp_decline>
    }
  }
}
 8016e18:	3710      	adds	r7, #16
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
	...

08016e20 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016e20:	b5b0      	push	{r4, r5, r7, lr}
 8016e22:	b08a      	sub	sp, #40	; 0x28
 8016e24:	af02      	add	r7, sp, #8
 8016e26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	6a1b      	ldr	r3, [r3, #32]
 8016e2c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016e2e:	210c      	movs	r1, #12
 8016e30:	69b8      	ldr	r0, [r7, #24]
 8016e32:	f000 fc71 	bl	8017718 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8016e36:	f107 030c 	add.w	r3, r7, #12
 8016e3a:	2204      	movs	r2, #4
 8016e3c:	69b9      	ldr	r1, [r7, #24]
 8016e3e:	6878      	ldr	r0, [r7, #4]
 8016e40:	f001 f888 	bl	8017f54 <dhcp_create_msg>
 8016e44:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016e46:	697b      	ldr	r3, [r7, #20]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d035      	beq.n	8016eb8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	685b      	ldr	r3, [r3, #4]
 8016e50:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016e52:	89b8      	ldrh	r0, [r7, #12]
 8016e54:	693b      	ldr	r3, [r7, #16]
 8016e56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e5a:	2304      	movs	r3, #4
 8016e5c:	2232      	movs	r2, #50	; 0x32
 8016e5e:	f000 fc75 	bl	801774c <dhcp_option>
 8016e62:	4603      	mov	r3, r0
 8016e64:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016e66:	89bc      	ldrh	r4, [r7, #12]
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016e6e:	69bb      	ldr	r3, [r7, #24]
 8016e70:	69db      	ldr	r3, [r3, #28]
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7f8 fb5b 	bl	800f52e <lwip_htonl>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	461a      	mov	r2, r3
 8016e7c:	4629      	mov	r1, r5
 8016e7e:	4620      	mov	r0, r4
 8016e80:	f000 fcc1 	bl	8017806 <dhcp_option_long>
 8016e84:	4603      	mov	r3, r0
 8016e86:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016e88:	89b8      	ldrh	r0, [r7, #12]
 8016e8a:	693b      	ldr	r3, [r7, #16]
 8016e8c:	33f0      	adds	r3, #240	; 0xf0
 8016e8e:	697a      	ldr	r2, [r7, #20]
 8016e90:	4619      	mov	r1, r3
 8016e92:	f001 f911 	bl	80180b8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016e96:	4b19      	ldr	r3, [pc, #100]	; (8016efc <dhcp_decline+0xdc>)
 8016e98:	6818      	ldr	r0, [r3, #0]
 8016e9a:	4b19      	ldr	r3, [pc, #100]	; (8016f00 <dhcp_decline+0xe0>)
 8016e9c:	9301      	str	r3, [sp, #4]
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	9300      	str	r3, [sp, #0]
 8016ea2:	2343      	movs	r3, #67	; 0x43
 8016ea4:	4a17      	ldr	r2, [pc, #92]	; (8016f04 <dhcp_decline+0xe4>)
 8016ea6:	6979      	ldr	r1, [r7, #20]
 8016ea8:	f7ff f98a 	bl	80161c0 <udp_sendto_if_src>
 8016eac:	4603      	mov	r3, r0
 8016eae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016eb0:	6978      	ldr	r0, [r7, #20]
 8016eb2:	f7f9 fb1f 	bl	80104f4 <pbuf_free>
 8016eb6:	e001      	b.n	8016ebc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016eb8:	23ff      	movs	r3, #255	; 0xff
 8016eba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016ebc:	69bb      	ldr	r3, [r7, #24]
 8016ebe:	799b      	ldrb	r3, [r3, #6]
 8016ec0:	2bff      	cmp	r3, #255	; 0xff
 8016ec2:	d005      	beq.n	8016ed0 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016ec4:	69bb      	ldr	r3, [r7, #24]
 8016ec6:	799b      	ldrb	r3, [r3, #6]
 8016ec8:	3301      	adds	r3, #1
 8016eca:	b2da      	uxtb	r2, r3
 8016ecc:	69bb      	ldr	r3, [r7, #24]
 8016ece:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016ed0:	f242 7310 	movw	r3, #10000	; 0x2710
 8016ed4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016ed6:	89fb      	ldrh	r3, [r7, #14]
 8016ed8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016edc:	4a0a      	ldr	r2, [pc, #40]	; (8016f08 <dhcp_decline+0xe8>)
 8016ede:	fb82 1203 	smull	r1, r2, r2, r3
 8016ee2:	1152      	asrs	r2, r2, #5
 8016ee4:	17db      	asrs	r3, r3, #31
 8016ee6:	1ad3      	subs	r3, r2, r3
 8016ee8:	b29a      	uxth	r2, r3
 8016eea:	69bb      	ldr	r3, [r7, #24]
 8016eec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016eee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	3720      	adds	r7, #32
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8016efa:	bf00      	nop
 8016efc:	200078c8 	.word	0x200078c8
 8016f00:	0801d248 	.word	0x0801d248
 8016f04:	0801d24c 	.word	0x0801d24c
 8016f08:	10624dd3 	.word	0x10624dd3

08016f0c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b08a      	sub	sp, #40	; 0x28
 8016f10:	af02      	add	r7, sp, #8
 8016f12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	6a1b      	ldr	r3, [r3, #32]
 8016f18:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016f1e:	69bb      	ldr	r3, [r7, #24]
 8016f20:	2200      	movs	r2, #0
 8016f22:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8016f24:	2106      	movs	r1, #6
 8016f26:	69b8      	ldr	r0, [r7, #24]
 8016f28:	f000 fbf6 	bl	8017718 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016f2c:	f107 0308 	add.w	r3, r7, #8
 8016f30:	2201      	movs	r2, #1
 8016f32:	69b9      	ldr	r1, [r7, #24]
 8016f34:	6878      	ldr	r0, [r7, #4]
 8016f36:	f001 f80d 	bl	8017f54 <dhcp_create_msg>
 8016f3a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d04b      	beq.n	8016fda <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016f42:	693b      	ldr	r3, [r7, #16]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016f48:	8938      	ldrh	r0, [r7, #8]
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f50:	2302      	movs	r3, #2
 8016f52:	2239      	movs	r2, #57	; 0x39
 8016f54:	f000 fbfa 	bl	801774c <dhcp_option>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016f5c:	8938      	ldrh	r0, [r7, #8]
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f68:	461a      	mov	r2, r3
 8016f6a:	f000 fc29 	bl	80177c0 <dhcp_option_short>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016f72:	8938      	ldrh	r0, [r7, #8]
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f7a:	2303      	movs	r3, #3
 8016f7c:	2237      	movs	r2, #55	; 0x37
 8016f7e:	f000 fbe5 	bl	801774c <dhcp_option>
 8016f82:	4603      	mov	r3, r0
 8016f84:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f86:	2300      	movs	r3, #0
 8016f88:	77fb      	strb	r3, [r7, #31]
 8016f8a:	e00e      	b.n	8016faa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016f8c:	8938      	ldrh	r0, [r7, #8]
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f94:	7ffb      	ldrb	r3, [r7, #31]
 8016f96:	4a29      	ldr	r2, [pc, #164]	; (801703c <dhcp_discover+0x130>)
 8016f98:	5cd3      	ldrb	r3, [r2, r3]
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	f000 fbf9 	bl	8017792 <dhcp_option_byte>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016fa4:	7ffb      	ldrb	r3, [r7, #31]
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	77fb      	strb	r3, [r7, #31]
 8016faa:	7ffb      	ldrb	r3, [r7, #31]
 8016fac:	2b02      	cmp	r3, #2
 8016fae:	d9ed      	bls.n	8016f8c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016fb0:	8938      	ldrh	r0, [r7, #8]
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	33f0      	adds	r3, #240	; 0xf0
 8016fb6:	693a      	ldr	r2, [r7, #16]
 8016fb8:	4619      	mov	r1, r3
 8016fba:	f001 f87d 	bl	80180b8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016fbe:	4b20      	ldr	r3, [pc, #128]	; (8017040 <dhcp_discover+0x134>)
 8016fc0:	6818      	ldr	r0, [r3, #0]
 8016fc2:	4b20      	ldr	r3, [pc, #128]	; (8017044 <dhcp_discover+0x138>)
 8016fc4:	9301      	str	r3, [sp, #4]
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	9300      	str	r3, [sp, #0]
 8016fca:	2343      	movs	r3, #67	; 0x43
 8016fcc:	4a1e      	ldr	r2, [pc, #120]	; (8017048 <dhcp_discover+0x13c>)
 8016fce:	6939      	ldr	r1, [r7, #16]
 8016fd0:	f7ff f8f6 	bl	80161c0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016fd4:	6938      	ldr	r0, [r7, #16]
 8016fd6:	f7f9 fa8d 	bl	80104f4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016fda:	69bb      	ldr	r3, [r7, #24]
 8016fdc:	799b      	ldrb	r3, [r3, #6]
 8016fde:	2bff      	cmp	r3, #255	; 0xff
 8016fe0:	d005      	beq.n	8016fee <dhcp_discover+0xe2>
    dhcp->tries++;
 8016fe2:	69bb      	ldr	r3, [r7, #24]
 8016fe4:	799b      	ldrb	r3, [r3, #6]
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	b2da      	uxtb	r2, r3
 8016fea:	69bb      	ldr	r3, [r7, #24]
 8016fec:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016fee:	69bb      	ldr	r3, [r7, #24]
 8016ff0:	799b      	ldrb	r3, [r3, #6]
 8016ff2:	2b05      	cmp	r3, #5
 8016ff4:	d80d      	bhi.n	8017012 <dhcp_discover+0x106>
 8016ff6:	69bb      	ldr	r3, [r7, #24]
 8016ff8:	799b      	ldrb	r3, [r3, #6]
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	2301      	movs	r3, #1
 8016ffe:	4093      	lsls	r3, r2
 8017000:	b29b      	uxth	r3, r3
 8017002:	461a      	mov	r2, r3
 8017004:	0152      	lsls	r2, r2, #5
 8017006:	1ad2      	subs	r2, r2, r3
 8017008:	0092      	lsls	r2, r2, #2
 801700a:	4413      	add	r3, r2
 801700c:	00db      	lsls	r3, r3, #3
 801700e:	b29b      	uxth	r3, r3
 8017010:	e001      	b.n	8017016 <dhcp_discover+0x10a>
 8017012:	f64e 2360 	movw	r3, #60000	; 0xea60
 8017016:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017018:	897b      	ldrh	r3, [r7, #10]
 801701a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801701e:	4a0b      	ldr	r2, [pc, #44]	; (801704c <dhcp_discover+0x140>)
 8017020:	fb82 1203 	smull	r1, r2, r2, r3
 8017024:	1152      	asrs	r2, r2, #5
 8017026:	17db      	asrs	r3, r3, #31
 8017028:	1ad3      	subs	r3, r2, r3
 801702a:	b29a      	uxth	r2, r3
 801702c:	69bb      	ldr	r3, [r7, #24]
 801702e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017030:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017034:	4618      	mov	r0, r3
 8017036:	3720      	adds	r7, #32
 8017038:	46bd      	mov	sp, r7
 801703a:	bd80      	pop	{r7, pc}
 801703c:	20000144 	.word	0x20000144
 8017040:	200078c8 	.word	0x200078c8
 8017044:	0801d248 	.word	0x0801d248
 8017048:	0801d24c 	.word	0x0801d24c
 801704c:	10624dd3 	.word	0x10624dd3

08017050 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b088      	sub	sp, #32
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2b00      	cmp	r3, #0
 801705c:	f000 80b6 	beq.w	80171cc <dhcp_bind+0x17c>
  dhcp = netif_dhcp_data(netif);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	6a1b      	ldr	r3, [r3, #32]
 8017064:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8017066:	69fb      	ldr	r3, [r7, #28]
 8017068:	2b00      	cmp	r3, #0
 801706a:	f000 80af 	beq.w	80171cc <dhcp_bind+0x17c>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801706e:	69fb      	ldr	r3, [r7, #28]
 8017070:	2200      	movs	r2, #0
 8017072:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017074:	69fb      	ldr	r3, [r7, #28]
 8017076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801707c:	d019      	beq.n	80170b2 <dhcp_bind+0x62>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801707e:	69fb      	ldr	r3, [r7, #28]
 8017080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017082:	331e      	adds	r3, #30
 8017084:	4a53      	ldr	r2, [pc, #332]	; (80171d4 <dhcp_bind+0x184>)
 8017086:	fba2 2303 	umull	r2, r3, r2, r3
 801708a:	095b      	lsrs	r3, r3, #5
 801708c:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 801708e:	69bb      	ldr	r3, [r7, #24]
 8017090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017094:	d302      	bcc.n	801709c <dhcp_bind+0x4c>
      timeout = 0xffff;
 8017096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801709a:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801709c:	69bb      	ldr	r3, [r7, #24]
 801709e:	b29a      	uxth	r2, r3
 80170a0:	69fb      	ldr	r3, [r7, #28]
 80170a2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80170a4:	69fb      	ldr	r3, [r7, #28]
 80170a6:	8a9b      	ldrh	r3, [r3, #20]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d102      	bne.n	80170b2 <dhcp_bind+0x62>
      dhcp->t0_timeout = 1;
 80170ac:	69fb      	ldr	r3, [r7, #28]
 80170ae:	2201      	movs	r2, #1
 80170b0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80170b2:	69fb      	ldr	r3, [r7, #28]
 80170b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80170ba:	d01d      	beq.n	80170f8 <dhcp_bind+0xa8>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80170bc:	69fb      	ldr	r3, [r7, #28]
 80170be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170c0:	331e      	adds	r3, #30
 80170c2:	4a44      	ldr	r2, [pc, #272]	; (80171d4 <dhcp_bind+0x184>)
 80170c4:	fba2 2303 	umull	r2, r3, r2, r3
 80170c8:	095b      	lsrs	r3, r3, #5
 80170ca:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80170cc:	69bb      	ldr	r3, [r7, #24]
 80170ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170d2:	d302      	bcc.n	80170da <dhcp_bind+0x8a>
      timeout = 0xffff;
 80170d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170d8:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80170da:	69bb      	ldr	r3, [r7, #24]
 80170dc:	b29a      	uxth	r2, r3
 80170de:	69fb      	ldr	r3, [r7, #28]
 80170e0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80170e2:	69fb      	ldr	r3, [r7, #28]
 80170e4:	895b      	ldrh	r3, [r3, #10]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d102      	bne.n	80170f0 <dhcp_bind+0xa0>
      dhcp->t1_timeout = 1;
 80170ea:	69fb      	ldr	r3, [r7, #28]
 80170ec:	2201      	movs	r2, #1
 80170ee:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80170f0:	69fb      	ldr	r3, [r7, #28]
 80170f2:	895a      	ldrh	r2, [r3, #10]
 80170f4:	69fb      	ldr	r3, [r7, #28]
 80170f6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80170f8:	69fb      	ldr	r3, [r7, #28]
 80170fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017100:	d01d      	beq.n	801713e <dhcp_bind+0xee>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017102:	69fb      	ldr	r3, [r7, #28]
 8017104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017106:	331e      	adds	r3, #30
 8017108:	4a32      	ldr	r2, [pc, #200]	; (80171d4 <dhcp_bind+0x184>)
 801710a:	fba2 2303 	umull	r2, r3, r2, r3
 801710e:	095b      	lsrs	r3, r3, #5
 8017110:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8017112:	69bb      	ldr	r3, [r7, #24]
 8017114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017118:	d302      	bcc.n	8017120 <dhcp_bind+0xd0>
      timeout = 0xffff;
 801711a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801711e:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8017120:	69bb      	ldr	r3, [r7, #24]
 8017122:	b29a      	uxth	r2, r3
 8017124:	69fb      	ldr	r3, [r7, #28]
 8017126:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8017128:	69fb      	ldr	r3, [r7, #28]
 801712a:	899b      	ldrh	r3, [r3, #12]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d102      	bne.n	8017136 <dhcp_bind+0xe6>
      dhcp->t2_timeout = 1;
 8017130:	69fb      	ldr	r3, [r7, #28]
 8017132:	2201      	movs	r2, #1
 8017134:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8017136:	69fb      	ldr	r3, [r7, #28]
 8017138:	899a      	ldrh	r2, [r3, #12]
 801713a:	69fb      	ldr	r3, [r7, #28]
 801713c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801713e:	69fb      	ldr	r3, [r7, #28]
 8017140:	895a      	ldrh	r2, [r3, #10]
 8017142:	69fb      	ldr	r3, [r7, #28]
 8017144:	899b      	ldrh	r3, [r3, #12]
 8017146:	429a      	cmp	r2, r3
 8017148:	d306      	bcc.n	8017158 <dhcp_bind+0x108>
 801714a:	69fb      	ldr	r3, [r7, #28]
 801714c:	899b      	ldrh	r3, [r3, #12]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d002      	beq.n	8017158 <dhcp_bind+0x108>
    dhcp->t1_timeout = 0;
 8017152:	69fb      	ldr	r3, [r7, #28]
 8017154:	2200      	movs	r2, #0
 8017156:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8017158:	69fb      	ldr	r3, [r7, #28]
 801715a:	79db      	ldrb	r3, [r3, #7]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d003      	beq.n	8017168 <dhcp_bind+0x118>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8017160:	69fb      	ldr	r3, [r7, #28]
 8017162:	6a1b      	ldr	r3, [r3, #32]
 8017164:	613b      	str	r3, [r7, #16]
 8017166:	e014      	b.n	8017192 <dhcp_bind+0x142>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8017168:	69fb      	ldr	r3, [r7, #28]
 801716a:	331c      	adds	r3, #28
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8017170:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017174:	2b00      	cmp	r3, #0
 8017176:	db02      	blt.n	801717e <dhcp_bind+0x12e>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8017178:	23ff      	movs	r3, #255	; 0xff
 801717a:	613b      	str	r3, [r7, #16]
 801717c:	e009      	b.n	8017192 <dhcp_bind+0x142>
    } else if (first_octet >= 192) {
 801717e:	7dfb      	ldrb	r3, [r7, #23]
 8017180:	2bbf      	cmp	r3, #191	; 0xbf
 8017182:	d903      	bls.n	801718c <dhcp_bind+0x13c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8017184:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017188:	613b      	str	r3, [r7, #16]
 801718a:	e002      	b.n	8017192 <dhcp_bind+0x142>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801718c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017190:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8017192:	69fb      	ldr	r3, [r7, #28]
 8017194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017196:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d108      	bne.n	80171b0 <dhcp_bind+0x160>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801719e:	69fb      	ldr	r3, [r7, #28]
 80171a0:	69da      	ldr	r2, [r3, #28]
 80171a2:	693b      	ldr	r3, [r7, #16]
 80171a4:	4013      	ands	r3, r2
 80171a6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80171ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80171b0:	210a      	movs	r1, #10
 80171b2:	69f8      	ldr	r0, [r7, #28]
 80171b4:	f000 fab0 	bl	8017718 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80171b8:	69fb      	ldr	r3, [r7, #28]
 80171ba:	f103 011c 	add.w	r1, r3, #28
 80171be:	f107 030c 	add.w	r3, r7, #12
 80171c2:	f107 0210 	add.w	r2, r7, #16
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	f7f8 fdfe 	bl	800fdc8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80171cc:	3720      	adds	r7, #32
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}
 80171d2:	bf00      	nop
 80171d4:	88888889 	.word	0x88888889

080171d8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b08a      	sub	sp, #40	; 0x28
 80171dc:	af02      	add	r7, sp, #8
 80171de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	6a1b      	ldr	r3, [r3, #32]
 80171e4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80171e6:	2105      	movs	r1, #5
 80171e8:	69b8      	ldr	r0, [r7, #24]
 80171ea:	f000 fa95 	bl	8017718 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80171ee:	f107 030c 	add.w	r3, r7, #12
 80171f2:	2203      	movs	r2, #3
 80171f4:	69b9      	ldr	r1, [r7, #24]
 80171f6:	6878      	ldr	r0, [r7, #4]
 80171f8:	f000 feac 	bl	8017f54 <dhcp_create_msg>
 80171fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80171fe:	697b      	ldr	r3, [r7, #20]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d057      	beq.n	80172b4 <dhcp_renew+0xdc>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017204:	697b      	ldr	r3, [r7, #20]
 8017206:	685b      	ldr	r3, [r3, #4]
 8017208:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801720a:	89b8      	ldrh	r0, [r7, #12]
 801720c:	693b      	ldr	r3, [r7, #16]
 801720e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017212:	2302      	movs	r3, #2
 8017214:	2239      	movs	r2, #57	; 0x39
 8017216:	f000 fa99 	bl	801774c <dhcp_option>
 801721a:	4603      	mov	r3, r0
 801721c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801721e:	89b8      	ldrh	r0, [r7, #12]
 8017220:	693b      	ldr	r3, [r7, #16]
 8017222:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801722a:	461a      	mov	r2, r3
 801722c:	f000 fac8 	bl	80177c0 <dhcp_option_short>
 8017230:	4603      	mov	r3, r0
 8017232:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017234:	89b8      	ldrh	r0, [r7, #12]
 8017236:	693b      	ldr	r3, [r7, #16]
 8017238:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801723c:	2303      	movs	r3, #3
 801723e:	2237      	movs	r2, #55	; 0x37
 8017240:	f000 fa84 	bl	801774c <dhcp_option>
 8017244:	4603      	mov	r3, r0
 8017246:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017248:	2300      	movs	r3, #0
 801724a:	77bb      	strb	r3, [r7, #30]
 801724c:	e00e      	b.n	801726c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801724e:	89b8      	ldrh	r0, [r7, #12]
 8017250:	693b      	ldr	r3, [r7, #16]
 8017252:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017256:	7fbb      	ldrb	r3, [r7, #30]
 8017258:	4a2e      	ldr	r2, [pc, #184]	; (8017314 <dhcp_renew+0x13c>)
 801725a:	5cd3      	ldrb	r3, [r2, r3]
 801725c:	461a      	mov	r2, r3
 801725e:	f000 fa98 	bl	8017792 <dhcp_option_byte>
 8017262:	4603      	mov	r3, r0
 8017264:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017266:	7fbb      	ldrb	r3, [r7, #30]
 8017268:	3301      	adds	r3, #1
 801726a:	77bb      	strb	r3, [r7, #30]
 801726c:	7fbb      	ldrb	r3, [r7, #30]
 801726e:	2b02      	cmp	r3, #2
 8017270:	d9ed      	bls.n	801724e <dhcp_renew+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8017272:	89b8      	ldrh	r0, [r7, #12]
 8017274:	693b      	ldr	r3, [r7, #16]
 8017276:	33f0      	adds	r3, #240	; 0xf0
 8017278:	687a      	ldr	r2, [r7, #4]
 801727a:	4619      	mov	r1, r3
 801727c:	f000 faf8 	bl	8017870 <dhcp_option_hostname>
 8017280:	4603      	mov	r3, r0
 8017282:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017284:	89b8      	ldrh	r0, [r7, #12]
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	33f0      	adds	r3, #240	; 0xf0
 801728a:	697a      	ldr	r2, [r7, #20]
 801728c:	4619      	mov	r1, r3
 801728e:	f000 ff13 	bl	80180b8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017292:	4b21      	ldr	r3, [pc, #132]	; (8017318 <dhcp_renew+0x140>)
 8017294:	6818      	ldr	r0, [r3, #0]
 8017296:	69bb      	ldr	r3, [r7, #24]
 8017298:	f103 0218 	add.w	r2, r3, #24
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	9300      	str	r3, [sp, #0]
 80172a0:	2343      	movs	r3, #67	; 0x43
 80172a2:	6979      	ldr	r1, [r7, #20]
 80172a4:	f7fe ff40 	bl	8016128 <udp_sendto_if>
 80172a8:	4603      	mov	r3, r0
 80172aa:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80172ac:	6978      	ldr	r0, [r7, #20]
 80172ae:	f7f9 f921 	bl	80104f4 <pbuf_free>
 80172b2:	e001      	b.n	80172b8 <dhcp_renew+0xe0>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80172b4:	23ff      	movs	r3, #255	; 0xff
 80172b6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80172b8:	69bb      	ldr	r3, [r7, #24]
 80172ba:	799b      	ldrb	r3, [r3, #6]
 80172bc:	2bff      	cmp	r3, #255	; 0xff
 80172be:	d005      	beq.n	80172cc <dhcp_renew+0xf4>
    dhcp->tries++;
 80172c0:	69bb      	ldr	r3, [r7, #24]
 80172c2:	799b      	ldrb	r3, [r3, #6]
 80172c4:	3301      	adds	r3, #1
 80172c6:	b2da      	uxtb	r2, r3
 80172c8:	69bb      	ldr	r3, [r7, #24]
 80172ca:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80172cc:	69bb      	ldr	r3, [r7, #24]
 80172ce:	799b      	ldrb	r3, [r3, #6]
 80172d0:	2b09      	cmp	r3, #9
 80172d2:	d80a      	bhi.n	80172ea <dhcp_renew+0x112>
 80172d4:	69bb      	ldr	r3, [r7, #24]
 80172d6:	799b      	ldrb	r3, [r3, #6]
 80172d8:	b29b      	uxth	r3, r3
 80172da:	461a      	mov	r2, r3
 80172dc:	0152      	lsls	r2, r2, #5
 80172de:	1ad2      	subs	r2, r2, r3
 80172e0:	0092      	lsls	r2, r2, #2
 80172e2:	4413      	add	r3, r2
 80172e4:	011b      	lsls	r3, r3, #4
 80172e6:	b29b      	uxth	r3, r3
 80172e8:	e001      	b.n	80172ee <dhcp_renew+0x116>
 80172ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80172ee:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80172f0:	89fb      	ldrh	r3, [r7, #14]
 80172f2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80172f6:	4a09      	ldr	r2, [pc, #36]	; (801731c <dhcp_renew+0x144>)
 80172f8:	fb82 1203 	smull	r1, r2, r2, r3
 80172fc:	1152      	asrs	r2, r2, #5
 80172fe:	17db      	asrs	r3, r3, #31
 8017300:	1ad3      	subs	r3, r2, r3
 8017302:	b29a      	uxth	r2, r3
 8017304:	69bb      	ldr	r3, [r7, #24]
 8017306:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017308:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801730c:	4618      	mov	r0, r3
 801730e:	3720      	adds	r7, #32
 8017310:	46bd      	mov	sp, r7
 8017312:	bd80      	pop	{r7, pc}
 8017314:	20000144 	.word	0x20000144
 8017318:	200078c8 	.word	0x200078c8
 801731c:	10624dd3 	.word	0x10624dd3

08017320 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b08a      	sub	sp, #40	; 0x28
 8017324:	af02      	add	r7, sp, #8
 8017326:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6a1b      	ldr	r3, [r3, #32]
 801732c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801732e:	2104      	movs	r1, #4
 8017330:	69b8      	ldr	r0, [r7, #24]
 8017332:	f000 f9f1 	bl	8017718 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017336:	f107 030c 	add.w	r3, r7, #12
 801733a:	2203      	movs	r2, #3
 801733c:	69b9      	ldr	r1, [r7, #24]
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f000 fe08 	bl	8017f54 <dhcp_create_msg>
 8017344:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017346:	697b      	ldr	r3, [r7, #20]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d055      	beq.n	80173f8 <dhcp_rebind+0xd8>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801734c:	697b      	ldr	r3, [r7, #20]
 801734e:	685b      	ldr	r3, [r3, #4]
 8017350:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017352:	89b8      	ldrh	r0, [r7, #12]
 8017354:	693b      	ldr	r3, [r7, #16]
 8017356:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801735a:	2302      	movs	r3, #2
 801735c:	2239      	movs	r2, #57	; 0x39
 801735e:	f000 f9f5 	bl	801774c <dhcp_option>
 8017362:	4603      	mov	r3, r0
 8017364:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017366:	89b8      	ldrh	r0, [r7, #12]
 8017368:	693b      	ldr	r3, [r7, #16]
 801736a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017372:	461a      	mov	r2, r3
 8017374:	f000 fa24 	bl	80177c0 <dhcp_option_short>
 8017378:	4603      	mov	r3, r0
 801737a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801737c:	89b8      	ldrh	r0, [r7, #12]
 801737e:	693b      	ldr	r3, [r7, #16]
 8017380:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017384:	2303      	movs	r3, #3
 8017386:	2237      	movs	r2, #55	; 0x37
 8017388:	f000 f9e0 	bl	801774c <dhcp_option>
 801738c:	4603      	mov	r3, r0
 801738e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017390:	2300      	movs	r3, #0
 8017392:	77bb      	strb	r3, [r7, #30]
 8017394:	e00e      	b.n	80173b4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017396:	89b8      	ldrh	r0, [r7, #12]
 8017398:	693b      	ldr	r3, [r7, #16]
 801739a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801739e:	7fbb      	ldrb	r3, [r7, #30]
 80173a0:	4a2d      	ldr	r2, [pc, #180]	; (8017458 <dhcp_rebind+0x138>)
 80173a2:	5cd3      	ldrb	r3, [r2, r3]
 80173a4:	461a      	mov	r2, r3
 80173a6:	f000 f9f4 	bl	8017792 <dhcp_option_byte>
 80173aa:	4603      	mov	r3, r0
 80173ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80173ae:	7fbb      	ldrb	r3, [r7, #30]
 80173b0:	3301      	adds	r3, #1
 80173b2:	77bb      	strb	r3, [r7, #30]
 80173b4:	7fbb      	ldrb	r3, [r7, #30]
 80173b6:	2b02      	cmp	r3, #2
 80173b8:	d9ed      	bls.n	8017396 <dhcp_rebind+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 80173ba:	89b8      	ldrh	r0, [r7, #12]
 80173bc:	693b      	ldr	r3, [r7, #16]
 80173be:	33f0      	adds	r3, #240	; 0xf0
 80173c0:	687a      	ldr	r2, [r7, #4]
 80173c2:	4619      	mov	r1, r3
 80173c4:	f000 fa54 	bl	8017870 <dhcp_option_hostname>
 80173c8:	4603      	mov	r3, r0
 80173ca:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80173cc:	89b8      	ldrh	r0, [r7, #12]
 80173ce:	693b      	ldr	r3, [r7, #16]
 80173d0:	33f0      	adds	r3, #240	; 0xf0
 80173d2:	697a      	ldr	r2, [r7, #20]
 80173d4:	4619      	mov	r1, r3
 80173d6:	f000 fe6f 	bl	80180b8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80173da:	4b20      	ldr	r3, [pc, #128]	; (801745c <dhcp_rebind+0x13c>)
 80173dc:	6818      	ldr	r0, [r3, #0]
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	9300      	str	r3, [sp, #0]
 80173e2:	2343      	movs	r3, #67	; 0x43
 80173e4:	4a1e      	ldr	r2, [pc, #120]	; (8017460 <dhcp_rebind+0x140>)
 80173e6:	6979      	ldr	r1, [r7, #20]
 80173e8:	f7fe fe9e 	bl	8016128 <udp_sendto_if>
 80173ec:	4603      	mov	r3, r0
 80173ee:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80173f0:	6978      	ldr	r0, [r7, #20]
 80173f2:	f7f9 f87f 	bl	80104f4 <pbuf_free>
 80173f6:	e001      	b.n	80173fc <dhcp_rebind+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80173f8:	23ff      	movs	r3, #255	; 0xff
 80173fa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80173fc:	69bb      	ldr	r3, [r7, #24]
 80173fe:	799b      	ldrb	r3, [r3, #6]
 8017400:	2bff      	cmp	r3, #255	; 0xff
 8017402:	d005      	beq.n	8017410 <dhcp_rebind+0xf0>
    dhcp->tries++;
 8017404:	69bb      	ldr	r3, [r7, #24]
 8017406:	799b      	ldrb	r3, [r3, #6]
 8017408:	3301      	adds	r3, #1
 801740a:	b2da      	uxtb	r2, r3
 801740c:	69bb      	ldr	r3, [r7, #24]
 801740e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017410:	69bb      	ldr	r3, [r7, #24]
 8017412:	799b      	ldrb	r3, [r3, #6]
 8017414:	2b09      	cmp	r3, #9
 8017416:	d80a      	bhi.n	801742e <dhcp_rebind+0x10e>
 8017418:	69bb      	ldr	r3, [r7, #24]
 801741a:	799b      	ldrb	r3, [r3, #6]
 801741c:	b29b      	uxth	r3, r3
 801741e:	461a      	mov	r2, r3
 8017420:	0152      	lsls	r2, r2, #5
 8017422:	1ad2      	subs	r2, r2, r3
 8017424:	0092      	lsls	r2, r2, #2
 8017426:	4413      	add	r3, r2
 8017428:	00db      	lsls	r3, r3, #3
 801742a:	b29b      	uxth	r3, r3
 801742c:	e001      	b.n	8017432 <dhcp_rebind+0x112>
 801742e:	f242 7310 	movw	r3, #10000	; 0x2710
 8017432:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017434:	89fb      	ldrh	r3, [r7, #14]
 8017436:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801743a:	4a0a      	ldr	r2, [pc, #40]	; (8017464 <dhcp_rebind+0x144>)
 801743c:	fb82 1203 	smull	r1, r2, r2, r3
 8017440:	1152      	asrs	r2, r2, #5
 8017442:	17db      	asrs	r3, r3, #31
 8017444:	1ad3      	subs	r3, r2, r3
 8017446:	b29a      	uxth	r2, r3
 8017448:	69bb      	ldr	r3, [r7, #24]
 801744a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801744c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017450:	4618      	mov	r0, r3
 8017452:	3720      	adds	r7, #32
 8017454:	46bd      	mov	sp, r7
 8017456:	bd80      	pop	{r7, pc}
 8017458:	20000144 	.word	0x20000144
 801745c:	200078c8 	.word	0x200078c8
 8017460:	0801d24c 	.word	0x0801d24c
 8017464:	10624dd3 	.word	0x10624dd3

08017468 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8017468:	b5b0      	push	{r4, r5, r7, lr}
 801746a:	b08a      	sub	sp, #40	; 0x28
 801746c:	af02      	add	r7, sp, #8
 801746e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6a1b      	ldr	r3, [r3, #32]
 8017474:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8017476:	2103      	movs	r1, #3
 8017478:	69b8      	ldr	r0, [r7, #24]
 801747a:	f000 f94d 	bl	8017718 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801747e:	f107 030c 	add.w	r3, r7, #12
 8017482:	2203      	movs	r2, #3
 8017484:	69b9      	ldr	r1, [r7, #24]
 8017486:	6878      	ldr	r0, [r7, #4]
 8017488:	f000 fd64 	bl	8017f54 <dhcp_create_msg>
 801748c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801748e:	697b      	ldr	r3, [r7, #20]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d06f      	beq.n	8017574 <dhcp_reboot+0x10c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017494:	697b      	ldr	r3, [r7, #20]
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801749a:	89b8      	ldrh	r0, [r7, #12]
 801749c:	693b      	ldr	r3, [r7, #16]
 801749e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174a2:	2302      	movs	r3, #2
 80174a4:	2239      	movs	r2, #57	; 0x39
 80174a6:	f000 f951 	bl	801774c <dhcp_option>
 80174aa:	4603      	mov	r3, r0
 80174ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80174ae:	89b8      	ldrh	r0, [r7, #12]
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	33f0      	adds	r3, #240	; 0xf0
 80174b4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80174b8:	4619      	mov	r1, r3
 80174ba:	f000 f981 	bl	80177c0 <dhcp_option_short>
 80174be:	4603      	mov	r3, r0
 80174c0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80174c2:	89b8      	ldrh	r0, [r7, #12]
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174ca:	2304      	movs	r3, #4
 80174cc:	2232      	movs	r2, #50	; 0x32
 80174ce:	f000 f93d 	bl	801774c <dhcp_option>
 80174d2:	4603      	mov	r3, r0
 80174d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80174d6:	89bc      	ldrh	r4, [r7, #12]
 80174d8:	693b      	ldr	r3, [r7, #16]
 80174da:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80174de:	69bb      	ldr	r3, [r7, #24]
 80174e0:	69db      	ldr	r3, [r3, #28]
 80174e2:	4618      	mov	r0, r3
 80174e4:	f7f8 f823 	bl	800f52e <lwip_htonl>
 80174e8:	4603      	mov	r3, r0
 80174ea:	461a      	mov	r2, r3
 80174ec:	4629      	mov	r1, r5
 80174ee:	4620      	mov	r0, r4
 80174f0:	f000 f989 	bl	8017806 <dhcp_option_long>
 80174f4:	4603      	mov	r3, r0
 80174f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80174f8:	89b8      	ldrh	r0, [r7, #12]
 80174fa:	693b      	ldr	r3, [r7, #16]
 80174fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017500:	2303      	movs	r3, #3
 8017502:	2237      	movs	r2, #55	; 0x37
 8017504:	f000 f922 	bl	801774c <dhcp_option>
 8017508:	4603      	mov	r3, r0
 801750a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801750c:	2300      	movs	r3, #0
 801750e:	77bb      	strb	r3, [r7, #30]
 8017510:	e00e      	b.n	8017530 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017512:	89b8      	ldrh	r0, [r7, #12]
 8017514:	693b      	ldr	r3, [r7, #16]
 8017516:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801751a:	7fbb      	ldrb	r3, [r7, #30]
 801751c:	4a2d      	ldr	r2, [pc, #180]	; (80175d4 <dhcp_reboot+0x16c>)
 801751e:	5cd3      	ldrb	r3, [r2, r3]
 8017520:	461a      	mov	r2, r3
 8017522:	f000 f936 	bl	8017792 <dhcp_option_byte>
 8017526:	4603      	mov	r3, r0
 8017528:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801752a:	7fbb      	ldrb	r3, [r7, #30]
 801752c:	3301      	adds	r3, #1
 801752e:	77bb      	strb	r3, [r7, #30]
 8017530:	7fbb      	ldrb	r3, [r7, #30]
 8017532:	2b02      	cmp	r3, #2
 8017534:	d9ed      	bls.n	8017512 <dhcp_reboot+0xaa>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8017536:	89b8      	ldrh	r0, [r7, #12]
 8017538:	693b      	ldr	r3, [r7, #16]
 801753a:	33f0      	adds	r3, #240	; 0xf0
 801753c:	687a      	ldr	r2, [r7, #4]
 801753e:	4619      	mov	r1, r3
 8017540:	f000 f996 	bl	8017870 <dhcp_option_hostname>
 8017544:	4603      	mov	r3, r0
 8017546:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017548:	89b8      	ldrh	r0, [r7, #12]
 801754a:	693b      	ldr	r3, [r7, #16]
 801754c:	33f0      	adds	r3, #240	; 0xf0
 801754e:	697a      	ldr	r2, [r7, #20]
 8017550:	4619      	mov	r1, r3
 8017552:	f000 fdb1 	bl	80180b8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017556:	4b20      	ldr	r3, [pc, #128]	; (80175d8 <dhcp_reboot+0x170>)
 8017558:	6818      	ldr	r0, [r3, #0]
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	9300      	str	r3, [sp, #0]
 801755e:	2343      	movs	r3, #67	; 0x43
 8017560:	4a1e      	ldr	r2, [pc, #120]	; (80175dc <dhcp_reboot+0x174>)
 8017562:	6979      	ldr	r1, [r7, #20]
 8017564:	f7fe fde0 	bl	8016128 <udp_sendto_if>
 8017568:	4603      	mov	r3, r0
 801756a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801756c:	6978      	ldr	r0, [r7, #20]
 801756e:	f7f8 ffc1 	bl	80104f4 <pbuf_free>
 8017572:	e001      	b.n	8017578 <dhcp_reboot+0x110>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017574:	23ff      	movs	r3, #255	; 0xff
 8017576:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017578:	69bb      	ldr	r3, [r7, #24]
 801757a:	799b      	ldrb	r3, [r3, #6]
 801757c:	2bff      	cmp	r3, #255	; 0xff
 801757e:	d005      	beq.n	801758c <dhcp_reboot+0x124>
    dhcp->tries++;
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	799b      	ldrb	r3, [r3, #6]
 8017584:	3301      	adds	r3, #1
 8017586:	b2da      	uxtb	r2, r3
 8017588:	69bb      	ldr	r3, [r7, #24]
 801758a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801758c:	69bb      	ldr	r3, [r7, #24]
 801758e:	799b      	ldrb	r3, [r3, #6]
 8017590:	2b09      	cmp	r3, #9
 8017592:	d80a      	bhi.n	80175aa <dhcp_reboot+0x142>
 8017594:	69bb      	ldr	r3, [r7, #24]
 8017596:	799b      	ldrb	r3, [r3, #6]
 8017598:	b29b      	uxth	r3, r3
 801759a:	461a      	mov	r2, r3
 801759c:	0152      	lsls	r2, r2, #5
 801759e:	1ad2      	subs	r2, r2, r3
 80175a0:	0092      	lsls	r2, r2, #2
 80175a2:	4413      	add	r3, r2
 80175a4:	00db      	lsls	r3, r3, #3
 80175a6:	b29b      	uxth	r3, r3
 80175a8:	e001      	b.n	80175ae <dhcp_reboot+0x146>
 80175aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80175ae:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80175b0:	89fb      	ldrh	r3, [r7, #14]
 80175b2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80175b6:	4a0a      	ldr	r2, [pc, #40]	; (80175e0 <dhcp_reboot+0x178>)
 80175b8:	fb82 1203 	smull	r1, r2, r2, r3
 80175bc:	1152      	asrs	r2, r2, #5
 80175be:	17db      	asrs	r3, r3, #31
 80175c0:	1ad3      	subs	r3, r2, r3
 80175c2:	b29a      	uxth	r2, r3
 80175c4:	69bb      	ldr	r3, [r7, #24]
 80175c6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80175c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3720      	adds	r7, #32
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bdb0      	pop	{r4, r5, r7, pc}
 80175d4:	20000144 	.word	0x20000144
 80175d8:	200078c8 	.word	0x200078c8
 80175dc:	0801d24c 	.word	0x0801d24c
 80175e0:	10624dd3 	.word	0x10624dd3

080175e4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80175e4:	b5b0      	push	{r4, r5, r7, lr}
 80175e6:	b08a      	sub	sp, #40	; 0x28
 80175e8:	af02      	add	r7, sp, #8
 80175ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	6a1b      	ldr	r3, [r3, #32]
 80175f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80175f2:	69fb      	ldr	r3, [r7, #28]
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	f000 8084 	beq.w	8017702 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80175fa:	69fb      	ldr	r3, [r7, #28]
 80175fc:	795b      	ldrb	r3, [r3, #5]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	f000 8081 	beq.w	8017706 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017604:	69fb      	ldr	r3, [r7, #28]
 8017606:	699b      	ldr	r3, [r3, #24]
 8017608:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801760a:	69fb      	ldr	r3, [r7, #28]
 801760c:	2200      	movs	r2, #0
 801760e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8017610:	69fb      	ldr	r3, [r7, #28]
 8017612:	2200      	movs	r2, #0
 8017614:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017616:	69fb      	ldr	r3, [r7, #28]
 8017618:	2200      	movs	r2, #0
 801761a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801761c:	69fb      	ldr	r3, [r7, #28]
 801761e:	2200      	movs	r2, #0
 8017620:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8017622:	69fb      	ldr	r3, [r7, #28]
 8017624:	2200      	movs	r2, #0
 8017626:	631a      	str	r2, [r3, #48]	; 0x30
 8017628:	69fb      	ldr	r3, [r7, #28]
 801762a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801762c:	69fb      	ldr	r3, [r7, #28]
 801762e:	62da      	str	r2, [r3, #44]	; 0x2c
 8017630:	69fb      	ldr	r3, [r7, #28]
 8017632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017634:	69fb      	ldr	r3, [r7, #28]
 8017636:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8017638:	69fb      	ldr	r3, [r7, #28]
 801763a:	2200      	movs	r2, #0
 801763c:	829a      	strh	r2, [r3, #20]
 801763e:	69fb      	ldr	r3, [r7, #28]
 8017640:	8a9a      	ldrh	r2, [r3, #20]
 8017642:	69fb      	ldr	r3, [r7, #28]
 8017644:	825a      	strh	r2, [r3, #18]
 8017646:	69fb      	ldr	r3, [r7, #28]
 8017648:	8a5a      	ldrh	r2, [r3, #18]
 801764a:	69fb      	ldr	r3, [r7, #28]
 801764c:	821a      	strh	r2, [r3, #16]
 801764e:	69fb      	ldr	r3, [r7, #28]
 8017650:	8a1a      	ldrh	r2, [r3, #16]
 8017652:	69fb      	ldr	r3, [r7, #28]
 8017654:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8017656:	6878      	ldr	r0, [r7, #4]
 8017658:	f000 fd5c 	bl	8018114 <dhcp_supplied_address>
 801765c:	4603      	mov	r3, r0
 801765e:	2b00      	cmp	r3, #0
 8017660:	d03b      	beq.n	80176da <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8017662:	f107 030e 	add.w	r3, r7, #14
 8017666:	2207      	movs	r2, #7
 8017668:	69f9      	ldr	r1, [r7, #28]
 801766a:	6878      	ldr	r0, [r7, #4]
 801766c:	f000 fc72 	bl	8017f54 <dhcp_create_msg>
 8017670:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8017672:	69bb      	ldr	r3, [r7, #24]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d030      	beq.n	80176da <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017678:	69bb      	ldr	r3, [r7, #24]
 801767a:	685b      	ldr	r3, [r3, #4]
 801767c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801767e:	89f8      	ldrh	r0, [r7, #14]
 8017680:	697b      	ldr	r3, [r7, #20]
 8017682:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017686:	2304      	movs	r3, #4
 8017688:	2236      	movs	r2, #54	; 0x36
 801768a:	f000 f85f 	bl	801774c <dhcp_option>
 801768e:	4603      	mov	r3, r0
 8017690:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8017692:	89fc      	ldrh	r4, [r7, #14]
 8017694:	697b      	ldr	r3, [r7, #20]
 8017696:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801769a:	693b      	ldr	r3, [r7, #16]
 801769c:	4618      	mov	r0, r3
 801769e:	f7f7 ff46 	bl	800f52e <lwip_htonl>
 80176a2:	4603      	mov	r3, r0
 80176a4:	461a      	mov	r2, r3
 80176a6:	4629      	mov	r1, r5
 80176a8:	4620      	mov	r0, r4
 80176aa:	f000 f8ac 	bl	8017806 <dhcp_option_long>
 80176ae:	4603      	mov	r3, r0
 80176b0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80176b2:	89f8      	ldrh	r0, [r7, #14]
 80176b4:	697b      	ldr	r3, [r7, #20]
 80176b6:	33f0      	adds	r3, #240	; 0xf0
 80176b8:	69ba      	ldr	r2, [r7, #24]
 80176ba:	4619      	mov	r1, r3
 80176bc:	f000 fcfc 	bl	80180b8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80176c0:	4b13      	ldr	r3, [pc, #76]	; (8017710 <dhcp_release_and_stop+0x12c>)
 80176c2:	6818      	ldr	r0, [r3, #0]
 80176c4:	f107 0210 	add.w	r2, r7, #16
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	9300      	str	r3, [sp, #0]
 80176cc:	2343      	movs	r3, #67	; 0x43
 80176ce:	69b9      	ldr	r1, [r7, #24]
 80176d0:	f7fe fd2a 	bl	8016128 <udp_sendto_if>
      pbuf_free(p_out);
 80176d4:	69b8      	ldr	r0, [r7, #24]
 80176d6:	f7f8 ff0d 	bl	80104f4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80176da:	4b0e      	ldr	r3, [pc, #56]	; (8017714 <dhcp_release_and_stop+0x130>)
 80176dc:	4a0d      	ldr	r2, [pc, #52]	; (8017714 <dhcp_release_and_stop+0x130>)
 80176de:	490d      	ldr	r1, [pc, #52]	; (8017714 <dhcp_release_and_stop+0x130>)
 80176e0:	6878      	ldr	r0, [r7, #4]
 80176e2:	f7f8 fb71 	bl	800fdc8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80176e6:	2100      	movs	r1, #0
 80176e8:	69f8      	ldr	r0, [r7, #28]
 80176ea:	f000 f815 	bl	8017718 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80176ee:	69fb      	ldr	r3, [r7, #28]
 80176f0:	791b      	ldrb	r3, [r3, #4]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d008      	beq.n	8017708 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80176f6:	f7fe ffd5 	bl	80166a4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80176fa:	69fb      	ldr	r3, [r7, #28]
 80176fc:	2200      	movs	r2, #0
 80176fe:	711a      	strb	r2, [r3, #4]
 8017700:	e002      	b.n	8017708 <dhcp_release_and_stop+0x124>
    return;
 8017702:	bf00      	nop
 8017704:	e000      	b.n	8017708 <dhcp_release_and_stop+0x124>
    return;
 8017706:	bf00      	nop
  }
}
 8017708:	3720      	adds	r7, #32
 801770a:	46bd      	mov	sp, r7
 801770c:	bdb0      	pop	{r4, r5, r7, pc}
 801770e:	bf00      	nop
 8017710:	200078c8 	.word	0x200078c8
 8017714:	0801d248 	.word	0x0801d248

08017718 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8017718:	b480      	push	{r7}
 801771a:	b083      	sub	sp, #12
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
 8017720:	460b      	mov	r3, r1
 8017722:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	795b      	ldrb	r3, [r3, #5]
 8017728:	78fa      	ldrb	r2, [r7, #3]
 801772a:	429a      	cmp	r2, r3
 801772c:	d008      	beq.n	8017740 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	78fa      	ldrb	r2, [r7, #3]
 8017732:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	2200      	movs	r2, #0
 8017738:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	2200      	movs	r2, #0
 801773e:	811a      	strh	r2, [r3, #8]
  }
}
 8017740:	bf00      	nop
 8017742:	370c      	adds	r7, #12
 8017744:	46bd      	mov	sp, r7
 8017746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774a:	4770      	bx	lr

0801774c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801774c:	b480      	push	{r7}
 801774e:	b083      	sub	sp, #12
 8017750:	af00      	add	r7, sp, #0
 8017752:	6039      	str	r1, [r7, #0]
 8017754:	4611      	mov	r1, r2
 8017756:	461a      	mov	r2, r3
 8017758:	4603      	mov	r3, r0
 801775a:	80fb      	strh	r3, [r7, #6]
 801775c:	460b      	mov	r3, r1
 801775e:	717b      	strb	r3, [r7, #5]
 8017760:	4613      	mov	r3, r2
 8017762:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  options[options_out_len++] = option_type;
 8017764:	88fb      	ldrh	r3, [r7, #6]
 8017766:	1c5a      	adds	r2, r3, #1
 8017768:	80fa      	strh	r2, [r7, #6]
 801776a:	461a      	mov	r2, r3
 801776c:	683b      	ldr	r3, [r7, #0]
 801776e:	4413      	add	r3, r2
 8017770:	797a      	ldrb	r2, [r7, #5]
 8017772:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8017774:	88fb      	ldrh	r3, [r7, #6]
 8017776:	1c5a      	adds	r2, r3, #1
 8017778:	80fa      	strh	r2, [r7, #6]
 801777a:	461a      	mov	r2, r3
 801777c:	683b      	ldr	r3, [r7, #0]
 801777e:	4413      	add	r3, r2
 8017780:	793a      	ldrb	r2, [r7, #4]
 8017782:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017784:	88fb      	ldrh	r3, [r7, #6]
}
 8017786:	4618      	mov	r0, r3
 8017788:	370c      	adds	r7, #12
 801778a:	46bd      	mov	sp, r7
 801778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017790:	4770      	bx	lr

08017792 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8017792:	b480      	push	{r7}
 8017794:	b083      	sub	sp, #12
 8017796:	af00      	add	r7, sp, #0
 8017798:	4603      	mov	r3, r0
 801779a:	6039      	str	r1, [r7, #0]
 801779c:	80fb      	strh	r3, [r7, #6]
 801779e:	4613      	mov	r3, r2
 80177a0:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
  options[options_out_len++] = value;
 80177a2:	88fb      	ldrh	r3, [r7, #6]
 80177a4:	1c5a      	adds	r2, r3, #1
 80177a6:	80fa      	strh	r2, [r7, #6]
 80177a8:	461a      	mov	r2, r3
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	4413      	add	r3, r2
 80177ae:	797a      	ldrb	r2, [r7, #5]
 80177b0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80177b2:	88fb      	ldrh	r3, [r7, #6]
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	370c      	adds	r7, #12
 80177b8:	46bd      	mov	sp, r7
 80177ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177be:	4770      	bx	lr

080177c0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80177c0:	b480      	push	{r7}
 80177c2:	b083      	sub	sp, #12
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	4603      	mov	r3, r0
 80177c8:	6039      	str	r1, [r7, #0]
 80177ca:	80fb      	strh	r3, [r7, #6]
 80177cc:	4613      	mov	r3, r2
 80177ce:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80177d0:	88bb      	ldrh	r3, [r7, #4]
 80177d2:	0a1b      	lsrs	r3, r3, #8
 80177d4:	b29a      	uxth	r2, r3
 80177d6:	88fb      	ldrh	r3, [r7, #6]
 80177d8:	1c59      	adds	r1, r3, #1
 80177da:	80f9      	strh	r1, [r7, #6]
 80177dc:	4619      	mov	r1, r3
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	440b      	add	r3, r1
 80177e2:	b2d2      	uxtb	r2, r2
 80177e4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80177e6:	88fb      	ldrh	r3, [r7, #6]
 80177e8:	1c5a      	adds	r2, r3, #1
 80177ea:	80fa      	strh	r2, [r7, #6]
 80177ec:	461a      	mov	r2, r3
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	4413      	add	r3, r2
 80177f2:	88ba      	ldrh	r2, [r7, #4]
 80177f4:	b2d2      	uxtb	r2, r2
 80177f6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80177f8:	88fb      	ldrh	r3, [r7, #6]
}
 80177fa:	4618      	mov	r0, r3
 80177fc:	370c      	adds	r7, #12
 80177fe:	46bd      	mov	sp, r7
 8017800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017804:	4770      	bx	lr

08017806 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8017806:	b480      	push	{r7}
 8017808:	b085      	sub	sp, #20
 801780a:	af00      	add	r7, sp, #0
 801780c:	4603      	mov	r3, r0
 801780e:	60b9      	str	r1, [r7, #8]
 8017810:	607a      	str	r2, [r7, #4]
 8017812:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	0e1a      	lsrs	r2, r3, #24
 8017818:	89fb      	ldrh	r3, [r7, #14]
 801781a:	1c59      	adds	r1, r3, #1
 801781c:	81f9      	strh	r1, [r7, #14]
 801781e:	4619      	mov	r1, r3
 8017820:	68bb      	ldr	r3, [r7, #8]
 8017822:	440b      	add	r3, r1
 8017824:	b2d2      	uxtb	r2, r2
 8017826:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	0c1a      	lsrs	r2, r3, #16
 801782c:	89fb      	ldrh	r3, [r7, #14]
 801782e:	1c59      	adds	r1, r3, #1
 8017830:	81f9      	strh	r1, [r7, #14]
 8017832:	4619      	mov	r1, r3
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	440b      	add	r3, r1
 8017838:	b2d2      	uxtb	r2, r2
 801783a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	0a1a      	lsrs	r2, r3, #8
 8017840:	89fb      	ldrh	r3, [r7, #14]
 8017842:	1c59      	adds	r1, r3, #1
 8017844:	81f9      	strh	r1, [r7, #14]
 8017846:	4619      	mov	r1, r3
 8017848:	68bb      	ldr	r3, [r7, #8]
 801784a:	440b      	add	r3, r1
 801784c:	b2d2      	uxtb	r2, r2
 801784e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017850:	89fb      	ldrh	r3, [r7, #14]
 8017852:	1c5a      	adds	r2, r3, #1
 8017854:	81fa      	strh	r2, [r7, #14]
 8017856:	461a      	mov	r2, r3
 8017858:	68bb      	ldr	r3, [r7, #8]
 801785a:	4413      	add	r3, r2
 801785c:	687a      	ldr	r2, [r7, #4]
 801785e:	b2d2      	uxtb	r2, r2
 8017860:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017862:	89fb      	ldrh	r3, [r7, #14]
}
 8017864:	4618      	mov	r0, r3
 8017866:	3714      	adds	r7, #20
 8017868:	46bd      	mov	sp, r7
 801786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786e:	4770      	bx	lr

08017870 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static u16_t
dhcp_option_hostname(u16_t options_out_len, u8_t *options, struct netif *netif)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b088      	sub	sp, #32
 8017874:	af00      	add	r7, sp, #0
 8017876:	4603      	mov	r3, r0
 8017878:	60b9      	str	r1, [r7, #8]
 801787a:	607a      	str	r2, [r7, #4]
 801787c:	81fb      	strh	r3, [r7, #14]
  if (netif->hostname != NULL) {
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017882:	2b00      	cmp	r3, #0
 8017884:	d02f      	beq.n	80178e6 <dhcp_option_hostname+0x76>
    size_t namelen = strlen(netif->hostname);
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801788a:	4618      	mov	r0, r3
 801788c:	f7e8 fcc2 	bl	8000214 <strlen>
 8017890:	6178      	str	r0, [r7, #20]
    if (namelen > 0) {
 8017892:	697b      	ldr	r3, [r7, #20]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d026      	beq.n	80178e6 <dhcp_option_hostname+0x76>
      size_t len;
      const char *p = netif->hostname;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801789c:	61bb      	str	r3, [r7, #24]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - options_out_len - 3;
 801789e:	89fb      	ldrh	r3, [r7, #14]
 80178a0:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 80178a4:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
      len = LWIP_MIN(namelen, available);
 80178a6:	693a      	ldr	r2, [r7, #16]
 80178a8:	697b      	ldr	r3, [r7, #20]
 80178aa:	4293      	cmp	r3, r2
 80178ac:	bf28      	it	cs
 80178ae:	4613      	movcs	r3, r2
 80178b0:	61fb      	str	r3, [r7, #28]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
      options_out_len = dhcp_option(options_out_len, options, DHCP_OPTION_HOSTNAME, (u8_t)len);
 80178b2:	69fb      	ldr	r3, [r7, #28]
 80178b4:	b2db      	uxtb	r3, r3
 80178b6:	89f8      	ldrh	r0, [r7, #14]
 80178b8:	220c      	movs	r2, #12
 80178ba:	68b9      	ldr	r1, [r7, #8]
 80178bc:	f7ff ff46 	bl	801774c <dhcp_option>
 80178c0:	4603      	mov	r3, r0
 80178c2:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 80178c4:	e00a      	b.n	80178dc <dhcp_option_hostname+0x6c>
        options_out_len = dhcp_option_byte(options_out_len, options, *p++);
 80178c6:	69bb      	ldr	r3, [r7, #24]
 80178c8:	1c5a      	adds	r2, r3, #1
 80178ca:	61ba      	str	r2, [r7, #24]
 80178cc:	781a      	ldrb	r2, [r3, #0]
 80178ce:	89fb      	ldrh	r3, [r7, #14]
 80178d0:	68b9      	ldr	r1, [r7, #8]
 80178d2:	4618      	mov	r0, r3
 80178d4:	f7ff ff5d 	bl	8017792 <dhcp_option_byte>
 80178d8:	4603      	mov	r3, r0
 80178da:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 80178dc:	69fb      	ldr	r3, [r7, #28]
 80178de:	1e5a      	subs	r2, r3, #1
 80178e0:	61fa      	str	r2, [r7, #28]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d1ef      	bne.n	80178c6 <dhcp_option_hostname+0x56>
      }
    }
  }
  return options_out_len;
 80178e6:	89fb      	ldrh	r3, [r7, #14]
}
 80178e8:	4618      	mov	r0, r3
 80178ea:	3720      	adds	r7, #32
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}

080178f0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b092      	sub	sp, #72	; 0x48
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
 80178f8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80178fa:	2300      	movs	r3, #0
 80178fc:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 80178fe:	2300      	movs	r3, #0
 8017900:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8017902:	2208      	movs	r2, #8
 8017904:	2100      	movs	r1, #0
 8017906:	48b6      	ldr	r0, [pc, #728]	; (8017be0 <dhcp_parse_reply+0x2f0>)
 8017908:	f003 f99b 	bl	801ac42 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	895b      	ldrh	r3, [r3, #10]
 8017910:	2b2b      	cmp	r3, #43	; 0x2b
 8017912:	d802      	bhi.n	801791a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8017914:	f06f 0301 	mvn.w	r3, #1
 8017918:	e24a      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	685b      	ldr	r3, [r3, #4]
 801791e:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8017920:	23f0      	movs	r3, #240	; 0xf0
 8017922:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	891b      	ldrh	r3, [r3, #8]
 8017928:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801792e:	e00c      	b.n	801794a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8017930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017932:	895b      	ldrh	r3, [r3, #10]
 8017934:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8017936:	1ad3      	subs	r3, r2, r3
 8017938:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801793a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801793c:	895b      	ldrh	r3, [r3, #10]
 801793e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017940:	1ad3      	subs	r3, r2, r3
 8017942:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 8017944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 801794a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801794c:	2b00      	cmp	r3, #0
 801794e:	d004      	beq.n	801795a <dhcp_parse_reply+0x6a>
 8017950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017952:	895b      	ldrh	r3, [r3, #10]
 8017954:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8017956:	429a      	cmp	r2, r3
 8017958:	d2ea      	bcs.n	8017930 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801795c:	2b00      	cmp	r3, #0
 801795e:	d102      	bne.n	8017966 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8017960:	f06f 0301 	mvn.w	r3, #1
 8017964:	e224      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
  }
  offset = options_idx;
 8017966:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017968:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 801796c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801796e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 8017970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017972:	685b      	ldr	r3, [r3, #4]
 8017974:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017976:	e1d9      	b.n	8017d2c <dhcp_parse_reply+0x43c>
    u8_t op = options[offset];
 8017978:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801797c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801797e:	4413      	add	r3, r2
 8017980:	781b      	ldrb	r3, [r3, #0]
 8017982:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 8017984:	2300      	movs	r3, #0
 8017986:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 801798a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801798e:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8017990:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017994:	3302      	adds	r3, #2
 8017996:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 8017998:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801799a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801799e:	429a      	cmp	r2, r3
 80179a0:	d202      	bcs.n	80179a8 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 80179a2:	f06f 0301 	mvn.w	r3, #1
 80179a6:	e203      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80179a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80179ac:	3301      	adds	r3, #1
 80179ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80179b0:	8952      	ldrh	r2, [r2, #10]
 80179b2:	4293      	cmp	r3, r2
 80179b4:	da08      	bge.n	80179c8 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 80179b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80179ba:	3301      	adds	r3, #1
 80179bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80179be:	4413      	add	r3, r2
 80179c0:	781b      	ldrb	r3, [r3, #0]
 80179c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80179c6:	e00b      	b.n	80179e0 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80179c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d004      	beq.n	80179da <dhcp_parse_reply+0xea>
 80179d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	685b      	ldr	r3, [r3, #4]
 80179d6:	781b      	ldrb	r3, [r3, #0]
 80179d8:	e000      	b.n	80179dc <dhcp_parse_reply+0xec>
 80179da:	2300      	movs	r3, #0
 80179dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80179e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80179e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 80179e8:	7efb      	ldrb	r3, [r7, #27]
 80179ea:	2b3b      	cmp	r3, #59	; 0x3b
 80179ec:	f200 80df 	bhi.w	8017bae <dhcp_parse_reply+0x2be>
 80179f0:	a201      	add	r2, pc, #4	; (adr r2, 80179f8 <dhcp_parse_reply+0x108>)
 80179f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80179f6:	bf00      	nop
 80179f8:	08017ae9 	.word	0x08017ae9
 80179fc:	08017af9 	.word	0x08017af9
 8017a00:	08017baf 	.word	0x08017baf
 8017a04:	08017b0d 	.word	0x08017b0d
 8017a08:	08017baf 	.word	0x08017baf
 8017a0c:	08017baf 	.word	0x08017baf
 8017a10:	08017baf 	.word	0x08017baf
 8017a14:	08017baf 	.word	0x08017baf
 8017a18:	08017baf 	.word	0x08017baf
 8017a1c:	08017baf 	.word	0x08017baf
 8017a20:	08017baf 	.word	0x08017baf
 8017a24:	08017baf 	.word	0x08017baf
 8017a28:	08017baf 	.word	0x08017baf
 8017a2c:	08017baf 	.word	0x08017baf
 8017a30:	08017baf 	.word	0x08017baf
 8017a34:	08017baf 	.word	0x08017baf
 8017a38:	08017baf 	.word	0x08017baf
 8017a3c:	08017baf 	.word	0x08017baf
 8017a40:	08017baf 	.word	0x08017baf
 8017a44:	08017baf 	.word	0x08017baf
 8017a48:	08017baf 	.word	0x08017baf
 8017a4c:	08017baf 	.word	0x08017baf
 8017a50:	08017baf 	.word	0x08017baf
 8017a54:	08017baf 	.word	0x08017baf
 8017a58:	08017baf 	.word	0x08017baf
 8017a5c:	08017baf 	.word	0x08017baf
 8017a60:	08017baf 	.word	0x08017baf
 8017a64:	08017baf 	.word	0x08017baf
 8017a68:	08017baf 	.word	0x08017baf
 8017a6c:	08017baf 	.word	0x08017baf
 8017a70:	08017baf 	.word	0x08017baf
 8017a74:	08017baf 	.word	0x08017baf
 8017a78:	08017baf 	.word	0x08017baf
 8017a7c:	08017baf 	.word	0x08017baf
 8017a80:	08017baf 	.word	0x08017baf
 8017a84:	08017baf 	.word	0x08017baf
 8017a88:	08017baf 	.word	0x08017baf
 8017a8c:	08017baf 	.word	0x08017baf
 8017a90:	08017baf 	.word	0x08017baf
 8017a94:	08017baf 	.word	0x08017baf
 8017a98:	08017baf 	.word	0x08017baf
 8017a9c:	08017baf 	.word	0x08017baf
 8017aa0:	08017baf 	.word	0x08017baf
 8017aa4:	08017baf 	.word	0x08017baf
 8017aa8:	08017baf 	.word	0x08017baf
 8017aac:	08017baf 	.word	0x08017baf
 8017ab0:	08017baf 	.word	0x08017baf
 8017ab4:	08017baf 	.word	0x08017baf
 8017ab8:	08017baf 	.word	0x08017baf
 8017abc:	08017baf 	.word	0x08017baf
 8017ac0:	08017baf 	.word	0x08017baf
 8017ac4:	08017b2b 	.word	0x08017b2b
 8017ac8:	08017b3f 	.word	0x08017b3f
 8017acc:	08017b5f 	.word	0x08017b5f
 8017ad0:	08017b73 	.word	0x08017b73
 8017ad4:	08017baf 	.word	0x08017baf
 8017ad8:	08017baf 	.word	0x08017baf
 8017adc:	08017baf 	.word	0x08017baf
 8017ae0:	08017b87 	.word	0x08017b87
 8017ae4:	08017b9b 	.word	0x08017b9b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017ae8:	2300      	movs	r3, #0
 8017aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017aee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017af2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 8017af6:	e05e      	b.n	8017bb6 <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017af8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017afc:	2b04      	cmp	r3, #4
 8017afe:	d002      	beq.n	8017b06 <dhcp_parse_reply+0x216>
 8017b00:	f06f 0305 	mvn.w	r3, #5
 8017b04:	e154      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8017b06:	2306      	movs	r3, #6
 8017b08:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017b0a:	e054      	b.n	8017bb6 <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8017b0c:	2304      	movs	r3, #4
 8017b0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8017b12:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8017b16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017b1a:	429a      	cmp	r2, r3
 8017b1c:	d202      	bcs.n	8017b24 <dhcp_parse_reply+0x234>
 8017b1e:	f06f 0305 	mvn.w	r3, #5
 8017b22:	e145      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017b24:	2307      	movs	r3, #7
 8017b26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017b28:	e045      	b.n	8017bb6 <dhcp_parse_reply+0x2c6>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017b2e:	2b04      	cmp	r3, #4
 8017b30:	d002      	beq.n	8017b38 <dhcp_parse_reply+0x248>
 8017b32:	f06f 0305 	mvn.w	r3, #5
 8017b36:	e13b      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8017b38:	2303      	movs	r3, #3
 8017b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017b3c:	e03b      	b.n	8017bb6 <dhcp_parse_reply+0x2c6>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017b42:	2b01      	cmp	r3, #1
 8017b44:	d002      	beq.n	8017b4c <dhcp_parse_reply+0x25c>
 8017b46:	f06f 0305 	mvn.w	r3, #5
 8017b4a:	e131      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8017b4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017b4e:	2bf0      	cmp	r3, #240	; 0xf0
 8017b50:	d002      	beq.n	8017b58 <dhcp_parse_reply+0x268>
 8017b52:	f06f 0305 	mvn.w	r3, #5
 8017b56:	e12b      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8017b58:	2300      	movs	r3, #0
 8017b5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017b5c:	e02b      	b.n	8017bb6 <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017b62:	2b01      	cmp	r3, #1
 8017b64:	d002      	beq.n	8017b6c <dhcp_parse_reply+0x27c>
 8017b66:	f06f 0305 	mvn.w	r3, #5
 8017b6a:	e121      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017b6c:	2301      	movs	r3, #1
 8017b6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017b70:	e021      	b.n	8017bb6 <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017b76:	2b04      	cmp	r3, #4
 8017b78:	d002      	beq.n	8017b80 <dhcp_parse_reply+0x290>
 8017b7a:	f06f 0305 	mvn.w	r3, #5
 8017b7e:	e117      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8017b80:	2302      	movs	r3, #2
 8017b82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017b84:	e017      	b.n	8017bb6 <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017b86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017b8a:	2b04      	cmp	r3, #4
 8017b8c:	d002      	beq.n	8017b94 <dhcp_parse_reply+0x2a4>
 8017b8e:	f06f 0305 	mvn.w	r3, #5
 8017b92:	e10d      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017b94:	2304      	movs	r3, #4
 8017b96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017b98:	e00d      	b.n	8017bb6 <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017b9e:	2b04      	cmp	r3, #4
 8017ba0:	d002      	beq.n	8017ba8 <dhcp_parse_reply+0x2b8>
 8017ba2:	f06f 0305 	mvn.w	r3, #5
 8017ba6:	e103      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_T2;
 8017ba8:	2305      	movs	r3, #5
 8017baa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017bac:	e003      	b.n	8017bb6 <dhcp_parse_reply+0x2c6>
      default:
        decode_len = 0;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017bb4:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017bb6:	7efb      	ldrb	r3, [r7, #27]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d105      	bne.n	8017bc8 <dhcp_parse_reply+0x2d8>
      offset++;
 8017bbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017bc0:	3301      	adds	r3, #1
 8017bc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8017bc6:	e08a      	b.n	8017cde <dhcp_parse_reply+0x3ee>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8017bc8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017bcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017bd0:	4413      	add	r3, r2
 8017bd2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8017bd6:	4293      	cmp	r3, r2
 8017bd8:	dd04      	ble.n	8017be4 <dhcp_parse_reply+0x2f4>
        /* overflow */
        return ERR_BUF;
 8017bda:	f06f 0301 	mvn.w	r3, #1
 8017bde:	e0e7      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
 8017be0:	200078c0 	.word	0x200078c0
      }
      offset = (u16_t)(offset + len + 2);
 8017be4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017be8:	b29a      	uxth	r2, r3
 8017bea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017bee:	4413      	add	r3, r2
 8017bf0:	b29b      	uxth	r3, r3
 8017bf2:	3302      	adds	r3, #2
 8017bf4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 8017bf8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d06e      	beq.n	8017cde <dhcp_parse_reply+0x3ee>
        u32_t value = 0;
 8017c00:	2300      	movs	r3, #0
 8017c02:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8017c04:	4a6c      	ldr	r2, [pc, #432]	; (8017db8 <dhcp_parse_reply+0x4c8>)
 8017c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c08:	4413      	add	r3, r2
 8017c0a:	781b      	ldrb	r3, [r3, #0]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d166      	bne.n	8017cde <dhcp_parse_reply+0x3ee>
          copy_len = LWIP_MIN(decode_len, 4);
 8017c10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017c14:	2b04      	cmp	r3, #4
 8017c16:	bf28      	it	cs
 8017c18:	2304      	movcs	r3, #4
 8017c1a:	b2db      	uxtb	r3, r3
 8017c1c:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017c1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c20:	8b3a      	ldrh	r2, [r7, #24]
 8017c22:	f107 010c 	add.w	r1, r7, #12
 8017c26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017c28:	f7f8 fdaa 	bl	8010780 <pbuf_copy_partial>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	461a      	mov	r2, r3
 8017c30:	8b3b      	ldrh	r3, [r7, #24]
 8017c32:	4293      	cmp	r3, r2
 8017c34:	d002      	beq.n	8017c3c <dhcp_parse_reply+0x34c>
            return ERR_BUF;
 8017c36:	f06f 0301 	mvn.w	r3, #1
 8017c3a:	e0b9      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
          }
          if (decode_len > 4) {
 8017c3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017c40:	2b04      	cmp	r3, #4
 8017c42:	d92c      	bls.n	8017c9e <dhcp_parse_reply+0x3ae>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8017c44:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017c48:	f003 0303 	and.w	r3, r3, #3
 8017c4c:	b2db      	uxtb	r3, r3
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d002      	beq.n	8017c58 <dhcp_parse_reply+0x368>
 8017c52:	f06f 0305 	mvn.w	r3, #5
 8017c56:	e0ab      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
            dhcp_got_option(dhcp, decode_idx);
 8017c58:	4a57      	ldr	r2, [pc, #348]	; (8017db8 <dhcp_parse_reply+0x4c8>)
 8017c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5c:	4413      	add	r3, r2
 8017c5e:	2201      	movs	r2, #1
 8017c60:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7f7 fc62 	bl	800f52e <lwip_htonl>
 8017c6a:	4602      	mov	r2, r0
 8017c6c:	4953      	ldr	r1, [pc, #332]	; (8017dbc <dhcp_parse_reply+0x4cc>)
 8017c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8017c74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017c78:	3b04      	subs	r3, #4
 8017c7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8017c7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c80:	3304      	adds	r3, #4
 8017c82:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 8017c84:	8afa      	ldrh	r2, [r7, #22]
 8017c86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017c88:	429a      	cmp	r2, r3
 8017c8a:	d202      	bcs.n	8017c92 <dhcp_parse_reply+0x3a2>
              /* overflow */
              return ERR_BUF;
 8017c8c:	f06f 0301 	mvn.w	r3, #1
 8017c90:	e08e      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
            }
            val_offset = next_val_offset;
 8017c92:	8afb      	ldrh	r3, [r7, #22]
 8017c94:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 8017c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c98:	3301      	adds	r3, #1
 8017c9a:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 8017c9c:	e7b2      	b.n	8017c04 <dhcp_parse_reply+0x314>
          } else if (decode_len == 4) {
 8017c9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017ca2:	2b04      	cmp	r3, #4
 8017ca4:	d106      	bne.n	8017cb4 <dhcp_parse_reply+0x3c4>
            value = lwip_ntohl(value);
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	4618      	mov	r0, r3
 8017caa:	f7f7 fc40 	bl	800f52e <lwip_htonl>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	60fb      	str	r3, [r7, #12]
 8017cb2:	e00a      	b.n	8017cca <dhcp_parse_reply+0x3da>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8017cb4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017cb8:	2b01      	cmp	r3, #1
 8017cba:	d002      	beq.n	8017cc2 <dhcp_parse_reply+0x3d2>
 8017cbc:	f06f 0305 	mvn.w	r3, #5
 8017cc0:	e076      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
            value = ((u8_t *)&value)[0];
 8017cc2:	f107 030c 	add.w	r3, r7, #12
 8017cc6:	781b      	ldrb	r3, [r3, #0]
 8017cc8:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017cca:	4a3b      	ldr	r2, [pc, #236]	; (8017db8 <dhcp_parse_reply+0x4c8>)
 8017ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cce:	4413      	add	r3, r2
 8017cd0:	2201      	movs	r2, #1
 8017cd2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8017cd4:	68fa      	ldr	r2, [r7, #12]
 8017cd6:	4939      	ldr	r1, [pc, #228]	; (8017dbc <dhcp_parse_reply+0x4cc>)
 8017cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ce0:	895b      	ldrh	r3, [r3, #10]
 8017ce2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	d320      	bcc.n	8017d2c <dhcp_parse_reply+0x43c>
      offset = (u16_t)(offset - q->len);
 8017cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cec:	895b      	ldrh	r3, [r3, #10]
 8017cee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017cf2:	1ad3      	subs	r3, r2, r3
 8017cf4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 8017cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cfa:	895b      	ldrh	r3, [r3, #10]
 8017cfc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017cfe:	1ad3      	subs	r3, r2, r3
 8017d00:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 8017d02:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017d06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d20c      	bcs.n	8017d26 <dhcp_parse_reply+0x436>
        q = q->next;
 8017d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d102      	bne.n	8017d1e <dhcp_parse_reply+0x42e>
 8017d18:	f06f 0305 	mvn.w	r3, #5
 8017d1c:	e048      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
        options = (u8_t *)q->payload;
 8017d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d20:	685b      	ldr	r3, [r3, #4]
 8017d22:	643b      	str	r3, [r7, #64]	; 0x40
 8017d24:	e002      	b.n	8017d2c <dhcp_parse_reply+0x43c>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017d26:	f06f 0301 	mvn.w	r3, #1
 8017d2a:	e041      	b.n	8017db0 <dhcp_parse_reply+0x4c0>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d00c      	beq.n	8017d4c <dhcp_parse_reply+0x45c>
 8017d32:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017d36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017d38:	429a      	cmp	r2, r3
 8017d3a:	d207      	bcs.n	8017d4c <dhcp_parse_reply+0x45c>
 8017d3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017d42:	4413      	add	r3, r2
 8017d44:	781b      	ldrb	r3, [r3, #0]
 8017d46:	2bff      	cmp	r3, #255	; 0xff
 8017d48:	f47f ae16 	bne.w	8017978 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017d4c:	4b1a      	ldr	r3, [pc, #104]	; (8017db8 <dhcp_parse_reply+0x4c8>)
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d018      	beq.n	8017d86 <dhcp_parse_reply+0x496>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017d54:	4b19      	ldr	r3, [pc, #100]	; (8017dbc <dhcp_parse_reply+0x4cc>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017d5a:	4b17      	ldr	r3, [pc, #92]	; (8017db8 <dhcp_parse_reply+0x4c8>)
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017d60:	693b      	ldr	r3, [r7, #16]
 8017d62:	2b01      	cmp	r3, #1
 8017d64:	d102      	bne.n	8017d6c <dhcp_parse_reply+0x47c>
      parse_file_as_options = 1;
 8017d66:	2301      	movs	r3, #1
 8017d68:	633b      	str	r3, [r7, #48]	; 0x30
 8017d6a:	e00c      	b.n	8017d86 <dhcp_parse_reply+0x496>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017d6c:	693b      	ldr	r3, [r7, #16]
 8017d6e:	2b02      	cmp	r3, #2
 8017d70:	d102      	bne.n	8017d78 <dhcp_parse_reply+0x488>
      parse_sname_as_options = 1;
 8017d72:	2301      	movs	r3, #1
 8017d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d76:	e006      	b.n	8017d86 <dhcp_parse_reply+0x496>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017d78:	693b      	ldr	r3, [r7, #16]
 8017d7a:	2b03      	cmp	r3, #3
 8017d7c:	d103      	bne.n	8017d86 <dhcp_parse_reply+0x496>
      parse_sname_as_options = 1;
 8017d7e:	2301      	movs	r3, #1
 8017d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 8017d82:	2301      	movs	r3, #1
 8017d84:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8017d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d006      	beq.n	8017d9a <dhcp_parse_reply+0x4aa>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 8017d90:	236c      	movs	r3, #108	; 0x6c
 8017d92:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017d94:	23ec      	movs	r3, #236	; 0xec
 8017d96:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8017d98:	e5c7      	b.n	801792a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8017d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d006      	beq.n	8017dae <dhcp_parse_reply+0x4be>
    parse_sname_as_options = 0;
 8017da0:	2300      	movs	r3, #0
 8017da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 8017da4:	232c      	movs	r3, #44	; 0x2c
 8017da6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8017da8:	236c      	movs	r3, #108	; 0x6c
 8017daa:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 8017dac:	e5bd      	b.n	801792a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8017dae:	2300      	movs	r3, #0
}
 8017db0:	4618      	mov	r0, r3
 8017db2:	3748      	adds	r7, #72	; 0x48
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}
 8017db8:	200078c0 	.word	0x200078c0
 8017dbc:	200078a0 	.word	0x200078a0

08017dc0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b08a      	sub	sp, #40	; 0x28
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	60f8      	str	r0, [r7, #12]
 8017dc8:	60b9      	str	r1, [r7, #8]
 8017dca:	607a      	str	r2, [r7, #4]
 8017dcc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8017dce:	4b5e      	ldr	r3, [pc, #376]	; (8017f48 <dhcp_recv+0x188>)
 8017dd0:	685b      	ldr	r3, [r3, #4]
 8017dd2:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017dd4:	69fb      	ldr	r3, [r7, #28]
 8017dd6:	6a1b      	ldr	r3, [r3, #32]
 8017dd8:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	685b      	ldr	r3, [r3, #4]
 8017dde:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017de0:	69bb      	ldr	r3, [r7, #24]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	f000 809a 	beq.w	8017f1c <dhcp_recv+0x15c>
 8017de8:	69bb      	ldr	r3, [r7, #24]
 8017dea:	791b      	ldrb	r3, [r3, #4]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	f000 8095 	beq.w	8017f1c <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	895b      	ldrh	r3, [r3, #10]
 8017df6:	2b2b      	cmp	r3, #43	; 0x2b
 8017df8:	f240 8092 	bls.w	8017f20 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8017dfc:	697b      	ldr	r3, [r7, #20]
 8017dfe:	781b      	ldrb	r3, [r3, #0]
 8017e00:	2b02      	cmp	r3, #2
 8017e02:	f040 808f 	bne.w	8017f24 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017e06:	2300      	movs	r3, #0
 8017e08:	74fb      	strb	r3, [r7, #19]
 8017e0a:	e00e      	b.n	8017e2a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8017e0c:	7cfb      	ldrb	r3, [r7, #19]
 8017e0e:	69fa      	ldr	r2, [r7, #28]
 8017e10:	4413      	add	r3, r2
 8017e12:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017e16:	7cfb      	ldrb	r3, [r7, #19]
 8017e18:	6979      	ldr	r1, [r7, #20]
 8017e1a:	440b      	add	r3, r1
 8017e1c:	7f1b      	ldrb	r3, [r3, #28]
 8017e1e:	429a      	cmp	r2, r3
 8017e20:	f040 8082 	bne.w	8017f28 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017e24:	7cfb      	ldrb	r3, [r7, #19]
 8017e26:	3301      	adds	r3, #1
 8017e28:	74fb      	strb	r3, [r7, #19]
 8017e2a:	69fb      	ldr	r3, [r7, #28]
 8017e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e30:	7cfa      	ldrb	r2, [r7, #19]
 8017e32:	429a      	cmp	r2, r3
 8017e34:	d202      	bcs.n	8017e3c <dhcp_recv+0x7c>
 8017e36:	7cfb      	ldrb	r3, [r7, #19]
 8017e38:	2b05      	cmp	r3, #5
 8017e3a:	d9e7      	bls.n	8017e0c <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8017e3c:	697b      	ldr	r3, [r7, #20]
 8017e3e:	685b      	ldr	r3, [r3, #4]
 8017e40:	4618      	mov	r0, r3
 8017e42:	f7f7 fb74 	bl	800f52e <lwip_htonl>
 8017e46:	4602      	mov	r2, r0
 8017e48:	69bb      	ldr	r3, [r7, #24]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	429a      	cmp	r2, r3
 8017e4e:	d16d      	bne.n	8017f2c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017e50:	69b9      	ldr	r1, [r7, #24]
 8017e52:	6878      	ldr	r0, [r7, #4]
 8017e54:	f7ff fd4c 	bl	80178f0 <dhcp_parse_reply>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d168      	bne.n	8017f30 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8017e5e:	4b3b      	ldr	r3, [pc, #236]	; (8017f4c <dhcp_recv+0x18c>)
 8017e60:	785b      	ldrb	r3, [r3, #1]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d066      	beq.n	8017f34 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	685b      	ldr	r3, [r3, #4]
 8017e6a:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8017e6c:	4b38      	ldr	r3, [pc, #224]	; (8017f50 <dhcp_recv+0x190>)
 8017e6e:	685b      	ldr	r3, [r3, #4]
 8017e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017e78:	2b05      	cmp	r3, #5
 8017e7a:	d12a      	bne.n	8017ed2 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8017e7c:	69bb      	ldr	r3, [r7, #24]
 8017e7e:	795b      	ldrb	r3, [r3, #5]
 8017e80:	2b01      	cmp	r3, #1
 8017e82:	d112      	bne.n	8017eaa <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8017e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e86:	69f8      	ldr	r0, [r7, #28]
 8017e88:	f7fe feb8 	bl	8016bfc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8017e8c:	69fb      	ldr	r3, [r7, #28]
 8017e8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017e92:	f003 0308 	and.w	r3, r3, #8
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d003      	beq.n	8017ea2 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8017e9a:	69f8      	ldr	r0, [r7, #28]
 8017e9c:	f7fe fc36 	bl	801670c <dhcp_check>
 8017ea0:	e04b      	b.n	8017f3a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017ea2:	69f8      	ldr	r0, [r7, #28]
 8017ea4:	f7ff f8d4 	bl	8017050 <dhcp_bind>
 8017ea8:	e047      	b.n	8017f3a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017eaa:	69bb      	ldr	r3, [r7, #24]
 8017eac:	795b      	ldrb	r3, [r3, #5]
 8017eae:	2b03      	cmp	r3, #3
 8017eb0:	d007      	beq.n	8017ec2 <dhcp_recv+0x102>
 8017eb2:	69bb      	ldr	r3, [r7, #24]
 8017eb4:	795b      	ldrb	r3, [r3, #5]
 8017eb6:	2b04      	cmp	r3, #4
 8017eb8:	d003      	beq.n	8017ec2 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017eba:	69bb      	ldr	r3, [r7, #24]
 8017ebc:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017ebe:	2b05      	cmp	r3, #5
 8017ec0:	d13b      	bne.n	8017f3a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 8017ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ec4:	69f8      	ldr	r0, [r7, #28]
 8017ec6:	f7fe fe99 	bl	8016bfc <dhcp_handle_ack>
      dhcp_bind(netif);
 8017eca:	69f8      	ldr	r0, [r7, #28]
 8017ecc:	f7ff f8c0 	bl	8017050 <dhcp_bind>
 8017ed0:	e033      	b.n	8017f3a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017ed6:	2b06      	cmp	r3, #6
 8017ed8:	d113      	bne.n	8017f02 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017eda:	69bb      	ldr	r3, [r7, #24]
 8017edc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8017ede:	2b03      	cmp	r3, #3
 8017ee0:	d00b      	beq.n	8017efa <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017ee2:	69bb      	ldr	r3, [r7, #24]
 8017ee4:	795b      	ldrb	r3, [r3, #5]
 8017ee6:	2b01      	cmp	r3, #1
 8017ee8:	d007      	beq.n	8017efa <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017eea:	69bb      	ldr	r3, [r7, #24]
 8017eec:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017eee:	2b04      	cmp	r3, #4
 8017ef0:	d003      	beq.n	8017efa <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017ef2:	69bb      	ldr	r3, [r7, #24]
 8017ef4:	795b      	ldrb	r3, [r3, #5]
 8017ef6:	2b05      	cmp	r3, #5
 8017ef8:	d103      	bne.n	8017f02 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8017efa:	69f8      	ldr	r0, [r7, #28]
 8017efc:	f7fe fbec 	bl	80166d8 <dhcp_handle_nak>
 8017f00:	e01b      	b.n	8017f3a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017f02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017f06:	2b02      	cmp	r3, #2
 8017f08:	d116      	bne.n	8017f38 <dhcp_recv+0x178>
 8017f0a:	69bb      	ldr	r3, [r7, #24]
 8017f0c:	795b      	ldrb	r3, [r3, #5]
 8017f0e:	2b06      	cmp	r3, #6
 8017f10:	d112      	bne.n	8017f38 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017f12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017f14:	69f8      	ldr	r0, [r7, #28]
 8017f16:	f7fe fc2d 	bl	8016774 <dhcp_handle_offer>
 8017f1a:	e00e      	b.n	8017f3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017f1c:	bf00      	nop
 8017f1e:	e00c      	b.n	8017f3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017f20:	bf00      	nop
 8017f22:	e00a      	b.n	8017f3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017f24:	bf00      	nop
 8017f26:	e008      	b.n	8017f3a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8017f28:	bf00      	nop
 8017f2a:	e006      	b.n	8017f3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017f2c:	bf00      	nop
 8017f2e:	e004      	b.n	8017f3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017f30:	bf00      	nop
 8017f32:	e002      	b.n	8017f3a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017f34:	bf00      	nop
 8017f36:	e000      	b.n	8017f3a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8017f38:	bf00      	nop
  pbuf_free(p);
 8017f3a:	6878      	ldr	r0, [r7, #4]
 8017f3c:	f7f8 fada 	bl	80104f4 <pbuf_free>
}
 8017f40:	bf00      	nop
 8017f42:	3728      	adds	r7, #40	; 0x28
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}
 8017f48:	20007770 	.word	0x20007770
 8017f4c:	200078c0 	.word	0x200078c0
 8017f50:	200078a0 	.word	0x200078a0

08017f54 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b088      	sub	sp, #32
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	60f8      	str	r0, [r7, #12]
 8017f5c:	60b9      	str	r1, [r7, #8]
 8017f5e:	603b      	str	r3, [r7, #0]
 8017f60:	4613      	mov	r3, r2
 8017f62:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d101      	bne.n	8017f6e <dhcp_create_msg+0x1a>
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	e09e      	b.n	80180ac <dhcp_create_msg+0x158>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8017f6e:	68bb      	ldr	r3, [r7, #8]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d101      	bne.n	8017f78 <dhcp_create_msg+0x24>
 8017f74:	2300      	movs	r3, #0
 8017f76:	e099      	b.n	80180ac <dhcp_create_msg+0x158>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017f78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017f7c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017f80:	2038      	movs	r0, #56	; 0x38
 8017f82:	f7f8 f875 	bl	8010070 <pbuf_alloc>
 8017f86:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017f88:	69bb      	ldr	r3, [r7, #24]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d101      	bne.n	8017f92 <dhcp_create_msg+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	e08c      	b.n	80180ac <dhcp_create_msg+0x158>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017f92:	79fb      	ldrb	r3, [r7, #7]
 8017f94:	2b03      	cmp	r3, #3
 8017f96:	d103      	bne.n	8017fa0 <dhcp_create_msg+0x4c>
 8017f98:	68bb      	ldr	r3, [r7, #8]
 8017f9a:	795b      	ldrb	r3, [r3, #5]
 8017f9c:	2b03      	cmp	r3, #3
 8017f9e:	d10d      	bne.n	8017fbc <dhcp_create_msg+0x68>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	799b      	ldrb	r3, [r3, #6]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d105      	bne.n	8017fb4 <dhcp_create_msg+0x60>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017fa8:	f002 fc8a 	bl	801a8c0 <rand>
 8017fac:	4603      	mov	r3, r0
 8017fae:	461a      	mov	r2, r3
 8017fb0:	4b40      	ldr	r3, [pc, #256]	; (80180b4 <dhcp_create_msg+0x160>)
 8017fb2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017fb4:	4b3f      	ldr	r3, [pc, #252]	; (80180b4 <dhcp_create_msg+0x160>)
 8017fb6:	681a      	ldr	r2, [r3, #0]
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017fbc:	69bb      	ldr	r3, [r7, #24]
 8017fbe:	685b      	ldr	r3, [r3, #4]
 8017fc0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017fc2:	f44f 729a 	mov.w	r2, #308	; 0x134
 8017fc6:	2100      	movs	r1, #0
 8017fc8:	6978      	ldr	r0, [r7, #20]
 8017fca:	f002 fe3a 	bl	801ac42 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017fce:	697b      	ldr	r3, [r7, #20]
 8017fd0:	2201      	movs	r2, #1
 8017fd2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017fd4:	697b      	ldr	r3, [r7, #20]
 8017fd6:	2201      	movs	r2, #1
 8017fd8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017fe0:	697b      	ldr	r3, [r7, #20]
 8017fe2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017fe4:	68bb      	ldr	r3, [r7, #8]
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f7f7 faa0 	bl	800f52e <lwip_htonl>
 8017fee:	4602      	mov	r2, r0
 8017ff0:	697b      	ldr	r3, [r7, #20]
 8017ff2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017ff4:	79fb      	ldrb	r3, [r7, #7]
 8017ff6:	2b08      	cmp	r3, #8
 8017ff8:	d010      	beq.n	801801c <dhcp_create_msg+0xc8>
 8017ffa:	79fb      	ldrb	r3, [r7, #7]
 8017ffc:	2b04      	cmp	r3, #4
 8017ffe:	d00d      	beq.n	801801c <dhcp_create_msg+0xc8>
 8018000:	79fb      	ldrb	r3, [r7, #7]
 8018002:	2b07      	cmp	r3, #7
 8018004:	d00a      	beq.n	801801c <dhcp_create_msg+0xc8>
 8018006:	79fb      	ldrb	r3, [r7, #7]
 8018008:	2b03      	cmp	r3, #3
 801800a:	d10c      	bne.n	8018026 <dhcp_create_msg+0xd2>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801800c:	68bb      	ldr	r3, [r7, #8]
 801800e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018010:	2b05      	cmp	r3, #5
 8018012:	d003      	beq.n	801801c <dhcp_create_msg+0xc8>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018014:	68bb      	ldr	r3, [r7, #8]
 8018016:	795b      	ldrb	r3, [r3, #5]
 8018018:	2b04      	cmp	r3, #4
 801801a:	d104      	bne.n	8018026 <dhcp_create_msg+0xd2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	3304      	adds	r3, #4
 8018020:	681a      	ldr	r2, [r3, #0]
 8018022:	697b      	ldr	r3, [r7, #20]
 8018024:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018026:	2300      	movs	r3, #0
 8018028:	83fb      	strh	r3, [r7, #30]
 801802a:	e00c      	b.n	8018046 <dhcp_create_msg+0xf2>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801802c:	8bfa      	ldrh	r2, [r7, #30]
 801802e:	8bfb      	ldrh	r3, [r7, #30]
 8018030:	68f9      	ldr	r1, [r7, #12]
 8018032:	440a      	add	r2, r1
 8018034:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8018038:	697a      	ldr	r2, [r7, #20]
 801803a:	4413      	add	r3, r2
 801803c:	460a      	mov	r2, r1
 801803e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018040:	8bfb      	ldrh	r3, [r7, #30]
 8018042:	3301      	adds	r3, #1
 8018044:	83fb      	strh	r3, [r7, #30]
 8018046:	8bfb      	ldrh	r3, [r7, #30]
 8018048:	2b05      	cmp	r3, #5
 801804a:	d9ef      	bls.n	801802c <dhcp_create_msg+0xd8>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801804c:	697b      	ldr	r3, [r7, #20]
 801804e:	2200      	movs	r2, #0
 8018050:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018054:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8018058:	2200      	movs	r2, #0
 801805a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801805e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8018062:	2200      	movs	r2, #0
 8018064:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8018068:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801806c:	2200      	movs	r2, #0
 801806e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018072:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8018076:	697b      	ldr	r3, [r7, #20]
 8018078:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801807c:	2301      	movs	r3, #1
 801807e:	2235      	movs	r2, #53	; 0x35
 8018080:	2000      	movs	r0, #0
 8018082:	f7ff fb63 	bl	801774c <dhcp_option>
 8018086:	4603      	mov	r3, r0
 8018088:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801808a:	697b      	ldr	r3, [r7, #20]
 801808c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018090:	79fa      	ldrb	r2, [r7, #7]
 8018092:	8a7b      	ldrh	r3, [r7, #18]
 8018094:	4618      	mov	r0, r3
 8018096:	f7ff fb7c 	bl	8017792 <dhcp_option_byte>
 801809a:	4603      	mov	r3, r0
 801809c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801809e:	683b      	ldr	r3, [r7, #0]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d002      	beq.n	80180aa <dhcp_create_msg+0x156>
    *options_out_len = options_out_len_loc;
 80180a4:	683b      	ldr	r3, [r7, #0]
 80180a6:	8a7a      	ldrh	r2, [r7, #18]
 80180a8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80180aa:	69bb      	ldr	r3, [r7, #24]
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	3720      	adds	r7, #32
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}
 80180b4:	200078d0 	.word	0x200078d0

080180b8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b084      	sub	sp, #16
 80180bc:	af00      	add	r7, sp, #0
 80180be:	4603      	mov	r3, r0
 80180c0:	60b9      	str	r1, [r7, #8]
 80180c2:	607a      	str	r2, [r7, #4]
 80180c4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80180c6:	89fb      	ldrh	r3, [r7, #14]
 80180c8:	1c5a      	adds	r2, r3, #1
 80180ca:	81fa      	strh	r2, [r7, #14]
 80180cc:	461a      	mov	r2, r3
 80180ce:	68bb      	ldr	r3, [r7, #8]
 80180d0:	4413      	add	r3, r2
 80180d2:	22ff      	movs	r2, #255	; 0xff
 80180d4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80180d6:	e007      	b.n	80180e8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80180d8:	89fb      	ldrh	r3, [r7, #14]
 80180da:	1c5a      	adds	r2, r3, #1
 80180dc:	81fa      	strh	r2, [r7, #14]
 80180de:	461a      	mov	r2, r3
 80180e0:	68bb      	ldr	r3, [r7, #8]
 80180e2:	4413      	add	r3, r2
 80180e4:	2200      	movs	r2, #0
 80180e6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80180e8:	89fb      	ldrh	r3, [r7, #14]
 80180ea:	2b43      	cmp	r3, #67	; 0x43
 80180ec:	d904      	bls.n	80180f8 <dhcp_option_trailer+0x40>
 80180ee:	89fb      	ldrh	r3, [r7, #14]
 80180f0:	f003 0303 	and.w	r3, r3, #3
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d002      	beq.n	80180fe <dhcp_option_trailer+0x46>
 80180f8:	89fb      	ldrh	r3, [r7, #14]
 80180fa:	2b43      	cmp	r3, #67	; 0x43
 80180fc:	d9ec      	bls.n	80180d8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80180fe:	89fb      	ldrh	r3, [r7, #14]
 8018100:	33f0      	adds	r3, #240	; 0xf0
 8018102:	b29b      	uxth	r3, r3
 8018104:	4619      	mov	r1, r3
 8018106:	6878      	ldr	r0, [r7, #4]
 8018108:	f7f8 f8c1 	bl	801028e <pbuf_realloc>
}
 801810c:	bf00      	nop
 801810e:	3710      	adds	r7, #16
 8018110:	46bd      	mov	sp, r7
 8018112:	bd80      	pop	{r7, pc}

08018114 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8018114:	b480      	push	{r7}
 8018116:	b085      	sub	sp, #20
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	2b00      	cmp	r3, #0
 8018120:	d017      	beq.n	8018152 <dhcp_supplied_address+0x3e>
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	6a1b      	ldr	r3, [r3, #32]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d013      	beq.n	8018152 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	6a1b      	ldr	r3, [r3, #32]
 801812e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	795b      	ldrb	r3, [r3, #5]
 8018134:	2b0a      	cmp	r3, #10
 8018136:	d007      	beq.n	8018148 <dhcp_supplied_address+0x34>
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	795b      	ldrb	r3, [r3, #5]
 801813c:	2b05      	cmp	r3, #5
 801813e:	d003      	beq.n	8018148 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018144:	2b04      	cmp	r3, #4
 8018146:	d101      	bne.n	801814c <dhcp_supplied_address+0x38>
 8018148:	2301      	movs	r3, #1
 801814a:	e000      	b.n	801814e <dhcp_supplied_address+0x3a>
 801814c:	2300      	movs	r3, #0
 801814e:	b2db      	uxtb	r3, r3
 8018150:	e000      	b.n	8018154 <dhcp_supplied_address+0x40>
  }
  return 0;
 8018152:	2300      	movs	r3, #0
}
 8018154:	4618      	mov	r0, r3
 8018156:	3714      	adds	r7, #20
 8018158:	46bd      	mov	sp, r7
 801815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815e:	4770      	bx	lr

08018160 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b084      	sub	sp, #16
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  while (q) {
 8018168:	e00d      	b.n	8018186 <free_etharp_q+0x26>
    r = q;
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	60fb      	str	r3, [r7, #12]
    q = q->next;
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	685b      	ldr	r3, [r3, #4]
 8018178:	4618      	mov	r0, r3
 801817a:	f7f8 f9bb 	bl	80104f4 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801817e:	68f9      	ldr	r1, [r7, #12]
 8018180:	2006      	movs	r0, #6
 8018182:	f7f7 fcdb 	bl	800fb3c <memp_free>
  while (q) {
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d1ee      	bne.n	801816a <free_etharp_q+0xa>
  }
}
 801818c:	bf00      	nop
 801818e:	bf00      	nop
 8018190:	3710      	adds	r7, #16
 8018192:	46bd      	mov	sp, r7
 8018194:	bd80      	pop	{r7, pc}
	...

08018198 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b082      	sub	sp, #8
 801819c:	af00      	add	r7, sp, #0
 801819e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80181a0:	492b      	ldr	r1, [pc, #172]	; (8018250 <etharp_free_entry+0xb8>)
 80181a2:	687a      	ldr	r2, [r7, #4]
 80181a4:	4613      	mov	r3, r2
 80181a6:	005b      	lsls	r3, r3, #1
 80181a8:	4413      	add	r3, r2
 80181aa:	00db      	lsls	r3, r3, #3
 80181ac:	440b      	add	r3, r1
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d013      	beq.n	80181dc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80181b4:	4926      	ldr	r1, [pc, #152]	; (8018250 <etharp_free_entry+0xb8>)
 80181b6:	687a      	ldr	r2, [r7, #4]
 80181b8:	4613      	mov	r3, r2
 80181ba:	005b      	lsls	r3, r3, #1
 80181bc:	4413      	add	r3, r2
 80181be:	00db      	lsls	r3, r3, #3
 80181c0:	440b      	add	r3, r1
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7ff ffcb 	bl	8018160 <free_etharp_q>
    arp_table[i].q = NULL;
 80181ca:	4921      	ldr	r1, [pc, #132]	; (8018250 <etharp_free_entry+0xb8>)
 80181cc:	687a      	ldr	r2, [r7, #4]
 80181ce:	4613      	mov	r3, r2
 80181d0:	005b      	lsls	r3, r3, #1
 80181d2:	4413      	add	r3, r2
 80181d4:	00db      	lsls	r3, r3, #3
 80181d6:	440b      	add	r3, r1
 80181d8:	2200      	movs	r2, #0
 80181da:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80181dc:	491c      	ldr	r1, [pc, #112]	; (8018250 <etharp_free_entry+0xb8>)
 80181de:	687a      	ldr	r2, [r7, #4]
 80181e0:	4613      	mov	r3, r2
 80181e2:	005b      	lsls	r3, r3, #1
 80181e4:	4413      	add	r3, r2
 80181e6:	00db      	lsls	r3, r3, #3
 80181e8:	440b      	add	r3, r1
 80181ea:	3314      	adds	r3, #20
 80181ec:	2200      	movs	r2, #0
 80181ee:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 80181f0:	4917      	ldr	r1, [pc, #92]	; (8018250 <etharp_free_entry+0xb8>)
 80181f2:	687a      	ldr	r2, [r7, #4]
 80181f4:	4613      	mov	r3, r2
 80181f6:	005b      	lsls	r3, r3, #1
 80181f8:	4413      	add	r3, r2
 80181fa:	00db      	lsls	r3, r3, #3
 80181fc:	440b      	add	r3, r1
 80181fe:	3312      	adds	r3, #18
 8018200:	2200      	movs	r2, #0
 8018202:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8018204:	4912      	ldr	r1, [pc, #72]	; (8018250 <etharp_free_entry+0xb8>)
 8018206:	687a      	ldr	r2, [r7, #4]
 8018208:	4613      	mov	r3, r2
 801820a:	005b      	lsls	r3, r3, #1
 801820c:	4413      	add	r3, r2
 801820e:	00db      	lsls	r3, r3, #3
 8018210:	440b      	add	r3, r1
 8018212:	3308      	adds	r3, #8
 8018214:	2200      	movs	r2, #0
 8018216:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8018218:	490d      	ldr	r1, [pc, #52]	; (8018250 <etharp_free_entry+0xb8>)
 801821a:	687a      	ldr	r2, [r7, #4]
 801821c:	4613      	mov	r3, r2
 801821e:	005b      	lsls	r3, r3, #1
 8018220:	4413      	add	r3, r2
 8018222:	00db      	lsls	r3, r3, #3
 8018224:	440b      	add	r3, r1
 8018226:	3304      	adds	r3, #4
 8018228:	2200      	movs	r2, #0
 801822a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801822c:	4908      	ldr	r1, [pc, #32]	; (8018250 <etharp_free_entry+0xb8>)
 801822e:	687a      	ldr	r2, [r7, #4]
 8018230:	4613      	mov	r3, r2
 8018232:	005b      	lsls	r3, r3, #1
 8018234:	4413      	add	r3, r2
 8018236:	00db      	lsls	r3, r3, #3
 8018238:	440b      	add	r3, r1
 801823a:	3308      	adds	r3, #8
 801823c:	4a05      	ldr	r2, [pc, #20]	; (8018254 <etharp_free_entry+0xbc>)
 801823e:	3304      	adds	r3, #4
 8018240:	6810      	ldr	r0, [r2, #0]
 8018242:	6018      	str	r0, [r3, #0]
 8018244:	8892      	ldrh	r2, [r2, #4]
 8018246:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8018248:	bf00      	nop
 801824a:	3708      	adds	r7, #8
 801824c:	46bd      	mov	sp, r7
 801824e:	bd80      	pop	{r7, pc}
 8018250:	200078d4 	.word	0x200078d4
 8018254:	0801d258 	.word	0x0801d258

08018258 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018258:	b580      	push	{r7, lr}
 801825a:	b082      	sub	sp, #8
 801825c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801825e:	2300      	movs	r3, #0
 8018260:	607b      	str	r3, [r7, #4]
 8018262:	e096      	b.n	8018392 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018264:	494f      	ldr	r1, [pc, #316]	; (80183a4 <etharp_tmr+0x14c>)
 8018266:	687a      	ldr	r2, [r7, #4]
 8018268:	4613      	mov	r3, r2
 801826a:	005b      	lsls	r3, r3, #1
 801826c:	4413      	add	r3, r2
 801826e:	00db      	lsls	r3, r3, #3
 8018270:	440b      	add	r3, r1
 8018272:	3314      	adds	r3, #20
 8018274:	781b      	ldrb	r3, [r3, #0]
 8018276:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018278:	78fb      	ldrb	r3, [r7, #3]
 801827a:	2b00      	cmp	r3, #0
 801827c:	f000 8086 	beq.w	801838c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018280:	4948      	ldr	r1, [pc, #288]	; (80183a4 <etharp_tmr+0x14c>)
 8018282:	687a      	ldr	r2, [r7, #4]
 8018284:	4613      	mov	r3, r2
 8018286:	005b      	lsls	r3, r3, #1
 8018288:	4413      	add	r3, r2
 801828a:	00db      	lsls	r3, r3, #3
 801828c:	440b      	add	r3, r1
 801828e:	3312      	adds	r3, #18
 8018290:	881b      	ldrh	r3, [r3, #0]
 8018292:	3301      	adds	r3, #1
 8018294:	b298      	uxth	r0, r3
 8018296:	4943      	ldr	r1, [pc, #268]	; (80183a4 <etharp_tmr+0x14c>)
 8018298:	687a      	ldr	r2, [r7, #4]
 801829a:	4613      	mov	r3, r2
 801829c:	005b      	lsls	r3, r3, #1
 801829e:	4413      	add	r3, r2
 80182a0:	00db      	lsls	r3, r3, #3
 80182a2:	440b      	add	r3, r1
 80182a4:	3312      	adds	r3, #18
 80182a6:	4602      	mov	r2, r0
 80182a8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80182aa:	493e      	ldr	r1, [pc, #248]	; (80183a4 <etharp_tmr+0x14c>)
 80182ac:	687a      	ldr	r2, [r7, #4]
 80182ae:	4613      	mov	r3, r2
 80182b0:	005b      	lsls	r3, r3, #1
 80182b2:	4413      	add	r3, r2
 80182b4:	00db      	lsls	r3, r3, #3
 80182b6:	440b      	add	r3, r1
 80182b8:	3312      	adds	r3, #18
 80182ba:	881b      	ldrh	r3, [r3, #0]
 80182bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80182c0:	d215      	bcs.n	80182ee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80182c2:	4938      	ldr	r1, [pc, #224]	; (80183a4 <etharp_tmr+0x14c>)
 80182c4:	687a      	ldr	r2, [r7, #4]
 80182c6:	4613      	mov	r3, r2
 80182c8:	005b      	lsls	r3, r3, #1
 80182ca:	4413      	add	r3, r2
 80182cc:	00db      	lsls	r3, r3, #3
 80182ce:	440b      	add	r3, r1
 80182d0:	3314      	adds	r3, #20
 80182d2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80182d4:	2b01      	cmp	r3, #1
 80182d6:	d10e      	bne.n	80182f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80182d8:	4932      	ldr	r1, [pc, #200]	; (80183a4 <etharp_tmr+0x14c>)
 80182da:	687a      	ldr	r2, [r7, #4]
 80182dc:	4613      	mov	r3, r2
 80182de:	005b      	lsls	r3, r3, #1
 80182e0:	4413      	add	r3, r2
 80182e2:	00db      	lsls	r3, r3, #3
 80182e4:	440b      	add	r3, r1
 80182e6:	3312      	adds	r3, #18
 80182e8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80182ea:	2b04      	cmp	r3, #4
 80182ec:	d903      	bls.n	80182f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80182ee:	6878      	ldr	r0, [r7, #4]
 80182f0:	f7ff ff52 	bl	8018198 <etharp_free_entry>
 80182f4:	e04a      	b.n	801838c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80182f6:	492b      	ldr	r1, [pc, #172]	; (80183a4 <etharp_tmr+0x14c>)
 80182f8:	687a      	ldr	r2, [r7, #4]
 80182fa:	4613      	mov	r3, r2
 80182fc:	005b      	lsls	r3, r3, #1
 80182fe:	4413      	add	r3, r2
 8018300:	00db      	lsls	r3, r3, #3
 8018302:	440b      	add	r3, r1
 8018304:	3314      	adds	r3, #20
 8018306:	781b      	ldrb	r3, [r3, #0]
 8018308:	2b03      	cmp	r3, #3
 801830a:	d10a      	bne.n	8018322 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801830c:	4925      	ldr	r1, [pc, #148]	; (80183a4 <etharp_tmr+0x14c>)
 801830e:	687a      	ldr	r2, [r7, #4]
 8018310:	4613      	mov	r3, r2
 8018312:	005b      	lsls	r3, r3, #1
 8018314:	4413      	add	r3, r2
 8018316:	00db      	lsls	r3, r3, #3
 8018318:	440b      	add	r3, r1
 801831a:	3314      	adds	r3, #20
 801831c:	2204      	movs	r2, #4
 801831e:	701a      	strb	r2, [r3, #0]
 8018320:	e034      	b.n	801838c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018322:	4920      	ldr	r1, [pc, #128]	; (80183a4 <etharp_tmr+0x14c>)
 8018324:	687a      	ldr	r2, [r7, #4]
 8018326:	4613      	mov	r3, r2
 8018328:	005b      	lsls	r3, r3, #1
 801832a:	4413      	add	r3, r2
 801832c:	00db      	lsls	r3, r3, #3
 801832e:	440b      	add	r3, r1
 8018330:	3314      	adds	r3, #20
 8018332:	781b      	ldrb	r3, [r3, #0]
 8018334:	2b04      	cmp	r3, #4
 8018336:	d10a      	bne.n	801834e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018338:	491a      	ldr	r1, [pc, #104]	; (80183a4 <etharp_tmr+0x14c>)
 801833a:	687a      	ldr	r2, [r7, #4]
 801833c:	4613      	mov	r3, r2
 801833e:	005b      	lsls	r3, r3, #1
 8018340:	4413      	add	r3, r2
 8018342:	00db      	lsls	r3, r3, #3
 8018344:	440b      	add	r3, r1
 8018346:	3314      	adds	r3, #20
 8018348:	2202      	movs	r2, #2
 801834a:	701a      	strb	r2, [r3, #0]
 801834c:	e01e      	b.n	801838c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801834e:	4915      	ldr	r1, [pc, #84]	; (80183a4 <etharp_tmr+0x14c>)
 8018350:	687a      	ldr	r2, [r7, #4]
 8018352:	4613      	mov	r3, r2
 8018354:	005b      	lsls	r3, r3, #1
 8018356:	4413      	add	r3, r2
 8018358:	00db      	lsls	r3, r3, #3
 801835a:	440b      	add	r3, r1
 801835c:	3314      	adds	r3, #20
 801835e:	781b      	ldrb	r3, [r3, #0]
 8018360:	2b01      	cmp	r3, #1
 8018362:	d113      	bne.n	801838c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018364:	490f      	ldr	r1, [pc, #60]	; (80183a4 <etharp_tmr+0x14c>)
 8018366:	687a      	ldr	r2, [r7, #4]
 8018368:	4613      	mov	r3, r2
 801836a:	005b      	lsls	r3, r3, #1
 801836c:	4413      	add	r3, r2
 801836e:	00db      	lsls	r3, r3, #3
 8018370:	440b      	add	r3, r1
 8018372:	3308      	adds	r3, #8
 8018374:	6818      	ldr	r0, [r3, #0]
 8018376:	687a      	ldr	r2, [r7, #4]
 8018378:	4613      	mov	r3, r2
 801837a:	005b      	lsls	r3, r3, #1
 801837c:	4413      	add	r3, r2
 801837e:	00db      	lsls	r3, r3, #3
 8018380:	4a08      	ldr	r2, [pc, #32]	; (80183a4 <etharp_tmr+0x14c>)
 8018382:	4413      	add	r3, r2
 8018384:	3304      	adds	r3, #4
 8018386:	4619      	mov	r1, r3
 8018388:	f000 fdae 	bl	8018ee8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	3301      	adds	r3, #1
 8018390:	607b      	str	r3, [r7, #4]
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	2b09      	cmp	r3, #9
 8018396:	f77f af65 	ble.w	8018264 <etharp_tmr+0xc>
      }
    }
  }
}
 801839a:	bf00      	nop
 801839c:	bf00      	nop
 801839e:	3708      	adds	r7, #8
 80183a0:	46bd      	mov	sp, r7
 80183a2:	bd80      	pop	{r7, pc}
 80183a4:	200078d4 	.word	0x200078d4

080183a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b08a      	sub	sp, #40	; 0x28
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	60f8      	str	r0, [r7, #12]
 80183b0:	460b      	mov	r3, r1
 80183b2:	607a      	str	r2, [r7, #4]
 80183b4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80183b6:	230a      	movs	r3, #10
 80183b8:	843b      	strh	r3, [r7, #32]
 80183ba:	230a      	movs	r3, #10
 80183bc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 80183be:	230a      	movs	r3, #10
 80183c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 80183c2:	2300      	movs	r3, #0
 80183c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80183c6:	230a      	movs	r3, #10
 80183c8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80183ca:	2300      	movs	r3, #0
 80183cc:	83bb      	strh	r3, [r7, #28]
 80183ce:	2300      	movs	r3, #0
 80183d0:	837b      	strh	r3, [r7, #26]
 80183d2:	2300      	movs	r3, #0
 80183d4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80183d6:	2300      	movs	r3, #0
 80183d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80183da:	e0a1      	b.n	8018520 <etharp_find_entry+0x178>
    u8_t state = arp_table[i].state;
 80183dc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80183e0:	4982      	ldr	r1, [pc, #520]	; (80185ec <etharp_find_entry+0x244>)
 80183e2:	4613      	mov	r3, r2
 80183e4:	005b      	lsls	r3, r3, #1
 80183e6:	4413      	add	r3, r2
 80183e8:	00db      	lsls	r3, r3, #3
 80183ea:	440b      	add	r3, r1
 80183ec:	3314      	adds	r3, #20
 80183ee:	781b      	ldrb	r3, [r3, #0]
 80183f0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80183f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80183f6:	2b0a      	cmp	r3, #10
 80183f8:	d105      	bne.n	8018406 <etharp_find_entry+0x5e>
 80183fa:	7dfb      	ldrb	r3, [r7, #23]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d102      	bne.n	8018406 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018400:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018402:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018404:	e088      	b.n	8018518 <etharp_find_entry+0x170>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018406:	7dfb      	ldrb	r3, [r7, #23]
 8018408:	2b00      	cmp	r3, #0
 801840a:	f000 8085 	beq.w	8018518 <etharp_find_entry+0x170>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d020      	beq.n	8018456 <etharp_find_entry+0xae>
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	6819      	ldr	r1, [r3, #0]
 8018418:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801841c:	4873      	ldr	r0, [pc, #460]	; (80185ec <etharp_find_entry+0x244>)
 801841e:	4613      	mov	r3, r2
 8018420:	005b      	lsls	r3, r3, #1
 8018422:	4413      	add	r3, r2
 8018424:	00db      	lsls	r3, r3, #3
 8018426:	4403      	add	r3, r0
 8018428:	3304      	adds	r3, #4
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	4299      	cmp	r1, r3
 801842e:	d112      	bne.n	8018456 <etharp_find_entry+0xae>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d00c      	beq.n	8018450 <etharp_find_entry+0xa8>
 8018436:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801843a:	496c      	ldr	r1, [pc, #432]	; (80185ec <etharp_find_entry+0x244>)
 801843c:	4613      	mov	r3, r2
 801843e:	005b      	lsls	r3, r3, #1
 8018440:	4413      	add	r3, r2
 8018442:	00db      	lsls	r3, r3, #3
 8018444:	440b      	add	r3, r1
 8018446:	3308      	adds	r3, #8
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	687a      	ldr	r2, [r7, #4]
 801844c:	429a      	cmp	r2, r3
 801844e:	d102      	bne.n	8018456 <etharp_find_entry+0xae>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018450:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018454:	e0c5      	b.n	80185e2 <etharp_find_entry+0x23a>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018456:	7dfb      	ldrb	r3, [r7, #23]
 8018458:	2b01      	cmp	r3, #1
 801845a:	d140      	bne.n	80184de <etharp_find_entry+0x136>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801845c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018460:	4962      	ldr	r1, [pc, #392]	; (80185ec <etharp_find_entry+0x244>)
 8018462:	4613      	mov	r3, r2
 8018464:	005b      	lsls	r3, r3, #1
 8018466:	4413      	add	r3, r2
 8018468:	00db      	lsls	r3, r3, #3
 801846a:	440b      	add	r3, r1
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d01a      	beq.n	80184a8 <etharp_find_entry+0x100>
          if (arp_table[i].ctime >= age_queue) {
 8018472:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018476:	495d      	ldr	r1, [pc, #372]	; (80185ec <etharp_find_entry+0x244>)
 8018478:	4613      	mov	r3, r2
 801847a:	005b      	lsls	r3, r3, #1
 801847c:	4413      	add	r3, r2
 801847e:	00db      	lsls	r3, r3, #3
 8018480:	440b      	add	r3, r1
 8018482:	3312      	adds	r3, #18
 8018484:	881b      	ldrh	r3, [r3, #0]
 8018486:	8bba      	ldrh	r2, [r7, #28]
 8018488:	429a      	cmp	r2, r3
 801848a:	d845      	bhi.n	8018518 <etharp_find_entry+0x170>
            old_queue = i;
 801848c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801848e:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018490:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018494:	4955      	ldr	r1, [pc, #340]	; (80185ec <etharp_find_entry+0x244>)
 8018496:	4613      	mov	r3, r2
 8018498:	005b      	lsls	r3, r3, #1
 801849a:	4413      	add	r3, r2
 801849c:	00db      	lsls	r3, r3, #3
 801849e:	440b      	add	r3, r1
 80184a0:	3312      	adds	r3, #18
 80184a2:	881b      	ldrh	r3, [r3, #0]
 80184a4:	83bb      	strh	r3, [r7, #28]
 80184a6:	e037      	b.n	8018518 <etharp_find_entry+0x170>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80184a8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80184ac:	494f      	ldr	r1, [pc, #316]	; (80185ec <etharp_find_entry+0x244>)
 80184ae:	4613      	mov	r3, r2
 80184b0:	005b      	lsls	r3, r3, #1
 80184b2:	4413      	add	r3, r2
 80184b4:	00db      	lsls	r3, r3, #3
 80184b6:	440b      	add	r3, r1
 80184b8:	3312      	adds	r3, #18
 80184ba:	881b      	ldrh	r3, [r3, #0]
 80184bc:	8b7a      	ldrh	r2, [r7, #26]
 80184be:	429a      	cmp	r2, r3
 80184c0:	d82a      	bhi.n	8018518 <etharp_find_entry+0x170>
            old_pending = i;
 80184c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80184c4:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 80184c6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80184ca:	4948      	ldr	r1, [pc, #288]	; (80185ec <etharp_find_entry+0x244>)
 80184cc:	4613      	mov	r3, r2
 80184ce:	005b      	lsls	r3, r3, #1
 80184d0:	4413      	add	r3, r2
 80184d2:	00db      	lsls	r3, r3, #3
 80184d4:	440b      	add	r3, r1
 80184d6:	3312      	adds	r3, #18
 80184d8:	881b      	ldrh	r3, [r3, #0]
 80184da:	837b      	strh	r3, [r7, #26]
 80184dc:	e01c      	b.n	8018518 <etharp_find_entry+0x170>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80184de:	7dfb      	ldrb	r3, [r7, #23]
 80184e0:	2b01      	cmp	r3, #1
 80184e2:	d919      	bls.n	8018518 <etharp_find_entry+0x170>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80184e4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80184e8:	4940      	ldr	r1, [pc, #256]	; (80185ec <etharp_find_entry+0x244>)
 80184ea:	4613      	mov	r3, r2
 80184ec:	005b      	lsls	r3, r3, #1
 80184ee:	4413      	add	r3, r2
 80184f0:	00db      	lsls	r3, r3, #3
 80184f2:	440b      	add	r3, r1
 80184f4:	3312      	adds	r3, #18
 80184f6:	881b      	ldrh	r3, [r3, #0]
 80184f8:	8b3a      	ldrh	r2, [r7, #24]
 80184fa:	429a      	cmp	r2, r3
 80184fc:	d80c      	bhi.n	8018518 <etharp_find_entry+0x170>
            old_stable = i;
 80184fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018500:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 8018502:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018506:	4939      	ldr	r1, [pc, #228]	; (80185ec <etharp_find_entry+0x244>)
 8018508:	4613      	mov	r3, r2
 801850a:	005b      	lsls	r3, r3, #1
 801850c:	4413      	add	r3, r2
 801850e:	00db      	lsls	r3, r3, #3
 8018510:	440b      	add	r3, r1
 8018512:	3312      	adds	r3, #18
 8018514:	881b      	ldrh	r3, [r3, #0]
 8018516:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018518:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801851a:	3301      	adds	r3, #1
 801851c:	b29b      	uxth	r3, r3
 801851e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018520:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018524:	2b09      	cmp	r3, #9
 8018526:	f77f af59 	ble.w	80183dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801852a:	7afb      	ldrb	r3, [r7, #11]
 801852c:	f003 0302 	and.w	r3, r3, #2
 8018530:	2b00      	cmp	r3, #0
 8018532:	d108      	bne.n	8018546 <etharp_find_entry+0x19e>
 8018534:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018538:	2b0a      	cmp	r3, #10
 801853a:	d107      	bne.n	801854c <etharp_find_entry+0x1a4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801853c:	7afb      	ldrb	r3, [r7, #11]
 801853e:	f003 0301 	and.w	r3, r3, #1
 8018542:	2b00      	cmp	r3, #0
 8018544:	d102      	bne.n	801854c <etharp_find_entry+0x1a4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801854a:	e04a      	b.n	80185e2 <etharp_find_entry+0x23a>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801854c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018550:	2b09      	cmp	r3, #9
 8018552:	dc02      	bgt.n	801855a <etharp_find_entry+0x1b2>
    i = empty;
 8018554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018556:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018558:	e01c      	b.n	8018594 <etharp_find_entry+0x1ec>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801855a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801855e:	2b09      	cmp	r3, #9
 8018560:	dc02      	bgt.n	8018568 <etharp_find_entry+0x1c0>
      /* recycle oldest stable*/
      i = old_stable;
 8018562:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018564:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018566:	e010      	b.n	801858a <etharp_find_entry+0x1e2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018568:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801856c:	2b09      	cmp	r3, #9
 801856e:	dc02      	bgt.n	8018576 <etharp_find_entry+0x1ce>
      /* recycle oldest pending */
      i = old_pending;
 8018570:	8c3b      	ldrh	r3, [r7, #32]
 8018572:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018574:	e009      	b.n	801858a <etharp_find_entry+0x1e2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018576:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801857a:	2b09      	cmp	r3, #9
 801857c:	dc02      	bgt.n	8018584 <etharp_find_entry+0x1dc>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801857e:	8bfb      	ldrh	r3, [r7, #30]
 8018580:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018582:	e002      	b.n	801858a <etharp_find_entry+0x1e2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018588:	e02b      	b.n	80185e2 <etharp_find_entry+0x23a>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 801858a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801858e:	4618      	mov	r0, r3
 8018590:	f7ff fe02 	bl	8018198 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d00b      	beq.n	80185b2 <etharp_find_entry+0x20a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801859a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	6819      	ldr	r1, [r3, #0]
 80185a2:	4812      	ldr	r0, [pc, #72]	; (80185ec <etharp_find_entry+0x244>)
 80185a4:	4613      	mov	r3, r2
 80185a6:	005b      	lsls	r3, r3, #1
 80185a8:	4413      	add	r3, r2
 80185aa:	00db      	lsls	r3, r3, #3
 80185ac:	4403      	add	r3, r0
 80185ae:	3304      	adds	r3, #4
 80185b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80185b2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80185b6:	490d      	ldr	r1, [pc, #52]	; (80185ec <etharp_find_entry+0x244>)
 80185b8:	4613      	mov	r3, r2
 80185ba:	005b      	lsls	r3, r3, #1
 80185bc:	4413      	add	r3, r2
 80185be:	00db      	lsls	r3, r3, #3
 80185c0:	440b      	add	r3, r1
 80185c2:	3312      	adds	r3, #18
 80185c4:	2200      	movs	r2, #0
 80185c6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80185c8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80185cc:	4907      	ldr	r1, [pc, #28]	; (80185ec <etharp_find_entry+0x244>)
 80185ce:	4613      	mov	r3, r2
 80185d0:	005b      	lsls	r3, r3, #1
 80185d2:	4413      	add	r3, r2
 80185d4:	00db      	lsls	r3, r3, #3
 80185d6:	440b      	add	r3, r1
 80185d8:	3308      	adds	r3, #8
 80185da:	687a      	ldr	r2, [r7, #4]
 80185dc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80185de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 80185e2:	4618      	mov	r0, r3
 80185e4:	3728      	adds	r7, #40	; 0x28
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bd80      	pop	{r7, pc}
 80185ea:	bf00      	nop
 80185ec:	200078d4 	.word	0x200078d4

080185f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b08a      	sub	sp, #40	; 0x28
 80185f4:	af02      	add	r7, sp, #8
 80185f6:	60f8      	str	r0, [r7, #12]
 80185f8:	60b9      	str	r1, [r7, #8]
 80185fa:	607a      	str	r2, [r7, #4]
 80185fc:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d012      	beq.n	801862a <etharp_update_arp_entry+0x3a>
 8018604:	68bb      	ldr	r3, [r7, #8]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d00e      	beq.n	801862a <etharp_update_arp_entry+0x3a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801860c:	68bb      	ldr	r3, [r7, #8]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	68f9      	ldr	r1, [r7, #12]
 8018612:	4618      	mov	r0, r3
 8018614:	f001 f9fe 	bl	8019a14 <ip4_addr_isbroadcast_u32>
 8018618:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801861a:	2b00      	cmp	r3, #0
 801861c:	d105      	bne.n	801862a <etharp_update_arp_entry+0x3a>
      ip4_addr_ismulticast(ipaddr)) {
 801861e:	68bb      	ldr	r3, [r7, #8]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018626:	2be0      	cmp	r3, #224	; 0xe0
 8018628:	d102      	bne.n	8018630 <etharp_update_arp_entry+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801862a:	f06f 030f 	mvn.w	r3, #15
 801862e:	e075      	b.n	801871c <etharp_update_arp_entry+0x12c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018630:	78fb      	ldrb	r3, [r7, #3]
 8018632:	68fa      	ldr	r2, [r7, #12]
 8018634:	4619      	mov	r1, r3
 8018636:	68b8      	ldr	r0, [r7, #8]
 8018638:	f7ff feb6 	bl	80183a8 <etharp_find_entry>
 801863c:	4603      	mov	r3, r0
 801863e:	83fb      	strh	r3, [r7, #30]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018640:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018644:	2b00      	cmp	r3, #0
 8018646:	da02      	bge.n	801864e <etharp_update_arp_entry+0x5e>
    return (err_t)i;
 8018648:	8bfb      	ldrh	r3, [r7, #30]
 801864a:	b25b      	sxtb	r3, r3
 801864c:	e066      	b.n	801871c <etharp_update_arp_entry+0x12c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801864e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8018652:	4934      	ldr	r1, [pc, #208]	; (8018724 <etharp_update_arp_entry+0x134>)
 8018654:	4613      	mov	r3, r2
 8018656:	005b      	lsls	r3, r3, #1
 8018658:	4413      	add	r3, r2
 801865a:	00db      	lsls	r3, r3, #3
 801865c:	440b      	add	r3, r1
 801865e:	3314      	adds	r3, #20
 8018660:	2202      	movs	r2, #2
 8018662:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018664:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8018668:	492e      	ldr	r1, [pc, #184]	; (8018724 <etharp_update_arp_entry+0x134>)
 801866a:	4613      	mov	r3, r2
 801866c:	005b      	lsls	r3, r3, #1
 801866e:	4413      	add	r3, r2
 8018670:	00db      	lsls	r3, r3, #3
 8018672:	440b      	add	r3, r1
 8018674:	3308      	adds	r3, #8
 8018676:	68fa      	ldr	r2, [r7, #12]
 8018678:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801867a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801867e:	4613      	mov	r3, r2
 8018680:	005b      	lsls	r3, r3, #1
 8018682:	4413      	add	r3, r2
 8018684:	00db      	lsls	r3, r3, #3
 8018686:	3308      	adds	r3, #8
 8018688:	4a26      	ldr	r2, [pc, #152]	; (8018724 <etharp_update_arp_entry+0x134>)
 801868a:	4413      	add	r3, r2
 801868c:	3304      	adds	r3, #4
 801868e:	2206      	movs	r2, #6
 8018690:	6879      	ldr	r1, [r7, #4]
 8018692:	4618      	mov	r0, r3
 8018694:	f002 fb7f 	bl	801ad96 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018698:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801869c:	4921      	ldr	r1, [pc, #132]	; (8018724 <etharp_update_arp_entry+0x134>)
 801869e:	4613      	mov	r3, r2
 80186a0:	005b      	lsls	r3, r3, #1
 80186a2:	4413      	add	r3, r2
 80186a4:	00db      	lsls	r3, r3, #3
 80186a6:	440b      	add	r3, r1
 80186a8:	3312      	adds	r3, #18
 80186aa:	2200      	movs	r2, #0
 80186ac:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 80186ae:	e029      	b.n	8018704 <etharp_update_arp_entry+0x114>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 80186b0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80186b4:	491b      	ldr	r1, [pc, #108]	; (8018724 <etharp_update_arp_entry+0x134>)
 80186b6:	4613      	mov	r3, r2
 80186b8:	005b      	lsls	r3, r3, #1
 80186ba:	4413      	add	r3, r2
 80186bc:	00db      	lsls	r3, r3, #3
 80186be:	440b      	add	r3, r1
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 80186c4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80186c8:	69bb      	ldr	r3, [r7, #24]
 80186ca:	6819      	ldr	r1, [r3, #0]
 80186cc:	4815      	ldr	r0, [pc, #84]	; (8018724 <etharp_update_arp_entry+0x134>)
 80186ce:	4613      	mov	r3, r2
 80186d0:	005b      	lsls	r3, r3, #1
 80186d2:	4413      	add	r3, r2
 80186d4:	00db      	lsls	r3, r3, #3
 80186d6:	4403      	add	r3, r0
 80186d8:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 80186da:	69bb      	ldr	r3, [r7, #24]
 80186dc:	685b      	ldr	r3, [r3, #4]
 80186de:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 80186e0:	69b9      	ldr	r1, [r7, #24]
 80186e2:	2006      	movs	r0, #6
 80186e4:	f7f7 fa2a 	bl	800fb3c <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80186ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80186f2:	9300      	str	r3, [sp, #0]
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	6979      	ldr	r1, [r7, #20]
 80186f8:	68f8      	ldr	r0, [r7, #12]
 80186fa:	f001 ffd5 	bl	801a6a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80186fe:	6978      	ldr	r0, [r7, #20]
 8018700:	f7f7 fef8 	bl	80104f4 <pbuf_free>
  while (arp_table[i].q != NULL) {
 8018704:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8018708:	4906      	ldr	r1, [pc, #24]	; (8018724 <etharp_update_arp_entry+0x134>)
 801870a:	4613      	mov	r3, r2
 801870c:	005b      	lsls	r3, r3, #1
 801870e:	4413      	add	r3, r2
 8018710:	00db      	lsls	r3, r3, #3
 8018712:	440b      	add	r3, r1
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d1ca      	bne.n	80186b0 <etharp_update_arp_entry+0xc0>
  }
  return ERR_OK;
 801871a:	2300      	movs	r3, #0
}
 801871c:	4618      	mov	r0, r3
 801871e:	3720      	adds	r7, #32
 8018720:	46bd      	mov	sp, r7
 8018722:	bd80      	pop	{r7, pc}
 8018724:	200078d4 	.word	0x200078d4

08018728 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018728:	b5b0      	push	{r4, r5, r7, lr}
 801872a:	b08a      	sub	sp, #40	; 0x28
 801872c:	af04      	add	r7, sp, #16
 801872e:	6078      	str	r0, [r7, #4]
 8018730:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018732:	683b      	ldr	r3, [r7, #0]
 8018734:	2b00      	cmp	r3, #0
 8018736:	f000 808e 	beq.w	8018856 <etharp_input+0x12e>

  hdr = (struct etharp_hdr *)p->payload;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	685b      	ldr	r3, [r3, #4]
 801873e:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018740:	697b      	ldr	r3, [r7, #20]
 8018742:	881b      	ldrh	r3, [r3, #0]
 8018744:	b29b      	uxth	r3, r3
 8018746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801874a:	d10c      	bne.n	8018766 <etharp_input+0x3e>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801874c:	697b      	ldr	r3, [r7, #20]
 801874e:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018750:	2b06      	cmp	r3, #6
 8018752:	d108      	bne.n	8018766 <etharp_input+0x3e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018754:	697b      	ldr	r3, [r7, #20]
 8018756:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018758:	2b04      	cmp	r3, #4
 801875a:	d104      	bne.n	8018766 <etharp_input+0x3e>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801875c:	697b      	ldr	r3, [r7, #20]
 801875e:	885b      	ldrh	r3, [r3, #2]
 8018760:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018762:	2b08      	cmp	r3, #8
 8018764:	d00f      	beq.n	8018786 <etharp_input+0x5e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8018766:	4b3d      	ldr	r3, [pc, #244]	; (801885c <etharp_input+0x134>)
 8018768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801876a:	3301      	adds	r3, #1
 801876c:	b29a      	uxth	r2, r3
 801876e:	4b3b      	ldr	r3, [pc, #236]	; (801885c <etharp_input+0x134>)
 8018770:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8018772:	4b3a      	ldr	r3, [pc, #232]	; (801885c <etharp_input+0x134>)
 8018774:	8bdb      	ldrh	r3, [r3, #30]
 8018776:	3301      	adds	r3, #1
 8018778:	b29a      	uxth	r2, r3
 801877a:	4b38      	ldr	r3, [pc, #224]	; (801885c <etharp_input+0x134>)
 801877c:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801877e:	6878      	ldr	r0, [r7, #4]
 8018780:	f7f7 feb8 	bl	80104f4 <pbuf_free>
    return;
 8018784:	e067      	b.n	8018856 <etharp_input+0x12e>
  }
  ETHARP_STATS_INC(etharp.recv);
 8018786:	4b35      	ldr	r3, [pc, #212]	; (801885c <etharp_input+0x134>)
 8018788:	8b5b      	ldrh	r3, [r3, #26]
 801878a:	3301      	adds	r3, #1
 801878c:	b29a      	uxth	r2, r3
 801878e:	4b33      	ldr	r3, [pc, #204]	; (801885c <etharp_input+0x134>)
 8018790:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018792:	697b      	ldr	r3, [r7, #20]
 8018794:	330e      	adds	r3, #14
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801879a:	697b      	ldr	r3, [r7, #20]
 801879c:	3318      	adds	r3, #24
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80187a2:	683b      	ldr	r3, [r7, #0]
 80187a4:	3304      	adds	r3, #4
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d102      	bne.n	80187b2 <etharp_input+0x8a>
    for_us = 0;
 80187ac:	2300      	movs	r3, #0
 80187ae:	74fb      	strb	r3, [r7, #19]
 80187b0:	e009      	b.n	80187c6 <etharp_input+0x9e>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80187b2:	68ba      	ldr	r2, [r7, #8]
 80187b4:	683b      	ldr	r3, [r7, #0]
 80187b6:	3304      	adds	r3, #4
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	429a      	cmp	r2, r3
 80187bc:	bf0c      	ite	eq
 80187be:	2301      	moveq	r3, #1
 80187c0:	2300      	movne	r3, #0
 80187c2:	b2db      	uxtb	r3, r3
 80187c4:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80187c6:	697b      	ldr	r3, [r7, #20]
 80187c8:	f103 0208 	add.w	r2, r3, #8
 80187cc:	7cfb      	ldrb	r3, [r7, #19]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d001      	beq.n	80187d6 <etharp_input+0xae>
 80187d2:	2301      	movs	r3, #1
 80187d4:	e000      	b.n	80187d8 <etharp_input+0xb0>
 80187d6:	2302      	movs	r3, #2
 80187d8:	f107 010c 	add.w	r1, r7, #12
 80187dc:	6838      	ldr	r0, [r7, #0]
 80187de:	f7ff ff07 	bl	80185f0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80187e2:	697b      	ldr	r3, [r7, #20]
 80187e4:	88db      	ldrh	r3, [r3, #6]
 80187e6:	b29b      	uxth	r3, r3
 80187e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80187ec:	d003      	beq.n	80187f6 <etharp_input+0xce>
 80187ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80187f2:	d01e      	beq.n	8018832 <etharp_input+0x10a>
 80187f4:	e024      	b.n	8018840 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 80187f6:	7cfb      	ldrb	r3, [r7, #19]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d028      	beq.n	801884e <etharp_input+0x126>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018802:	697b      	ldr	r3, [r7, #20]
 8018804:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018808:	683b      	ldr	r3, [r7, #0]
 801880a:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801880e:	683b      	ldr	r3, [r7, #0]
 8018810:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018812:	697a      	ldr	r2, [r7, #20]
 8018814:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018816:	2102      	movs	r1, #2
 8018818:	9103      	str	r1, [sp, #12]
 801881a:	f107 010c 	add.w	r1, r7, #12
 801881e:	9102      	str	r1, [sp, #8]
 8018820:	9201      	str	r2, [sp, #4]
 8018822:	9300      	str	r3, [sp, #0]
 8018824:	462b      	mov	r3, r5
 8018826:	4622      	mov	r2, r4
 8018828:	4601      	mov	r1, r0
 801882a:	6838      	ldr	r0, [r7, #0]
 801882c:	f000 faca 	bl	8018dc4 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8018830:	e00d      	b.n	801884e <etharp_input+0x126>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 8018832:	f107 030c 	add.w	r3, r7, #12
 8018836:	4619      	mov	r1, r3
 8018838:	6838      	ldr	r0, [r7, #0]
 801883a:	f7fe fad2 	bl	8016de2 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 801883e:	e007      	b.n	8018850 <etharp_input+0x128>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8018840:	4b06      	ldr	r3, [pc, #24]	; (801885c <etharp_input+0x134>)
 8018842:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8018844:	3301      	adds	r3, #1
 8018846:	b29a      	uxth	r2, r3
 8018848:	4b04      	ldr	r3, [pc, #16]	; (801885c <etharp_input+0x134>)
 801884a:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 801884c:	e000      	b.n	8018850 <etharp_input+0x128>
      break;
 801884e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018850:	6878      	ldr	r0, [r7, #4]
 8018852:	f7f7 fe4f 	bl	80104f4 <pbuf_free>
}
 8018856:	3718      	adds	r7, #24
 8018858:	46bd      	mov	sp, r7
 801885a:	bdb0      	pop	{r4, r5, r7, pc}
 801885c:	20007794 	.word	0x20007794

08018860 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b086      	sub	sp, #24
 8018864:	af02      	add	r7, sp, #8
 8018866:	60f8      	str	r0, [r7, #12]
 8018868:	60b9      	str	r1, [r7, #8]
 801886a:	4613      	mov	r3, r2
 801886c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801886e:	79fa      	ldrb	r2, [r7, #7]
 8018870:	493b      	ldr	r1, [pc, #236]	; (8018960 <etharp_output_to_arp_index+0x100>)
 8018872:	4613      	mov	r3, r2
 8018874:	005b      	lsls	r3, r3, #1
 8018876:	4413      	add	r3, r2
 8018878:	00db      	lsls	r3, r3, #3
 801887a:	440b      	add	r3, r1
 801887c:	3314      	adds	r3, #20
 801887e:	781b      	ldrb	r3, [r3, #0]
 8018880:	2b02      	cmp	r3, #2
 8018882:	d153      	bne.n	801892c <etharp_output_to_arp_index+0xcc>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018884:	79fa      	ldrb	r2, [r7, #7]
 8018886:	4936      	ldr	r1, [pc, #216]	; (8018960 <etharp_output_to_arp_index+0x100>)
 8018888:	4613      	mov	r3, r2
 801888a:	005b      	lsls	r3, r3, #1
 801888c:	4413      	add	r3, r2
 801888e:	00db      	lsls	r3, r3, #3
 8018890:	440b      	add	r3, r1
 8018892:	3312      	adds	r3, #18
 8018894:	881b      	ldrh	r3, [r3, #0]
 8018896:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801889a:	d919      	bls.n	80188d0 <etharp_output_to_arp_index+0x70>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801889c:	79fa      	ldrb	r2, [r7, #7]
 801889e:	4613      	mov	r3, r2
 80188a0:	005b      	lsls	r3, r3, #1
 80188a2:	4413      	add	r3, r2
 80188a4:	00db      	lsls	r3, r3, #3
 80188a6:	4a2e      	ldr	r2, [pc, #184]	; (8018960 <etharp_output_to_arp_index+0x100>)
 80188a8:	4413      	add	r3, r2
 80188aa:	3304      	adds	r3, #4
 80188ac:	4619      	mov	r1, r3
 80188ae:	68f8      	ldr	r0, [r7, #12]
 80188b0:	f000 fb1a 	bl	8018ee8 <etharp_request>
 80188b4:	4603      	mov	r3, r0
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d138      	bne.n	801892c <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80188ba:	79fa      	ldrb	r2, [r7, #7]
 80188bc:	4928      	ldr	r1, [pc, #160]	; (8018960 <etharp_output_to_arp_index+0x100>)
 80188be:	4613      	mov	r3, r2
 80188c0:	005b      	lsls	r3, r3, #1
 80188c2:	4413      	add	r3, r2
 80188c4:	00db      	lsls	r3, r3, #3
 80188c6:	440b      	add	r3, r1
 80188c8:	3314      	adds	r3, #20
 80188ca:	2203      	movs	r2, #3
 80188cc:	701a      	strb	r2, [r3, #0]
 80188ce:	e02d      	b.n	801892c <etharp_output_to_arp_index+0xcc>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80188d0:	79fa      	ldrb	r2, [r7, #7]
 80188d2:	4923      	ldr	r1, [pc, #140]	; (8018960 <etharp_output_to_arp_index+0x100>)
 80188d4:	4613      	mov	r3, r2
 80188d6:	005b      	lsls	r3, r3, #1
 80188d8:	4413      	add	r3, r2
 80188da:	00db      	lsls	r3, r3, #3
 80188dc:	440b      	add	r3, r1
 80188de:	3312      	adds	r3, #18
 80188e0:	881b      	ldrh	r3, [r3, #0]
 80188e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80188e6:	d321      	bcc.n	801892c <etharp_output_to_arp_index+0xcc>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80188e8:	79fa      	ldrb	r2, [r7, #7]
 80188ea:	4613      	mov	r3, r2
 80188ec:	005b      	lsls	r3, r3, #1
 80188ee:	4413      	add	r3, r2
 80188f0:	00db      	lsls	r3, r3, #3
 80188f2:	4a1b      	ldr	r2, [pc, #108]	; (8018960 <etharp_output_to_arp_index+0x100>)
 80188f4:	4413      	add	r3, r2
 80188f6:	1d19      	adds	r1, r3, #4
 80188f8:	79fa      	ldrb	r2, [r7, #7]
 80188fa:	4613      	mov	r3, r2
 80188fc:	005b      	lsls	r3, r3, #1
 80188fe:	4413      	add	r3, r2
 8018900:	00db      	lsls	r3, r3, #3
 8018902:	3308      	adds	r3, #8
 8018904:	4a16      	ldr	r2, [pc, #88]	; (8018960 <etharp_output_to_arp_index+0x100>)
 8018906:	4413      	add	r3, r2
 8018908:	3304      	adds	r3, #4
 801890a:	461a      	mov	r2, r3
 801890c:	68f8      	ldr	r0, [r7, #12]
 801890e:	f000 fac9 	bl	8018ea4 <etharp_request_dst>
 8018912:	4603      	mov	r3, r0
 8018914:	2b00      	cmp	r3, #0
 8018916:	d109      	bne.n	801892c <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018918:	79fa      	ldrb	r2, [r7, #7]
 801891a:	4911      	ldr	r1, [pc, #68]	; (8018960 <etharp_output_to_arp_index+0x100>)
 801891c:	4613      	mov	r3, r2
 801891e:	005b      	lsls	r3, r3, #1
 8018920:	4413      	add	r3, r2
 8018922:	00db      	lsls	r3, r3, #3
 8018924:	440b      	add	r3, r1
 8018926:	3314      	adds	r3, #20
 8018928:	2203      	movs	r2, #3
 801892a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8018932:	79fa      	ldrb	r2, [r7, #7]
 8018934:	4613      	mov	r3, r2
 8018936:	005b      	lsls	r3, r3, #1
 8018938:	4413      	add	r3, r2
 801893a:	00db      	lsls	r3, r3, #3
 801893c:	3308      	adds	r3, #8
 801893e:	4a08      	ldr	r2, [pc, #32]	; (8018960 <etharp_output_to_arp_index+0x100>)
 8018940:	4413      	add	r3, r2
 8018942:	3304      	adds	r3, #4
 8018944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018948:	9200      	str	r2, [sp, #0]
 801894a:	460a      	mov	r2, r1
 801894c:	68b9      	ldr	r1, [r7, #8]
 801894e:	68f8      	ldr	r0, [r7, #12]
 8018950:	f001 feaa 	bl	801a6a8 <ethernet_output>
 8018954:	4603      	mov	r3, r0
}
 8018956:	4618      	mov	r0, r3
 8018958:	3710      	adds	r7, #16
 801895a:	46bd      	mov	sp, r7
 801895c:	bd80      	pop	{r7, pc}
 801895e:	bf00      	nop
 8018960:	200078d4 	.word	0x200078d4

08018964 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b08a      	sub	sp, #40	; 0x28
 8018968:	af02      	add	r7, sp, #8
 801896a:	60f8      	str	r0, [r7, #12]
 801896c:	60b9      	str	r1, [r7, #8]
 801896e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	61bb      	str	r3, [r7, #24]

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	68f9      	ldr	r1, [r7, #12]
 801897a:	4618      	mov	r0, r3
 801897c:	f001 f84a 	bl	8019a14 <ip4_addr_isbroadcast_u32>
 8018980:	4603      	mov	r3, r0
 8018982:	2b00      	cmp	r3, #0
 8018984:	d002      	beq.n	801898c <etharp_output+0x28>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018986:	4b64      	ldr	r3, [pc, #400]	; (8018b18 <etharp_output+0x1b4>)
 8018988:	61fb      	str	r3, [r7, #28]
 801898a:	e0b5      	b.n	8018af8 <etharp_output+0x194>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018994:	2be0      	cmp	r3, #224	; 0xe0
 8018996:	d118      	bne.n	80189ca <etharp_output+0x66>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018998:	2301      	movs	r3, #1
 801899a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801899c:	2300      	movs	r3, #0
 801899e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80189a0:	235e      	movs	r3, #94	; 0x5e
 80189a2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	3301      	adds	r3, #1
 80189a8:	781b      	ldrb	r3, [r3, #0]
 80189aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	3302      	adds	r3, #2
 80189b6:	781b      	ldrb	r3, [r3, #0]
 80189b8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	3303      	adds	r3, #3
 80189be:	781b      	ldrb	r3, [r3, #0]
 80189c0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80189c2:	f107 0310 	add.w	r3, r7, #16
 80189c6:	61fb      	str	r3, [r7, #28]
 80189c8:	e096      	b.n	8018af8 <etharp_output+0x194>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681a      	ldr	r2, [r3, #0]
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	3304      	adds	r3, #4
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	405a      	eors	r2, r3
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	3308      	adds	r3, #8
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	4013      	ands	r3, r2
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d012      	beq.n	8018a08 <etharp_output+0xa4>
        !ip4_addr_islinklocal(ipaddr)) {
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80189e8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80189ec:	4293      	cmp	r3, r2
 80189ee:	d00b      	beq.n	8018a08 <etharp_output+0xa4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	330c      	adds	r3, #12
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d003      	beq.n	8018a02 <etharp_output+0x9e>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	330c      	adds	r3, #12
 80189fe:	61bb      	str	r3, [r7, #24]
 8018a00:	e002      	b.n	8018a08 <etharp_output+0xa4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018a02:	f06f 0303 	mvn.w	r3, #3
 8018a06:	e083      	b.n	8018b10 <etharp_output+0x1ac>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018a08:	4b44      	ldr	r3, [pc, #272]	; (8018b1c <etharp_output+0x1b8>)
 8018a0a:	781b      	ldrb	r3, [r3, #0]
 8018a0c:	4619      	mov	r1, r3
 8018a0e:	4a44      	ldr	r2, [pc, #272]	; (8018b20 <etharp_output+0x1bc>)
 8018a10:	460b      	mov	r3, r1
 8018a12:	005b      	lsls	r3, r3, #1
 8018a14:	440b      	add	r3, r1
 8018a16:	00db      	lsls	r3, r3, #3
 8018a18:	4413      	add	r3, r2
 8018a1a:	3314      	adds	r3, #20
 8018a1c:	781b      	ldrb	r3, [r3, #0]
 8018a1e:	2b01      	cmp	r3, #1
 8018a20:	d92b      	bls.n	8018a7a <etharp_output+0x116>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018a22:	4b3e      	ldr	r3, [pc, #248]	; (8018b1c <etharp_output+0x1b8>)
 8018a24:	781b      	ldrb	r3, [r3, #0]
 8018a26:	4619      	mov	r1, r3
 8018a28:	4a3d      	ldr	r2, [pc, #244]	; (8018b20 <etharp_output+0x1bc>)
 8018a2a:	460b      	mov	r3, r1
 8018a2c:	005b      	lsls	r3, r3, #1
 8018a2e:	440b      	add	r3, r1
 8018a30:	00db      	lsls	r3, r3, #3
 8018a32:	4413      	add	r3, r2
 8018a34:	3308      	adds	r3, #8
 8018a36:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018a38:	68fa      	ldr	r2, [r7, #12]
 8018a3a:	429a      	cmp	r2, r3
 8018a3c:	d11d      	bne.n	8018a7a <etharp_output+0x116>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018a3e:	69bb      	ldr	r3, [r7, #24]
 8018a40:	681a      	ldr	r2, [r3, #0]
 8018a42:	4b36      	ldr	r3, [pc, #216]	; (8018b1c <etharp_output+0x1b8>)
 8018a44:	781b      	ldrb	r3, [r3, #0]
 8018a46:	4618      	mov	r0, r3
 8018a48:	4935      	ldr	r1, [pc, #212]	; (8018b20 <etharp_output+0x1bc>)
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	005b      	lsls	r3, r3, #1
 8018a4e:	4403      	add	r3, r0
 8018a50:	00db      	lsls	r3, r3, #3
 8018a52:	440b      	add	r3, r1
 8018a54:	3304      	adds	r3, #4
 8018a56:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d10e      	bne.n	8018a7a <etharp_output+0x116>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 8018a5c:	4b31      	ldr	r3, [pc, #196]	; (8018b24 <etharp_output+0x1c0>)
 8018a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018a60:	3301      	adds	r3, #1
 8018a62:	b29a      	uxth	r2, r3
 8018a64:	4b2f      	ldr	r3, [pc, #188]	; (8018b24 <etharp_output+0x1c0>)
 8018a66:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018a68:	4b2c      	ldr	r3, [pc, #176]	; (8018b1c <etharp_output+0x1b8>)
 8018a6a:	781b      	ldrb	r3, [r3, #0]
 8018a6c:	461a      	mov	r2, r3
 8018a6e:	68b9      	ldr	r1, [r7, #8]
 8018a70:	68f8      	ldr	r0, [r7, #12]
 8018a72:	f7ff fef5 	bl	8018860 <etharp_output_to_arp_index>
 8018a76:	4603      	mov	r3, r0
 8018a78:	e04a      	b.n	8018b10 <etharp_output+0x1ac>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	75fb      	strb	r3, [r7, #23]
 8018a7e:	e031      	b.n	8018ae4 <etharp_output+0x180>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018a80:	7dfa      	ldrb	r2, [r7, #23]
 8018a82:	4927      	ldr	r1, [pc, #156]	; (8018b20 <etharp_output+0x1bc>)
 8018a84:	4613      	mov	r3, r2
 8018a86:	005b      	lsls	r3, r3, #1
 8018a88:	4413      	add	r3, r2
 8018a8a:	00db      	lsls	r3, r3, #3
 8018a8c:	440b      	add	r3, r1
 8018a8e:	3314      	adds	r3, #20
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	2b01      	cmp	r3, #1
 8018a94:	d923      	bls.n	8018ade <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018a96:	7dfa      	ldrb	r2, [r7, #23]
 8018a98:	4921      	ldr	r1, [pc, #132]	; (8018b20 <etharp_output+0x1bc>)
 8018a9a:	4613      	mov	r3, r2
 8018a9c:	005b      	lsls	r3, r3, #1
 8018a9e:	4413      	add	r3, r2
 8018aa0:	00db      	lsls	r3, r3, #3
 8018aa2:	440b      	add	r3, r1
 8018aa4:	3308      	adds	r3, #8
 8018aa6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018aa8:	68fa      	ldr	r2, [r7, #12]
 8018aaa:	429a      	cmp	r2, r3
 8018aac:	d117      	bne.n	8018ade <etharp_output+0x17a>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018aae:	69bb      	ldr	r3, [r7, #24]
 8018ab0:	6819      	ldr	r1, [r3, #0]
 8018ab2:	7dfa      	ldrb	r2, [r7, #23]
 8018ab4:	481a      	ldr	r0, [pc, #104]	; (8018b20 <etharp_output+0x1bc>)
 8018ab6:	4613      	mov	r3, r2
 8018ab8:	005b      	lsls	r3, r3, #1
 8018aba:	4413      	add	r3, r2
 8018abc:	00db      	lsls	r3, r3, #3
 8018abe:	4403      	add	r3, r0
 8018ac0:	3304      	adds	r3, #4
 8018ac2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018ac4:	4299      	cmp	r1, r3
 8018ac6:	d10a      	bne.n	8018ade <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018ac8:	4a14      	ldr	r2, [pc, #80]	; (8018b1c <etharp_output+0x1b8>)
 8018aca:	7dfb      	ldrb	r3, [r7, #23]
 8018acc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018ace:	7dfb      	ldrb	r3, [r7, #23]
 8018ad0:	461a      	mov	r2, r3
 8018ad2:	68b9      	ldr	r1, [r7, #8]
 8018ad4:	68f8      	ldr	r0, [r7, #12]
 8018ad6:	f7ff fec3 	bl	8018860 <etharp_output_to_arp_index>
 8018ada:	4603      	mov	r3, r0
 8018adc:	e018      	b.n	8018b10 <etharp_output+0x1ac>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018ade:	7dfb      	ldrb	r3, [r7, #23]
 8018ae0:	3301      	adds	r3, #1
 8018ae2:	75fb      	strb	r3, [r7, #23]
 8018ae4:	7dfb      	ldrb	r3, [r7, #23]
 8018ae6:	2b09      	cmp	r3, #9
 8018ae8:	d9ca      	bls.n	8018a80 <etharp_output+0x11c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018aea:	68ba      	ldr	r2, [r7, #8]
 8018aec:	69b9      	ldr	r1, [r7, #24]
 8018aee:	68f8      	ldr	r0, [r7, #12]
 8018af0:	f000 f81a 	bl	8018b28 <etharp_query>
 8018af4:	4603      	mov	r3, r0
 8018af6:	e00b      	b.n	8018b10 <etharp_output+0x1ac>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8018afe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018b02:	9300      	str	r3, [sp, #0]
 8018b04:	69fb      	ldr	r3, [r7, #28]
 8018b06:	68b9      	ldr	r1, [r7, #8]
 8018b08:	68f8      	ldr	r0, [r7, #12]
 8018b0a:	f001 fdcd 	bl	801a6a8 <ethernet_output>
 8018b0e:	4603      	mov	r3, r0
}
 8018b10:	4618      	mov	r0, r3
 8018b12:	3720      	adds	r7, #32
 8018b14:	46bd      	mov	sp, r7
 8018b16:	bd80      	pop	{r7, pc}
 8018b18:	0801d250 	.word	0x0801d250
 8018b1c:	200079c4 	.word	0x200079c4
 8018b20:	200078d4 	.word	0x200078d4
 8018b24:	20007794 	.word	0x20007794

08018b28 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b090      	sub	sp, #64	; 0x40
 8018b2c:	af02      	add	r7, sp, #8
 8018b2e:	60f8      	str	r0, [r7, #12]
 8018b30:	60b9      	str	r1, [r7, #8]
 8018b32:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	332a      	adds	r3, #42	; 0x2a
 8018b38:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 8018b3a:	23ff      	movs	r3, #255	; 0xff
 8018b3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int is_new_entry = 0;
 8018b40:	2300      	movs	r3, #0
 8018b42:	633b      	str	r3, [r7, #48]	; 0x30
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018b44:	68bb      	ldr	r3, [r7, #8]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	68f9      	ldr	r1, [r7, #12]
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f000 ff62 	bl	8019a14 <ip4_addr_isbroadcast_u32>
 8018b50:	4603      	mov	r3, r0
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d10c      	bne.n	8018b70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018b56:	68bb      	ldr	r3, [r7, #8]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018b5e:	2be0      	cmp	r3, #224	; 0xe0
 8018b60:	d006      	beq.n	8018b70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018b62:	68bb      	ldr	r3, [r7, #8]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d003      	beq.n	8018b70 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018b68:	68bb      	ldr	r3, [r7, #8]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d102      	bne.n	8018b76 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018b70:	f06f 030f 	mvn.w	r3, #15
 8018b74:	e11b      	b.n	8018dae <etharp_query+0x286>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018b76:	68fa      	ldr	r2, [r7, #12]
 8018b78:	2101      	movs	r1, #1
 8018b7a:	68b8      	ldr	r0, [r7, #8]
 8018b7c:	f7ff fc14 	bl	80183a8 <etharp_find_entry>
 8018b80:	4603      	mov	r3, r0
 8018b82:	837b      	strh	r3, [r7, #26]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018b84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	da0b      	bge.n	8018ba4 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d005      	beq.n	8018b9e <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 8018b92:	4b89      	ldr	r3, [pc, #548]	; (8018db8 <etharp_query+0x290>)
 8018b94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018b96:	3301      	adds	r3, #1
 8018b98:	b29a      	uxth	r2, r3
 8018b9a:	4b87      	ldr	r3, [pc, #540]	; (8018db8 <etharp_query+0x290>)
 8018b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 8018b9e:	8b7b      	ldrh	r3, [r7, #26]
 8018ba0:	b25b      	sxtb	r3, r3
 8018ba2:	e104      	b.n	8018dae <etharp_query+0x286>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
  i = (netif_addr_idx_t)i_err;
 8018ba4:	8b7b      	ldrh	r3, [r7, #26]
 8018ba6:	767b      	strb	r3, [r7, #25]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018ba8:	7e7a      	ldrb	r2, [r7, #25]
 8018baa:	4984      	ldr	r1, [pc, #528]	; (8018dbc <etharp_query+0x294>)
 8018bac:	4613      	mov	r3, r2
 8018bae:	005b      	lsls	r3, r3, #1
 8018bb0:	4413      	add	r3, r2
 8018bb2:	00db      	lsls	r3, r3, #3
 8018bb4:	440b      	add	r3, r1
 8018bb6:	3314      	adds	r3, #20
 8018bb8:	781b      	ldrb	r3, [r3, #0]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d115      	bne.n	8018bea <etharp_query+0xc2>
    is_new_entry = 1;
 8018bbe:	2301      	movs	r3, #1
 8018bc0:	633b      	str	r3, [r7, #48]	; 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018bc2:	7e7a      	ldrb	r2, [r7, #25]
 8018bc4:	497d      	ldr	r1, [pc, #500]	; (8018dbc <etharp_query+0x294>)
 8018bc6:	4613      	mov	r3, r2
 8018bc8:	005b      	lsls	r3, r3, #1
 8018bca:	4413      	add	r3, r2
 8018bcc:	00db      	lsls	r3, r3, #3
 8018bce:	440b      	add	r3, r1
 8018bd0:	3314      	adds	r3, #20
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018bd6:	7e7a      	ldrb	r2, [r7, #25]
 8018bd8:	4978      	ldr	r1, [pc, #480]	; (8018dbc <etharp_query+0x294>)
 8018bda:	4613      	mov	r3, r2
 8018bdc:	005b      	lsls	r3, r3, #1
 8018bde:	4413      	add	r3, r2
 8018be0:	00db      	lsls	r3, r3, #3
 8018be2:	440b      	add	r3, r1
 8018be4:	3308      	adds	r3, #8
 8018be6:	68fa      	ldr	r2, [r7, #12]
 8018be8:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d102      	bne.n	8018bf6 <etharp_query+0xce>
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d10c      	bne.n	8018c10 <etharp_query+0xe8>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018bf6:	68b9      	ldr	r1, [r7, #8]
 8018bf8:	68f8      	ldr	r0, [r7, #12]
 8018bfa:	f000 f975 	bl	8018ee8 <etharp_request>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d102      	bne.n	8018c10 <etharp_query+0xe8>
      return result;
 8018c0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8018c0e:	e0ce      	b.n	8018dae <etharp_query+0x286>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018c10:	7e7a      	ldrb	r2, [r7, #25]
 8018c12:	496a      	ldr	r1, [pc, #424]	; (8018dbc <etharp_query+0x294>)
 8018c14:	4613      	mov	r3, r2
 8018c16:	005b      	lsls	r3, r3, #1
 8018c18:	4413      	add	r3, r2
 8018c1a:	00db      	lsls	r3, r3, #3
 8018c1c:	440b      	add	r3, r1
 8018c1e:	3314      	adds	r3, #20
 8018c20:	781b      	ldrb	r3, [r3, #0]
 8018c22:	2b01      	cmp	r3, #1
 8018c24:	d917      	bls.n	8018c56 <etharp_query+0x12e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018c26:	4a66      	ldr	r2, [pc, #408]	; (8018dc0 <etharp_query+0x298>)
 8018c28:	7e7b      	ldrb	r3, [r7, #25]
 8018c2a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018c2c:	7e7a      	ldrb	r2, [r7, #25]
 8018c2e:	4613      	mov	r3, r2
 8018c30:	005b      	lsls	r3, r3, #1
 8018c32:	4413      	add	r3, r2
 8018c34:	00db      	lsls	r3, r3, #3
 8018c36:	3308      	adds	r3, #8
 8018c38:	4a60      	ldr	r2, [pc, #384]	; (8018dbc <etharp_query+0x294>)
 8018c3a:	4413      	add	r3, r2
 8018c3c:	3304      	adds	r3, #4
 8018c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018c42:	9200      	str	r2, [sp, #0]
 8018c44:	69fa      	ldr	r2, [r7, #28]
 8018c46:	6879      	ldr	r1, [r7, #4]
 8018c48:	68f8      	ldr	r0, [r7, #12]
 8018c4a:	f001 fd2d 	bl	801a6a8 <ethernet_output>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8018c54:	e0a9      	b.n	8018daa <etharp_query+0x282>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018c56:	7e7a      	ldrb	r2, [r7, #25]
 8018c58:	4958      	ldr	r1, [pc, #352]	; (8018dbc <etharp_query+0x294>)
 8018c5a:	4613      	mov	r3, r2
 8018c5c:	005b      	lsls	r3, r3, #1
 8018c5e:	4413      	add	r3, r2
 8018c60:	00db      	lsls	r3, r3, #3
 8018c62:	440b      	add	r3, r1
 8018c64:	3314      	adds	r3, #20
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	2b01      	cmp	r3, #1
 8018c6a:	f040 809e 	bne.w	8018daa <etharp_query+0x282>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018c6e:	2300      	movs	r3, #0
 8018c70:	62bb      	str	r3, [r7, #40]	; 0x28
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 8018c76:	e00b      	b.n	8018c90 <etharp_query+0x168>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if (PBUF_NEEDS_COPY(p)) {
 8018c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c7a:	7b1b      	ldrb	r3, [r3, #12]
 8018c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d002      	beq.n	8018c8a <etharp_query+0x162>
        copy_needed = 1;
 8018c84:	2301      	movs	r3, #1
 8018c86:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 8018c88:	e005      	b.n	8018c96 <etharp_query+0x16e>
      }
      p = p->next;
 8018c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 8018c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d1f0      	bne.n	8018c78 <etharp_query+0x150>
    }
    if (copy_needed) {
 8018c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d007      	beq.n	8018cac <etharp_query+0x184>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018c9c:	687a      	ldr	r2, [r7, #4]
 8018c9e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018ca2:	2010      	movs	r0, #16
 8018ca4:	f7f7 fdc8 	bl	8010838 <pbuf_clone>
 8018ca8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8018caa:	e004      	b.n	8018cb6 <etharp_query+0x18e>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pbuf_ref(p);
 8018cb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018cb2:	f7f7 fc89 	bl	80105c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d06d      	beq.n	8018d98 <etharp_query+0x270>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 8018cbc:	2006      	movs	r0, #6
 8018cbe:	f7f6 ff01 	bl	800fac4 <memp_malloc>
 8018cc2:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 8018cc4:	697b      	ldr	r3, [r7, #20]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d05f      	beq.n	8018d8a <etharp_query+0x262>
        unsigned int qlen = 0;
 8018cca:	2300      	movs	r3, #0
 8018ccc:	627b      	str	r3, [r7, #36]	; 0x24
        new_entry->next = 0;
 8018cce:	697b      	ldr	r3, [r7, #20]
 8018cd0:	2200      	movs	r2, #0
 8018cd2:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 8018cd4:	697b      	ldr	r3, [r7, #20]
 8018cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018cd8:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 8018cda:	7e7a      	ldrb	r2, [r7, #25]
 8018cdc:	4937      	ldr	r1, [pc, #220]	; (8018dbc <etharp_query+0x294>)
 8018cde:	4613      	mov	r3, r2
 8018ce0:	005b      	lsls	r3, r3, #1
 8018ce2:	4413      	add	r3, r2
 8018ce4:	00db      	lsls	r3, r3, #3
 8018ce6:	440b      	add	r3, r1
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d01a      	beq.n	8018d24 <etharp_query+0x1fc>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 8018cee:	7e7a      	ldrb	r2, [r7, #25]
 8018cf0:	4932      	ldr	r1, [pc, #200]	; (8018dbc <etharp_query+0x294>)
 8018cf2:	4613      	mov	r3, r2
 8018cf4:	005b      	lsls	r3, r3, #1
 8018cf6:	4413      	add	r3, r2
 8018cf8:	00db      	lsls	r3, r3, #3
 8018cfa:	440b      	add	r3, r1
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	623b      	str	r3, [r7, #32]
          qlen++;
 8018d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d02:	3301      	adds	r3, #1
 8018d04:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 8018d06:	e005      	b.n	8018d14 <etharp_query+0x1ec>
            r = r->next;
 8018d08:	6a3b      	ldr	r3, [r7, #32]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	623b      	str	r3, [r7, #32]
            qlen++;
 8018d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d10:	3301      	adds	r3, #1
 8018d12:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 8018d14:	6a3b      	ldr	r3, [r7, #32]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d1f5      	bne.n	8018d08 <etharp_query+0x1e0>
          }
          r->next = new_entry;
 8018d1c:	6a3b      	ldr	r3, [r7, #32]
 8018d1e:	697a      	ldr	r2, [r7, #20]
 8018d20:	601a      	str	r2, [r3, #0]
 8018d22:	e008      	b.n	8018d36 <etharp_query+0x20e>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 8018d24:	7e7a      	ldrb	r2, [r7, #25]
 8018d26:	4925      	ldr	r1, [pc, #148]	; (8018dbc <etharp_query+0x294>)
 8018d28:	4613      	mov	r3, r2
 8018d2a:	005b      	lsls	r3, r3, #1
 8018d2c:	4413      	add	r3, r2
 8018d2e:	00db      	lsls	r3, r3, #3
 8018d30:	440b      	add	r3, r1
 8018d32:	697a      	ldr	r2, [r7, #20]
 8018d34:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 8018d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d38:	2b02      	cmp	r3, #2
 8018d3a:	d922      	bls.n	8018d82 <etharp_query+0x25a>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 8018d3c:	7e7a      	ldrb	r2, [r7, #25]
 8018d3e:	491f      	ldr	r1, [pc, #124]	; (8018dbc <etharp_query+0x294>)
 8018d40:	4613      	mov	r3, r2
 8018d42:	005b      	lsls	r3, r3, #1
 8018d44:	4413      	add	r3, r2
 8018d46:	00db      	lsls	r3, r3, #3
 8018d48:	440b      	add	r3, r1
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 8018d4e:	7e7a      	ldrb	r2, [r7, #25]
 8018d50:	491a      	ldr	r1, [pc, #104]	; (8018dbc <etharp_query+0x294>)
 8018d52:	4613      	mov	r3, r2
 8018d54:	005b      	lsls	r3, r3, #1
 8018d56:	4413      	add	r3, r2
 8018d58:	00db      	lsls	r3, r3, #3
 8018d5a:	440b      	add	r3, r1
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	7e7a      	ldrb	r2, [r7, #25]
 8018d60:	6819      	ldr	r1, [r3, #0]
 8018d62:	4816      	ldr	r0, [pc, #88]	; (8018dbc <etharp_query+0x294>)
 8018d64:	4613      	mov	r3, r2
 8018d66:	005b      	lsls	r3, r3, #1
 8018d68:	4413      	add	r3, r2
 8018d6a:	00db      	lsls	r3, r3, #3
 8018d6c:	4403      	add	r3, r0
 8018d6e:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 8018d70:	693b      	ldr	r3, [r7, #16]
 8018d72:	685b      	ldr	r3, [r3, #4]
 8018d74:	4618      	mov	r0, r3
 8018d76:	f7f7 fbbd 	bl	80104f4 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8018d7a:	6939      	ldr	r1, [r7, #16]
 8018d7c:	2006      	movs	r0, #6
 8018d7e:	f7f6 fedd 	bl	800fb3c <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, i));
        result = ERR_OK;
 8018d82:	2300      	movs	r3, #0
 8018d84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8018d88:	e00f      	b.n	8018daa <etharp_query+0x282>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 8018d8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018d8c:	f7f7 fbb2 	bl	80104f4 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 8018d90:	23ff      	movs	r3, #255	; 0xff
 8018d92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8018d96:	e008      	b.n	8018daa <etharp_query+0x282>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 8018d98:	4b07      	ldr	r3, [pc, #28]	; (8018db8 <etharp_query+0x290>)
 8018d9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018d9c:	3301      	adds	r3, #1
 8018d9e:	b29a      	uxth	r2, r3
 8018da0:	4b05      	ldr	r3, [pc, #20]	; (8018db8 <etharp_query+0x290>)
 8018da2:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018da4:	23ff      	movs	r3, #255	; 0xff
 8018da6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
  }
  return result;
 8018daa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	3738      	adds	r7, #56	; 0x38
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
 8018db6:	bf00      	nop
 8018db8:	20007794 	.word	0x20007794
 8018dbc:	200078d4 	.word	0x200078d4
 8018dc0:	200079c4 	.word	0x200079c4

08018dc4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b08a      	sub	sp, #40	; 0x28
 8018dc8:	af02      	add	r7, sp, #8
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	60b9      	str	r1, [r7, #8]
 8018dce:	607a      	str	r2, [r7, #4]
 8018dd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018dd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018dda:	211c      	movs	r1, #28
 8018ddc:	2010      	movs	r0, #16
 8018dde:	f7f7 f947 	bl	8010070 <pbuf_alloc>
 8018de2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018de4:	69bb      	ldr	r3, [r7, #24]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d108      	bne.n	8018dfc <etharp_raw+0x38>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 8018dea:	4b2d      	ldr	r3, [pc, #180]	; (8018ea0 <etharp_raw+0xdc>)
 8018dec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018dee:	3301      	adds	r3, #1
 8018df0:	b29a      	uxth	r2, r3
 8018df2:	4b2b      	ldr	r3, [pc, #172]	; (8018ea0 <etharp_raw+0xdc>)
 8018df4:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 8018df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018dfa:	e04c      	b.n	8018e96 <etharp_raw+0xd2>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018dfc:	69bb      	ldr	r3, [r7, #24]
 8018dfe:	685b      	ldr	r3, [r3, #4]
 8018e00:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018e02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7f6 fb7d 	bl	800f504 <lwip_htons>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	461a      	mov	r2, r3
 8018e0e:	697b      	ldr	r3, [r7, #20]
 8018e10:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018e12:	697b      	ldr	r3, [r7, #20]
 8018e14:	3308      	adds	r3, #8
 8018e16:	2206      	movs	r2, #6
 8018e18:	6839      	ldr	r1, [r7, #0]
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	f001 ffbb 	bl	801ad96 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018e20:	697b      	ldr	r3, [r7, #20]
 8018e22:	3312      	adds	r3, #18
 8018e24:	2206      	movs	r2, #6
 8018e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f001 ffb4 	bl	801ad96 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018e2e:	697b      	ldr	r3, [r7, #20]
 8018e30:	330e      	adds	r3, #14
 8018e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e34:	6812      	ldr	r2, [r2, #0]
 8018e36:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018e38:	697b      	ldr	r3, [r7, #20]
 8018e3a:	3318      	adds	r3, #24
 8018e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e3e:	6812      	ldr	r2, [r2, #0]
 8018e40:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018e42:	697b      	ldr	r3, [r7, #20]
 8018e44:	2200      	movs	r2, #0
 8018e46:	701a      	strb	r2, [r3, #0]
 8018e48:	2200      	movs	r2, #0
 8018e4a:	f042 0201 	orr.w	r2, r2, #1
 8018e4e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018e50:	697b      	ldr	r3, [r7, #20]
 8018e52:	2200      	movs	r2, #0
 8018e54:	f042 0208 	orr.w	r2, r2, #8
 8018e58:	709a      	strb	r2, [r3, #2]
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018e5e:	697b      	ldr	r3, [r7, #20]
 8018e60:	2206      	movs	r2, #6
 8018e62:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018e64:	697b      	ldr	r3, [r7, #20]
 8018e66:	2204      	movs	r2, #4
 8018e68:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018e6a:	f640 0306 	movw	r3, #2054	; 0x806
 8018e6e:	9300      	str	r3, [sp, #0]
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	68ba      	ldr	r2, [r7, #8]
 8018e74:	69b9      	ldr	r1, [r7, #24]
 8018e76:	68f8      	ldr	r0, [r7, #12]
 8018e78:	f001 fc16 	bl	801a6a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 8018e7c:	4b08      	ldr	r3, [pc, #32]	; (8018ea0 <etharp_raw+0xdc>)
 8018e7e:	8b1b      	ldrh	r3, [r3, #24]
 8018e80:	3301      	adds	r3, #1
 8018e82:	b29a      	uxth	r2, r3
 8018e84:	4b06      	ldr	r3, [pc, #24]	; (8018ea0 <etharp_raw+0xdc>)
 8018e86:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 8018e88:	69b8      	ldr	r0, [r7, #24]
 8018e8a:	f7f7 fb33 	bl	80104f4 <pbuf_free>
  p = NULL;
 8018e8e:	2300      	movs	r3, #0
 8018e90:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018e92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018e96:	4618      	mov	r0, r3
 8018e98:	3720      	adds	r7, #32
 8018e9a:	46bd      	mov	sp, r7
 8018e9c:	bd80      	pop	{r7, pc}
 8018e9e:	bf00      	nop
 8018ea0:	20007794 	.word	0x20007794

08018ea4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b088      	sub	sp, #32
 8018ea8:	af04      	add	r7, sp, #16
 8018eaa:	60f8      	str	r0, [r7, #12]
 8018eac:	60b9      	str	r1, [r7, #8]
 8018eae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018ec0:	2201      	movs	r2, #1
 8018ec2:	9203      	str	r2, [sp, #12]
 8018ec4:	68ba      	ldr	r2, [r7, #8]
 8018ec6:	9202      	str	r2, [sp, #8]
 8018ec8:	4a06      	ldr	r2, [pc, #24]	; (8018ee4 <etharp_request_dst+0x40>)
 8018eca:	9201      	str	r2, [sp, #4]
 8018ecc:	9300      	str	r3, [sp, #0]
 8018ece:	4603      	mov	r3, r0
 8018ed0:	687a      	ldr	r2, [r7, #4]
 8018ed2:	68f8      	ldr	r0, [r7, #12]
 8018ed4:	f7ff ff76 	bl	8018dc4 <etharp_raw>
 8018ed8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018eda:	4618      	mov	r0, r3
 8018edc:	3710      	adds	r7, #16
 8018ede:	46bd      	mov	sp, r7
 8018ee0:	bd80      	pop	{r7, pc}
 8018ee2:	bf00      	nop
 8018ee4:	0801d258 	.word	0x0801d258

08018ee8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b082      	sub	sp, #8
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
 8018ef0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018ef2:	4a05      	ldr	r2, [pc, #20]	; (8018f08 <etharp_request+0x20>)
 8018ef4:	6839      	ldr	r1, [r7, #0]
 8018ef6:	6878      	ldr	r0, [r7, #4]
 8018ef8:	f7ff ffd4 	bl	8018ea4 <etharp_request_dst>
 8018efc:	4603      	mov	r3, r0
}
 8018efe:	4618      	mov	r0, r3
 8018f00:	3708      	adds	r7, #8
 8018f02:	46bd      	mov	sp, r7
 8018f04:	bd80      	pop	{r7, pc}
 8018f06:	bf00      	nop
 8018f08:	0801d250 	.word	0x0801d250

08018f0c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	b08e      	sub	sp, #56	; 0x38
 8018f10:	af04      	add	r7, sp, #16
 8018f12:	6078      	str	r0, [r7, #4]
 8018f14:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 8018f16:	4ba5      	ldr	r3, [pc, #660]	; (80191ac <icmp_input+0x2a0>)
 8018f18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8018f1c:	3301      	adds	r3, #1
 8018f1e:	b29a      	uxth	r2, r3
 8018f20:	4ba2      	ldr	r3, [pc, #648]	; (80191ac <icmp_input+0x2a0>)
 8018f22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018f26:	4ba2      	ldr	r3, [pc, #648]	; (80191b0 <icmp_input+0x2a4>)
 8018f28:	689b      	ldr	r3, [r3, #8]
 8018f2a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f2e:	781b      	ldrb	r3, [r3, #0]
 8018f30:	f003 030f 	and.w	r3, r3, #15
 8018f34:	b2db      	uxtb	r3, r3
 8018f36:	009b      	lsls	r3, r3, #2
 8018f38:	b2db      	uxtb	r3, r3
 8018f3a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018f3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f3e:	2b13      	cmp	r3, #19
 8018f40:	f240 810b 	bls.w	801915a <icmp_input+0x24e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	895b      	ldrh	r3, [r3, #10]
 8018f48:	2b03      	cmp	r3, #3
 8018f4a:	f240 8108 	bls.w	801915e <icmp_input+0x252>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	685b      	ldr	r3, [r3, #4]
 8018f52:	781b      	ldrb	r3, [r3, #0]
 8018f54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	685b      	ldr	r3, [r3, #4]
 8018f5c:	785b      	ldrb	r3, [r3, #1]
 8018f5e:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018f62:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	f000 80f0 	beq.w	801914c <icmp_input+0x240>
 8018f6c:	2b08      	cmp	r3, #8
 8018f6e:	f040 80dc 	bne.w	801912a <icmp_input+0x21e>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018f72:	4b90      	ldr	r3, [pc, #576]	; (80191b4 <icmp_input+0x2a8>)
 8018f74:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018f76:	4b8e      	ldr	r3, [pc, #568]	; (80191b0 <icmp_input+0x2a4>)
 8018f78:	695b      	ldr	r3, [r3, #20]
 8018f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018f7e:	2be0      	cmp	r3, #224	; 0xe0
 8018f80:	f000 80fc 	beq.w	801917c <icmp_input+0x270>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018f84:	4b8a      	ldr	r3, [pc, #552]	; (80191b0 <icmp_input+0x2a4>)
 8018f86:	695b      	ldr	r3, [r3, #20]
 8018f88:	4a89      	ldr	r2, [pc, #548]	; (80191b0 <icmp_input+0x2a4>)
 8018f8a:	6812      	ldr	r2, [r2, #0]
 8018f8c:	4611      	mov	r1, r2
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f000 fd40 	bl	8019a14 <ip4_addr_isbroadcast_u32>
 8018f94:	4603      	mov	r3, r0
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	f040 80f2 	bne.w	8019180 <icmp_input+0x274>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	891b      	ldrh	r3, [r3, #8]
 8018fa0:	2b07      	cmp	r3, #7
 8018fa2:	f240 80de 	bls.w	8019162 <icmp_input+0x256>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8018fa6:	6878      	ldr	r0, [r7, #4]
 8018fa8:	f7f6 fcb0 	bl	800f90c <inet_chksum_pbuf>
 8018fac:	4603      	mov	r3, r0
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d00b      	beq.n	8018fca <icmp_input+0xbe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8018fb2:	6878      	ldr	r0, [r7, #4]
 8018fb4:	f7f7 fa9e 	bl	80104f4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 8018fb8:	4b7c      	ldr	r3, [pc, #496]	; (80191ac <icmp_input+0x2a0>)
 8018fba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	b29a      	uxth	r2, r3
 8018fc2:	4b7a      	ldr	r3, [pc, #488]	; (80191ac <icmp_input+0x2a0>)
 8018fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018fc8:	e0ed      	b.n	80191a6 <icmp_input+0x29a>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018fca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018fcc:	3310      	adds	r3, #16
 8018fce:	4619      	mov	r1, r3
 8018fd0:	6878      	ldr	r0, [r7, #4]
 8018fd2:	f7f7 fa13 	bl	80103fc <pbuf_add_header>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d045      	beq.n	8019068 <icmp_input+0x15c>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	891a      	ldrh	r2, [r3, #8]
 8018fe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018fe2:	4413      	add	r3, r2
 8018fe4:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	891b      	ldrh	r3, [r3, #8]
 8018fea:	8b7a      	ldrh	r2, [r7, #26]
 8018fec:	429a      	cmp	r2, r3
 8018fee:	f0c0 80c9 	bcc.w	8019184 <icmp_input+0x278>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018ff2:	8b7b      	ldrh	r3, [r7, #26]
 8018ff4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018ff8:	4619      	mov	r1, r3
 8018ffa:	2010      	movs	r0, #16
 8018ffc:	f7f7 f838 	bl	8010070 <pbuf_alloc>
 8019000:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019002:	697b      	ldr	r3, [r7, #20]
 8019004:	2b00      	cmp	r3, #0
 8019006:	f000 80bf 	beq.w	8019188 <icmp_input+0x27c>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801900a:	697b      	ldr	r3, [r7, #20]
 801900c:	895b      	ldrh	r3, [r3, #10]
 801900e:	461a      	mov	r2, r3
 8019010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019012:	3308      	adds	r3, #8
 8019014:	429a      	cmp	r2, r3
 8019016:	d203      	bcs.n	8019020 <icmp_input+0x114>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019018:	6978      	ldr	r0, [r7, #20]
 801901a:	f7f7 fa6b 	bl	80104f4 <pbuf_free>
          goto icmperr;
 801901e:	e0b6      	b.n	801918e <icmp_input+0x282>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019020:	697b      	ldr	r3, [r7, #20]
 8019022:	685b      	ldr	r3, [r3, #4]
 8019024:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019026:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019028:	4618      	mov	r0, r3
 801902a:	f001 feb4 	bl	801ad96 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801902e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019030:	4619      	mov	r1, r3
 8019032:	6978      	ldr	r0, [r7, #20]
 8019034:	f7f7 f9f1 	bl	801041a <pbuf_remove_header>
 8019038:	4603      	mov	r3, r0
 801903a:	2b00      	cmp	r3, #0
 801903c:	d003      	beq.n	8019046 <icmp_input+0x13a>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
          pbuf_free(r);
 801903e:	6978      	ldr	r0, [r7, #20]
 8019040:	f7f7 fa58 	bl	80104f4 <pbuf_free>
          goto icmperr;
 8019044:	e0a3      	b.n	801918e <icmp_input+0x282>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019046:	6879      	ldr	r1, [r7, #4]
 8019048:	6978      	ldr	r0, [r7, #20]
 801904a:	f7f7 fb0d 	bl	8010668 <pbuf_copy>
 801904e:	4603      	mov	r3, r0
 8019050:	2b00      	cmp	r3, #0
 8019052:	d003      	beq.n	801905c <icmp_input+0x150>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019054:	6978      	ldr	r0, [r7, #20]
 8019056:	f7f7 fa4d 	bl	80104f4 <pbuf_free>
          goto icmperr;
 801905a:	e098      	b.n	801918e <icmp_input+0x282>
        }
        /* free the original p */
        pbuf_free(p);
 801905c:	6878      	ldr	r0, [r7, #4]
 801905e:	f7f7 fa49 	bl	80104f4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019062:	697b      	ldr	r3, [r7, #20]
 8019064:	607b      	str	r3, [r7, #4]
 8019066:	e009      	b.n	801907c <icmp_input+0x170>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801906a:	3310      	adds	r3, #16
 801906c:	4619      	mov	r1, r3
 801906e:	6878      	ldr	r0, [r7, #4]
 8019070:	f7f7 f9d3 	bl	801041a <pbuf_remove_header>
 8019074:	4603      	mov	r3, r0
 8019076:	2b00      	cmp	r3, #0
 8019078:	f040 8088 	bne.w	801918c <icmp_input+0x280>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	685b      	ldr	r3, [r3, #4]
 8019080:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019082:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019084:	4619      	mov	r1, r3
 8019086:	6878      	ldr	r0, [r7, #4]
 8019088:	f7f7 f9b8 	bl	80103fc <pbuf_add_header>
 801908c:	4603      	mov	r3, r0
 801908e:	2b00      	cmp	r3, #0
 8019090:	d15e      	bne.n	8019150 <icmp_input+0x244>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	685b      	ldr	r3, [r3, #4]
 8019096:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019098:	69fb      	ldr	r3, [r7, #28]
 801909a:	681a      	ldr	r2, [r3, #0]
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80190a0:	4b43      	ldr	r3, [pc, #268]	; (80191b0 <icmp_input+0x2a4>)
 80190a2:	691a      	ldr	r2, [r3, #16]
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80190a8:	693b      	ldr	r3, [r7, #16]
 80190aa:	2200      	movs	r2, #0
 80190ac:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80190ae:	693b      	ldr	r3, [r7, #16]
 80190b0:	885b      	ldrh	r3, [r3, #2]
 80190b2:	b29b      	uxth	r3, r3
 80190b4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80190b8:	4293      	cmp	r3, r2
 80190ba:	d907      	bls.n	80190cc <icmp_input+0x1c0>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80190bc:	693b      	ldr	r3, [r7, #16]
 80190be:	885b      	ldrh	r3, [r3, #2]
 80190c0:	b29b      	uxth	r3, r3
 80190c2:	3309      	adds	r3, #9
 80190c4:	b29a      	uxth	r2, r3
 80190c6:	693b      	ldr	r3, [r7, #16]
 80190c8:	805a      	strh	r2, [r3, #2]
 80190ca:	e006      	b.n	80190da <icmp_input+0x1ce>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80190cc:	693b      	ldr	r3, [r7, #16]
 80190ce:	885b      	ldrh	r3, [r3, #2]
 80190d0:	b29b      	uxth	r3, r3
 80190d2:	3308      	adds	r3, #8
 80190d4:	b29a      	uxth	r2, r3
 80190d6:	693b      	ldr	r3, [r7, #16]
 80190d8:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	22ff      	movs	r2, #255	; 0xff
 80190de:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	2200      	movs	r2, #0
 80190e4:	729a      	strb	r2, [r3, #10]
 80190e6:	2200      	movs	r2, #0
 80190e8:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 80190ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190ec:	4619      	mov	r1, r3
 80190ee:	68f8      	ldr	r0, [r7, #12]
 80190f0:	f7f6 fbfa 	bl	800f8e8 <inet_chksum>
 80190f4:	4603      	mov	r3, r0
 80190f6:	461a      	mov	r2, r3
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 80190fc:	4b2b      	ldr	r3, [pc, #172]	; (80191ac <icmp_input+0x2a0>)
 80190fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019102:	3301      	adds	r3, #1
 8019104:	b29a      	uxth	r2, r3
 8019106:	4b29      	ldr	r3, [pc, #164]	; (80191ac <icmp_input+0x2a0>)
 8019108:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801910c:	683b      	ldr	r3, [r7, #0]
 801910e:	9302      	str	r3, [sp, #8]
 8019110:	2301      	movs	r3, #1
 8019112:	9301      	str	r3, [sp, #4]
 8019114:	2300      	movs	r3, #0
 8019116:	9300      	str	r3, [sp, #0]
 8019118:	23ff      	movs	r3, #255	; 0xff
 801911a:	2200      	movs	r2, #0
 801911c:	69f9      	ldr	r1, [r7, #28]
 801911e:	6878      	ldr	r0, [r7, #4]
 8019120:	f000 fb3e 	bl	80197a0 <ip4_output_if>
 8019124:	4603      	mov	r3, r0
 8019126:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019128:	e012      	b.n	8019150 <icmp_input+0x244>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 801912a:	4b20      	ldr	r3, [pc, #128]	; (80191ac <icmp_input+0x2a0>)
 801912c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8019130:	3301      	adds	r3, #1
 8019132:	b29a      	uxth	r2, r3
 8019134:	4b1d      	ldr	r3, [pc, #116]	; (80191ac <icmp_input+0x2a0>)
 8019136:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 801913a:	4b1c      	ldr	r3, [pc, #112]	; (80191ac <icmp_input+0x2a0>)
 801913c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019140:	3301      	adds	r3, #1
 8019142:	b29a      	uxth	r2, r3
 8019144:	4b19      	ldr	r3, [pc, #100]	; (80191ac <icmp_input+0x2a0>)
 8019146:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 801914a:	e002      	b.n	8019152 <icmp_input+0x246>
      break;
 801914c:	bf00      	nop
 801914e:	e000      	b.n	8019152 <icmp_input+0x246>
      break;
 8019150:	bf00      	nop
  }
  pbuf_free(p);
 8019152:	6878      	ldr	r0, [r7, #4]
 8019154:	f7f7 f9ce 	bl	80104f4 <pbuf_free>
  return;
 8019158:	e025      	b.n	80191a6 <icmp_input+0x29a>
    goto lenerr;
 801915a:	bf00      	nop
 801915c:	e002      	b.n	8019164 <icmp_input+0x258>
    goto lenerr;
 801915e:	bf00      	nop
 8019160:	e000      	b.n	8019164 <icmp_input+0x258>
        goto lenerr;
 8019162:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019164:	6878      	ldr	r0, [r7, #4]
 8019166:	f7f7 f9c5 	bl	80104f4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801916a:	4b10      	ldr	r3, [pc, #64]	; (80191ac <icmp_input+0x2a0>)
 801916c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8019170:	3301      	adds	r3, #1
 8019172:	b29a      	uxth	r2, r3
 8019174:	4b0d      	ldr	r3, [pc, #52]	; (80191ac <icmp_input+0x2a0>)
 8019176:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801917a:	e014      	b.n	80191a6 <icmp_input+0x29a>
        goto icmperr;
 801917c:	bf00      	nop
 801917e:	e006      	b.n	801918e <icmp_input+0x282>
        goto icmperr;
 8019180:	bf00      	nop
 8019182:	e004      	b.n	801918e <icmp_input+0x282>
          goto icmperr;
 8019184:	bf00      	nop
 8019186:	e002      	b.n	801918e <icmp_input+0x282>
          goto icmperr;
 8019188:	bf00      	nop
 801918a:	e000      	b.n	801918e <icmp_input+0x282>
          goto icmperr;
 801918c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801918e:	6878      	ldr	r0, [r7, #4]
 8019190:	f7f7 f9b0 	bl	80104f4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8019194:	4b05      	ldr	r3, [pc, #20]	; (80191ac <icmp_input+0x2a0>)
 8019196:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 801919a:	3301      	adds	r3, #1
 801919c:	b29a      	uxth	r2, r3
 801919e:	4b03      	ldr	r3, [pc, #12]	; (80191ac <icmp_input+0x2a0>)
 80191a0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80191a4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80191a6:	3728      	adds	r7, #40	; 0x28
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}
 80191ac:	20007794 	.word	0x20007794
 80191b0:	20007770 	.word	0x20007770
 80191b4:	20007784 	.word	0x20007784

080191b8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b082      	sub	sp, #8
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	460b      	mov	r3, r1
 80191c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80191c4:	78fb      	ldrb	r3, [r7, #3]
 80191c6:	461a      	mov	r2, r3
 80191c8:	2103      	movs	r1, #3
 80191ca:	6878      	ldr	r0, [r7, #4]
 80191cc:	f000 f814 	bl	80191f8 <icmp_send_response>
}
 80191d0:	bf00      	nop
 80191d2:	3708      	adds	r7, #8
 80191d4:	46bd      	mov	sp, r7
 80191d6:	bd80      	pop	{r7, pc}

080191d8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b082      	sub	sp, #8
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
 80191e0:	460b      	mov	r3, r1
 80191e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80191e4:	78fb      	ldrb	r3, [r7, #3]
 80191e6:	461a      	mov	r2, r3
 80191e8:	210b      	movs	r1, #11
 80191ea:	6878      	ldr	r0, [r7, #4]
 80191ec:	f000 f804 	bl	80191f8 <icmp_send_response>
}
 80191f0:	bf00      	nop
 80191f2:	3708      	adds	r7, #8
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bd80      	pop	{r7, pc}

080191f8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b08c      	sub	sp, #48	; 0x30
 80191fc:	af04      	add	r7, sp, #16
 80191fe:	6078      	str	r0, [r7, #4]
 8019200:	460b      	mov	r3, r1
 8019202:	70fb      	strb	r3, [r7, #3]
 8019204:	4613      	mov	r3, r2
 8019206:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019208:	f44f 7220 	mov.w	r2, #640	; 0x280
 801920c:	2124      	movs	r1, #36	; 0x24
 801920e:	2024      	movs	r0, #36	; 0x24
 8019210:	f7f6 ff2e 	bl	8010070 <pbuf_alloc>
 8019214:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 8019216:	69bb      	ldr	r3, [r7, #24]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d053      	beq.n	80192c4 <icmp_send_response+0xcc>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	685b      	ldr	r3, [r3, #4]
 8019220:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019222:	69bb      	ldr	r3, [r7, #24]
 8019224:	685b      	ldr	r3, [r3, #4]
 8019226:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8019228:	693b      	ldr	r3, [r7, #16]
 801922a:	78fa      	ldrb	r2, [r7, #3]
 801922c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801922e:	693b      	ldr	r3, [r7, #16]
 8019230:	78ba      	ldrb	r2, [r7, #2]
 8019232:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019234:	693b      	ldr	r3, [r7, #16]
 8019236:	2200      	movs	r2, #0
 8019238:	711a      	strb	r2, [r3, #4]
 801923a:	2200      	movs	r2, #0
 801923c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801923e:	693b      	ldr	r3, [r7, #16]
 8019240:	2200      	movs	r2, #0
 8019242:	719a      	strb	r2, [r3, #6]
 8019244:	2200      	movs	r2, #0
 8019246:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019248:	69bb      	ldr	r3, [r7, #24]
 801924a:	685b      	ldr	r3, [r3, #4]
 801924c:	f103 0008 	add.w	r0, r3, #8
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	685b      	ldr	r3, [r3, #4]
 8019254:	221c      	movs	r2, #28
 8019256:	4619      	mov	r1, r3
 8019258:	f001 fd9d 	bl	801ad96 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801925c:	697b      	ldr	r3, [r7, #20]
 801925e:	68db      	ldr	r3, [r3, #12]
 8019260:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019262:	f107 030c 	add.w	r3, r7, #12
 8019266:	4618      	mov	r0, r3
 8019268:	f000 f832 	bl	80192d0 <ip4_route>
 801926c:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 801926e:	69fb      	ldr	r3, [r7, #28]
 8019270:	2b00      	cmp	r3, #0
 8019272:	d023      	beq.n	80192bc <icmp_send_response+0xc4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019274:	693b      	ldr	r3, [r7, #16]
 8019276:	2200      	movs	r2, #0
 8019278:	709a      	strb	r2, [r3, #2]
 801927a:	2200      	movs	r2, #0
 801927c:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801927e:	69bb      	ldr	r3, [r7, #24]
 8019280:	895b      	ldrh	r3, [r3, #10]
 8019282:	4619      	mov	r1, r3
 8019284:	6938      	ldr	r0, [r7, #16]
 8019286:	f7f6 fb2f 	bl	800f8e8 <inet_chksum>
 801928a:	4603      	mov	r3, r0
 801928c:	461a      	mov	r2, r3
 801928e:	693b      	ldr	r3, [r7, #16]
 8019290:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8019292:	4b0e      	ldr	r3, [pc, #56]	; (80192cc <icmp_send_response+0xd4>)
 8019294:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019298:	3301      	adds	r3, #1
 801929a:	b29a      	uxth	r2, r3
 801929c:	4b0b      	ldr	r3, [pc, #44]	; (80192cc <icmp_send_response+0xd4>)
 801929e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80192a2:	f107 020c 	add.w	r2, r7, #12
 80192a6:	69fb      	ldr	r3, [r7, #28]
 80192a8:	9302      	str	r3, [sp, #8]
 80192aa:	2301      	movs	r3, #1
 80192ac:	9301      	str	r3, [sp, #4]
 80192ae:	2300      	movs	r3, #0
 80192b0:	9300      	str	r3, [sp, #0]
 80192b2:	23ff      	movs	r3, #255	; 0xff
 80192b4:	2100      	movs	r1, #0
 80192b6:	69b8      	ldr	r0, [r7, #24]
 80192b8:	f000 fa72 	bl	80197a0 <ip4_output_if>
  }
  pbuf_free(q);
 80192bc:	69b8      	ldr	r0, [r7, #24]
 80192be:	f7f7 f919 	bl	80104f4 <pbuf_free>
 80192c2:	e000      	b.n	80192c6 <icmp_send_response+0xce>
    return;
 80192c4:	bf00      	nop
}
 80192c6:	3720      	adds	r7, #32
 80192c8:	46bd      	mov	sp, r7
 80192ca:	bd80      	pop	{r7, pc}
 80192cc:	20007794 	.word	0x20007794

080192d0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80192d0:	b480      	push	{r7}
 80192d2:	b085      	sub	sp, #20
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80192d8:	4b37      	ldr	r3, [pc, #220]	; (80193b8 <ip4_route+0xe8>)
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	60fb      	str	r3, [r7, #12]
 80192de:	e036      	b.n	801934e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80192e6:	f003 0301 	and.w	r3, r3, #1
 80192ea:	b2db      	uxtb	r3, r3
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d02b      	beq.n	8019348 <ip4_route+0x78>
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80192f6:	089b      	lsrs	r3, r3, #2
 80192f8:	f003 0301 	and.w	r3, r3, #1
 80192fc:	b2db      	uxtb	r3, r3
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d022      	beq.n	8019348 <ip4_route+0x78>
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	3304      	adds	r3, #4
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d01d      	beq.n	8019348 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	681a      	ldr	r2, [r3, #0]
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	3304      	adds	r3, #4
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	405a      	eors	r2, r3
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	3308      	adds	r3, #8
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	4013      	ands	r3, r2
 8019320:	2b00      	cmp	r3, #0
 8019322:	d101      	bne.n	8019328 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	e040      	b.n	80193aa <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801932e:	f003 0302 	and.w	r3, r3, #2
 8019332:	2b00      	cmp	r3, #0
 8019334:	d108      	bne.n	8019348 <ip4_route+0x78>
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681a      	ldr	r2, [r3, #0]
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	330c      	adds	r3, #12
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	429a      	cmp	r2, r3
 8019342:	d101      	bne.n	8019348 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	e030      	b.n	80193aa <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	60fb      	str	r3, [r7, #12]
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d1c5      	bne.n	80192e0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019354:	4b19      	ldr	r3, [pc, #100]	; (80193bc <ip4_route+0xec>)
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d01a      	beq.n	8019392 <ip4_route+0xc2>
 801935c:	4b17      	ldr	r3, [pc, #92]	; (80193bc <ip4_route+0xec>)
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019364:	f003 0301 	and.w	r3, r3, #1
 8019368:	2b00      	cmp	r3, #0
 801936a:	d012      	beq.n	8019392 <ip4_route+0xc2>
 801936c:	4b13      	ldr	r3, [pc, #76]	; (80193bc <ip4_route+0xec>)
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019374:	f003 0304 	and.w	r3, r3, #4
 8019378:	2b00      	cmp	r3, #0
 801937a:	d00a      	beq.n	8019392 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801937c:	4b0f      	ldr	r3, [pc, #60]	; (80193bc <ip4_route+0xec>)
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	3304      	adds	r3, #4
 8019382:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019384:	2b00      	cmp	r3, #0
 8019386:	d004      	beq.n	8019392 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	b2db      	uxtb	r3, r3
 801938e:	2b7f      	cmp	r3, #127	; 0x7f
 8019390:	d109      	bne.n	80193a6 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8019392:	4b0b      	ldr	r3, [pc, #44]	; (80193c0 <ip4_route+0xf0>)
 8019394:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8019398:	3301      	adds	r3, #1
 801939a:	b29a      	uxth	r2, r3
 801939c:	4b08      	ldr	r3, [pc, #32]	; (80193c0 <ip4_route+0xf0>)
 801939e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80193a2:	2300      	movs	r3, #0
 80193a4:	e001      	b.n	80193aa <ip4_route+0xda>
  }

  return netif_default;
 80193a6:	4b05      	ldr	r3, [pc, #20]	; (80193bc <ip4_route+0xec>)
 80193a8:	681b      	ldr	r3, [r3, #0]
}
 80193aa:	4618      	mov	r0, r3
 80193ac:	3714      	adds	r7, #20
 80193ae:	46bd      	mov	sp, r7
 80193b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b4:	4770      	bx	lr
 80193b6:	bf00      	nop
 80193b8:	20007788 	.word	0x20007788
 80193bc:	2000778c 	.word	0x2000778c
 80193c0:	20007794 	.word	0x20007794

080193c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80193d2:	f003 0301 	and.w	r3, r3, #1
 80193d6:	b2db      	uxtb	r3, r3
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d016      	beq.n	801940a <ip4_input_accept+0x46>
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	3304      	adds	r3, #4
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d011      	beq.n	801940a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80193e6:	4b0b      	ldr	r3, [pc, #44]	; (8019414 <ip4_input_accept+0x50>)
 80193e8:	695a      	ldr	r2, [r3, #20]
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	3304      	adds	r3, #4
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	429a      	cmp	r2, r3
 80193f2:	d008      	beq.n	8019406 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80193f4:	4b07      	ldr	r3, [pc, #28]	; (8019414 <ip4_input_accept+0x50>)
 80193f6:	695b      	ldr	r3, [r3, #20]
 80193f8:	6879      	ldr	r1, [r7, #4]
 80193fa:	4618      	mov	r0, r3
 80193fc:	f000 fb0a 	bl	8019a14 <ip4_addr_isbroadcast_u32>
 8019400:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019402:	2b00      	cmp	r3, #0
 8019404:	d001      	beq.n	801940a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019406:	2301      	movs	r3, #1
 8019408:	e000      	b.n	801940c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801940a:	2300      	movs	r3, #0
}
 801940c:	4618      	mov	r0, r3
 801940e:	3708      	adds	r7, #8
 8019410:	46bd      	mov	sp, r7
 8019412:	bd80      	pop	{r7, pc}
 8019414:	20007770 	.word	0x20007770

08019418 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b088      	sub	sp, #32
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
 8019420:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8019422:	2301      	movs	r3, #1
 8019424:	613b      	str	r3, [r7, #16]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8019426:	4b9e      	ldr	r3, [pc, #632]	; (80196a0 <ip4_input+0x288>)
 8019428:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801942c:	3301      	adds	r3, #1
 801942e:	b29a      	uxth	r2, r3
 8019430:	4b9b      	ldr	r3, [pc, #620]	; (80196a0 <ip4_input+0x288>)
 8019432:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	685b      	ldr	r3, [r3, #4]
 801943a:	60fb      	str	r3, [r7, #12]
  if (IPH_V(iphdr) != 4) {
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	781b      	ldrb	r3, [r3, #0]
 8019440:	091b      	lsrs	r3, r3, #4
 8019442:	b2db      	uxtb	r3, r3
 8019444:	2b04      	cmp	r3, #4
 8019446:	d014      	beq.n	8019472 <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019448:	6878      	ldr	r0, [r7, #4]
 801944a:	f7f7 f853 	bl	80104f4 <pbuf_free>
    IP_STATS_INC(ip.err);
 801944e:	4b94      	ldr	r3, [pc, #592]	; (80196a0 <ip4_input+0x288>)
 8019450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019454:	3301      	adds	r3, #1
 8019456:	b29a      	uxth	r2, r3
 8019458:	4b91      	ldr	r3, [pc, #580]	; (80196a0 <ip4_input+0x288>)
 801945a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801945e:	4b90      	ldr	r3, [pc, #576]	; (80196a0 <ip4_input+0x288>)
 8019460:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8019464:	3301      	adds	r3, #1
 8019466:	b29a      	uxth	r2, r3
 8019468:	4b8d      	ldr	r3, [pc, #564]	; (80196a0 <ip4_input+0x288>)
 801946a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801946e:	2300      	movs	r3, #0
 8019470:	e18e      	b.n	8019790 <ip4_input+0x378>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	781b      	ldrb	r3, [r3, #0]
 8019476:	f003 030f 	and.w	r3, r3, #15
 801947a:	b2db      	uxtb	r3, r3
 801947c:	009b      	lsls	r3, r3, #2
 801947e:	b2db      	uxtb	r3, r3
 8019480:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	885b      	ldrh	r3, [r3, #2]
 8019486:	b29b      	uxth	r3, r3
 8019488:	4618      	mov	r0, r3
 801948a:	f7f6 f83b 	bl	800f504 <lwip_htons>
 801948e:	4603      	mov	r3, r0
 8019490:	82fb      	strh	r3, [r7, #22]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	891b      	ldrh	r3, [r3, #8]
 8019496:	8afa      	ldrh	r2, [r7, #22]
 8019498:	429a      	cmp	r2, r3
 801949a:	d204      	bcs.n	80194a6 <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 801949c:	8afb      	ldrh	r3, [r7, #22]
 801949e:	4619      	mov	r1, r3
 80194a0:	6878      	ldr	r0, [r7, #4]
 80194a2:	f7f6 fef4 	bl	801028e <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	895b      	ldrh	r3, [r3, #10]
 80194aa:	897a      	ldrh	r2, [r7, #10]
 80194ac:	429a      	cmp	r2, r3
 80194ae:	d807      	bhi.n	80194c0 <ip4_input+0xa8>
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	891b      	ldrh	r3, [r3, #8]
 80194b4:	8afa      	ldrh	r2, [r7, #22]
 80194b6:	429a      	cmp	r2, r3
 80194b8:	d802      	bhi.n	80194c0 <ip4_input+0xa8>
 80194ba:	897b      	ldrh	r3, [r7, #10]
 80194bc:	2b13      	cmp	r3, #19
 80194be:	d814      	bhi.n	80194ea <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80194c0:	6878      	ldr	r0, [r7, #4]
 80194c2:	f7f7 f817 	bl	80104f4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 80194c6:	4b76      	ldr	r3, [pc, #472]	; (80196a0 <ip4_input+0x288>)
 80194c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80194cc:	3301      	adds	r3, #1
 80194ce:	b29a      	uxth	r2, r3
 80194d0:	4b73      	ldr	r3, [pc, #460]	; (80196a0 <ip4_input+0x288>)
 80194d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 80194d6:	4b72      	ldr	r3, [pc, #456]	; (80196a0 <ip4_input+0x288>)
 80194d8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80194dc:	3301      	adds	r3, #1
 80194de:	b29a      	uxth	r2, r3
 80194e0:	4b6f      	ldr	r3, [pc, #444]	; (80196a0 <ip4_input+0x288>)
 80194e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80194e6:	2300      	movs	r3, #0
 80194e8:	e152      	b.n	8019790 <ip4_input+0x378>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 80194ea:	897b      	ldrh	r3, [r7, #10]
 80194ec:	4619      	mov	r1, r3
 80194ee:	68f8      	ldr	r0, [r7, #12]
 80194f0:	f7f6 f9fa 	bl	800f8e8 <inet_chksum>
 80194f4:	4603      	mov	r3, r0
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d014      	beq.n	8019524 <ip4_input+0x10c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80194fa:	6878      	ldr	r0, [r7, #4]
 80194fc:	f7f6 fffa 	bl	80104f4 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 8019500:	4b67      	ldr	r3, [pc, #412]	; (80196a0 <ip4_input+0x288>)
 8019502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8019506:	3301      	adds	r3, #1
 8019508:	b29a      	uxth	r2, r3
 801950a:	4b65      	ldr	r3, [pc, #404]	; (80196a0 <ip4_input+0x288>)
 801950c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
 8019510:	4b63      	ldr	r3, [pc, #396]	; (80196a0 <ip4_input+0x288>)
 8019512:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8019516:	3301      	adds	r3, #1
 8019518:	b29a      	uxth	r2, r3
 801951a:	4b61      	ldr	r3, [pc, #388]	; (80196a0 <ip4_input+0x288>)
 801951c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8019520:	2300      	movs	r3, #0
 8019522:	e135      	b.n	8019790 <ip4_input+0x378>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	691b      	ldr	r3, [r3, #16]
 8019528:	4a5e      	ldr	r2, [pc, #376]	; (80196a4 <ip4_input+0x28c>)
 801952a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	68db      	ldr	r3, [r3, #12]
 8019530:	4a5c      	ldr	r2, [pc, #368]	; (80196a4 <ip4_input+0x28c>)
 8019532:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019534:	4b5b      	ldr	r3, [pc, #364]	; (80196a4 <ip4_input+0x28c>)
 8019536:	695b      	ldr	r3, [r3, #20]
 8019538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801953c:	2be0      	cmp	r3, #224	; 0xe0
 801953e:	d112      	bne.n	8019566 <ip4_input+0x14e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019540:	683b      	ldr	r3, [r7, #0]
 8019542:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019546:	f003 0301 	and.w	r3, r3, #1
 801954a:	b2db      	uxtb	r3, r3
 801954c:	2b00      	cmp	r3, #0
 801954e:	d007      	beq.n	8019560 <ip4_input+0x148>
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	3304      	adds	r3, #4
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	2b00      	cmp	r3, #0
 8019558:	d002      	beq.n	8019560 <ip4_input+0x148>
      netif = inp;
 801955a:	683b      	ldr	r3, [r7, #0]
 801955c:	61fb      	str	r3, [r7, #28]
 801955e:	e02a      	b.n	80195b6 <ip4_input+0x19e>
    } else {
      netif = NULL;
 8019560:	2300      	movs	r3, #0
 8019562:	61fb      	str	r3, [r7, #28]
 8019564:	e027      	b.n	80195b6 <ip4_input+0x19e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019566:	6838      	ldr	r0, [r7, #0]
 8019568:	f7ff ff2c 	bl	80193c4 <ip4_input_accept>
 801956c:	4603      	mov	r3, r0
 801956e:	2b00      	cmp	r3, #0
 8019570:	d002      	beq.n	8019578 <ip4_input+0x160>
      netif = inp;
 8019572:	683b      	ldr	r3, [r7, #0]
 8019574:	61fb      	str	r3, [r7, #28]
 8019576:	e01e      	b.n	80195b6 <ip4_input+0x19e>
    } else {
      netif = NULL;
 8019578:	2300      	movs	r3, #0
 801957a:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801957c:	4b49      	ldr	r3, [pc, #292]	; (80196a4 <ip4_input+0x28c>)
 801957e:	695b      	ldr	r3, [r3, #20]
 8019580:	b2db      	uxtb	r3, r3
 8019582:	2b7f      	cmp	r3, #127	; 0x7f
 8019584:	d017      	beq.n	80195b6 <ip4_input+0x19e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019586:	4b48      	ldr	r3, [pc, #288]	; (80196a8 <ip4_input+0x290>)
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	61fb      	str	r3, [r7, #28]
 801958c:	e00e      	b.n	80195ac <ip4_input+0x194>
          if (netif == inp) {
 801958e:	69fa      	ldr	r2, [r7, #28]
 8019590:	683b      	ldr	r3, [r7, #0]
 8019592:	429a      	cmp	r2, r3
 8019594:	d006      	beq.n	80195a4 <ip4_input+0x18c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019596:	69f8      	ldr	r0, [r7, #28]
 8019598:	f7ff ff14 	bl	80193c4 <ip4_input_accept>
 801959c:	4603      	mov	r3, r0
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d108      	bne.n	80195b4 <ip4_input+0x19c>
 80195a2:	e000      	b.n	80195a6 <ip4_input+0x18e>
            continue;
 80195a4:	bf00      	nop
        NETIF_FOREACH(netif) {
 80195a6:	69fb      	ldr	r3, [r7, #28]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	61fb      	str	r3, [r7, #28]
 80195ac:	69fb      	ldr	r3, [r7, #28]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d1ed      	bne.n	801958e <ip4_input+0x176>
 80195b2:	e000      	b.n	80195b6 <ip4_input+0x19e>
            break;
 80195b4:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80195b6:	69fb      	ldr	r3, [r7, #28]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d111      	bne.n	80195e0 <ip4_input+0x1c8>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	7a5b      	ldrb	r3, [r3, #9]
 80195c0:	2b11      	cmp	r3, #17
 80195c2:	d10d      	bne.n	80195e0 <ip4_input+0x1c8>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80195c4:	897b      	ldrh	r3, [r7, #10]
 80195c6:	68fa      	ldr	r2, [r7, #12]
 80195c8:	4413      	add	r3, r2
 80195ca:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80195cc:	69bb      	ldr	r3, [r7, #24]
 80195ce:	885b      	ldrh	r3, [r3, #2]
 80195d0:	b29b      	uxth	r3, r3
 80195d2:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80195d6:	d103      	bne.n	80195e0 <ip4_input+0x1c8>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 80195dc:	2300      	movs	r3, #0
 80195de:	613b      	str	r3, [r7, #16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80195e0:	693b      	ldr	r3, [r7, #16]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d01f      	beq.n	8019626 <ip4_input+0x20e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80195e6:	4b2f      	ldr	r3, [pc, #188]	; (80196a4 <ip4_input+0x28c>)
 80195e8:	691b      	ldr	r3, [r3, #16]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d01b      	beq.n	8019626 <ip4_input+0x20e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80195ee:	4b2d      	ldr	r3, [pc, #180]	; (80196a4 <ip4_input+0x28c>)
 80195f0:	691b      	ldr	r3, [r3, #16]
 80195f2:	6839      	ldr	r1, [r7, #0]
 80195f4:	4618      	mov	r0, r3
 80195f6:	f000 fa0d 	bl	8019a14 <ip4_addr_isbroadcast_u32>
 80195fa:	4603      	mov	r3, r0
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d105      	bne.n	801960c <ip4_input+0x1f4>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019600:	4b28      	ldr	r3, [pc, #160]	; (80196a4 <ip4_input+0x28c>)
 8019602:	691b      	ldr	r3, [r3, #16]
 8019604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019608:	2be0      	cmp	r3, #224	; 0xe0
 801960a:	d10c      	bne.n	8019626 <ip4_input+0x20e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801960c:	6878      	ldr	r0, [r7, #4]
 801960e:	f7f6 ff71 	bl	80104f4 <pbuf_free>
      IP_STATS_INC(ip.drop);
 8019612:	4b23      	ldr	r3, [pc, #140]	; (80196a0 <ip4_input+0x288>)
 8019614:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8019618:	3301      	adds	r3, #1
 801961a:	b29a      	uxth	r2, r3
 801961c:	4b20      	ldr	r3, [pc, #128]	; (80196a0 <ip4_input+0x288>)
 801961e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019622:	2300      	movs	r3, #0
 8019624:	e0b4      	b.n	8019790 <ip4_input+0x378>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019626:	69fb      	ldr	r3, [r7, #28]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d10c      	bne.n	8019646 <ip4_input+0x22e>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801962c:	4b1c      	ldr	r3, [pc, #112]	; (80196a0 <ip4_input+0x288>)
 801962e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8019632:	3301      	adds	r3, #1
 8019634:	b29a      	uxth	r2, r3
 8019636:	4b1a      	ldr	r3, [pc, #104]	; (80196a0 <ip4_input+0x288>)
 8019638:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801963c:	6878      	ldr	r0, [r7, #4]
 801963e:	f7f6 ff59 	bl	80104f4 <pbuf_free>
    return ERR_OK;
 8019642:	2300      	movs	r3, #0
 8019644:	e0a4      	b.n	8019790 <ip4_input+0x378>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	88db      	ldrh	r3, [r3, #6]
 801964a:	b29b      	uxth	r3, r3
 801964c:	461a      	mov	r2, r3
 801964e:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019652:	4013      	ands	r3, r2
 8019654:	2b00      	cmp	r3, #0
 8019656:	d00b      	beq.n	8019670 <ip4_input+0x258>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019658:	6878      	ldr	r0, [r7, #4]
 801965a:	f000 fc85 	bl	8019f68 <ip4_reass>
 801965e:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d101      	bne.n	801966a <ip4_input+0x252>
      return ERR_OK;
 8019666:	2300      	movs	r3, #0
 8019668:	e092      	b.n	8019790 <ip4_input+0x378>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	685b      	ldr	r3, [r3, #4]
 801966e:	60fb      	str	r3, [r7, #12]

#if LWIP_IGMP
  /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
  if ((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
#else
  if (iphdr_hlen > IP_HLEN) {
 8019670:	897b      	ldrh	r3, [r7, #10]
 8019672:	2b14      	cmp	r3, #20
 8019674:	d91a      	bls.n	80196ac <ip4_input+0x294>
#endif /* LWIP_IGMP */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
    pbuf_free(p);
 8019676:	6878      	ldr	r0, [r7, #4]
 8019678:	f7f6 ff3c 	bl	80104f4 <pbuf_free>
    IP_STATS_INC(ip.opterr);
 801967c:	4b08      	ldr	r3, [pc, #32]	; (80196a0 <ip4_input+0x288>)
 801967e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8019682:	3301      	adds	r3, #1
 8019684:	b29a      	uxth	r2, r3
 8019686:	4b06      	ldr	r3, [pc, #24]	; (80196a0 <ip4_input+0x288>)
 8019688:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    IP_STATS_INC(ip.drop);
 801968c:	4b04      	ldr	r3, [pc, #16]	; (80196a0 <ip4_input+0x288>)
 801968e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8019692:	3301      	adds	r3, #1
 8019694:	b29a      	uxth	r2, r3
 8019696:	4b02      	ldr	r3, [pc, #8]	; (80196a0 <ip4_input+0x288>)
 8019698:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 801969c:	2300      	movs	r3, #0
 801969e:	e077      	b.n	8019790 <ip4_input+0x378>
 80196a0:	20007794 	.word	0x20007794
 80196a4:	20007770 	.word	0x20007770
 80196a8:	20007788 	.word	0x20007788
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80196ac:	4a3a      	ldr	r2, [pc, #232]	; (8019798 <ip4_input+0x380>)
 80196ae:	69fb      	ldr	r3, [r7, #28]
 80196b0:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80196b2:	4a39      	ldr	r2, [pc, #228]	; (8019798 <ip4_input+0x380>)
 80196b4:	683b      	ldr	r3, [r7, #0]
 80196b6:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80196b8:	4a37      	ldr	r2, [pc, #220]	; (8019798 <ip4_input+0x380>)
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	781b      	ldrb	r3, [r3, #0]
 80196c2:	f003 030f 	and.w	r3, r3, #15
 80196c6:	b2db      	uxtb	r3, r3
 80196c8:	009b      	lsls	r3, r3, #2
 80196ca:	b2db      	uxtb	r3, r3
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	4b32      	ldr	r3, [pc, #200]	; (8019798 <ip4_input+0x380>)
 80196d0:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80196d2:	897b      	ldrh	r3, [r7, #10]
 80196d4:	4619      	mov	r1, r3
 80196d6:	6878      	ldr	r0, [r7, #4]
 80196d8:	f7f6 fe9f 	bl	801041a <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	7a5b      	ldrb	r3, [r3, #9]
 80196e0:	2b11      	cmp	r3, #17
 80196e2:	d006      	beq.n	80196f2 <ip4_input+0x2da>
 80196e4:	2b11      	cmp	r3, #17
 80196e6:	dc13      	bgt.n	8019710 <ip4_input+0x2f8>
 80196e8:	2b01      	cmp	r3, #1
 80196ea:	d00c      	beq.n	8019706 <ip4_input+0x2ee>
 80196ec:	2b06      	cmp	r3, #6
 80196ee:	d005      	beq.n	80196fc <ip4_input+0x2e4>
 80196f0:	e00e      	b.n	8019710 <ip4_input+0x2f8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80196f2:	6839      	ldr	r1, [r7, #0]
 80196f4:	6878      	ldr	r0, [r7, #4]
 80196f6:	f7fc fbc1 	bl	8015e7c <udp_input>
        break;
 80196fa:	e036      	b.n	801976a <ip4_input+0x352>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80196fc:	6839      	ldr	r1, [r7, #0]
 80196fe:	6878      	ldr	r0, [r7, #4]
 8019700:	f7f8 fc4c 	bl	8011f9c <tcp_input>
        break;
 8019704:	e031      	b.n	801976a <ip4_input+0x352>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019706:	6839      	ldr	r1, [r7, #0]
 8019708:	6878      	ldr	r0, [r7, #4]
 801970a:	f7ff fbff 	bl	8018f0c <icmp_input>
        break;
 801970e:	e02c      	b.n	801976a <ip4_input+0x352>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019710:	4b21      	ldr	r3, [pc, #132]	; (8019798 <ip4_input+0x380>)
 8019712:	695b      	ldr	r3, [r3, #20]
 8019714:	69f9      	ldr	r1, [r7, #28]
 8019716:	4618      	mov	r0, r3
 8019718:	f000 f97c 	bl	8019a14 <ip4_addr_isbroadcast_u32>
 801971c:	4603      	mov	r3, r0
 801971e:	2b00      	cmp	r3, #0
 8019720:	d10f      	bne.n	8019742 <ip4_input+0x32a>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019722:	4b1d      	ldr	r3, [pc, #116]	; (8019798 <ip4_input+0x380>)
 8019724:	695b      	ldr	r3, [r3, #20]
 8019726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801972a:	2be0      	cmp	r3, #224	; 0xe0
 801972c:	d009      	beq.n	8019742 <ip4_input+0x32a>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801972e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019732:	4619      	mov	r1, r3
 8019734:	6878      	ldr	r0, [r7, #4]
 8019736:	f7f6 fecb 	bl	80104d0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801973a:	2102      	movs	r1, #2
 801973c:	6878      	ldr	r0, [r7, #4]
 801973e:	f7ff fd3b 	bl	80191b8 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 8019742:	4b16      	ldr	r3, [pc, #88]	; (801979c <ip4_input+0x384>)
 8019744:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8019748:	3301      	adds	r3, #1
 801974a:	b29a      	uxth	r2, r3
 801974c:	4b13      	ldr	r3, [pc, #76]	; (801979c <ip4_input+0x384>)
 801974e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 8019752:	4b12      	ldr	r3, [pc, #72]	; (801979c <ip4_input+0x384>)
 8019754:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8019758:	3301      	adds	r3, #1
 801975a:	b29a      	uxth	r2, r3
 801975c:	4b0f      	ldr	r3, [pc, #60]	; (801979c <ip4_input+0x384>)
 801975e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019762:	6878      	ldr	r0, [r7, #4]
 8019764:	f7f6 fec6 	bl	80104f4 <pbuf_free>
        break;
 8019768:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801976a:	4b0b      	ldr	r3, [pc, #44]	; (8019798 <ip4_input+0x380>)
 801976c:	2200      	movs	r2, #0
 801976e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019770:	4b09      	ldr	r3, [pc, #36]	; (8019798 <ip4_input+0x380>)
 8019772:	2200      	movs	r2, #0
 8019774:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019776:	4b08      	ldr	r3, [pc, #32]	; (8019798 <ip4_input+0x380>)
 8019778:	2200      	movs	r2, #0
 801977a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801977c:	4b06      	ldr	r3, [pc, #24]	; (8019798 <ip4_input+0x380>)
 801977e:	2200      	movs	r2, #0
 8019780:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019782:	4b05      	ldr	r3, [pc, #20]	; (8019798 <ip4_input+0x380>)
 8019784:	2200      	movs	r2, #0
 8019786:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019788:	4b03      	ldr	r3, [pc, #12]	; (8019798 <ip4_input+0x380>)
 801978a:	2200      	movs	r2, #0
 801978c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801978e:	2300      	movs	r3, #0
}
 8019790:	4618      	mov	r0, r3
 8019792:	3720      	adds	r7, #32
 8019794:	46bd      	mov	sp, r7
 8019796:	bd80      	pop	{r7, pc}
 8019798:	20007770 	.word	0x20007770
 801979c:	20007794 	.word	0x20007794

080197a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b08a      	sub	sp, #40	; 0x28
 80197a4:	af04      	add	r7, sp, #16
 80197a6:	60f8      	str	r0, [r7, #12]
 80197a8:	60b9      	str	r1, [r7, #8]
 80197aa:	607a      	str	r2, [r7, #4]
 80197ac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80197ae:	68bb      	ldr	r3, [r7, #8]
 80197b0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d009      	beq.n	80197cc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80197b8:	68bb      	ldr	r3, [r7, #8]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d003      	beq.n	80197c6 <ip4_output_if+0x26>
 80197be:	68bb      	ldr	r3, [r7, #8]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d102      	bne.n	80197cc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80197c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197c8:	3304      	adds	r3, #4
 80197ca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80197cc:	78fa      	ldrb	r2, [r7, #3]
 80197ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197d0:	9302      	str	r3, [sp, #8]
 80197d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80197d6:	9301      	str	r3, [sp, #4]
 80197d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80197dc:	9300      	str	r3, [sp, #0]
 80197de:	4613      	mov	r3, r2
 80197e0:	687a      	ldr	r2, [r7, #4]
 80197e2:	6979      	ldr	r1, [r7, #20]
 80197e4:	68f8      	ldr	r0, [r7, #12]
 80197e6:	f000 f805 	bl	80197f4 <ip4_output_if_src>
 80197ea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80197ec:	4618      	mov	r0, r3
 80197ee:	3718      	adds	r7, #24
 80197f0:	46bd      	mov	sp, r7
 80197f2:	bd80      	pop	{r7, pc}

080197f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b088      	sub	sp, #32
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	60f8      	str	r0, [r7, #12]
 80197fc:	60b9      	str	r1, [r7, #8]
 80197fe:	607a      	str	r2, [r7, #4]
 8019800:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8019802:	2300      	movs	r3, #0
 8019804:	61fb      	str	r3, [r7, #28]
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	2b00      	cmp	r3, #0
 801980a:	f000 80c1 	beq.w	8019990 <ip4_output_if_src+0x19c>
    u16_t ip_hlen = IP_HLEN;
 801980e:	2314      	movs	r3, #20
 8019810:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019812:	2114      	movs	r1, #20
 8019814:	68f8      	ldr	r0, [r7, #12]
 8019816:	f7f6 fdf1 	bl	80103fc <pbuf_add_header>
 801981a:	4603      	mov	r3, r0
 801981c:	2b00      	cmp	r3, #0
 801981e:	d00a      	beq.n	8019836 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8019820:	4b79      	ldr	r3, [pc, #484]	; (8019a08 <ip4_output_if_src+0x214>)
 8019822:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8019826:	3301      	adds	r3, #1
 8019828:	b29a      	uxth	r2, r3
 801982a:	4b77      	ldr	r3, [pc, #476]	; (8019a08 <ip4_output_if_src+0x214>)
 801982c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019830:	f06f 0301 	mvn.w	r3, #1
 8019834:	e0e4      	b.n	8019a00 <ip4_output_if_src+0x20c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	685b      	ldr	r3, [r3, #4]
 801983a:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801983c:	69bb      	ldr	r3, [r7, #24]
 801983e:	78fa      	ldrb	r2, [r7, #3]
 8019840:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019842:	69bb      	ldr	r3, [r7, #24]
 8019844:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019848:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801984a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801984e:	78fb      	ldrb	r3, [r7, #3]
 8019850:	021b      	lsls	r3, r3, #8
 8019852:	4313      	orrs	r3, r2
 8019854:	021b      	lsls	r3, r3, #8
 8019856:	b21a      	sxth	r2, r3
 8019858:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 801985c:	78fb      	ldrb	r3, [r7, #3]
 801985e:	021b      	lsls	r3, r3, #8
 8019860:	430b      	orrs	r3, r1
 8019862:	121b      	asrs	r3, r3, #8
 8019864:	b21b      	sxth	r3, r3
 8019866:	b2db      	uxtb	r3, r3
 8019868:	b21b      	sxth	r3, r3
 801986a:	4313      	orrs	r3, r2
 801986c:	b21b      	sxth	r3, r3
 801986e:	b29b      	uxth	r3, r3
 8019870:	461a      	mov	r2, r3
 8019872:	69fb      	ldr	r3, [r7, #28]
 8019874:	4413      	add	r3, r2
 8019876:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681a      	ldr	r2, [r3, #0]
 801987c:	69bb      	ldr	r3, [r7, #24]
 801987e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8019880:	69bb      	ldr	r3, [r7, #24]
 8019882:	691b      	ldr	r3, [r3, #16]
 8019884:	b29b      	uxth	r3, r3
 8019886:	69fa      	ldr	r2, [r7, #28]
 8019888:	4413      	add	r3, r2
 801988a:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801988c:	69bb      	ldr	r3, [r7, #24]
 801988e:	691b      	ldr	r3, [r3, #16]
 8019890:	0c1b      	lsrs	r3, r3, #16
 8019892:	69fa      	ldr	r2, [r7, #28]
 8019894:	4413      	add	r3, r2
 8019896:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019898:	8afb      	ldrh	r3, [r7, #22]
 801989a:	089b      	lsrs	r3, r3, #2
 801989c:	b29b      	uxth	r3, r3
 801989e:	b2db      	uxtb	r3, r3
 80198a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198a4:	b2da      	uxtb	r2, r3
 80198a6:	69bb      	ldr	r3, [r7, #24]
 80198a8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80198aa:	69bb      	ldr	r3, [r7, #24]
 80198ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80198b0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80198b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80198b6:	69bb      	ldr	r3, [r7, #24]
 80198b8:	781b      	ldrb	r3, [r3, #0]
 80198ba:	021b      	lsls	r3, r3, #8
 80198bc:	4313      	orrs	r3, r2
 80198be:	021b      	lsls	r3, r3, #8
 80198c0:	b21a      	sxth	r2, r3
 80198c2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80198c6:	69bb      	ldr	r3, [r7, #24]
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	021b      	lsls	r3, r3, #8
 80198cc:	430b      	orrs	r3, r1
 80198ce:	121b      	asrs	r3, r3, #8
 80198d0:	b21b      	sxth	r3, r3
 80198d2:	b2db      	uxtb	r3, r3
 80198d4:	b21b      	sxth	r3, r3
 80198d6:	4313      	orrs	r3, r2
 80198d8:	b21b      	sxth	r3, r3
 80198da:	b29b      	uxth	r3, r3
 80198dc:	461a      	mov	r2, r3
 80198de:	69fb      	ldr	r3, [r7, #28]
 80198e0:	4413      	add	r3, r2
 80198e2:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	891b      	ldrh	r3, [r3, #8]
 80198e8:	4618      	mov	r0, r3
 80198ea:	f7f5 fe0b 	bl	800f504 <lwip_htons>
 80198ee:	4603      	mov	r3, r0
 80198f0:	461a      	mov	r2, r3
 80198f2:	69bb      	ldr	r3, [r7, #24]
 80198f4:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80198f6:	69bb      	ldr	r3, [r7, #24]
 80198f8:	885b      	ldrh	r3, [r3, #2]
 80198fa:	b29b      	uxth	r3, r3
 80198fc:	461a      	mov	r2, r3
 80198fe:	69fb      	ldr	r3, [r7, #28]
 8019900:	4413      	add	r3, r2
 8019902:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019904:	69bb      	ldr	r3, [r7, #24]
 8019906:	2200      	movs	r2, #0
 8019908:	719a      	strb	r2, [r3, #6]
 801990a:	2200      	movs	r2, #0
 801990c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801990e:	4b3f      	ldr	r3, [pc, #252]	; (8019a0c <ip4_output_if_src+0x218>)
 8019910:	881b      	ldrh	r3, [r3, #0]
 8019912:	4618      	mov	r0, r3
 8019914:	f7f5 fdf6 	bl	800f504 <lwip_htons>
 8019918:	4603      	mov	r3, r0
 801991a:	461a      	mov	r2, r3
 801991c:	69bb      	ldr	r3, [r7, #24]
 801991e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8019920:	69bb      	ldr	r3, [r7, #24]
 8019922:	889b      	ldrh	r3, [r3, #4]
 8019924:	b29b      	uxth	r3, r3
 8019926:	461a      	mov	r2, r3
 8019928:	69fb      	ldr	r3, [r7, #28]
 801992a:	4413      	add	r3, r2
 801992c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801992e:	4b37      	ldr	r3, [pc, #220]	; (8019a0c <ip4_output_if_src+0x218>)
 8019930:	881b      	ldrh	r3, [r3, #0]
 8019932:	3301      	adds	r3, #1
 8019934:	b29a      	uxth	r2, r3
 8019936:	4b35      	ldr	r3, [pc, #212]	; (8019a0c <ip4_output_if_src+0x218>)
 8019938:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801993a:	68bb      	ldr	r3, [r7, #8]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d104      	bne.n	801994a <ip4_output_if_src+0x156>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019940:	4b33      	ldr	r3, [pc, #204]	; (8019a10 <ip4_output_if_src+0x21c>)
 8019942:	681a      	ldr	r2, [r3, #0]
 8019944:	69bb      	ldr	r3, [r7, #24]
 8019946:	60da      	str	r2, [r3, #12]
 8019948:	e003      	b.n	8019952 <ip4_output_if_src+0x15e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801994a:	68bb      	ldr	r3, [r7, #8]
 801994c:	681a      	ldr	r2, [r3, #0]
 801994e:	69bb      	ldr	r3, [r7, #24]
 8019950:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8019952:	69bb      	ldr	r3, [r7, #24]
 8019954:	68db      	ldr	r3, [r3, #12]
 8019956:	b29b      	uxth	r3, r3
 8019958:	69fa      	ldr	r2, [r7, #28]
 801995a:	4413      	add	r3, r2
 801995c:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801995e:	69bb      	ldr	r3, [r7, #24]
 8019960:	68db      	ldr	r3, [r3, #12]
 8019962:	0c1b      	lsrs	r3, r3, #16
 8019964:	69fa      	ldr	r2, [r7, #28]
 8019966:	4413      	add	r3, r2
 8019968:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801996a:	69fb      	ldr	r3, [r7, #28]
 801996c:	0c1a      	lsrs	r2, r3, #16
 801996e:	69fb      	ldr	r3, [r7, #28]
 8019970:	b29b      	uxth	r3, r3
 8019972:	4413      	add	r3, r2
 8019974:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8019976:	69fb      	ldr	r3, [r7, #28]
 8019978:	0c1b      	lsrs	r3, r3, #16
 801997a:	69fa      	ldr	r2, [r7, #28]
 801997c:	4413      	add	r3, r2
 801997e:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8019980:	69fb      	ldr	r3, [r7, #28]
 8019982:	43db      	mvns	r3, r3
 8019984:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8019986:	69fb      	ldr	r3, [r7, #28]
 8019988:	b29a      	uxth	r2, r3
 801998a:	69bb      	ldr	r3, [r7, #24]
 801998c:	815a      	strh	r2, [r3, #10]
 801998e:	e017      	b.n	80199c0 <ip4_output_if_src+0x1cc>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	895b      	ldrh	r3, [r3, #10]
 8019994:	2b13      	cmp	r3, #19
 8019996:	d80a      	bhi.n	80199ae <ip4_output_if_src+0x1ba>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8019998:	4b1b      	ldr	r3, [pc, #108]	; (8019a08 <ip4_output_if_src+0x214>)
 801999a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801999e:	3301      	adds	r3, #1
 80199a0:	b29a      	uxth	r2, r3
 80199a2:	4b19      	ldr	r3, [pc, #100]	; (8019a08 <ip4_output_if_src+0x214>)
 80199a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80199a8:	f06f 0301 	mvn.w	r3, #1
 80199ac:	e028      	b.n	8019a00 <ip4_output_if_src+0x20c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	685b      	ldr	r3, [r3, #4]
 80199b2:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80199b4:	69bb      	ldr	r3, [r7, #24]
 80199b6:	691b      	ldr	r3, [r3, #16]
 80199b8:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80199ba:	f107 0310 	add.w	r3, r7, #16
 80199be:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 80199c0:	4b11      	ldr	r3, [pc, #68]	; (8019a08 <ip4_output_if_src+0x214>)
 80199c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80199c6:	3301      	adds	r3, #1
 80199c8:	b29a      	uxth	r2, r3
 80199ca:	4b0f      	ldr	r3, [pc, #60]	; (8019a08 <ip4_output_if_src+0x214>)
 80199cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80199d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d00c      	beq.n	80199f2 <ip4_output_if_src+0x1fe>
 80199d8:	68fb      	ldr	r3, [r7, #12]
 80199da:	891a      	ldrh	r2, [r3, #8]
 80199dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80199e0:	429a      	cmp	r2, r3
 80199e2:	d906      	bls.n	80199f2 <ip4_output_if_src+0x1fe>
    return ip4_frag(p, netif, dest);
 80199e4:	687a      	ldr	r2, [r7, #4]
 80199e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80199e8:	68f8      	ldr	r0, [r7, #12]
 80199ea:	f000 fc7d 	bl	801a2e8 <ip4_frag>
 80199ee:	4603      	mov	r3, r0
 80199f0:	e006      	b.n	8019a00 <ip4_output_if_src+0x20c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80199f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f4:	695b      	ldr	r3, [r3, #20]
 80199f6:	687a      	ldr	r2, [r7, #4]
 80199f8:	68f9      	ldr	r1, [r7, #12]
 80199fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80199fc:	4798      	blx	r3
 80199fe:	4603      	mov	r3, r0
}
 8019a00:	4618      	mov	r0, r3
 8019a02:	3720      	adds	r7, #32
 8019a04:	46bd      	mov	sp, r7
 8019a06:	bd80      	pop	{r7, pc}
 8019a08:	20007794 	.word	0x20007794
 8019a0c:	200079c6 	.word	0x200079c6
 8019a10:	0801d248 	.word	0x0801d248

08019a14 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019a14:	b480      	push	{r7}
 8019a16:	b085      	sub	sp, #20
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	6078      	str	r0, [r7, #4]
 8019a1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019a28:	d002      	beq.n	8019a30 <ip4_addr_isbroadcast_u32+0x1c>
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d101      	bne.n	8019a34 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019a30:	2301      	movs	r3, #1
 8019a32:	e02a      	b.n	8019a8a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019a34:	683b      	ldr	r3, [r7, #0]
 8019a36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019a3a:	f003 0302 	and.w	r3, r3, #2
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d101      	bne.n	8019a46 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019a42:	2300      	movs	r3, #0
 8019a44:	e021      	b.n	8019a8a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019a46:	683b      	ldr	r3, [r7, #0]
 8019a48:	3304      	adds	r3, #4
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	687a      	ldr	r2, [r7, #4]
 8019a4e:	429a      	cmp	r2, r3
 8019a50:	d101      	bne.n	8019a56 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019a52:	2300      	movs	r3, #0
 8019a54:	e019      	b.n	8019a8a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019a56:	68fa      	ldr	r2, [r7, #12]
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	3304      	adds	r3, #4
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	405a      	eors	r2, r3
 8019a60:	683b      	ldr	r3, [r7, #0]
 8019a62:	3308      	adds	r3, #8
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	4013      	ands	r3, r2
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d10d      	bne.n	8019a88 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019a6c:	683b      	ldr	r3, [r7, #0]
 8019a6e:	3308      	adds	r3, #8
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	43da      	mvns	r2, r3
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019a78:	683b      	ldr	r3, [r7, #0]
 8019a7a:	3308      	adds	r3, #8
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019a80:	429a      	cmp	r2, r3
 8019a82:	d101      	bne.n	8019a88 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019a84:	2301      	movs	r3, #1
 8019a86:	e000      	b.n	8019a8a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019a88:	2300      	movs	r3, #0
  }
}
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	3714      	adds	r7, #20
 8019a8e:	46bd      	mov	sp, r7
 8019a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a94:	4770      	bx	lr
	...

08019a98 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	b084      	sub	sp, #16
 8019a9c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019aa2:	4b12      	ldr	r3, [pc, #72]	; (8019aec <ip_reass_tmr+0x54>)
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019aa8:	e018      	b.n	8019adc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	7fdb      	ldrb	r3, [r3, #31]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d00b      	beq.n	8019aca <ip_reass_tmr+0x32>
      r->timer--;
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	7fdb      	ldrb	r3, [r3, #31]
 8019ab6:	3b01      	subs	r3, #1
 8019ab8:	b2da      	uxtb	r2, r3
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	60fb      	str	r3, [r7, #12]
 8019ac8:	e008      	b.n	8019adc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019ad4:	68b9      	ldr	r1, [r7, #8]
 8019ad6:	6878      	ldr	r0, [r7, #4]
 8019ad8:	f000 f80a 	bl	8019af0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d1e3      	bne.n	8019aaa <ip_reass_tmr+0x12>
    }
  }
}
 8019ae2:	bf00      	nop
 8019ae4:	bf00      	nop
 8019ae6:	3710      	adds	r7, #16
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd80      	pop	{r7, pc}
 8019aec:	200079c8 	.word	0x200079c8

08019af0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	b088      	sub	sp, #32
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
 8019af8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019afa:	2300      	movs	r3, #0
 8019afc:	83fb      	strh	r3, [r7, #30]
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	685b      	ldr	r3, [r3, #4]
 8019b02:	685b      	ldr	r3, [r3, #4]
 8019b04:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019b06:	697b      	ldr	r3, [r7, #20]
 8019b08:	889b      	ldrh	r3, [r3, #4]
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d11e      	bne.n	8019b4e <ip_reass_free_complete_datagram+0x5e>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	685b      	ldr	r3, [r3, #4]
 8019b14:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019b16:	697b      	ldr	r3, [r7, #20]
 8019b18:	681a      	ldr	r2, [r3, #0]
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019b1e:	69bb      	ldr	r3, [r7, #24]
 8019b20:	6858      	ldr	r0, [r3, #4]
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	3308      	adds	r3, #8
 8019b26:	2214      	movs	r2, #20
 8019b28:	4619      	mov	r1, r3
 8019b2a:	f001 f934 	bl	801ad96 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019b2e:	2101      	movs	r1, #1
 8019b30:	69b8      	ldr	r0, [r7, #24]
 8019b32:	f7ff fb51 	bl	80191d8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019b36:	69b8      	ldr	r0, [r7, #24]
 8019b38:	f7f6 fd2f 	bl	801059a <pbuf_clen>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b40:	8bfa      	ldrh	r2, [r7, #30]
 8019b42:	8a7b      	ldrh	r3, [r7, #18]
 8019b44:	4413      	add	r3, r2
 8019b46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019b48:	69b8      	ldr	r0, [r7, #24]
 8019b4a:	f7f6 fcd3 	bl	80104f4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	685b      	ldr	r3, [r3, #4]
 8019b52:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019b54:	e013      	b.n	8019b7e <ip_reass_free_complete_datagram+0x8e>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019b56:	69bb      	ldr	r3, [r7, #24]
 8019b58:	685b      	ldr	r3, [r3, #4]
 8019b5a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019b5c:	69bb      	ldr	r3, [r7, #24]
 8019b5e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019b60:	697b      	ldr	r3, [r7, #20]
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019b66:	68f8      	ldr	r0, [r7, #12]
 8019b68:	f7f6 fd17 	bl	801059a <pbuf_clen>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b70:	8bfa      	ldrh	r2, [r7, #30]
 8019b72:	8a7b      	ldrh	r3, [r7, #18]
 8019b74:	4413      	add	r3, r2
 8019b76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019b78:	68f8      	ldr	r0, [r7, #12]
 8019b7a:	f7f6 fcbb 	bl	80104f4 <pbuf_free>
  while (p != NULL) {
 8019b7e:	69bb      	ldr	r3, [r7, #24]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d1e8      	bne.n	8019b56 <ip_reass_free_complete_datagram+0x66>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019b84:	6839      	ldr	r1, [r7, #0]
 8019b86:	6878      	ldr	r0, [r7, #4]
 8019b88:	f000 f8b2 	bl	8019cf0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019b8c:	4b05      	ldr	r3, [pc, #20]	; (8019ba4 <ip_reass_free_complete_datagram+0xb4>)
 8019b8e:	881a      	ldrh	r2, [r3, #0]
 8019b90:	8bfb      	ldrh	r3, [r7, #30]
 8019b92:	1ad3      	subs	r3, r2, r3
 8019b94:	b29a      	uxth	r2, r3
 8019b96:	4b03      	ldr	r3, [pc, #12]	; (8019ba4 <ip_reass_free_complete_datagram+0xb4>)
 8019b98:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019b9a:	8bfb      	ldrh	r3, [r7, #30]
}
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	3720      	adds	r7, #32
 8019ba0:	46bd      	mov	sp, r7
 8019ba2:	bd80      	pop	{r7, pc}
 8019ba4:	200079cc 	.word	0x200079cc

08019ba8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b08a      	sub	sp, #40	; 0x28
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
 8019bb0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019bba:	2300      	movs	r3, #0
 8019bbc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019bc6:	4b28      	ldr	r3, [pc, #160]	; (8019c68 <ip_reass_remove_oldest_datagram+0xc0>)
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019bcc:	e030      	b.n	8019c30 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bd0:	695a      	ldr	r2, [r3, #20]
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	68db      	ldr	r3, [r3, #12]
 8019bd6:	429a      	cmp	r2, r3
 8019bd8:	d10c      	bne.n	8019bf4 <ip_reass_remove_oldest_datagram+0x4c>
 8019bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bdc:	699a      	ldr	r2, [r3, #24]
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	691b      	ldr	r3, [r3, #16]
 8019be2:	429a      	cmp	r2, r3
 8019be4:	d106      	bne.n	8019bf4 <ip_reass_remove_oldest_datagram+0x4c>
 8019be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be8:	899a      	ldrh	r2, [r3, #12]
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	889b      	ldrh	r3, [r3, #4]
 8019bee:	b29b      	uxth	r3, r3
 8019bf0:	429a      	cmp	r2, r3
 8019bf2:	d014      	beq.n	8019c1e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019bf4:	693b      	ldr	r3, [r7, #16]
 8019bf6:	3301      	adds	r3, #1
 8019bf8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019bfa:	6a3b      	ldr	r3, [r7, #32]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d104      	bne.n	8019c0a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c02:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c04:	69fb      	ldr	r3, [r7, #28]
 8019c06:	61bb      	str	r3, [r7, #24]
 8019c08:	e009      	b.n	8019c1e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c0c:	7fda      	ldrb	r2, [r3, #31]
 8019c0e:	6a3b      	ldr	r3, [r7, #32]
 8019c10:	7fdb      	ldrb	r3, [r3, #31]
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d803      	bhi.n	8019c1e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c18:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c1a:	69fb      	ldr	r3, [r7, #28]
 8019c1c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d001      	beq.n	8019c2a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c28:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d1cb      	bne.n	8019bce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019c36:	6a3b      	ldr	r3, [r7, #32]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d008      	beq.n	8019c4e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019c3c:	69b9      	ldr	r1, [r7, #24]
 8019c3e:	6a38      	ldr	r0, [r7, #32]
 8019c40:	f7ff ff56 	bl	8019af0 <ip_reass_free_complete_datagram>
 8019c44:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019c46:	697a      	ldr	r2, [r7, #20]
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	4413      	add	r3, r2
 8019c4c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019c4e:	697a      	ldr	r2, [r7, #20]
 8019c50:	683b      	ldr	r3, [r7, #0]
 8019c52:	429a      	cmp	r2, r3
 8019c54:	da02      	bge.n	8019c5c <ip_reass_remove_oldest_datagram+0xb4>
 8019c56:	693b      	ldr	r3, [r7, #16]
 8019c58:	2b01      	cmp	r3, #1
 8019c5a:	dcac      	bgt.n	8019bb6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019c5c:	697b      	ldr	r3, [r7, #20]
}
 8019c5e:	4618      	mov	r0, r3
 8019c60:	3728      	adds	r7, #40	; 0x28
 8019c62:	46bd      	mov	sp, r7
 8019c64:	bd80      	pop	{r7, pc}
 8019c66:	bf00      	nop
 8019c68:	200079c8 	.word	0x200079c8

08019c6c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b084      	sub	sp, #16
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
 8019c74:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c76:	2004      	movs	r0, #4
 8019c78:	f7f5 ff24 	bl	800fac4 <memp_malloc>
 8019c7c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d116      	bne.n	8019cb2 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019c84:	6839      	ldr	r1, [r7, #0]
 8019c86:	6878      	ldr	r0, [r7, #4]
 8019c88:	f7ff ff8e 	bl	8019ba8 <ip_reass_remove_oldest_datagram>
 8019c8c:	4602      	mov	r2, r0
 8019c8e:	683b      	ldr	r3, [r7, #0]
 8019c90:	4293      	cmp	r3, r2
 8019c92:	dc03      	bgt.n	8019c9c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c94:	2004      	movs	r0, #4
 8019c96:	f7f5 ff15 	bl	800fac4 <memp_malloc>
 8019c9a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d107      	bne.n	8019cb2 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 8019ca2:	4b11      	ldr	r3, [pc, #68]	; (8019ce8 <ip_reass_enqueue_new_datagram+0x7c>)
 8019ca4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8019ca6:	3301      	adds	r3, #1
 8019ca8:	b29a      	uxth	r2, r3
 8019caa:	4b0f      	ldr	r3, [pc, #60]	; (8019ce8 <ip_reass_enqueue_new_datagram+0x7c>)
 8019cac:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019cae:	2300      	movs	r3, #0
 8019cb0:	e016      	b.n	8019ce0 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019cb2:	2220      	movs	r2, #32
 8019cb4:	2100      	movs	r1, #0
 8019cb6:	68f8      	ldr	r0, [r7, #12]
 8019cb8:	f000 ffc3 	bl	801ac42 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	220f      	movs	r2, #15
 8019cc0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019cc2:	4b0a      	ldr	r3, [pc, #40]	; (8019cec <ip_reass_enqueue_new_datagram+0x80>)
 8019cc4:	681a      	ldr	r2, [r3, #0]
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019cca:	4a08      	ldr	r2, [pc, #32]	; (8019cec <ip_reass_enqueue_new_datagram+0x80>)
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	3308      	adds	r3, #8
 8019cd4:	2214      	movs	r2, #20
 8019cd6:	6879      	ldr	r1, [r7, #4]
 8019cd8:	4618      	mov	r0, r3
 8019cda:	f001 f85c 	bl	801ad96 <memcpy>
  return ipr;
 8019cde:	68fb      	ldr	r3, [r7, #12]
}
 8019ce0:	4618      	mov	r0, r3
 8019ce2:	3710      	adds	r7, #16
 8019ce4:	46bd      	mov	sp, r7
 8019ce6:	bd80      	pop	{r7, pc}
 8019ce8:	20007794 	.word	0x20007794
 8019cec:	200079c8 	.word	0x200079c8

08019cf0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b082      	sub	sp, #8
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]
 8019cf8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019cfa:	4b0b      	ldr	r3, [pc, #44]	; (8019d28 <ip_reass_dequeue_datagram+0x38>)
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	687a      	ldr	r2, [r7, #4]
 8019d00:	429a      	cmp	r2, r3
 8019d02:	d104      	bne.n	8019d0e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	4a07      	ldr	r2, [pc, #28]	; (8019d28 <ip_reass_dequeue_datagram+0x38>)
 8019d0a:	6013      	str	r3, [r2, #0]
 8019d0c:	e003      	b.n	8019d16 <ip_reass_dequeue_datagram+0x26>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	681a      	ldr	r2, [r3, #0]
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019d16:	6879      	ldr	r1, [r7, #4]
 8019d18:	2004      	movs	r0, #4
 8019d1a:	f7f5 ff0f 	bl	800fb3c <memp_free>
}
 8019d1e:	bf00      	nop
 8019d20:	3708      	adds	r7, #8
 8019d22:	46bd      	mov	sp, r7
 8019d24:	bd80      	pop	{r7, pc}
 8019d26:	bf00      	nop
 8019d28:	200079c8 	.word	0x200079c8

08019d2c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b08c      	sub	sp, #48	; 0x30
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	60f8      	str	r0, [r7, #12]
 8019d34:	60b9      	str	r1, [r7, #8]
 8019d36:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019d38:	2300      	movs	r3, #0
 8019d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019d3c:	2301      	movs	r3, #1
 8019d3e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019d40:	68bb      	ldr	r3, [r7, #8]
 8019d42:	685b      	ldr	r3, [r3, #4]
 8019d44:	623b      	str	r3, [r7, #32]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019d46:	6a3b      	ldr	r3, [r7, #32]
 8019d48:	885b      	ldrh	r3, [r3, #2]
 8019d4a:	b29b      	uxth	r3, r3
 8019d4c:	4618      	mov	r0, r3
 8019d4e:	f7f5 fbd9 	bl	800f504 <lwip_htons>
 8019d52:	4603      	mov	r3, r0
 8019d54:	83fb      	strh	r3, [r7, #30]
  hlen = IPH_HL_BYTES(fraghdr);
 8019d56:	6a3b      	ldr	r3, [r7, #32]
 8019d58:	781b      	ldrb	r3, [r3, #0]
 8019d5a:	f003 030f 	and.w	r3, r3, #15
 8019d5e:	b2db      	uxtb	r3, r3
 8019d60:	009b      	lsls	r3, r3, #2
 8019d62:	777b      	strb	r3, [r7, #29]
  if (hlen > len) {
 8019d64:	7f7b      	ldrb	r3, [r7, #29]
 8019d66:	b29b      	uxth	r3, r3
 8019d68:	8bfa      	ldrh	r2, [r7, #30]
 8019d6a:	429a      	cmp	r2, r3
 8019d6c:	d202      	bcs.n	8019d74 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019d72:	e0f5      	b.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
  }
  len = (u16_t)(len - hlen);
 8019d74:	7f7b      	ldrb	r3, [r7, #29]
 8019d76:	b29b      	uxth	r3, r3
 8019d78:	8bfa      	ldrh	r2, [r7, #30]
 8019d7a:	1ad3      	subs	r3, r2, r3
 8019d7c:	83fb      	strh	r3, [r7, #30]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019d7e:	6a3b      	ldr	r3, [r7, #32]
 8019d80:	88db      	ldrh	r3, [r3, #6]
 8019d82:	b29b      	uxth	r3, r3
 8019d84:	4618      	mov	r0, r3
 8019d86:	f7f5 fbbd 	bl	800f504 <lwip_htons>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019d90:	b29b      	uxth	r3, r3
 8019d92:	00db      	lsls	r3, r3, #3
 8019d94:	837b      	strh	r3, [r7, #26]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019d96:	68bb      	ldr	r3, [r7, #8]
 8019d98:	685b      	ldr	r3, [r3, #4]
 8019d9a:	617b      	str	r3, [r7, #20]
  iprh->next_pbuf = NULL;
 8019d9c:	697b      	ldr	r3, [r7, #20]
 8019d9e:	2200      	movs	r2, #0
 8019da0:	701a      	strb	r2, [r3, #0]
 8019da2:	2200      	movs	r2, #0
 8019da4:	705a      	strb	r2, [r3, #1]
 8019da6:	2200      	movs	r2, #0
 8019da8:	709a      	strb	r2, [r3, #2]
 8019daa:	2200      	movs	r2, #0
 8019dac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019dae:	697b      	ldr	r3, [r7, #20]
 8019db0:	8b7a      	ldrh	r2, [r7, #26]
 8019db2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019db4:	8b7a      	ldrh	r2, [r7, #26]
 8019db6:	8bfb      	ldrh	r3, [r7, #30]
 8019db8:	4413      	add	r3, r2
 8019dba:	b29a      	uxth	r2, r3
 8019dbc:	697b      	ldr	r3, [r7, #20]
 8019dbe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019dc0:	697b      	ldr	r3, [r7, #20]
 8019dc2:	88db      	ldrh	r3, [r3, #6]
 8019dc4:	b29b      	uxth	r3, r3
 8019dc6:	8b7a      	ldrh	r2, [r7, #26]
 8019dc8:	429a      	cmp	r2, r3
 8019dca:	d902      	bls.n	8019dd2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019dd0:	e0c6      	b.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	685b      	ldr	r3, [r3, #4]
 8019dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8019dd8:	e068      	b.n	8019eac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ddc:	685b      	ldr	r3, [r3, #4]
 8019dde:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019de0:	697b      	ldr	r3, [r7, #20]
 8019de2:	889b      	ldrh	r3, [r3, #4]
 8019de4:	b29a      	uxth	r2, r3
 8019de6:	693b      	ldr	r3, [r7, #16]
 8019de8:	889b      	ldrh	r3, [r3, #4]
 8019dea:	b29b      	uxth	r3, r3
 8019dec:	429a      	cmp	r2, r3
 8019dee:	d235      	bcs.n	8019e5c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019df0:	697b      	ldr	r3, [r7, #20]
 8019df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019df4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d020      	beq.n	8019e3e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019dfc:	697b      	ldr	r3, [r7, #20]
 8019dfe:	889b      	ldrh	r3, [r3, #4]
 8019e00:	b29a      	uxth	r2, r3
 8019e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e04:	88db      	ldrh	r3, [r3, #6]
 8019e06:	b29b      	uxth	r3, r3
 8019e08:	429a      	cmp	r2, r3
 8019e0a:	d307      	bcc.n	8019e1c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019e0c:	697b      	ldr	r3, [r7, #20]
 8019e0e:	88db      	ldrh	r3, [r3, #6]
 8019e10:	b29a      	uxth	r2, r3
 8019e12:	693b      	ldr	r3, [r7, #16]
 8019e14:	889b      	ldrh	r3, [r3, #4]
 8019e16:	b29b      	uxth	r3, r3
 8019e18:	429a      	cmp	r2, r3
 8019e1a:	d902      	bls.n	8019e22 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e20:	e09e      	b.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e24:	68ba      	ldr	r2, [r7, #8]
 8019e26:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e2a:	88db      	ldrh	r3, [r3, #6]
 8019e2c:	b29a      	uxth	r2, r3
 8019e2e:	697b      	ldr	r3, [r7, #20]
 8019e30:	889b      	ldrh	r3, [r3, #4]
 8019e32:	b29b      	uxth	r3, r3
 8019e34:	429a      	cmp	r2, r3
 8019e36:	d03d      	beq.n	8019eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e38:	2300      	movs	r3, #0
 8019e3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019e3c:	e03a      	b.n	8019eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019e3e:	697b      	ldr	r3, [r7, #20]
 8019e40:	88db      	ldrh	r3, [r3, #6]
 8019e42:	b29a      	uxth	r2, r3
 8019e44:	693b      	ldr	r3, [r7, #16]
 8019e46:	889b      	ldrh	r3, [r3, #4]
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	429a      	cmp	r2, r3
 8019e4c:	d902      	bls.n	8019e54 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e52:	e085      	b.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	68ba      	ldr	r2, [r7, #8]
 8019e58:	605a      	str	r2, [r3, #4]
      break;
 8019e5a:	e02b      	b.n	8019eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019e5c:	697b      	ldr	r3, [r7, #20]
 8019e5e:	889b      	ldrh	r3, [r3, #4]
 8019e60:	b29a      	uxth	r2, r3
 8019e62:	693b      	ldr	r3, [r7, #16]
 8019e64:	889b      	ldrh	r3, [r3, #4]
 8019e66:	b29b      	uxth	r3, r3
 8019e68:	429a      	cmp	r2, r3
 8019e6a:	d102      	bne.n	8019e72 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e70:	e076      	b.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019e72:	697b      	ldr	r3, [r7, #20]
 8019e74:	889b      	ldrh	r3, [r3, #4]
 8019e76:	b29a      	uxth	r2, r3
 8019e78:	693b      	ldr	r3, [r7, #16]
 8019e7a:	88db      	ldrh	r3, [r3, #6]
 8019e7c:	b29b      	uxth	r3, r3
 8019e7e:	429a      	cmp	r2, r3
 8019e80:	d202      	bcs.n	8019e88 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e86:	e06b      	b.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d009      	beq.n	8019ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e90:	88db      	ldrh	r3, [r3, #6]
 8019e92:	b29a      	uxth	r2, r3
 8019e94:	693b      	ldr	r3, [r7, #16]
 8019e96:	889b      	ldrh	r3, [r3, #4]
 8019e98:	b29b      	uxth	r3, r3
 8019e9a:	429a      	cmp	r2, r3
 8019e9c:	d001      	beq.n	8019ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019ea2:	693b      	ldr	r3, [r7, #16]
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    iprh_prev = iprh_tmp;
 8019ea8:	693b      	ldr	r3, [r7, #16]
 8019eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (q = ipr->p; q != NULL;) {
 8019eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d193      	bne.n	8019dda <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019eb2:	e000      	b.n	8019eb6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019eb4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d113      	bne.n	8019ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8019ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d00d      	beq.n	8019ede <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec4:	68ba      	ldr	r2, [r7, #8]
 8019ec6:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eca:	88db      	ldrh	r3, [r3, #6]
 8019ecc:	b29a      	uxth	r2, r3
 8019ece:	697b      	ldr	r3, [r7, #20]
 8019ed0:	889b      	ldrh	r3, [r3, #4]
 8019ed2:	b29b      	uxth	r3, r3
 8019ed4:	429a      	cmp	r2, r3
 8019ed6:	d005      	beq.n	8019ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8019ed8:	2300      	movs	r3, #0
 8019eda:	627b      	str	r3, [r7, #36]	; 0x24
 8019edc:	e002      	b.n	8019ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	68ba      	ldr	r2, [r7, #8]
 8019ee2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d105      	bne.n	8019ef6 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	7f9b      	ldrb	r3, [r3, #30]
 8019eee:	f003 0301 	and.w	r3, r3, #1
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d033      	beq.n	8019f5e <ip_reass_chain_frag_into_datagram_and_validate+0x232>
    /* and had no holes so far */
    if (valid) {
 8019ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d029      	beq.n	8019f50 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	685b      	ldr	r3, [r3, #4]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d006      	beq.n	8019f12 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	685b      	ldr	r3, [r3, #4]
 8019f08:	685b      	ldr	r3, [r3, #4]
 8019f0a:	889b      	ldrh	r3, [r3, #4]
 8019f0c:	b29b      	uxth	r3, r3
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d002      	beq.n	8019f18 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019f12:	2300      	movs	r3, #0
 8019f14:	627b      	str	r3, [r7, #36]	; 0x24
 8019f16:	e01b      	b.n	8019f50 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019f18:	697b      	ldr	r3, [r7, #20]
 8019f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        q = iprh->next_pbuf;
 8019f1c:	697b      	ldr	r3, [r7, #20]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	62bb      	str	r3, [r7, #40]	; 0x28
        while (q != NULL) {
 8019f22:	e012      	b.n	8019f4a <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper *)q->payload;
 8019f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f26:	685b      	ldr	r3, [r3, #4]
 8019f28:	617b      	str	r3, [r7, #20]
          if (iprh_prev->end != iprh->start) {
 8019f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f2c:	88db      	ldrh	r3, [r3, #6]
 8019f2e:	b29a      	uxth	r2, r3
 8019f30:	697b      	ldr	r3, [r7, #20]
 8019f32:	889b      	ldrh	r3, [r3, #4]
 8019f34:	b29b      	uxth	r3, r3
 8019f36:	429a      	cmp	r2, r3
 8019f38:	d002      	beq.n	8019f40 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019f3e:	e007      	b.n	8019f50 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8019f40:	697b      	ldr	r3, [r7, #20]
 8019f42:	62fb      	str	r3, [r7, #44]	; 0x2c
          q = iprh->next_pbuf;
 8019f44:	697b      	ldr	r3, [r7, #20]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	62bb      	str	r3, [r7, #40]	; 0x28
        while (q != NULL) {
 8019f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d1e9      	bne.n	8019f24 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	bf14      	ite	ne
 8019f56:	2301      	movne	r3, #1
 8019f58:	2300      	moveq	r3, #0
 8019f5a:	b2db      	uxtb	r3, r3
 8019f5c:	e000      	b.n	8019f60 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019f5e:	2300      	movs	r3, #0
}
 8019f60:	4618      	mov	r0, r3
 8019f62:	3730      	adds	r7, #48	; 0x30
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}

08019f68 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b08e      	sub	sp, #56	; 0x38
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8019f70:	4b94      	ldr	r3, [pc, #592]	; (801a1c4 <ip4_reass+0x25c>)
 8019f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019f74:	3301      	adds	r3, #1
 8019f76:	b29a      	uxth	r2, r3
 8019f78:	4b92      	ldr	r3, [pc, #584]	; (801a1c4 <ip4_reass+0x25c>)
 8019f7a:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	685b      	ldr	r3, [r3, #4]
 8019f80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f84:	781b      	ldrb	r3, [r3, #0]
 8019f86:	f003 030f 	and.w	r3, r3, #15
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	009b      	lsls	r3, r3, #2
 8019f8e:	b2db      	uxtb	r3, r3
 8019f90:	2b14      	cmp	r3, #20
 8019f92:	d008      	beq.n	8019fa6 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8019f94:	4b8b      	ldr	r3, [pc, #556]	; (801a1c4 <ip4_reass+0x25c>)
 8019f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8019f9a:	3301      	adds	r3, #1
 8019f9c:	b29a      	uxth	r2, r3
 8019f9e:	4b89      	ldr	r3, [pc, #548]	; (801a1c4 <ip4_reass+0x25c>)
 8019fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 8019fa4:	e161      	b.n	801a26a <ip4_reass+0x302>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fa8:	88db      	ldrh	r3, [r3, #6]
 8019faa:	b29b      	uxth	r3, r3
 8019fac:	4618      	mov	r0, r3
 8019fae:	f7f5 faa9 	bl	800f504 <lwip_htons>
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019fb8:	b29b      	uxth	r3, r3
 8019fba:	00db      	lsls	r3, r3, #3
 8019fbc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fc0:	885b      	ldrh	r3, [r3, #2]
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f7f5 fa9d 	bl	800f504 <lwip_htons>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fd0:	781b      	ldrb	r3, [r3, #0]
 8019fd2:	f003 030f 	and.w	r3, r3, #15
 8019fd6:	b2db      	uxtb	r3, r3
 8019fd8:	009b      	lsls	r3, r3, #2
 8019fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019fde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019fe6:	429a      	cmp	r2, r3
 8019fe8:	f0c0 813c 	bcc.w	801a264 <ip4_reass+0x2fc>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019fec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019ff0:	b29b      	uxth	r3, r3
 8019ff2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019ff4:	1ad3      	subs	r3, r2, r3
 8019ff6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019ff8:	6878      	ldr	r0, [r7, #4]
 8019ffa:	f7f6 face 	bl	801059a <pbuf_clen>
 8019ffe:	4603      	mov	r3, r0
 801a000:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a002:	4b71      	ldr	r3, [pc, #452]	; (801a1c8 <ip4_reass+0x260>)
 801a004:	881b      	ldrh	r3, [r3, #0]
 801a006:	461a      	mov	r2, r3
 801a008:	8c3b      	ldrh	r3, [r7, #32]
 801a00a:	4413      	add	r3, r2
 801a00c:	2b80      	cmp	r3, #128	; 0x80
 801a00e:	dd15      	ble.n	801a03c <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a010:	8c3b      	ldrh	r3, [r7, #32]
 801a012:	4619      	mov	r1, r3
 801a014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a016:	f7ff fdc7 	bl	8019ba8 <ip_reass_remove_oldest_datagram>
 801a01a:	4603      	mov	r3, r0
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d006      	beq.n	801a02e <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a020:	4b69      	ldr	r3, [pc, #420]	; (801a1c8 <ip4_reass+0x260>)
 801a022:	881b      	ldrh	r3, [r3, #0]
 801a024:	461a      	mov	r2, r3
 801a026:	8c3b      	ldrh	r3, [r7, #32]
 801a028:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a02a:	2b80      	cmp	r3, #128	; 0x80
 801a02c:	dd06      	ble.n	801a03c <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801a02e:	4b65      	ldr	r3, [pc, #404]	; (801a1c4 <ip4_reass+0x25c>)
 801a030:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801a032:	3301      	adds	r3, #1
 801a034:	b29a      	uxth	r2, r3
 801a036:	4b63      	ldr	r3, [pc, #396]	; (801a1c4 <ip4_reass+0x25c>)
 801a038:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801a03a:	e116      	b.n	801a26a <ip4_reass+0x302>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a03c:	4b63      	ldr	r3, [pc, #396]	; (801a1cc <ip4_reass+0x264>)
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	633b      	str	r3, [r7, #48]	; 0x30
 801a042:	e01e      	b.n	801a082 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a046:	695a      	ldr	r2, [r3, #20]
 801a048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a04a:	68db      	ldr	r3, [r3, #12]
 801a04c:	429a      	cmp	r2, r3
 801a04e:	d115      	bne.n	801a07c <ip4_reass+0x114>
 801a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a052:	699a      	ldr	r2, [r3, #24]
 801a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a056:	691b      	ldr	r3, [r3, #16]
 801a058:	429a      	cmp	r2, r3
 801a05a:	d10f      	bne.n	801a07c <ip4_reass+0x114>
 801a05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a05e:	899a      	ldrh	r2, [r3, #12]
 801a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a062:	889b      	ldrh	r3, [r3, #4]
 801a064:	b29b      	uxth	r3, r3
 801a066:	429a      	cmp	r2, r3
 801a068:	d108      	bne.n	801a07c <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801a06a:	4b56      	ldr	r3, [pc, #344]	; (801a1c4 <ip4_reass+0x25c>)
 801a06c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a070:	3301      	adds	r3, #1
 801a072:	b29a      	uxth	r2, r3
 801a074:	4b53      	ldr	r3, [pc, #332]	; (801a1c4 <ip4_reass+0x25c>)
 801a076:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 801a07a:	e005      	b.n	801a088 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	633b      	str	r3, [r7, #48]	; 0x30
 801a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a084:	2b00      	cmp	r3, #0
 801a086:	d1dd      	bne.n	801a044 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d109      	bne.n	801a0a2 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a08e:	8c3b      	ldrh	r3, [r7, #32]
 801a090:	4619      	mov	r1, r3
 801a092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a094:	f7ff fdea 	bl	8019c6c <ip_reass_enqueue_new_datagram>
 801a098:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d11c      	bne.n	801a0da <ip4_reass+0x172>
      goto nullreturn;
 801a0a0:	e0e3      	b.n	801a26a <ip4_reass+0x302>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0a4:	88db      	ldrh	r3, [r3, #6]
 801a0a6:	b29b      	uxth	r3, r3
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f7f5 fa2b 	bl	800f504 <lwip_htons>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d110      	bne.n	801a0da <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ba:	89db      	ldrh	r3, [r3, #14]
 801a0bc:	4618      	mov	r0, r3
 801a0be:	f7f5 fa21 	bl	800f504 <lwip_htons>
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d006      	beq.n	801a0da <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0ce:	3308      	adds	r3, #8
 801a0d0:	2214      	movs	r2, #20
 801a0d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	f000 fe5e 	bl	801ad96 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0dc:	88db      	ldrh	r3, [r3, #6]
 801a0de:	b29b      	uxth	r3, r3
 801a0e0:	f003 0320 	and.w	r3, r3, #32
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	bf0c      	ite	eq
 801a0e8:	2301      	moveq	r3, #1
 801a0ea:	2300      	movne	r3, #0
 801a0ec:	b2db      	uxtb	r3, r3
 801a0ee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a0f0:	69fb      	ldr	r3, [r7, #28]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d00e      	beq.n	801a114 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801a0f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a0f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a0fa:	4413      	add	r3, r2
 801a0fc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a0fe:	8b7a      	ldrh	r2, [r7, #26]
 801a100:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a102:	429a      	cmp	r2, r3
 801a104:	f0c0 80a2 	bcc.w	801a24c <ip4_reass+0x2e4>
 801a108:	8b7b      	ldrh	r3, [r7, #26]
 801a10a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a10e:	4293      	cmp	r3, r2
 801a110:	f200 809c 	bhi.w	801a24c <ip4_reass+0x2e4>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a114:	69fa      	ldr	r2, [r7, #28]
 801a116:	6879      	ldr	r1, [r7, #4]
 801a118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a11a:	f7ff fe07 	bl	8019d2c <ip_reass_chain_frag_into_datagram_and_validate>
 801a11e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a120:	697b      	ldr	r3, [r7, #20]
 801a122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a126:	f000 8093 	beq.w	801a250 <ip4_reass+0x2e8>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a12a:	4b27      	ldr	r3, [pc, #156]	; (801a1c8 <ip4_reass+0x260>)
 801a12c:	881a      	ldrh	r2, [r3, #0]
 801a12e:	8c3b      	ldrh	r3, [r7, #32]
 801a130:	4413      	add	r3, r2
 801a132:	b29a      	uxth	r2, r3
 801a134:	4b24      	ldr	r3, [pc, #144]	; (801a1c8 <ip4_reass+0x260>)
 801a136:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a138:	69fb      	ldr	r3, [r7, #28]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d00d      	beq.n	801a15a <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801a13e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a140:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a142:	4413      	add	r3, r2
 801a144:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a148:	8a7a      	ldrh	r2, [r7, #18]
 801a14a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a14e:	7f9b      	ldrb	r3, [r3, #30]
 801a150:	f043 0301 	orr.w	r3, r3, #1
 801a154:	b2da      	uxtb	r2, r3
 801a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a158:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a15a:	697b      	ldr	r3, [r7, #20]
 801a15c:	2b01      	cmp	r3, #1
 801a15e:	d173      	bne.n	801a248 <ip4_reass+0x2e0>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a162:	8b9b      	ldrh	r3, [r3, #28]
 801a164:	3314      	adds	r3, #20
 801a166:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a16a:	685b      	ldr	r3, [r3, #4]
 801a16c:	685b      	ldr	r3, [r3, #4]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a174:	685b      	ldr	r3, [r3, #4]
 801a176:	685b      	ldr	r3, [r3, #4]
 801a178:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a17c:	3308      	adds	r3, #8
 801a17e:	2214      	movs	r2, #20
 801a180:	4619      	mov	r1, r3
 801a182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a184:	f000 fe07 	bl	801ad96 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a188:	8a3b      	ldrh	r3, [r7, #16]
 801a18a:	4618      	mov	r0, r3
 801a18c:	f7f5 f9ba 	bl	800f504 <lwip_htons>
 801a190:	4603      	mov	r3, r0
 801a192:	461a      	mov	r2, r3
 801a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a196:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a19a:	2200      	movs	r2, #0
 801a19c:	719a      	strb	r2, [r3, #6]
 801a19e:	2200      	movs	r2, #0
 801a1a0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	729a      	strb	r2, [r3, #10]
 801a1a8:	2200      	movs	r2, #0
 801a1aa:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801a1ac:	2114      	movs	r1, #20
 801a1ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a1b0:	f7f5 fb9a 	bl	800f8e8 <inet_chksum>
 801a1b4:	4603      	mov	r3, r0
 801a1b6:	461a      	mov	r2, r3
 801a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1ba:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1be:	685b      	ldr	r3, [r3, #4]
 801a1c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a1c2:	e013      	b.n	801a1ec <ip4_reass+0x284>
 801a1c4:	20007794 	.word	0x20007794
 801a1c8:	200079cc 	.word	0x200079cc
 801a1cc:	200079c8 	.word	0x200079c8
      iprh = (struct ip_reass_helper *)r->payload;
 801a1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1d2:	685b      	ldr	r3, [r3, #4]
 801a1d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a1d6:	2114      	movs	r1, #20
 801a1d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a1da:	f7f6 f91e 	bl	801041a <pbuf_remove_header>
      pbuf_cat(p, r);
 801a1de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a1e0:	6878      	ldr	r0, [r7, #4]
 801a1e2:	f7f6 fa04 	bl	80105ee <pbuf_cat>
      r = iprh->next_pbuf;
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 801a1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d1ee      	bne.n	801a1d0 <ip4_reass+0x268>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a1f2:	4b25      	ldr	r3, [pc, #148]	; (801a288 <ip4_reass+0x320>)
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a1f8:	429a      	cmp	r2, r3
 801a1fa:	d102      	bne.n	801a202 <ip4_reass+0x29a>
      ipr_prev = NULL;
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	637b      	str	r3, [r7, #52]	; 0x34
 801a200:	e010      	b.n	801a224 <ip4_reass+0x2bc>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a202:	4b21      	ldr	r3, [pc, #132]	; (801a288 <ip4_reass+0x320>)
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	637b      	str	r3, [r7, #52]	; 0x34
 801a208:	e007      	b.n	801a21a <ip4_reass+0x2b2>
        if (ipr_prev->next == ipr) {
 801a20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a210:	429a      	cmp	r2, r3
 801a212:	d006      	beq.n	801a222 <ip4_reass+0x2ba>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	637b      	str	r3, [r7, #52]	; 0x34
 801a21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d1f4      	bne.n	801a20a <ip4_reass+0x2a2>
 801a220:	e000      	b.n	801a224 <ip4_reass+0x2bc>
          break;
 801a222:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a224:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a228:	f7ff fd62 	bl	8019cf0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a22c:	6878      	ldr	r0, [r7, #4]
 801a22e:	f7f6 f9b4 	bl	801059a <pbuf_clen>
 801a232:	4603      	mov	r3, r0
 801a234:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a236:	4b15      	ldr	r3, [pc, #84]	; (801a28c <ip4_reass+0x324>)
 801a238:	881a      	ldrh	r2, [r3, #0]
 801a23a:	8c3b      	ldrh	r3, [r7, #32]
 801a23c:	1ad3      	subs	r3, r2, r3
 801a23e:	b29a      	uxth	r2, r3
 801a240:	4b12      	ldr	r3, [pc, #72]	; (801a28c <ip4_reass+0x324>)
 801a242:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	e01a      	b.n	801a27e <ip4_reass+0x316>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a248:	2300      	movs	r3, #0
 801a24a:	e018      	b.n	801a27e <ip4_reass+0x316>
      goto nullreturn_ipr;
 801a24c:	bf00      	nop
 801a24e:	e000      	b.n	801a252 <ip4_reass+0x2ea>
    goto nullreturn_ipr;
 801a250:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
  if (ipr->p == NULL) {
 801a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a254:	685b      	ldr	r3, [r3, #4]
 801a256:	2b00      	cmp	r3, #0
 801a258:	d106      	bne.n	801a268 <ip4_reass+0x300>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
    ip_reass_dequeue_datagram(ipr, NULL);
 801a25a:	2100      	movs	r1, #0
 801a25c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a25e:	f7ff fd47 	bl	8019cf0 <ip_reass_dequeue_datagram>
 801a262:	e002      	b.n	801a26a <ip4_reass+0x302>
    goto nullreturn;
 801a264:	bf00      	nop
 801a266:	e000      	b.n	801a26a <ip4_reass+0x302>
  }

nullreturn:
 801a268:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801a26a:	4b09      	ldr	r3, [pc, #36]	; (801a290 <ip4_reass+0x328>)
 801a26c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801a26e:	3301      	adds	r3, #1
 801a270:	b29a      	uxth	r2, r3
 801a272:	4b07      	ldr	r3, [pc, #28]	; (801a290 <ip4_reass+0x328>)
 801a274:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 801a276:	6878      	ldr	r0, [r7, #4]
 801a278:	f7f6 f93c 	bl	80104f4 <pbuf_free>
  return NULL;
 801a27c:	2300      	movs	r3, #0
}
 801a27e:	4618      	mov	r0, r3
 801a280:	3738      	adds	r7, #56	; 0x38
 801a282:	46bd      	mov	sp, r7
 801a284:	bd80      	pop	{r7, pc}
 801a286:	bf00      	nop
 801a288:	200079c8 	.word	0x200079c8
 801a28c:	200079cc 	.word	0x200079cc
 801a290:	20007794 	.word	0x20007794

0801a294 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a298:	2005      	movs	r0, #5
 801a29a:	f7f5 fc13 	bl	800fac4 <memp_malloc>
 801a29e:	4603      	mov	r3, r0
}
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	bd80      	pop	{r7, pc}

0801a2a4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	b082      	sub	sp, #8
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 801a2ac:	6879      	ldr	r1, [r7, #4]
 801a2ae:	2005      	movs	r0, #5
 801a2b0:	f7f5 fc44 	bl	800fb3c <memp_free>
}
 801a2b4:	bf00      	nop
 801a2b6:	3708      	adds	r7, #8
 801a2b8:	46bd      	mov	sp, r7
 801a2ba:	bd80      	pop	{r7, pc}

0801a2bc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b084      	sub	sp, #16
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	695b      	ldr	r3, [r3, #20]
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d004      	beq.n	801a2da <ipfrag_free_pbuf_custom+0x1e>
    pbuf_free(pcr->original);
 801a2d0:	68fb      	ldr	r3, [r7, #12]
 801a2d2:	695b      	ldr	r3, [r3, #20]
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7f6 f90d 	bl	80104f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a2da:	68f8      	ldr	r0, [r7, #12]
 801a2dc:	f7ff ffe2 	bl	801a2a4 <ip_frag_free_pbuf_custom_ref>
}
 801a2e0:	bf00      	nop
 801a2e2:	3710      	adds	r7, #16
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}

0801a2e8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b094      	sub	sp, #80	; 0x50
 801a2ec:	af02      	add	r7, sp, #8
 801a2ee:	60f8      	str	r0, [r7, #12]
 801a2f0:	60b9      	str	r1, [r7, #8]
 801a2f2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a2f4:	2300      	movs	r3, #0
 801a2f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a2fa:	68bb      	ldr	r3, [r7, #8]
 801a2fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a2fe:	3b14      	subs	r3, #20
 801a300:	2b00      	cmp	r3, #0
 801a302:	da00      	bge.n	801a306 <ip4_frag+0x1e>
 801a304:	3307      	adds	r3, #7
 801a306:	10db      	asrs	r3, r3, #3
 801a308:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a30a:	2314      	movs	r3, #20
 801a30c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	685b      	ldr	r3, [r3, #4]
 801a312:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a316:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a31a:	781b      	ldrb	r3, [r3, #0]
 801a31c:	f003 030f 	and.w	r3, r3, #15
 801a320:	b2db      	uxtb	r3, r3
 801a322:	009b      	lsls	r3, r3, #2
 801a324:	b2db      	uxtb	r3, r3
 801a326:	2b14      	cmp	r3, #20
 801a328:	d002      	beq.n	801a330 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a32a:	f06f 0305 	mvn.w	r3, #5
 801a32e:	e100      	b.n	801a532 <ip4_frag+0x24a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	895b      	ldrh	r3, [r3, #10]
 801a334:	2b13      	cmp	r3, #19
 801a336:	d802      	bhi.n	801a33e <ip4_frag+0x56>
 801a338:	f06f 0305 	mvn.w	r3, #5
 801a33c:	e0f9      	b.n	801a532 <ip4_frag+0x24a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a340:	88db      	ldrh	r3, [r3, #6]
 801a342:	b29b      	uxth	r3, r3
 801a344:	4618      	mov	r0, r3
 801a346:	f7f5 f8dd 	bl	800f504 <lwip_htons>
 801a34a:	4603      	mov	r3, r0
 801a34c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a34e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a354:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a358:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a35a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a35e:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	891b      	ldrh	r3, [r3, #8]
 801a364:	3b14      	subs	r3, #20
 801a366:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a36a:	e0d8      	b.n	801a51e <ip4_frag+0x236>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a36c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a36e:	00db      	lsls	r3, r3, #3
 801a370:	b29b      	uxth	r3, r3
 801a372:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a376:	4293      	cmp	r3, r2
 801a378:	bf28      	it	cs
 801a37a:	4613      	movcs	r3, r2
 801a37c:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a37e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a382:	2114      	movs	r1, #20
 801a384:	2010      	movs	r0, #16
 801a386:	f7f5 fe73 	bl	8010070 <pbuf_alloc>
 801a38a:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a38e:	2b00      	cmp	r3, #0
 801a390:	f000 80cc 	beq.w	801a52c <ip4_frag+0x244>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a396:	685b      	ldr	r3, [r3, #4]
 801a398:	2214      	movs	r2, #20
 801a39a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a39c:	4618      	mov	r0, r3
 801a39e:	f000 fcfa 	bl	801ad96 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a4:	685b      	ldr	r3, [r3, #4]
 801a3a6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a3a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a3aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a3ae:	e058      	b.n	801a462 <ip4_frag+0x17a>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	895a      	ldrh	r2, [r3, #10]
 801a3b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a3b6:	1ad3      	subs	r3, r2, r3
 801a3b8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a3ba:	8bfa      	ldrh	r2, [r7, #30]
 801a3bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a3c0:	4293      	cmp	r3, r2
 801a3c2:	bf28      	it	cs
 801a3c4:	4613      	movcs	r3, r2
 801a3c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a3ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d105      	bne.n	801a3de <ip4_frag+0xf6>
        poff = 0;
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	60fb      	str	r3, [r7, #12]
        continue;
 801a3dc:	e041      	b.n	801a462 <ip4_frag+0x17a>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a3de:	f7ff ff59 	bl	801a294 <ip_frag_alloc_pbuf_custom_ref>
 801a3e2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a3e4:	69bb      	ldr	r3, [r7, #24]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d103      	bne.n	801a3f2 <ip4_frag+0x10a>
        pbuf_free(rambuf);
 801a3ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a3ec:	f7f6 f882 	bl	80104f4 <pbuf_free>
        goto memerr;
 801a3f0:	e09d      	b.n	801a52e <ip4_frag+0x246>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a3f2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a3f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a3fa:	4413      	add	r3, r2
 801a3fc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a400:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a404:	9201      	str	r2, [sp, #4]
 801a406:	9300      	str	r3, [sp, #0]
 801a408:	4603      	mov	r3, r0
 801a40a:	2241      	movs	r2, #65	; 0x41
 801a40c:	2000      	movs	r0, #0
 801a40e:	f7f5 ff0a 	bl	8010226 <pbuf_alloced_custom>
 801a412:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a414:	697b      	ldr	r3, [r7, #20]
 801a416:	2b00      	cmp	r3, #0
 801a418:	d106      	bne.n	801a428 <ip4_frag+0x140>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a41a:	69b8      	ldr	r0, [r7, #24]
 801a41c:	f7ff ff42 	bl	801a2a4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a422:	f7f6 f867 	bl	80104f4 <pbuf_free>
        goto memerr;
 801a426:	e082      	b.n	801a52e <ip4_frag+0x246>
      }
      pbuf_ref(p);
 801a428:	68f8      	ldr	r0, [r7, #12]
 801a42a:	f7f6 f8cd 	bl	80105c8 <pbuf_ref>
      pcr->original = p;
 801a42e:	69bb      	ldr	r3, [r7, #24]
 801a430:	68fa      	ldr	r2, [r7, #12]
 801a432:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a434:	69bb      	ldr	r3, [r7, #24]
 801a436:	4a41      	ldr	r2, [pc, #260]	; (801a53c <ip4_frag+0x254>)
 801a438:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a43a:	6979      	ldr	r1, [r7, #20]
 801a43c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a43e:	f7f6 f8d6 	bl	80105ee <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a442:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a446:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a44a:	1ad3      	subs	r3, r2, r3
 801a44c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a450:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a454:	2b00      	cmp	r3, #0
 801a456:	d004      	beq.n	801a462 <ip4_frag+0x17a>
        poff = 0;
 801a458:	2300      	movs	r3, #0
 801a45a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a462:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a466:	2b00      	cmp	r3, #0
 801a468:	d1a2      	bne.n	801a3b0 <ip4_frag+0xc8>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a46a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a46c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a470:	4413      	add	r3, r2
 801a472:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a474:	68bb      	ldr	r3, [r7, #8]
 801a476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a478:	f1a3 0213 	sub.w	r2, r3, #19
 801a47c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a480:	429a      	cmp	r2, r3
 801a482:	bfcc      	ite	gt
 801a484:	2301      	movgt	r3, #1
 801a486:	2300      	movle	r3, #0
 801a488:	b2db      	uxtb	r3, r3
 801a48a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a48c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a494:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a496:	6a3b      	ldr	r3, [r7, #32]
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d002      	beq.n	801a4a2 <ip4_frag+0x1ba>
 801a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d003      	beq.n	801a4aa <ip4_frag+0x1c2>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a4a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a4a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a4a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a4aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f7f5 f829 	bl	800f504 <lwip_htons>
 801a4b2:	4603      	mov	r3, r0
 801a4b4:	461a      	mov	r2, r3
 801a4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4b8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a4ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a4bc:	3314      	adds	r3, #20
 801a4be:	b29b      	uxth	r3, r3
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	f7f5 f81f 	bl	800f504 <lwip_htons>
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	461a      	mov	r2, r3
 801a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4cc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	729a      	strb	r2, [r3, #10]
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801a4d8:	2114      	movs	r1, #20
 801a4da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a4dc:	f7f5 fa04 	bl	800f8e8 <inet_chksum>
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	461a      	mov	r2, r3
 801a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4e6:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a4e8:	68bb      	ldr	r3, [r7, #8]
 801a4ea:	695b      	ldr	r3, [r3, #20]
 801a4ec:	687a      	ldr	r2, [r7, #4]
 801a4ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a4f0:	68b8      	ldr	r0, [r7, #8]
 801a4f2:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801a4f4:	4b12      	ldr	r3, [pc, #72]	; (801a540 <ip4_frag+0x258>)
 801a4f6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a4f8:	3301      	adds	r3, #1
 801a4fa:	b29a      	uxth	r2, r3
 801a4fc:	4b10      	ldr	r3, [pc, #64]	; (801a540 <ip4_frag+0x258>)
 801a4fe:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a502:	f7f5 fff7 	bl	80104f4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a506:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a50a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a50c:	1ad3      	subs	r3, r2, r3
 801a50e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a512:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a516:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a518:	4413      	add	r3, r2
 801a51a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a51e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a522:	2b00      	cmp	r3, #0
 801a524:	f47f af22 	bne.w	801a36c <ip4_frag+0x84>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a528:	2300      	movs	r3, #0
 801a52a:	e002      	b.n	801a532 <ip4_frag+0x24a>
      goto memerr;
 801a52c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a52e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a532:	4618      	mov	r0, r3
 801a534:	3748      	adds	r7, #72	; 0x48
 801a536:	46bd      	mov	sp, r7
 801a538:	bd80      	pop	{r7, pc}
 801a53a:	bf00      	nop
 801a53c:	0801a2bd 	.word	0x0801a2bd
 801a540:	20007794 	.word	0x20007794

0801a544 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a544:	b580      	push	{r7, lr}
 801a546:	b086      	sub	sp, #24
 801a548:	af00      	add	r7, sp, #0
 801a54a:	6078      	str	r0, [r7, #4]
 801a54c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a54e:	230e      	movs	r3, #14
 801a550:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	895b      	ldrh	r3, [r3, #10]
 801a556:	2b0e      	cmp	r3, #14
 801a558:	d80c      	bhi.n	801a574 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801a55a:	4b51      	ldr	r3, [pc, #324]	; (801a6a0 <ethernet_input+0x15c>)
 801a55c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a55e:	3301      	adds	r3, #1
 801a560:	b29a      	uxth	r2, r3
 801a562:	4b4f      	ldr	r3, [pc, #316]	; (801a6a0 <ethernet_input+0x15c>)
 801a564:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801a566:	4b4e      	ldr	r3, [pc, #312]	; (801a6a0 <ethernet_input+0x15c>)
 801a568:	8bdb      	ldrh	r3, [r3, #30]
 801a56a:	3301      	adds	r3, #1
 801a56c:	b29a      	uxth	r2, r3
 801a56e:	4b4c      	ldr	r3, [pc, #304]	; (801a6a0 <ethernet_input+0x15c>)
 801a570:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801a572:	e08d      	b.n	801a690 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	7bdb      	ldrb	r3, [r3, #15]
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d106      	bne.n	801a58a <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801a57c:	683b      	ldr	r3, [r7, #0]
 801a57e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801a582:	3301      	adds	r3, #1
 801a584:	b2da      	uxtb	r2, r3
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	685b      	ldr	r3, [r3, #4]
 801a58e:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a590:	693b      	ldr	r3, [r7, #16]
 801a592:	7b1a      	ldrb	r2, [r3, #12]
 801a594:	7b5b      	ldrb	r3, [r3, #13]
 801a596:	021b      	lsls	r3, r3, #8
 801a598:	4313      	orrs	r3, r2
 801a59a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a59c:	693b      	ldr	r3, [r7, #16]
 801a59e:	781b      	ldrb	r3, [r3, #0]
 801a5a0:	f003 0301 	and.w	r3, r3, #1
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d023      	beq.n	801a5f0 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a5a8:	693b      	ldr	r3, [r7, #16]
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	2b01      	cmp	r3, #1
 801a5ae:	d10f      	bne.n	801a5d0 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a5b0:	693b      	ldr	r3, [r7, #16]
 801a5b2:	785b      	ldrb	r3, [r3, #1]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d11b      	bne.n	801a5f0 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a5b8:	693b      	ldr	r3, [r7, #16]
 801a5ba:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a5bc:	2b5e      	cmp	r3, #94	; 0x5e
 801a5be:	d117      	bne.n	801a5f0 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	7b5b      	ldrb	r3, [r3, #13]
 801a5c4:	f043 0310 	orr.w	r3, r3, #16
 801a5c8:	b2da      	uxtb	r2, r3
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	735a      	strb	r2, [r3, #13]
 801a5ce:	e00f      	b.n	801a5f0 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a5d0:	693b      	ldr	r3, [r7, #16]
 801a5d2:	2206      	movs	r2, #6
 801a5d4:	4933      	ldr	r1, [pc, #204]	; (801a6a4 <ethernet_input+0x160>)
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	f000 fb09 	bl	801abee <memcmp>
 801a5dc:	4603      	mov	r3, r0
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d106      	bne.n	801a5f0 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	7b5b      	ldrb	r3, [r3, #13]
 801a5e6:	f043 0308 	orr.w	r3, r3, #8
 801a5ea:	b2da      	uxtb	r2, r3
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a5f0:	89fb      	ldrh	r3, [r7, #14]
 801a5f2:	2b08      	cmp	r3, #8
 801a5f4:	d003      	beq.n	801a5fe <ethernet_input+0xba>
 801a5f6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a5fa:	d014      	beq.n	801a626 <ethernet_input+0xe2>
 801a5fc:	e034      	b.n	801a668 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a5fe:	683b      	ldr	r3, [r7, #0]
 801a600:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a604:	f003 0308 	and.w	r3, r3, #8
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d03c      	beq.n	801a686 <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a60c:	8afb      	ldrh	r3, [r7, #22]
 801a60e:	4619      	mov	r1, r3
 801a610:	6878      	ldr	r0, [r7, #4]
 801a612:	f7f5 ff02 	bl	801041a <pbuf_remove_header>
 801a616:	4603      	mov	r3, r0
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d136      	bne.n	801a68a <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801a61c:	6839      	ldr	r1, [r7, #0]
 801a61e:	6878      	ldr	r0, [r7, #4]
 801a620:	f7fe fefa 	bl	8019418 <ip4_input>
      }
      break;
 801a624:	e02d      	b.n	801a682 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a626:	683b      	ldr	r3, [r7, #0]
 801a628:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a62c:	f003 0308 	and.w	r3, r3, #8
 801a630:	2b00      	cmp	r3, #0
 801a632:	d02c      	beq.n	801a68e <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a634:	8afb      	ldrh	r3, [r7, #22]
 801a636:	4619      	mov	r1, r3
 801a638:	6878      	ldr	r0, [r7, #4]
 801a63a:	f7f5 feee 	bl	801041a <pbuf_remove_header>
 801a63e:	4603      	mov	r3, r0
 801a640:	2b00      	cmp	r3, #0
 801a642:	d00c      	beq.n	801a65e <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801a644:	4b16      	ldr	r3, [pc, #88]	; (801a6a0 <ethernet_input+0x15c>)
 801a646:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a648:	3301      	adds	r3, #1
 801a64a:	b29a      	uxth	r2, r3
 801a64c:	4b14      	ldr	r3, [pc, #80]	; (801a6a0 <ethernet_input+0x15c>)
 801a64e:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801a650:	4b13      	ldr	r3, [pc, #76]	; (801a6a0 <ethernet_input+0x15c>)
 801a652:	8bdb      	ldrh	r3, [r3, #30]
 801a654:	3301      	adds	r3, #1
 801a656:	b29a      	uxth	r2, r3
 801a658:	4b11      	ldr	r3, [pc, #68]	; (801a6a0 <ethernet_input+0x15c>)
 801a65a:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801a65c:	e018      	b.n	801a690 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801a65e:	6839      	ldr	r1, [r7, #0]
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f7fe f861 	bl	8018728 <etharp_input>
      }
      break;
 801a666:	e00c      	b.n	801a682 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801a668:	4b0d      	ldr	r3, [pc, #52]	; (801a6a0 <ethernet_input+0x15c>)
 801a66a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a66c:	3301      	adds	r3, #1
 801a66e:	b29a      	uxth	r2, r3
 801a670:	4b0b      	ldr	r3, [pc, #44]	; (801a6a0 <ethernet_input+0x15c>)
 801a672:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801a674:	4b0a      	ldr	r3, [pc, #40]	; (801a6a0 <ethernet_input+0x15c>)
 801a676:	8bdb      	ldrh	r3, [r3, #30]
 801a678:	3301      	adds	r3, #1
 801a67a:	b29a      	uxth	r2, r3
 801a67c:	4b08      	ldr	r3, [pc, #32]	; (801a6a0 <ethernet_input+0x15c>)
 801a67e:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a680:	e006      	b.n	801a690 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a682:	2300      	movs	r3, #0
 801a684:	e008      	b.n	801a698 <ethernet_input+0x154>
        goto free_and_return;
 801a686:	bf00      	nop
 801a688:	e002      	b.n	801a690 <ethernet_input+0x14c>
        goto free_and_return;
 801a68a:	bf00      	nop
 801a68c:	e000      	b.n	801a690 <ethernet_input+0x14c>
        goto free_and_return;
 801a68e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a690:	6878      	ldr	r0, [r7, #4]
 801a692:	f7f5 ff2f 	bl	80104f4 <pbuf_free>
  return ERR_OK;
 801a696:	2300      	movs	r3, #0
}
 801a698:	4618      	mov	r0, r3
 801a69a:	3718      	adds	r7, #24
 801a69c:	46bd      	mov	sp, r7
 801a69e:	bd80      	pop	{r7, pc}
 801a6a0:	20007794 	.word	0x20007794
 801a6a4:	0801d250 	.word	0x0801d250

0801a6a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b086      	sub	sp, #24
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	60f8      	str	r0, [r7, #12]
 801a6b0:	60b9      	str	r1, [r7, #8]
 801a6b2:	607a      	str	r2, [r7, #4]
 801a6b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a6b6:	8c3b      	ldrh	r3, [r7, #32]
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	f7f4 ff23 	bl	800f504 <lwip_htons>
 801a6be:	4603      	mov	r3, r0
 801a6c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a6c2:	210e      	movs	r1, #14
 801a6c4:	68b8      	ldr	r0, [r7, #8]
 801a6c6:	f7f5 fe99 	bl	80103fc <pbuf_add_header>
 801a6ca:	4603      	mov	r3, r0
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d119      	bne.n	801a704 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a6d0:	68bb      	ldr	r3, [r7, #8]
 801a6d2:	685b      	ldr	r3, [r3, #4]
 801a6d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a6d6:	693b      	ldr	r3, [r7, #16]
 801a6d8:	8afa      	ldrh	r2, [r7, #22]
 801a6da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a6dc:	693b      	ldr	r3, [r7, #16]
 801a6de:	2206      	movs	r2, #6
 801a6e0:	6839      	ldr	r1, [r7, #0]
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	f000 fb57 	bl	801ad96 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a6e8:	693b      	ldr	r3, [r7, #16]
 801a6ea:	3306      	adds	r3, #6
 801a6ec:	2206      	movs	r2, #6
 801a6ee:	6879      	ldr	r1, [r7, #4]
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	f000 fb50 	bl	801ad96 <memcpy>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	699b      	ldr	r3, [r3, #24]
 801a6fa:	68b9      	ldr	r1, [r7, #8]
 801a6fc:	68f8      	ldr	r0, [r7, #12]
 801a6fe:	4798      	blx	r3
 801a700:	4603      	mov	r3, r0
 801a702:	e008      	b.n	801a716 <ethernet_output+0x6e>
      goto pbuf_header_failed;
 801a704:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801a706:	4b06      	ldr	r3, [pc, #24]	; (801a720 <ethernet_output+0x78>)
 801a708:	895b      	ldrh	r3, [r3, #10]
 801a70a:	3301      	adds	r3, #1
 801a70c:	b29a      	uxth	r2, r3
 801a70e:	4b04      	ldr	r3, [pc, #16]	; (801a720 <ethernet_output+0x78>)
 801a710:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801a712:	f06f 0301 	mvn.w	r3, #1
}
 801a716:	4618      	mov	r0, r3
 801a718:	3718      	adds	r7, #24
 801a71a:	46bd      	mov	sp, r7
 801a71c:	bd80      	pop	{r7, pc}
 801a71e:	bf00      	nop
 801a720:	20007794 	.word	0x20007794

0801a724 <exit>:
 801a724:	b508      	push	{r3, lr}
 801a726:	4b06      	ldr	r3, [pc, #24]	; (801a740 <exit+0x1c>)
 801a728:	4604      	mov	r4, r0
 801a72a:	b113      	cbz	r3, 801a732 <exit+0xe>
 801a72c:	2100      	movs	r1, #0
 801a72e:	f3af 8000 	nop.w
 801a732:	4b04      	ldr	r3, [pc, #16]	; (801a744 <exit+0x20>)
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	b103      	cbz	r3, 801a73a <exit+0x16>
 801a738:	4798      	blx	r3
 801a73a:	4620      	mov	r0, r4
 801a73c:	f7ed f8a6 	bl	800788c <_exit>
 801a740:	00000000 	.word	0x00000000
 801a744:	20007b10 	.word	0x20007b10

0801a748 <malloc>:
 801a748:	4b02      	ldr	r3, [pc, #8]	; (801a754 <malloc+0xc>)
 801a74a:	4601      	mov	r1, r0
 801a74c:	6818      	ldr	r0, [r3, #0]
 801a74e:	f000 b82b 	b.w	801a7a8 <_malloc_r>
 801a752:	bf00      	nop
 801a754:	200001a0 	.word	0x200001a0

0801a758 <free>:
 801a758:	4b02      	ldr	r3, [pc, #8]	; (801a764 <free+0xc>)
 801a75a:	4601      	mov	r1, r0
 801a75c:	6818      	ldr	r0, [r3, #0]
 801a75e:	f000 bb47 	b.w	801adf0 <_free_r>
 801a762:	bf00      	nop
 801a764:	200001a0 	.word	0x200001a0

0801a768 <sbrk_aligned>:
 801a768:	b570      	push	{r4, r5, r6, lr}
 801a76a:	4e0e      	ldr	r6, [pc, #56]	; (801a7a4 <sbrk_aligned+0x3c>)
 801a76c:	460c      	mov	r4, r1
 801a76e:	6831      	ldr	r1, [r6, #0]
 801a770:	4605      	mov	r5, r0
 801a772:	b911      	cbnz	r1, 801a77a <sbrk_aligned+0x12>
 801a774:	f000 fac0 	bl	801acf8 <_sbrk_r>
 801a778:	6030      	str	r0, [r6, #0]
 801a77a:	4621      	mov	r1, r4
 801a77c:	4628      	mov	r0, r5
 801a77e:	f000 fabb 	bl	801acf8 <_sbrk_r>
 801a782:	1c43      	adds	r3, r0, #1
 801a784:	d00a      	beq.n	801a79c <sbrk_aligned+0x34>
 801a786:	1cc4      	adds	r4, r0, #3
 801a788:	f024 0403 	bic.w	r4, r4, #3
 801a78c:	42a0      	cmp	r0, r4
 801a78e:	d007      	beq.n	801a7a0 <sbrk_aligned+0x38>
 801a790:	1a21      	subs	r1, r4, r0
 801a792:	4628      	mov	r0, r5
 801a794:	f000 fab0 	bl	801acf8 <_sbrk_r>
 801a798:	3001      	adds	r0, #1
 801a79a:	d101      	bne.n	801a7a0 <sbrk_aligned+0x38>
 801a79c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a7a0:	4620      	mov	r0, r4
 801a7a2:	bd70      	pop	{r4, r5, r6, pc}
 801a7a4:	200079d4 	.word	0x200079d4

0801a7a8 <_malloc_r>:
 801a7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a7ac:	1ccd      	adds	r5, r1, #3
 801a7ae:	f025 0503 	bic.w	r5, r5, #3
 801a7b2:	3508      	adds	r5, #8
 801a7b4:	2d0c      	cmp	r5, #12
 801a7b6:	bf38      	it	cc
 801a7b8:	250c      	movcc	r5, #12
 801a7ba:	2d00      	cmp	r5, #0
 801a7bc:	4607      	mov	r7, r0
 801a7be:	db01      	blt.n	801a7c4 <_malloc_r+0x1c>
 801a7c0:	42a9      	cmp	r1, r5
 801a7c2:	d905      	bls.n	801a7d0 <_malloc_r+0x28>
 801a7c4:	230c      	movs	r3, #12
 801a7c6:	603b      	str	r3, [r7, #0]
 801a7c8:	2600      	movs	r6, #0
 801a7ca:	4630      	mov	r0, r6
 801a7cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a7d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a8a4 <_malloc_r+0xfc>
 801a7d4:	f000 f868 	bl	801a8a8 <__malloc_lock>
 801a7d8:	f8d8 3000 	ldr.w	r3, [r8]
 801a7dc:	461c      	mov	r4, r3
 801a7de:	bb5c      	cbnz	r4, 801a838 <_malloc_r+0x90>
 801a7e0:	4629      	mov	r1, r5
 801a7e2:	4638      	mov	r0, r7
 801a7e4:	f7ff ffc0 	bl	801a768 <sbrk_aligned>
 801a7e8:	1c43      	adds	r3, r0, #1
 801a7ea:	4604      	mov	r4, r0
 801a7ec:	d155      	bne.n	801a89a <_malloc_r+0xf2>
 801a7ee:	f8d8 4000 	ldr.w	r4, [r8]
 801a7f2:	4626      	mov	r6, r4
 801a7f4:	2e00      	cmp	r6, #0
 801a7f6:	d145      	bne.n	801a884 <_malloc_r+0xdc>
 801a7f8:	2c00      	cmp	r4, #0
 801a7fa:	d048      	beq.n	801a88e <_malloc_r+0xe6>
 801a7fc:	6823      	ldr	r3, [r4, #0]
 801a7fe:	4631      	mov	r1, r6
 801a800:	4638      	mov	r0, r7
 801a802:	eb04 0903 	add.w	r9, r4, r3
 801a806:	f000 fa77 	bl	801acf8 <_sbrk_r>
 801a80a:	4581      	cmp	r9, r0
 801a80c:	d13f      	bne.n	801a88e <_malloc_r+0xe6>
 801a80e:	6821      	ldr	r1, [r4, #0]
 801a810:	1a6d      	subs	r5, r5, r1
 801a812:	4629      	mov	r1, r5
 801a814:	4638      	mov	r0, r7
 801a816:	f7ff ffa7 	bl	801a768 <sbrk_aligned>
 801a81a:	3001      	adds	r0, #1
 801a81c:	d037      	beq.n	801a88e <_malloc_r+0xe6>
 801a81e:	6823      	ldr	r3, [r4, #0]
 801a820:	442b      	add	r3, r5
 801a822:	6023      	str	r3, [r4, #0]
 801a824:	f8d8 3000 	ldr.w	r3, [r8]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d038      	beq.n	801a89e <_malloc_r+0xf6>
 801a82c:	685a      	ldr	r2, [r3, #4]
 801a82e:	42a2      	cmp	r2, r4
 801a830:	d12b      	bne.n	801a88a <_malloc_r+0xe2>
 801a832:	2200      	movs	r2, #0
 801a834:	605a      	str	r2, [r3, #4]
 801a836:	e00f      	b.n	801a858 <_malloc_r+0xb0>
 801a838:	6822      	ldr	r2, [r4, #0]
 801a83a:	1b52      	subs	r2, r2, r5
 801a83c:	d41f      	bmi.n	801a87e <_malloc_r+0xd6>
 801a83e:	2a0b      	cmp	r2, #11
 801a840:	d917      	bls.n	801a872 <_malloc_r+0xca>
 801a842:	1961      	adds	r1, r4, r5
 801a844:	42a3      	cmp	r3, r4
 801a846:	6025      	str	r5, [r4, #0]
 801a848:	bf18      	it	ne
 801a84a:	6059      	strne	r1, [r3, #4]
 801a84c:	6863      	ldr	r3, [r4, #4]
 801a84e:	bf08      	it	eq
 801a850:	f8c8 1000 	streq.w	r1, [r8]
 801a854:	5162      	str	r2, [r4, r5]
 801a856:	604b      	str	r3, [r1, #4]
 801a858:	4638      	mov	r0, r7
 801a85a:	f104 060b 	add.w	r6, r4, #11
 801a85e:	f000 f829 	bl	801a8b4 <__malloc_unlock>
 801a862:	f026 0607 	bic.w	r6, r6, #7
 801a866:	1d23      	adds	r3, r4, #4
 801a868:	1af2      	subs	r2, r6, r3
 801a86a:	d0ae      	beq.n	801a7ca <_malloc_r+0x22>
 801a86c:	1b9b      	subs	r3, r3, r6
 801a86e:	50a3      	str	r3, [r4, r2]
 801a870:	e7ab      	b.n	801a7ca <_malloc_r+0x22>
 801a872:	42a3      	cmp	r3, r4
 801a874:	6862      	ldr	r2, [r4, #4]
 801a876:	d1dd      	bne.n	801a834 <_malloc_r+0x8c>
 801a878:	f8c8 2000 	str.w	r2, [r8]
 801a87c:	e7ec      	b.n	801a858 <_malloc_r+0xb0>
 801a87e:	4623      	mov	r3, r4
 801a880:	6864      	ldr	r4, [r4, #4]
 801a882:	e7ac      	b.n	801a7de <_malloc_r+0x36>
 801a884:	4634      	mov	r4, r6
 801a886:	6876      	ldr	r6, [r6, #4]
 801a888:	e7b4      	b.n	801a7f4 <_malloc_r+0x4c>
 801a88a:	4613      	mov	r3, r2
 801a88c:	e7cc      	b.n	801a828 <_malloc_r+0x80>
 801a88e:	230c      	movs	r3, #12
 801a890:	603b      	str	r3, [r7, #0]
 801a892:	4638      	mov	r0, r7
 801a894:	f000 f80e 	bl	801a8b4 <__malloc_unlock>
 801a898:	e797      	b.n	801a7ca <_malloc_r+0x22>
 801a89a:	6025      	str	r5, [r4, #0]
 801a89c:	e7dc      	b.n	801a858 <_malloc_r+0xb0>
 801a89e:	605b      	str	r3, [r3, #4]
 801a8a0:	deff      	udf	#255	; 0xff
 801a8a2:	bf00      	nop
 801a8a4:	200079d0 	.word	0x200079d0

0801a8a8 <__malloc_lock>:
 801a8a8:	4801      	ldr	r0, [pc, #4]	; (801a8b0 <__malloc_lock+0x8>)
 801a8aa:	f000 ba72 	b.w	801ad92 <__retarget_lock_acquire_recursive>
 801a8ae:	bf00      	nop
 801a8b0:	20007b18 	.word	0x20007b18

0801a8b4 <__malloc_unlock>:
 801a8b4:	4801      	ldr	r0, [pc, #4]	; (801a8bc <__malloc_unlock+0x8>)
 801a8b6:	f000 ba6d 	b.w	801ad94 <__retarget_lock_release_recursive>
 801a8ba:	bf00      	nop
 801a8bc:	20007b18 	.word	0x20007b18

0801a8c0 <rand>:
 801a8c0:	4b16      	ldr	r3, [pc, #88]	; (801a91c <rand+0x5c>)
 801a8c2:	b510      	push	{r4, lr}
 801a8c4:	681c      	ldr	r4, [r3, #0]
 801a8c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a8c8:	b9b3      	cbnz	r3, 801a8f8 <rand+0x38>
 801a8ca:	2018      	movs	r0, #24
 801a8cc:	f7ff ff3c 	bl	801a748 <malloc>
 801a8d0:	4602      	mov	r2, r0
 801a8d2:	6320      	str	r0, [r4, #48]	; 0x30
 801a8d4:	b920      	cbnz	r0, 801a8e0 <rand+0x20>
 801a8d6:	4b12      	ldr	r3, [pc, #72]	; (801a920 <rand+0x60>)
 801a8d8:	4812      	ldr	r0, [pc, #72]	; (801a924 <rand+0x64>)
 801a8da:	2152      	movs	r1, #82	; 0x52
 801a8dc:	f000 fa6a 	bl	801adb4 <__assert_func>
 801a8e0:	4911      	ldr	r1, [pc, #68]	; (801a928 <rand+0x68>)
 801a8e2:	4b12      	ldr	r3, [pc, #72]	; (801a92c <rand+0x6c>)
 801a8e4:	e9c0 1300 	strd	r1, r3, [r0]
 801a8e8:	4b11      	ldr	r3, [pc, #68]	; (801a930 <rand+0x70>)
 801a8ea:	6083      	str	r3, [r0, #8]
 801a8ec:	230b      	movs	r3, #11
 801a8ee:	8183      	strh	r3, [r0, #12]
 801a8f0:	2100      	movs	r1, #0
 801a8f2:	2001      	movs	r0, #1
 801a8f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a8f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a8fa:	480e      	ldr	r0, [pc, #56]	; (801a934 <rand+0x74>)
 801a8fc:	690b      	ldr	r3, [r1, #16]
 801a8fe:	694c      	ldr	r4, [r1, #20]
 801a900:	4a0d      	ldr	r2, [pc, #52]	; (801a938 <rand+0x78>)
 801a902:	4358      	muls	r0, r3
 801a904:	fb02 0004 	mla	r0, r2, r4, r0
 801a908:	fba3 3202 	umull	r3, r2, r3, r2
 801a90c:	3301      	adds	r3, #1
 801a90e:	eb40 0002 	adc.w	r0, r0, r2
 801a912:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a916:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a91a:	bd10      	pop	{r4, pc}
 801a91c:	200001a0 	.word	0x200001a0
 801a920:	0801d25e 	.word	0x0801d25e
 801a924:	0801d275 	.word	0x0801d275
 801a928:	abcd330e 	.word	0xabcd330e
 801a92c:	e66d1234 	.word	0xe66d1234
 801a930:	0005deec 	.word	0x0005deec
 801a934:	5851f42d 	.word	0x5851f42d
 801a938:	4c957f2d 	.word	0x4c957f2d

0801a93c <std>:
 801a93c:	2300      	movs	r3, #0
 801a93e:	b510      	push	{r4, lr}
 801a940:	4604      	mov	r4, r0
 801a942:	e9c0 3300 	strd	r3, r3, [r0]
 801a946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a94a:	6083      	str	r3, [r0, #8]
 801a94c:	8181      	strh	r1, [r0, #12]
 801a94e:	6643      	str	r3, [r0, #100]	; 0x64
 801a950:	81c2      	strh	r2, [r0, #14]
 801a952:	6183      	str	r3, [r0, #24]
 801a954:	4619      	mov	r1, r3
 801a956:	2208      	movs	r2, #8
 801a958:	305c      	adds	r0, #92	; 0x5c
 801a95a:	f000 f972 	bl	801ac42 <memset>
 801a95e:	4b0d      	ldr	r3, [pc, #52]	; (801a994 <std+0x58>)
 801a960:	6263      	str	r3, [r4, #36]	; 0x24
 801a962:	4b0d      	ldr	r3, [pc, #52]	; (801a998 <std+0x5c>)
 801a964:	62a3      	str	r3, [r4, #40]	; 0x28
 801a966:	4b0d      	ldr	r3, [pc, #52]	; (801a99c <std+0x60>)
 801a968:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a96a:	4b0d      	ldr	r3, [pc, #52]	; (801a9a0 <std+0x64>)
 801a96c:	6323      	str	r3, [r4, #48]	; 0x30
 801a96e:	4b0d      	ldr	r3, [pc, #52]	; (801a9a4 <std+0x68>)
 801a970:	6224      	str	r4, [r4, #32]
 801a972:	429c      	cmp	r4, r3
 801a974:	d006      	beq.n	801a984 <std+0x48>
 801a976:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801a97a:	4294      	cmp	r4, r2
 801a97c:	d002      	beq.n	801a984 <std+0x48>
 801a97e:	33d0      	adds	r3, #208	; 0xd0
 801a980:	429c      	cmp	r4, r3
 801a982:	d105      	bne.n	801a990 <std+0x54>
 801a984:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a98c:	f000 ba00 	b.w	801ad90 <__retarget_lock_init_recursive>
 801a990:	bd10      	pop	{r4, pc}
 801a992:	bf00      	nop
 801a994:	0801ab69 	.word	0x0801ab69
 801a998:	0801ab8b 	.word	0x0801ab8b
 801a99c:	0801abc3 	.word	0x0801abc3
 801a9a0:	0801abe7 	.word	0x0801abe7
 801a9a4:	200079d8 	.word	0x200079d8

0801a9a8 <stdio_exit_handler>:
 801a9a8:	4a02      	ldr	r2, [pc, #8]	; (801a9b4 <stdio_exit_handler+0xc>)
 801a9aa:	4903      	ldr	r1, [pc, #12]	; (801a9b8 <stdio_exit_handler+0x10>)
 801a9ac:	4803      	ldr	r0, [pc, #12]	; (801a9bc <stdio_exit_handler+0x14>)
 801a9ae:	f000 b869 	b.w	801aa84 <_fwalk_sglue>
 801a9b2:	bf00      	nop
 801a9b4:	20000148 	.word	0x20000148
 801a9b8:	0801b565 	.word	0x0801b565
 801a9bc:	20000154 	.word	0x20000154

0801a9c0 <cleanup_stdio>:
 801a9c0:	6841      	ldr	r1, [r0, #4]
 801a9c2:	4b0c      	ldr	r3, [pc, #48]	; (801a9f4 <cleanup_stdio+0x34>)
 801a9c4:	4299      	cmp	r1, r3
 801a9c6:	b510      	push	{r4, lr}
 801a9c8:	4604      	mov	r4, r0
 801a9ca:	d001      	beq.n	801a9d0 <cleanup_stdio+0x10>
 801a9cc:	f000 fdca 	bl	801b564 <_fflush_r>
 801a9d0:	68a1      	ldr	r1, [r4, #8]
 801a9d2:	4b09      	ldr	r3, [pc, #36]	; (801a9f8 <cleanup_stdio+0x38>)
 801a9d4:	4299      	cmp	r1, r3
 801a9d6:	d002      	beq.n	801a9de <cleanup_stdio+0x1e>
 801a9d8:	4620      	mov	r0, r4
 801a9da:	f000 fdc3 	bl	801b564 <_fflush_r>
 801a9de:	68e1      	ldr	r1, [r4, #12]
 801a9e0:	4b06      	ldr	r3, [pc, #24]	; (801a9fc <cleanup_stdio+0x3c>)
 801a9e2:	4299      	cmp	r1, r3
 801a9e4:	d004      	beq.n	801a9f0 <cleanup_stdio+0x30>
 801a9e6:	4620      	mov	r0, r4
 801a9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9ec:	f000 bdba 	b.w	801b564 <_fflush_r>
 801a9f0:	bd10      	pop	{r4, pc}
 801a9f2:	bf00      	nop
 801a9f4:	200079d8 	.word	0x200079d8
 801a9f8:	20007a40 	.word	0x20007a40
 801a9fc:	20007aa8 	.word	0x20007aa8

0801aa00 <global_stdio_init.part.0>:
 801aa00:	b510      	push	{r4, lr}
 801aa02:	4b0b      	ldr	r3, [pc, #44]	; (801aa30 <global_stdio_init.part.0+0x30>)
 801aa04:	4c0b      	ldr	r4, [pc, #44]	; (801aa34 <global_stdio_init.part.0+0x34>)
 801aa06:	4a0c      	ldr	r2, [pc, #48]	; (801aa38 <global_stdio_init.part.0+0x38>)
 801aa08:	601a      	str	r2, [r3, #0]
 801aa0a:	4620      	mov	r0, r4
 801aa0c:	2200      	movs	r2, #0
 801aa0e:	2104      	movs	r1, #4
 801aa10:	f7ff ff94 	bl	801a93c <std>
 801aa14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801aa18:	2201      	movs	r2, #1
 801aa1a:	2109      	movs	r1, #9
 801aa1c:	f7ff ff8e 	bl	801a93c <std>
 801aa20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801aa24:	2202      	movs	r2, #2
 801aa26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa2a:	2112      	movs	r1, #18
 801aa2c:	f7ff bf86 	b.w	801a93c <std>
 801aa30:	20007b10 	.word	0x20007b10
 801aa34:	200079d8 	.word	0x200079d8
 801aa38:	0801a9a9 	.word	0x0801a9a9

0801aa3c <__sfp_lock_acquire>:
 801aa3c:	4801      	ldr	r0, [pc, #4]	; (801aa44 <__sfp_lock_acquire+0x8>)
 801aa3e:	f000 b9a8 	b.w	801ad92 <__retarget_lock_acquire_recursive>
 801aa42:	bf00      	nop
 801aa44:	20007b19 	.word	0x20007b19

0801aa48 <__sfp_lock_release>:
 801aa48:	4801      	ldr	r0, [pc, #4]	; (801aa50 <__sfp_lock_release+0x8>)
 801aa4a:	f000 b9a3 	b.w	801ad94 <__retarget_lock_release_recursive>
 801aa4e:	bf00      	nop
 801aa50:	20007b19 	.word	0x20007b19

0801aa54 <__sinit>:
 801aa54:	b510      	push	{r4, lr}
 801aa56:	4604      	mov	r4, r0
 801aa58:	f7ff fff0 	bl	801aa3c <__sfp_lock_acquire>
 801aa5c:	6a23      	ldr	r3, [r4, #32]
 801aa5e:	b11b      	cbz	r3, 801aa68 <__sinit+0x14>
 801aa60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa64:	f7ff bff0 	b.w	801aa48 <__sfp_lock_release>
 801aa68:	4b04      	ldr	r3, [pc, #16]	; (801aa7c <__sinit+0x28>)
 801aa6a:	6223      	str	r3, [r4, #32]
 801aa6c:	4b04      	ldr	r3, [pc, #16]	; (801aa80 <__sinit+0x2c>)
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d1f5      	bne.n	801aa60 <__sinit+0xc>
 801aa74:	f7ff ffc4 	bl	801aa00 <global_stdio_init.part.0>
 801aa78:	e7f2      	b.n	801aa60 <__sinit+0xc>
 801aa7a:	bf00      	nop
 801aa7c:	0801a9c1 	.word	0x0801a9c1
 801aa80:	20007b10 	.word	0x20007b10

0801aa84 <_fwalk_sglue>:
 801aa84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa88:	4607      	mov	r7, r0
 801aa8a:	4688      	mov	r8, r1
 801aa8c:	4614      	mov	r4, r2
 801aa8e:	2600      	movs	r6, #0
 801aa90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aa94:	f1b9 0901 	subs.w	r9, r9, #1
 801aa98:	d505      	bpl.n	801aaa6 <_fwalk_sglue+0x22>
 801aa9a:	6824      	ldr	r4, [r4, #0]
 801aa9c:	2c00      	cmp	r4, #0
 801aa9e:	d1f7      	bne.n	801aa90 <_fwalk_sglue+0xc>
 801aaa0:	4630      	mov	r0, r6
 801aaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aaa6:	89ab      	ldrh	r3, [r5, #12]
 801aaa8:	2b01      	cmp	r3, #1
 801aaaa:	d907      	bls.n	801aabc <_fwalk_sglue+0x38>
 801aaac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aab0:	3301      	adds	r3, #1
 801aab2:	d003      	beq.n	801aabc <_fwalk_sglue+0x38>
 801aab4:	4629      	mov	r1, r5
 801aab6:	4638      	mov	r0, r7
 801aab8:	47c0      	blx	r8
 801aaba:	4306      	orrs	r6, r0
 801aabc:	3568      	adds	r5, #104	; 0x68
 801aabe:	e7e9      	b.n	801aa94 <_fwalk_sglue+0x10>

0801aac0 <sniprintf>:
 801aac0:	b40c      	push	{r2, r3}
 801aac2:	b530      	push	{r4, r5, lr}
 801aac4:	4b17      	ldr	r3, [pc, #92]	; (801ab24 <sniprintf+0x64>)
 801aac6:	1e0c      	subs	r4, r1, #0
 801aac8:	681d      	ldr	r5, [r3, #0]
 801aaca:	b09d      	sub	sp, #116	; 0x74
 801aacc:	da08      	bge.n	801aae0 <sniprintf+0x20>
 801aace:	238b      	movs	r3, #139	; 0x8b
 801aad0:	602b      	str	r3, [r5, #0]
 801aad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aad6:	b01d      	add	sp, #116	; 0x74
 801aad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aadc:	b002      	add	sp, #8
 801aade:	4770      	bx	lr
 801aae0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801aae4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aae8:	bf14      	ite	ne
 801aaea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801aaee:	4623      	moveq	r3, r4
 801aaf0:	9304      	str	r3, [sp, #16]
 801aaf2:	9307      	str	r3, [sp, #28]
 801aaf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aaf8:	9002      	str	r0, [sp, #8]
 801aafa:	9006      	str	r0, [sp, #24]
 801aafc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ab02:	ab21      	add	r3, sp, #132	; 0x84
 801ab04:	a902      	add	r1, sp, #8
 801ab06:	4628      	mov	r0, r5
 801ab08:	9301      	str	r3, [sp, #4]
 801ab0a:	f000 fa17 	bl	801af3c <_svfiprintf_r>
 801ab0e:	1c43      	adds	r3, r0, #1
 801ab10:	bfbc      	itt	lt
 801ab12:	238b      	movlt	r3, #139	; 0x8b
 801ab14:	602b      	strlt	r3, [r5, #0]
 801ab16:	2c00      	cmp	r4, #0
 801ab18:	d0dd      	beq.n	801aad6 <sniprintf+0x16>
 801ab1a:	9b02      	ldr	r3, [sp, #8]
 801ab1c:	2200      	movs	r2, #0
 801ab1e:	701a      	strb	r2, [r3, #0]
 801ab20:	e7d9      	b.n	801aad6 <sniprintf+0x16>
 801ab22:	bf00      	nop
 801ab24:	200001a0 	.word	0x200001a0

0801ab28 <siprintf>:
 801ab28:	b40e      	push	{r1, r2, r3}
 801ab2a:	b500      	push	{lr}
 801ab2c:	b09c      	sub	sp, #112	; 0x70
 801ab2e:	ab1d      	add	r3, sp, #116	; 0x74
 801ab30:	9002      	str	r0, [sp, #8]
 801ab32:	9006      	str	r0, [sp, #24]
 801ab34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ab38:	4809      	ldr	r0, [pc, #36]	; (801ab60 <siprintf+0x38>)
 801ab3a:	9107      	str	r1, [sp, #28]
 801ab3c:	9104      	str	r1, [sp, #16]
 801ab3e:	4909      	ldr	r1, [pc, #36]	; (801ab64 <siprintf+0x3c>)
 801ab40:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab44:	9105      	str	r1, [sp, #20]
 801ab46:	6800      	ldr	r0, [r0, #0]
 801ab48:	9301      	str	r3, [sp, #4]
 801ab4a:	a902      	add	r1, sp, #8
 801ab4c:	f000 f9f6 	bl	801af3c <_svfiprintf_r>
 801ab50:	9b02      	ldr	r3, [sp, #8]
 801ab52:	2200      	movs	r2, #0
 801ab54:	701a      	strb	r2, [r3, #0]
 801ab56:	b01c      	add	sp, #112	; 0x70
 801ab58:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab5c:	b003      	add	sp, #12
 801ab5e:	4770      	bx	lr
 801ab60:	200001a0 	.word	0x200001a0
 801ab64:	ffff0208 	.word	0xffff0208

0801ab68 <__sread>:
 801ab68:	b510      	push	{r4, lr}
 801ab6a:	460c      	mov	r4, r1
 801ab6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab70:	f000 f8b0 	bl	801acd4 <_read_r>
 801ab74:	2800      	cmp	r0, #0
 801ab76:	bfab      	itete	ge
 801ab78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ab7a:	89a3      	ldrhlt	r3, [r4, #12]
 801ab7c:	181b      	addge	r3, r3, r0
 801ab7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ab82:	bfac      	ite	ge
 801ab84:	6563      	strge	r3, [r4, #84]	; 0x54
 801ab86:	81a3      	strhlt	r3, [r4, #12]
 801ab88:	bd10      	pop	{r4, pc}

0801ab8a <__swrite>:
 801ab8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab8e:	461f      	mov	r7, r3
 801ab90:	898b      	ldrh	r3, [r1, #12]
 801ab92:	05db      	lsls	r3, r3, #23
 801ab94:	4605      	mov	r5, r0
 801ab96:	460c      	mov	r4, r1
 801ab98:	4616      	mov	r6, r2
 801ab9a:	d505      	bpl.n	801aba8 <__swrite+0x1e>
 801ab9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aba0:	2302      	movs	r3, #2
 801aba2:	2200      	movs	r2, #0
 801aba4:	f000 f884 	bl	801acb0 <_lseek_r>
 801aba8:	89a3      	ldrh	r3, [r4, #12]
 801abaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801abae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801abb2:	81a3      	strh	r3, [r4, #12]
 801abb4:	4632      	mov	r2, r6
 801abb6:	463b      	mov	r3, r7
 801abb8:	4628      	mov	r0, r5
 801abba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801abbe:	f000 b8ab 	b.w	801ad18 <_write_r>

0801abc2 <__sseek>:
 801abc2:	b510      	push	{r4, lr}
 801abc4:	460c      	mov	r4, r1
 801abc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abca:	f000 f871 	bl	801acb0 <_lseek_r>
 801abce:	1c43      	adds	r3, r0, #1
 801abd0:	89a3      	ldrh	r3, [r4, #12]
 801abd2:	bf15      	itete	ne
 801abd4:	6560      	strne	r0, [r4, #84]	; 0x54
 801abd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801abda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801abde:	81a3      	strheq	r3, [r4, #12]
 801abe0:	bf18      	it	ne
 801abe2:	81a3      	strhne	r3, [r4, #12]
 801abe4:	bd10      	pop	{r4, pc}

0801abe6 <__sclose>:
 801abe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abea:	f000 b851 	b.w	801ac90 <_close_r>

0801abee <memcmp>:
 801abee:	b510      	push	{r4, lr}
 801abf0:	3901      	subs	r1, #1
 801abf2:	4402      	add	r2, r0
 801abf4:	4290      	cmp	r0, r2
 801abf6:	d101      	bne.n	801abfc <memcmp+0xe>
 801abf8:	2000      	movs	r0, #0
 801abfa:	e005      	b.n	801ac08 <memcmp+0x1a>
 801abfc:	7803      	ldrb	r3, [r0, #0]
 801abfe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ac02:	42a3      	cmp	r3, r4
 801ac04:	d001      	beq.n	801ac0a <memcmp+0x1c>
 801ac06:	1b18      	subs	r0, r3, r4
 801ac08:	bd10      	pop	{r4, pc}
 801ac0a:	3001      	adds	r0, #1
 801ac0c:	e7f2      	b.n	801abf4 <memcmp+0x6>

0801ac0e <memmove>:
 801ac0e:	4288      	cmp	r0, r1
 801ac10:	b510      	push	{r4, lr}
 801ac12:	eb01 0402 	add.w	r4, r1, r2
 801ac16:	d902      	bls.n	801ac1e <memmove+0x10>
 801ac18:	4284      	cmp	r4, r0
 801ac1a:	4623      	mov	r3, r4
 801ac1c:	d807      	bhi.n	801ac2e <memmove+0x20>
 801ac1e:	1e43      	subs	r3, r0, #1
 801ac20:	42a1      	cmp	r1, r4
 801ac22:	d008      	beq.n	801ac36 <memmove+0x28>
 801ac24:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac28:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ac2c:	e7f8      	b.n	801ac20 <memmove+0x12>
 801ac2e:	4402      	add	r2, r0
 801ac30:	4601      	mov	r1, r0
 801ac32:	428a      	cmp	r2, r1
 801ac34:	d100      	bne.n	801ac38 <memmove+0x2a>
 801ac36:	bd10      	pop	{r4, pc}
 801ac38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ac3c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ac40:	e7f7      	b.n	801ac32 <memmove+0x24>

0801ac42 <memset>:
 801ac42:	4402      	add	r2, r0
 801ac44:	4603      	mov	r3, r0
 801ac46:	4293      	cmp	r3, r2
 801ac48:	d100      	bne.n	801ac4c <memset+0xa>
 801ac4a:	4770      	bx	lr
 801ac4c:	f803 1b01 	strb.w	r1, [r3], #1
 801ac50:	e7f9      	b.n	801ac46 <memset+0x4>

0801ac52 <strchr>:
 801ac52:	b2c9      	uxtb	r1, r1
 801ac54:	4603      	mov	r3, r0
 801ac56:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ac5a:	b11a      	cbz	r2, 801ac64 <strchr+0x12>
 801ac5c:	428a      	cmp	r2, r1
 801ac5e:	d1f9      	bne.n	801ac54 <strchr+0x2>
 801ac60:	4618      	mov	r0, r3
 801ac62:	4770      	bx	lr
 801ac64:	2900      	cmp	r1, #0
 801ac66:	bf18      	it	ne
 801ac68:	2300      	movne	r3, #0
 801ac6a:	e7f9      	b.n	801ac60 <strchr+0xe>

0801ac6c <strncmp>:
 801ac6c:	b510      	push	{r4, lr}
 801ac6e:	b16a      	cbz	r2, 801ac8c <strncmp+0x20>
 801ac70:	3901      	subs	r1, #1
 801ac72:	1884      	adds	r4, r0, r2
 801ac74:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ac78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ac7c:	429a      	cmp	r2, r3
 801ac7e:	d103      	bne.n	801ac88 <strncmp+0x1c>
 801ac80:	42a0      	cmp	r0, r4
 801ac82:	d001      	beq.n	801ac88 <strncmp+0x1c>
 801ac84:	2a00      	cmp	r2, #0
 801ac86:	d1f5      	bne.n	801ac74 <strncmp+0x8>
 801ac88:	1ad0      	subs	r0, r2, r3
 801ac8a:	bd10      	pop	{r4, pc}
 801ac8c:	4610      	mov	r0, r2
 801ac8e:	e7fc      	b.n	801ac8a <strncmp+0x1e>

0801ac90 <_close_r>:
 801ac90:	b538      	push	{r3, r4, r5, lr}
 801ac92:	4d06      	ldr	r5, [pc, #24]	; (801acac <_close_r+0x1c>)
 801ac94:	2300      	movs	r3, #0
 801ac96:	4604      	mov	r4, r0
 801ac98:	4608      	mov	r0, r1
 801ac9a:	602b      	str	r3, [r5, #0]
 801ac9c:	f7ec fe39 	bl	8007912 <_close>
 801aca0:	1c43      	adds	r3, r0, #1
 801aca2:	d102      	bne.n	801acaa <_close_r+0x1a>
 801aca4:	682b      	ldr	r3, [r5, #0]
 801aca6:	b103      	cbz	r3, 801acaa <_close_r+0x1a>
 801aca8:	6023      	str	r3, [r4, #0]
 801acaa:	bd38      	pop	{r3, r4, r5, pc}
 801acac:	20007b14 	.word	0x20007b14

0801acb0 <_lseek_r>:
 801acb0:	b538      	push	{r3, r4, r5, lr}
 801acb2:	4d07      	ldr	r5, [pc, #28]	; (801acd0 <_lseek_r+0x20>)
 801acb4:	4604      	mov	r4, r0
 801acb6:	4608      	mov	r0, r1
 801acb8:	4611      	mov	r1, r2
 801acba:	2200      	movs	r2, #0
 801acbc:	602a      	str	r2, [r5, #0]
 801acbe:	461a      	mov	r2, r3
 801acc0:	f7ec fe4e 	bl	8007960 <_lseek>
 801acc4:	1c43      	adds	r3, r0, #1
 801acc6:	d102      	bne.n	801acce <_lseek_r+0x1e>
 801acc8:	682b      	ldr	r3, [r5, #0]
 801acca:	b103      	cbz	r3, 801acce <_lseek_r+0x1e>
 801accc:	6023      	str	r3, [r4, #0]
 801acce:	bd38      	pop	{r3, r4, r5, pc}
 801acd0:	20007b14 	.word	0x20007b14

0801acd4 <_read_r>:
 801acd4:	b538      	push	{r3, r4, r5, lr}
 801acd6:	4d07      	ldr	r5, [pc, #28]	; (801acf4 <_read_r+0x20>)
 801acd8:	4604      	mov	r4, r0
 801acda:	4608      	mov	r0, r1
 801acdc:	4611      	mov	r1, r2
 801acde:	2200      	movs	r2, #0
 801ace0:	602a      	str	r2, [r5, #0]
 801ace2:	461a      	mov	r2, r3
 801ace4:	f7ec fddc 	bl	80078a0 <_read>
 801ace8:	1c43      	adds	r3, r0, #1
 801acea:	d102      	bne.n	801acf2 <_read_r+0x1e>
 801acec:	682b      	ldr	r3, [r5, #0]
 801acee:	b103      	cbz	r3, 801acf2 <_read_r+0x1e>
 801acf0:	6023      	str	r3, [r4, #0]
 801acf2:	bd38      	pop	{r3, r4, r5, pc}
 801acf4:	20007b14 	.word	0x20007b14

0801acf8 <_sbrk_r>:
 801acf8:	b538      	push	{r3, r4, r5, lr}
 801acfa:	4d06      	ldr	r5, [pc, #24]	; (801ad14 <_sbrk_r+0x1c>)
 801acfc:	2300      	movs	r3, #0
 801acfe:	4604      	mov	r4, r0
 801ad00:	4608      	mov	r0, r1
 801ad02:	602b      	str	r3, [r5, #0]
 801ad04:	f7ec fec6 	bl	8007a94 <_sbrk>
 801ad08:	1c43      	adds	r3, r0, #1
 801ad0a:	d102      	bne.n	801ad12 <_sbrk_r+0x1a>
 801ad0c:	682b      	ldr	r3, [r5, #0]
 801ad0e:	b103      	cbz	r3, 801ad12 <_sbrk_r+0x1a>
 801ad10:	6023      	str	r3, [r4, #0]
 801ad12:	bd38      	pop	{r3, r4, r5, pc}
 801ad14:	20007b14 	.word	0x20007b14

0801ad18 <_write_r>:
 801ad18:	b538      	push	{r3, r4, r5, lr}
 801ad1a:	4d07      	ldr	r5, [pc, #28]	; (801ad38 <_write_r+0x20>)
 801ad1c:	4604      	mov	r4, r0
 801ad1e:	4608      	mov	r0, r1
 801ad20:	4611      	mov	r1, r2
 801ad22:	2200      	movs	r2, #0
 801ad24:	602a      	str	r2, [r5, #0]
 801ad26:	461a      	mov	r2, r3
 801ad28:	f7ec fdd7 	bl	80078da <_write>
 801ad2c:	1c43      	adds	r3, r0, #1
 801ad2e:	d102      	bne.n	801ad36 <_write_r+0x1e>
 801ad30:	682b      	ldr	r3, [r5, #0]
 801ad32:	b103      	cbz	r3, 801ad36 <_write_r+0x1e>
 801ad34:	6023      	str	r3, [r4, #0]
 801ad36:	bd38      	pop	{r3, r4, r5, pc}
 801ad38:	20007b14 	.word	0x20007b14

0801ad3c <__errno>:
 801ad3c:	4b01      	ldr	r3, [pc, #4]	; (801ad44 <__errno+0x8>)
 801ad3e:	6818      	ldr	r0, [r3, #0]
 801ad40:	4770      	bx	lr
 801ad42:	bf00      	nop
 801ad44:	200001a0 	.word	0x200001a0

0801ad48 <__libc_init_array>:
 801ad48:	b570      	push	{r4, r5, r6, lr}
 801ad4a:	4d0d      	ldr	r5, [pc, #52]	; (801ad80 <__libc_init_array+0x38>)
 801ad4c:	4c0d      	ldr	r4, [pc, #52]	; (801ad84 <__libc_init_array+0x3c>)
 801ad4e:	1b64      	subs	r4, r4, r5
 801ad50:	10a4      	asrs	r4, r4, #2
 801ad52:	2600      	movs	r6, #0
 801ad54:	42a6      	cmp	r6, r4
 801ad56:	d109      	bne.n	801ad6c <__libc_init_array+0x24>
 801ad58:	4d0b      	ldr	r5, [pc, #44]	; (801ad88 <__libc_init_array+0x40>)
 801ad5a:	4c0c      	ldr	r4, [pc, #48]	; (801ad8c <__libc_init_array+0x44>)
 801ad5c:	f000 ff1c 	bl	801bb98 <_init>
 801ad60:	1b64      	subs	r4, r4, r5
 801ad62:	10a4      	asrs	r4, r4, #2
 801ad64:	2600      	movs	r6, #0
 801ad66:	42a6      	cmp	r6, r4
 801ad68:	d105      	bne.n	801ad76 <__libc_init_array+0x2e>
 801ad6a:	bd70      	pop	{r4, r5, r6, pc}
 801ad6c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ad70:	4798      	blx	r3
 801ad72:	3601      	adds	r6, #1
 801ad74:	e7ee      	b.n	801ad54 <__libc_init_array+0xc>
 801ad76:	f855 3b04 	ldr.w	r3, [r5], #4
 801ad7a:	4798      	blx	r3
 801ad7c:	3601      	adds	r6, #1
 801ad7e:	e7f2      	b.n	801ad66 <__libc_init_array+0x1e>
 801ad80:	0801d344 	.word	0x0801d344
 801ad84:	0801d344 	.word	0x0801d344
 801ad88:	0801d344 	.word	0x0801d344
 801ad8c:	0801d348 	.word	0x0801d348

0801ad90 <__retarget_lock_init_recursive>:
 801ad90:	4770      	bx	lr

0801ad92 <__retarget_lock_acquire_recursive>:
 801ad92:	4770      	bx	lr

0801ad94 <__retarget_lock_release_recursive>:
 801ad94:	4770      	bx	lr

0801ad96 <memcpy>:
 801ad96:	440a      	add	r2, r1
 801ad98:	4291      	cmp	r1, r2
 801ad9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ad9e:	d100      	bne.n	801ada2 <memcpy+0xc>
 801ada0:	4770      	bx	lr
 801ada2:	b510      	push	{r4, lr}
 801ada4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ada8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801adac:	4291      	cmp	r1, r2
 801adae:	d1f9      	bne.n	801ada4 <memcpy+0xe>
 801adb0:	bd10      	pop	{r4, pc}
	...

0801adb4 <__assert_func>:
 801adb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801adb6:	4614      	mov	r4, r2
 801adb8:	461a      	mov	r2, r3
 801adba:	4b09      	ldr	r3, [pc, #36]	; (801ade0 <__assert_func+0x2c>)
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	4605      	mov	r5, r0
 801adc0:	68d8      	ldr	r0, [r3, #12]
 801adc2:	b14c      	cbz	r4, 801add8 <__assert_func+0x24>
 801adc4:	4b07      	ldr	r3, [pc, #28]	; (801ade4 <__assert_func+0x30>)
 801adc6:	9100      	str	r1, [sp, #0]
 801adc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801adcc:	4906      	ldr	r1, [pc, #24]	; (801ade8 <__assert_func+0x34>)
 801adce:	462b      	mov	r3, r5
 801add0:	f000 fbf0 	bl	801b5b4 <fiprintf>
 801add4:	f000 fc00 	bl	801b5d8 <abort>
 801add8:	4b04      	ldr	r3, [pc, #16]	; (801adec <__assert_func+0x38>)
 801adda:	461c      	mov	r4, r3
 801addc:	e7f3      	b.n	801adc6 <__assert_func+0x12>
 801adde:	bf00      	nop
 801ade0:	200001a0 	.word	0x200001a0
 801ade4:	0801d2cd 	.word	0x0801d2cd
 801ade8:	0801d2da 	.word	0x0801d2da
 801adec:	0801d308 	.word	0x0801d308

0801adf0 <_free_r>:
 801adf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801adf2:	2900      	cmp	r1, #0
 801adf4:	d044      	beq.n	801ae80 <_free_r+0x90>
 801adf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801adfa:	9001      	str	r0, [sp, #4]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	f1a1 0404 	sub.w	r4, r1, #4
 801ae02:	bfb8      	it	lt
 801ae04:	18e4      	addlt	r4, r4, r3
 801ae06:	f7ff fd4f 	bl	801a8a8 <__malloc_lock>
 801ae0a:	4a1e      	ldr	r2, [pc, #120]	; (801ae84 <_free_r+0x94>)
 801ae0c:	9801      	ldr	r0, [sp, #4]
 801ae0e:	6813      	ldr	r3, [r2, #0]
 801ae10:	b933      	cbnz	r3, 801ae20 <_free_r+0x30>
 801ae12:	6063      	str	r3, [r4, #4]
 801ae14:	6014      	str	r4, [r2, #0]
 801ae16:	b003      	add	sp, #12
 801ae18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ae1c:	f7ff bd4a 	b.w	801a8b4 <__malloc_unlock>
 801ae20:	42a3      	cmp	r3, r4
 801ae22:	d908      	bls.n	801ae36 <_free_r+0x46>
 801ae24:	6825      	ldr	r5, [r4, #0]
 801ae26:	1961      	adds	r1, r4, r5
 801ae28:	428b      	cmp	r3, r1
 801ae2a:	bf01      	itttt	eq
 801ae2c:	6819      	ldreq	r1, [r3, #0]
 801ae2e:	685b      	ldreq	r3, [r3, #4]
 801ae30:	1949      	addeq	r1, r1, r5
 801ae32:	6021      	streq	r1, [r4, #0]
 801ae34:	e7ed      	b.n	801ae12 <_free_r+0x22>
 801ae36:	461a      	mov	r2, r3
 801ae38:	685b      	ldr	r3, [r3, #4]
 801ae3a:	b10b      	cbz	r3, 801ae40 <_free_r+0x50>
 801ae3c:	42a3      	cmp	r3, r4
 801ae3e:	d9fa      	bls.n	801ae36 <_free_r+0x46>
 801ae40:	6811      	ldr	r1, [r2, #0]
 801ae42:	1855      	adds	r5, r2, r1
 801ae44:	42a5      	cmp	r5, r4
 801ae46:	d10b      	bne.n	801ae60 <_free_r+0x70>
 801ae48:	6824      	ldr	r4, [r4, #0]
 801ae4a:	4421      	add	r1, r4
 801ae4c:	1854      	adds	r4, r2, r1
 801ae4e:	42a3      	cmp	r3, r4
 801ae50:	6011      	str	r1, [r2, #0]
 801ae52:	d1e0      	bne.n	801ae16 <_free_r+0x26>
 801ae54:	681c      	ldr	r4, [r3, #0]
 801ae56:	685b      	ldr	r3, [r3, #4]
 801ae58:	6053      	str	r3, [r2, #4]
 801ae5a:	440c      	add	r4, r1
 801ae5c:	6014      	str	r4, [r2, #0]
 801ae5e:	e7da      	b.n	801ae16 <_free_r+0x26>
 801ae60:	d902      	bls.n	801ae68 <_free_r+0x78>
 801ae62:	230c      	movs	r3, #12
 801ae64:	6003      	str	r3, [r0, #0]
 801ae66:	e7d6      	b.n	801ae16 <_free_r+0x26>
 801ae68:	6825      	ldr	r5, [r4, #0]
 801ae6a:	1961      	adds	r1, r4, r5
 801ae6c:	428b      	cmp	r3, r1
 801ae6e:	bf04      	itt	eq
 801ae70:	6819      	ldreq	r1, [r3, #0]
 801ae72:	685b      	ldreq	r3, [r3, #4]
 801ae74:	6063      	str	r3, [r4, #4]
 801ae76:	bf04      	itt	eq
 801ae78:	1949      	addeq	r1, r1, r5
 801ae7a:	6021      	streq	r1, [r4, #0]
 801ae7c:	6054      	str	r4, [r2, #4]
 801ae7e:	e7ca      	b.n	801ae16 <_free_r+0x26>
 801ae80:	b003      	add	sp, #12
 801ae82:	bd30      	pop	{r4, r5, pc}
 801ae84:	200079d0 	.word	0x200079d0

0801ae88 <__ssputs_r>:
 801ae88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae8c:	688e      	ldr	r6, [r1, #8]
 801ae8e:	461f      	mov	r7, r3
 801ae90:	42be      	cmp	r6, r7
 801ae92:	680b      	ldr	r3, [r1, #0]
 801ae94:	4682      	mov	sl, r0
 801ae96:	460c      	mov	r4, r1
 801ae98:	4690      	mov	r8, r2
 801ae9a:	d82c      	bhi.n	801aef6 <__ssputs_r+0x6e>
 801ae9c:	898a      	ldrh	r2, [r1, #12]
 801ae9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801aea2:	d026      	beq.n	801aef2 <__ssputs_r+0x6a>
 801aea4:	6965      	ldr	r5, [r4, #20]
 801aea6:	6909      	ldr	r1, [r1, #16]
 801aea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aeac:	eba3 0901 	sub.w	r9, r3, r1
 801aeb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801aeb4:	1c7b      	adds	r3, r7, #1
 801aeb6:	444b      	add	r3, r9
 801aeb8:	106d      	asrs	r5, r5, #1
 801aeba:	429d      	cmp	r5, r3
 801aebc:	bf38      	it	cc
 801aebe:	461d      	movcc	r5, r3
 801aec0:	0553      	lsls	r3, r2, #21
 801aec2:	d527      	bpl.n	801af14 <__ssputs_r+0x8c>
 801aec4:	4629      	mov	r1, r5
 801aec6:	f7ff fc6f 	bl	801a7a8 <_malloc_r>
 801aeca:	4606      	mov	r6, r0
 801aecc:	b360      	cbz	r0, 801af28 <__ssputs_r+0xa0>
 801aece:	6921      	ldr	r1, [r4, #16]
 801aed0:	464a      	mov	r2, r9
 801aed2:	f7ff ff60 	bl	801ad96 <memcpy>
 801aed6:	89a3      	ldrh	r3, [r4, #12]
 801aed8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801aedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aee0:	81a3      	strh	r3, [r4, #12]
 801aee2:	6126      	str	r6, [r4, #16]
 801aee4:	6165      	str	r5, [r4, #20]
 801aee6:	444e      	add	r6, r9
 801aee8:	eba5 0509 	sub.w	r5, r5, r9
 801aeec:	6026      	str	r6, [r4, #0]
 801aeee:	60a5      	str	r5, [r4, #8]
 801aef0:	463e      	mov	r6, r7
 801aef2:	42be      	cmp	r6, r7
 801aef4:	d900      	bls.n	801aef8 <__ssputs_r+0x70>
 801aef6:	463e      	mov	r6, r7
 801aef8:	6820      	ldr	r0, [r4, #0]
 801aefa:	4632      	mov	r2, r6
 801aefc:	4641      	mov	r1, r8
 801aefe:	f7ff fe86 	bl	801ac0e <memmove>
 801af02:	68a3      	ldr	r3, [r4, #8]
 801af04:	1b9b      	subs	r3, r3, r6
 801af06:	60a3      	str	r3, [r4, #8]
 801af08:	6823      	ldr	r3, [r4, #0]
 801af0a:	4433      	add	r3, r6
 801af0c:	6023      	str	r3, [r4, #0]
 801af0e:	2000      	movs	r0, #0
 801af10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af14:	462a      	mov	r2, r5
 801af16:	f000 fb66 	bl	801b5e6 <_realloc_r>
 801af1a:	4606      	mov	r6, r0
 801af1c:	2800      	cmp	r0, #0
 801af1e:	d1e0      	bne.n	801aee2 <__ssputs_r+0x5a>
 801af20:	6921      	ldr	r1, [r4, #16]
 801af22:	4650      	mov	r0, sl
 801af24:	f7ff ff64 	bl	801adf0 <_free_r>
 801af28:	230c      	movs	r3, #12
 801af2a:	f8ca 3000 	str.w	r3, [sl]
 801af2e:	89a3      	ldrh	r3, [r4, #12]
 801af30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af34:	81a3      	strh	r3, [r4, #12]
 801af36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af3a:	e7e9      	b.n	801af10 <__ssputs_r+0x88>

0801af3c <_svfiprintf_r>:
 801af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af40:	4698      	mov	r8, r3
 801af42:	898b      	ldrh	r3, [r1, #12]
 801af44:	061b      	lsls	r3, r3, #24
 801af46:	b09d      	sub	sp, #116	; 0x74
 801af48:	4607      	mov	r7, r0
 801af4a:	460d      	mov	r5, r1
 801af4c:	4614      	mov	r4, r2
 801af4e:	d50e      	bpl.n	801af6e <_svfiprintf_r+0x32>
 801af50:	690b      	ldr	r3, [r1, #16]
 801af52:	b963      	cbnz	r3, 801af6e <_svfiprintf_r+0x32>
 801af54:	2140      	movs	r1, #64	; 0x40
 801af56:	f7ff fc27 	bl	801a7a8 <_malloc_r>
 801af5a:	6028      	str	r0, [r5, #0]
 801af5c:	6128      	str	r0, [r5, #16]
 801af5e:	b920      	cbnz	r0, 801af6a <_svfiprintf_r+0x2e>
 801af60:	230c      	movs	r3, #12
 801af62:	603b      	str	r3, [r7, #0]
 801af64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af68:	e0d0      	b.n	801b10c <_svfiprintf_r+0x1d0>
 801af6a:	2340      	movs	r3, #64	; 0x40
 801af6c:	616b      	str	r3, [r5, #20]
 801af6e:	2300      	movs	r3, #0
 801af70:	9309      	str	r3, [sp, #36]	; 0x24
 801af72:	2320      	movs	r3, #32
 801af74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801af78:	f8cd 800c 	str.w	r8, [sp, #12]
 801af7c:	2330      	movs	r3, #48	; 0x30
 801af7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b124 <_svfiprintf_r+0x1e8>
 801af82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801af86:	f04f 0901 	mov.w	r9, #1
 801af8a:	4623      	mov	r3, r4
 801af8c:	469a      	mov	sl, r3
 801af8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af92:	b10a      	cbz	r2, 801af98 <_svfiprintf_r+0x5c>
 801af94:	2a25      	cmp	r2, #37	; 0x25
 801af96:	d1f9      	bne.n	801af8c <_svfiprintf_r+0x50>
 801af98:	ebba 0b04 	subs.w	fp, sl, r4
 801af9c:	d00b      	beq.n	801afb6 <_svfiprintf_r+0x7a>
 801af9e:	465b      	mov	r3, fp
 801afa0:	4622      	mov	r2, r4
 801afa2:	4629      	mov	r1, r5
 801afa4:	4638      	mov	r0, r7
 801afa6:	f7ff ff6f 	bl	801ae88 <__ssputs_r>
 801afaa:	3001      	adds	r0, #1
 801afac:	f000 80a9 	beq.w	801b102 <_svfiprintf_r+0x1c6>
 801afb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801afb2:	445a      	add	r2, fp
 801afb4:	9209      	str	r2, [sp, #36]	; 0x24
 801afb6:	f89a 3000 	ldrb.w	r3, [sl]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	f000 80a1 	beq.w	801b102 <_svfiprintf_r+0x1c6>
 801afc0:	2300      	movs	r3, #0
 801afc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801afc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801afca:	f10a 0a01 	add.w	sl, sl, #1
 801afce:	9304      	str	r3, [sp, #16]
 801afd0:	9307      	str	r3, [sp, #28]
 801afd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801afd6:	931a      	str	r3, [sp, #104]	; 0x68
 801afd8:	4654      	mov	r4, sl
 801afda:	2205      	movs	r2, #5
 801afdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801afe0:	4850      	ldr	r0, [pc, #320]	; (801b124 <_svfiprintf_r+0x1e8>)
 801afe2:	f7e5 f925 	bl	8000230 <memchr>
 801afe6:	9a04      	ldr	r2, [sp, #16]
 801afe8:	b9d8      	cbnz	r0, 801b022 <_svfiprintf_r+0xe6>
 801afea:	06d0      	lsls	r0, r2, #27
 801afec:	bf44      	itt	mi
 801afee:	2320      	movmi	r3, #32
 801aff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aff4:	0711      	lsls	r1, r2, #28
 801aff6:	bf44      	itt	mi
 801aff8:	232b      	movmi	r3, #43	; 0x2b
 801affa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801affe:	f89a 3000 	ldrb.w	r3, [sl]
 801b002:	2b2a      	cmp	r3, #42	; 0x2a
 801b004:	d015      	beq.n	801b032 <_svfiprintf_r+0xf6>
 801b006:	9a07      	ldr	r2, [sp, #28]
 801b008:	4654      	mov	r4, sl
 801b00a:	2000      	movs	r0, #0
 801b00c:	f04f 0c0a 	mov.w	ip, #10
 801b010:	4621      	mov	r1, r4
 801b012:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b016:	3b30      	subs	r3, #48	; 0x30
 801b018:	2b09      	cmp	r3, #9
 801b01a:	d94d      	bls.n	801b0b8 <_svfiprintf_r+0x17c>
 801b01c:	b1b0      	cbz	r0, 801b04c <_svfiprintf_r+0x110>
 801b01e:	9207      	str	r2, [sp, #28]
 801b020:	e014      	b.n	801b04c <_svfiprintf_r+0x110>
 801b022:	eba0 0308 	sub.w	r3, r0, r8
 801b026:	fa09 f303 	lsl.w	r3, r9, r3
 801b02a:	4313      	orrs	r3, r2
 801b02c:	9304      	str	r3, [sp, #16]
 801b02e:	46a2      	mov	sl, r4
 801b030:	e7d2      	b.n	801afd8 <_svfiprintf_r+0x9c>
 801b032:	9b03      	ldr	r3, [sp, #12]
 801b034:	1d19      	adds	r1, r3, #4
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	9103      	str	r1, [sp, #12]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	bfbb      	ittet	lt
 801b03e:	425b      	neglt	r3, r3
 801b040:	f042 0202 	orrlt.w	r2, r2, #2
 801b044:	9307      	strge	r3, [sp, #28]
 801b046:	9307      	strlt	r3, [sp, #28]
 801b048:	bfb8      	it	lt
 801b04a:	9204      	strlt	r2, [sp, #16]
 801b04c:	7823      	ldrb	r3, [r4, #0]
 801b04e:	2b2e      	cmp	r3, #46	; 0x2e
 801b050:	d10c      	bne.n	801b06c <_svfiprintf_r+0x130>
 801b052:	7863      	ldrb	r3, [r4, #1]
 801b054:	2b2a      	cmp	r3, #42	; 0x2a
 801b056:	d134      	bne.n	801b0c2 <_svfiprintf_r+0x186>
 801b058:	9b03      	ldr	r3, [sp, #12]
 801b05a:	1d1a      	adds	r2, r3, #4
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	9203      	str	r2, [sp, #12]
 801b060:	2b00      	cmp	r3, #0
 801b062:	bfb8      	it	lt
 801b064:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b068:	3402      	adds	r4, #2
 801b06a:	9305      	str	r3, [sp, #20]
 801b06c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b134 <_svfiprintf_r+0x1f8>
 801b070:	7821      	ldrb	r1, [r4, #0]
 801b072:	2203      	movs	r2, #3
 801b074:	4650      	mov	r0, sl
 801b076:	f7e5 f8db 	bl	8000230 <memchr>
 801b07a:	b138      	cbz	r0, 801b08c <_svfiprintf_r+0x150>
 801b07c:	9b04      	ldr	r3, [sp, #16]
 801b07e:	eba0 000a 	sub.w	r0, r0, sl
 801b082:	2240      	movs	r2, #64	; 0x40
 801b084:	4082      	lsls	r2, r0
 801b086:	4313      	orrs	r3, r2
 801b088:	3401      	adds	r4, #1
 801b08a:	9304      	str	r3, [sp, #16]
 801b08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b090:	4825      	ldr	r0, [pc, #148]	; (801b128 <_svfiprintf_r+0x1ec>)
 801b092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b096:	2206      	movs	r2, #6
 801b098:	f7e5 f8ca 	bl	8000230 <memchr>
 801b09c:	2800      	cmp	r0, #0
 801b09e:	d038      	beq.n	801b112 <_svfiprintf_r+0x1d6>
 801b0a0:	4b22      	ldr	r3, [pc, #136]	; (801b12c <_svfiprintf_r+0x1f0>)
 801b0a2:	bb1b      	cbnz	r3, 801b0ec <_svfiprintf_r+0x1b0>
 801b0a4:	9b03      	ldr	r3, [sp, #12]
 801b0a6:	3307      	adds	r3, #7
 801b0a8:	f023 0307 	bic.w	r3, r3, #7
 801b0ac:	3308      	adds	r3, #8
 801b0ae:	9303      	str	r3, [sp, #12]
 801b0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0b2:	4433      	add	r3, r6
 801b0b4:	9309      	str	r3, [sp, #36]	; 0x24
 801b0b6:	e768      	b.n	801af8a <_svfiprintf_r+0x4e>
 801b0b8:	fb0c 3202 	mla	r2, ip, r2, r3
 801b0bc:	460c      	mov	r4, r1
 801b0be:	2001      	movs	r0, #1
 801b0c0:	e7a6      	b.n	801b010 <_svfiprintf_r+0xd4>
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	3401      	adds	r4, #1
 801b0c6:	9305      	str	r3, [sp, #20]
 801b0c8:	4619      	mov	r1, r3
 801b0ca:	f04f 0c0a 	mov.w	ip, #10
 801b0ce:	4620      	mov	r0, r4
 801b0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b0d4:	3a30      	subs	r2, #48	; 0x30
 801b0d6:	2a09      	cmp	r2, #9
 801b0d8:	d903      	bls.n	801b0e2 <_svfiprintf_r+0x1a6>
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d0c6      	beq.n	801b06c <_svfiprintf_r+0x130>
 801b0de:	9105      	str	r1, [sp, #20]
 801b0e0:	e7c4      	b.n	801b06c <_svfiprintf_r+0x130>
 801b0e2:	fb0c 2101 	mla	r1, ip, r1, r2
 801b0e6:	4604      	mov	r4, r0
 801b0e8:	2301      	movs	r3, #1
 801b0ea:	e7f0      	b.n	801b0ce <_svfiprintf_r+0x192>
 801b0ec:	ab03      	add	r3, sp, #12
 801b0ee:	9300      	str	r3, [sp, #0]
 801b0f0:	462a      	mov	r2, r5
 801b0f2:	4b0f      	ldr	r3, [pc, #60]	; (801b130 <_svfiprintf_r+0x1f4>)
 801b0f4:	a904      	add	r1, sp, #16
 801b0f6:	4638      	mov	r0, r7
 801b0f8:	f3af 8000 	nop.w
 801b0fc:	1c42      	adds	r2, r0, #1
 801b0fe:	4606      	mov	r6, r0
 801b100:	d1d6      	bne.n	801b0b0 <_svfiprintf_r+0x174>
 801b102:	89ab      	ldrh	r3, [r5, #12]
 801b104:	065b      	lsls	r3, r3, #25
 801b106:	f53f af2d 	bmi.w	801af64 <_svfiprintf_r+0x28>
 801b10a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b10c:	b01d      	add	sp, #116	; 0x74
 801b10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b112:	ab03      	add	r3, sp, #12
 801b114:	9300      	str	r3, [sp, #0]
 801b116:	462a      	mov	r2, r5
 801b118:	4b05      	ldr	r3, [pc, #20]	; (801b130 <_svfiprintf_r+0x1f4>)
 801b11a:	a904      	add	r1, sp, #16
 801b11c:	4638      	mov	r0, r7
 801b11e:	f000 f879 	bl	801b214 <_printf_i>
 801b122:	e7eb      	b.n	801b0fc <_svfiprintf_r+0x1c0>
 801b124:	0801d309 	.word	0x0801d309
 801b128:	0801d313 	.word	0x0801d313
 801b12c:	00000000 	.word	0x00000000
 801b130:	0801ae89 	.word	0x0801ae89
 801b134:	0801d30f 	.word	0x0801d30f

0801b138 <_printf_common>:
 801b138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b13c:	4616      	mov	r6, r2
 801b13e:	4699      	mov	r9, r3
 801b140:	688a      	ldr	r2, [r1, #8]
 801b142:	690b      	ldr	r3, [r1, #16]
 801b144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b148:	4293      	cmp	r3, r2
 801b14a:	bfb8      	it	lt
 801b14c:	4613      	movlt	r3, r2
 801b14e:	6033      	str	r3, [r6, #0]
 801b150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b154:	4607      	mov	r7, r0
 801b156:	460c      	mov	r4, r1
 801b158:	b10a      	cbz	r2, 801b15e <_printf_common+0x26>
 801b15a:	3301      	adds	r3, #1
 801b15c:	6033      	str	r3, [r6, #0]
 801b15e:	6823      	ldr	r3, [r4, #0]
 801b160:	0699      	lsls	r1, r3, #26
 801b162:	bf42      	ittt	mi
 801b164:	6833      	ldrmi	r3, [r6, #0]
 801b166:	3302      	addmi	r3, #2
 801b168:	6033      	strmi	r3, [r6, #0]
 801b16a:	6825      	ldr	r5, [r4, #0]
 801b16c:	f015 0506 	ands.w	r5, r5, #6
 801b170:	d106      	bne.n	801b180 <_printf_common+0x48>
 801b172:	f104 0a19 	add.w	sl, r4, #25
 801b176:	68e3      	ldr	r3, [r4, #12]
 801b178:	6832      	ldr	r2, [r6, #0]
 801b17a:	1a9b      	subs	r3, r3, r2
 801b17c:	42ab      	cmp	r3, r5
 801b17e:	dc26      	bgt.n	801b1ce <_printf_common+0x96>
 801b180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b184:	1e13      	subs	r3, r2, #0
 801b186:	6822      	ldr	r2, [r4, #0]
 801b188:	bf18      	it	ne
 801b18a:	2301      	movne	r3, #1
 801b18c:	0692      	lsls	r2, r2, #26
 801b18e:	d42b      	bmi.n	801b1e8 <_printf_common+0xb0>
 801b190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b194:	4649      	mov	r1, r9
 801b196:	4638      	mov	r0, r7
 801b198:	47c0      	blx	r8
 801b19a:	3001      	adds	r0, #1
 801b19c:	d01e      	beq.n	801b1dc <_printf_common+0xa4>
 801b19e:	6823      	ldr	r3, [r4, #0]
 801b1a0:	6922      	ldr	r2, [r4, #16]
 801b1a2:	f003 0306 	and.w	r3, r3, #6
 801b1a6:	2b04      	cmp	r3, #4
 801b1a8:	bf02      	ittt	eq
 801b1aa:	68e5      	ldreq	r5, [r4, #12]
 801b1ac:	6833      	ldreq	r3, [r6, #0]
 801b1ae:	1aed      	subeq	r5, r5, r3
 801b1b0:	68a3      	ldr	r3, [r4, #8]
 801b1b2:	bf0c      	ite	eq
 801b1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b1b8:	2500      	movne	r5, #0
 801b1ba:	4293      	cmp	r3, r2
 801b1bc:	bfc4      	itt	gt
 801b1be:	1a9b      	subgt	r3, r3, r2
 801b1c0:	18ed      	addgt	r5, r5, r3
 801b1c2:	2600      	movs	r6, #0
 801b1c4:	341a      	adds	r4, #26
 801b1c6:	42b5      	cmp	r5, r6
 801b1c8:	d11a      	bne.n	801b200 <_printf_common+0xc8>
 801b1ca:	2000      	movs	r0, #0
 801b1cc:	e008      	b.n	801b1e0 <_printf_common+0xa8>
 801b1ce:	2301      	movs	r3, #1
 801b1d0:	4652      	mov	r2, sl
 801b1d2:	4649      	mov	r1, r9
 801b1d4:	4638      	mov	r0, r7
 801b1d6:	47c0      	blx	r8
 801b1d8:	3001      	adds	r0, #1
 801b1da:	d103      	bne.n	801b1e4 <_printf_common+0xac>
 801b1dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1e4:	3501      	adds	r5, #1
 801b1e6:	e7c6      	b.n	801b176 <_printf_common+0x3e>
 801b1e8:	18e1      	adds	r1, r4, r3
 801b1ea:	1c5a      	adds	r2, r3, #1
 801b1ec:	2030      	movs	r0, #48	; 0x30
 801b1ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b1f2:	4422      	add	r2, r4
 801b1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b1f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b1fc:	3302      	adds	r3, #2
 801b1fe:	e7c7      	b.n	801b190 <_printf_common+0x58>
 801b200:	2301      	movs	r3, #1
 801b202:	4622      	mov	r2, r4
 801b204:	4649      	mov	r1, r9
 801b206:	4638      	mov	r0, r7
 801b208:	47c0      	blx	r8
 801b20a:	3001      	adds	r0, #1
 801b20c:	d0e6      	beq.n	801b1dc <_printf_common+0xa4>
 801b20e:	3601      	adds	r6, #1
 801b210:	e7d9      	b.n	801b1c6 <_printf_common+0x8e>
	...

0801b214 <_printf_i>:
 801b214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b218:	7e0f      	ldrb	r7, [r1, #24]
 801b21a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b21c:	2f78      	cmp	r7, #120	; 0x78
 801b21e:	4691      	mov	r9, r2
 801b220:	4680      	mov	r8, r0
 801b222:	460c      	mov	r4, r1
 801b224:	469a      	mov	sl, r3
 801b226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b22a:	d807      	bhi.n	801b23c <_printf_i+0x28>
 801b22c:	2f62      	cmp	r7, #98	; 0x62
 801b22e:	d80a      	bhi.n	801b246 <_printf_i+0x32>
 801b230:	2f00      	cmp	r7, #0
 801b232:	f000 80d4 	beq.w	801b3de <_printf_i+0x1ca>
 801b236:	2f58      	cmp	r7, #88	; 0x58
 801b238:	f000 80c0 	beq.w	801b3bc <_printf_i+0x1a8>
 801b23c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b244:	e03a      	b.n	801b2bc <_printf_i+0xa8>
 801b246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b24a:	2b15      	cmp	r3, #21
 801b24c:	d8f6      	bhi.n	801b23c <_printf_i+0x28>
 801b24e:	a101      	add	r1, pc, #4	; (adr r1, 801b254 <_printf_i+0x40>)
 801b250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b254:	0801b2ad 	.word	0x0801b2ad
 801b258:	0801b2c1 	.word	0x0801b2c1
 801b25c:	0801b23d 	.word	0x0801b23d
 801b260:	0801b23d 	.word	0x0801b23d
 801b264:	0801b23d 	.word	0x0801b23d
 801b268:	0801b23d 	.word	0x0801b23d
 801b26c:	0801b2c1 	.word	0x0801b2c1
 801b270:	0801b23d 	.word	0x0801b23d
 801b274:	0801b23d 	.word	0x0801b23d
 801b278:	0801b23d 	.word	0x0801b23d
 801b27c:	0801b23d 	.word	0x0801b23d
 801b280:	0801b3c5 	.word	0x0801b3c5
 801b284:	0801b2ed 	.word	0x0801b2ed
 801b288:	0801b37f 	.word	0x0801b37f
 801b28c:	0801b23d 	.word	0x0801b23d
 801b290:	0801b23d 	.word	0x0801b23d
 801b294:	0801b3e7 	.word	0x0801b3e7
 801b298:	0801b23d 	.word	0x0801b23d
 801b29c:	0801b2ed 	.word	0x0801b2ed
 801b2a0:	0801b23d 	.word	0x0801b23d
 801b2a4:	0801b23d 	.word	0x0801b23d
 801b2a8:	0801b387 	.word	0x0801b387
 801b2ac:	682b      	ldr	r3, [r5, #0]
 801b2ae:	1d1a      	adds	r2, r3, #4
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	602a      	str	r2, [r5, #0]
 801b2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b2b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b2bc:	2301      	movs	r3, #1
 801b2be:	e09f      	b.n	801b400 <_printf_i+0x1ec>
 801b2c0:	6820      	ldr	r0, [r4, #0]
 801b2c2:	682b      	ldr	r3, [r5, #0]
 801b2c4:	0607      	lsls	r7, r0, #24
 801b2c6:	f103 0104 	add.w	r1, r3, #4
 801b2ca:	6029      	str	r1, [r5, #0]
 801b2cc:	d501      	bpl.n	801b2d2 <_printf_i+0xbe>
 801b2ce:	681e      	ldr	r6, [r3, #0]
 801b2d0:	e003      	b.n	801b2da <_printf_i+0xc6>
 801b2d2:	0646      	lsls	r6, r0, #25
 801b2d4:	d5fb      	bpl.n	801b2ce <_printf_i+0xba>
 801b2d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b2da:	2e00      	cmp	r6, #0
 801b2dc:	da03      	bge.n	801b2e6 <_printf_i+0xd2>
 801b2de:	232d      	movs	r3, #45	; 0x2d
 801b2e0:	4276      	negs	r6, r6
 801b2e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b2e6:	485a      	ldr	r0, [pc, #360]	; (801b450 <_printf_i+0x23c>)
 801b2e8:	230a      	movs	r3, #10
 801b2ea:	e012      	b.n	801b312 <_printf_i+0xfe>
 801b2ec:	682b      	ldr	r3, [r5, #0]
 801b2ee:	6820      	ldr	r0, [r4, #0]
 801b2f0:	1d19      	adds	r1, r3, #4
 801b2f2:	6029      	str	r1, [r5, #0]
 801b2f4:	0605      	lsls	r5, r0, #24
 801b2f6:	d501      	bpl.n	801b2fc <_printf_i+0xe8>
 801b2f8:	681e      	ldr	r6, [r3, #0]
 801b2fa:	e002      	b.n	801b302 <_printf_i+0xee>
 801b2fc:	0641      	lsls	r1, r0, #25
 801b2fe:	d5fb      	bpl.n	801b2f8 <_printf_i+0xe4>
 801b300:	881e      	ldrh	r6, [r3, #0]
 801b302:	4853      	ldr	r0, [pc, #332]	; (801b450 <_printf_i+0x23c>)
 801b304:	2f6f      	cmp	r7, #111	; 0x6f
 801b306:	bf0c      	ite	eq
 801b308:	2308      	moveq	r3, #8
 801b30a:	230a      	movne	r3, #10
 801b30c:	2100      	movs	r1, #0
 801b30e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b312:	6865      	ldr	r5, [r4, #4]
 801b314:	60a5      	str	r5, [r4, #8]
 801b316:	2d00      	cmp	r5, #0
 801b318:	bfa2      	ittt	ge
 801b31a:	6821      	ldrge	r1, [r4, #0]
 801b31c:	f021 0104 	bicge.w	r1, r1, #4
 801b320:	6021      	strge	r1, [r4, #0]
 801b322:	b90e      	cbnz	r6, 801b328 <_printf_i+0x114>
 801b324:	2d00      	cmp	r5, #0
 801b326:	d04b      	beq.n	801b3c0 <_printf_i+0x1ac>
 801b328:	4615      	mov	r5, r2
 801b32a:	fbb6 f1f3 	udiv	r1, r6, r3
 801b32e:	fb03 6711 	mls	r7, r3, r1, r6
 801b332:	5dc7      	ldrb	r7, [r0, r7]
 801b334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b338:	4637      	mov	r7, r6
 801b33a:	42bb      	cmp	r3, r7
 801b33c:	460e      	mov	r6, r1
 801b33e:	d9f4      	bls.n	801b32a <_printf_i+0x116>
 801b340:	2b08      	cmp	r3, #8
 801b342:	d10b      	bne.n	801b35c <_printf_i+0x148>
 801b344:	6823      	ldr	r3, [r4, #0]
 801b346:	07de      	lsls	r6, r3, #31
 801b348:	d508      	bpl.n	801b35c <_printf_i+0x148>
 801b34a:	6923      	ldr	r3, [r4, #16]
 801b34c:	6861      	ldr	r1, [r4, #4]
 801b34e:	4299      	cmp	r1, r3
 801b350:	bfde      	ittt	le
 801b352:	2330      	movle	r3, #48	; 0x30
 801b354:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b358:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b35c:	1b52      	subs	r2, r2, r5
 801b35e:	6122      	str	r2, [r4, #16]
 801b360:	f8cd a000 	str.w	sl, [sp]
 801b364:	464b      	mov	r3, r9
 801b366:	aa03      	add	r2, sp, #12
 801b368:	4621      	mov	r1, r4
 801b36a:	4640      	mov	r0, r8
 801b36c:	f7ff fee4 	bl	801b138 <_printf_common>
 801b370:	3001      	adds	r0, #1
 801b372:	d14a      	bne.n	801b40a <_printf_i+0x1f6>
 801b374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b378:	b004      	add	sp, #16
 801b37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b37e:	6823      	ldr	r3, [r4, #0]
 801b380:	f043 0320 	orr.w	r3, r3, #32
 801b384:	6023      	str	r3, [r4, #0]
 801b386:	4833      	ldr	r0, [pc, #204]	; (801b454 <_printf_i+0x240>)
 801b388:	2778      	movs	r7, #120	; 0x78
 801b38a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b38e:	6823      	ldr	r3, [r4, #0]
 801b390:	6829      	ldr	r1, [r5, #0]
 801b392:	061f      	lsls	r7, r3, #24
 801b394:	f851 6b04 	ldr.w	r6, [r1], #4
 801b398:	d402      	bmi.n	801b3a0 <_printf_i+0x18c>
 801b39a:	065f      	lsls	r7, r3, #25
 801b39c:	bf48      	it	mi
 801b39e:	b2b6      	uxthmi	r6, r6
 801b3a0:	07df      	lsls	r7, r3, #31
 801b3a2:	bf48      	it	mi
 801b3a4:	f043 0320 	orrmi.w	r3, r3, #32
 801b3a8:	6029      	str	r1, [r5, #0]
 801b3aa:	bf48      	it	mi
 801b3ac:	6023      	strmi	r3, [r4, #0]
 801b3ae:	b91e      	cbnz	r6, 801b3b8 <_printf_i+0x1a4>
 801b3b0:	6823      	ldr	r3, [r4, #0]
 801b3b2:	f023 0320 	bic.w	r3, r3, #32
 801b3b6:	6023      	str	r3, [r4, #0]
 801b3b8:	2310      	movs	r3, #16
 801b3ba:	e7a7      	b.n	801b30c <_printf_i+0xf8>
 801b3bc:	4824      	ldr	r0, [pc, #144]	; (801b450 <_printf_i+0x23c>)
 801b3be:	e7e4      	b.n	801b38a <_printf_i+0x176>
 801b3c0:	4615      	mov	r5, r2
 801b3c2:	e7bd      	b.n	801b340 <_printf_i+0x12c>
 801b3c4:	682b      	ldr	r3, [r5, #0]
 801b3c6:	6826      	ldr	r6, [r4, #0]
 801b3c8:	6961      	ldr	r1, [r4, #20]
 801b3ca:	1d18      	adds	r0, r3, #4
 801b3cc:	6028      	str	r0, [r5, #0]
 801b3ce:	0635      	lsls	r5, r6, #24
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	d501      	bpl.n	801b3d8 <_printf_i+0x1c4>
 801b3d4:	6019      	str	r1, [r3, #0]
 801b3d6:	e002      	b.n	801b3de <_printf_i+0x1ca>
 801b3d8:	0670      	lsls	r0, r6, #25
 801b3da:	d5fb      	bpl.n	801b3d4 <_printf_i+0x1c0>
 801b3dc:	8019      	strh	r1, [r3, #0]
 801b3de:	2300      	movs	r3, #0
 801b3e0:	6123      	str	r3, [r4, #16]
 801b3e2:	4615      	mov	r5, r2
 801b3e4:	e7bc      	b.n	801b360 <_printf_i+0x14c>
 801b3e6:	682b      	ldr	r3, [r5, #0]
 801b3e8:	1d1a      	adds	r2, r3, #4
 801b3ea:	602a      	str	r2, [r5, #0]
 801b3ec:	681d      	ldr	r5, [r3, #0]
 801b3ee:	6862      	ldr	r2, [r4, #4]
 801b3f0:	2100      	movs	r1, #0
 801b3f2:	4628      	mov	r0, r5
 801b3f4:	f7e4 ff1c 	bl	8000230 <memchr>
 801b3f8:	b108      	cbz	r0, 801b3fe <_printf_i+0x1ea>
 801b3fa:	1b40      	subs	r0, r0, r5
 801b3fc:	6060      	str	r0, [r4, #4]
 801b3fe:	6863      	ldr	r3, [r4, #4]
 801b400:	6123      	str	r3, [r4, #16]
 801b402:	2300      	movs	r3, #0
 801b404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b408:	e7aa      	b.n	801b360 <_printf_i+0x14c>
 801b40a:	6923      	ldr	r3, [r4, #16]
 801b40c:	462a      	mov	r2, r5
 801b40e:	4649      	mov	r1, r9
 801b410:	4640      	mov	r0, r8
 801b412:	47d0      	blx	sl
 801b414:	3001      	adds	r0, #1
 801b416:	d0ad      	beq.n	801b374 <_printf_i+0x160>
 801b418:	6823      	ldr	r3, [r4, #0]
 801b41a:	079b      	lsls	r3, r3, #30
 801b41c:	d413      	bmi.n	801b446 <_printf_i+0x232>
 801b41e:	68e0      	ldr	r0, [r4, #12]
 801b420:	9b03      	ldr	r3, [sp, #12]
 801b422:	4298      	cmp	r0, r3
 801b424:	bfb8      	it	lt
 801b426:	4618      	movlt	r0, r3
 801b428:	e7a6      	b.n	801b378 <_printf_i+0x164>
 801b42a:	2301      	movs	r3, #1
 801b42c:	4632      	mov	r2, r6
 801b42e:	4649      	mov	r1, r9
 801b430:	4640      	mov	r0, r8
 801b432:	47d0      	blx	sl
 801b434:	3001      	adds	r0, #1
 801b436:	d09d      	beq.n	801b374 <_printf_i+0x160>
 801b438:	3501      	adds	r5, #1
 801b43a:	68e3      	ldr	r3, [r4, #12]
 801b43c:	9903      	ldr	r1, [sp, #12]
 801b43e:	1a5b      	subs	r3, r3, r1
 801b440:	42ab      	cmp	r3, r5
 801b442:	dcf2      	bgt.n	801b42a <_printf_i+0x216>
 801b444:	e7eb      	b.n	801b41e <_printf_i+0x20a>
 801b446:	2500      	movs	r5, #0
 801b448:	f104 0619 	add.w	r6, r4, #25
 801b44c:	e7f5      	b.n	801b43a <_printf_i+0x226>
 801b44e:	bf00      	nop
 801b450:	0801d31a 	.word	0x0801d31a
 801b454:	0801d32b 	.word	0x0801d32b

0801b458 <__sflush_r>:
 801b458:	898a      	ldrh	r2, [r1, #12]
 801b45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b45e:	4605      	mov	r5, r0
 801b460:	0710      	lsls	r0, r2, #28
 801b462:	460c      	mov	r4, r1
 801b464:	d458      	bmi.n	801b518 <__sflush_r+0xc0>
 801b466:	684b      	ldr	r3, [r1, #4]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	dc05      	bgt.n	801b478 <__sflush_r+0x20>
 801b46c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b46e:	2b00      	cmp	r3, #0
 801b470:	dc02      	bgt.n	801b478 <__sflush_r+0x20>
 801b472:	2000      	movs	r0, #0
 801b474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b47a:	2e00      	cmp	r6, #0
 801b47c:	d0f9      	beq.n	801b472 <__sflush_r+0x1a>
 801b47e:	2300      	movs	r3, #0
 801b480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b484:	682f      	ldr	r7, [r5, #0]
 801b486:	6a21      	ldr	r1, [r4, #32]
 801b488:	602b      	str	r3, [r5, #0]
 801b48a:	d032      	beq.n	801b4f2 <__sflush_r+0x9a>
 801b48c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b48e:	89a3      	ldrh	r3, [r4, #12]
 801b490:	075a      	lsls	r2, r3, #29
 801b492:	d505      	bpl.n	801b4a0 <__sflush_r+0x48>
 801b494:	6863      	ldr	r3, [r4, #4]
 801b496:	1ac0      	subs	r0, r0, r3
 801b498:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b49a:	b10b      	cbz	r3, 801b4a0 <__sflush_r+0x48>
 801b49c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b49e:	1ac0      	subs	r0, r0, r3
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	4602      	mov	r2, r0
 801b4a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b4a6:	6a21      	ldr	r1, [r4, #32]
 801b4a8:	4628      	mov	r0, r5
 801b4aa:	47b0      	blx	r6
 801b4ac:	1c43      	adds	r3, r0, #1
 801b4ae:	89a3      	ldrh	r3, [r4, #12]
 801b4b0:	d106      	bne.n	801b4c0 <__sflush_r+0x68>
 801b4b2:	6829      	ldr	r1, [r5, #0]
 801b4b4:	291d      	cmp	r1, #29
 801b4b6:	d82b      	bhi.n	801b510 <__sflush_r+0xb8>
 801b4b8:	4a29      	ldr	r2, [pc, #164]	; (801b560 <__sflush_r+0x108>)
 801b4ba:	410a      	asrs	r2, r1
 801b4bc:	07d6      	lsls	r6, r2, #31
 801b4be:	d427      	bmi.n	801b510 <__sflush_r+0xb8>
 801b4c0:	2200      	movs	r2, #0
 801b4c2:	6062      	str	r2, [r4, #4]
 801b4c4:	04d9      	lsls	r1, r3, #19
 801b4c6:	6922      	ldr	r2, [r4, #16]
 801b4c8:	6022      	str	r2, [r4, #0]
 801b4ca:	d504      	bpl.n	801b4d6 <__sflush_r+0x7e>
 801b4cc:	1c42      	adds	r2, r0, #1
 801b4ce:	d101      	bne.n	801b4d4 <__sflush_r+0x7c>
 801b4d0:	682b      	ldr	r3, [r5, #0]
 801b4d2:	b903      	cbnz	r3, 801b4d6 <__sflush_r+0x7e>
 801b4d4:	6560      	str	r0, [r4, #84]	; 0x54
 801b4d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b4d8:	602f      	str	r7, [r5, #0]
 801b4da:	2900      	cmp	r1, #0
 801b4dc:	d0c9      	beq.n	801b472 <__sflush_r+0x1a>
 801b4de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b4e2:	4299      	cmp	r1, r3
 801b4e4:	d002      	beq.n	801b4ec <__sflush_r+0x94>
 801b4e6:	4628      	mov	r0, r5
 801b4e8:	f7ff fc82 	bl	801adf0 <_free_r>
 801b4ec:	2000      	movs	r0, #0
 801b4ee:	6360      	str	r0, [r4, #52]	; 0x34
 801b4f0:	e7c0      	b.n	801b474 <__sflush_r+0x1c>
 801b4f2:	2301      	movs	r3, #1
 801b4f4:	4628      	mov	r0, r5
 801b4f6:	47b0      	blx	r6
 801b4f8:	1c41      	adds	r1, r0, #1
 801b4fa:	d1c8      	bne.n	801b48e <__sflush_r+0x36>
 801b4fc:	682b      	ldr	r3, [r5, #0]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d0c5      	beq.n	801b48e <__sflush_r+0x36>
 801b502:	2b1d      	cmp	r3, #29
 801b504:	d001      	beq.n	801b50a <__sflush_r+0xb2>
 801b506:	2b16      	cmp	r3, #22
 801b508:	d101      	bne.n	801b50e <__sflush_r+0xb6>
 801b50a:	602f      	str	r7, [r5, #0]
 801b50c:	e7b1      	b.n	801b472 <__sflush_r+0x1a>
 801b50e:	89a3      	ldrh	r3, [r4, #12]
 801b510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b514:	81a3      	strh	r3, [r4, #12]
 801b516:	e7ad      	b.n	801b474 <__sflush_r+0x1c>
 801b518:	690f      	ldr	r7, [r1, #16]
 801b51a:	2f00      	cmp	r7, #0
 801b51c:	d0a9      	beq.n	801b472 <__sflush_r+0x1a>
 801b51e:	0793      	lsls	r3, r2, #30
 801b520:	680e      	ldr	r6, [r1, #0]
 801b522:	bf08      	it	eq
 801b524:	694b      	ldreq	r3, [r1, #20]
 801b526:	600f      	str	r7, [r1, #0]
 801b528:	bf18      	it	ne
 801b52a:	2300      	movne	r3, #0
 801b52c:	eba6 0807 	sub.w	r8, r6, r7
 801b530:	608b      	str	r3, [r1, #8]
 801b532:	f1b8 0f00 	cmp.w	r8, #0
 801b536:	dd9c      	ble.n	801b472 <__sflush_r+0x1a>
 801b538:	6a21      	ldr	r1, [r4, #32]
 801b53a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b53c:	4643      	mov	r3, r8
 801b53e:	463a      	mov	r2, r7
 801b540:	4628      	mov	r0, r5
 801b542:	47b0      	blx	r6
 801b544:	2800      	cmp	r0, #0
 801b546:	dc06      	bgt.n	801b556 <__sflush_r+0xfe>
 801b548:	89a3      	ldrh	r3, [r4, #12]
 801b54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b54e:	81a3      	strh	r3, [r4, #12]
 801b550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b554:	e78e      	b.n	801b474 <__sflush_r+0x1c>
 801b556:	4407      	add	r7, r0
 801b558:	eba8 0800 	sub.w	r8, r8, r0
 801b55c:	e7e9      	b.n	801b532 <__sflush_r+0xda>
 801b55e:	bf00      	nop
 801b560:	dfbffffe 	.word	0xdfbffffe

0801b564 <_fflush_r>:
 801b564:	b538      	push	{r3, r4, r5, lr}
 801b566:	690b      	ldr	r3, [r1, #16]
 801b568:	4605      	mov	r5, r0
 801b56a:	460c      	mov	r4, r1
 801b56c:	b913      	cbnz	r3, 801b574 <_fflush_r+0x10>
 801b56e:	2500      	movs	r5, #0
 801b570:	4628      	mov	r0, r5
 801b572:	bd38      	pop	{r3, r4, r5, pc}
 801b574:	b118      	cbz	r0, 801b57e <_fflush_r+0x1a>
 801b576:	6a03      	ldr	r3, [r0, #32]
 801b578:	b90b      	cbnz	r3, 801b57e <_fflush_r+0x1a>
 801b57a:	f7ff fa6b 	bl	801aa54 <__sinit>
 801b57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b582:	2b00      	cmp	r3, #0
 801b584:	d0f3      	beq.n	801b56e <_fflush_r+0xa>
 801b586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b588:	07d0      	lsls	r0, r2, #31
 801b58a:	d404      	bmi.n	801b596 <_fflush_r+0x32>
 801b58c:	0599      	lsls	r1, r3, #22
 801b58e:	d402      	bmi.n	801b596 <_fflush_r+0x32>
 801b590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b592:	f7ff fbfe 	bl	801ad92 <__retarget_lock_acquire_recursive>
 801b596:	4628      	mov	r0, r5
 801b598:	4621      	mov	r1, r4
 801b59a:	f7ff ff5d 	bl	801b458 <__sflush_r>
 801b59e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b5a0:	07da      	lsls	r2, r3, #31
 801b5a2:	4605      	mov	r5, r0
 801b5a4:	d4e4      	bmi.n	801b570 <_fflush_r+0xc>
 801b5a6:	89a3      	ldrh	r3, [r4, #12]
 801b5a8:	059b      	lsls	r3, r3, #22
 801b5aa:	d4e1      	bmi.n	801b570 <_fflush_r+0xc>
 801b5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b5ae:	f7ff fbf1 	bl	801ad94 <__retarget_lock_release_recursive>
 801b5b2:	e7dd      	b.n	801b570 <_fflush_r+0xc>

0801b5b4 <fiprintf>:
 801b5b4:	b40e      	push	{r1, r2, r3}
 801b5b6:	b503      	push	{r0, r1, lr}
 801b5b8:	4601      	mov	r1, r0
 801b5ba:	ab03      	add	r3, sp, #12
 801b5bc:	4805      	ldr	r0, [pc, #20]	; (801b5d4 <fiprintf+0x20>)
 801b5be:	f853 2b04 	ldr.w	r2, [r3], #4
 801b5c2:	6800      	ldr	r0, [r0, #0]
 801b5c4:	9301      	str	r3, [sp, #4]
 801b5c6:	f000 f867 	bl	801b698 <_vfiprintf_r>
 801b5ca:	b002      	add	sp, #8
 801b5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b5d0:	b003      	add	sp, #12
 801b5d2:	4770      	bx	lr
 801b5d4:	200001a0 	.word	0x200001a0

0801b5d8 <abort>:
 801b5d8:	b508      	push	{r3, lr}
 801b5da:	2006      	movs	r0, #6
 801b5dc:	f000 fa34 	bl	801ba48 <raise>
 801b5e0:	2001      	movs	r0, #1
 801b5e2:	f7ec f953 	bl	800788c <_exit>

0801b5e6 <_realloc_r>:
 801b5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5ea:	4680      	mov	r8, r0
 801b5ec:	4614      	mov	r4, r2
 801b5ee:	460e      	mov	r6, r1
 801b5f0:	b921      	cbnz	r1, 801b5fc <_realloc_r+0x16>
 801b5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b5f6:	4611      	mov	r1, r2
 801b5f8:	f7ff b8d6 	b.w	801a7a8 <_malloc_r>
 801b5fc:	b92a      	cbnz	r2, 801b60a <_realloc_r+0x24>
 801b5fe:	f7ff fbf7 	bl	801adf0 <_free_r>
 801b602:	4625      	mov	r5, r4
 801b604:	4628      	mov	r0, r5
 801b606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b60a:	f000 fa39 	bl	801ba80 <_malloc_usable_size_r>
 801b60e:	4284      	cmp	r4, r0
 801b610:	4607      	mov	r7, r0
 801b612:	d802      	bhi.n	801b61a <_realloc_r+0x34>
 801b614:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b618:	d812      	bhi.n	801b640 <_realloc_r+0x5a>
 801b61a:	4621      	mov	r1, r4
 801b61c:	4640      	mov	r0, r8
 801b61e:	f7ff f8c3 	bl	801a7a8 <_malloc_r>
 801b622:	4605      	mov	r5, r0
 801b624:	2800      	cmp	r0, #0
 801b626:	d0ed      	beq.n	801b604 <_realloc_r+0x1e>
 801b628:	42bc      	cmp	r4, r7
 801b62a:	4622      	mov	r2, r4
 801b62c:	4631      	mov	r1, r6
 801b62e:	bf28      	it	cs
 801b630:	463a      	movcs	r2, r7
 801b632:	f7ff fbb0 	bl	801ad96 <memcpy>
 801b636:	4631      	mov	r1, r6
 801b638:	4640      	mov	r0, r8
 801b63a:	f7ff fbd9 	bl	801adf0 <_free_r>
 801b63e:	e7e1      	b.n	801b604 <_realloc_r+0x1e>
 801b640:	4635      	mov	r5, r6
 801b642:	e7df      	b.n	801b604 <_realloc_r+0x1e>

0801b644 <__sfputc_r>:
 801b644:	6893      	ldr	r3, [r2, #8]
 801b646:	3b01      	subs	r3, #1
 801b648:	2b00      	cmp	r3, #0
 801b64a:	b410      	push	{r4}
 801b64c:	6093      	str	r3, [r2, #8]
 801b64e:	da08      	bge.n	801b662 <__sfputc_r+0x1e>
 801b650:	6994      	ldr	r4, [r2, #24]
 801b652:	42a3      	cmp	r3, r4
 801b654:	db01      	blt.n	801b65a <__sfputc_r+0x16>
 801b656:	290a      	cmp	r1, #10
 801b658:	d103      	bne.n	801b662 <__sfputc_r+0x1e>
 801b65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b65e:	f000 b935 	b.w	801b8cc <__swbuf_r>
 801b662:	6813      	ldr	r3, [r2, #0]
 801b664:	1c58      	adds	r0, r3, #1
 801b666:	6010      	str	r0, [r2, #0]
 801b668:	7019      	strb	r1, [r3, #0]
 801b66a:	4608      	mov	r0, r1
 801b66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b670:	4770      	bx	lr

0801b672 <__sfputs_r>:
 801b672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b674:	4606      	mov	r6, r0
 801b676:	460f      	mov	r7, r1
 801b678:	4614      	mov	r4, r2
 801b67a:	18d5      	adds	r5, r2, r3
 801b67c:	42ac      	cmp	r4, r5
 801b67e:	d101      	bne.n	801b684 <__sfputs_r+0x12>
 801b680:	2000      	movs	r0, #0
 801b682:	e007      	b.n	801b694 <__sfputs_r+0x22>
 801b684:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b688:	463a      	mov	r2, r7
 801b68a:	4630      	mov	r0, r6
 801b68c:	f7ff ffda 	bl	801b644 <__sfputc_r>
 801b690:	1c43      	adds	r3, r0, #1
 801b692:	d1f3      	bne.n	801b67c <__sfputs_r+0xa>
 801b694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b698 <_vfiprintf_r>:
 801b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b69c:	460d      	mov	r5, r1
 801b69e:	b09d      	sub	sp, #116	; 0x74
 801b6a0:	4614      	mov	r4, r2
 801b6a2:	4698      	mov	r8, r3
 801b6a4:	4606      	mov	r6, r0
 801b6a6:	b118      	cbz	r0, 801b6b0 <_vfiprintf_r+0x18>
 801b6a8:	6a03      	ldr	r3, [r0, #32]
 801b6aa:	b90b      	cbnz	r3, 801b6b0 <_vfiprintf_r+0x18>
 801b6ac:	f7ff f9d2 	bl	801aa54 <__sinit>
 801b6b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b6b2:	07d9      	lsls	r1, r3, #31
 801b6b4:	d405      	bmi.n	801b6c2 <_vfiprintf_r+0x2a>
 801b6b6:	89ab      	ldrh	r3, [r5, #12]
 801b6b8:	059a      	lsls	r2, r3, #22
 801b6ba:	d402      	bmi.n	801b6c2 <_vfiprintf_r+0x2a>
 801b6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b6be:	f7ff fb68 	bl	801ad92 <__retarget_lock_acquire_recursive>
 801b6c2:	89ab      	ldrh	r3, [r5, #12]
 801b6c4:	071b      	lsls	r3, r3, #28
 801b6c6:	d501      	bpl.n	801b6cc <_vfiprintf_r+0x34>
 801b6c8:	692b      	ldr	r3, [r5, #16]
 801b6ca:	b99b      	cbnz	r3, 801b6f4 <_vfiprintf_r+0x5c>
 801b6cc:	4629      	mov	r1, r5
 801b6ce:	4630      	mov	r0, r6
 801b6d0:	f000 f93a 	bl	801b948 <__swsetup_r>
 801b6d4:	b170      	cbz	r0, 801b6f4 <_vfiprintf_r+0x5c>
 801b6d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b6d8:	07dc      	lsls	r4, r3, #31
 801b6da:	d504      	bpl.n	801b6e6 <_vfiprintf_r+0x4e>
 801b6dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b6e0:	b01d      	add	sp, #116	; 0x74
 801b6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6e6:	89ab      	ldrh	r3, [r5, #12]
 801b6e8:	0598      	lsls	r0, r3, #22
 801b6ea:	d4f7      	bmi.n	801b6dc <_vfiprintf_r+0x44>
 801b6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b6ee:	f7ff fb51 	bl	801ad94 <__retarget_lock_release_recursive>
 801b6f2:	e7f3      	b.n	801b6dc <_vfiprintf_r+0x44>
 801b6f4:	2300      	movs	r3, #0
 801b6f6:	9309      	str	r3, [sp, #36]	; 0x24
 801b6f8:	2320      	movs	r3, #32
 801b6fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b6fe:	f8cd 800c 	str.w	r8, [sp, #12]
 801b702:	2330      	movs	r3, #48	; 0x30
 801b704:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b8b8 <_vfiprintf_r+0x220>
 801b708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b70c:	f04f 0901 	mov.w	r9, #1
 801b710:	4623      	mov	r3, r4
 801b712:	469a      	mov	sl, r3
 801b714:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b718:	b10a      	cbz	r2, 801b71e <_vfiprintf_r+0x86>
 801b71a:	2a25      	cmp	r2, #37	; 0x25
 801b71c:	d1f9      	bne.n	801b712 <_vfiprintf_r+0x7a>
 801b71e:	ebba 0b04 	subs.w	fp, sl, r4
 801b722:	d00b      	beq.n	801b73c <_vfiprintf_r+0xa4>
 801b724:	465b      	mov	r3, fp
 801b726:	4622      	mov	r2, r4
 801b728:	4629      	mov	r1, r5
 801b72a:	4630      	mov	r0, r6
 801b72c:	f7ff ffa1 	bl	801b672 <__sfputs_r>
 801b730:	3001      	adds	r0, #1
 801b732:	f000 80a9 	beq.w	801b888 <_vfiprintf_r+0x1f0>
 801b736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b738:	445a      	add	r2, fp
 801b73a:	9209      	str	r2, [sp, #36]	; 0x24
 801b73c:	f89a 3000 	ldrb.w	r3, [sl]
 801b740:	2b00      	cmp	r3, #0
 801b742:	f000 80a1 	beq.w	801b888 <_vfiprintf_r+0x1f0>
 801b746:	2300      	movs	r3, #0
 801b748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b750:	f10a 0a01 	add.w	sl, sl, #1
 801b754:	9304      	str	r3, [sp, #16]
 801b756:	9307      	str	r3, [sp, #28]
 801b758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b75c:	931a      	str	r3, [sp, #104]	; 0x68
 801b75e:	4654      	mov	r4, sl
 801b760:	2205      	movs	r2, #5
 801b762:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b766:	4854      	ldr	r0, [pc, #336]	; (801b8b8 <_vfiprintf_r+0x220>)
 801b768:	f7e4 fd62 	bl	8000230 <memchr>
 801b76c:	9a04      	ldr	r2, [sp, #16]
 801b76e:	b9d8      	cbnz	r0, 801b7a8 <_vfiprintf_r+0x110>
 801b770:	06d1      	lsls	r1, r2, #27
 801b772:	bf44      	itt	mi
 801b774:	2320      	movmi	r3, #32
 801b776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b77a:	0713      	lsls	r3, r2, #28
 801b77c:	bf44      	itt	mi
 801b77e:	232b      	movmi	r3, #43	; 0x2b
 801b780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b784:	f89a 3000 	ldrb.w	r3, [sl]
 801b788:	2b2a      	cmp	r3, #42	; 0x2a
 801b78a:	d015      	beq.n	801b7b8 <_vfiprintf_r+0x120>
 801b78c:	9a07      	ldr	r2, [sp, #28]
 801b78e:	4654      	mov	r4, sl
 801b790:	2000      	movs	r0, #0
 801b792:	f04f 0c0a 	mov.w	ip, #10
 801b796:	4621      	mov	r1, r4
 801b798:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b79c:	3b30      	subs	r3, #48	; 0x30
 801b79e:	2b09      	cmp	r3, #9
 801b7a0:	d94d      	bls.n	801b83e <_vfiprintf_r+0x1a6>
 801b7a2:	b1b0      	cbz	r0, 801b7d2 <_vfiprintf_r+0x13a>
 801b7a4:	9207      	str	r2, [sp, #28]
 801b7a6:	e014      	b.n	801b7d2 <_vfiprintf_r+0x13a>
 801b7a8:	eba0 0308 	sub.w	r3, r0, r8
 801b7ac:	fa09 f303 	lsl.w	r3, r9, r3
 801b7b0:	4313      	orrs	r3, r2
 801b7b2:	9304      	str	r3, [sp, #16]
 801b7b4:	46a2      	mov	sl, r4
 801b7b6:	e7d2      	b.n	801b75e <_vfiprintf_r+0xc6>
 801b7b8:	9b03      	ldr	r3, [sp, #12]
 801b7ba:	1d19      	adds	r1, r3, #4
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	9103      	str	r1, [sp, #12]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	bfbb      	ittet	lt
 801b7c4:	425b      	neglt	r3, r3
 801b7c6:	f042 0202 	orrlt.w	r2, r2, #2
 801b7ca:	9307      	strge	r3, [sp, #28]
 801b7cc:	9307      	strlt	r3, [sp, #28]
 801b7ce:	bfb8      	it	lt
 801b7d0:	9204      	strlt	r2, [sp, #16]
 801b7d2:	7823      	ldrb	r3, [r4, #0]
 801b7d4:	2b2e      	cmp	r3, #46	; 0x2e
 801b7d6:	d10c      	bne.n	801b7f2 <_vfiprintf_r+0x15a>
 801b7d8:	7863      	ldrb	r3, [r4, #1]
 801b7da:	2b2a      	cmp	r3, #42	; 0x2a
 801b7dc:	d134      	bne.n	801b848 <_vfiprintf_r+0x1b0>
 801b7de:	9b03      	ldr	r3, [sp, #12]
 801b7e0:	1d1a      	adds	r2, r3, #4
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	9203      	str	r2, [sp, #12]
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	bfb8      	it	lt
 801b7ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b7ee:	3402      	adds	r4, #2
 801b7f0:	9305      	str	r3, [sp, #20]
 801b7f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b8c8 <_vfiprintf_r+0x230>
 801b7f6:	7821      	ldrb	r1, [r4, #0]
 801b7f8:	2203      	movs	r2, #3
 801b7fa:	4650      	mov	r0, sl
 801b7fc:	f7e4 fd18 	bl	8000230 <memchr>
 801b800:	b138      	cbz	r0, 801b812 <_vfiprintf_r+0x17a>
 801b802:	9b04      	ldr	r3, [sp, #16]
 801b804:	eba0 000a 	sub.w	r0, r0, sl
 801b808:	2240      	movs	r2, #64	; 0x40
 801b80a:	4082      	lsls	r2, r0
 801b80c:	4313      	orrs	r3, r2
 801b80e:	3401      	adds	r4, #1
 801b810:	9304      	str	r3, [sp, #16]
 801b812:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b816:	4829      	ldr	r0, [pc, #164]	; (801b8bc <_vfiprintf_r+0x224>)
 801b818:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b81c:	2206      	movs	r2, #6
 801b81e:	f7e4 fd07 	bl	8000230 <memchr>
 801b822:	2800      	cmp	r0, #0
 801b824:	d03f      	beq.n	801b8a6 <_vfiprintf_r+0x20e>
 801b826:	4b26      	ldr	r3, [pc, #152]	; (801b8c0 <_vfiprintf_r+0x228>)
 801b828:	bb1b      	cbnz	r3, 801b872 <_vfiprintf_r+0x1da>
 801b82a:	9b03      	ldr	r3, [sp, #12]
 801b82c:	3307      	adds	r3, #7
 801b82e:	f023 0307 	bic.w	r3, r3, #7
 801b832:	3308      	adds	r3, #8
 801b834:	9303      	str	r3, [sp, #12]
 801b836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b838:	443b      	add	r3, r7
 801b83a:	9309      	str	r3, [sp, #36]	; 0x24
 801b83c:	e768      	b.n	801b710 <_vfiprintf_r+0x78>
 801b83e:	fb0c 3202 	mla	r2, ip, r2, r3
 801b842:	460c      	mov	r4, r1
 801b844:	2001      	movs	r0, #1
 801b846:	e7a6      	b.n	801b796 <_vfiprintf_r+0xfe>
 801b848:	2300      	movs	r3, #0
 801b84a:	3401      	adds	r4, #1
 801b84c:	9305      	str	r3, [sp, #20]
 801b84e:	4619      	mov	r1, r3
 801b850:	f04f 0c0a 	mov.w	ip, #10
 801b854:	4620      	mov	r0, r4
 801b856:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b85a:	3a30      	subs	r2, #48	; 0x30
 801b85c:	2a09      	cmp	r2, #9
 801b85e:	d903      	bls.n	801b868 <_vfiprintf_r+0x1d0>
 801b860:	2b00      	cmp	r3, #0
 801b862:	d0c6      	beq.n	801b7f2 <_vfiprintf_r+0x15a>
 801b864:	9105      	str	r1, [sp, #20]
 801b866:	e7c4      	b.n	801b7f2 <_vfiprintf_r+0x15a>
 801b868:	fb0c 2101 	mla	r1, ip, r1, r2
 801b86c:	4604      	mov	r4, r0
 801b86e:	2301      	movs	r3, #1
 801b870:	e7f0      	b.n	801b854 <_vfiprintf_r+0x1bc>
 801b872:	ab03      	add	r3, sp, #12
 801b874:	9300      	str	r3, [sp, #0]
 801b876:	462a      	mov	r2, r5
 801b878:	4b12      	ldr	r3, [pc, #72]	; (801b8c4 <_vfiprintf_r+0x22c>)
 801b87a:	a904      	add	r1, sp, #16
 801b87c:	4630      	mov	r0, r6
 801b87e:	f3af 8000 	nop.w
 801b882:	4607      	mov	r7, r0
 801b884:	1c78      	adds	r0, r7, #1
 801b886:	d1d6      	bne.n	801b836 <_vfiprintf_r+0x19e>
 801b888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b88a:	07d9      	lsls	r1, r3, #31
 801b88c:	d405      	bmi.n	801b89a <_vfiprintf_r+0x202>
 801b88e:	89ab      	ldrh	r3, [r5, #12]
 801b890:	059a      	lsls	r2, r3, #22
 801b892:	d402      	bmi.n	801b89a <_vfiprintf_r+0x202>
 801b894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b896:	f7ff fa7d 	bl	801ad94 <__retarget_lock_release_recursive>
 801b89a:	89ab      	ldrh	r3, [r5, #12]
 801b89c:	065b      	lsls	r3, r3, #25
 801b89e:	f53f af1d 	bmi.w	801b6dc <_vfiprintf_r+0x44>
 801b8a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b8a4:	e71c      	b.n	801b6e0 <_vfiprintf_r+0x48>
 801b8a6:	ab03      	add	r3, sp, #12
 801b8a8:	9300      	str	r3, [sp, #0]
 801b8aa:	462a      	mov	r2, r5
 801b8ac:	4b05      	ldr	r3, [pc, #20]	; (801b8c4 <_vfiprintf_r+0x22c>)
 801b8ae:	a904      	add	r1, sp, #16
 801b8b0:	4630      	mov	r0, r6
 801b8b2:	f7ff fcaf 	bl	801b214 <_printf_i>
 801b8b6:	e7e4      	b.n	801b882 <_vfiprintf_r+0x1ea>
 801b8b8:	0801d309 	.word	0x0801d309
 801b8bc:	0801d313 	.word	0x0801d313
 801b8c0:	00000000 	.word	0x00000000
 801b8c4:	0801b673 	.word	0x0801b673
 801b8c8:	0801d30f 	.word	0x0801d30f

0801b8cc <__swbuf_r>:
 801b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8ce:	460e      	mov	r6, r1
 801b8d0:	4614      	mov	r4, r2
 801b8d2:	4605      	mov	r5, r0
 801b8d4:	b118      	cbz	r0, 801b8de <__swbuf_r+0x12>
 801b8d6:	6a03      	ldr	r3, [r0, #32]
 801b8d8:	b90b      	cbnz	r3, 801b8de <__swbuf_r+0x12>
 801b8da:	f7ff f8bb 	bl	801aa54 <__sinit>
 801b8de:	69a3      	ldr	r3, [r4, #24]
 801b8e0:	60a3      	str	r3, [r4, #8]
 801b8e2:	89a3      	ldrh	r3, [r4, #12]
 801b8e4:	071a      	lsls	r2, r3, #28
 801b8e6:	d525      	bpl.n	801b934 <__swbuf_r+0x68>
 801b8e8:	6923      	ldr	r3, [r4, #16]
 801b8ea:	b31b      	cbz	r3, 801b934 <__swbuf_r+0x68>
 801b8ec:	6823      	ldr	r3, [r4, #0]
 801b8ee:	6922      	ldr	r2, [r4, #16]
 801b8f0:	1a98      	subs	r0, r3, r2
 801b8f2:	6963      	ldr	r3, [r4, #20]
 801b8f4:	b2f6      	uxtb	r6, r6
 801b8f6:	4283      	cmp	r3, r0
 801b8f8:	4637      	mov	r7, r6
 801b8fa:	dc04      	bgt.n	801b906 <__swbuf_r+0x3a>
 801b8fc:	4621      	mov	r1, r4
 801b8fe:	4628      	mov	r0, r5
 801b900:	f7ff fe30 	bl	801b564 <_fflush_r>
 801b904:	b9e0      	cbnz	r0, 801b940 <__swbuf_r+0x74>
 801b906:	68a3      	ldr	r3, [r4, #8]
 801b908:	3b01      	subs	r3, #1
 801b90a:	60a3      	str	r3, [r4, #8]
 801b90c:	6823      	ldr	r3, [r4, #0]
 801b90e:	1c5a      	adds	r2, r3, #1
 801b910:	6022      	str	r2, [r4, #0]
 801b912:	701e      	strb	r6, [r3, #0]
 801b914:	6962      	ldr	r2, [r4, #20]
 801b916:	1c43      	adds	r3, r0, #1
 801b918:	429a      	cmp	r2, r3
 801b91a:	d004      	beq.n	801b926 <__swbuf_r+0x5a>
 801b91c:	89a3      	ldrh	r3, [r4, #12]
 801b91e:	07db      	lsls	r3, r3, #31
 801b920:	d506      	bpl.n	801b930 <__swbuf_r+0x64>
 801b922:	2e0a      	cmp	r6, #10
 801b924:	d104      	bne.n	801b930 <__swbuf_r+0x64>
 801b926:	4621      	mov	r1, r4
 801b928:	4628      	mov	r0, r5
 801b92a:	f7ff fe1b 	bl	801b564 <_fflush_r>
 801b92e:	b938      	cbnz	r0, 801b940 <__swbuf_r+0x74>
 801b930:	4638      	mov	r0, r7
 801b932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b934:	4621      	mov	r1, r4
 801b936:	4628      	mov	r0, r5
 801b938:	f000 f806 	bl	801b948 <__swsetup_r>
 801b93c:	2800      	cmp	r0, #0
 801b93e:	d0d5      	beq.n	801b8ec <__swbuf_r+0x20>
 801b940:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b944:	e7f4      	b.n	801b930 <__swbuf_r+0x64>
	...

0801b948 <__swsetup_r>:
 801b948:	b538      	push	{r3, r4, r5, lr}
 801b94a:	4b2a      	ldr	r3, [pc, #168]	; (801b9f4 <__swsetup_r+0xac>)
 801b94c:	4605      	mov	r5, r0
 801b94e:	6818      	ldr	r0, [r3, #0]
 801b950:	460c      	mov	r4, r1
 801b952:	b118      	cbz	r0, 801b95c <__swsetup_r+0x14>
 801b954:	6a03      	ldr	r3, [r0, #32]
 801b956:	b90b      	cbnz	r3, 801b95c <__swsetup_r+0x14>
 801b958:	f7ff f87c 	bl	801aa54 <__sinit>
 801b95c:	89a3      	ldrh	r3, [r4, #12]
 801b95e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b962:	0718      	lsls	r0, r3, #28
 801b964:	d422      	bmi.n	801b9ac <__swsetup_r+0x64>
 801b966:	06d9      	lsls	r1, r3, #27
 801b968:	d407      	bmi.n	801b97a <__swsetup_r+0x32>
 801b96a:	2309      	movs	r3, #9
 801b96c:	602b      	str	r3, [r5, #0]
 801b96e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b972:	81a3      	strh	r3, [r4, #12]
 801b974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b978:	e034      	b.n	801b9e4 <__swsetup_r+0x9c>
 801b97a:	0758      	lsls	r0, r3, #29
 801b97c:	d512      	bpl.n	801b9a4 <__swsetup_r+0x5c>
 801b97e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b980:	b141      	cbz	r1, 801b994 <__swsetup_r+0x4c>
 801b982:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b986:	4299      	cmp	r1, r3
 801b988:	d002      	beq.n	801b990 <__swsetup_r+0x48>
 801b98a:	4628      	mov	r0, r5
 801b98c:	f7ff fa30 	bl	801adf0 <_free_r>
 801b990:	2300      	movs	r3, #0
 801b992:	6363      	str	r3, [r4, #52]	; 0x34
 801b994:	89a3      	ldrh	r3, [r4, #12]
 801b996:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b99a:	81a3      	strh	r3, [r4, #12]
 801b99c:	2300      	movs	r3, #0
 801b99e:	6063      	str	r3, [r4, #4]
 801b9a0:	6923      	ldr	r3, [r4, #16]
 801b9a2:	6023      	str	r3, [r4, #0]
 801b9a4:	89a3      	ldrh	r3, [r4, #12]
 801b9a6:	f043 0308 	orr.w	r3, r3, #8
 801b9aa:	81a3      	strh	r3, [r4, #12]
 801b9ac:	6923      	ldr	r3, [r4, #16]
 801b9ae:	b94b      	cbnz	r3, 801b9c4 <__swsetup_r+0x7c>
 801b9b0:	89a3      	ldrh	r3, [r4, #12]
 801b9b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b9b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b9ba:	d003      	beq.n	801b9c4 <__swsetup_r+0x7c>
 801b9bc:	4621      	mov	r1, r4
 801b9be:	4628      	mov	r0, r5
 801b9c0:	f000 f88c 	bl	801badc <__smakebuf_r>
 801b9c4:	89a0      	ldrh	r0, [r4, #12]
 801b9c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b9ca:	f010 0301 	ands.w	r3, r0, #1
 801b9ce:	d00a      	beq.n	801b9e6 <__swsetup_r+0x9e>
 801b9d0:	2300      	movs	r3, #0
 801b9d2:	60a3      	str	r3, [r4, #8]
 801b9d4:	6963      	ldr	r3, [r4, #20]
 801b9d6:	425b      	negs	r3, r3
 801b9d8:	61a3      	str	r3, [r4, #24]
 801b9da:	6923      	ldr	r3, [r4, #16]
 801b9dc:	b943      	cbnz	r3, 801b9f0 <__swsetup_r+0xa8>
 801b9de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b9e2:	d1c4      	bne.n	801b96e <__swsetup_r+0x26>
 801b9e4:	bd38      	pop	{r3, r4, r5, pc}
 801b9e6:	0781      	lsls	r1, r0, #30
 801b9e8:	bf58      	it	pl
 801b9ea:	6963      	ldrpl	r3, [r4, #20]
 801b9ec:	60a3      	str	r3, [r4, #8]
 801b9ee:	e7f4      	b.n	801b9da <__swsetup_r+0x92>
 801b9f0:	2000      	movs	r0, #0
 801b9f2:	e7f7      	b.n	801b9e4 <__swsetup_r+0x9c>
 801b9f4:	200001a0 	.word	0x200001a0

0801b9f8 <_raise_r>:
 801b9f8:	291f      	cmp	r1, #31
 801b9fa:	b538      	push	{r3, r4, r5, lr}
 801b9fc:	4604      	mov	r4, r0
 801b9fe:	460d      	mov	r5, r1
 801ba00:	d904      	bls.n	801ba0c <_raise_r+0x14>
 801ba02:	2316      	movs	r3, #22
 801ba04:	6003      	str	r3, [r0, #0]
 801ba06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba0a:	bd38      	pop	{r3, r4, r5, pc}
 801ba0c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ba0e:	b112      	cbz	r2, 801ba16 <_raise_r+0x1e>
 801ba10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ba14:	b94b      	cbnz	r3, 801ba2a <_raise_r+0x32>
 801ba16:	4620      	mov	r0, r4
 801ba18:	f000 f830 	bl	801ba7c <_getpid_r>
 801ba1c:	462a      	mov	r2, r5
 801ba1e:	4601      	mov	r1, r0
 801ba20:	4620      	mov	r0, r4
 801ba22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ba26:	f000 b817 	b.w	801ba58 <_kill_r>
 801ba2a:	2b01      	cmp	r3, #1
 801ba2c:	d00a      	beq.n	801ba44 <_raise_r+0x4c>
 801ba2e:	1c59      	adds	r1, r3, #1
 801ba30:	d103      	bne.n	801ba3a <_raise_r+0x42>
 801ba32:	2316      	movs	r3, #22
 801ba34:	6003      	str	r3, [r0, #0]
 801ba36:	2001      	movs	r0, #1
 801ba38:	e7e7      	b.n	801ba0a <_raise_r+0x12>
 801ba3a:	2400      	movs	r4, #0
 801ba3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ba40:	4628      	mov	r0, r5
 801ba42:	4798      	blx	r3
 801ba44:	2000      	movs	r0, #0
 801ba46:	e7e0      	b.n	801ba0a <_raise_r+0x12>

0801ba48 <raise>:
 801ba48:	4b02      	ldr	r3, [pc, #8]	; (801ba54 <raise+0xc>)
 801ba4a:	4601      	mov	r1, r0
 801ba4c:	6818      	ldr	r0, [r3, #0]
 801ba4e:	f7ff bfd3 	b.w	801b9f8 <_raise_r>
 801ba52:	bf00      	nop
 801ba54:	200001a0 	.word	0x200001a0

0801ba58 <_kill_r>:
 801ba58:	b538      	push	{r3, r4, r5, lr}
 801ba5a:	4d07      	ldr	r5, [pc, #28]	; (801ba78 <_kill_r+0x20>)
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	4604      	mov	r4, r0
 801ba60:	4608      	mov	r0, r1
 801ba62:	4611      	mov	r1, r2
 801ba64:	602b      	str	r3, [r5, #0]
 801ba66:	f7eb ff01 	bl	800786c <_kill>
 801ba6a:	1c43      	adds	r3, r0, #1
 801ba6c:	d102      	bne.n	801ba74 <_kill_r+0x1c>
 801ba6e:	682b      	ldr	r3, [r5, #0]
 801ba70:	b103      	cbz	r3, 801ba74 <_kill_r+0x1c>
 801ba72:	6023      	str	r3, [r4, #0]
 801ba74:	bd38      	pop	{r3, r4, r5, pc}
 801ba76:	bf00      	nop
 801ba78:	20007b14 	.word	0x20007b14

0801ba7c <_getpid_r>:
 801ba7c:	f7eb beee 	b.w	800785c <_getpid>

0801ba80 <_malloc_usable_size_r>:
 801ba80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ba84:	1f18      	subs	r0, r3, #4
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	bfbc      	itt	lt
 801ba8a:	580b      	ldrlt	r3, [r1, r0]
 801ba8c:	18c0      	addlt	r0, r0, r3
 801ba8e:	4770      	bx	lr

0801ba90 <__swhatbuf_r>:
 801ba90:	b570      	push	{r4, r5, r6, lr}
 801ba92:	460c      	mov	r4, r1
 801ba94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba98:	2900      	cmp	r1, #0
 801ba9a:	b096      	sub	sp, #88	; 0x58
 801ba9c:	4615      	mov	r5, r2
 801ba9e:	461e      	mov	r6, r3
 801baa0:	da0d      	bge.n	801babe <__swhatbuf_r+0x2e>
 801baa2:	89a3      	ldrh	r3, [r4, #12]
 801baa4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801baa8:	f04f 0100 	mov.w	r1, #0
 801baac:	bf0c      	ite	eq
 801baae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801bab2:	2340      	movne	r3, #64	; 0x40
 801bab4:	2000      	movs	r0, #0
 801bab6:	6031      	str	r1, [r6, #0]
 801bab8:	602b      	str	r3, [r5, #0]
 801baba:	b016      	add	sp, #88	; 0x58
 801babc:	bd70      	pop	{r4, r5, r6, pc}
 801babe:	466a      	mov	r2, sp
 801bac0:	f000 f848 	bl	801bb54 <_fstat_r>
 801bac4:	2800      	cmp	r0, #0
 801bac6:	dbec      	blt.n	801baa2 <__swhatbuf_r+0x12>
 801bac8:	9901      	ldr	r1, [sp, #4]
 801baca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801bace:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801bad2:	4259      	negs	r1, r3
 801bad4:	4159      	adcs	r1, r3
 801bad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bada:	e7eb      	b.n	801bab4 <__swhatbuf_r+0x24>

0801badc <__smakebuf_r>:
 801badc:	898b      	ldrh	r3, [r1, #12]
 801bade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bae0:	079d      	lsls	r5, r3, #30
 801bae2:	4606      	mov	r6, r0
 801bae4:	460c      	mov	r4, r1
 801bae6:	d507      	bpl.n	801baf8 <__smakebuf_r+0x1c>
 801bae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801baec:	6023      	str	r3, [r4, #0]
 801baee:	6123      	str	r3, [r4, #16]
 801baf0:	2301      	movs	r3, #1
 801baf2:	6163      	str	r3, [r4, #20]
 801baf4:	b002      	add	sp, #8
 801baf6:	bd70      	pop	{r4, r5, r6, pc}
 801baf8:	ab01      	add	r3, sp, #4
 801bafa:	466a      	mov	r2, sp
 801bafc:	f7ff ffc8 	bl	801ba90 <__swhatbuf_r>
 801bb00:	9900      	ldr	r1, [sp, #0]
 801bb02:	4605      	mov	r5, r0
 801bb04:	4630      	mov	r0, r6
 801bb06:	f7fe fe4f 	bl	801a7a8 <_malloc_r>
 801bb0a:	b948      	cbnz	r0, 801bb20 <__smakebuf_r+0x44>
 801bb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb10:	059a      	lsls	r2, r3, #22
 801bb12:	d4ef      	bmi.n	801baf4 <__smakebuf_r+0x18>
 801bb14:	f023 0303 	bic.w	r3, r3, #3
 801bb18:	f043 0302 	orr.w	r3, r3, #2
 801bb1c:	81a3      	strh	r3, [r4, #12]
 801bb1e:	e7e3      	b.n	801bae8 <__smakebuf_r+0xc>
 801bb20:	89a3      	ldrh	r3, [r4, #12]
 801bb22:	6020      	str	r0, [r4, #0]
 801bb24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb28:	81a3      	strh	r3, [r4, #12]
 801bb2a:	9b00      	ldr	r3, [sp, #0]
 801bb2c:	6163      	str	r3, [r4, #20]
 801bb2e:	9b01      	ldr	r3, [sp, #4]
 801bb30:	6120      	str	r0, [r4, #16]
 801bb32:	b15b      	cbz	r3, 801bb4c <__smakebuf_r+0x70>
 801bb34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bb38:	4630      	mov	r0, r6
 801bb3a:	f000 f81d 	bl	801bb78 <_isatty_r>
 801bb3e:	b128      	cbz	r0, 801bb4c <__smakebuf_r+0x70>
 801bb40:	89a3      	ldrh	r3, [r4, #12]
 801bb42:	f023 0303 	bic.w	r3, r3, #3
 801bb46:	f043 0301 	orr.w	r3, r3, #1
 801bb4a:	81a3      	strh	r3, [r4, #12]
 801bb4c:	89a3      	ldrh	r3, [r4, #12]
 801bb4e:	431d      	orrs	r5, r3
 801bb50:	81a5      	strh	r5, [r4, #12]
 801bb52:	e7cf      	b.n	801baf4 <__smakebuf_r+0x18>

0801bb54 <_fstat_r>:
 801bb54:	b538      	push	{r3, r4, r5, lr}
 801bb56:	4d07      	ldr	r5, [pc, #28]	; (801bb74 <_fstat_r+0x20>)
 801bb58:	2300      	movs	r3, #0
 801bb5a:	4604      	mov	r4, r0
 801bb5c:	4608      	mov	r0, r1
 801bb5e:	4611      	mov	r1, r2
 801bb60:	602b      	str	r3, [r5, #0]
 801bb62:	f7eb fee2 	bl	800792a <_fstat>
 801bb66:	1c43      	adds	r3, r0, #1
 801bb68:	d102      	bne.n	801bb70 <_fstat_r+0x1c>
 801bb6a:	682b      	ldr	r3, [r5, #0]
 801bb6c:	b103      	cbz	r3, 801bb70 <_fstat_r+0x1c>
 801bb6e:	6023      	str	r3, [r4, #0]
 801bb70:	bd38      	pop	{r3, r4, r5, pc}
 801bb72:	bf00      	nop
 801bb74:	20007b14 	.word	0x20007b14

0801bb78 <_isatty_r>:
 801bb78:	b538      	push	{r3, r4, r5, lr}
 801bb7a:	4d06      	ldr	r5, [pc, #24]	; (801bb94 <_isatty_r+0x1c>)
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	4604      	mov	r4, r0
 801bb80:	4608      	mov	r0, r1
 801bb82:	602b      	str	r3, [r5, #0]
 801bb84:	f7eb fee1 	bl	800794a <_isatty>
 801bb88:	1c43      	adds	r3, r0, #1
 801bb8a:	d102      	bne.n	801bb92 <_isatty_r+0x1a>
 801bb8c:	682b      	ldr	r3, [r5, #0]
 801bb8e:	b103      	cbz	r3, 801bb92 <_isatty_r+0x1a>
 801bb90:	6023      	str	r3, [r4, #0]
 801bb92:	bd38      	pop	{r3, r4, r5, pc}
 801bb94:	20007b14 	.word	0x20007b14

0801bb98 <_init>:
 801bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb9a:	bf00      	nop
 801bb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb9e:	bc08      	pop	{r3}
 801bba0:	469e      	mov	lr, r3
 801bba2:	4770      	bx	lr

0801bba4 <_fini>:
 801bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bba6:	bf00      	nop
 801bba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bbaa:	bc08      	pop	{r3}
 801bbac:	469e      	mov	lr, r3
 801bbae:	4770      	bx	lr
