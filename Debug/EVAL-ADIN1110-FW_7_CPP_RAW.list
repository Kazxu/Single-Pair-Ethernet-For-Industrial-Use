
EVAL-ADIN1110-FW_7_CPP_RAW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a2d0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017a0  0801a490  0801a490  0002a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bc30  0801bc30  000301a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801bc30  0801bc30  0002bc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bc38  0801bc38  000301a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bc38  0801bc38  0002bc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bc3c  0801bc3c  0002bc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0801bc40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000078f4  200001a0  0801bde0  000301a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007a94  0801bde0  00037a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031af2  00000000  00000000  00030213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007fcd  00000000  00000000  00061d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002278  00000000  00000000  00069cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ae2  00000000  00000000  0006bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000417b3  00000000  00000000  0006da32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038dcc  00000000  00000000  000af1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00142958  00000000  00000000  000e7fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009724  00000000  00000000  0022a90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00234030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001a0 	.word	0x200001a0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801a478 	.word	0x0801a478

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001a4 	.word	0x200001a4
 80001fc:	0801a478 	.word	0x0801a478

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000aca:	f000 b9bb 	b.w	8000e44 <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f84d 	bl	8000b7c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f840 	bl	8000b7c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f82f 	bl	8000b7c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f821 	bl	8000b7c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b60:	f000 b970 	b.w	8000e44 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9e08      	ldr	r6, [sp, #32]
 8000b82:	460d      	mov	r5, r1
 8000b84:	4604      	mov	r4, r0
 8000b86:	460f      	mov	r7, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14a      	bne.n	8000c22 <__udivmoddi4+0xa6>
 8000b8c:	428a      	cmp	r2, r1
 8000b8e:	4694      	mov	ip, r2
 8000b90:	d965      	bls.n	8000c5e <__udivmoddi4+0xe2>
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	b143      	cbz	r3, 8000baa <__udivmoddi4+0x2e>
 8000b98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ba0:	409f      	lsls	r7, r3
 8000ba2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba6:	4317      	orrs	r7, r2
 8000ba8:	409c      	lsls	r4, r3
 8000baa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bae:	fa1f f58c 	uxth.w	r5, ip
 8000bb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc0:	fb01 f005 	mul.w	r0, r1, r5
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x62>
 8000bc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bcc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bd0:	f080 811c 	bcs.w	8000e0c <__udivmoddi4+0x290>
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	f240 8119 	bls.w	8000e0c <__udivmoddi4+0x290>
 8000bda:	3902      	subs	r1, #2
 8000bdc:	4462      	add	r2, ip
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	b2a4      	uxth	r4, r4
 8000be2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bee:	fb00 f505 	mul.w	r5, r0, r5
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x90>
 8000bf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bfe:	f080 8107 	bcs.w	8000e10 <__udivmoddi4+0x294>
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	f240 8104 	bls.w	8000e10 <__udivmoddi4+0x294>
 8000c08:	4464      	add	r4, ip
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c10:	1b64      	subs	r4, r4, r5
 8000c12:	2100      	movs	r1, #0
 8000c14:	b11e      	cbz	r6, 8000c1e <__udivmoddi4+0xa2>
 8000c16:	40dc      	lsrs	r4, r3
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0xbc>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	f000 80ed 	beq.w	8000e06 <__udivmoddi4+0x28a>
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c32:	4608      	mov	r0, r1
 8000c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c38:	fab3 f183 	clz	r1, r3
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	d149      	bne.n	8000cd4 <__udivmoddi4+0x158>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	d302      	bcc.n	8000c4a <__udivmoddi4+0xce>
 8000c44:	4282      	cmp	r2, r0
 8000c46:	f200 80f8 	bhi.w	8000e3a <__udivmoddi4+0x2be>
 8000c4a:	1a84      	subs	r4, r0, r2
 8000c4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c50:	2001      	movs	r0, #1
 8000c52:	4617      	mov	r7, r2
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d0e2      	beq.n	8000c1e <__udivmoddi4+0xa2>
 8000c58:	e9c6 4700 	strd	r4, r7, [r6]
 8000c5c:	e7df      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xe6>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f382 	clz	r3, r2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x210>
 8000c6c:	1a8a      	subs	r2, r1, r2
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	2101      	movs	r1, #1
 8000c78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c80:	0c22      	lsrs	r2, r4, #16
 8000c82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c86:	fb0e f005 	mul.w	r0, lr, r5
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x124>
 8000c8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c92:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x122>
 8000c98:	4290      	cmp	r0, r2
 8000c9a:	f200 80cb 	bhi.w	8000e34 <__udivmoddi4+0x2b8>
 8000c9e:	4645      	mov	r5, r8
 8000ca0:	1a12      	subs	r2, r2, r0
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x14e>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cc0:	d202      	bcs.n	8000cc8 <__udivmoddi4+0x14c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f200 80bb 	bhi.w	8000e3e <__udivmoddi4+0x2c2>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	eba4 040e 	sub.w	r4, r4, lr
 8000cce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd2:	e79f      	b.n	8000c14 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0720 	rsb	r7, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	40fd      	lsrs	r5, r7
 8000cec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d04:	fb08 f50e 	mul.w	r5, r8, lr
 8000d08:	42a5      	cmp	r5, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d12:	d90b      	bls.n	8000d2c <__udivmoddi4+0x1b0>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d1c:	f080 8088 	bcs.w	8000e30 <__udivmoddi4+0x2b4>
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	f240 8085 	bls.w	8000e30 <__udivmoddi4+0x2b4>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	4464      	add	r4, ip
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	b29d      	uxth	r5, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1da>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d4c:	d26c      	bcs.n	8000e28 <__udivmoddi4+0x2ac>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	d96a      	bls.n	8000e28 <__udivmoddi4+0x2ac>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	4464      	add	r4, ip
 8000d56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	46c8      	mov	r8, r9
 8000d66:	46ae      	mov	lr, r5
 8000d68:	d356      	bcc.n	8000e18 <__udivmoddi4+0x29c>
 8000d6a:	d053      	beq.n	8000e14 <__udivmoddi4+0x298>
 8000d6c:	b156      	cbz	r6, 8000d84 <__udivmoddi4+0x208>
 8000d6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d72:	eb64 040e 	sbc.w	r4, r4, lr
 8000d76:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7a:	40ca      	lsrs	r2, r1
 8000d7c:	40cc      	lsrs	r4, r1
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	e9c6 7400 	strd	r7, r4, [r6]
 8000d84:	4618      	mov	r0, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8c:	f1c3 0120 	rsb	r1, r3, #32
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	fa20 f201 	lsr.w	r2, r0, r1
 8000d98:	fa25 f101 	lsr.w	r1, r5, r1
 8000d9c:	409d      	lsls	r5, r3
 8000d9e:	432a      	orrs	r2, r5
 8000da0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1510 	mls	r5, r7, r0, r1
 8000db0:	0c11      	lsrs	r1, r2, #16
 8000db2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dba:	428d      	cmp	r5, r1
 8000dbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x258>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dca:	d22f      	bcs.n	8000e2c <__udivmoddi4+0x2b0>
 8000dcc:	428d      	cmp	r5, r1
 8000dce:	d92d      	bls.n	8000e2c <__udivmoddi4+0x2b0>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1b49      	subs	r1, r1, r5
 8000dd6:	b292      	uxth	r2, r2
 8000dd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ddc:	fb07 1115 	mls	r1, r7, r5, r1
 8000de0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de4:	fb05 f10e 	mul.w	r1, r5, lr
 8000de8:	4291      	cmp	r1, r2
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x282>
 8000dec:	eb1c 0202 	adds.w	r2, ip, r2
 8000df0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df4:	d216      	bcs.n	8000e24 <__udivmoddi4+0x2a8>
 8000df6:	4291      	cmp	r1, r2
 8000df8:	d914      	bls.n	8000e24 <__udivmoddi4+0x2a8>
 8000dfa:	3d02      	subs	r5, #2
 8000dfc:	4462      	add	r2, ip
 8000dfe:	1a52      	subs	r2, r2, r1
 8000e00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e04:	e738      	b.n	8000c78 <__udivmoddi4+0xfc>
 8000e06:	4631      	mov	r1, r6
 8000e08:	4630      	mov	r0, r6
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000e0c:	4639      	mov	r1, r7
 8000e0e:	e6e6      	b.n	8000bde <__udivmoddi4+0x62>
 8000e10:	4610      	mov	r0, r2
 8000e12:	e6fb      	b.n	8000c0c <__udivmoddi4+0x90>
 8000e14:	4548      	cmp	r0, r9
 8000e16:	d2a9      	bcs.n	8000d6c <__udivmoddi4+0x1f0>
 8000e18:	ebb9 0802 	subs.w	r8, r9, r2
 8000e1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e20:	3b01      	subs	r3, #1
 8000e22:	e7a3      	b.n	8000d6c <__udivmoddi4+0x1f0>
 8000e24:	4645      	mov	r5, r8
 8000e26:	e7ea      	b.n	8000dfe <__udivmoddi4+0x282>
 8000e28:	462b      	mov	r3, r5
 8000e2a:	e794      	b.n	8000d56 <__udivmoddi4+0x1da>
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	e7d1      	b.n	8000dd4 <__udivmoddi4+0x258>
 8000e30:	46d0      	mov	r8, sl
 8000e32:	e77b      	b.n	8000d2c <__udivmoddi4+0x1b0>
 8000e34:	3d02      	subs	r5, #2
 8000e36:	4462      	add	r2, ip
 8000e38:	e732      	b.n	8000ca0 <__udivmoddi4+0x124>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e70a      	b.n	8000c54 <__udivmoddi4+0xd8>
 8000e3e:	4464      	add	r4, ip
 8000e40:	3802      	subs	r0, #2
 8000e42:	e742      	b.n	8000cca <__udivmoddi4+0x14e>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <queueInit>:
/****************************************/

/* Implementation of Tx/Rx queues used by the MAC driver. */

void queueInit(adi_mac_Queue_t *pQueue, adi_mac_FrameStruct_t *pEntries, uint32_t numEntries)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
    /* This is the _RAW value */
    pQueue->pEntries = pEntries;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	601a      	str	r2, [r3, #0]
    pQueue->numEntries = numEntries;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	605a      	str	r2, [r3, #4]
    pQueue->head = 0;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
    pQueue->tail = 0;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]

    for (uint32_t i = 0; i < numEntries; i++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e010      	b.n	8000e94 <queueInit+0x4c>
    {
        pQueue->pEntries[i].header.VALUE16 = 0x0000;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	801a      	strh	r2, [r3, #0]
        pQueue->pEntries[i].pBufDesc = NULL;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4413      	add	r3, r2
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
    for (uint32_t i = 0; i < numEntries; i++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d3ea      	bcc.n	8000e72 <queueInit+0x2a>
    }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	371c      	adds	r7, #28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <queueCount>:

static inline uint32_t queueCount(adi_mac_Queue_t *pQueue)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b087      	sub	sp, #28
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
    uint32_t head = pQueue->head;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	617b      	str	r3, [r7, #20]
    uint32_t tail = pQueue->tail;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	613b      	str	r3, [r7, #16]
    uint32_t n = head + pQueue->numEntries - tail;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	441a      	add	r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	60fb      	str	r3, [r7, #12]

    return PSEUDO_MODULO(n, pQueue->numEntries);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d304      	bcc.n	8000ee0 <queueCount+0x36>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	e000      	b.n	8000ee2 <queueCount+0x38>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <queueIsFull>:
{
    return (pQueue->numEntries - 1) - queueCount(pQueue);
}

bool queueIsFull(adi_mac_Queue_t *pQueue)
{
 8000eee:	b590      	push	{r4, r7, lr}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
    return (pQueue->numEntries - 1) == queueCount(pQueue);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	1e5c      	subs	r4, r3, #1
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffd4 	bl	8000eaa <queueCount>
 8000f02:	4603      	mov	r3, r0
 8000f04:	429c      	cmp	r4, r3
 8000f06:	bf0c      	ite	eq
 8000f08:	2301      	moveq	r3, #1
 8000f0a:	2300      	movne	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd90      	pop	{r4, r7, pc}

08000f16 <queueIsEmpty>:

bool queueIsEmpty(adi_mac_Queue_t *pQueue)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
    uint32_t head = pQueue->head;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	60fb      	str	r3, [r7, #12]
    uint32_t tail = pQueue->tail;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]

    return head == tail;
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	bf0c      	ite	eq
 8000f32:	2301      	moveq	r3, #1
 8000f34:	2300      	movne	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <queueAdd>:

void queueAdd(adi_mac_Queue_t *pQueue)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    uint32_t n = pQueue->head + 1;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	3301      	adds	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
    pQueue->head = PSEUDO_MODULO(n, pQueue->numEntries);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d304      	bcc.n	8000f68 <queueAdd+0x24>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	e000      	b.n	8000f6a <queueAdd+0x26>
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	6093      	str	r3, [r2, #8]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <queueRemove>:

void queueRemove(adi_mac_Queue_t *pQueue)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
    uint32_t n = pQueue->tail + 1;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	3301      	adds	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
    pQueue->tail = PSEUDO_MODULO(n, pQueue->numEntries);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d304      	bcc.n	8000f9e <queueRemove+0x24>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	e000      	b.n	8000fa0 <queueRemove+0x26>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	60d3      	str	r3, [r2, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <macCallback>:

}
#else

static void macCallback(void *pCBParam, uint32_t Event, void *pArg)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
    adi_mac_Device_t    *hDevice = (adi_mac_Device_t *)pCBParam;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	617b      	str	r3, [r7, #20]

    (void)Event;
    (void)pArg;

    oaIrqHandler(hDevice);
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f003 fa71 	bl	80044a8 <oaIrqHandler>

}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <MAC_Init>:
/***                                  ***/
/****************************************/
/****************************************/

adi_eth_Result_e MAC_Init(adi_mac_Device_t **phDevice, adi_mac_DriverConfig_t *cfg, void *adinDevice)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	77fb      	strb	r3, [r7, #31]
    adi_mac_Device_t    *hDevice;

    if (cfg->devMemSize < sizeof(adi_mac_Device_t))
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f5b3 7f6c 	cmp.w	r3, #944	; 0x3b0
 8000fe8:	d202      	bcs.n	8000ff0 <MAC_Init+0x20>
    {
        result = ADI_ETH_INVALID_PARAM;
 8000fea:	2308      	movs	r3, #8
 8000fec:	77fb      	strb	r3, [r7, #31]
        goto end;
 8000fee:	e0e0      	b.n	80011b2 <MAC_Init+0x1e2>
    }

    /* Disable IRQ for situations when this is called after device initialization */
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8000ff0:	f005 fb10 	bl	8006614 <HAL_DisableIrq>

    /* Implies state is uninitialized */
    memset(cfg->pDevMem, 0, cfg->devMemSize);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	f018 fb24 	bl	801964c <memset>

    *phDevice = (adi_mac_Device_t *)cfg->pDevMem;
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	601a      	str	r2, [r3, #0]
    hDevice = *phDevice;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	617b      	str	r3, [r7, #20]
    hDevice->state = ADI_MAC_STATE_UNINITIALIZED;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    hDevice->adinDevice = adinDevice;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
    hDevice->spiState = ADI_MAC_SPI_STATE_READY;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2200      	movs	r2, #0
 8001022:	705a      	strb	r2, [r3, #1]
    hDevice->spiErr = 0;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]

    for (uint32_t i = 0; i < ADI_MAC_EVT_MAX; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	e00f      	b.n	8001050 <MAC_Init+0x80>
    {
        hDevice->cbFunc[i] = NULL;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	3202      	adds	r2, #2
 8001036:	2100      	movs	r1, #0
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        hDevice->cbParam[i] = NULL;
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	3306      	adds	r3, #6
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
    for (uint32_t i = 0; i < ADI_MAC_EVT_MAX; i++)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	3301      	adds	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b04      	cmp	r3, #4
 8001054:	d9ec      	bls.n	8001030 <MAC_Init+0x60>
    }

    hDevice->pendingCtrl = false;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

    hDevice->addrFilterActive = 0;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2200      	movs	r2, #0
 8001062:	871a      	strh	r2, [r3, #56]	; 0x38
    hDevice->configSync = false;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
    hDevice->fcsCheckEn = cfg->fcsCheckEn;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	7a1a      	ldrb	r2, [r3, #8]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
    hDevice->timestampFormat = ADI_MAC_TS_FORMAT_NONE;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3

    hDevice->statusRegisters.status0Masked = 0;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2200      	movs	r2, #0
 8001082:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    hDevice->statusRegisters.status0 = 0;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2200      	movs	r2, #0
 800108a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    hDevice->statusRegisters.status1Masked = 0;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2200      	movs	r2, #0
 8001092:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    hDevice->statusRegisters.status1 = 0;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    hDevice->statusRegisters.p1StatusMasked = ADI_MAC_PHY_STATUS_INIT_VAL;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f06f 2280 	mvn.w	r2, #2147516416	; 0x80008000
 80010a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    hDevice->statusRegisters.p1Status = ADI_MAC_PHY_STATUS_INIT_VAL;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f06f 2280 	mvn.w	r2, #2147516416	; 0x80008000
 80010ae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    hDevice->statusRegisters.p2StatusMasked = ADI_MAC_PHY_STATUS_INIT_VAL;
    hDevice->statusRegisters.p2Status = ADI_MAC_PHY_STATUS_INIT_VAL;
#endif

    /* Initialize both queues. */
    queueInit(&hDevice->txQueue, &hDevice->txQueueFrames[0], TX_QUEUE_NUM_ENTRIES_RAW);
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3344      	adds	r3, #68	; 0x44
 80010bc:	2205      	movs	r2, #5
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fec2 	bl	8000e48 <queueInit>
    queueInit(&hDevice->rxQueueLp, &hDevice->rxQueueLpFrames[0], RX_QUEUE_NUM_ENTRIES_RAW);
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3380      	adds	r3, #128	; 0x80
 80010ce:	2205      	movs	r2, #5
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff feb9 	bl	8000e48 <queueInit>
#if defined(ADI_MAC_ENABLE_RX_QUEUE_HI_PRIO)
    queueInit(&hDevice->rxQueueHp, &hDevice->rxQueueHpFrames[0], RX_QUEUE_NUM_ENTRIES_RAW);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	33b8      	adds	r3, #184	; 0xb8
 80010e0:	2205      	movs	r2, #5
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff feb0 	bl	8000e48 <queueInit>
#endif
    /* Default Rx queue is always the low priority */
    hDevice->pRxQueue = &hDevice->rxQueueLp;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	67da      	str	r2, [r3, #124]	; 0x7c

    result = (adi_eth_Result_e)ADI_HAL_SPI_REGISTER_CALLBACK(hDevice->adinDevice, (HAL_Callback_t const *)spiCallback, hDevice);
 80010f2:	6979      	ldr	r1, [r7, #20]
 80010f4:	4831      	ldr	r0, [pc, #196]	; (80011bc <MAC_Init+0x1ec>)
 80010f6:	f005 fac3 	bl	8006680 <HAL_SpiRegisterCallback>
 80010fa:	4603      	mov	r3, r0
 80010fc:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d153      	bne.n	80011ac <MAC_Init+0x1dc>
    {
        goto end;
    }

    /* State needs to advance from uninitialized */
    hDevice->state = ADI_MAC_STATE_INITIALIZED;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]

#if defined(SPI_OA_EN)
    /* Initialize with maximum number of Tx credits */
    hDevice->oaTxc = 31;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	221f      	movs	r2, #31
 800110e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    /* Initialize with no Rx chunks available */
    hDevice->oaRca = 0;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2200      	movs	r2, #0
 8001116:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    /* The index in the buffer is 0 */
    hDevice->oaTxCurBufByteOffset = 0;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2200      	movs	r2, #0
 800111e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    hDevice->oaRxCurBufByteOffset = 0;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2200      	movs	r2, #0
 8001126:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    hDevice->oaTxCurBufIdx = 0;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2200      	movs	r2, #0
 800112e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    hDevice->oaRxCurBufIdx = 0;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    hDevice->oaCps = 6;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2206      	movs	r2, #6
 800113e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    hDevice->oaMaxChunkCount = ADI_OA_MAX_CHUNK64_COUNT;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2210      	movs	r2, #16
 8001146:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    hDevice->oaRxUseBackupBuf = false;
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
    hDevice->oaValidFlag = ADI_MAC_OA_VALID_FLAG_NONE;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    hDevice->oaTimestampSplit = false;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    hDevice->oaErrorStats.fdCount = 0;
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2200      	movs	r2, #0
 8001166:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    hDevice->oaErrorStats.invalidSvCount = 0;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2200      	movs	r2, #0
 800116e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    hDevice->oaErrorStats.invalidEvCount = 0;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2200      	movs	r2, #0
 8001176:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    hDevice->oaErrorStats.ftrParityErrorCount = 0;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2200      	movs	r2, #0
 800117e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    hDevice->oaErrorStats.hdrParityErrorCount = 0;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2200      	movs	r2, #0
 8001186:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    hDevice->oaErrorStats.syncErrorCount = 0;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2200      	movs	r2, #0
 800118e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
#endif

    /* Perform a software reset of the MAC. */
    result = MAC_Reset(hDevice, ADI_ETH_RESET_TYPE_MAC_PHY);
 8001192:	2101      	movs	r1, #1
 8001194:	6978      	ldr	r0, [r7, #20]
 8001196:	f000 f8e7 	bl	8001368 <MAC_Reset>
 800119a:	4603      	mov	r3, r0
 800119c:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 800119e:	7ffb      	ldrb	r3, [r7, #31]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <MAC_Init+0x1e0>
    {
        goto end;
    }

    hDevice->state = ADI_MAC_STATE_READY;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	2202      	movs	r2, #2
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e002      	b.n	80011b2 <MAC_Init+0x1e2>
        goto end;
 80011ac:	bf00      	nop
 80011ae:	e000      	b.n	80011b2 <MAC_Init+0x1e2>
        goto end;
 80011b0:	bf00      	nop

end:
    return result;
 80011b2:	7ffb      	ldrb	r3, [r7, #31]

}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	080044d3 	.word	0x080044d3

080011c0 <macInit>:

static adi_eth_Result_e macInit(adi_mac_Device_t *hDevice)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]

    /* IMASK0 */
    /* All interrupt sources are unmasked, writing them individually for clarity */
    /* Exception is the PHY interrupt, it is too early to enable it here as this */
    /* is run before the PHY initialization.                                     */
    hDevice->irqMask0 = 0xFFFFFFFF;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
    hDevice->irqMask0 &= ~(BITM_MAC_IMASK0_TXPEM |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d8:	f423 53c3 	bic.w	r3, r3, #6240	; 0x1860
 80011dc:	f023 031f 	bic.w	r3, r3, #31
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	63d3      	str	r3, [r2, #60]	; 0x3c
                           BITM_MAC_IMASK0_HDREM |
                           BITM_MAC_IMASK0_RESETCM |
                           BITM_MAC_IMASK0_TXFCSEM |
                           BITM_MAC_IMASK0_CDPEM);

    result = MAC_WriteRegister(hDevice, ADDR_MAC_IMASK0, hDevice->irqMask0);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e8:	461a      	mov	r2, r3
 80011ea:	210c      	movs	r1, #12
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fa13 	bl	8001618 <MAC_WriteRegister>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]

    /* IMASK1 */
    hDevice->irqMask1 = 0xFFFFFFFF;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
    hDevice->irqMask1 &= ~(
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f423 52e8 	bic.w	r2, r3, #7424	; 0x1d00
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(ADIN2111)
                            | BITM_MAC_IMASK1_P2_TXFCSEM
#endif
                            );

    result = MAC_WriteRegister(hDevice, ADDR_MAC_IMASK1, hDevice->irqMask1);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	461a      	mov	r2, r3
 8001210:	210d      	movs	r1, #13
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 fa00 	bl	8001618 <MAC_WriteRegister>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]

    if (result != ADI_ETH_SUCCESS)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d176      	bne.n	8001310 <macInit+0x150>
    {
        goto end;
    }

    /* Although the callback is registered here,  */
    result = (adi_eth_Result_e)ADI_HAL_REGISTER_CALLBACK(hDevice->adinDevice, (HAL_Callback_t const *)macCallback, hDevice);
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4844      	ldr	r0, [pc, #272]	; (8001338 <macInit+0x178>)
 8001226:	f005 fa0b 	bl	8006640 <HAL_RegisterCallback>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d16f      	bne.n	8001314 <macInit+0x154>
    {
        goto end;
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_STATUS0, &val32);
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	461a      	mov	r2, r3
 800123a:	2108      	movs	r1, #8
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f975 	bl	800152c <MAC_ReadRegister>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d165      	bne.n	8001318 <macInit+0x158>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, ADDR_MAC_STATUS1, &val32);
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	461a      	mov	r2, r3
 8001252:	2109      	movs	r1, #9
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f969 	bl	800152c <MAC_ReadRegister>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d15b      	bne.n	800131c <macInit+0x15c>
    {
        goto end;
    }

    /* Configure the MAC to generate and append FCS to the frame, or expect the FCS to be appended by the host */
    if (hDevice->fcsCheckEn)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d006      	beq.n	800127c <macInit+0xbc>
    {
        result = (adi_eth_Result_e)ADI_HAL_FCS_INIT(hDevice->adinDevice);
 800126e:	f005 f807 	bl	8006280 <HAL_FcsInit>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d151      	bne.n	8001320 <macInit+0x160>
        {
            goto end;
        }
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_CONFIG0, &val32);
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	461a      	mov	r2, r3
 8001282:	2104      	movs	r1, #4
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f951 	bl	800152c <MAC_ReadRegister>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d147      	bne.n	8001324 <macInit+0x164>
    {
        goto end;
    }

    if (hDevice->fcsCheckEn)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d004      	beq.n	80012a8 <macInit+0xe8>
    {
        val32 |= BITM_MAC_CONFIG0_TXFCSVE;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	e003      	b.n	80012b0 <macInit+0xf0>

    }
    else
    {
        val32 &= ~BITM_MAC_CONFIG0_TXFCSVE;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012ae:	60bb      	str	r3, [r7, #8]
    }
    result = MAC_WriteRegister(hDevice, ADDR_MAC_CONFIG0, val32);
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	461a      	mov	r2, r3
 80012b4:	2104      	movs	r1, #4
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f9ae 	bl	8001618 <MAC_WriteRegister>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d130      	bne.n	8001328 <macInit+0x168>
    {
        goto end;
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_CONFIG2, &val32);
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	461a      	mov	r2, r3
 80012cc:	2106      	movs	r1, #6
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f92c 	bl	800152c <MAC_ReadRegister>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d126      	bne.n	800132c <macInit+0x16c>
    {
        goto end;
    }

    if (hDevice->fcsCheckEn)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <macInit+0x132>
    {
        val32 &= ~BITM_MAC_CONFIG2_CRC_APPEND;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f023 0320 	bic.w	r3, r3, #32
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	e003      	b.n	80012fa <macInit+0x13a>
    }
    else
    {
        val32 |= BITM_MAC_CONFIG2_CRC_APPEND;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f043 0320 	orr.w	r3, r3, #32
 80012f8:	60bb      	str	r3, [r7, #8]
    }
    result = MAC_WriteRegister(hDevice, ADDR_MAC_CONFIG2, val32);
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	461a      	mov	r2, r3
 80012fe:	2106      	movs	r1, #6
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f989 	bl	8001618 <MAC_WriteRegister>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 800130e:	e00e      	b.n	800132e <macInit+0x16e>
        goto end;
 8001310:	bf00      	nop
 8001312:	e00c      	b.n	800132e <macInit+0x16e>
        goto end;
 8001314:	bf00      	nop
 8001316:	e00a      	b.n	800132e <macInit+0x16e>
        goto end;
 8001318:	bf00      	nop
 800131a:	e008      	b.n	800132e <macInit+0x16e>
        goto end;
 800131c:	bf00      	nop
 800131e:	e006      	b.n	800132e <macInit+0x16e>
            goto end;
 8001320:	bf00      	nop
 8001322:	e004      	b.n	800132e <macInit+0x16e>
        goto end;
 8001324:	bf00      	nop
 8001326:	e002      	b.n	800132e <macInit+0x16e>
        goto end;
 8001328:	bf00      	nop
 800132a:	e000      	b.n	800132e <macInit+0x16e>
        goto end;
 800132c:	bf00      	nop
    return result;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08000fb1 	.word	0x08000fb1

0800133c <MAC_UnInit>:
 *
 * @return 0 in case of success, positive error code otherwise.
 *
 */
adi_eth_Result_e MAC_UnInit(adi_mac_Device_t *hDevice)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]

    if (hDevice == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <MAC_UnInit+0x18>
    {
        result = ADI_ETH_INVALID_HANDLE;
 800134e:	230a      	movs	r3, #10
 8001350:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001352:	e004      	b.n	800135e <MAC_UnInit+0x22>
    }

    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8001354:	f005 f95e 	bl	8006614 <HAL_DisableIrq>

    hDevice->state = ADI_MAC_STATE_UNINITIALIZED;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]

end:
    return result;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <MAC_Reset>:
 * @param [in] dev - Pointer to the HW driver.
 *
 * @return 0 in case of success, positive error code otherwise.
*/
adi_eth_Result_e MAC_Reset(adi_mac_Device_t *hDevice, adi_eth_ResetType_e resetType)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001374:	2300      	movs	r3, #0
 8001376:	75fb      	strb	r3, [r7, #23]
    uint16_t            keys[2];
    uint32_t            retryCount;

    if (hDevice == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <MAC_Reset+0x1c>
    {
        result = ADI_ETH_INVALID_HANDLE;
 800137e:	230a      	movs	r3, #10
 8001380:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001382:	e060      	b.n	8001446 <MAC_Reset+0xde>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <MAC_Reset+0x2c>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 800138e:	2306      	movs	r3, #6
 8001390:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001392:	e058      	b.n	8001446 <MAC_Reset+0xde>

    /* Disable IRQ here to prevent RESETC from being cleared in the IRQ handler */
    /* Because a reset needs to be followed up by reconfiguration of the device */
    /* and a call to SyncConfig(), the IRQ will be enabled by the latter so it  */
    /* can be left in a disabled state by this reset function.                  */
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8001394:	f005 f93e 	bl	8006614 <HAL_DisableIrq>
    /* To prevent a premature exit with an error, the reset is repeated several */
    /* times if the register write is not successful. This is particularly      */
    /* important when using OPEN Alliance protocol, because the comparison      */
    /* between the control header and the echoed control header will fail       */
    /* immediately if the device is sending invalid data (all 0s) to the host.  */
    retryCount = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
    do
    {
        switch (resetType)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <MAC_Reset+0x40>
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d01a      	beq.n	80013dc <MAC_Reset+0x74>
 80013a6:	e021      	b.n	80013ec <MAC_Reset+0x84>
        {
            case ADI_ETH_RESET_TYPE_MAC_ONLY:
                keys[0] = RST_MAC_ONLY_KEY1;
 80013a8:	f644 731c 	movw	r3, #20252	; 0x4f1c
 80013ac:	81bb      	strh	r3, [r7, #12]
                keys[1] = RST_MAC_ONLY_KEY2;
 80013ae:	f24c 13f4 	movw	r3, #49652	; 0xc1f4
 80013b2:	81fb      	strh	r3, [r7, #14]

                /* No checking of results, see comment above. */
                result = MAC_WriteRegister(hDevice, ADDR_MAC_SOFT_RST, keys[0]);
 80013b4:	89bb      	ldrh	r3, [r7, #12]
 80013b6:	461a      	mov	r2, r3
 80013b8:	213c      	movs	r1, #60	; 0x3c
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f92c 	bl	8001618 <MAC_WriteRegister>
 80013c0:	4603      	mov	r3, r0
 80013c2:	75fb      	strb	r3, [r7, #23]
                if (result == ADI_ETH_SUCCESS)
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d113      	bne.n	80013f2 <MAC_Reset+0x8a>
                {
                    result = MAC_WriteRegister(hDevice, ADDR_MAC_SOFT_RST, keys[1]);
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	461a      	mov	r2, r3
 80013ce:	213c      	movs	r1, #60	; 0x3c
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f921 	bl	8001618 <MAC_WriteRegister>
 80013d6:	4603      	mov	r3, r0
 80013d8:	75fb      	strb	r3, [r7, #23]
                }

                break;
 80013da:	e00a      	b.n	80013f2 <MAC_Reset+0x8a>

            case ADI_ETH_RESET_TYPE_MAC_PHY:

                /* No checking of results, see comment above. */
                result = MAC_WriteRegister(hDevice, ADDR_MAC_RESET, (1 << BITP_MAC_RESET_SWRESET));
 80013dc:	2201      	movs	r2, #1
 80013de:	2103      	movs	r1, #3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f919 	bl	8001618 <MAC_WriteRegister>
 80013e6:	4603      	mov	r3, r0
 80013e8:	75fb      	strb	r3, [r7, #23]
                break;
 80013ea:	e003      	b.n	80013f4 <MAC_Reset+0x8c>

            default:
                result = ADI_ETH_INVALID_PARAM;
 80013ec:	2308      	movs	r3, #8
 80013ee:	75fb      	strb	r3, [r7, #23]
                goto end;
 80013f0:	e029      	b.n	8001446 <MAC_Reset+0xde>
                break;
 80013f2:	bf00      	nop
        }
    } while ((result != ADI_ETH_SUCCESS) && (retryCount++ < ADI_MAC_IF_UP_MAX_RETRIES));
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <MAC_Reset+0xa0>
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	613a      	str	r2, [r7, #16]
 8001400:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001404:	4293      	cmp	r3, r2
 8001406:	d9c9      	bls.n	800139c <MAC_Reset+0x34>

    if (result != ADI_ETH_SUCCESS)
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <MAC_Reset+0xac>
    {
        result = ADI_ETH_SW_RESET_TIMEOUT;
 800140e:	231a      	movs	r3, #26
 8001410:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001412:	e018      	b.n	8001446 <MAC_Reset+0xde>
    }

    if ((resetType == ADI_ETH_RESET_TYPE_MAC_ONLY) || (resetType == ADI_ETH_RESET_TYPE_MAC_PHY))
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <MAC_Reset+0xb8>
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <MAC_Reset+0xca>
    {
        /* Wait for MAC reset to finish */
        result = waitDeviceReady(hDevice);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f9af 	bl	8001784 <waitDeviceReady>
 8001426:	4603      	mov	r3, r0
 8001428:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <MAC_Reset+0xd0>
        {
            goto end;
 8001430:	e009      	b.n	8001446 <MAC_Reset+0xde>
        }
    }
    else
    {
        result = ADI_ETH_INVALID_PARAM;
 8001432:	2308      	movs	r3, #8
 8001434:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001436:	e006      	b.n	8001446 <MAC_Reset+0xde>
    }

    /* After reset, the configuration is no longer synchronized */
    hDevice->configSync = false;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
    /* Initialize IRQs and other registers */
    macInit(hDevice);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff febd 	bl	80011c0 <macInit>

end:
    return result;
 8001446:	7dfb      	ldrb	r3, [r7, #23]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <MAC_RegisterCallback>:
 *
 * @return 0 in case of success, positive error code otherwise.
 *
 */
adi_eth_Result_e MAC_RegisterCallback(adi_mac_Device_t *hDevice, adi_eth_Callback_t cbFunc, adi_mac_InterruptEvt_e cbEvent, void *cbParam)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	4613      	mov	r3, r2
 800145e:	71fb      	strb	r3, [r7, #7]
    adi_eth_Result_e            result = ADI_ETH_SUCCESS;
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]
    bool                        irqMaskModified = false;
 8001464:	2300      	movs	r3, #0
 8001466:	75bb      	strb	r3, [r7, #22]

    hDevice->cbFunc[cbEvent] = cbFunc;
 8001468:	79fa      	ldrb	r2, [r7, #7]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3202      	adds	r2, #2
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    hDevice->cbParam[cbEvent] = cbParam;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	3306      	adds	r3, #6
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	605a      	str	r2, [r3, #4]

    switch (cbEvent)
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <MAC_RegisterCallback+0x3e>
 8001488:	2b04      	cmp	r3, #4
 800148a:	d00f      	beq.n	80014ac <MAC_RegisterCallback+0x5c>
 800148c:	e025      	b.n	80014da <MAC_RegisterCallback+0x8a>
    {
        case ADI_MAC_EVT_LINK_CHANGE:
             /* Link status and link status change behave differently in ADIN2111 */
#if !defined(ADIN2111)
            if (hDevice->irqMask1 & BITM_MAC_IMASK1_LINK_CHANGE_MASK)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d022      	beq.n	80014e0 <MAC_RegisterCallback+0x90>
            {
                hDevice->irqMask1 &= ~BITM_MAC_IMASK1_LINK_CHANGE_MASK;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f023 0202 	bic.w	r2, r3, #2
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
                irqMaskModified = true;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75bb      	strb	r3, [r7, #22]
            }
#endif
            break;
 80014aa:	e019      	b.n	80014e0 <MAC_RegisterCallback+0x90>

        case ADI_MAC_EVT_TIMESTAMP_RDY:
            if (hDevice->timestampFormat == ADI_MAC_TS_FORMAT_NONE)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <MAC_RegisterCallback+0x6c>
            {
                result = ADI_ETH_NO_TS_FORMAT;
 80014b6:	231f      	movs	r3, #31
 80014b8:	75fb      	strb	r3, [r7, #23]
                goto end;
 80014ba:	e031      	b.n	8001520 <MAC_RegisterCallback+0xd0>
            {
                hDevice->irqMask1 &= ~(BITM_MAC_IMASK1_P2_TTSCAAM | BITM_MAC_IMASK1_P2_TTSCABM | BITM_MAC_IMASK1_P2_TTSCACM);
                irqMaskModified = true;
            }
#endif
            if (hDevice->irqMask0 & (BITM_MAC_IMASK0_TTSCAAM | BITM_MAC_IMASK0_TTSCABM | BITM_MAC_IMASK0_TTSCACM))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00d      	beq.n	80014e4 <MAC_RegisterCallback+0x94>
            {
                hDevice->irqMask0 &= ~(BITM_MAC_IMASK0_TTSCAAM | BITM_MAC_IMASK0_TTSCABM | BITM_MAC_IMASK0_TTSCACM);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c
                irqMaskModified = true;
 80014d4:	2301      	movs	r3, #1
 80014d6:	75bb      	strb	r3, [r7, #22]
            }
            break;
 80014d8:	e004      	b.n	80014e4 <MAC_RegisterCallback+0x94>

        default:
            irqMaskModified = false;
 80014da:	2300      	movs	r3, #0
 80014dc:	75bb      	strb	r3, [r7, #22]
 80014de:	e002      	b.n	80014e6 <MAC_RegisterCallback+0x96>
            break;
 80014e0:	bf00      	nop
 80014e2:	e000      	b.n	80014e6 <MAC_RegisterCallback+0x96>
            break;
 80014e4:	bf00      	nop
    }

    if (irqMaskModified)
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d016      	beq.n	800151a <MAC_RegisterCallback+0xca>
    {
        result = MAC_WriteRegister(hDevice, ADDR_MAC_IMASK0, hDevice->irqMask0);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f0:	461a      	mov	r2, r3
 80014f2:	210c      	movs	r1, #12
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 f88f 	bl	8001618 <MAC_WriteRegister>
 80014fa:	4603      	mov	r3, r0
 80014fc:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10c      	bne.n	800151e <MAC_RegisterCallback+0xce>
        {
            goto end;
        }
        result = MAC_WriteRegister(hDevice, ADDR_MAC_IMASK1, hDevice->irqMask1);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	461a      	mov	r2, r3
 800150a:	210d      	movs	r1, #13
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 f883 	bl	8001618 <MAC_WriteRegister>
 8001512:	4603      	mov	r3, r0
 8001514:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	2b00      	cmp	r3, #0
        {
            goto end;
        }
    }

end:
 800151a:	bf00      	nop
 800151c:	e000      	b.n	8001520 <MAC_RegisterCallback+0xd0>
            goto end;
 800151e:	bf00      	nop
    return result;
 8001520:	7dfb      	ldrb	r3, [r7, #23]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <MAC_ReadRegister>:

adi_eth_Result_e MAC_ReadRegister(adi_mac_Device_t *hDevice, uint16_t regAddr, uint32_t *regData)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	460b      	mov	r3, r1
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	817b      	strh	r3, [r7, #10]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800153a:	2300      	movs	r3, #0
 800153c:	77fb      	strb	r3, [r7, #31]
    uint8_t             buf[ADI_MAC_SPI_ACCESS_SIZE];
    uint32_t            backup = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
    uint32_t            timeout;

    if (hDevice == NULL)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <MAC_ReadRegister+0x22>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001548:	230a      	movs	r3, #10
 800154a:	77fb      	strb	r3, [r7, #31]
        goto end;
 800154c:	e054      	b.n	80015f8 <MAC_ReadRegister+0xcc>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <MAC_ReadRegister+0x32>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001558:	2306      	movs	r3, #6
 800155a:	77fb      	strb	r3, [r7, #31]
        goto end;
 800155c:	e04c      	b.n	80015f8 <MAC_ReadRegister+0xcc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155e:	b672      	cpsid	i
}
 8001560:	bf00      	nop
    }

    ADI_HAL_ENTER_CRITICAL_SECTION();
    if (hDevice->spiState != ADI_MAC_SPI_STATE_READY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <MAC_ReadRegister+0x46>
    {
        /* Function was called while a SPI transaction is ongoing (non-blocking, using DMA).        */
        /* In this situation we want to re-enable the IRQ, it will always be disabled at this point.*/
        backup = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	e002      	b.n	8001578 <MAC_ReadRegister+0x4c>
    }
    else
    {
        backup = ADI_HAL_GET_ENABLE_IRQ(hDevice->adinDevice);
 8001572:	f005 f85d 	bl	8006630 <HAL_GetEnableIrq>
 8001576:	61b8      	str	r0, [r7, #24]
    }
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8001578:	f005 f84c 	bl	8006614 <HAL_DisableIrq>
    hDevice->pendingCtrl = true;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  __ASM volatile ("cpsie i" : : : "memory");
 8001584:	b662      	cpsie	i
}
 8001586:	bf00      	nop
    ADI_HAL_EXIT_CRITICAL_SECTION();

    /* Wait for ongoing SPI transaction to finish, with a timeout. */
    timeout = ADI_SPI_TIMEOUT;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MAC_ReadRegister+0xe8>)
 800158a:	617b      	str	r3, [r7, #20]
    while (timeout && (hDevice->spiState != ADI_MAC_SPI_STATE_READY))
 800158c:	e002      	b.n	8001594 <MAC_ReadRegister+0x68>
    {
        timeout--;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3b01      	subs	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
    while (timeout && (hDevice->spiState != ADI_MAC_SPI_STATE_READY))
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <MAC_ReadRegister+0x78>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	785b      	ldrb	r3, [r3, #1]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f4      	bne.n	800158e <MAC_ReadRegister+0x62>
    }

    if (!timeout)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <MAC_ReadRegister+0x84>
    {
        result = ADI_ETH_COMM_TIMEOUT;
 80015aa:	2304      	movs	r3, #4
 80015ac:	77fb      	strb	r3, [r7, #31]
        goto end;
 80015ae:	e023      	b.n	80015f8 <MAC_ReadRegister+0xcc>

#else

    (void)buf;

    hDevice->wnr = ADI_MAC_SPI_READ;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    hDevice->regAddr = regAddr;
 80015b8:	897a      	ldrh	r2, [r7, #10]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hDevice->pRegData = regData;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    hDevice->cnt = 1;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

    hDevice->state = ADI_MAC_STATE_CONTROL_START;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2205      	movs	r2, #5
 80015d4:	701a      	strb	r2, [r3, #0]

    oaStateMachine(hDevice);
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f002 ff8a 	bl	80044f0 <oaStateMachine>

    while (hDevice->state != ADI_MAC_STATE_READY)
 80015dc:	bf00      	nop
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d1fa      	bne.n	80015de <MAC_ReadRegister+0xb2>
      ;

    if (hDevice->spiErr)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <MAC_ReadRegister+0xca>
    {
        result = ADI_ETH_SPI_ERROR;
 80015f0:	2319      	movs	r3, #25
 80015f2:	77fb      	strb	r3, [r7, #31]
 80015f4:	e000      	b.n	80015f8 <MAC_ReadRegister+0xcc>
    }

#endif

end:
 80015f6:	bf00      	nop

    hDevice->pendingCtrl = false;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

    if (backup)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MAC_ReadRegister+0xde>
    {
        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8001606:	f005 f80c 	bl	8006622 <HAL_EnableIrq>
    }

    return result;
 800160a:	7ffb      	ldrb	r3, [r7, #31]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	000186a0 	.word	0x000186a0

08001618 <MAC_WriteRegister>:

adi_eth_Result_e MAC_WriteRegister(adi_mac_Device_t *hDevice, uint16_t regAddr, uint32_t regData)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	460b      	mov	r3, r1
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	817b      	strh	r3, [r7, #10]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001626:	2300      	movs	r3, #0
 8001628:	77fb      	strb	r3, [r7, #31]
    uint8_t             buf[ADI_MAC_SPI_ACCESS_SIZE];
    uint32_t            backup = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
    uint32_t            timeout;

    if (hDevice == NULL)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <MAC_WriteRegister+0x22>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001634:	230a      	movs	r3, #10
 8001636:	77fb      	strb	r3, [r7, #31]
        goto end;
 8001638:	e054      	b.n	80016e4 <MAC_WriteRegister+0xcc>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <MAC_WriteRegister+0x32>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001644:	2306      	movs	r3, #6
 8001646:	77fb      	strb	r3, [r7, #31]
        goto end;
 8001648:	e04c      	b.n	80016e4 <MAC_WriteRegister+0xcc>
  __ASM volatile ("cpsid i" : : : "memory");
 800164a:	b672      	cpsid	i
}
 800164c:	bf00      	nop
    }

    ADI_HAL_ENTER_CRITICAL_SECTION();
    if (hDevice->spiState != ADI_MAC_SPI_STATE_READY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	785b      	ldrb	r3, [r3, #1]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <MAC_WriteRegister+0x46>
    {
        /* Function was called while a SPI transaction is ongoing (non-blocking, using DMA).        */
        /* In this situation we want to re-enable the IRQ, it will always be disabled at this point.*/
        backup = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	e002      	b.n	8001664 <MAC_WriteRegister+0x4c>
    }
    else
    {
        backup = ADI_HAL_GET_ENABLE_IRQ(hDevice->adinDevice);
 800165e:	f004 ffe7 	bl	8006630 <HAL_GetEnableIrq>
 8001662:	61b8      	str	r0, [r7, #24]
    }
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8001664:	f004 ffd6 	bl	8006614 <HAL_DisableIrq>
    hDevice->pendingCtrl = true;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  __ASM volatile ("cpsie i" : : : "memory");
 8001670:	b662      	cpsie	i
}
 8001672:	bf00      	nop
    ADI_HAL_EXIT_CRITICAL_SECTION();

    /* Wait for ongoing SPI transaction to finish, with a timeout. */
    timeout = ADI_SPI_TIMEOUT;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MAC_WriteRegister+0xe8>)
 8001676:	617b      	str	r3, [r7, #20]
    while (timeout && (hDevice->spiState != ADI_MAC_SPI_STATE_READY))
 8001678:	e002      	b.n	8001680 <MAC_WriteRegister+0x68>
    {
        timeout--;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3b01      	subs	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
    while (timeout && (hDevice->spiState != ADI_MAC_SPI_STATE_READY))
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d004      	beq.n	8001690 <MAC_WriteRegister+0x78>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	785b      	ldrb	r3, [r3, #1]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f4      	bne.n	800167a <MAC_WriteRegister+0x62>
    }

    if (!timeout)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <MAC_WriteRegister+0x84>
    {
        result = ADI_ETH_COMM_TIMEOUT;
 8001696:	2304      	movs	r3, #4
 8001698:	77fb      	strb	r3, [r7, #31]
        goto end;
 800169a:	e023      	b.n	80016e4 <MAC_WriteRegister+0xcc>

#else

    (void)buf;

    hDevice->wnr = ADI_MAC_SPI_WRITE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    hDevice->regAddr = regAddr;
 80016a4:	897a      	ldrh	r2, [r7, #10]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hDevice->pRegData = &regData;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1d3a      	adds	r2, r7, #4
 80016b0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    hDevice->cnt = 1;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    hDevice->state = ADI_MAC_STATE_CONTROL_START;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2205      	movs	r2, #5
 80016c0:	701a      	strb	r2, [r3, #0]

    oaStateMachine(hDevice);
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f002 ff14 	bl	80044f0 <oaStateMachine>

    while (hDevice->state != ADI_MAC_STATE_READY)
 80016c8:	bf00      	nop
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d1fa      	bne.n	80016ca <MAC_WriteRegister+0xb2>
      ;

    if (hDevice->spiErr)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <MAC_WriteRegister+0xca>
    {
        result = ADI_ETH_SPI_ERROR;
 80016dc:	2319      	movs	r3, #25
 80016de:	77fb      	strb	r3, [r7, #31]
 80016e0:	e000      	b.n	80016e4 <MAC_WriteRegister+0xcc>
    }

#endif

end:
 80016e2:	bf00      	nop
    hDevice->pendingCtrl = false;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    if (backup)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MAC_WriteRegister+0xde>
    {
        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 80016f2:	f004 ff96 	bl	8006622 <HAL_EnableIrq>
    }

    return result;
 80016f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	000186a0 	.word	0x000186a0

08001704 <waitMdioReady>:

adi_eth_Result_e waitMdioReady(adi_mac_Device_t *hDevice, uint16_t addrOffset)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
    adi_eth_Result_e        result = ADI_ETH_SUCCESS;
 8001710:	2300      	movs	r3, #0
 8001712:	74bb      	strb	r3, [r7, #18]
    ADI_MAC_MDIOACC_0__t    mdioCmd;
    uint32_t                retryCount = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
    bool                    mdioRdy = false;
 8001718:	2300      	movs	r3, #0
 800171a:	74fb      	strb	r3, [r7, #19]

    do
    {
        result = MAC_ReadRegister(hDevice, addrOffset, &mdioCmd.VALUE32);
 800171c:	f107 020c 	add.w	r2, r7, #12
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	4619      	mov	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff01 	bl	800152c <MAC_ReadRegister>
 800172a:	4603      	mov	r3, r0
 800172c:	74bb      	strb	r3, [r7, #18]
        if (result != ADI_ETH_SUCCESS)
 800172e:	7cbb      	ldrb	r3, [r7, #18]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d116      	bne.n	8001762 <waitMdioReady+0x5e>
        {
            break;
        }
        else if (mdioCmd.MDIO_TRDONE)
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <waitMdioReady+0x40>
        {
            mdioRdy = true;
 8001740:	2301      	movs	r3, #1
 8001742:	74fb      	strb	r3, [r7, #19]
        }
    } while (((result != ADI_ETH_SUCCESS) || !mdioRdy) && (retryCount++ < ADI_MAC_MDIO_MAX_RETRIES));
 8001744:	7cbb      	ldrb	r3, [r7, #18]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <waitMdioReady+0x52>
 800174a:	7cfb      	ldrb	r3, [r7, #19]
 800174c:	f083 0301 	eor.w	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <waitMdioReady+0x60>
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	617a      	str	r2, [r7, #20]
 800175c:	2b09      	cmp	r3, #9
 800175e:	d9dd      	bls.n	800171c <waitMdioReady+0x18>
 8001760:	e000      	b.n	8001764 <waitMdioReady+0x60>
            break;
 8001762:	bf00      	nop

    result = ((result == ADI_ETH_SUCCESS) && mdioRdy) ? ADI_ETH_SUCCESS: ADI_ETH_MDIO_TIMEOUT;
 8001764:	7cbb      	ldrb	r3, [r7, #18]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <waitMdioReady+0x6c>
 800176a:	7cfb      	ldrb	r3, [r7, #19]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <waitMdioReady+0x70>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <waitMdioReady+0x72>
 8001774:	2300      	movs	r3, #0
 8001776:	74bb      	strb	r3, [r7, #18]

    return result;
 8001778:	7cbb      	ldrb	r3, [r7, #18]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <waitDeviceReady>:

adi_eth_Result_e waitDeviceReady(adi_mac_Device_t *hDevice)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800178c:	2300      	movs	r3, #0
 800178e:	77fb      	strb	r3, [r7, #31]
    uint32_t            retryCount = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
    bool                resetDone = false;
 8001794:	2300      	movs	r3, #0
 8001796:	75fb      	strb	r3, [r7, #23]
    uint32_t            status0;
    bool                commOk = false;
 8001798:	2300      	movs	r3, #0
 800179a:	75bb      	strb	r3, [r7, #22]
    uint32_t            phyId;

    /* Poll PHYID register to establish the device has been brought up (powered up, out of reset). */
    retryCount = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
    commOk = false;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75bb      	strb	r3, [r7, #22]
    while ((!commOk) && (retryCount++ < ADI_MAC_INIT_MAX_RETRIES))
 80017a4:	e011      	b.n	80017ca <waitDeviceReady+0x46>
    {
        result = MAC_ReadRegister(hDevice, ADDR_MAC_PHYID, &phyId);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	461a      	mov	r2, r3
 80017ac:	2101      	movs	r1, #1
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff febc 	bl	800152c <MAC_ReadRegister>
 80017b4:	4603      	mov	r3, r0
 80017b6:	77fb      	strb	r3, [r7, #31]
        if ((result == ADI_ETH_SUCCESS) && (phyId == RSTVAL_MAC_PHYID))
 80017b8:	7ffb      	ldrb	r3, [r7, #31]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d105      	bne.n	80017ca <waitDeviceReady+0x46>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4a28      	ldr	r2, [pc, #160]	; (8001864 <waitDeviceReady+0xe0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <waitDeviceReady+0x46>
        {
            commOk = true;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75bb      	strb	r3, [r7, #22]
    while ((!commOk) && (retryCount++ < ADI_MAC_INIT_MAX_RETRIES))
 80017ca:	7dbb      	ldrb	r3, [r7, #22]
 80017cc:	f083 0301 	eor.w	r3, r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <waitDeviceReady+0x60>
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1c5a      	adds	r2, r3, #1
 80017da:	61ba      	str	r2, [r7, #24]
 80017dc:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d9e0      	bls.n	80017a6 <waitDeviceReady+0x22>
        }
    }

    if (!commOk)
 80017e4:	7dbb      	ldrb	r3, [r7, #22]
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d01c      	beq.n	800182a <waitDeviceReady+0xa6>
    {
        result = ADI_ETH_COMM_TIMEOUT;
 80017f0:	2304      	movs	r3, #4
 80017f2:	77fb      	strb	r3, [r7, #31]
        goto end;
 80017f4:	e030      	b.n	8001858 <waitDeviceReady+0xd4>
    }

    /* Now we can check RESETC without worrying about status0 comming back as all 0xF due to MAC-PHY still in reset. */
    while ((!resetDone) && (retryCount++ < ADI_MAC_IF_UP_MAX_RETRIES))
    {
        result = MAC_ReadRegister(hDevice, ADDR_MAC_STATUS0, &status0);
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	461a      	mov	r2, r3
 80017fc:	2108      	movs	r1, #8
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fe94 	bl	800152c <MAC_ReadRegister>
 8001804:	4603      	mov	r3, r0
 8001806:	77fb      	strb	r3, [r7, #31]
        if ((result == ADI_ETH_SUCCESS) && ((status0 & BITM_MAC_STATUS0_RESETC) == BITM_MAC_STATUS0_RESETC))
 8001808:	7ffb      	ldrb	r3, [r7, #31]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <waitDeviceReady+0xa6>
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <waitDeviceReady+0xa6>
        {
            resetDone = true;
 8001818:	2301      	movs	r3, #1
 800181a:	75fb      	strb	r3, [r7, #23]
            result = MAC_WriteRegister(hDevice, ADDR_MAC_STATUS0, BITM_MAC_STATUS0_RESETC);
 800181c:	2240      	movs	r2, #64	; 0x40
 800181e:	2108      	movs	r1, #8
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fef9 	bl	8001618 <MAC_WriteRegister>
 8001826:	4603      	mov	r3, r0
 8001828:	77fb      	strb	r3, [r7, #31]
    while ((!resetDone) && (retryCount++ < ADI_MAC_IF_UP_MAX_RETRIES))
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	f083 0301 	eor.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <waitDeviceReady+0xc0>
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	61ba      	str	r2, [r7, #24]
 800183c:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001840:	4293      	cmp	r3, r2
 8001842:	d9d8      	bls.n	80017f6 <waitDeviceReady+0x72>
        }
    }
    if (!resetDone)
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	f083 0301 	eor.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <waitDeviceReady+0xd2>
    {
        result = ADI_ETH_SW_RESET_TIMEOUT;
 8001850:	231a      	movs	r3, #26
 8001852:	77fb      	strb	r3, [r7, #31]
 8001854:	e000      	b.n	8001858 <waitDeviceReady+0xd4>
    }

end:
 8001856:	bf00      	nop
    return result;
 8001858:	7ffb      	ldrb	r3, [r7, #31]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	0283bc91 	.word	0x0283bc91

08001868 <MAC_PhyRead>:
 * @param [out] data - Pointer to the data buffer.
 *
 * @return 0 in case of success, positive error code otherwise.
*/
adi_eth_Result_e MAC_PhyRead(adi_mac_Device_t *hDevice,  uint8_t hwAddr, uint32_t regAddr, uint16_t *regData)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	460b      	mov	r3, r1
 8001876:	72fb      	strb	r3, [r7, #11]
    adi_eth_Result_e       result = ADI_ETH_SUCCESS;
 8001878:	2300      	movs	r3, #0
 800187a:	75fb      	strb	r3, [r7, #23]
    ADI_MAC_MDIOACC_0__t   mdioCmd;

    /* Use the first MDIO register for the address operation.   */
    /* MDIO Speed defaults to 2.5MHz per CONFIG2.MSPEED.        */
    mdioCmd.MDIO_DEVAD = DEVTYPE(regAddr);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	b2da      	uxtb	r2, r3
 8001886:	7cbb      	ldrb	r3, [r7, #18]
 8001888:	f362 0304 	bfi	r3, r2, #0, #5
 800188c:	74bb      	strb	r3, [r7, #18]
    mdioCmd.MDIO_ST = ENUM_MAC_MDIOACC_N__MDIO_ST_CLAUSE45;
 800188e:	7cfb      	ldrb	r3, [r7, #19]
 8001890:	f36f 1305 	bfc	r3, #4, #2
 8001894:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_PRTAD = hwAddr;
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	b2da      	uxtb	r2, r3
 800189e:	8a7b      	ldrh	r3, [r7, #18]
 80018a0:	f362 1349 	bfi	r3, r2, #5, #5
 80018a4:	827b      	strh	r3, [r7, #18]
    mdioCmd.MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_ADDR;
 80018a6:	7cfb      	ldrb	r3, [r7, #19]
 80018a8:	f36f 0383 	bfc	r3, #2, #2
 80018ac:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_DATA = REGADDR(regAddr);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	823b      	strh	r3, [r7, #16]
    mdioCmd.MDIO_TRDONE = 0;
 80018b4:	7cfb      	ldrb	r3, [r7, #19]
 80018b6:	f36f 13c7 	bfc	r3, #7, #1
 80018ba:	74fb      	strb	r3, [r7, #19]
    if((result = MAC_WriteRegister(hDevice, ADDR_MAC_MDIOACC_0_, mdioCmd.VALUE32)) != ADI_ETH_SUCCESS)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	461a      	mov	r2, r3
 80018c0:	2120      	movs	r1, #32
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff fea8 	bl	8001618 <MAC_WriteRegister>
 80018c8:	4603      	mov	r3, r0
 80018ca:	75fb      	strb	r3, [r7, #23]
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d12a      	bne.n	8001928 <MAC_PhyRead+0xc0>
    {
        goto end;
    }

    /* Use the next MDIO register for the read operation.       */
    mdioCmd.MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_RD;
 80018d2:	7cfb      	ldrb	r3, [r7, #19]
 80018d4:	f043 030c 	orr.w	r3, r3, #12
 80018d8:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_DATA = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	823b      	strh	r3, [r7, #16]
    mdioCmd.MDIO_TRDONE = 0;
 80018de:	7cfb      	ldrb	r3, [r7, #19]
 80018e0:	f36f 13c7 	bfc	r3, #7, #1
 80018e4:	74fb      	strb	r3, [r7, #19]
    if ((result = MAC_WriteRegister(hDevice, ADDR_MAC_MDIOACC_1_, mdioCmd.VALUE32)) != ADI_ETH_SUCCESS)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	461a      	mov	r2, r3
 80018ea:	2121      	movs	r1, #33	; 0x21
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff fe93 	bl	8001618 <MAC_WriteRegister>
 80018f2:	4603      	mov	r3, r0
 80018f4:	75fb      	strb	r3, [r7, #23]
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d117      	bne.n	800192c <MAC_PhyRead+0xc4>
    {
        goto end;
    }

    result = waitMdioReady(hDevice, ADDR_MAC_MDIOACC_1_);
 80018fc:	2121      	movs	r1, #33	; 0x21
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff ff00 	bl	8001704 <waitMdioReady>
 8001904:	4603      	mov	r3, r0
 8001906:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d110      	bne.n	8001930 <MAC_PhyRead+0xc8>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, ADDR_MAC_MDIOACC_1_, &mdioCmd.VALUE32);
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	461a      	mov	r2, r3
 8001914:	2121      	movs	r1, #33	; 0x21
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7ff fe08 	bl	800152c <MAC_ReadRegister>
 800191c:	4603      	mov	r3, r0
 800191e:	75fb      	strb	r3, [r7, #23]
    *regData = mdioCmd.MDIO_DATA;
 8001920:	8a3a      	ldrh	r2, [r7, #16]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	801a      	strh	r2, [r3, #0]
 8001926:	e004      	b.n	8001932 <MAC_PhyRead+0xca>
        goto end;
 8001928:	bf00      	nop
 800192a:	e002      	b.n	8001932 <MAC_PhyRead+0xca>
        goto end;
 800192c:	bf00      	nop
 800192e:	e000      	b.n	8001932 <MAC_PhyRead+0xca>
        goto end;
 8001930:	bf00      	nop

end:
    return result;
 8001932:	7dfb      	ldrb	r3, [r7, #23]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <MAC_PhyWrite>:

adi_eth_Result_e MAC_PhyWrite(adi_mac_Device_t *hDevice,  uint8_t hwAddr, uint32_t regAddr, uint16_t data)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	460b      	mov	r3, r1
 800194a:	72fb      	strb	r3, [r7, #11]
 800194c:	4613      	mov	r3, r2
 800194e:	813b      	strh	r3, [r7, #8]
    adi_eth_Result_e       result = ADI_ETH_SUCCESS;
 8001950:	2300      	movs	r3, #0
 8001952:	75fb      	strb	r3, [r7, #23]
    ADI_MAC_MDIOACC_0__t   mdioCmd;

    /* Use the first MDIO register for the address operation.   */
    /* MDIO Speed defaults to 2.5MHz per CONFIG2.MSPEED.        */
    mdioCmd.MDIO_DEVAD = DEVTYPE(regAddr);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	b2da      	uxtb	r2, r3
 800195e:	7cbb      	ldrb	r3, [r7, #18]
 8001960:	f362 0304 	bfi	r3, r2, #0, #5
 8001964:	74bb      	strb	r3, [r7, #18]
    mdioCmd.MDIO_ST = ENUM_MAC_MDIOACC_N__MDIO_ST_CLAUSE45;
 8001966:	7cfb      	ldrb	r3, [r7, #19]
 8001968:	f36f 1305 	bfc	r3, #4, #2
 800196c:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_PRTAD = hwAddr;
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	b2da      	uxtb	r2, r3
 8001976:	8a7b      	ldrh	r3, [r7, #18]
 8001978:	f362 1349 	bfi	r3, r2, #5, #5
 800197c:	827b      	strh	r3, [r7, #18]
    mdioCmd.MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_ADDR;
 800197e:	7cfb      	ldrb	r3, [r7, #19]
 8001980:	f36f 0383 	bfc	r3, #2, #2
 8001984:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_DATA = REGADDR(regAddr);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	b29b      	uxth	r3, r3
 800198a:	823b      	strh	r3, [r7, #16]
    mdioCmd.MDIO_TRDONE = 0;
 800198c:	7cfb      	ldrb	r3, [r7, #19]
 800198e:	f36f 13c7 	bfc	r3, #7, #1
 8001992:	74fb      	strb	r3, [r7, #19]
    if((result = MAC_WriteRegister(hDevice, ADDR_MAC_MDIOACC_0_, mdioCmd.VALUE32)) != ADI_ETH_SUCCESS)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	461a      	mov	r2, r3
 8001998:	2120      	movs	r1, #32
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff fe3c 	bl	8001618 <MAC_WriteRegister>
 80019a0:	4603      	mov	r3, r0
 80019a2:	75fb      	strb	r3, [r7, #23]
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11e      	bne.n	80019e8 <MAC_PhyWrite+0xac>
    {
        goto end;
    }

    /* Use the next MDIO register for the write operation.      */
    mdioCmd.MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_WR;
 80019aa:	7cfb      	ldrb	r3, [r7, #19]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f362 0383 	bfi	r3, r2, #2, #2
 80019b2:	74fb      	strb	r3, [r7, #19]
    mdioCmd.MDIO_DATA = data;
 80019b4:	893b      	ldrh	r3, [r7, #8]
 80019b6:	823b      	strh	r3, [r7, #16]
    mdioCmd.MDIO_TRDONE = 0;
 80019b8:	7cfb      	ldrb	r3, [r7, #19]
 80019ba:	f36f 13c7 	bfc	r3, #7, #1
 80019be:	74fb      	strb	r3, [r7, #19]
    if ((result = MAC_WriteRegister(hDevice, ADDR_MAC_MDIOACC_1_, mdioCmd.VALUE32)) != ADI_ETH_SUCCESS)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	461a      	mov	r2, r3
 80019c4:	2121      	movs	r1, #33	; 0x21
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f7ff fe26 	bl	8001618 <MAC_WriteRegister>
 80019cc:	4603      	mov	r3, r0
 80019ce:	75fb      	strb	r3, [r7, #23]
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <MAC_PhyWrite+0xb0>
    {
        goto end;
    }

    result = waitMdioReady(hDevice, ADDR_MAC_MDIOACC_1_);
 80019d6:	2121      	movs	r1, #33	; 0x21
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fe93 	bl	8001704 <waitMdioReady>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
 80019e4:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 80019e6:	e002      	b.n	80019ee <MAC_PhyWrite+0xb2>
        goto end;
 80019e8:	bf00      	nop
 80019ea:	e000      	b.n	80019ee <MAC_PhyWrite+0xb2>
        goto end;
 80019ec:	bf00      	nop
    return result;
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <MAC_SubmitTxBuffer>:

adi_eth_Result_e MAC_SubmitTxBuffer(adi_mac_Device_t *hDevice, adi_mac_FrameHeader_t header, adi_eth_BufDesc_t *pBufDesc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	8139      	strh	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e          result = ADI_ETH_SUCCESS;
 8001a04:	2300      	movs	r3, #0
 8001a06:	75fb      	strb	r3, [r7, #23]

    if (hDevice == NULL)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <MAC_SubmitTxBuffer+0x1c>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001a0e:	230a      	movs	r3, #10
 8001a10:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001a12:	e06a      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <MAC_SubmitTxBuffer+0x2c>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001a1e:	2306      	movs	r3, #6
 8001a20:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001a22:	e062      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
    }

    if (pBufDesc == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <MAC_SubmitTxBuffer+0x38>
    {
        result = ADI_ETH_INVALID_PARAM;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001a2e:	e05c      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
    }

    if ((pBufDesc->trxSize < MIN_FRAME_SIZE) || (pBufDesc->trxSize > MAX_FRAME_SIZE))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b3b      	cmp	r3, #59	; 0x3b
 8001a36:	d905      	bls.n	8001a44 <MAC_SubmitTxBuffer+0x4c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f240 52ee 	movw	r2, #1518	; 0x5ee
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d902      	bls.n	8001a4a <MAC_SubmitTxBuffer+0x52>
    {
        result = ADI_ETH_PARAM_OUT_OF_RANGE;
 8001a44:	2309      	movs	r3, #9
 8001a46:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001a48:	e04f      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
    }

    /* If FCS is calculated on the host, the buffer needs 4 bytes more to store the FCS. */
    if (hDevice->fcsCheckEn)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00f      	beq.n	8001a74 <MAC_SubmitTxBuffer+0x7c>
    {
        if ((pBufDesc->bufSize < pBufDesc->trxSize) || (pBufDesc->bufSize - pBufDesc->trxSize < FCS_SIZE))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d306      	bcc.n	8001a6e <MAC_SubmitTxBuffer+0x76>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d802      	bhi.n	8001a74 <MAC_SubmitTxBuffer+0x7c>
        {
            result = ADI_ETH_PARAM_OUT_OF_RANGE;
 8001a6e:	2309      	movs	r3, #9
 8001a70:	75fb      	strb	r3, [r7, #23]
            goto end;
 8001a72:	e03a      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
        }
    }

    if (queueIsFull(&hDevice->txQueue))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	336c      	adds	r3, #108	; 0x6c
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fa38 	bl	8000eee <queueIsFull>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <MAC_SubmitTxBuffer+0x92>
    {
        result = ADI_ETH_QUEUE_FULL;
 8001a84:	2312      	movs	r3, #18
 8001a86:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001a88:	e02f      	b.n	8001aea <MAC_SubmitTxBuffer+0xf2>
    }

    hDevice->txQueue.pEntries[hDevice->txQueue.head].header.VALUE16 = header.VALUE16;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	893a      	ldrh	r2, [r7, #8]
 8001a98:	801a      	strh	r2, [r3, #0]

    if (hDevice->fcsCheckEn)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d015      	beq.n	8001ad0 <MAC_SubmitTxBuffer+0xd8>
    {
        uint32_t fcs = ADI_HAL_FCS_CALCULATE(hDevice->adinDevice, &pBufDesc->pBuf[0], pBufDesc->trxSize);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f004 fbee 	bl	8006290 <HAL_FcsCalculate>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]
        memcpy(&pBufDesc->pBuf[pBufDesc->trxSize], &fcs , FCS_SIZE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	601a      	str	r2, [r3, #0]
        pBufDesc->trxSize += FCS_SIZE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	1d1a      	adds	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
    }
    hDevice->txQueue.pEntries[hDevice->txQueue.head].pBufDesc = pBufDesc;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	605a      	str	r2, [r3, #4]

    queueAdd(&hDevice->txQueue);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	336c      	adds	r3, #108	; 0x6c
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fa2d 	bl	8000f44 <queueAdd>

end:

    if (!queueIsEmpty(&hDevice->txQueue))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	336c      	adds	r3, #108	; 0x6c
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fa11 	bl	8000f16 <queueIsEmpty>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f083 0301 	eor.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <MAC_SubmitTxBuffer+0x118>
    {
        if (hDevice->state == ADI_MAC_STATE_READY)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d102      	bne.n	8001b10 <MAC_SubmitTxBuffer+0x118>
        {
            MAC_ProcessTxQueue(hDevice);
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f8ad 	bl	8001c6a <MAC_ProcessTxQueue>
        }
    }

    return result;
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <MAC_SubmitRxBuffer>:


adi_eth_Result_e MAC_SubmitRxBuffer(adi_mac_Device_t *hDevice, adi_eth_BufDesc_t *pBufDesc)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
#if ADI_PAUSE_RX_IF_NO_BUFFERS
    uint32_t            rxRdyMask;
#endif
#endif

    if (hDevice == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <MAC_SubmitRxBuffer+0x1a>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001b2e:	230a      	movs	r3, #10
 8001b30:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001b32:	e041      	b.n	8001bb8 <MAC_SubmitRxBuffer+0x9e>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <MAC_SubmitRxBuffer+0x2a>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001b3e:	2306      	movs	r3, #6
 8001b40:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001b42:	e039      	b.n	8001bb8 <MAC_SubmitRxBuffer+0x9e>
    }

    /* For Rx we only need to check for minimum size. */
    /* The buffer will always have the FCS appended. */
    if (pBufDesc->bufSize < MIN_FRAME_SIZE + FCS_SIZE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b3f      	cmp	r3, #63	; 0x3f
 8001b4a:	d802      	bhi.n	8001b52 <MAC_SubmitRxBuffer+0x38>
    {
        result = ADI_ETH_PARAM_OUT_OF_RANGE;
 8001b4c:	2309      	movs	r3, #9
 8001b4e:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001b50:	e032      	b.n	8001bb8 <MAC_SubmitRxBuffer+0x9e>
    }

    if (queueIsFull(&hDevice->rxQueueLp))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	33a8      	adds	r3, #168	; 0xa8
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f9c9 	bl	8000eee <queueIsFull>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <MAC_SubmitRxBuffer+0x4e>
    {
        result = ADI_ETH_QUEUE_FULL;
 8001b62:	2312      	movs	r3, #18
 8001b64:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001b66:	e027      	b.n	8001bb8 <MAC_SubmitRxBuffer+0x9e>
    }

    hDevice->rxQueueLp.pEntries[hDevice->rxQueueLp.head].header.VALUE16 = 0x0000;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	2200      	movs	r2, #0
 8001b7a:	801a      	strh	r2, [r3, #0]
    hDevice->rxQueueLp.pEntries[hDevice->rxQueueLp.head].pBufDesc = pBufDesc;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

    queueAdd(&hDevice->rxQueueLp);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	33a8      	adds	r3, #168	; 0xa8
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f9d5 	bl	8000f44 <queueAdd>
    }
#endif
#else

    /* If idle, try to start a data transaction. */
    if (hDevice->state == ADI_MAC_STATE_READY)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d108      	bne.n	8001bb6 <MAC_SubmitRxBuffer+0x9c>
    {
        hDevice->state = ADI_MAC_STATE_DATA_START;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	701a      	strb	r2, [r3, #0]
        result = oaStateMachine(hDevice);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f002 fca0 	bl	80044f0 <oaStateMachine>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e000      	b.n	8001bb8 <MAC_SubmitRxBuffer+0x9e>
    }
#endif

end:
 8001bb6:	bf00      	nop
    return result;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <MAC_SubmitRxBufferHp>:

#if defined(ADI_MAC_ENABLE_RX_QUEUE_HI_PRIO)
adi_eth_Result_e MAC_SubmitRxBufferHp(adi_mac_Device_t *hDevice, adi_eth_BufDesc_t *pBufDesc)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]
#if ADI_PAUSE_RX_IF_NO_BUFFERS
    uint32_t            rxRdyMask;
#endif
#endif

    if (hDevice == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <MAC_SubmitRxBufferHp+0x1a>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001bda:	e041      	b.n	8001c60 <MAC_SubmitRxBufferHp+0x9e>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <MAC_SubmitRxBufferHp+0x2a>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001be6:	2306      	movs	r3, #6
 8001be8:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001bea:	e039      	b.n	8001c60 <MAC_SubmitRxBufferHp+0x9e>
    }

    /* For Rx we only need to check for minimum size. */
    /* The buffer will always have the FCS appended. */
    if (pBufDesc->bufSize < MIN_FRAME_SIZE + FCS_SIZE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b3f      	cmp	r3, #63	; 0x3f
 8001bf2:	d802      	bhi.n	8001bfa <MAC_SubmitRxBufferHp+0x38>
    {
        result = ADI_ETH_PARAM_OUT_OF_RANGE;
 8001bf4:	2309      	movs	r3, #9
 8001bf6:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001bf8:	e032      	b.n	8001c60 <MAC_SubmitRxBufferHp+0x9e>
    }

    if (queueIsFull(&hDevice->rxQueueHp))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	33e0      	adds	r3, #224	; 0xe0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f975 	bl	8000eee <queueIsFull>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <MAC_SubmitRxBufferHp+0x4e>
    {
        result = ADI_ETH_QUEUE_FULL;
 8001c0a:	2312      	movs	r3, #18
 8001c0c:	73fb      	strb	r3, [r7, #15]
        goto end;
 8001c0e:	e027      	b.n	8001c60 <MAC_SubmitRxBufferHp+0x9e>
    }

    hDevice->rxQueueHp.pEntries[hDevice->rxQueueHp.head].header.VALUE16 = 0x0000;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	2200      	movs	r2, #0
 8001c22:	801a      	strh	r2, [r3, #0]
    hDevice->rxQueueHp.pEntries[hDevice->rxQueueHp.head].pBufDesc = pBufDesc;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	605a      	str	r2, [r3, #4]

    queueAdd(&hDevice->rxQueueHp);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	33e0      	adds	r3, #224	; 0xe0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f981 	bl	8000f44 <queueAdd>
    }
#endif
#else

    /* If idle, try to start a data transaction. */
    if (hDevice->state == ADI_MAC_STATE_READY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d108      	bne.n	8001c5e <MAC_SubmitRxBufferHp+0x9c>
    {
        hDevice->state = ADI_MAC_STATE_DATA_START;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2207      	movs	r2, #7
 8001c50:	701a      	strb	r2, [r3, #0]
        result = oaStateMachine(hDevice);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f002 fc4c 	bl	80044f0 <oaStateMachine>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e000      	b.n	8001c60 <MAC_SubmitRxBufferHp+0x9e>
    }
#endif

end:
 8001c5e:	bf00      	nop
    return result;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <MAC_ProcessTxQueue>:
#endif

adi_eth_Result_e MAC_ProcessTxQueue(adi_mac_Device_t *hDevice)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e        result = ADI_ETH_SUCCESS;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c76:	b672      	cpsid	i
}
 8001c78:	bf00      	nop
    uint32_t                backup;

    ADI_HAL_ENTER_CRITICAL_SECTION(hDevice->adinDevice);
    backup = ADI_HAL_GET_ENABLE_IRQ(hDevice->adinDevice);
 8001c7a:	f004 fcd9 	bl	8006630 <HAL_GetEnableIrq>
 8001c7e:	60b8      	str	r0, [r7, #8]
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8001c80:	f004 fcc8 	bl	8006614 <HAL_DisableIrq>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c84:	b662      	cpsie	i
}
 8001c86:	bf00      	nop
    ADI_HAL_EXIT_CRITICAL_SECTION(hDevice->adinDevice);

    if (!queueIsEmpty(&hDevice->txQueue))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	336c      	adds	r3, #108	; 0x6c
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f942 	bl	8000f16 <queueIsEmpty>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <MAC_ProcessTxQueue+0x62>
    {
        if (hDevice->state == ADI_MAC_STATE_READY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d10b      	bne.n	8001cc0 <MAC_ProcessTxQueue+0x56>
        {
            result = MAC_SendFrame(hDevice, &hDevice->txQueue.pEntries[hDevice->txQueue.tail]);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f003 ffff 	bl	8005cba <MAC_SendFrame>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]
        }

        if (result != ADI_ETH_SUCCESS)
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <MAC_ProcessTxQueue+0x6c>
        {
            ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8001cc6:	f004 fcac 	bl	8006622 <HAL_EnableIrq>
 8001cca:	e004      	b.n	8001cd6 <MAC_ProcessTxQueue+0x6c>
        }
    }
    else
    {
        if (backup)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MAC_ProcessTxQueue+0x6c>
        {
            ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8001cd2:	f004 fca6 	bl	8006622 <HAL_EnableIrq>
        }
    }

    return result;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <MAC_GetStatCounters>:
 * @param [out] stat - statistics counters.
 *
 * @return 0 in case of success, positive error code otherwise.
*/
adi_eth_Result_e MAC_GetStatCounters(adi_mac_Device_t *hDevice, uint32_t port, adi_eth_MacStatCounters_t *stat)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e            result      = ADI_ETH_SUCCESS;
 8001cec:	2300      	movs	r3, #0
 8001cee:	75fb      	strb	r3, [r7, #23]
    uint16_t                    baseAddr    = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	82bb      	strh	r3, [r7, #20]

    if (hDevice == NULL)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <MAC_GetStatCounters+0x20>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001cfe:	e0e8      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <MAC_GetStatCounters+0x30>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	75fb      	strb	r3, [r7, #23]
        goto end;
 8001d0e:	e0e0      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
    else
    {
        baseAddr = 0;
    }
#endif
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_FRM_CNT, &stat->RX_FRM_CNT);
 8001d10:	8abb      	ldrh	r3, [r7, #20]
 8001d12:	33a0      	adds	r3, #160	; 0xa0
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff fc06 	bl	800152c <MAC_ReadRegister>
 8001d20:	4603      	mov	r3, r0
 8001d22:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 80ba 	bne.w	8001ea0 <MAC_GetStatCounters+0x1c0>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_BCAST_CNT, &stat->RX_BCAST_CNT);
 8001d2c:	8abb      	ldrh	r3, [r7, #20]
 8001d2e:	33a1      	adds	r3, #161	; 0xa1
 8001d30:	b299      	uxth	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	461a      	mov	r2, r3
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7ff fbf7 	bl	800152c <MAC_ReadRegister>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 80ad 	bne.w	8001ea4 <MAC_GetStatCounters+0x1c4>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_MCAST_CNT, &stat->RX_MCAST_CNT);
 8001d4a:	8abb      	ldrh	r3, [r7, #20]
 8001d4c:	33a2      	adds	r3, #162	; 0xa2
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3308      	adds	r3, #8
 8001d54:	461a      	mov	r2, r3
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff fbe8 	bl	800152c <MAC_ReadRegister>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 80a0 	bne.w	8001ea8 <MAC_GetStatCounters+0x1c8>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_UCAST_CNT, &stat->RX_UCAST_CNT);
 8001d68:	8abb      	ldrh	r3, [r7, #20]
 8001d6a:	33a3      	adds	r3, #163	; 0xa3
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	330c      	adds	r3, #12
 8001d72:	461a      	mov	r2, r3
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff fbd9 	bl	800152c <MAC_ReadRegister>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 8093 	bne.w	8001eac <MAC_GetStatCounters+0x1cc>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_CRC_ERR_CNT, &stat->RX_CRC_ERR_CNT);
 8001d86:	8abb      	ldrh	r3, [r7, #20]
 8001d88:	33a4      	adds	r3, #164	; 0xa4
 8001d8a:	b299      	uxth	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3310      	adds	r3, #16
 8001d90:	461a      	mov	r2, r3
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff fbca 	bl	800152c <MAC_ReadRegister>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8086 	bne.w	8001eb0 <MAC_GetStatCounters+0x1d0>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_ALGN_ERR_CNT, &stat->RX_ALGN_ERR_CNT);
 8001da4:	8abb      	ldrh	r3, [r7, #20]
 8001da6:	33a5      	adds	r3, #165	; 0xa5
 8001da8:	b299      	uxth	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3314      	adds	r3, #20
 8001dae:	461a      	mov	r2, r3
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff fbbb 	bl	800152c <MAC_ReadRegister>
 8001db6:	4603      	mov	r3, r0
 8001db8:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d179      	bne.n	8001eb4 <MAC_GetStatCounters+0x1d4>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_LS_ERR_CNT, &stat->RX_LS_ERR_CNT);
 8001dc0:	8abb      	ldrh	r3, [r7, #20]
 8001dc2:	33a6      	adds	r3, #166	; 0xa6
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3318      	adds	r3, #24
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff fbad 	bl	800152c <MAC_ReadRegister>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d16d      	bne.n	8001eb8 <MAC_GetStatCounters+0x1d8>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_PHY_ERR_CNT, &stat->RX_PHY_ERR_CNT);
 8001ddc:	8abb      	ldrh	r3, [r7, #20]
 8001dde:	33a7      	adds	r3, #167	; 0xa7
 8001de0:	b299      	uxth	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	331c      	adds	r3, #28
 8001de6:	461a      	mov	r2, r3
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff fb9f 	bl	800152c <MAC_ReadRegister>
 8001dee:	4603      	mov	r3, r0
 8001df0:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d161      	bne.n	8001ebc <MAC_GetStatCounters+0x1dc>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_TX_FRM_CNT, &stat->TX_FRM_CNT);
 8001df8:	8abb      	ldrh	r3, [r7, #20]
 8001dfa:	33a8      	adds	r3, #168	; 0xa8
 8001dfc:	b299      	uxth	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3320      	adds	r3, #32
 8001e02:	461a      	mov	r2, r3
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fb91 	bl	800152c <MAC_ReadRegister>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d155      	bne.n	8001ec0 <MAC_GetStatCounters+0x1e0>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_TX_BCAST_CNT, &stat->TX_BCAST_CNT);
 8001e14:	8abb      	ldrh	r3, [r7, #20]
 8001e16:	33a9      	adds	r3, #169	; 0xa9
 8001e18:	b299      	uxth	r1, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3324      	adds	r3, #36	; 0x24
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fb83 	bl	800152c <MAC_ReadRegister>
 8001e26:	4603      	mov	r3, r0
 8001e28:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d149      	bne.n	8001ec4 <MAC_GetStatCounters+0x1e4>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_TX_MCAST_CNT, &stat->TX_MCAST_CNT);
 8001e30:	8abb      	ldrh	r3, [r7, #20]
 8001e32:	33aa      	adds	r3, #170	; 0xaa
 8001e34:	b299      	uxth	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3328      	adds	r3, #40	; 0x28
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff fb75 	bl	800152c <MAC_ReadRegister>
 8001e42:	4603      	mov	r3, r0
 8001e44:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d13d      	bne.n	8001ec8 <MAC_GetStatCounters+0x1e8>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_TX_UCAST_CNT, &stat->TX_UCAST_CNT);
 8001e4c:	8abb      	ldrh	r3, [r7, #20]
 8001e4e:	33ab      	adds	r3, #171	; 0xab
 8001e50:	b299      	uxth	r1, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	332c      	adds	r3, #44	; 0x2c
 8001e56:	461a      	mov	r2, r3
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff fb67 	bl	800152c <MAC_ReadRegister>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d131      	bne.n	8001ecc <MAC_GetStatCounters+0x1ec>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_DROP_FULL_CNT, &stat->RX_DROP_FULL_CNT);
 8001e68:	8abb      	ldrh	r3, [r7, #20]
 8001e6a:	33ac      	adds	r3, #172	; 0xac
 8001e6c:	b299      	uxth	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3330      	adds	r3, #48	; 0x30
 8001e72:	461a      	mov	r2, r3
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff fb59 	bl	800152c <MAC_ReadRegister>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d125      	bne.n	8001ed0 <MAC_GetStatCounters+0x1f0>
    {
        goto end;
    }
    result = MAC_ReadRegister(hDevice, baseAddr + ADDR_MAC_P1_RX_DROP_FILT_CNT, &stat->RX_DROP_FILT_CNT);
 8001e84:	8abb      	ldrh	r3, [r7, #20]
 8001e86:	33ad      	adds	r3, #173	; 0xad
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3334      	adds	r3, #52	; 0x34
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f7ff fb4b 	bl	800152c <MAC_ReadRegister>
 8001e96:	4603      	mov	r3, r0
 8001e98:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
 8001e9c:	2b00      	cmp	r3, #0
    stat->TX_UCAST_CNT       = HTON32(locStat.TX_UCAST_CNT);
    stat->RX_DROP_FULL_CNT   = HTON32(locStat.RX_DROP_FULL_CNT);
    stat->RX_DROP_FILT_CNT   = HTON32(locStat.RX_DROP_FILT_CNT);
#endif

end:
 8001e9e:	e018      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ea0:	bf00      	nop
 8001ea2:	e016      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ea4:	bf00      	nop
 8001ea6:	e014      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ea8:	bf00      	nop
 8001eaa:	e012      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001eac:	bf00      	nop
 8001eae:	e010      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001eb0:	bf00      	nop
 8001eb2:	e00e      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001eb4:	bf00      	nop
 8001eb6:	e00c      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001eb8:	bf00      	nop
 8001eba:	e00a      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ebc:	bf00      	nop
 8001ebe:	e008      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ec0:	bf00      	nop
 8001ec2:	e006      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ec4:	bf00      	nop
 8001ec6:	e004      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ec8:	bf00      	nop
 8001eca:	e002      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ecc:	bf00      	nop
 8001ece:	e000      	b.n	8001ed2 <MAC_GetStatCounters+0x1f2>
        goto end;
 8001ed0:	bf00      	nop
    return result;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <MAC_AddAddressFilter>:

adi_eth_Result_e MAC_AddAddressFilter(adi_mac_Device_t *hDevice, uint8_t *macAddr, uint8_t *macAddrMask, uint16_t addrRule)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	807b      	strh	r3, [r7, #2]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t            addrIndex = ADI_MAC_ADDR_NUM_ENTRIES;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	623b      	str	r3, [r7, #32]
    uint32_t            maxAddrIndex;
    uint16_t            addrOffset;
    uint32_t            val32;

    if (hDevice == NULL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <MAC_AddAddressFilter+0x26>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8001efa:	230a      	movs	r3, #10
 8001efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto end;
 8001f00:	e0ca      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d103      	bne.n	8001f14 <MAC_AddAddressFilter+0x38>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto end;
 8001f12:	e0c1      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
    }

    maxAddrIndex = ADI_MAC_ADDR_NUM_ENTRIES;
 8001f14:	2310      	movs	r3, #16
 8001f16:	61fb      	str	r3, [r7, #28]
    if (macAddrMask != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MAC_AddAddressFilter+0x46>
    {
        maxAddrIndex = ADI_MAC_ADDR_MASK_MAX;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61fb      	str	r3, [r7, #28]
    }

    for (uint32_t i = 0; i < maxAddrIndex; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e00f      	b.n	8001f48 <MAC_AddAddressFilter+0x6c>
    {
        if (!(hDevice->addrFilterActive & (1 << i)))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fa42 f303 	asr.w	r3, r2, r3
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <MAC_AddAddressFilter+0x66>
        {
            addrIndex = i;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	623b      	str	r3, [r7, #32]
            break;
 8001f40:	e006      	b.n	8001f50 <MAC_AddAddressFilter+0x74>
    for (uint32_t i = 0; i < maxAddrIndex; i++)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3eb      	bcc.n	8001f28 <MAC_AddAddressFilter+0x4c>
        }
    }

    if (addrIndex == maxAddrIndex)
 8001f50:	6a3a      	ldr	r2, [r7, #32]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d103      	bne.n	8001f60 <MAC_AddAddressFilter+0x84>
    {
        result = ADI_ETH_ADDRESS_FILTER_TABLE_FULL;
 8001f58:	2316      	movs	r3, #22
 8001f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto end;
 8001f5e:	e09b      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
    }

    addrOffset = addrIndex * (ADDR_MAC_ADDR_FILT_UPR_1_ - ADDR_MAC_ADDR_FILT_UPR_0_);
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	827b      	strh	r3, [r7, #18]

    /* Write MAC address and address rules. Note MAC_ADDR_FILT_UPR needs to be written before MAC_ADDR_FILT_LWR. */
    val32 = (addrRule << 16) | (macAddr[0] << 8) | macAddr[1];
 8001f68:	887b      	ldrh	r3, [r7, #2]
 8001f6a:	041a      	lsls	r2, r3, #16
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	4313      	orrs	r3, r2
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	3201      	adds	r2, #1
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
    result = MAC_WriteRegister(hDevice, addrOffset + ADDR_MAC_ADDR_FILT_UPR_0_, val32);
 8001f7e:	8a7b      	ldrh	r3, [r7, #18]
 8001f80:	3350      	adds	r3, #80	; 0x50
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f7ff fb45 	bl	8001618 <MAC_WriteRegister>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(result != ADI_ETH_SUCCESS)
 8001f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d176      	bne.n	800208a <MAC_AddAddressFilter+0x1ae>
    {
        goto end;
    }

    val32 = (macAddr[2] << 24) | (macAddr[3] << 16) | (macAddr[4] << 8) | macAddr[5];
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	061a      	lsls	r2, r3, #24
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	3303      	adds	r3, #3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	431a      	orrs	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	3205      	adds	r2, #5
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
    result = MAC_WriteRegister(hDevice, addrOffset + ADDR_MAC_ADDR_FILT_LWR_0_, val32);
 8001fc2:	8a7b      	ldrh	r3, [r7, #18]
 8001fc4:	3351      	adds	r3, #81	; 0x51
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff fb23 	bl	8001618 <MAC_WriteRegister>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(result != ADI_ETH_SUCCESS)
 8001fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d156      	bne.n	800208e <MAC_AddAddressFilter+0x1b2>
        goto end;
    }

    /* Write MAC address mask. Note MAC_ADDR_MSK_UPR needs to be written before MAC_ADDR_MSK_LWR. */
    /* Allow special case of NULL translating to a mask of all 1s. */
    if (macAddrMask == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <MAC_AddAddressFilter+0x112>
    {
        val32 = 0xFFFF;
 8001fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	e007      	b.n	8001ffe <MAC_AddAddressFilter+0x122>
    }
    else
    {
        val32 = (macAddrMask[0] << 8) | macAddrMask[1];
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	3201      	adds	r2, #1
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
    }
    result = MAC_WriteRegister(hDevice, addrOffset + ADDR_MAC_ADDR_MSK_UPR_0_, val32);
 8001ffe:	8a7b      	ldrh	r3, [r7, #18]
 8002000:	3370      	adds	r3, #112	; 0x70
 8002002:	b29b      	uxth	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4619      	mov	r1, r3
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7ff fb05 	bl	8001618 <MAC_WriteRegister>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(result != ADI_ETH_SUCCESS)
 8002014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002018:	2b00      	cmp	r3, #0
 800201a:	d13a      	bne.n	8002092 <MAC_AddAddressFilter+0x1b6>
    {
        goto end;
    }

    if (macAddrMask == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d103      	bne.n	800202a <MAC_AddAddressFilter+0x14e>
    {
        val32 = 0xFFFFFFFF;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	e012      	b.n	8002050 <MAC_AddAddressFilter+0x174>
    }
    else
    {
        val32 = (macAddrMask[2] << 24) | (macAddrMask[3] << 16) | (macAddrMask[4] << 8) | macAddrMask[5];
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3302      	adds	r3, #2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	061a      	lsls	r2, r3, #24
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3303      	adds	r3, #3
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3304      	adds	r3, #4
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4313      	orrs	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	3205      	adds	r2, #5
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
    }
    result = MAC_WriteRegister(hDevice, addrOffset + ADDR_MAC_ADDR_MSK_LWR_0_, val32);
 8002050:	8a7b      	ldrh	r3, [r7, #18]
 8002052:	3371      	adds	r3, #113	; 0x71
 8002054:	b29b      	uxth	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4619      	mov	r1, r3
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fadc 	bl	8001618 <MAC_WriteRegister>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(result != ADI_ETH_SUCCESS)
 8002066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800206a:	2b00      	cmp	r3, #0
 800206c:	d113      	bne.n	8002096 <MAC_AddAddressFilter+0x1ba>
    {
        goto end;
    }

    /* Mark the address filter entry as used. */
    hDevice->addrFilterActive |= (1 << addrIndex);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002072:	b21a      	sxth	r2, r3
 8002074:	2101      	movs	r1, #1
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	b21b      	sxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b21b      	sxth	r3, r3
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	871a      	strh	r2, [r3, #56]	; 0x38
 8002088:	e006      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
        goto end;
 800208a:	bf00      	nop
 800208c:	e004      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
        goto end;
 800208e:	bf00      	nop
 8002090:	e002      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
        goto end;
 8002092:	bf00      	nop
 8002094:	e000      	b.n	8002098 <MAC_AddAddressFilter+0x1bc>
        goto end;
 8002096:	bf00      	nop

end:
    return result;
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800209c:	4618      	mov	r0, r3
 800209e:	3728      	adds	r7, #40	; 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <MAC_ClearAddressFilter>:

adi_eth_Result_e MAC_ClearAddressFilter(adi_mac_Device_t *hDevice, uint32_t addrIndex)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e        result = ADI_ETH_SUCCESS;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
    uint16_t                addrOffset;

    if (hDevice == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <MAC_ClearAddressFilter+0x1a>
    {
        result = ADI_ETH_INVALID_HANDLE;
 80020b8:	230a      	movs	r3, #10
 80020ba:	73fb      	strb	r3, [r7, #15]
        goto end;
 80020bc:	e02f      	b.n	800211e <MAC_ClearAddressFilter+0x7a>
    }

    if (hDevice->state == ADI_MAC_STATE_UNINITIALIZED)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <MAC_ClearAddressFilter+0x2a>
    {
        result = ADI_ETH_DEVICE_UNINITIALIZED;
 80020c8:	2306      	movs	r3, #6
 80020ca:	73fb      	strb	r3, [r7, #15]
        goto end;
 80020cc:	e027      	b.n	800211e <MAC_ClearAddressFilter+0x7a>
    }

    if (addrIndex >= ADI_MAC_ADDR_NUM_ENTRIES)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	d902      	bls.n	80020da <MAC_ClearAddressFilter+0x36>
    {
        result = ADI_ETH_PARAM_OUT_OF_RANGE;
 80020d4:	2309      	movs	r3, #9
 80020d6:	73fb      	strb	r3, [r7, #15]
        goto end;
 80020d8:	e021      	b.n	800211e <MAC_ClearAddressFilter+0x7a>
    }

    addrOffset = addrIndex * (ADDR_MAC_ADDR_FILT_UPR_1_ - ADDR_MAC_ADDR_FILT_UPR_0_);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	81bb      	strh	r3, [r7, #12]

    result = MAC_WriteRegister(hDevice, addrOffset + ADDR_MAC_ADDR_FILT_UPR_0_, 0);
 80020e2:	89bb      	ldrh	r3, [r7, #12]
 80020e4:	3350      	adds	r3, #80	; 0x50
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fa93 	bl	8001618 <MAC_WriteRegister>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73fb      	strb	r3, [r7, #15]
    if(result != ADI_ETH_SUCCESS)
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10f      	bne.n	800211c <MAC_ClearAddressFilter+0x78>
    {
        goto end;
    }

    hDevice->addrFilterActive &= ~(1 << addrIndex);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002100:	b21a      	sxth	r2, r3
 8002102:	2101      	movs	r1, #1
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	b21b      	sxth	r3, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	b21b      	sxth	r3, r3
 8002110:	4013      	ands	r3, r2
 8002112:	b21b      	sxth	r3, r3
 8002114:	b29a      	uxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	871a      	strh	r2, [r3, #56]	; 0x38
 800211a:	e000      	b.n	800211e <MAC_ClearAddressFilter+0x7a>
        goto end;
 800211c:	bf00      	nop

end:

    return result;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <MAC_GetLinkStatus>:

adi_eth_Result_e MAC_GetLinkStatus(adi_mac_Device_t *hDevice, uint32_t port, adi_eth_LinkStatus_e *linkStatus)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002134:	2300      	movs	r3, #0
 8002136:	75fb      	strb	r3, [r7, #23]
#else
    uint32_t            val32;

    (void)port;

    result = MAC_ReadRegister(hDevice, ADDR_MAC_STATUS1, &val32);
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	461a      	mov	r2, r3
 800213e:	2109      	movs	r1, #9
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7ff f9f3 	bl	800152c <MAC_ReadRegister>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]
    if(result != ADI_ETH_SUCCESS)
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <MAC_GetLinkStatus+0x38>
    {
        goto end;
    }

    *linkStatus = (adi_eth_LinkStatus_e)((val32 & BITM_MAC_STATUS1_P1_LINK_STATUS) >> BITP_MAC_STATUS1_P1_LINK_STATUS);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e000      	b.n	8002162 <MAC_GetLinkStatus+0x3a>
        goto end;
 8002160:	bf00      	nop

end:
#endif
    return result;
 8002162:	7dfb      	ldrb	r3, [r7, #23]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <MAC_SetChunkSize>:

#if defined(SPI_OA_EN)
adi_eth_Result_e MAC_SetChunkSize(adi_mac_Device_t *hDevice, adi_mac_OaCps_e cps)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002178:	2300      	movs	r3, #0
 800217a:	75fb      	strb	r3, [r7, #23]
    uint16_t            addr = ADDR_MAC_CONFIG0;
 800217c:	2304      	movs	r3, #4
 800217e:	82bb      	strh	r3, [r7, #20]
    uint32_t            mask = BITM_MAC_CONFIG0_CPS;
 8002180:	2307      	movs	r3, #7
 8002182:	613b      	str	r3, [r7, #16]
    uint32_t            val;

    if (hDevice->configSync)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <MAC_SetChunkSize+0x28>
    {
        result = ADI_ETH_CONFIG_SYNC_ERROR;
 800218e:	231b      	movs	r3, #27
 8002190:	75fb      	strb	r3, [r7, #23]
        goto end;
 8002192:	e030      	b.n	80021f6 <MAC_SetChunkSize+0x8a>
    }

    result = MAC_ReadRegister(hDevice, addr, &val);
 8002194:	f107 020c 	add.w	r2, r7, #12
 8002198:	8abb      	ldrh	r3, [r7, #20]
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff f9c5 	bl	800152c <MAC_ReadRegister>
 80021a2:	4603      	mov	r3, r0
 80021a4:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d121      	bne.n	80021f0 <MAC_SetChunkSize+0x84>
    {
        goto end;
    }

    val = (val & ~mask) | (cps & mask);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	401a      	ands	r2, r3
 80021b4:	78f9      	ldrb	r1, [r7, #3]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	400b      	ands	r3, r1
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

    result = MAC_WriteRegister(hDevice, addr, val);
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	8abb      	ldrh	r3, [r7, #20]
 80021c2:	4619      	mov	r1, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fa27 	bl	8001618 <MAC_WriteRegister>
 80021ca:	4603      	mov	r3, r0
 80021cc:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10f      	bne.n	80021f4 <MAC_SetChunkSize+0x88>
    {
        goto end;
    }

    hDevice->oaMaxChunkCount = (cps == ADI_MAC_OA_CPS_64BYTE) ? ADI_OA_MAX_CHUNK64_COUNT : ADI_OA_MAX_CHUNK_COUNT;
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d101      	bne.n	80021de <MAC_SetChunkSize+0x72>
 80021da:	2210      	movs	r2, #16
 80021dc:	e000      	b.n	80021e0 <MAC_SetChunkSize+0x74>
 80021de:	221f      	movs	r2, #31
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    hDevice->oaCps = (uint32_t)cps;
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80021ee:	e002      	b.n	80021f6 <MAC_SetChunkSize+0x8a>
        goto end;
 80021f0:	bf00      	nop
 80021f2:	e000      	b.n	80021f6 <MAC_SetChunkSize+0x8a>
        goto end;
 80021f4:	bf00      	nop
end:
    return result;
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <MAC_GetChunkSize>:

adi_eth_Result_e MAC_GetChunkSize(adi_mac_Device_t *hDevice, adi_mac_OaCps_e *pCps)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
    uint16_t            addr = ADDR_MAC_CONFIG0;
 800220e:	2304      	movs	r3, #4
 8002210:	82bb      	strh	r3, [r7, #20]
    uint32_t            mask = BITM_MAC_CONFIG0_CPS;
 8002212:	2307      	movs	r3, #7
 8002214:	613b      	str	r3, [r7, #16]
    uint32_t            val;

    result = MAC_ReadRegister(hDevice, addr, &val);
 8002216:	f107 020c 	add.w	r2, r7, #12
 800221a:	8abb      	ldrh	r3, [r7, #20]
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff f984 	bl	800152c <MAC_ReadRegister>
 8002224:	4603      	mov	r3, r0
 8002226:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d110      	bne.n	8002250 <MAC_GetChunkSize+0x50>
    {
        goto end;
    }

    val &= mask;
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
    *pCps = (adi_mac_OaCps_e)val;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	701a      	strb	r2, [r3, #0]

    if (val != hDevice->oaCps)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	429a      	cmp	r2, r3
 8002248:	d004      	beq.n	8002254 <MAC_GetChunkSize+0x54>
    {
        result = ADI_ETH_VALUE_MISMATCH_ERROR;
 800224a:	231c      	movs	r3, #28
 800224c:	75fb      	strb	r3, [r7, #23]
        goto end;
 800224e:	e002      	b.n	8002256 <MAC_GetChunkSize+0x56>
        goto end;
 8002250:	bf00      	nop
 8002252:	e000      	b.n	8002256 <MAC_GetChunkSize+0x56>
    }

end:
 8002254:	bf00      	nop
    return result;
 8002256:	7dfb      	ldrb	r3, [r7, #23]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <MAC_SetCutThroughMode>:
#endif

adi_eth_Result_e MAC_SetCutThroughMode(adi_mac_Device_t *hDevice, bool txcte, bool rxcte)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
 800226c:	4613      	mov	r3, r2
 800226e:	70bb      	strb	r3, [r7, #2]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002270:	2300      	movs	r3, #0
 8002272:	75fb      	strb	r3, [r7, #23]
    uint16_t            addr = ADDR_MAC_CONFIG0;
 8002274:	2304      	movs	r3, #4
 8002276:	82bb      	strh	r3, [r7, #20]
    uint32_t            setMask = (rxcte << BITP_MAC_CONFIG0_RXCTE) | (txcte << BITP_MAC_CONFIG0_TXCTE);
 8002278:	78bb      	ldrb	r3, [r7, #2]
 800227a:	021a      	lsls	r2, r3, #8
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	025b      	lsls	r3, r3, #9
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
    uint32_t            clearMask = (BITM_MAC_CONFIG0_RXCTE | BITM_MAC_CONFIG0_TXCTE);
 8002284:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002288:	60fb      	str	r3, [r7, #12]
    {
        return ADI_ETH_NOT_IMPLEMENTED;
    }
#endif

    if (hDevice->configSync)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <MAC_SetCutThroughMode+0x3a>
    {
        result = ADI_ETH_CONFIG_SYNC_ERROR;
 8002294:	231b      	movs	r3, #27
 8002296:	75fb      	strb	r3, [r7, #23]
        goto end;
 8002298:	e01c      	b.n	80022d4 <MAC_SetCutThroughMode+0x74>
    }

    result = MAC_ReadRegister(hDevice, addr, &val);
 800229a:	f107 0208 	add.w	r2, r7, #8
 800229e:	8abb      	ldrh	r3, [r7, #20]
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff f942 	bl	800152c <MAC_ReadRegister>
 80022a8:	4603      	mov	r3, r0
 80022aa:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <MAC_SetCutThroughMode+0x72>
    {
        goto end;
    }

    val = (val & ~clearMask) | setMask;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	43da      	mvns	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	401a      	ands	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]

    result = MAC_WriteRegister(hDevice, addr, val);
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	8abb      	ldrh	r3, [r7, #20]
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff f9a6 	bl	8001618 <MAC_WriteRegister>
 80022cc:	4603      	mov	r3, r0
 80022ce:	75fb      	strb	r3, [r7, #23]
 80022d0:	e000      	b.n	80022d4 <MAC_SetCutThroughMode+0x74>
        goto end;
 80022d2:	bf00      	nop

end:
    return result;
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <MAC_GetCutThroughMode>:

adi_eth_Result_e MAC_GetCutThroughMode(adi_mac_Device_t *hDevice, bool *pTxcte, bool *pRxcte)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b088      	sub	sp, #32
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80022ea:	2300      	movs	r3, #0
 80022ec:	77fb      	strb	r3, [r7, #31]
    uint16_t            addr    = ADDR_MAC_CONFIG0;
 80022ee:	2304      	movs	r3, #4
 80022f0:	83bb      	strh	r3, [r7, #28]
    uint32_t            rxMask  = BITM_MAC_CONFIG0_RXCTE;
 80022f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f6:	61bb      	str	r3, [r7, #24]
    uint32_t            txMask  = BITM_MAC_CONFIG0_TXCTE;
 80022f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fc:	617b      	str	r3, [r7, #20]
    uint32_t            val;

    result = MAC_ReadRegister(hDevice, addr, &val);
 80022fe:	f107 0210 	add.w	r2, r7, #16
 8002302:	8bbb      	ldrh	r3, [r7, #28]
 8002304:	4619      	mov	r1, r3
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff f910 	bl	800152c <MAC_ReadRegister>
 800230c:	4603      	mov	r3, r0
 800230e:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002310:	7ffb      	ldrb	r3, [r7, #31]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d114      	bne.n	8002340 <MAC_GetCutThroughMode+0x62>
    {
        goto end;
    }

    *pRxcte = (bool)(val & rxMask);
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf14      	ite	ne
 8002320:	2301      	movne	r3, #1
 8002322:	2300      	moveq	r3, #0
 8002324:	b2da      	uxtb	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	701a      	strb	r2, [r3, #0]
    *pTxcte = (bool)(val & txMask);
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e000      	b.n	8002342 <MAC_GetCutThroughMode+0x64>
        goto end;
 8002340:	bf00      	nop

end:
    return result;
 8002342:	7ffb      	ldrb	r3, [r7, #31]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <MAC_SetFifoSizes>:

adi_eth_Result_e MAC_SetFifoSizes(adi_mac_Device_t *hDevice, uint32_t writeVal)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result  = ADI_ETH_SUCCESS;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]

    if (hDevice->configSync)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <MAC_SetFifoSizes+0x1e>
    {
        result = ADI_ETH_CONFIG_SYNC_ERROR;
 8002364:	231b      	movs	r3, #27
 8002366:	73fb      	strb	r3, [r7, #15]
        goto end;
 8002368:	e006      	b.n	8002378 <MAC_SetFifoSizes+0x2c>
    }

    result = MAC_WriteRegister(hDevice, ADDR_MAC_FIFO_SIZE, writeVal);
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	213e      	movs	r1, #62	; 0x3e
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff f952 	bl	8001618 <MAC_WriteRegister>
 8002374:	4603      	mov	r3, r0
 8002376:	73fb      	strb	r3, [r7, #15]

end:
    return result;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <MAC_GetFifoSizes>:

adi_eth_Result_e MAC_GetFifoSizes(adi_mac_Device_t *hDevice, uint32_t *readVal)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
    return MAC_ReadRegister(hDevice, ADDR_MAC_FIFO_SIZE, readVal);
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	213e      	movs	r1, #62	; 0x3e
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff f8cb 	bl	800152c <MAC_ReadRegister>
 8002396:	4603      	mov	r3, r0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <MAC_ClearFifos>:

adi_eth_Result_e MAC_ClearFifos(adi_mac_Device_t *hDevice, adi_mac_FifoClrMode_e clearMode)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result  = ADI_ETH_SUCCESS;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]
    uint16_t            addr    = ADDR_MAC_FIFO_CLR;
 80023b0:	2336      	movs	r3, #54	; 0x36
 80023b2:	81bb      	strh	r3, [r7, #12]

    result = MAC_WriteRegister(hDevice, addr, (uint32_t)clearMode);
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	89bb      	ldrh	r3, [r7, #12]
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff f92c 	bl	8001618 <MAC_WriteRegister>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 80023c8:	bf00      	nop
    return result;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <MAC_SetPromiscuousMode>:

adi_eth_Result_e MAC_SetPromiscuousMode(adi_mac_Device_t *hDevice, bool bFlag)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80023e0:	2300      	movs	r3, #0
 80023e2:	75fb      	strb	r3, [r7, #23]
    uint16_t            addr = ADDR_MAC_CONFIG2;
 80023e4:	2306      	movs	r3, #6
 80023e6:	82bb      	strh	r3, [r7, #20]
    uint32_t            mask = BITM_MAC_CONFIG2_P1_FWD_UNK2HOST;;
 80023e8:	2304      	movs	r3, #4
 80023ea:	613b      	str	r3, [r7, #16]
    uint32_t            val;

    result = MAC_ReadRegister(hDevice, addr, &val);
 80023ec:	f107 020c 	add.w	r2, r7, #12
 80023f0:	8abb      	ldrh	r3, [r7, #20]
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff f899 	bl	800152c <MAC_ReadRegister>
 80023fa:	4603      	mov	r3, r0
 80023fc:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d117      	bne.n	8002434 <MAC_SetPromiscuousMode+0x60>
    {
        goto end;
    }

    if (bFlag)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <MAC_SetPromiscuousMode+0x40>
    {
        val |= mask;
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e004      	b.n	800241e <MAC_SetPromiscuousMode+0x4a>
    }
    else
    {
        val &= ~mask;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43da      	mvns	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4013      	ands	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
    }

    result = MAC_WriteRegister(hDevice, addr, val);
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	8abb      	ldrh	r3, [r7, #20]
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff f8f7 	bl	8001618 <MAC_WriteRegister>
 800242a:	4603      	mov	r3, r0
 800242c:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 8002432:	e000      	b.n	8002436 <MAC_SetPromiscuousMode+0x62>
        goto end;
 8002434:	bf00      	nop
    return result;
 8002436:	7dfb      	ldrb	r3, [r7, #23]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <MAC_GetPromiscuousMode>:

adi_eth_Result_e MAC_GetPromiscuousMode(adi_mac_Device_t *hDevice, bool *pFlag)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    uint16_t            addr = ADDR_MAC_CONFIG2;
 800244e:	2306      	movs	r3, #6
 8002450:	82bb      	strh	r3, [r7, #20]
    uint32_t            mask = BITM_MAC_CONFIG2_P1_FWD_UNK2HOST;;
 8002452:	2304      	movs	r3, #4
 8002454:	613b      	str	r3, [r7, #16]
    uint32_t            val;

    result = MAC_ReadRegister(hDevice, addr, &val);
 8002456:	f107 020c 	add.w	r2, r7, #12
 800245a:	8abb      	ldrh	r3, [r7, #20]
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff f864 	bl	800152c <MAC_ReadRegister>
 8002464:	4603      	mov	r3, r0
 8002466:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <MAC_GetPromiscuousMode+0x44>
    {
        goto end;
    }

    *pFlag = (val & mask) ? true: false;
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2da      	uxtb	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	e000      	b.n	8002486 <MAC_GetPromiscuousMode+0x46>
        goto end;
 8002484:	bf00      	nop

end:
    return result;
 8002486:	7dfb      	ldrb	r3, [r7, #23]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <MAC_TsEnable>:


adi_eth_Result_e MAC_TsEnable(adi_mac_Device_t *hDevice, adi_mac_TsFormat_e format)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e     result = ADI_ETH_SUCCESS;
 800249c:	2300      	movs	r3, #0
 800249e:	75fb      	strb	r3, [r7, #23]
    uint32_t             tsCfg;
    uint32_t             config0;

    if (hDevice->configSync)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <MAC_TsEnable+0x20>
    {
        result = ADI_ETH_CONFIG_SYNC_ERROR;
 80024aa:	231b      	movs	r3, #27
 80024ac:	75fb      	strb	r3, [r7, #23]
        goto end;
 80024ae:	e076      	b.n	800259e <MAC_TsEnable+0x10e>
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_CFG, &tsCfg);
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	461a      	mov	r2, r3
 80024b6:	2184      	movs	r1, #132	; 0x84
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff f837 	bl	800152c <MAC_ReadRegister>
 80024be:	4603      	mov	r3, r0
 80024c0:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d163      	bne.n	8002590 <MAC_TsEnable+0x100>
    {
        goto end;
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_CONFIG0, &config0);
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	461a      	mov	r2, r3
 80024ce:	2104      	movs	r1, #4
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff f82b 	bl	800152c <MAC_ReadRegister>
 80024d6:	4603      	mov	r3, r0
 80024d8:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d159      	bne.n	8002594 <MAC_TsEnable+0x104>
    {
        goto end;
    }

    config0 |= BITM_MAC_CONFIG0_FTSE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e6:	60fb      	str	r3, [r7, #12]
    switch(format)
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d82e      	bhi.n	800254c <MAC_TsEnable+0xbc>
 80024ee:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <MAC_TsEnable+0x64>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	08002505 	.word	0x08002505
 80024f8:	08002517 	.word	0x08002517
 80024fc:	08002529 	.word	0x08002529
 8002500:	0800253b 	.word	0x0800253b
    {
        case ADI_MAC_TS_FORMAT_NONE:
            tsCfg &= ~BITM_MAC_TS_CFG_TS_CAPT_FREE_CNT;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f023 0310 	bic.w	r3, r3, #16
 800250a:	613b      	str	r3, [r7, #16]
            config0 &= ~BITM_MAC_CONFIG0_FTSE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002512:	60fb      	str	r3, [r7, #12]
            break;
 8002514:	e01d      	b.n	8002552 <MAC_TsEnable+0xc2>
        case ADI_MAC_TS_FORMAT_32B_FREE:
            tsCfg |= BITM_MAC_TS_CFG_TS_CAPT_FREE_CNT;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	613b      	str	r3, [r7, #16]
            config0 &= ~BITM_MAC_CONFIG0_FTSS;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002524:	60fb      	str	r3, [r7, #12]
            break;
 8002526:	e014      	b.n	8002552 <MAC_TsEnable+0xc2>
        case ADI_MAC_TS_FORMAT_32B_1588:
            tsCfg &= ~BITM_MAC_TS_CFG_TS_CAPT_FREE_CNT;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f023 0310 	bic.w	r3, r3, #16
 800252e:	613b      	str	r3, [r7, #16]
            config0 &= ~BITM_MAC_CONFIG0_FTSS;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002536:	60fb      	str	r3, [r7, #12]
            break;
 8002538:	e00b      	b.n	8002552 <MAC_TsEnable+0xc2>
        case ADI_MAC_TS_FORMAT_64B_1588:
            tsCfg &= ~BITM_MAC_TS_CFG_TS_CAPT_FREE_CNT;
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f023 0310 	bic.w	r3, r3, #16
 8002540:	613b      	str	r3, [r7, #16]
            config0 |= BITM_MAC_CONFIG0_FTSS;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002548:	60fb      	str	r3, [r7, #12]
            break;
 800254a:	e002      	b.n	8002552 <MAC_TsEnable+0xc2>
        default:
            result = ADI_ETH_INVALID_PARAM;
 800254c:	2308      	movs	r3, #8
 800254e:	75fb      	strb	r3, [r7, #23]
            goto end;
 8002550:	e025      	b.n	800259e <MAC_TsEnable+0x10e>
    }

    result = MAC_WriteRegister(hDevice, ADDR_MAC_CONFIG0, config0);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	461a      	mov	r2, r3
 8002556:	2104      	movs	r1, #4
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff f85d 	bl	8001618 <MAC_WriteRegister>
 800255e:	4603      	mov	r3, r0
 8002560:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d117      	bne.n	8002598 <MAC_TsEnable+0x108>
    {
        goto end;
    }

    tsCfg |= BITM_MAC_TS_CFG_TS_EN;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	613b      	str	r3, [r7, #16]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_CFG, tsCfg);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	461a      	mov	r2, r3
 8002574:	2184      	movs	r1, #132	; 0x84
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff f84e 	bl	8001618 <MAC_WriteRegister>
 800257c:	4603      	mov	r3, r0
 800257e:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <MAC_TsEnable+0x10c>
    {
        goto end;
    }

    hDevice->timestampFormat = format;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 800258e:	e006      	b.n	800259e <MAC_TsEnable+0x10e>
        goto end;
 8002590:	bf00      	nop
 8002592:	e004      	b.n	800259e <MAC_TsEnable+0x10e>
        goto end;
 8002594:	bf00      	nop
 8002596:	e002      	b.n	800259e <MAC_TsEnable+0x10e>
        goto end;
 8002598:	bf00      	nop
 800259a:	e000      	b.n	800259e <MAC_TsEnable+0x10e>
        goto end;
 800259c:	bf00      	nop

end:
    return result;
 800259e:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <MAC_TsClear>:

adi_eth_Result_e MAC_TsClear(adi_mac_Device_t *hDevice)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e     result = ADI_ETH_SUCCESS;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
    uint32_t             tsCfg;

    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_CFG, &tsCfg);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	461a      	mov	r2, r3
 80025ba:	2184      	movs	r1, #132	; 0x84
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe ffb5 	bl	800152c <MAC_ReadRegister>
 80025c2:	4603      	mov	r3, r0
 80025c4:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10c      	bne.n	80025e6 <MAC_TsClear+0x3e>
    {
        goto end;
    }

    tsCfg |= BITM_MAC_TS_CFG_TS_CLR;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	60bb      	str	r3, [r7, #8]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_CFG, tsCfg);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	461a      	mov	r2, r3
 80025d8:	2184      	movs	r1, #132	; 0x84
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff f81c 	bl	8001618 <MAC_WriteRegister>
 80025e0:	4603      	mov	r3, r0
 80025e2:	73fb      	strb	r3, [r7, #15]
 80025e4:	e000      	b.n	80025e8 <MAC_TsClear+0x40>
        goto end;
 80025e6:	bf00      	nop

end:
    return result;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <MAC_TsTimerStart>:

adi_eth_Result_e MAC_TsTimerStart(adi_mac_Device_t *hDevice, adi_mac_TsTimerConfig_t *pTimerConfig)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b088      	sub	sp, #32
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e     result = ADI_ETH_SUCCESS;
 80025fc:	2300      	movs	r3, #0
 80025fe:	77fb      	strb	r3, [r7, #31]
    uint32_t             timeHi;
    uint32_t             timeLo;
    uint32_t             tsCfg;

    /* TS_TIMER register values must be greater than or equal to ADI_MAC_TS_MIN_NS */
    if (pTimerConfig->startTimeNs < ADI_MAC_TS_MIN_NS)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b0f      	cmp	r3, #15
 8002606:	d802      	bhi.n	800260e <MAC_TsTimerStart+0x1c>
    {
        pTimerConfig->startTimeNs = ADDR_MAC_TS_NS_CNT;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2283      	movs	r2, #131	; 0x83
 800260c:	60da      	str	r2, [r3, #12]
    }
    if (pTimerConfig->periodNs < (2 * ADI_MAC_TS_MIN_NS))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b1f      	cmp	r3, #31
 8002614:	d802      	bhi.n	800261c <MAC_TsTimerStart+0x2a>
    {
        pTimerConfig->periodNs = 2 * ADI_MAC_TS_MIN_NS;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2220      	movs	r2, #32
 800261a:	601a      	str	r2, [r3, #0]
    }

    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_CFG, &tsCfg);
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	461a      	mov	r2, r3
 8002622:	2184      	movs	r1, #132	; 0x84
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7fe ff81 	bl	800152c <MAC_ReadRegister>
 800262a:	4603      	mov	r3, r0
 800262c:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d169      	bne.n	8002708 <MAC_TsTimerStart+0x116>
    {
        goto end;
    }

    if (!(tsCfg & BITM_MAC_TS_CFG_TS_EN))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <MAC_TsTimerStart+0x52>
    {
        result = ADI_ETH_TS_COUNTERS_DISABLED;
 800263e:	231e      	movs	r3, #30
 8002640:	77fb      	strb	r3, [r7, #31]
        goto end;
 8002642:	e06a      	b.n	800271a <MAC_TsTimerStart+0x128>
    }

    tsCfg = (tsCfg & ~BITM_MAC_TS_CFG_TS_TIMER_DEF) | ((uint32_t)pTimerConfig->idleState << BITP_MAC_TS_CFG_TS_TIMER_DEF);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0204 	bic.w	r2, r3, #4
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	7a1b      	ldrb	r3, [r3, #8]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_CFG, tsCfg);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	2184      	movs	r1, #132	; 0x84
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe ffdc 	bl	8001618 <MAC_WriteRegister>
 8002660:	4603      	mov	r3, r0
 8002662:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002664:	7ffb      	ldrb	r3, [r7, #31]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d150      	bne.n	800270c <MAC_TsTimerStart+0x11a>
    {
        goto end;
    }

    /* Need to use quantization error correction if the period is not a multiple of ADI_MAC_TS_MIN_NS */
    remainder16 = pTimerConfig->periodNs & ADI_MAC_TS_QE_MASK;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	61bb      	str	r3, [r7, #24]
    if (remainder16)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <MAC_TsTimerStart+0x9c>
    {
        result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_TIMER_QE_CORR, remainder16);
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	2187      	movs	r1, #135	; 0x87
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe ffca 	bl	8001618 <MAC_WriteRegister>
 8002684:	4603      	mov	r3, r0
 8002686:	77fb      	strb	r3, [r7, #31]
        if (result != ADI_ETH_SUCCESS)
 8002688:	7ffb      	ldrb	r3, [r7, #31]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d140      	bne.n	8002710 <MAC_TsTimerStart+0x11e>
        {
            goto end;
        }
    }

    timeHi = (uint32_t)((pTimerConfig->periodNs & ~ADI_MAC_TS_QE_MASK) * pTimerConfig->dutyCycle);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 030f 	bic.w	r3, r3, #15
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ac:	ee17 3a90 	vmov	r3, s15
 80026b0:	617b      	str	r3, [r7, #20]
    timeLo = (pTimerConfig->periodNs & ~ADI_MAC_TS_QE_MASK) - timeHi;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 020f 	bic.w	r2, r3, #15
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	613b      	str	r3, [r7, #16]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_TIMER_HI, timeHi & ~ADI_MAC_TS_QE_MASK);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f023 030f 	bic.w	r3, r3, #15
 80026c6:	461a      	mov	r2, r3
 80026c8:	2185      	movs	r1, #133	; 0x85
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe ffa4 	bl	8001618 <MAC_WriteRegister>
 80026d0:	4603      	mov	r3, r0
 80026d2:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 80026d4:	7ffb      	ldrb	r3, [r7, #31]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d11c      	bne.n	8002714 <MAC_TsTimerStart+0x122>
    {
        goto end;
    }
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_TIMER_LO, timeLo & ~ADI_MAC_TS_QE_MASK);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f023 030f 	bic.w	r3, r3, #15
 80026e0:	461a      	mov	r2, r3
 80026e2:	2186      	movs	r1, #134	; 0x86
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7fe ff97 	bl	8001618 <MAC_WriteRegister>
 80026ea:	4603      	mov	r3, r0
 80026ec:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 80026ee:	7ffb      	ldrb	r3, [r7, #31]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <MAC_TsTimerStart+0x126>
    {
        goto end;
    }

    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_TIMER_START, pTimerConfig->startTimeNs);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	461a      	mov	r2, r3
 80026fa:	2188      	movs	r1, #136	; 0x88
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7fe ff8b 	bl	8001618 <MAC_WriteRegister>
 8002702:	4603      	mov	r3, r0
 8002704:	77fb      	strb	r3, [r7, #31]
 8002706:	e008      	b.n	800271a <MAC_TsTimerStart+0x128>
        goto end;
 8002708:	bf00      	nop
 800270a:	e006      	b.n	800271a <MAC_TsTimerStart+0x128>
        goto end;
 800270c:	bf00      	nop
 800270e:	e004      	b.n	800271a <MAC_TsTimerStart+0x128>
            goto end;
 8002710:	bf00      	nop
 8002712:	e002      	b.n	800271a <MAC_TsTimerStart+0x128>
        goto end;
 8002714:	bf00      	nop
 8002716:	e000      	b.n	800271a <MAC_TsTimerStart+0x128>
        goto end;
 8002718:	bf00      	nop

end:
    return result;
 800271a:	7ffb      	ldrb	r3, [r7, #31]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <MAC_TsTimerStop>:

adi_eth_Result_e MAC_TsTimerStop(adi_mac_Device_t *hDevice)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
    uint32_t            val32;

    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_CFG, &val32);
 8002730:	f107 0308 	add.w	r3, r7, #8
 8002734:	461a      	mov	r2, r3
 8002736:	2184      	movs	r1, #132	; 0x84
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7fe fef7 	bl	800152c <MAC_ReadRegister>
 800273e:	4603      	mov	r3, r0
 8002740:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10c      	bne.n	8002762 <MAC_TsTimerStop+0x3e>
    {
        goto end;
    }

    val32 |= BITM_MAC_TS_CFG_TS_TIMER_STOP;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	60bb      	str	r3, [r7, #8]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_CFG, val32);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	461a      	mov	r2, r3
 8002754:	2184      	movs	r1, #132	; 0x84
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe ff5e 	bl	8001618 <MAC_WriteRegister>
 800275c:	4603      	mov	r3, r0
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e000      	b.n	8002764 <MAC_TsTimerStop+0x40>
        goto end;
 8002762:	bf00      	nop

end:
    return result;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <MAC_TsConvert>:

adi_eth_Result_e MAC_TsConvert(uint32_t timestampLowWord, uint32_t timestampHighWord, adi_mac_TsFormat_e format, adi_mac_TsTimespec_t *pTimespec)
{
 8002770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002774:	b088      	sub	sp, #32
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	71fb      	strb	r3, [r7, #7]
    adi_eth_Result_e result = ADI_ETH_SUCCESS;
 8002782:	2300      	movs	r3, #0
 8002784:	77fb      	strb	r3, [r7, #31]
    /* Floating point nanoseconds value for free-running counter conversion. Double to reduce rounding errors.  */
    double nsecF;

    switch(format)
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d053      	beq.n	8002834 <MAC_TsConvert+0xc4>
 800278c:	2b03      	cmp	r3, #3
 800278e:	dc5a      	bgt.n	8002846 <MAC_TsConvert+0xd6>
 8002790:	2b01      	cmp	r3, #1
 8002792:	d002      	beq.n	800279a <MAC_TsConvert+0x2a>
 8002794:	2b02      	cmp	r3, #2
 8002796:	d041      	beq.n	800281c <MAC_TsConvert+0xac>
 8002798:	e055      	b.n	8002846 <MAC_TsConvert+0xd6>
    {
        case ADI_MAC_TS_FORMAT_32B_FREE:
            /* Convert LSB to nanoseconds. */
            nsecF = timestampLowWord * ADI_MAC_TS_FREE_CNT_LSB_IN_NS;
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7fd feda 	bl	8000554 <__aeabi_ui2d>
 80027a0:	a32e      	add	r3, pc, #184	; (adr r3, 800285c <MAC_TsConvert+0xec>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff4f 	bl	8000648 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
            /* Extract number of whole seconds. */
            pTimespec->sec = (uint32_t)(nsecF / ADI_MAC_TS_ONE_SECOND_IN_NS);
 80027b2:	a32c      	add	r3, pc, #176	; (adr r3, 8002864 <MAC_TsConvert+0xf4>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027bc:	f7fe f86e 	bl	800089c <__aeabi_ddiv>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe f950 	bl	8000a6c <__aeabi_d2uiz>
 80027cc:	4602      	mov	r2, r0
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	601a      	str	r2, [r3, #0]
            /* Subtract off number of whole seconds to get number of whole nanoseconds. Fractional value is lost. */
            pTimespec->nsec = (uint32_t)(nsecF - (pTimespec->sec * ADI_MAC_TS_ONE_SECOND_IN_NS));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	4698      	mov	r8, r3
 80027da:	4691      	mov	r9, r2
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <MAC_TsConvert+0xe8>)
 80027de:	fb03 f209 	mul.w	r2, r3, r9
 80027e2:	2300      	movs	r3, #0
 80027e4:	fb03 f308 	mul.w	r3, r3, r8
 80027e8:	4413      	add	r3, r2
 80027ea:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <MAC_TsConvert+0xe8>)
 80027ec:	fba8 4502 	umull	r4, r5, r8, r2
 80027f0:	442b      	add	r3, r5
 80027f2:	461d      	mov	r5, r3
 80027f4:	4620      	mov	r0, r4
 80027f6:	4629      	mov	r1, r5
 80027f8:	f7fd fef0 	bl	80005dc <__aeabi_ul2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002804:	f7fd fd68 	bl	80002d8 <__aeabi_dsub>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f7fe f92c 	bl	8000a6c <__aeabi_d2uiz>
 8002814:	4602      	mov	r2, r0
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	605a      	str	r2, [r3, #4]
            break;
 800281a:	e017      	b.n	800284c <MAC_TsConvert+0xdc>
        case ADI_MAC_TS_FORMAT_32B_1588:
            /* Mask and shift to get number of seconds (2 bits). */
            pTimespec->sec = (timestampLowWord & ADI_MAC_TS_1588_SEC_MASK) >> ADI_MAC_TS_1588_SEC_POS;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	0f1b      	lsrs	r3, r3, #28
 8002820:	f003 020c 	and.w	r2, r3, #12
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	601a      	str	r2, [r3, #0]
            /* Mask to get number of nanoseconds (30 bits). */
            pTimespec->nsec = timestampLowWord & ADI_MAC_TS_1588_NS_MASK;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	605a      	str	r2, [r3, #4]
            break;
 8002832:	e00b      	b.n	800284c <MAC_TsConvert+0xdc>
        case ADI_MAC_TS_FORMAT_64B_1588:
            /* All 32b of upper words are whole seconds. */
            pTimespec->sec = timestampHighWord;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	601a      	str	r2, [r3, #0]
            /* Mask to get number of nanoseconds (30 bits). */
            pTimespec->nsec = timestampLowWord & ADI_MAC_TS_1588_NS_MASK;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	605a      	str	r2, [r3, #4]
            break;
 8002844:	e002      	b.n	800284c <MAC_TsConvert+0xdc>
        default:
            result = ADI_ETH_NO_TS_FORMAT;
 8002846:	231f      	movs	r3, #31
 8002848:	77fb      	strb	r3, [r7, #31]
            break;
 800284a:	bf00      	nop
    }

    return result;
 800284c:	7ffb      	ldrb	r3, [r7, #31]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002858:	3b9aca00 	.word	0x3b9aca00
 800285c:	aaaaaaab 	.word	0xaaaaaaab
 8002860:	4020aaaa 	.word	0x4020aaaa
 8002864:	00000000 	.word	0x00000000
 8002868:	41cdcd65 	.word	0x41cdcd65

0800286c <MAC_TsGetExtCaptTimestamp>:

adi_eth_Result_e MAC_TsGetExtCaptTimestamp(adi_mac_Device_t *hDevice, adi_mac_TsTimespec_t *pCapturedTimespec)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e result = ADI_ETH_SUCCESS;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]
    uint32_t timestampLowWord;
    uint32_t timestampHighWord;

    /* 64b timestamp and free-running counter are both always captured. Return only one depending on the configured format. */
    if ((hDevice->timestampFormat == ADI_MAC_TS_FORMAT_32B_1588) || (hDevice->timestampFormat == ADI_MAC_TS_FORMAT_64B_1588))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d004      	beq.n	800288e <MAC_TsGetExtCaptTimestamp+0x22>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 800288a:	2b03      	cmp	r3, #3
 800288c:	d120      	bne.n	80028d0 <MAC_TsGetExtCaptTimestamp+0x64>
    {
        result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_EXT_CAPT0, &timestampLowWord);
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	461a      	mov	r2, r3
 8002894:	2189      	movs	r1, #137	; 0x89
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fe48 	bl	800152c <MAC_ReadRegister>
 800289c:	4603      	mov	r3, r0
 800289e:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d135      	bne.n	8002912 <MAC_TsGetExtCaptTimestamp+0xa6>
        {
            goto end;
        }
        result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_EXT_CAPT1, &timestampHighWord);
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	461a      	mov	r2, r3
 80028ac:	218a      	movs	r1, #138	; 0x8a
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fe3c 	bl	800152c <MAC_ReadRegister>
 80028b4:	4603      	mov	r3, r0
 80028b6:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d12b      	bne.n	8002916 <MAC_TsGetExtCaptTimestamp+0xaa>
        {
            goto end;
        }
        result = MAC_TsConvert(timestampLowWord, timestampHighWord, ADI_MAC_TS_FORMAT_64B_1588, pCapturedTimespec);
 80028be:	6938      	ldr	r0, [r7, #16]
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2203      	movs	r2, #3
 80028c6:	f7ff ff53 	bl	8002770 <MAC_TsConvert>
 80028ca:	4603      	mov	r3, r0
 80028cc:	75fb      	strb	r3, [r7, #23]
 80028ce:	e025      	b.n	800291c <MAC_TsGetExtCaptTimestamp+0xb0>
    }
    else if (hDevice->timestampFormat == ADI_MAC_TS_FORMAT_32B_FREE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d118      	bne.n	800290c <MAC_TsGetExtCaptTimestamp+0xa0>
    {
        timestampHighWord = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
        result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_FREECNT_CAPT, &timestampLowWord);
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	461a      	mov	r2, r3
 80028e4:	218b      	movs	r1, #139	; 0x8b
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fe20 	bl	800152c <MAC_ReadRegister>
 80028ec:	4603      	mov	r3, r0
 80028ee:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d111      	bne.n	800291a <MAC_TsGetExtCaptTimestamp+0xae>
        {
            goto end;
        }
        result = MAC_TsConvert(timestampLowWord, timestampHighWord, hDevice->timestampFormat, pCapturedTimespec);
 80028f6:	6938      	ldr	r0, [r7, #16]
 80028f8:	68f9      	ldr	r1, [r7, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f7ff ff35 	bl	8002770 <MAC_TsConvert>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]
 800290a:	e007      	b.n	800291c <MAC_TsGetExtCaptTimestamp+0xb0>
    }
    else
    {
        result = ADI_ETH_NO_TS_FORMAT;
 800290c:	231f      	movs	r3, #31
 800290e:	75fb      	strb	r3, [r7, #23]
 8002910:	e004      	b.n	800291c <MAC_TsGetExtCaptTimestamp+0xb0>
            goto end;
 8002912:	bf00      	nop
 8002914:	e002      	b.n	800291c <MAC_TsGetExtCaptTimestamp+0xb0>
            goto end;
 8002916:	bf00      	nop
 8002918:	e000      	b.n	800291c <MAC_TsGetExtCaptTimestamp+0xb0>
            goto end;
 800291a:	bf00      	nop
    }

end:
    return result;
 800291c:	7dfb      	ldrb	r3, [r7, #23]

}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <MAC_TsGetEgressTimestamp>:

adi_eth_Result_e MAC_TsGetEgressTimestamp(adi_mac_Device_t *hDevice, adi_mac_EgressCapture_e egressReg, adi_mac_TsTimespec_t *pCapturedTimespec)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b08a      	sub	sp, #40	; 0x28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	460b      	mov	r3, r1
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	72fb      	strb	r3, [r7, #11]
    adi_eth_Result_e result = ADI_ETH_SUCCESS;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t timestampLowWord;
    uint32_t timestampHighWord;
    uint32_t regAddrL;
    uint32_t regAddrH;

    switch(egressReg)
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d010      	beq.n	8002962 <MAC_TsGetEgressTimestamp+0x3c>
 8002940:	2b03      	cmp	r3, #3
 8002942:	dc13      	bgt.n	800296c <MAC_TsGetEgressTimestamp+0x46>
 8002944:	2b01      	cmp	r3, #1
 8002946:	d002      	beq.n	800294e <MAC_TsGetEgressTimestamp+0x28>
 8002948:	2b02      	cmp	r3, #2
 800294a:	d005      	beq.n	8002958 <MAC_TsGetEgressTimestamp+0x32>
 800294c:	e00e      	b.n	800296c <MAC_TsGetEgressTimestamp+0x46>
    {
        case ADI_MAC_EGRESS_CAPTURE_A:
            regAddrL = ADDR_MAC_TTSCAL;
 800294e:	2311      	movs	r3, #17
 8002950:	623b      	str	r3, [r7, #32]
            regAddrH = ADDR_MAC_TTSCAH;
 8002952:	2310      	movs	r3, #16
 8002954:	61fb      	str	r3, [r7, #28]
            break;
 8002956:	e00d      	b.n	8002974 <MAC_TsGetEgressTimestamp+0x4e>
        case ADI_MAC_EGRESS_CAPTURE_B:
            regAddrL = ADDR_MAC_TTSCBL;
 8002958:	2313      	movs	r3, #19
 800295a:	623b      	str	r3, [r7, #32]
            regAddrH = ADDR_MAC_TTSCBH;
 800295c:	2312      	movs	r3, #18
 800295e:	61fb      	str	r3, [r7, #28]
            break;
 8002960:	e008      	b.n	8002974 <MAC_TsGetEgressTimestamp+0x4e>
        case ADI_MAC_EGRESS_CAPTURE_C:
            regAddrL = ADDR_MAC_TTSCCL;
 8002962:	2315      	movs	r3, #21
 8002964:	623b      	str	r3, [r7, #32]
            regAddrH = ADDR_MAC_TTSCCH;
 8002966:	2314      	movs	r3, #20
 8002968:	61fb      	str	r3, [r7, #28]
            break;
 800296a:	e003      	b.n	8002974 <MAC_TsGetEgressTimestamp+0x4e>
        default:
            result = ADI_ETH_NO_TS_FORMAT;
 800296c:	231f      	movs	r3, #31
 800296e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002972:	bf00      	nop
    }

    if (result == ADI_ETH_SUCCESS)
 8002974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002978:	2b00      	cmp	r3, #0
 800297a:	d129      	bne.n	80029d0 <MAC_TsGetEgressTimestamp+0xaa>
    {
        result = MAC_ReadRegister(hDevice, regAddrL, &timestampLowWord);
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	b29b      	uxth	r3, r3
 8002980:	f107 0218 	add.w	r2, r7, #24
 8002984:	4619      	mov	r1, r3
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7fe fdd0 	bl	800152c <MAC_ReadRegister>
 800298c:	4603      	mov	r3, r0
 800298e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (result != ADI_ETH_SUCCESS)
 8002992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11c      	bne.n	80029d4 <MAC_TsGetEgressTimestamp+0xae>
        {
            goto end;
        }
        result = MAC_ReadRegister(hDevice, regAddrH, &timestampHighWord);
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	b29b      	uxth	r3, r3
 800299e:	f107 0214 	add.w	r2, r7, #20
 80029a2:	4619      	mov	r1, r3
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7fe fdc1 	bl	800152c <MAC_ReadRegister>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (result != ADI_ETH_SUCCESS)
 80029b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10f      	bne.n	80029d8 <MAC_TsGetEgressTimestamp+0xb2>
        {
            goto end;
        }
        result = MAC_TsConvert(timestampLowWord, timestampHighWord, hDevice->timestampFormat, pCapturedTimespec);
 80029b8:	69b8      	ldr	r0, [r7, #24]
 80029ba:	6979      	ldr	r1, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 20f3 	ldrb.w	r2, [r3, #243]	; 0xf3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f7ff fed4 	bl	8002770 <MAC_TsConvert>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029ce:	e004      	b.n	80029da <MAC_TsGetEgressTimestamp+0xb4>
    }
end:
 80029d0:	bf00      	nop
 80029d2:	e002      	b.n	80029da <MAC_TsGetEgressTimestamp+0xb4>
            goto end;
 80029d4:	bf00      	nop
 80029d6:	e000      	b.n	80029da <MAC_TsGetEgressTimestamp+0xb4>
            goto end;
 80029d8:	bf00      	nop
    return result;
 80029da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3728      	adds	r7, #40	; 0x28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <MAC_TsSetTimerAbsolute>:

adi_eth_Result_e MAC_TsSetTimerAbsolute(adi_mac_Device_t *hDevice, uint32_t seconds, uint32_t nanoseconds)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e result = ADI_ETH_SUCCESS;
 80029f4:	2300      	movs	r3, #0
 80029f6:	75fb      	strb	r3, [r7, #23]
    uint32_t addend;

    /* Stop clock while updating. */
    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_ADDEND, &addend);
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	461a      	mov	r2, r3
 80029fe:	2180      	movs	r1, #128	; 0x80
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7fe fd93 	bl	800152c <MAC_ReadRegister>
 8002a06:	4603      	mov	r3, r0
 8002a08:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d134      	bne.n	8002a7a <MAC_TsSetTimerAbsolute+0x92>
    {
        goto end;
    }
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_ADDEND, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7fe fdff 	bl	8001618 <MAC_WriteRegister>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d12c      	bne.n	8002a7e <MAC_TsSetTimerAbsolute+0x96>
    {
        goto end;
    }

    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_SEC_CNT, seconds);
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	2182      	movs	r1, #130	; 0x82
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7fe fdf5 	bl	8001618 <MAC_WriteRegister>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d124      	bne.n	8002a82 <MAC_TsSetTimerAbsolute+0x9a>
    {
        goto end;
    }

    /* Nanoseconds value must be greater than ADI_MAC_TS_MIN_NS and divisible by ADI_MAC_TS_MIN_NS. */
    if (nanoseconds < ADI_MAC_TS_MIN_NS)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	d801      	bhi.n	8002a42 <MAC_TsSetTimerAbsolute+0x5a>
    {
        nanoseconds = ADI_MAC_TS_MIN_NS;
 8002a3e:	2310      	movs	r3, #16
 8002a40:	607b      	str	r3, [r7, #4]
    }
    /* Nanoseconds value must be less than the number of nanoseconds in a second. */
    if (nanoseconds >= ADI_MAC_TS_ONE_SECOND_IN_NS)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <MAC_TsSetTimerAbsolute+0xac>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <MAC_TsSetTimerAbsolute+0x66>
    {
        nanoseconds = ADI_MAC_TS_ONE_SECOND_IN_NS - 1;
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <MAC_TsSetTimerAbsolute+0xac>)
 8002a4c:	607b      	str	r3, [r7, #4]
    }
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_NS_CNT, nanoseconds & ~ADI_MAC_TS_QE_MASK);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f023 030f 	bic.w	r3, r3, #15
 8002a54:	461a      	mov	r2, r3
 8002a56:	2183      	movs	r1, #131	; 0x83
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7fe fddd 	bl	8001618 <MAC_WriteRegister>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10e      	bne.n	8002a86 <MAC_TsSetTimerAbsolute+0x9e>
    {
        goto end;
    }

    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_ADDEND, addend);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7fe fdd2 	bl	8001618 <MAC_WriteRegister>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
 8002a78:	e006      	b.n	8002a88 <MAC_TsSetTimerAbsolute+0xa0>
        goto end;
 8002a7a:	bf00      	nop
 8002a7c:	e004      	b.n	8002a88 <MAC_TsSetTimerAbsolute+0xa0>
        goto end;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <MAC_TsSetTimerAbsolute+0xa0>
        goto end;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <MAC_TsSetTimerAbsolute+0xa0>
        goto end;
 8002a86:	bf00      	nop

end:
    return result;
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	3b9ac9ff 	.word	0x3b9ac9ff

08002a98 <MAC_TsSyncClock>:

adi_eth_Result_e MAC_TsSyncClock(adi_mac_Device_t *hDevice, int64_t tError, uint64_t referenceTimeNsDiff, uint64_t localTimeNsDiff)
{
 8002a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a9c:	b08e      	sub	sp, #56	; 0x38
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	e9c7 2300 	strd	r2, r3, [r7]
    adi_eth_Result_e result = ADI_ETH_SUCCESS;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int64_t localNsDiff;
    int64_t val64;
    uint32_t addend;

    /* Adjust to prevent overflow in computation */
    referenceNsDiff = referenceTimeNsDiff;
 8002aac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ab0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    localNsDiff = localTimeNsDiff;
 8002ab4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ab8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    while (referenceNsDiff > 0x7FFFFFFF)
 8002abc:	e017      	b.n	8002aee <MAC_TsSyncClock+0x56>
    {
        referenceNsDiff >>= 1;
 8002abe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	0842      	lsrs	r2, r0, #1
 8002acc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002ad0:	104b      	asrs	r3, r1, #1
 8002ad2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        localNsDiff >>= 1;
 8002ad6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	0842      	lsrs	r2, r0, #1
 8002ae4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002ae8:	104b      	asrs	r3, r1, #1
 8002aea:	e9c7 2308 	strd	r2, r3, [r7, #32]
    while (referenceNsDiff > 0x7FFFFFFF)
 8002aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002af2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002af6:	f173 0300 	sbcs.w	r3, r3, #0
 8002afa:	dae0      	bge.n	8002abe <MAC_TsSyncClock+0x26>
    }

    /* Compute syntonization factor. */
    result = MAC_ReadRegister(hDevice, ADDR_MAC_TS_ADDEND, &addend);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	461a      	mov	r2, r3
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7fe fd11 	bl	800152c <MAC_ReadRegister>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (result != ADI_ETH_SUCCESS)
 8002b10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d13c      	bne.n	8002b92 <MAC_TsSyncClock+0xfa>
    {
        goto end;
    }
    val64 = (int64_t) addend;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	469a      	mov	sl, r3
 8002b1e:	4693      	mov	fp, r2
 8002b20:	e9c7 ab06 	strd	sl, fp, [r7, #24]
    if ((referenceNsDiff != 0) && (localNsDiff != 0)) {
 8002b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	d01c      	beq.n	8002b66 <MAC_TsSyncClock+0xce>
 8002b2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	d018      	beq.n	8002b66 <MAC_TsSyncClock+0xce>
        val64 = ((referenceNsDiff * val64) / localNsDiff);
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	fb03 f202 	mul.w	r2, r3, r2
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	fba1 4502 	umull	r4, r5, r1, r2
 8002b4e:	442b      	add	r3, r5
 8002b50:	461d      	mov	r5, r3
 8002b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b56:	4620      	mov	r0, r4
 8002b58:	4629      	mov	r1, r5
 8002b5a:	f7fd ffa7 	bl	8000aac <__aeabi_ldivmod>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	e9c7 2306 	strd	r2, r3, [r7, #24]
    }

    /* Apply correction. */
    val64 += tError;
 8002b66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b6e:	eb10 0802 	adds.w	r8, r0, r2
 8002b72:	eb41 0903 	adc.w	r9, r1, r3
 8002b76:	e9c7 8906 	strd	r8, r9, [r7, #24]

    /* Coerce to register limits and write. */
    addend = (uint32_t)val64;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	617b      	str	r3, [r7, #20]
    result = MAC_WriteRegister(hDevice, ADDR_MAC_TS_ADDEND, addend);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	461a      	mov	r2, r3
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7fe fd47 	bl	8001618 <MAC_WriteRegister>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002b90:	e000      	b.n	8002b94 <MAC_TsSyncClock+0xfc>
        goto end;
 8002b92:	bf00      	nop

end:
    return result;
 8002b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3738      	adds	r7, #56	; 0x38
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002ba4 <MAC_TsSubtract>:

int64_t MAC_TsSubtract(adi_mac_TsTimespec_t *pTsA, adi_mac_TsTimespec_t *pTsB)
{
 8002ba4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ba8:	b093      	sub	sp, #76	; 0x4c
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6378      	str	r0, [r7, #52]	; 0x34
 8002bae:	6339      	str	r1, [r7, #48]	; 0x30
    int64_t tsAns;
    int64_t tsBns;

    /* Convert s to ns and add in ns */
    tsAns = pTsA->sec;
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	469a      	mov	sl, r3
 8002bb8:	4693      	mov	fp, r2
 8002bba:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
    tsAns *= ADI_MAC_TS_ONE_SECOND_IN_NS;
 8002bbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bc2:	4931      	ldr	r1, [pc, #196]	; (8002c88 <MAC_TsSubtract+0xe4>)
 8002bc4:	fb01 f003 	mul.w	r0, r1, r3
 8002bc8:	2100      	movs	r1, #0
 8002bca:	fb02 f101 	mul.w	r1, r2, r1
 8002bce:	4408      	add	r0, r1
 8002bd0:	492d      	ldr	r1, [pc, #180]	; (8002c88 <MAC_TsSubtract+0xe4>)
 8002bd2:	fba2 4501 	umull	r4, r5, r2, r1
 8002bd6:	1943      	adds	r3, r0, r5
 8002bd8:	461d      	mov	r5, r3
 8002bda:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
    tsAns += pTsA->nsec;
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bec:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	1851      	adds	r1, r2, r1
 8002bf4:	6139      	str	r1, [r7, #16]
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	eb43 0101 	adc.w	r1, r3, r1
 8002bfc:	6179      	str	r1, [r7, #20]
 8002bfe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002c02:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

    /* Convert s to ns and add in ns */
    tsBns = pTsB->sec;
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	60fa      	str	r2, [r7, #12]
 8002c10:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c14:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    tsBns *= ADI_MAC_TS_ONE_SECOND_IN_NS;
 8002c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c1c:	491a      	ldr	r1, [pc, #104]	; (8002c88 <MAC_TsSubtract+0xe4>)
 8002c1e:	fb01 f003 	mul.w	r0, r1, r3
 8002c22:	2100      	movs	r1, #0
 8002c24:	fb02 f101 	mul.w	r1, r2, r1
 8002c28:	4401      	add	r1, r0
 8002c2a:	4817      	ldr	r0, [pc, #92]	; (8002c88 <MAC_TsSubtract+0xe4>)
 8002c2c:	fba2 8900 	umull	r8, r9, r2, r0
 8002c30:	eb01 0309 	add.w	r3, r1, r9
 8002c34:	4699      	mov	r9, r3
 8002c36:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
    tsBns += pTsB->nsec;
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	623b      	str	r3, [r7, #32]
 8002c42:	627a      	str	r2, [r7, #36]	; 0x24
 8002c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c48:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	1851      	adds	r1, r2, r1
 8002c50:	6039      	str	r1, [r7, #0]
 8002c52:	4629      	mov	r1, r5
 8002c54:	eb43 0101 	adc.w	r1, r3, r1
 8002c58:	6079      	str	r1, [r7, #4]
 8002c5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c5e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

    /* Return the difference in ns */
    return tsAns - tsBns;
 8002c62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c66:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c6a:	1a84      	subs	r4, r0, r2
 8002c6c:	61bc      	str	r4, [r7, #24]
 8002c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	374c      	adds	r7, #76	; 0x4c
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	3b9aca00 	.word	0x3b9aca00

08002c8c <MAC_SyncConfig>:


adi_eth_Result_e MAC_SyncConfig(adi_mac_Device_t *hDevice)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
    uint32_t            val32;

    result = MAC_ReadRegister(hDevice, ADDR_MAC_CONFIG0, &val32);
 8002c98:	f107 0308 	add.w	r3, r7, #8
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7fe fc43 	bl	800152c <MAC_ReadRegister>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d115      	bne.n	8002cdc <MAC_SyncConfig+0x50>
    {
        goto end;
    }

    val32 |= BITM_MAC_CONFIG0_SYNC;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb6:	60bb      	str	r3, [r7, #8]

    result = MAC_WriteRegister(hDevice, ADDR_MAC_CONFIG0, val32);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe fcaa 	bl	8001618 <MAC_WriteRegister>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d108      	bne.n	8002ce0 <MAC_SyncConfig+0x54>
    {
        goto end;
    }

    /* CONFIG0.SYNC is set, we can now enable the IRQ. */
    ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8002cce:	f003 fca8 	bl	8006622 <HAL_EnableIrq>
    hDevice->configSync = true;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8002cda:	e002      	b.n	8002ce2 <MAC_SyncConfig+0x56>
        goto end;
 8002cdc:	bf00      	nop
 8002cde:	e000      	b.n	8002ce2 <MAC_SyncConfig+0x56>
        goto end;
 8002ce0:	bf00      	nop

end:
    return result;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <MAC_CalculateParity>:
 *                  header/footer parity fields defined by the OPEN Alliance specification
 *                  and for timestamp parity checking in both SPI protocols.
 *
 */
uint8_t MAC_CalculateParity(uint8_t *p, uint32_t nBytes)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
    uint32_t i;

    uint8_t parity = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	74fb      	strb	r3, [r7, #19]
    for (i = 0; i < nBytes; i++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e009      	b.n	8002d14 <MAC_CalculateParity+0x28>
    {
        parity ^= p[i];
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	4413      	add	r3, r2
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	7cfb      	ldrb	r3, [r7, #19]
 8002d0a:	4053      	eors	r3, r2
 8002d0c:	74fb      	strb	r3, [r7, #19]
    for (i = 0; i < nBytes; i++)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d3f1      	bcc.n	8002d00 <MAC_CalculateParity+0x14>
    }

    uint8_t prt = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	74bb      	strb	r3, [r7, #18]
    for (uint32_t i = 0; i < 8; i++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e00f      	b.n	8002d46 <MAC_CalculateParity+0x5a>
    {
        prt = prt ^ (parity & 0x1);
 8002d26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	b25a      	sxtb	r2, r3
 8002d30:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002d34:	4053      	eors	r3, r2
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	74bb      	strb	r3, [r7, #18]
        parity >>= 1;
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	74fb      	strb	r3, [r7, #19]
    for (uint32_t i = 0; i < 8; i++)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3301      	adds	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b07      	cmp	r3, #7
 8002d4a:	d9ec      	bls.n	8002d26 <MAC_CalculateParity+0x3a>
    }

    return prt & 0x1;
 8002d4c:	7cbb      	ldrb	r3, [r7, #18]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <PHY_Init>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_Init(adi_phy_Device_t **phDevice, adi_phy_DriverConfig_t *cfg, void *adinDevice, HAL_ReadFn_t readFn, HAL_WriteFn_t writeFn)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	75fb      	strb	r3, [r7, #23]
    adi_phy_Device_t    *hDevice;

    if (cfg->devMemSize < sizeof(adi_phy_Device_t))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b2f      	cmp	r3, #47	; 0x2f
 8002d78:	d801      	bhi.n	8002d7e <PHY_Init+0x1e>
    {
        return ADI_ETH_INVALID_PARAM;
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	e048      	b.n	8002e10 <PHY_Init+0xb0>
    }

    /* Implies state is uninitialized */
    memset(cfg->pDevMem, 0, cfg->devMemSize);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6858      	ldr	r0, [r3, #4]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	461a      	mov	r2, r3
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f016 fc5f 	bl	801964c <memset>

    *phDevice = (adi_phy_Device_t *)cfg->pDevMem;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	601a      	str	r2, [r3, #0]
    hDevice = *phDevice;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	613b      	str	r3, [r7, #16]
    hDevice->phyAddr = cfg->addr;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	601a      	str	r2, [r3, #0]
    hDevice->irqPending = false;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    hDevice->readFn = readFn;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	609a      	str	r2, [r3, #8]
    hDevice->writeFn = writeFn;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	60da      	str	r2, [r3, #12]

    /* Reset callback settings */
    hDevice->cbFunc = NULL;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	615a      	str	r2, [r3, #20]
    hDevice->cbEvents = 0;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]

    hDevice->adinDevice = adinDevice;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	621a      	str	r2, [r3, #32]

    /* Disable IRQ whether the interrupt is enabled or not */
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8002dca:	f003 fc23 	bl	8006614 <HAL_DisableIrq>

    /* Only required if the driver is configured to use the PHY interrupt */
    if (cfg->enableIrq)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	7b1b      	ldrb	r3, [r3, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <PHY_Init+0x7e>
    {
        ADI_HAL_REGISTER_CALLBACK(hDevice->adinDevice, (HAL_Callback_t const *)(irqCb), hDevice );
 8002dd6:	6939      	ldr	r1, [r7, #16]
 8002dd8:	480f      	ldr	r0, [pc, #60]	; (8002e18 <PHY_Init+0xb8>)
 8002dda:	f003 fc31 	bl	8006640 <HAL_RegisterCallback>
    }

    result = phyInit(hDevice);
 8002dde:	6938      	ldr	r0, [r7, #16]
 8002de0:	f000 f83e 	bl	8002e60 <phyInit>
 8002de4:	4603      	mov	r3, r0
 8002de6:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <PHY_Init+0x96>
    {
        hDevice->state = ADI_PHY_STATE_ERROR;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2205      	movs	r2, #5
 8002df2:	711a      	strb	r2, [r3, #4]
        goto end;
 8002df4:	e00b      	b.n	8002e0e <PHY_Init+0xae>
    }

    if (cfg->enableIrq)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	7b1b      	ldrb	r3, [r3, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <PHY_Init+0xac>
    {
        /* Enable IRQ */
        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8002dfe:	f003 fc10 	bl	8006622 <HAL_EnableIrq>

        /* We may have a pending IRQ that will be services as soon as the IRQ is enabled, */
        /* set pending IRQ to false and if needed, service it here. */
        hDevice->irqPending = false;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002e0a:	e000      	b.n	8002e0e <PHY_Init+0xae>
    }

end:
 8002e0c:	bf00      	nop
    return result;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	08003055 	.word	0x08003055

08002e1c <PHY_UnInit>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_UnInit(adi_phy_Device_t *hDevice)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]

    if (hDevice == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <PHY_UnInit+0x18>
    {
        result = ADI_ETH_INVALID_HANDLE;
 8002e2e:	230a      	movs	r3, #10
 8002e30:	73fb      	strb	r3, [r7, #15]
        goto end;
 8002e32:	e004      	b.n	8002e3e <PHY_UnInit+0x22>
    }

    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8002e34:	f003 fbee 	bl	8006614 <HAL_DisableIrq>

    hDevice->state = ADI_PHY_STATE_UNINITIALIZED;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	711a      	strb	r2, [r3, #4]

end:
    return result;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <PHY_ReInitPhy>:


adi_eth_Result_e PHY_ReInitPhy(adi_phy_Device_t *hDevice)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    return phyInit(hDevice);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f805 	bl	8002e60 <phyInit>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <phyInit>:
 * @details
 *
 * @sa
 */
static adi_eth_Result_e phyInit(adi_phy_Device_t *hDevice)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	77fb      	strb	r3, [r7, #31]
    bool                flag;
    int32_t             iter;
    uint32_t            modelNum;
    uint32_t            revNum;

    hDevice->state = ADI_PHY_STATE_UNINITIALIZED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	711a      	strb	r2, [r3, #4]
    }
#endif

    /* Checks the identity of the device based on reading of hardware ID registers */
    /* Ensures the device is supported by the driver, otherwise an error is reported. */
    result = checkIdentity(hDevice, &modelNum, &revNum);
 8002e72:	f107 0208 	add.w	r2, r7, #8
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f001 fac9 	bl	8004414 <checkIdentity>
 8002e82:	4603      	mov	r3, r0
 8002e84:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <phyInit+0x34>
    {
        hDevice->state = ADI_PHY_STATE_ERROR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2205      	movs	r2, #5
 8002e90:	711a      	strb	r2, [r3, #4]
        goto end;
 8002e92:	e094      	b.n	8002fbe <phyInit+0x15e>
    }

    /* Go to software powerdown, this may already be achieved through pin strap options. */
    /* Note this is not using the driver function because we use a different timeout     */
    /* scheme to account for the powerup sequence of the system included in this step.   */
    val16 = 1 << BITP_CRSM_SFT_PD_CNTRL_CRSM_SFT_PD;
 8002e94:	2301      	movs	r3, #1
 8002e96:	827b      	strh	r3, [r7, #18]
    result = PHY_Write(hDevice, ADDR_CRSM_SFT_PD_CNTRL, val16);
 8002e98:	8a7b      	ldrh	r3, [r7, #18]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	494a      	ldr	r1, [pc, #296]	; (8002fc8 <phyInit+0x168>)
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 ffc6 	bl	8003e30 <PHY_Write>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002ea8:	7ffb      	ldrb	r3, [r7, #31]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d17a      	bne.n	8002fa4 <phyInit+0x144>
    {
        goto end;
    }

    iter = ADI_PHY_SYS_RDY_ITER;
 8002eae:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002eb2:	61bb      	str	r3, [r7, #24]
    do
    {
        result = PHY_GetSoftwarePowerdown(hDevice, &flag);
 8002eb4:	f107 0311 	add.w	r3, r7, #17
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fb50 	bl	8003560 <PHY_GetSoftwarePowerdown>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	77fb      	strb	r3, [r7, #31]
        if (result != ADI_ETH_SUCCESS)
 8002ec4:	7ffb      	ldrb	r3, [r7, #31]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d16e      	bne.n	8002fa8 <phyInit+0x148>
        {
            goto end;
        }
    } while (!flag && (--iter));
 8002eca:	7c7b      	ldrb	r3, [r7, #17]
 8002ecc:	f083 0301 	eor.w	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d005      	beq.n	8002ee2 <phyInit+0x82>
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	61bb      	str	r3, [r7, #24]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e8      	bne.n	8002eb4 <phyInit+0x54>

    /* Values of event enums are identical to respective interrupt masks */
    /* Hardware reset and hardware error interrupts are always enabled   */
    irqMask = ADI_PHY_CRSM_HW_ERROR | BITM_CRSM_IRQ_MASK_CRSM_HRD_RST_IRQ_EN | hDevice->cbEvents;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f443 536f 	orr.w	r3, r3, #15296	; 0x3bc0
 8002eea:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8002eee:	617b      	str	r3, [r7, #20]
    result = PHY_Write(hDevice, ADDR_CRSM_IRQ_MASK, (irqMask & 0xFFFF));
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4935      	ldr	r1, [pc, #212]	; (8002fcc <phyInit+0x16c>)
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 ff99 	bl	8003e30 <PHY_Write>
 8002efe:	4603      	mov	r3, r0
 8002f00:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f02:	7ffb      	ldrb	r3, [r7, #31]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d151      	bne.n	8002fac <phyInit+0x14c>
    {
        goto end;
    }
    result = PHY_Write(hDevice, ADDR_PHY_SUBSYS_IRQ_MASK, ((irqMask >> 16) & 0xFFFF));
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	492f      	ldr	r1, [pc, #188]	; (8002fd0 <phyInit+0x170>)
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 ff8c 	bl	8003e30 <PHY_Write>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f1c:	7ffb      	ldrb	r3, [r7, #31]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d146      	bne.n	8002fb0 <phyInit+0x150>
    }

    /* Read IRQ status bits to clear them before enabling IRQ. */
    /* Hardware errors could be asserted if for, we don't care about the contents */
    /* so we just discard the read values. */
    result = PHY_Read(hDevice, ADDR_CRSM_IRQ_STATUS, &val16);
 8002f22:	f107 0312 	add.w	r3, r7, #18
 8002f26:	461a      	mov	r2, r3
 8002f28:	492a      	ldr	r1, [pc, #168]	; (8002fd4 <phyInit+0x174>)
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 ffa5 	bl	8003e7a <PHY_Read>
 8002f30:	4603      	mov	r3, r0
 8002f32:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f34:	7ffb      	ldrb	r3, [r7, #31]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d13c      	bne.n	8002fb4 <phyInit+0x154>
    {
        goto end;
    }
    if (val16 & ADI_PHY_CRSM_HW_ERROR)
 8002f3a:	8a7b      	ldrh	r3, [r7, #18]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f642 33ff 	movw	r3, #11263	; 0x2bff
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <phyInit+0xee>
    {
        result = ADI_ETH_HW_ERROR;
 8002f48:	2307      	movs	r3, #7
 8002f4a:	77fb      	strb	r3, [r7, #31]
        goto end;
 8002f4c:	e037      	b.n	8002fbe <phyInit+0x15e>
    }

    result = PHY_Read(hDevice, ADDR_PHY_SUBSYS_IRQ_STATUS, &val16);
 8002f4e:	f107 0312 	add.w	r3, r7, #18
 8002f52:	461a      	mov	r2, r3
 8002f54:	4920      	ldr	r1, [pc, #128]	; (8002fd8 <phyInit+0x178>)
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 ff8f 	bl	8003e7a <PHY_Read>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d128      	bne.n	8002fb8 <phyInit+0x158>
    {
        goto end;
    }

    hDevice->irqPending = false;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    /* Static configuration: default settings that are different from hardware reset values */
    result = phyStaticConfig(hDevice, modelNum, revNum);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	4619      	mov	r1, r3
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fb6d 	bl	8003654 <phyStaticConfig>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f7e:	7ffb      	ldrb	r3, [r7, #31]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <phyInit+0x12a>
    {
        result = ADI_ETH_PLACEHOLDER_ERROR;
 8002f84:	2323      	movs	r3, #35	; 0x23
 8002f86:	77fb      	strb	r3, [r7, #31]
        goto end;
 8002f88:	e019      	b.n	8002fbe <phyInit+0x15e>
    }

    /* Make sure auto-negotiation is enabled. */
    result = PHY_AnEnable(hDevice, true);
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f96d 	bl	800326c <PHY_AnEnable>
 8002f92:	4603      	mov	r3, r0
 8002f94:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8002f96:	7ffb      	ldrb	r3, [r7, #31]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10f      	bne.n	8002fbc <phyInit+0x15c>
    {
        goto end;
    }

    /* At then end of successful initialization, the PHY is in software powerdown. */
    hDevice->state = ADI_PHY_STATE_SOFTWARE_POWERDOWN;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	711a      	strb	r2, [r3, #4]
 8002fa2:	e00c      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fa4:	bf00      	nop
 8002fa6:	e00a      	b.n	8002fbe <phyInit+0x15e>
            goto end;
 8002fa8:	bf00      	nop
 8002faa:	e008      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fac:	bf00      	nop
 8002fae:	e006      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fb0:	bf00      	nop
 8002fb2:	e004      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fb4:	bf00      	nop
 8002fb6:	e002      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fb8:	bf00      	nop
 8002fba:	e000      	b.n	8002fbe <phyInit+0x15e>
        goto end;
 8002fbc:	bf00      	nop

end:
    return result;
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	001e8812 	.word	0x001e8812
 8002fcc:	001e0020 	.word	0x001e0020
 8002fd0:	001f0021 	.word	0x001f0021
 8002fd4:	001e0010 	.word	0x001e0010
 8002fd8:	001f0011 	.word	0x001f0011

08002fdc <PHY_RegisterCallback>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_RegisterCallback(adi_phy_Device_t *hDevice, adi_eth_Callback_t cbFunc, uint32_t cbEvents, void *cbParam)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]

    hDevice->cbFunc = cbFunc;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	615a      	str	r2, [r3, #20]
    hDevice->cbEvents = cbEvents;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
    hDevice->cbParam = cbParam;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	61da      	str	r2, [r3, #28]

    /* Values of event enums are identical to respective interrupt masks */
    /* Hardware reset and hardware error interrupts are always enabled   */
    uint32_t irqMask = ADI_PHY_CRSM_HW_ERROR | BITM_CRSM_IRQ_MASK_CRSM_HRD_RST_IRQ_EN | hDevice->cbEvents;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f443 536f 	orr.w	r3, r3, #15296	; 0x3bc0
 8003008:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800300c:	613b      	str	r3, [r7, #16]

    result = PHY_Write(hDevice, ADDR_CRSM_IRQ_MASK, (irqMask & 0xFFFF));
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	b29b      	uxth	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	490d      	ldr	r1, [pc, #52]	; (800304c <PHY_RegisterCallback+0x70>)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 ff0a 	bl	8003e30 <PHY_Write>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10c      	bne.n	8003040 <PHY_RegisterCallback+0x64>
    {
        goto end;
    }
    result = PHY_Write(hDevice, ADDR_PHY_SUBSYS_IRQ_MASK, ((irqMask >> 16) & 0xFFFF));
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	4908      	ldr	r1, [pc, #32]	; (8003050 <PHY_RegisterCallback+0x74>)
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fefd 	bl	8003e30 <PHY_Write>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 800303e:	e000      	b.n	8003042 <PHY_RegisterCallback+0x66>
        goto end;
 8003040:	bf00      	nop
    return result;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	001e0020 	.word	0x001e0020
 8003050:	001f0021 	.word	0x001f0021

08003054 <irqCb>:
 * @details
 *
 * @sa
 */
static void irqCb(void *pCBParam, uint32_t Event, void *pArg)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
    adi_phy_Device_t    *hDevice = (adi_phy_Device_t *)pCBParam;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	617b      	str	r3, [r7, #20]
    /* Set this flag to ensure the IRQ is handled before other actions are taken */
    /* The interrupt may be triggered by a hardware reset, in which case the PHY */
    /* will likely need to be reconfigured.                                      */
    /* The flag is cleared when interrupt status registers are read. Taking      */
    /* appropriate action is the responsibility of the caller.                   */
    hDevice->irqPending = true;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hDevice->cbFunc != NULL)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d006      	beq.n	8003082 <irqCb+0x2e>
    {
        hDevice->cbFunc(hDevice->cbParam, 0, NULL);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	69d0      	ldr	r0, [r2, #28]
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	4798      	blx	r3
    }
}
 8003082:	bf00      	nop
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <PHY_ReadIrqStatus>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_ReadIrqStatus(adi_phy_Device_t *hDevice, uint32_t *status)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    *status = 0;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

    result = PHY_Read(hDevice, ADDR_CRSM_IRQ_STATUS, &val16);
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	461a      	mov	r2, r3
 80030a6:	4916      	ldr	r1, [pc, #88]	; (8003100 <PHY_ReadIrqStatus+0x74>)
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fee6 	bl	8003e7a <PHY_Read>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11d      	bne.n	80030f4 <PHY_ReadIrqStatus+0x68>
    {
        goto end;
    }
    else
    {
        *status = val16;
 80030b8:	89bb      	ldrh	r3, [r7, #12]
 80030ba:	461a      	mov	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	601a      	str	r2, [r3, #0]

        result = PHY_Read(hDevice, ADDR_PHY_SUBSYS_IRQ_STATUS, &val16);
 80030c0:	f107 030c 	add.w	r3, r7, #12
 80030c4:	461a      	mov	r2, r3
 80030c6:	490f      	ldr	r1, [pc, #60]	; (8003104 <PHY_ReadIrqStatus+0x78>)
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fed6 	bl	8003e7a <PHY_Read>
 80030ce:	4603      	mov	r3, r0
 80030d0:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <PHY_ReadIrqStatus+0x50>
        {
            /* Only CRSM_IRQ_STATUS values returned are valid */
            result = ADI_ETH_COMM_ERROR_SECOND;
 80030d8:	2303      	movs	r3, #3
 80030da:	73fb      	strb	r3, [r7, #15]
        }
        *status |= (val16 << 16);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	89ba      	ldrh	r2, [r7, #12]
 80030e2:	0412      	lsls	r2, r2, #16
 80030e4:	431a      	orrs	r2, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	601a      	str	r2, [r3, #0]

        hDevice->irqPending = false;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80030f2:	e000      	b.n	80030f6 <PHY_ReadIrqStatus+0x6a>
        goto end;
 80030f4:	bf00      	nop
    }

end:
    return result;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	001e0010 	.word	0x001e0010
 8003104:	001f0011 	.word	0x001f0011

08003108 <PHY_AnAdvTxMode>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_AnAdvTxMode(adi_phy_Device_t *hDevice, adi_phy_AnAdvTxMode_e txMode)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <PHY_AnAdvTxMode+0x20>
    {
        result = ADI_ETH_IRQ_PENDING;
 8003122:	230b      	movs	r3, #11
 8003124:	73fb      	strb	r3, [r7, #15]
        goto end;
 8003126:	e02f      	b.n	8003188 <PHY_AnAdvTxMode+0x80>
    }

    result = PHY_Read(hDevice, ADDR_AN_ADV_ABILITY_H, &val16);
 8003128:	f107 030c 	add.w	r3, r7, #12
 800312c:	461a      	mov	r2, r3
 800312e:	4919      	ldr	r1, [pc, #100]	; (8003194 <PHY_AnAdvTxMode+0x8c>)
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fea2 	bl	8003e7a <PHY_Read>
 8003136:	4603      	mov	r3, r0
 8003138:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d122      	bne.n	8003186 <PHY_AnAdvTxMode+0x7e>
    {
        goto end;
    }
    val16 &= ~(BITM_AN_ADV_ABILITY_H_AN_ADV_B10L_TX_LVL_HI_REQ | BITM_AN_ADV_ABILITY_H_AN_ADV_B10L_TX_LVL_HI_ABL);
 8003140:	89bb      	ldrh	r3, [r7, #12]
 8003142:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003146:	b29b      	uxth	r3, r3
 8003148:	81bb      	strh	r3, [r7, #12]
    if ((txMode == ADI_PHY_AN_ADV_TX_REQ_2P4V) || (txMode == ADI_PHY_AN_ADV_TX_REQ_1P0V_ABLE_2P4V))
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d002      	beq.n	8003156 <PHY_AnAdvTxMode+0x4e>
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d104      	bne.n	8003160 <PHY_AnAdvTxMode+0x58>
    {
      val16 |= (1 << BITP_AN_ADV_ABILITY_H_AN_ADV_B10L_TX_LVL_HI_ABL);
 8003156:	89bb      	ldrh	r3, [r7, #12]
 8003158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800315c:	b29b      	uxth	r3, r3
 800315e:	81bb      	strh	r3, [r7, #12]
    }
    if (txMode == ADI_PHY_AN_ADV_TX_REQ_2P4V)
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d104      	bne.n	8003170 <PHY_AnAdvTxMode+0x68>
    {
      val16 |= (1 << BITP_AN_ADV_ABILITY_H_AN_ADV_B10L_TX_LVL_HI_REQ);
 8003166:	89bb      	ldrh	r3, [r7, #12]
 8003168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800316c:	b29b      	uxth	r3, r3
 800316e:	81bb      	strh	r3, [r7, #12]
    }
    result = PHY_Write(hDevice, ADDR_AN_ADV_ABILITY_H, val16);
 8003170:	89bb      	ldrh	r3, [r7, #12]
 8003172:	461a      	mov	r2, r3
 8003174:	4907      	ldr	r1, [pc, #28]	; (8003194 <PHY_AnAdvTxMode+0x8c>)
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fe5a 	bl	8003e30 <PHY_Write>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
    {
        goto end;
    }
end:
 8003184:	e000      	b.n	8003188 <PHY_AnAdvTxMode+0x80>
        goto end;
 8003186:	bf00      	nop
    return result;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	00070204 	.word	0x00070204

08003198 <PHY_AnAdvMstSlvCfg>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_AnAdvMstSlvCfg(adi_phy_Device_t *hDevice, adi_phy_AnAdvMasterSlaveCfg_e msCfg)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <PHY_AnAdvMstSlvCfg+0x20>
    {
        result = ADI_ETH_IRQ_PENDING;
 80031b2:	230b      	movs	r3, #11
 80031b4:	73fb      	strb	r3, [r7, #15]
        goto end;
 80031b6:	e050      	b.n	800325a <PHY_AnAdvMstSlvCfg+0xc2>
    }

    /* Forced/Preferred */
    result = PHY_Read(hDevice, ADDR_AN_ADV_ABILITY_L, &val16);
 80031b8:	f107 030c 	add.w	r3, r7, #12
 80031bc:	461a      	mov	r2, r3
 80031be:	4929      	ldr	r1, [pc, #164]	; (8003264 <PHY_AnAdvMstSlvCfg+0xcc>)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fe5a 	bl	8003e7a <PHY_Read>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d13f      	bne.n	8003250 <PHY_AnAdvMstSlvCfg+0xb8>
    {
        goto end;
    }
    val16 &= ~BITM_AN_ADV_ABILITY_L_AN_ADV_FORCE_MS;
 80031d0:	89bb      	ldrh	r3, [r7, #12]
 80031d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	81bb      	strh	r3, [r7, #12]
    if ((msCfg == ADI_PHY_AN_ADV_FORCED_MASTER) || (msCfg == ADI_PHY_AN_ADV_FORCED_SLAVE))
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <PHY_AnAdvMstSlvCfg+0x4e>
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d104      	bne.n	80031f0 <PHY_AnAdvMstSlvCfg+0x58>
    {
        val16 |= (1 << BITP_AN_ADV_ABILITY_L_AN_ADV_FORCE_MS);
 80031e6:	89bb      	ldrh	r3, [r7, #12]
 80031e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	81bb      	strh	r3, [r7, #12]
    }
    result = PHY_Write(hDevice, ADDR_AN_ADV_ABILITY_L, val16);
 80031f0:	89bb      	ldrh	r3, [r7, #12]
 80031f2:	461a      	mov	r2, r3
 80031f4:	491b      	ldr	r1, [pc, #108]	; (8003264 <PHY_AnAdvMstSlvCfg+0xcc>)
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fe1a 	bl	8003e30 <PHY_Write>
 80031fc:	4603      	mov	r3, r0
 80031fe:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d126      	bne.n	8003254 <PHY_AnAdvMstSlvCfg+0xbc>
    {
        goto end;
    }

    /* Master/Slave */
    result = PHY_Read(hDevice, ADDR_AN_ADV_ABILITY_M, &val16);
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	461a      	mov	r2, r3
 800320c:	4916      	ldr	r1, [pc, #88]	; (8003268 <PHY_AnAdvMstSlvCfg+0xd0>)
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fe33 	bl	8003e7a <PHY_Read>
 8003214:	4603      	mov	r3, r0
 8003216:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d11c      	bne.n	8003258 <PHY_AnAdvMstSlvCfg+0xc0>
    {
        goto end;
    }
    val16 &= ~BITM_AN_ADV_ABILITY_M_AN_ADV_MST;
 800321e:	89bb      	ldrh	r3, [r7, #12]
 8003220:	f023 0310 	bic.w	r3, r3, #16
 8003224:	b29b      	uxth	r3, r3
 8003226:	81bb      	strh	r3, [r7, #12]
    if ((msCfg == ADI_PHY_AN_ADV_FORCED_MASTER) || (msCfg == ADI_PHY_AN_ADV_PREFFERED_MASTER))
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <PHY_AnAdvMstSlvCfg+0x9c>
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d104      	bne.n	800323e <PHY_AnAdvMstSlvCfg+0xa6>
    {
        val16 |= (1 << BITP_AN_ADV_ABILITY_M_AN_ADV_MST);
 8003234:	89bb      	ldrh	r3, [r7, #12]
 8003236:	f043 0310 	orr.w	r3, r3, #16
 800323a:	b29b      	uxth	r3, r3
 800323c:	81bb      	strh	r3, [r7, #12]
    }
    result = PHY_Write(hDevice, ADDR_AN_ADV_ABILITY_M, val16);
 800323e:	89bb      	ldrh	r3, [r7, #12]
 8003240:	461a      	mov	r2, r3
 8003242:	4909      	ldr	r1, [pc, #36]	; (8003268 <PHY_AnAdvMstSlvCfg+0xd0>)
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fdf3 	bl	8003e30 <PHY_Write>
 800324a:	4603      	mov	r3, r0
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	e004      	b.n	800325a <PHY_AnAdvMstSlvCfg+0xc2>
        goto end;
 8003250:	bf00      	nop
 8003252:	e002      	b.n	800325a <PHY_AnAdvMstSlvCfg+0xc2>
        goto end;
 8003254:	bf00      	nop
 8003256:	e000      	b.n	800325a <PHY_AnAdvMstSlvCfg+0xc2>
        goto end;
 8003258:	bf00      	nop

end:
    return result;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	00070202 	.word	0x00070202
 8003268:	00070203 	.word	0x00070203

0800326c <PHY_AnEnable>:
 * @details         It is STRONGLY recommended to never disable auto-negotiation!
 *
 * @sa
 */
adi_eth_Result_e PHY_AnEnable(adi_phy_Device_t *hDevice, bool enable)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <PHY_AnEnable+0x20>
    {
        result = ADI_ETH_IRQ_PENDING;
 8003286:	230b      	movs	r3, #11
 8003288:	73fb      	strb	r3, [r7, #15]
        goto end;
 800328a:	e00f      	b.n	80032ac <PHY_AnEnable+0x40>
    }

    /* The only other bit in this register is AN_RESTART, need to write 0 to it */
    val16 = (enable? 1: 0) << BITP_AN_CONTROL_AN_EN;
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <PHY_AnEnable+0x2c>
 8003292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003296:	e000      	b.n	800329a <PHY_AnEnable+0x2e>
 8003298:	2300      	movs	r3, #0
 800329a:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_AN_CONTROL, val16);
 800329c:	89bb      	ldrh	r3, [r7, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	4905      	ldr	r1, [pc, #20]	; (80032b8 <PHY_AnEnable+0x4c>)
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fdc4 	bl	8003e30 <PHY_Write>
 80032a8:	4603      	mov	r3, r0
 80032aa:	73fb      	strb	r3, [r7, #15]

end:
    return result;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	00070200 	.word	0x00070200

080032bc <PHY_Renegotiate>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_Renegotiate(adi_phy_Device_t *hDevice)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <PHY_Renegotiate+0x1c>
    {
        result = ADI_ETH_IRQ_PENDING;
 80032d2:	230b      	movs	r3, #11
 80032d4:	73fb      	strb	r3, [r7, #15]
        goto end;
 80032d6:	e00a      	b.n	80032ee <PHY_Renegotiate+0x32>
    }

    /* AN_EN should be 1 or AN_RESTART is ignored. Instead of read-modify-write */
    /* and/or reporting an error, we force AN_EN=1.                             */
    val16 = (1 << BITP_AN_CONTROL_AN_EN) |
 80032d8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80032dc:	81bb      	strh	r3, [r7, #12]
            (1 << BITP_AN_CONTROL_AN_RESTART);
    result = PHY_Write(hDevice, ADDR_AN_CONTROL, val16);
 80032de:	89bb      	ldrh	r3, [r7, #12]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4905      	ldr	r1, [pc, #20]	; (80032f8 <PHY_Renegotiate+0x3c>)
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fda3 	bl	8003e30 <PHY_Write>
 80032ea:	4603      	mov	r3, r0
 80032ec:	73fb      	strb	r3, [r7, #15]

end:
    return result;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	00070200 	.word	0x00070200

080032fc <PHY_GetAnStatus>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_GetAnStatus(adi_phy_Device_t *hDevice, adi_phy_AnStatus_t *status)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    result = PHY_Read(hDevice, ADDR_AN_STATUS, &val16);
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	461a      	mov	r2, r3
 8003310:	493d      	ldr	r1, [pc, #244]	; (8003408 <PHY_GetAnStatus+0x10c>)
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fdb1 	bl	8003e7a <PHY_Read>
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d168      	bne.n	80033f4 <PHY_GetAnStatus+0xf8>
    {
        goto end;
    }

    status->anComplete = (val16 & BITM_AN_STATUS_AN_COMPLETE) >> BITP_AN_STATUS_AN_COMPLETE;
 8003322:	89bb      	ldrh	r3, [r7, #12]
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	bf14      	ite	ne
 800332e:	2301      	movne	r3, #1
 8003330:	2300      	moveq	r3, #0
 8003332:	b2da      	uxtb	r2, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	701a      	strb	r2, [r3, #0]
    if (!status->anComplete)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	f083 0301 	eor.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d158      	bne.n	80033f8 <PHY_GetAnStatus+0xfc>
        goto end;
    }

    /* Use the LL value for the link status. If it indicatesthe link is down,   */
    /* the application will read the link status on its own use GetLinkStatus() */
    status->anLinkStatus = (val16 & BITM_AN_STATUS_AN_LINK_STATUS)? ADI_PHY_LINK_STATUS_UP: ADI_PHY_LINK_STATUS_DOWN;
 8003346:	89bb      	ldrh	r3, [r7, #12]
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	705a      	strb	r2, [r3, #1]

    /* Master/slave resolution */
    result = PHY_Read(hDevice, ADDR_AN_STATUS_EXTRA, &val16);
 8003356:	f107 030c 	add.w	r3, r7, #12
 800335a:	461a      	mov	r2, r3
 800335c:	492b      	ldr	r1, [pc, #172]	; (800340c <PHY_GetAnStatus+0x110>)
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fd8b 	bl	8003e7a <PHY_Read>
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d146      	bne.n	80033fc <PHY_GetAnStatus+0x100>
    {
        goto end;
    }
    switch ((val16 & BITM_AN_STATUS_EXTRA_AN_MS_CONFIG_RSLTN) >> BITP_AN_STATUS_EXTRA_AN_MS_CONFIG_RSLTN)
 800336e:	89bb      	ldrh	r3, [r7, #12]
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d81a      	bhi.n	80033b0 <PHY_GetAnStatus+0xb4>
 800337a:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <PHY_GetAnStatus+0x84>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	08003399 	.word	0x08003399
 8003388:	080033a1 	.word	0x080033a1
 800338c:	080033a9 	.word	0x080033a9
    {
        case 0:
            status->anMsResolution = ADI_PHY_AN_MS_RESOLUTION_NOT_RUN;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	709a      	strb	r2, [r3, #2]
            break;
 8003396:	e00b      	b.n	80033b0 <PHY_GetAnStatus+0xb4>

        case 1:
            status->anMsResolution = ADI_PHY_AN_MS_RESOLUTION_FAULT;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	709a      	strb	r2, [r3, #2]
            break;
 800339e:	e007      	b.n	80033b0 <PHY_GetAnStatus+0xb4>

        case 2:
            status->anMsResolution = ADI_PHY_AN_MS_RESOLUTION_SLAVE;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2202      	movs	r2, #2
 80033a4:	709a      	strb	r2, [r3, #2]
            break;
 80033a6:	e003      	b.n	80033b0 <PHY_GetAnStatus+0xb4>

        case 3:
            status->anMsResolution = ADI_PHY_AN_MS_RESOLUTION_MASTER;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2203      	movs	r2, #3
 80033ac:	709a      	strb	r2, [r3, #2]
            break;
 80033ae:	bf00      	nop
    }

    switch ((val16 & BITM_AN_STATUS_EXTRA_AN_TX_LVL_RSLTN) >> BITP_AN_STATUS_EXTRA_AN_TX_LVL_RSLTN)
 80033b0:	89bb      	ldrh	r3, [r7, #12]
 80033b2:	09db      	lsrs	r3, r3, #7
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d820      	bhi.n	80033fe <PHY_GetAnStatus+0x102>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <PHY_GetAnStatus+0xc8>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033d5 	.word	0x080033d5
 80033c8:	080033dd 	.word	0x080033dd
 80033cc:	080033e5 	.word	0x080033e5
 80033d0:	080033ed 	.word	0x080033ed
    {
        case 0:
            status->anTxMode = ADI_PHY_AN_TX_LEVEL_RESOLUTION_NOT_RUN;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	70da      	strb	r2, [r3, #3]
            break;
 80033da:	e010      	b.n	80033fe <PHY_GetAnStatus+0x102>

        case 1:
            status->anTxMode = ADI_PHY_AN_TX_LEVEL_RESERVED;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	70da      	strb	r2, [r3, #3]
            break;
 80033e2:	e00c      	b.n	80033fe <PHY_GetAnStatus+0x102>

      case 2:
            status->anTxMode = ADI_PHY_AN_TX_LEVEL_1P0V;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2202      	movs	r2, #2
 80033e8:	70da      	strb	r2, [r3, #3]
            break;
 80033ea:	e008      	b.n	80033fe <PHY_GetAnStatus+0x102>

        case 3:
            status->anTxMode = ADI_PHY_AN_TX_LEVEL_2P4V;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2203      	movs	r2, #3
 80033f0:	70da      	strb	r2, [r3, #3]
            break;
 80033f2:	e004      	b.n	80033fe <PHY_GetAnStatus+0x102>
        goto end;
 80033f4:	bf00      	nop
 80033f6:	e002      	b.n	80033fe <PHY_GetAnStatus+0x102>
        goto end;
 80033f8:	bf00      	nop
 80033fa:	e000      	b.n	80033fe <PHY_GetAnStatus+0x102>
        goto end;
 80033fc:	bf00      	nop
    }

end:
    return result;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	00070201 	.word	0x00070201
 800340c:	00078001 	.word	0x00078001

08003410 <PHY_GetCapabilities>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_GetCapabilities(adi_phy_Device_t *hDevice, uint16_t *capabilities)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <PHY_GetCapabilities+0x1e>
    {
        result = ADI_ETH_IRQ_PENDING;
 8003428:	230b      	movs	r3, #11
 800342a:	73fb      	strb	r3, [r7, #15]
        goto end;
 800342c:	e028      	b.n	8003480 <PHY_GetCapabilities+0x70>
    }

    /* Read capabilities and store in driver struct */
    *capabilities = ADI_PHY_CAP_NONE;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	801a      	strh	r2, [r3, #0]
    result = PHY_Read(hDevice, ADDR_B10L_PMA_STAT, &val16);
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	461a      	mov	r2, r3
 800343a:	4914      	ldr	r1, [pc, #80]	; (800348c <PHY_GetCapabilities+0x7c>)
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fd1c 	bl	8003e7a <PHY_Read>
 8003442:	4603      	mov	r3, r0
 8003444:	73fb      	strb	r3, [r7, #15]
    if (result == ADI_ETH_SUCCESS)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d118      	bne.n	800347e <PHY_GetCapabilities+0x6e>
    {
        if (val16 & BITM_B10L_PMA_STAT_B10L_TX_LVL_HI_ABLE)
 800344c:	89bb      	ldrh	r3, [r7, #12]
 800344e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d006      	beq.n	8003464 <PHY_GetCapabilities+0x54>
        {
            *capabilities |= ADI_PHY_CAP_TX_HIGH_LEVEL;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	f043 0302 	orr.w	r3, r3, #2
 800345e:	b29a      	uxth	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	801a      	strh	r2, [r3, #0]
        }
        if (val16 & BITM_B10L_PMA_STAT_B10L_LB_PMA_LOC_ABLE)
 8003464:	89bb      	ldrh	r3, [r7, #12]
 8003466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <PHY_GetCapabilities+0x6e>
        {
            *capabilities |= ADI_PHY_CAP_PMA_LOCAL_LOOPBACK;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	b29a      	uxth	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	801a      	strh	r2, [r3, #0]
 800347c:	e000      	b.n	8003480 <PHY_GetCapabilities+0x70>
        }
    }

end:
 800347e:	bf00      	nop
    return result;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	000108f7 	.word	0x000108f7

08003490 <setSoftwarePowerdown>:

static adi_eth_Result_e setSoftwarePowerdown(adi_phy_Device_t *hDevice, bool enable)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]
    uint16_t            val16;
    uint16_t            bitval;
    bool                swpd;
    int32_t             iter = ADI_PHY_SOFT_PD_ITER;
 80034a0:	230a      	movs	r3, #10
 80034a2:	613b      	str	r3, [r7, #16]

    if (hDevice->irqPending)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <setSoftwarePowerdown+0x24>
    {
        result = ADI_ETH_IRQ_PENDING;
 80034ae:	230b      	movs	r3, #11
 80034b0:	75fb      	strb	r3, [r7, #23]
        goto end;
 80034b2:	e033      	b.n	800351c <setSoftwarePowerdown+0x8c>
    }

    bitval = (enable)? 1: 0;
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	81fb      	strh	r3, [r7, #14]
    val16 = bitval << BITP_CRSM_SFT_PD_CNTRL_CRSM_SFT_PD;
 80034b8:	89fb      	ldrh	r3, [r7, #14]
 80034ba:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_CRSM_SFT_PD_CNTRL, val16);
 80034bc:	89bb      	ldrh	r3, [r7, #12]
 80034be:	461a      	mov	r2, r3
 80034c0:	4919      	ldr	r1, [pc, #100]	; (8003528 <setSoftwarePowerdown+0x98>)
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fcb4 	bl	8003e30 <PHY_Write>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d123      	bne.n	800351a <setSoftwarePowerdown+0x8a>
    }

    /* Wait with timeout for the PHY device to enter the desired state before returning. */
    do
    {
        result = PHY_GetSoftwarePowerdown(hDevice, &swpd);
 80034d2:	f107 030b 	add.w	r3, r7, #11
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f841 	bl	8003560 <PHY_GetSoftwarePowerdown>
 80034de:	4603      	mov	r3, r0
 80034e0:	75fb      	strb	r3, [r7, #23]
    } while ((val16 != (uint16_t)swpd) && (--iter));
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	89ba      	ldrh	r2, [r7, #12]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d005      	beq.n	80034f8 <setSoftwarePowerdown+0x68>
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ec      	bne.n	80034d2 <setSoftwarePowerdown+0x42>

    if (iter <= 0)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	dc02      	bgt.n	8003504 <setSoftwarePowerdown+0x74>
    {
        result = ADI_ETH_READ_STATUS_TIMEOUT;
 80034fe:	230c      	movs	r3, #12
 8003500:	75fb      	strb	r3, [r7, #23]
        goto end;
 8003502:	e00b      	b.n	800351c <setSoftwarePowerdown+0x8c>
    }

    if (enable)
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <setSoftwarePowerdown+0x82>
    {
        hDevice->state = ADI_PHY_STATE_SOFTWARE_POWERDOWN;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	711a      	strb	r2, [r3, #4]
 8003510:	e004      	b.n	800351c <setSoftwarePowerdown+0x8c>
    }
    else
    {
        hDevice->state = ADI_PHY_STATE_OPERATION;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2203      	movs	r2, #3
 8003516:	711a      	strb	r2, [r3, #4]
 8003518:	e000      	b.n	800351c <setSoftwarePowerdown+0x8c>
        goto end;
 800351a:	bf00      	nop
    }

end:
    return result;
 800351c:	7dfb      	ldrb	r3, [r7, #23]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	001e8812 	.word	0x001e8812

0800352c <PHY_EnterSoftwarePowerdown>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_EnterSoftwarePowerdown(adi_phy_Device_t *hDevice)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    return setSoftwarePowerdown(hDevice, true);
 8003534:	2101      	movs	r1, #1
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffaa 	bl	8003490 <setSoftwarePowerdown>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <PHY_ExitSoftwarePowerdown>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_ExitSoftwarePowerdown(adi_phy_Device_t *hDevice)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
    return setSoftwarePowerdown(hDevice, false);
 800354e:	2100      	movs	r1, #0
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff9d 	bl	8003490 <setSoftwarePowerdown>
 8003556:	4603      	mov	r3, r0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <PHY_GetSoftwarePowerdown>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_GetSoftwarePowerdown(adi_phy_Device_t *hDevice, bool *enable)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <PHY_GetSoftwarePowerdown+0x1e>
    {
        result = ADI_ETH_IRQ_PENDING;
 8003578:	230b      	movs	r3, #11
 800357a:	73fb      	strb	r3, [r7, #15]
        goto end;
 800357c:	e019      	b.n	80035b2 <PHY_GetSoftwarePowerdown+0x52>
    }

    val16 = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	81bb      	strh	r3, [r7, #12]
    result = PHY_Read(hDevice, ADDR_CRSM_STAT, &val16);
 8003582:	f107 030c 	add.w	r3, r7, #12
 8003586:	461a      	mov	r2, r3
 8003588:	490c      	ldr	r1, [pc, #48]	; (80035bc <PHY_GetSoftwarePowerdown+0x5c>)
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fc75 	bl	8003e7a <PHY_Read>
 8003590:	4603      	mov	r3, r0
 8003592:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <PHY_GetSoftwarePowerdown+0x3e>
    {
        return ADI_ETH_COMM_ERROR;
 800359a:	2302      	movs	r3, #2
 800359c:	e00a      	b.n	80035b4 <PHY_GetSoftwarePowerdown+0x54>
    }

    *enable = ((val16 & BITM_CRSM_STAT_CRSM_SFT_PD_RDY) == (1 << BITP_CRSM_STAT_CRSM_SFT_PD_RDY));
 800359e:	89bb      	ldrh	r3, [r7, #12]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	701a      	strb	r2, [r3, #0]

end:
    return result;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	001e8818 	.word	0x001e8818

080035c0 <PHY_GetLinkStatus>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_GetLinkStatus(adi_phy_Device_t *hDevice, adi_phy_LinkStatus_e *status)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <PHY_GetLinkStatus+0x1e>
    {
        result = ADI_ETH_IRQ_PENDING;
 80035d8:	230b      	movs	r3, #11
 80035da:	73fb      	strb	r3, [r7, #15]
        goto end;
 80035dc:	e032      	b.n	8003644 <PHY_GetLinkStatus+0x84>
    }

    /* Default to link down, applicable when there are errors, */
    /* such as MDIO communication errors.                      */
    *status = ADI_PHY_LINK_STATUS_DOWN;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]

    /* Reading AN_STATUS register clears all latched bits, take this into account */
    result = PHY_Read(hDevice, ADDR_AN_STATUS, &val16);
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	461a      	mov	r2, r3
 80035ea:	4919      	ldr	r1, [pc, #100]	; (8003650 <PHY_GetLinkStatus+0x90>)
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fc44 	bl	8003e7a <PHY_Read>
 80035f2:	4603      	mov	r3, r0
 80035f4:	73fb      	strb	r3, [r7, #15]
    if (result == ADI_ETH_SUCCESS)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d122      	bne.n	8003642 <PHY_GetLinkStatus+0x82>
    {
        if (val16 & BITM_AN_STATUS_AN_LINK_STATUS)
 80035fc:	89bb      	ldrh	r3, [r7, #12]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <PHY_GetLinkStatus+0x4e>
        {
            *status = ADI_PHY_LINK_STATUS_UP;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e01a      	b.n	8003644 <PHY_GetLinkStatus+0x84>
        }
        else
        {
            /* Read it again, first record the dropped link in the stats  */
            hDevice->stats.linkDropped++;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
            result = PHY_Read(hDevice, ADDR_AN_STATUS, &val16);
 8003618:	f107 030c 	add.w	r3, r7, #12
 800361c:	461a      	mov	r2, r3
 800361e:	490c      	ldr	r1, [pc, #48]	; (8003650 <PHY_GetLinkStatus+0x90>)
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fc2a 	bl	8003e7a <PHY_Read>
 8003626:	4603      	mov	r3, r0
 8003628:	73fb      	strb	r3, [r7, #15]
            if (result == ADI_ETH_SUCCESS)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d108      	bne.n	8003642 <PHY_GetLinkStatus+0x82>
            {
                *status = (val16 & BITM_AN_STATUS_AN_LINK_STATUS)? ADI_PHY_LINK_STATUS_UP: ADI_PHY_LINK_STATUS_DOWN;
 8003630:	89bb      	ldrh	r3, [r7, #12]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	e000      	b.n	8003644 <PHY_GetLinkStatus+0x84>
            }
        }
    }

end:
 8003642:	bf00      	nop
    return result;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	00070201 	.word	0x00070201

08003654 <phyStaticConfig>:
 *                  to change the default behaviour of the device, increase performance, etc.
 *
 * @sa
 */
static adi_eth_Result_e phyStaticConfig(adi_phy_Device_t *hDevice, uint32_t modelNum, uint32_t revNum)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003660:	2300      	movs	r3, #0
 8003662:	75fb      	strb	r3, [r7, #23]

    if (revNum == 0)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 80e9 	bne.w	800383e <phyStaticConfig+0x1ea>
    {

        result = PHY_Write(hDevice, 0x1E8C81, 0x0001);
 800366c:	2201      	movs	r2, #1
 800366e:	498a      	ldr	r1, [pc, #552]	; (8003898 <phyStaticConfig+0x244>)
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fbdd 	bl	8003e30 <PHY_Write>
 8003676:	4603      	mov	r3, r0
 8003678:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f040 80e0 	bne.w	8003842 <phyStaticConfig+0x1ee>
        {
            goto end;
        }

        if (modelNum == 10)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b0a      	cmp	r3, #10
 8003686:	d107      	bne.n	8003698 <phyStaticConfig+0x44>
        {
            result = PHY_Write(hDevice, 0x1E8C80, 0x0001);
 8003688:	2201      	movs	r2, #1
 800368a:	4984      	ldr	r1, [pc, #528]	; (800389c <phyStaticConfig+0x248>)
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fbcf 	bl	8003e30 <PHY_Write>
 8003692:	4603      	mov	r3, r0
 8003694:	75fb      	strb	r3, [r7, #23]
 8003696:	e007      	b.n	80036a8 <phyStaticConfig+0x54>
        }
        else
        {
            result = PHY_Write(hDevice, 0x1E8C80, 0x3636);
 8003698:	f243 6236 	movw	r2, #13878	; 0x3636
 800369c:	497f      	ldr	r1, [pc, #508]	; (800389c <phyStaticConfig+0x248>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fbc6 	bl	8003e30 <PHY_Write>
 80036a4:	4603      	mov	r3, r0
 80036a6:	75fb      	strb	r3, [r7, #23]
        }
        if (result != ADI_ETH_SUCCESS)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f040 80cb 	bne.w	8003846 <phyStaticConfig+0x1f2>
        {
            goto end;
        }

        result = PHY_Write(hDevice, 0x1E881F, 0x0000);
 80036b0:	2200      	movs	r2, #0
 80036b2:	497b      	ldr	r1, [pc, #492]	; (80038a0 <phyStaticConfig+0x24c>)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fbbb 	bl	8003e30 <PHY_Write>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f040 80c2 	bne.w	800384a <phyStaticConfig+0x1f6>
        {
            goto end;
        }

        result = PHY_Write(hDevice, 0x018154, 0x00F9);
 80036c6:	22f9      	movs	r2, #249	; 0xf9
 80036c8:	4976      	ldr	r1, [pc, #472]	; (80038a4 <phyStaticConfig+0x250>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fbb0 	bl	8003e30 <PHY_Write>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f040 80b9 	bne.w	800384e <phyStaticConfig+0x1fa>
        {
            goto end;
        }

        result = PHY_Write(hDevice, 0x1E8C40, 0x000B);
 80036dc:	220b      	movs	r2, #11
 80036de:	4972      	ldr	r1, [pc, #456]	; (80038a8 <phyStaticConfig+0x254>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fba5 	bl	8003e30 <PHY_Write>
 80036e6:	4603      	mov	r3, r0
 80036e8:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 80b0 	bne.w	8003852 <phyStaticConfig+0x1fe>
        {
            goto end;
        }

        result = PHY_Write(hDevice, 0x018008, 0x0003);
 80036f2:	2203      	movs	r2, #3
 80036f4:	496d      	ldr	r1, [pc, #436]	; (80038ac <phyStaticConfig+0x258>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fb9a 	bl	8003e30 <PHY_Write>
 80036fc:	4603      	mov	r3, r0
 80036fe:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 80a7 	bne.w	8003856 <phyStaticConfig+0x202>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x018009, 0x0008);
 8003708:	2208      	movs	r2, #8
 800370a:	4969      	ldr	r1, [pc, #420]	; (80038b0 <phyStaticConfig+0x25c>)
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fb8f 	bl	8003e30 <PHY_Write>
 8003712:	4603      	mov	r3, r0
 8003714:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f040 809e 	bne.w	800385a <phyStaticConfig+0x206>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x018167, 0x2000);
 800371e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003722:	4964      	ldr	r1, [pc, #400]	; (80038b4 <phyStaticConfig+0x260>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fb83 	bl	8003e30 <PHY_Write>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 8094 	bne.w	800385e <phyStaticConfig+0x20a>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x018168, 0x0008);
 8003736:	2208      	movs	r2, #8
 8003738:	495f      	ldr	r1, [pc, #380]	; (80038b8 <phyStaticConfig+0x264>)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fb78 	bl	8003e30 <PHY_Write>
 8003740:	4603      	mov	r3, r0
 8003742:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8003744:	7dfb      	ldrb	r3, [r7, #23]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 808b 	bne.w	8003862 <phyStaticConfig+0x20e>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x01816B, 0x0400);
 800374c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003750:	495a      	ldr	r1, [pc, #360]	; (80038bc <phyStaticConfig+0x268>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fb6c 	bl	8003e30 <PHY_Write>
 8003758:	4603      	mov	r3, r0
 800375a:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 8081 	bne.w	8003866 <phyStaticConfig+0x212>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181BD, 0x2000);
 8003764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003768:	4955      	ldr	r1, [pc, #340]	; (80038c0 <phyStaticConfig+0x26c>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fb60 	bl	8003e30 <PHY_Write>
 8003770:	4603      	mov	r3, r0
 8003772:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d177      	bne.n	800386a <phyStaticConfig+0x216>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181BE, 0x0008);
 800377a:	2208      	movs	r2, #8
 800377c:	4951      	ldr	r1, [pc, #324]	; (80038c4 <phyStaticConfig+0x270>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fb56 	bl	8003e30 <PHY_Write>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d16f      	bne.n	800386e <phyStaticConfig+0x21a>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181C2, 0x0400);
 800378e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003792:	494d      	ldr	r1, [pc, #308]	; (80038c8 <phyStaticConfig+0x274>)
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fb4b 	bl	8003e30 <PHY_Write>
 800379a:	4603      	mov	r3, r0
 800379c:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d166      	bne.n	8003872 <phyStaticConfig+0x21e>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181DB, 0x0400);
 80037a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a8:	4948      	ldr	r1, [pc, #288]	; (80038cc <phyStaticConfig+0x278>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fb40 	bl	8003e30 <PHY_Write>
 80037b0:	4603      	mov	r3, r0
 80037b2:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d15d      	bne.n	8003876 <phyStaticConfig+0x222>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181E1, 0x0400);
 80037ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037be:	4944      	ldr	r1, [pc, #272]	; (80038d0 <phyStaticConfig+0x27c>)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fb35 	bl	8003e30 <PHY_Write>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d154      	bne.n	800387a <phyStaticConfig+0x226>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181E7, 0x0400);
 80037d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037d4:	493f      	ldr	r1, [pc, #252]	; (80038d4 <phyStaticConfig+0x280>)
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fb2a 	bl	8003e30 <PHY_Write>
 80037dc:	4603      	mov	r3, r0
 80037de:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d14b      	bne.n	800387e <phyStaticConfig+0x22a>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x0181EB, 0x0400);
 80037e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ea:	493b      	ldr	r1, [pc, #236]	; (80038d8 <phyStaticConfig+0x284>)
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fb1f 	bl	8003e30 <PHY_Write>
 80037f2:	4603      	mov	r3, r0
 80037f4:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d142      	bne.n	8003882 <phyStaticConfig+0x22e>
        {
            goto end;
        }
        result = PHY_Write(hDevice, 0x018143, 0x0400);
 80037fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003800:	4936      	ldr	r1, [pc, #216]	; (80038dc <phyStaticConfig+0x288>)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fb14 	bl	8003e30 <PHY_Write>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]
        if (result != ADI_ETH_SUCCESS)
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d139      	bne.n	8003886 <phyStaticConfig+0x232>
        {
            goto end;
        }

        if (modelNum == 10)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b0a      	cmp	r3, #10
 8003816:	d112      	bne.n	800383e <phyStaticConfig+0x1ea>
        {
            result = PHY_Write(hDevice, 0x1EA400, 0x0001);
 8003818:	2201      	movs	r2, #1
 800381a:	4931      	ldr	r1, [pc, #196]	; (80038e0 <phyStaticConfig+0x28c>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fb07 	bl	8003e30 <PHY_Write>
 8003822:	4603      	mov	r3, r0
 8003824:	75fb      	strb	r3, [r7, #23]
            if (result != ADI_ETH_SUCCESS)
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d12e      	bne.n	800388a <phyStaticConfig+0x236>
            {
                goto end;
            }
            result = PHY_Write(hDevice, 0x1EA407, 0x0001);
 800382c:	2201      	movs	r2, #1
 800382e:	492d      	ldr	r1, [pc, #180]	; (80038e4 <phyStaticConfig+0x290>)
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fafd 	bl	8003e30 <PHY_Write>
 8003836:	4603      	mov	r3, r0
 8003838:	75fb      	strb	r3, [r7, #23]
            if (result != ADI_ETH_SUCCESS)
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	2b00      	cmp	r3, #0
            }
        }

    }

end:
 800383e:	bf00      	nop
 8003840:	e024      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003842:	bf00      	nop
 8003844:	e022      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003846:	bf00      	nop
 8003848:	e020      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800384a:	bf00      	nop
 800384c:	e01e      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800384e:	bf00      	nop
 8003850:	e01c      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003852:	bf00      	nop
 8003854:	e01a      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003856:	bf00      	nop
 8003858:	e018      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800385a:	bf00      	nop
 800385c:	e016      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800385e:	bf00      	nop
 8003860:	e014      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003862:	bf00      	nop
 8003864:	e012      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003866:	bf00      	nop
 8003868:	e010      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800386a:	bf00      	nop
 800386c:	e00e      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800386e:	bf00      	nop
 8003870:	e00c      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003872:	bf00      	nop
 8003874:	e00a      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003876:	bf00      	nop
 8003878:	e008      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800387a:	bf00      	nop
 800387c:	e006      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 800387e:	bf00      	nop
 8003880:	e004      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003882:	bf00      	nop
 8003884:	e002      	b.n	800388c <phyStaticConfig+0x238>
            goto end;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <phyStaticConfig+0x238>
                goto end;
 800388a:	bf00      	nop
    return result;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	001e8c81 	.word	0x001e8c81
 800389c:	001e8c80 	.word	0x001e8c80
 80038a0:	001e881f 	.word	0x001e881f
 80038a4:	00018154 	.word	0x00018154
 80038a8:	001e8c40 	.word	0x001e8c40
 80038ac:	00018008 	.word	0x00018008
 80038b0:	00018009 	.word	0x00018009
 80038b4:	00018167 	.word	0x00018167
 80038b8:	00018168 	.word	0x00018168
 80038bc:	0001816b 	.word	0x0001816b
 80038c0:	000181bd 	.word	0x000181bd
 80038c4:	000181be 	.word	0x000181be
 80038c8:	000181c2 	.word	0x000181c2
 80038cc:	000181db 	.word	0x000181db
 80038d0:	000181e1 	.word	0x000181e1
 80038d4:	000181e7 	.word	0x000181e7
 80038d8:	000181eb 	.word	0x000181eb
 80038dc:	00018143 	.word	0x00018143
 80038e0:	001ea400 	.word	0x001ea400
 80038e4:	001ea407 	.word	0x001ea407

080038e8 <PHY_Reset>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_Reset(adi_phy_Device_t *hDevice, adi_phy_ResetType_e resetType)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80038f4:	2300      	movs	r3, #0
 80038f6:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    if (hDevice->irqPending)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <PHY_Reset+0x20>
    {
        result = ADI_ETH_IRQ_PENDING;
 8003902:	230b      	movs	r3, #11
 8003904:	73fb      	strb	r3, [r7, #15]
        goto end;
 8003906:	e01a      	b.n	800393e <PHY_Reset+0x56>
    }

    switch (resetType)
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d115      	bne.n	800393a <PHY_Reset+0x52>
    {
        case ADI_PHY_RESET_TYPE_SW:

            val16 = (1 << BITP_CRSM_SFT_RST_CRSM_SFT_RST);
 800390e:	2301      	movs	r3, #1
 8003910:	81bb      	strh	r3, [r7, #12]
            result = PHY_Write(hDevice, ADDR_CRSM_SFT_RST, val16);
 8003912:	89bb      	ldrh	r3, [r7, #12]
 8003914:	461a      	mov	r2, r3
 8003916:	490c      	ldr	r1, [pc, #48]	; (8003948 <PHY_Reset+0x60>)
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fa89 	bl	8003e30 <PHY_Write>
 800391e:	4603      	mov	r3, r0
 8003920:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <PHY_Reset+0x46>
            {
                result = ADI_ETH_COMM_ERROR;
 8003928:	2302      	movs	r3, #2
 800392a:	73fb      	strb	r3, [r7, #15]
            else
            {
                result = phyInit(hDevice);
            }

            break;
 800392c:	e007      	b.n	800393e <PHY_Reset+0x56>
                result = phyInit(hDevice);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fa96 	bl	8002e60 <phyInit>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]
            break;
 8003938:	e001      	b.n	800393e <PHY_Reset+0x56>

        default:
            result = ADI_ETH_UNSUPPORTED_FEATURE;
 800393a:	2322      	movs	r3, #34	; 0x22
 800393c:	73fb      	strb	r3, [r7, #15]
    }

end:
    return result;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	001e8810 	.word	0x001e8810

0800394c <PHY_SetLoopbackMode>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_SetLoopbackMode(adi_phy_Device_t *hDevice, adi_phy_LoopbackMode_e loopbackMode)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003958:	2300      	movs	r3, #0
 800395a:	73fb      	strb	r3, [r7, #15]
    uint16_t            valMacIfLoopback;
    uint16_t            valB10lPcsCntrl;
    uint16_t            valB10lPmaCntrl;
    bool                prevModePmaPcs = false;
 800395c:	2300      	movs	r3, #0
 800395e:	73bb      	strb	r3, [r7, #14]

    result = PHY_Read(hDevice, ADDR_MAC_IF_LOOPBACK, &valMacIfLoopback);
 8003960:	f107 030c 	add.w	r3, r7, #12
 8003964:	461a      	mov	r2, r3
 8003966:	4987      	ldr	r1, [pc, #540]	; (8003b84 <PHY_SetLoopbackMode+0x238>)
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fa86 	bl	8003e7a <PHY_Read>
 800396e:	4603      	mov	r3, r0
 8003970:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 80eb 	bne.w	8003b50 <PHY_SetLoopbackMode+0x204>
    {
        goto end;
    }
    /* Disable loopback */
    valMacIfLoopback &= ~((1 << BITP_MAC_IF_LOOPBACK_MAC_IF_LB_EN) | (1 << BITP_MAC_IF_LOOPBACK_MAC_IF_REM_LB_EN));
 800397a:	89bb      	ldrh	r3, [r7, #12]
 800397c:	f023 0305 	bic.w	r3, r3, #5
 8003980:	b29b      	uxth	r3, r3
 8003982:	81bb      	strh	r3, [r7, #12]

    result = PHY_Read(hDevice, ADDR_B10L_PCS_CNTRL, &valB10lPcsCntrl);
 8003984:	f107 030a 	add.w	r3, r7, #10
 8003988:	461a      	mov	r2, r3
 800398a:	497f      	ldr	r1, [pc, #508]	; (8003b88 <PHY_SetLoopbackMode+0x23c>)
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fa74 	bl	8003e7a <PHY_Read>
 8003992:	4603      	mov	r3, r0
 8003994:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f040 80db 	bne.w	8003b54 <PHY_SetLoopbackMode+0x208>
    {
        goto end;
    }
    if (valB10lPcsCntrl & BITM_B10L_PCS_CNTRL_B10L_LB_PCS_EN)
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <PHY_SetLoopbackMode+0x60>
    {
        prevModePmaPcs = true;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73bb      	strb	r3, [r7, #14]
    }
    /* Disable loopback */
    valB10lPcsCntrl &= ~(1 << BITP_B10L_PCS_CNTRL_B10L_LB_PCS_EN);
 80039ac:	897b      	ldrh	r3, [r7, #10]
 80039ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	817b      	strh	r3, [r7, #10]

    result = PHY_Read(hDevice, ADDR_B10L_PMA_CNTRL, &valB10lPmaCntrl);
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	461a      	mov	r2, r3
 80039bc:	4973      	ldr	r1, [pc, #460]	; (8003b8c <PHY_SetLoopbackMode+0x240>)
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa5b 	bl	8003e7a <PHY_Read>
 80039c4:	4603      	mov	r3, r0
 80039c6:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f040 80c4 	bne.w	8003b58 <PHY_SetLoopbackMode+0x20c>
    {
        goto end;
    }
    if (valB10lPmaCntrl & BITM_B10L_PMA_CNTRL_B10L_LB_PMA_LOC_EN)
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <PHY_SetLoopbackMode+0x92>
    {
        prevModePmaPcs = true;
 80039da:	2301      	movs	r3, #1
 80039dc:	73bb      	strb	r3, [r7, #14]
    }
    /* Disable loopback */
    valB10lPmaCntrl &= ~(1 << BITP_B10L_PMA_CNTRL_B10L_LB_PMA_LOC_EN);
 80039de:	893b      	ldrh	r3, [r7, #8]
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	813b      	strh	r3, [r7, #8]

    if (prevModePmaPcs || (loopbackMode == ADI_PHY_LOOPBACK_PCS) || (loopbackMode == ADI_PHY_LOOPBACK_PMA))
 80039e8:	7bbb      	ldrb	r3, [r7, #14]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <PHY_SetLoopbackMode+0xae>
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <PHY_SetLoopbackMode+0xae>
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d13b      	bne.n	8003a72 <PHY_SetLoopbackMode+0x126>
    {
        result = PHY_EnterSoftwarePowerdown(hDevice);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fd96 	bl	800352c <PHY_EnterSoftwarePowerdown>
 8003a00:	4603      	mov	r3, r0
 8003a02:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 80a8 	bne.w	8003b5c <PHY_SetLoopbackMode+0x210>
        {
            goto end;
        }

        if ((loopbackMode == ADI_PHY_LOOPBACK_PCS) || (loopbackMode == ADI_PHY_LOOPBACK_PMA))
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d002      	beq.n	8003a18 <PHY_SetLoopbackMode+0xcc>
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d116      	bne.n	8003a46 <PHY_SetLoopbackMode+0xfa>
        {
            result = PHY_Write(hDevice, ADDR_AN_CONTROL, 0);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	495d      	ldr	r1, [pc, #372]	; (8003b90 <PHY_SetLoopbackMode+0x244>)
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fa07 	bl	8003e30 <PHY_Write>
 8003a22:	4603      	mov	r3, r0
 8003a24:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 8099 	bne.w	8003b60 <PHY_SetLoopbackMode+0x214>
            {
                goto end;
            }
            result = PHY_Write(hDevice, ADDR_AN_FRC_MODE_EN, 1);
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f44f 21f0 	mov.w	r1, #491520	; 0x78000
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f9fb 	bl	8003e30 <PHY_Write>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d016      	beq.n	8003a72 <PHY_SetLoopbackMode+0x126>
            {
                goto end;
 8003a44:	e099      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
            }
        }
        else
        {
            result = PHY_Write(hDevice, ADDR_AN_FRC_MODE_EN, 0);
 8003a46:	2200      	movs	r2, #0
 8003a48:	f44f 21f0 	mov.w	r1, #491520	; 0x78000
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f9ef 	bl	8003e30 <PHY_Write>
 8003a52:	4603      	mov	r3, r0
 8003a54:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f040 8083 	bne.w	8003b64 <PHY_SetLoopbackMode+0x218>
            {
                goto end;
            }
            result = PHY_Write(hDevice, ADDR_AN_CONTROL, 1);
 8003a5e:	2201      	movs	r2, #1
 8003a60:	494b      	ldr	r1, [pc, #300]	; (8003b90 <PHY_SetLoopbackMode+0x244>)
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9e4 	bl	8003e30 <PHY_Write>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d17a      	bne.n	8003b68 <PHY_SetLoopbackMode+0x21c>
            }
        }

    }

    switch (loopbackMode)
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	2b06      	cmp	r3, #6
 8003a76:	d835      	bhi.n	8003ae4 <PHY_SetLoopbackMode+0x198>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <PHY_SetLoopbackMode+0x134>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003aeb 	.word	0x08003aeb
 8003a84:	08003a9d 	.word	0x08003a9d
 8003a88:	08003aa9 	.word	0x08003aa9
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003ac1 	.word	0x08003ac1
 8003a94:	08003acd 	.word	0x08003acd
 8003a98:	08003ad9 	.word	0x08003ad9
    {
        case ADI_PHY_LOOPBACK_NONE:
            break;
        case ADI_PHY_LOOPBACK_PCS:
            valB10lPcsCntrl |= (1 << BITP_B10L_PCS_CNTRL_B10L_LB_PCS_EN);
 8003a9c:	897b      	ldrh	r3, [r7, #10]
 8003a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	817b      	strh	r3, [r7, #10]
            break;
 8003aa6:	e021      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        case ADI_PHY_LOOPBACK_PMA:
            valB10lPmaCntrl |= (1 << BITP_B10L_PMA_CNTRL_B10L_LB_PMA_LOC_EN);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	813b      	strh	r3, [r7, #8]
            break;
 8003ab2:	e01b      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        case ADI_PHY_LOOPBACK_MACIF:
            valMacIfLoopback |= (1 << BITP_MAC_IF_LOOPBACK_MAC_IF_LB_EN);
 8003ab4:	89bb      	ldrh	r3, [r7, #12]
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	81bb      	strh	r3, [r7, #12]
            break;
 8003abe:	e015      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        case ADI_PHY_LOOPBACK_MACIF_SUPPRESS_TX:
            valMacIfLoopback |= ((1 << BITP_MAC_IF_LOOPBACK_MAC_IF_LB_EN) | (1 << BITP_MAC_IF_LOOPBACK_MAC_IF_LB_TX_SUP_EN));
 8003ac0:	89bb      	ldrh	r3, [r7, #12]
 8003ac2:	f043 0303 	orr.w	r3, r3, #3
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	81bb      	strh	r3, [r7, #12]
            break;
 8003aca:	e00f      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        case ADI_PHY_LOOPBACK_MACIF_REMOTE:
            valMacIfLoopback |= (1 << BITP_MAC_IF_LOOPBACK_MAC_IF_REM_LB_EN);
 8003acc:	89bb      	ldrh	r3, [r7, #12]
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	81bb      	strh	r3, [r7, #12]
            break;
 8003ad6:	e009      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        case ADI_PHY_LOOPBACK_MACIF_REMOTE_SUPPRESS_RX:
            valMacIfLoopback |= ((1 << BITP_MAC_IF_LOOPBACK_MAC_IF_REM_LB_EN) | (1 << BITP_MAC_IF_LOOPBACK_MAC_IF_REM_LB_RX_SUP_EN));
 8003ad8:	89bb      	ldrh	r3, [r7, #12]
 8003ada:	f043 030c 	orr.w	r3, r3, #12
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	81bb      	strh	r3, [r7, #12]
            break;
 8003ae2:	e003      	b.n	8003aec <PHY_SetLoopbackMode+0x1a0>
        default:
            result = ADI_ETH_INVALID_PARAM;
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	73fb      	strb	r3, [r7, #15]
            goto end;
 8003ae8:	e047      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
            break;
 8003aea:	bf00      	nop

    }

    result = PHY_Write(hDevice, ADDR_MAC_IF_LOOPBACK, valMacIfLoopback);
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	461a      	mov	r2, r3
 8003af0:	4924      	ldr	r1, [pc, #144]	; (8003b84 <PHY_SetLoopbackMode+0x238>)
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f99c 	bl	8003e30 <PHY_Write>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d134      	bne.n	8003b6c <PHY_SetLoopbackMode+0x220>
    {
        goto end;
    }

    result = PHY_Write(hDevice, ADDR_B10L_PCS_CNTRL, valB10lPcsCntrl);
 8003b02:	897b      	ldrh	r3, [r7, #10]
 8003b04:	461a      	mov	r2, r3
 8003b06:	4920      	ldr	r1, [pc, #128]	; (8003b88 <PHY_SetLoopbackMode+0x23c>)
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f991 	bl	8003e30 <PHY_Write>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d12b      	bne.n	8003b70 <PHY_SetLoopbackMode+0x224>
    {
        goto end;
    }

    result = PHY_Write(hDevice, ADDR_B10L_PMA_CNTRL, valB10lPmaCntrl);
 8003b18:	893b      	ldrh	r3, [r7, #8]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	491b      	ldr	r1, [pc, #108]	; (8003b8c <PHY_SetLoopbackMode+0x240>)
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f986 	bl	8003e30 <PHY_Write>
 8003b24:	4603      	mov	r3, r0
 8003b26:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d122      	bne.n	8003b74 <PHY_SetLoopbackMode+0x228>
    {
        goto end;
    }

    if (prevModePmaPcs || (loopbackMode == ADI_PHY_LOOPBACK_PCS) || (loopbackMode == ADI_PHY_LOOPBACK_PMA))
 8003b2e:	7bbb      	ldrb	r3, [r7, #14]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <PHY_SetLoopbackMode+0x1f4>
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d002      	beq.n	8003b40 <PHY_SetLoopbackMode+0x1f4>
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d11b      	bne.n	8003b78 <PHY_SetLoopbackMode+0x22c>
    {
        result = PHY_ExitSoftwarePowerdown(hDevice);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fd00 	bl	8003546 <PHY_ExitSoftwarePowerdown>
 8003b46:	4603      	mov	r3, r0
 8003b48:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b00      	cmp	r3, #0
        {
            goto end;
        }
    }
end:
 8003b4e:	e013      	b.n	8003b78 <PHY_SetLoopbackMode+0x22c>
        goto end;
 8003b50:	bf00      	nop
 8003b52:	e012      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
        goto end;
 8003b54:	bf00      	nop
 8003b56:	e010      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
        goto end;
 8003b58:	bf00      	nop
 8003b5a:	e00e      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
            goto end;
 8003b5c:	bf00      	nop
 8003b5e:	e00c      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
                goto end;
 8003b60:	bf00      	nop
 8003b62:	e00a      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
                goto end;
 8003b64:	bf00      	nop
 8003b66:	e008      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
                goto end;
 8003b68:	bf00      	nop
 8003b6a:	e006      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
        goto end;
 8003b6c:	bf00      	nop
 8003b6e:	e004      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
        goto end;
 8003b70:	bf00      	nop
 8003b72:	e002      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
        goto end;
 8003b74:	bf00      	nop
 8003b76:	e000      	b.n	8003b7a <PHY_SetLoopbackMode+0x22e>
end:
 8003b78:	bf00      	nop
    return result;
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	001f8055 	.word	0x001f8055
 8003b88:	000308e6 	.word	0x000308e6
 8003b8c:	000108f6 	.word	0x000108f6
 8003b90:	00070200 	.word	0x00070200

08003b94 <PHY_SetTestMode>:
 * @details
 *
 * @sa
 */
adi_eth_Result_e PHY_SetTestMode(adi_phy_Device_t *hDevice, adi_phy_TestMode_e testMode)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]
    uint16_t            b10lPmaCntrl;
    uint16_t            testModeCntrl;

    if ((testMode != ADI_PHY_TEST_MODE_NONE) && (testMode != ADI_PHY_TEST_MODE_1) &&
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00e      	beq.n	8003bc8 <PHY_SetTestMode+0x34>
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d00b      	beq.n	8003bc8 <PHY_SetTestMode+0x34>
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d008      	beq.n	8003bc8 <PHY_SetTestMode+0x34>
        (testMode != ADI_PHY_TEST_MODE_2) && (testMode != ADI_PHY_TEST_MODE_3) &&
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d005      	beq.n	8003bc8 <PHY_SetTestMode+0x34>
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d002      	beq.n	8003bc8 <PHY_SetTestMode+0x34>
        (testMode != ADI_PHY_TEST_MODE_TX_DISABLE))
    {
        result = ADI_ETH_INVALID_PARAM;
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	73fb      	strb	r3, [r7, #15]
        goto end;
 8003bc6:	e09d      	b.n	8003d04 <PHY_SetTestMode+0x170>
    }

    result = PHY_EnterSoftwarePowerdown(hDevice);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fcaf 	bl	800352c <PHY_EnterSoftwarePowerdown>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f040 8086 	bne.w	8003ce6 <PHY_SetTestMode+0x152>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_B10L_PMA_CNTRL, &b10lPmaCntrl);
 8003bda:	f107 030a 	add.w	r3, r7, #10
 8003bde:	461a      	mov	r2, r3
 8003be0:	494b      	ldr	r1, [pc, #300]	; (8003d10 <PHY_SetTestMode+0x17c>)
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f949 	bl	8003e7a <PHY_Read>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d17b      	bne.n	8003cea <PHY_SetTestMode+0x156>
    {
        goto end;
    }

    /* For most test modes we want to disable the transmit disable mode */
    b10lPmaCntrl &= ~BITM_B10L_PMA_CNTRL_B10L_TX_DIS_MODE_EN;
 8003bf2:	897b      	ldrh	r3, [r7, #10]
 8003bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	817b      	strh	r3, [r7, #10]

    if (testMode == ADI_PHY_TEST_MODE_NONE)
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11f      	bne.n	8003c42 <PHY_SetTestMode+0xae>
    {
        /* No need for read-modify-write, register has only one bitfield */
        result = PHY_Write(hDevice, ADDR_B10L_TEST_MODE_CNTRL, ENUM_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE_IEEE_TX_TM_NONE);
 8003c02:	2200      	movs	r2, #0
 8003c04:	4943      	ldr	r1, [pc, #268]	; (8003d14 <PHY_SetTestMode+0x180>)
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f912 	bl	8003e30 <PHY_Write>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d16b      	bne.n	8003cee <PHY_SetTestMode+0x15a>
        {
            goto end;
        }

        result = PHY_Write(hDevice, ADDR_AN_FRC_MODE_EN, 0);
 8003c16:	2200      	movs	r2, #0
 8003c18:	f44f 21f0 	mov.w	r1, #491520	; 0x78000
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f907 	bl	8003e30 <PHY_Write>
 8003c22:	4603      	mov	r3, r0
 8003c24:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d162      	bne.n	8003cf2 <PHY_SetTestMode+0x15e>
        {
            goto end;
        }

        result = PHY_Write(hDevice, ADDR_AN_CONTROL, 1);
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	493a      	ldr	r1, [pc, #232]	; (8003d18 <PHY_SetTestMode+0x184>)
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8fd 	bl	8003e30 <PHY_Write>
 8003c36:	4603      	mov	r3, r0
 8003c38:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d03f      	beq.n	8003cc0 <PHY_SetTestMode+0x12c>
        {
            goto end;
 8003c40:	e060      	b.n	8003d04 <PHY_SetTestMode+0x170>
        }

    }
    else
    {
        result = PHY_Write(hDevice, ADDR_AN_CONTROL, 0);
 8003c42:	2200      	movs	r2, #0
 8003c44:	4934      	ldr	r1, [pc, #208]	; (8003d18 <PHY_SetTestMode+0x184>)
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8f2 	bl	8003e30 <PHY_Write>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d14f      	bne.n	8003cf6 <PHY_SetTestMode+0x162>
        {
            goto end;
        }

        result = PHY_Write(hDevice, ADDR_AN_FRC_MODE_EN, 1);
 8003c56:	2201      	movs	r2, #1
 8003c58:	f44f 21f0 	mov.w	r1, #491520	; 0x78000
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f8e7 	bl	8003e30 <PHY_Write>
 8003c62:	4603      	mov	r3, r0
 8003c64:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d146      	bne.n	8003cfa <PHY_SetTestMode+0x166>
        {
            goto end;
        }

        if (testMode == ADI_PHY_TEST_MODE_TX_DISABLE)
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d105      	bne.n	8003c7e <PHY_SetTestMode+0xea>
        {
            b10lPmaCntrl |= BITM_B10L_PMA_CNTRL_B10L_TX_DIS_MODE_EN;
 8003c72:	897b      	ldrh	r3, [r7, #10]
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	817b      	strh	r3, [r7, #10]
 8003c7c:	e020      	b.n	8003cc0 <PHY_SetTestMode+0x12c>
        }
        else
        {
            switch (testMode)
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d00e      	beq.n	8003ca2 <PHY_SetTestMode+0x10e>
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	dc10      	bgt.n	8003caa <PHY_SetTestMode+0x116>
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d002      	beq.n	8003c92 <PHY_SetTestMode+0xfe>
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d004      	beq.n	8003c9a <PHY_SetTestMode+0x106>
 8003c90:	e00b      	b.n	8003caa <PHY_SetTestMode+0x116>
            {
                case ADI_PHY_TEST_MODE_1:
                    testModeCntrl = (ENUM_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE_IEEE_TX_TM_JITTER << BITP_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE);
 8003c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c96:	81bb      	strh	r3, [r7, #12]
                    break;
 8003c98:	e007      	b.n	8003caa <PHY_SetTestMode+0x116>

                case ADI_PHY_TEST_MODE_2:
                    testModeCntrl = (ENUM_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE_IEEE_TX_TM_DROOP << BITP_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE);
 8003c9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c9e:	81bb      	strh	r3, [r7, #12]
                    break;
 8003ca0:	e003      	b.n	8003caa <PHY_SetTestMode+0x116>

                case ADI_PHY_TEST_MODE_3:
                    testModeCntrl = (ENUM_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE_IEEE_TX_TM_IDLE << BITP_B10L_TEST_MODE_CNTRL_B10L_TX_TEST_MODE);
 8003ca2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003ca6:	81bb      	strh	r3, [r7, #12]
                    break;
 8003ca8:	bf00      	nop

            }

            /* No need for read-modify-write, register has only one bitfield */
            result = PHY_Write(hDevice, ADDR_B10L_TEST_MODE_CNTRL, testModeCntrl);
 8003caa:	89bb      	ldrh	r3, [r7, #12]
 8003cac:	461a      	mov	r2, r3
 8003cae:	4919      	ldr	r1, [pc, #100]	; (8003d14 <PHY_SetTestMode+0x180>)
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f8bd 	bl	8003e30 <PHY_Write>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	73fb      	strb	r3, [r7, #15]
            if (result != ADI_ETH_SUCCESS)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d11e      	bne.n	8003cfe <PHY_SetTestMode+0x16a>
                goto end;
            }
        }
    }

    result = PHY_Write(hDevice, ADDR_B10L_PMA_CNTRL, b10lPmaCntrl);
 8003cc0:	897b      	ldrh	r3, [r7, #10]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4912      	ldr	r1, [pc, #72]	; (8003d10 <PHY_SetTestMode+0x17c>)
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f8b2 	bl	8003e30 <PHY_Write>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d115      	bne.n	8003d02 <PHY_SetTestMode+0x16e>
    {
        goto end;
    }

    result = PHY_ExitSoftwarePowerdown(hDevice);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fc35 	bl	8003546 <PHY_ExitSoftwarePowerdown>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 8003ce4:	e00e      	b.n	8003d04 <PHY_SetTestMode+0x170>
        goto end;
 8003ce6:	bf00      	nop
 8003ce8:	e00c      	b.n	8003d04 <PHY_SetTestMode+0x170>
        goto end;
 8003cea:	bf00      	nop
 8003cec:	e00a      	b.n	8003d04 <PHY_SetTestMode+0x170>
            goto end;
 8003cee:	bf00      	nop
 8003cf0:	e008      	b.n	8003d04 <PHY_SetTestMode+0x170>
            goto end;
 8003cf2:	bf00      	nop
 8003cf4:	e006      	b.n	8003d04 <PHY_SetTestMode+0x170>
            goto end;
 8003cf6:	bf00      	nop
 8003cf8:	e004      	b.n	8003d04 <PHY_SetTestMode+0x170>
            goto end;
 8003cfa:	bf00      	nop
 8003cfc:	e002      	b.n	8003d04 <PHY_SetTestMode+0x170>
                goto end;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <PHY_SetTestMode+0x170>
        goto end;
 8003d02:	bf00      	nop
    return result;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	000108f6 	.word	0x000108f6
 8003d14:	000108f8 	.word	0x000108f8
 8003d18:	00070200 	.word	0x00070200

08003d1c <PHY_LedEn>:
 * @details
 *
 * @sa
 */
static adi_eth_Result_e PHY_LedEn(adi_phy_Device_t *hDevice, adi_phy_LedPort_e ledSel, bool enable)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	70fb      	strb	r3, [r7, #3]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	70bb      	strb	r3, [r7, #2]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;
    uint16_t            bitval;

    bitval = (enable)? 1: 0;
 8003d30:	78bb      	ldrb	r3, [r7, #2]
 8003d32:	81bb      	strh	r3, [r7, #12]

    result = PHY_Read(hDevice, ADDR_LED_CNTRL, &val16);
 8003d34:	f107 030a 	add.w	r3, r7, #10
 8003d38:	461a      	mov	r2, r3
 8003d3a:	491a      	ldr	r1, [pc, #104]	; (8003da4 <PHY_LedEn+0x88>)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f89c 	bl	8003e7a <PHY_Read>
 8003d42:	4603      	mov	r3, r0
 8003d44:	73fb      	strb	r3, [r7, #15]

    if(ledSel == ADI_PHY_LED_0)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10d      	bne.n	8003d68 <PHY_LedEn+0x4c>
    {
      val16 &= ~BITM_LED_CNTRL_LED0_EN;
 8003d4c:	897b      	ldrh	r3, [r7, #10]
 8003d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	817b      	strh	r3, [r7, #10]
      val16 |= bitval << BITP_LED_CNTRL_LED0_EN;
 8003d56:	89bb      	ldrh	r3, [r7, #12]
 8003d58:	01db      	lsls	r3, r3, #7
 8003d5a:	b21a      	sxth	r2, r3
 8003d5c:	897b      	ldrh	r3, [r7, #10]
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b21b      	sxth	r3, r3
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	817b      	strh	r3, [r7, #10]
    }
    if(ledSel == ADI_PHY_LED_1)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10d      	bne.n	8003d8a <PHY_LedEn+0x6e>
    {
      val16 &= ~BITM_LED_CNTRL_LED1_EN;
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	817b      	strh	r3, [r7, #10]
      val16 |= bitval << BITP_LED_CNTRL_LED1_EN;
 8003d78:	89bb      	ldrh	r3, [r7, #12]
 8003d7a:	03db      	lsls	r3, r3, #15
 8003d7c:	b21a      	sxth	r2, r3
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	b21b      	sxth	r3, r3
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b21b      	sxth	r3, r3
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	817b      	strh	r3, [r7, #10]
    }
    result = PHY_Write(hDevice, ADDR_LED_CNTRL, val16);
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4905      	ldr	r1, [pc, #20]	; (8003da4 <PHY_LedEn+0x88>)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f84d 	bl	8003e30 <PHY_Write>
 8003d96:	4603      	mov	r3, r0
 8003d98:	73fb      	strb	r3, [r7, #15]

    return result;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	001e8c82 	.word	0x001e8c82

08003da8 <PHY_LedBlinkTime>:
 * @details
 *
 * @sa
 */
static adi_eth_Result_e PHY_LedBlinkTime(adi_phy_Device_t *hDevice, adi_phy_LedPort_e ledSel, uint32_t blinkOn, uint32_t blinkOff)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	460b      	mov	r3, r1
 8003db6:	72fb      	strb	r3, [r7, #11]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003db8:	2300      	movs	r3, #0
 8003dba:	75fb      	strb	r3, [r7, #23]

    uint16_t            val16;

    if ((blinkOn > 255) || (blinkOff > 255))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2bff      	cmp	r3, #255	; 0xff
 8003dc0:	d802      	bhi.n	8003dc8 <PHY_LedBlinkTime+0x20>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	d902      	bls.n	8003dce <PHY_LedBlinkTime+0x26>
    {
        result = ADI_ETH_INVALID_PARAM;
 8003dc8:	2308      	movs	r3, #8
 8003dca:	75fb      	strb	r3, [r7, #23]
        goto end;
 8003dcc:	e027      	b.n	8003e1e <PHY_LedBlinkTime+0x76>
    }

    if(ledSel == ADI_PHY_LED_0)
 8003dce:	7afb      	ldrb	r3, [r7, #11]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10f      	bne.n	8003df4 <PHY_LedBlinkTime+0x4c>
    {
      val16 = ((blinkOn << BITP_LED0_BLINK_TIME_CNTRL_LED0_ON_N4MS) | (blinkOff << BITP_LED0_BLINK_TIME_CNTRL_LED0_OFF_N4MS));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	4313      	orrs	r3, r2
 8003de2:	82bb      	strh	r3, [r7, #20]
      /* Full register write, no need for read-modify-write. */
      result = PHY_Write(hDevice, ADDR_LED0_BLINK_TIME_CNTRL, val16);
 8003de4:	8abb      	ldrh	r3, [r7, #20]
 8003de6:	461a      	mov	r2, r3
 8003de8:	490f      	ldr	r1, [pc, #60]	; (8003e28 <PHY_LedBlinkTime+0x80>)
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f820 	bl	8003e30 <PHY_Write>
 8003df0:	4603      	mov	r3, r0
 8003df2:	75fb      	strb	r3, [r7, #23]
    }
    if(ledSel == ADI_PHY_LED_0)
 8003df4:	7afb      	ldrb	r3, [r7, #11]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d110      	bne.n	8003e1c <PHY_LedBlinkTime+0x74>
    {
      val16 = ((blinkOn << BITP_LED1_BLINK_TIME_CNTRL_LED1_ON_N4MS) | (blinkOff << BITP_LED1_BLINK_TIME_CNTRL_LED1_OFF_N4MS));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	4313      	orrs	r3, r2
 8003e08:	82bb      	strh	r3, [r7, #20]
      /* Full register write, no need for read-modify-write. */
      result = PHY_Write(hDevice, ADDR_LED1_BLINK_TIME_CNTRL, val16);
 8003e0a:	8abb      	ldrh	r3, [r7, #20]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4907      	ldr	r1, [pc, #28]	; (8003e2c <PHY_LedBlinkTime+0x84>)
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f80d 	bl	8003e30 <PHY_Write>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]
 8003e1a:	e000      	b.n	8003e1e <PHY_LedBlinkTime+0x76>
    }

end:
 8003e1c:	bf00      	nop
    return result;
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	001e8c80 	.word	0x001e8c80
 8003e2c:	001e8c81 	.word	0x001e8c81

08003e30 <PHY_Write>:
 * @param [out] data -  Data to write.
 *
 * @return 0 in case of success, positive error code otherwise.
*/
adi_eth_Result_e PHY_Write(adi_phy_Device_t *hDevice, uint32_t regAddr, uint16_t data)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	80fb      	strh	r3, [r7, #6]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	75fb      	strb	r3, [r7, #23]
    uint32_t            backup;

    backup = ADI_HAL_GET_ENABLE_IRQ(hDevice->adinDevice);
 8003e42:	f002 fbf5 	bl	8006630 <HAL_GetEnableIrq>
 8003e46:	6138      	str	r0, [r7, #16]
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8003e48:	f002 fbe4 	bl	8006614 <HAL_DisableIrq>

    if (hDevice->writeFn(hDevice->phyAddr, regAddr, data) != ADI_HAL_SUCCESS)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	b2d0      	uxtb	r0, r2
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	4798      	blx	r3
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <PHY_Write+0x36>
    {
        result = ADI_ETH_COMM_ERROR;
 8003e62:	2302      	movs	r3, #2
 8003e64:	75fb      	strb	r3, [r7, #23]
    }

    if (backup)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <PHY_Write+0x40>
    {
        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8003e6c:	f002 fbd9 	bl	8006622 <HAL_EnableIrq>
    }

    return result;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <PHY_Read>:
 * @param [out] data - Pointer to the data buffer.
 *
 * @return 0 in case of success, positive error code otherwise.
*/
adi_eth_Result_e PHY_Read(adi_phy_Device_t *hDevice, uint32_t regAddr, uint16_t *data)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b086      	sub	sp, #24
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003e86:	2300      	movs	r3, #0
 8003e88:	75fb      	strb	r3, [r7, #23]
    uint32_t            backup;

    backup = ADI_HAL_GET_ENABLE_IRQ(hDevice->adinDevice);
 8003e8a:	f002 fbd1 	bl	8006630 <HAL_GetEnableIrq>
 8003e8e:	6138      	str	r0, [r7, #16]
    ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 8003e90:	f002 fbc0 	bl	8006614 <HAL_DisableIrq>

    /* The only error returned by the HAL function is caused by 2nd TA bit */
    /* not being pulled low, which indicates the MDIO interface on the PHY */
    /* device is not operational.                                          */
    if (hDevice->readFn(hDevice->phyAddr, regAddr, data) != ADI_HAL_SUCCESS)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	b2d0      	uxtb	r0, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	4798      	blx	r3
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <PHY_Read+0x34>
    {
        result = ADI_ETH_COMM_ERROR;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if (backup)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <PHY_Read+0x3e>
    {
        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8003eb4:	f002 fbb5 	bl	8006622 <HAL_EnableIrq>
    }

    return result;
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <PHY_GetMseLinkQuality>:

adi_eth_Result_e PHY_GetMseLinkQuality(adi_phy_Device_t *hDevice, adi_phy_MseLinkQuality_t *mseLinkQuality)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]

    result = PHY_Read(hDevice, ADDR_MSE_VAL, &mseLinkQuality->mseVal);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4920      	ldr	r1, [pc, #128]	; (8003f58 <PHY_GetMseLinkQuality+0x94>)
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ffce 	bl	8003e7a <PHY_Read>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d12f      	bne.n	8003f48 <PHY_GetMseLinkQuality+0x84>
    {
        goto end;
    }

    if (mseLinkQuality->mseVal > ADI_PHY_LINK_QUALITY_THR_POOR)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	f240 7266 	movw	r2, #1894	; 0x766
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d903      	bls.n	8003efc <PHY_GetMseLinkQuality+0x38>
    {
        mseLinkQuality->linkQuality = ADI_PHY_LINK_QUALITY_POOR;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	709a      	strb	r2, [r3, #2]
 8003efa:	e00c      	b.n	8003f16 <PHY_GetMseLinkQuality+0x52>
    }
    else
    {
        if (mseLinkQuality->mseVal > ADI_PHY_LINK_QUALITY_THR_MARGINAL)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d903      	bls.n	8003f10 <PHY_GetMseLinkQuality+0x4c>
        {
            mseLinkQuality->linkQuality = ADI_PHY_LINK_QUALITY_MARGINAL;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	709a      	strb	r2, [r3, #2]
 8003f0e:	e002      	b.n	8003f16 <PHY_GetMseLinkQuality+0x52>
        }
        else
        {
            mseLinkQuality->linkQuality = ADI_PHY_LINK_QUALITY_GOOD;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2202      	movs	r2, #2
 8003f14:	709a      	strb	r2, [r3, #2]
        }
    }

    for (mseLinkQuality->sqi = 0; mseLinkQuality->sqi < ADI_PHY_SQI_NUM_ENTRIES - 1; mseLinkQuality->sqi++)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	70da      	strb	r2, [r3, #3]
 8003f1c:	e00f      	b.n	8003f3e <PHY_GetMseLinkQuality+0x7a>
    {
        if (mseLinkQuality->mseVal > convMseToSqi[mseLinkQuality->sqi])
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	78db      	ldrb	r3, [r3, #3]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <PHY_GetMseLinkQuality+0x98>)
 8003f2a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d80c      	bhi.n	8003f4c <PHY_GetMseLinkQuality+0x88>
    for (mseLinkQuality->sqi = 0; mseLinkQuality->sqi < ADI_PHY_SQI_NUM_ENTRIES - 1; mseLinkQuality->sqi++)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	78db      	ldrb	r3, [r3, #3]
 8003f36:	3301      	adds	r3, #1
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	70da      	strb	r2, [r3, #3]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	78db      	ldrb	r3, [r3, #3]
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d9eb      	bls.n	8003f1e <PHY_GetMseLinkQuality+0x5a>
        {
            break;
        }
    }

end:
 8003f46:	e002      	b.n	8003f4e <PHY_GetMseLinkQuality+0x8a>
        goto end;
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <PHY_GetMseLinkQuality+0x8a>
            break;
 8003f4c:	bf00      	nop
    return result;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	0001830b 	.word	0x0001830b
 8003f5c:	0801a7cc 	.word	0x0801a7cc

08003f60 <PHY_FrameGenEn>:

adi_eth_Result_e PHY_FrameGenEn(adi_phy_Device_t *hDevice, bool enable)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]
    uint16_t            frameCntrl;

    if (enable)
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d012      	beq.n	8003f9c <PHY_FrameGenEn+0x3c>
    {
        /* Set frame counter to 0 */
        result = PHY_FrameGenSetFrameCnt(hDevice, 0);
 8003f76:	2100      	movs	r1, #0
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f861 	bl	8004040 <PHY_FrameGenSetFrameCnt>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d133      	bne.n	8003ff0 <PHY_FrameGenEn+0x90>
        {
            goto end;
        }

        /* Enable frame generator, single bitfield in the register */
        result = PHY_Write(hDevice, ADDR_FG_EN, (1 << BITP_FG_EN_FG_EN));
 8003f88:	2201      	movs	r2, #1
 8003f8a:	491f      	ldr	r1, [pc, #124]	; (8004008 <PHY_FrameGenEn+0xa8>)
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff4f 	bl	8003e30 <PHY_Write>
 8003f92:	4603      	mov	r3, r0
 8003f94:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	e030      	b.n	8003ffe <PHY_FrameGenEn+0x9e>
        }
    }
    else
    {
        /* Backup of the current value in frame control */
        result = PHY_Read(hDevice, ADDR_FG_CNTRL_RSTRT, &frameCntrl);
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	491a      	ldr	r1, [pc, #104]	; (800400c <PHY_FrameGenEn+0xac>)
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff68 	bl	8003e7a <PHY_Read>
 8003faa:	4603      	mov	r3, r0
 8003fac:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d11f      	bne.n	8003ff4 <PHY_FrameGenEn+0x94>
        {
            goto end;
        }

        /* Disable frame generation by setting frame control to NONE */
        result = PHY_FrameGenSetFramePayload(hDevice, ADI_PHY_FRAME_GEN_PAYLOAD_NONE);
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f86e 	bl	8004098 <PHY_FrameGenSetFramePayload>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d118      	bne.n	8003ff8 <PHY_FrameGenEn+0x98>
            result = PHY_FrameGenDone(hDevice, &fgDone);
        } while ((result != ADI_ETH_SUCCESS) || !fgDone);
#endif

        /* Disable frame generator and restore the frame control setting */
        result = PHY_Write(hDevice, ADDR_FG_EN, (0 << BITP_FG_EN_FG_EN));
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	490f      	ldr	r1, [pc, #60]	; (8004008 <PHY_FrameGenEn+0xa8>)
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ff30 	bl	8003e30 <PHY_Write>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d110      	bne.n	8003ffc <PHY_FrameGenEn+0x9c>
        {
            goto end;
        }

        result = PHY_Write(hDevice, ADDR_FG_CNTRL_RSTRT, frameCntrl);
 8003fda:	89bb      	ldrh	r3, [r7, #12]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	490b      	ldr	r1, [pc, #44]	; (800400c <PHY_FrameGenEn+0xac>)
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff ff25 	bl	8003e30 <PHY_Write>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]
        if (result != ADI_ETH_SUCCESS)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
            goto end;
        }

    }

end:
 8003fee:	e006      	b.n	8003ffe <PHY_FrameGenEn+0x9e>
            goto end;
 8003ff0:	bf00      	nop
 8003ff2:	e004      	b.n	8003ffe <PHY_FrameGenEn+0x9e>
            goto end;
 8003ff4:	bf00      	nop
 8003ff6:	e002      	b.n	8003ffe <PHY_FrameGenEn+0x9e>
            goto end;
 8003ff8:	bf00      	nop
 8003ffa:	e000      	b.n	8003ffe <PHY_FrameGenEn+0x9e>
            goto end;
 8003ffc:	bf00      	nop
    return result;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	001f8020 	.word	0x001f8020
 800400c:	001f8021 	.word	0x001f8021

08004010 <PHY_FrameGenSetMode>:

adi_eth_Result_e PHY_FrameGenSetMode(adi_phy_Device_t *hDevice, adi_phy_FrameGenMode_e mode)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]

    result = PHY_Write(hDevice, ADDR_FG_CONT_MODE_EN, (mode << BITP_FG_CONT_MODE_EN_FG_CONT_MODE_EN));
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	b29b      	uxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	4905      	ldr	r1, [pc, #20]	; (800403c <PHY_FrameGenSetMode+0x2c>)
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff01 	bl	8003e30 <PHY_Write>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]

    return result;
 8004032:	7bfb      	ldrb	r3, [r7, #15]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	001f8022 	.word	0x001f8022

08004040 <PHY_FrameGenSetFrameCnt>:

adi_eth_Result_e PHY_FrameGenSetFrameCnt(adi_phy_Device_t *hDevice, uint32_t frameCnt)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    val16 = (frameCnt >> 16) & 0xFFFF;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_FG_NFRM_H, val16);
 8004054:	89bb      	ldrh	r3, [r7, #12]
 8004056:	461a      	mov	r2, r3
 8004058:	490d      	ldr	r1, [pc, #52]	; (8004090 <PHY_FrameGenSetFrameCnt+0x50>)
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fee8 	bl	8003e30 <PHY_Write>
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10c      	bne.n	8004084 <PHY_FrameGenSetFrameCnt+0x44>
    {
        goto end;
    }

    val16 = frameCnt & 0xFFFF;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_FG_NFRM_L, val16);
 800406e:	89bb      	ldrh	r3, [r7, #12]
 8004070:	461a      	mov	r2, r3
 8004072:	4908      	ldr	r1, [pc, #32]	; (8004094 <PHY_FrameGenSetFrameCnt+0x54>)
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fedb 	bl	8003e30 <PHY_Write>
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 8004082:	e000      	b.n	8004086 <PHY_FrameGenSetFrameCnt+0x46>
        goto end;
 8004084:	bf00      	nop
    return result;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	001f8027 	.word	0x001f8027
 8004094:	001f8028 	.word	0x001f8028

08004098 <PHY_FrameGenSetFramePayload>:

adi_eth_Result_e PHY_FrameGenSetFramePayload(adi_phy_Device_t *hDevice, adi_phy_FrameGenPayload_e payload)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80040a4:	2300      	movs	r3, #0
 80040a6:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    /* This includes setting FG_RSTRT=0 */
    val16 = 0x0000;
 80040a8:	2300      	movs	r3, #0
 80040aa:	81bb      	strh	r3, [r7, #12]
    val16 |= (payload << BITP_FG_CNTRL_RSTRT_FG_CNTRL);
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	89bb      	ldrh	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_FG_CNTRL_RSTRT, val16);
 80040b6:	89bb      	ldrh	r3, [r7, #12]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4907      	ldr	r1, [pc, #28]	; (80040d8 <PHY_FrameGenSetFramePayload+0x40>)
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff feb7 	bl	8003e30 <PHY_Write>
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 80040ca:	bf00      	nop
    return result;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	001f8021 	.word	0x001f8021

080040dc <PHY_FrameGenSetFrameLen>:

adi_eth_Result_e PHY_FrameGenSetFrameLen(adi_phy_Device_t *hDevice, uint16_t frameLen)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]

    result = PHY_Write(hDevice, ADDR_FG_FRM_LEN, (frameLen << BITP_FG_FRM_LEN_FG_FRM_LEN));
 80040ec:	887b      	ldrh	r3, [r7, #2]
 80040ee:	461a      	mov	r2, r3
 80040f0:	4905      	ldr	r1, [pc, #20]	; (8004108 <PHY_FrameGenSetFrameLen+0x2c>)
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fe9c 	bl	8003e30 <PHY_Write>
 80040f8:	4603      	mov	r3, r0
 80040fa:	73fb      	strb	r3, [r7, #15]

    return result;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	001f8025 	.word	0x001f8025

0800410c <PHY_FrameGenSetIfgLen>:

adi_eth_Result_e PHY_FrameGenSetIfgLen(adi_phy_Device_t *hDevice, uint16_t ifgLen)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004118:	2300      	movs	r3, #0
 800411a:	73fb      	strb	r3, [r7, #15]

    /* Single 16-bit bitfield */
    result = PHY_Write(hDevice, ADDR_FG_IFG_LEN, ifgLen);
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	461a      	mov	r2, r3
 8004120:	4905      	ldr	r1, [pc, #20]	; (8004138 <PHY_FrameGenSetIfgLen+0x2c>)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fe84 	bl	8003e30 <PHY_Write>
 8004128:	4603      	mov	r3, r0
 800412a:	73fb      	strb	r3, [r7, #15]

    return result;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	001f8026 	.word	0x001f8026

0800413c <PHY_FrameGenRestart>:

adi_eth_Result_e PHY_FrameGenRestart(adi_phy_Device_t *hDevice)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]
    uint16_t            frameCntrl;
    bool                fgDone;

    /* Before restart, clear FG_DONE explicitly in case it was set before and not cleared */
    /* Discard the read value, only use of the read is to clear FG_DONE */
    result = PHY_FrameGenDone(hDevice, &fgDone);
 8004148:	f107 030b 	add.w	r3, r7, #11
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f82c 	bl	80041ac <PHY_FrameGenDone>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11b      	bne.n	8004196 <PHY_FrameGenRestart+0x5a>
    {
        goto end;
    }
    (void)fgDone;

    result = PHY_Read(hDevice, ADDR_FG_CNTRL_RSTRT, &frameCntrl);
 800415e:	f107 030c 	add.w	r3, r7, #12
 8004162:	461a      	mov	r2, r3
 8004164:	4910      	ldr	r1, [pc, #64]	; (80041a8 <PHY_FrameGenRestart+0x6c>)
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fe87 	bl	8003e7a <PHY_Read>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d111      	bne.n	800419a <PHY_FrameGenRestart+0x5e>
    {
        goto end;
    }

    frameCntrl |= (1 << BITP_FG_CNTRL_RSTRT_FG_RSTRT);
 8004176:	89bb      	ldrh	r3, [r7, #12]
 8004178:	f043 0308 	orr.w	r3, r3, #8
 800417c:	b29b      	uxth	r3, r3
 800417e:	81bb      	strh	r3, [r7, #12]
    result = PHY_Write(hDevice, ADDR_FG_CNTRL_RSTRT, frameCntrl);
 8004180:	89bb      	ldrh	r3, [r7, #12]
 8004182:	461a      	mov	r2, r3
 8004184:	4908      	ldr	r1, [pc, #32]	; (80041a8 <PHY_FrameGenRestart+0x6c>)
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fe52 	bl	8003e30 <PHY_Write>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b00      	cmp	r3, #0
    {
        goto end;
    }

end:
 8004194:	e002      	b.n	800419c <PHY_FrameGenRestart+0x60>
        goto end;
 8004196:	bf00      	nop
 8004198:	e000      	b.n	800419c <PHY_FrameGenRestart+0x60>
        goto end;
 800419a:	bf00      	nop
    return result;
 800419c:	7bfb      	ldrb	r3, [r7, #15]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	001f8021 	.word	0x001f8021

080041ac <PHY_FrameGenDone>:

adi_eth_Result_e PHY_FrameGenDone(adi_phy_Device_t *hDevice, bool *fgDone)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    result = PHY_Read(hDevice, ADDR_FG_DONE, &val16);
 80041ba:	f107 030c 	add.w	r3, r7, #12
 80041be:	461a      	mov	r2, r3
 80041c0:	490c      	ldr	r1, [pc, #48]	; (80041f4 <PHY_FrameGenDone+0x48>)
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fe59 	bl	8003e7a <PHY_Read>
 80041c8:	4603      	mov	r3, r0
 80041ca:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <PHY_FrameGenDone+0x3c>
    {
        goto end;
    }

    *fgDone = (BITM_FG_DONE_FG_DONE & val16);
 80041d2:	89bb      	ldrh	r3, [r7, #12]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	e000      	b.n	80041ea <PHY_FrameGenDone+0x3e>
        goto end;
 80041e8:	bf00      	nop

end:
    return result;
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	001f8029 	.word	0x001f8029

080041f8 <PHY_FrameChkEn>:

adi_eth_Result_e PHY_FrameChkEn(adi_phy_Device_t *hDevice, bool enable)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004204:	2300      	movs	r3, #0
 8004206:	737b      	strb	r3, [r7, #13]
    uint16_t            val16;

    if (enable)
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <PHY_FrameChkEn+0x1c>
    {
        val16 = 1 << BITP_FC_EN_FC_EN;
 800420e:	2301      	movs	r3, #1
 8004210:	81fb      	strh	r3, [r7, #14]
 8004212:	e001      	b.n	8004218 <PHY_FrameChkEn+0x20>
    }
    else
    {
        val16 = 0 << BITP_FC_EN_FC_EN;
 8004214:	2300      	movs	r3, #0
 8004216:	81fb      	strh	r3, [r7, #14]
    }

    result = PHY_Write(hDevice, ADDR_FC_EN, val16);
 8004218:	89fb      	ldrh	r3, [r7, #14]
 800421a:	461a      	mov	r2, r3
 800421c:	4905      	ldr	r1, [pc, #20]	; (8004234 <PHY_FrameChkEn+0x3c>)
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe06 	bl	8003e30 <PHY_Write>
 8004224:	4603      	mov	r3, r0
 8004226:	737b      	strb	r3, [r7, #13]

    return result;
 8004228:	7b7b      	ldrb	r3, [r7, #13]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	001f8001 	.word	0x001f8001

08004238 <PHY_FrameChkSourceSelect>:

adi_eth_Result_e PHY_FrameChkSourceSelect(adi_phy_Device_t *hDevice, adi_phy_FrameChkSource_e source)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]

    result = PHY_Write(hDevice, ADDR_FC_TX_SEL, (source << BITP_FC_TX_SEL_FC_TX_SEL));
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	4905      	ldr	r1, [pc, #20]	; (8004264 <PHY_FrameChkSourceSelect+0x2c>)
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff fded 	bl	8003e30 <PHY_Write>
 8004256:	4603      	mov	r3, r0
 8004258:	73fb      	strb	r3, [r7, #15]

    return result;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	001f8005 	.word	0x001f8005

08004268 <PHY_FrameChkReadFrameCnt>:

adi_eth_Result_e PHY_FrameChkReadFrameCnt(adi_phy_Device_t *hDevice, uint32_t *cnt)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
    uint16_t            val16;

    result = PHY_Read(hDevice, ADDR_FC_FRM_CNT_H, &val16);
 8004276:	f107 030c 	add.w	r3, r7, #12
 800427a:	461a      	mov	r2, r3
 800427c:	4914      	ldr	r1, [pc, #80]	; (80042d0 <PHY_FrameChkReadFrameCnt+0x68>)
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fdfb 	bl	8003e7a <PHY_Read>
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d117      	bne.n	80042be <PHY_FrameChkReadFrameCnt+0x56>
    {
        goto end;
    }
    *cnt = (val16 << 16);
 800428e:	89bb      	ldrh	r3, [r7, #12]
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	461a      	mov	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	601a      	str	r2, [r3, #0]

    result = PHY_Read(hDevice, ADDR_FC_FRM_CNT_L, &val16);
 8004298:	f107 030c 	add.w	r3, r7, #12
 800429c:	461a      	mov	r2, r3
 800429e:	490d      	ldr	r1, [pc, #52]	; (80042d4 <PHY_FrameChkReadFrameCnt+0x6c>)
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff fdea 	bl	8003e7a <PHY_Read>
 80042a6:	4603      	mov	r3, r0
 80042a8:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d108      	bne.n	80042c2 <PHY_FrameChkReadFrameCnt+0x5a>
    {
        goto end;
    }
    *cnt |= val16;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	89ba      	ldrh	r2, [r7, #12]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e002      	b.n	80042c4 <PHY_FrameChkReadFrameCnt+0x5c>
        goto end;
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <PHY_FrameChkReadFrameCnt+0x5c>
        goto end;
 80042c2:	bf00      	nop

end:
    return result;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	001f8009 	.word	0x001f8009
 80042d4:	001f800a 	.word	0x001f800a

080042d8 <PHY_FrameChkReadRxErrCnt>:

adi_eth_Result_e PHY_FrameChkReadRxErrCnt(adi_phy_Device_t *hDevice, uint16_t *cnt)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]

    result = PHY_Read(hDevice, ADDR_RX_ERR_CNT, cnt);
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	4905      	ldr	r1, [pc, #20]	; (8004300 <PHY_FrameChkReadRxErrCnt+0x28>)
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff fdc5 	bl	8003e7a <PHY_Read>
 80042f0:	4603      	mov	r3, r0
 80042f2:	73fb      	strb	r3, [r7, #15]

    return result;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	001f8008 	.word	0x001f8008

08004304 <PHY_FrameChkReadErrorCnt>:

adi_eth_Result_e PHY_FrameChkReadErrorCnt(adi_phy_Device_t *hDevice, adi_phy_FrameChkErrorCounters_t *cnt)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]

    result = PHY_Read(hDevice, ADDR_FC_LEN_ERR_CNT, &cnt->LEN_ERR_CNT);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	4937      	ldr	r1, [pc, #220]	; (80043f4 <PHY_FrameChkReadErrorCnt+0xf0>)
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff fdae 	bl	8003e7a <PHY_Read>
 800431e:	4603      	mov	r3, r0
 8004320:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d153      	bne.n	80043d0 <PHY_FrameChkReadErrorCnt+0xcc>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_ALGN_ERR_CNT, &cnt->ALGN_ERR_CNT);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	3302      	adds	r3, #2
 800432c:	461a      	mov	r2, r3
 800432e:	4932      	ldr	r1, [pc, #200]	; (80043f8 <PHY_FrameChkReadErrorCnt+0xf4>)
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fda2 	bl	8003e7a <PHY_Read>
 8004336:	4603      	mov	r3, r0
 8004338:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d149      	bne.n	80043d4 <PHY_FrameChkReadErrorCnt+0xd0>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_SYMB_ERR_CNT, &cnt->SYMB_ERR_CNT);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	3304      	adds	r3, #4
 8004344:	461a      	mov	r2, r3
 8004346:	492d      	ldr	r1, [pc, #180]	; (80043fc <PHY_FrameChkReadErrorCnt+0xf8>)
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fd96 	bl	8003e7a <PHY_Read>
 800434e:	4603      	mov	r3, r0
 8004350:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d13f      	bne.n	80043d8 <PHY_FrameChkReadErrorCnt+0xd4>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_OSZ_CNT, &cnt->OSZ_CNT);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	3306      	adds	r3, #6
 800435c:	461a      	mov	r2, r3
 800435e:	4928      	ldr	r1, [pc, #160]	; (8004400 <PHY_FrameChkReadErrorCnt+0xfc>)
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff fd8a 	bl	8003e7a <PHY_Read>
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d135      	bne.n	80043dc <PHY_FrameChkReadErrorCnt+0xd8>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_USZ_CNT, &cnt->USZ_CNT);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	3308      	adds	r3, #8
 8004374:	461a      	mov	r2, r3
 8004376:	4923      	ldr	r1, [pc, #140]	; (8004404 <PHY_FrameChkReadErrorCnt+0x100>)
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff fd7e 	bl	8003e7a <PHY_Read>
 800437e:	4603      	mov	r3, r0
 8004380:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d12b      	bne.n	80043e0 <PHY_FrameChkReadErrorCnt+0xdc>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_ODD_CNT, &cnt->ODD_CNT);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	330a      	adds	r3, #10
 800438c:	461a      	mov	r2, r3
 800438e:	491e      	ldr	r1, [pc, #120]	; (8004408 <PHY_FrameChkReadErrorCnt+0x104>)
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fd72 	bl	8003e7a <PHY_Read>
 8004396:	4603      	mov	r3, r0
 8004398:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d121      	bne.n	80043e4 <PHY_FrameChkReadErrorCnt+0xe0>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_ODD_PRE_CNT, &cnt->ODD_PRE_CNT);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	461a      	mov	r2, r3
 80043a6:	4919      	ldr	r1, [pc, #100]	; (800440c <PHY_FrameChkReadErrorCnt+0x108>)
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff fd66 	bl	8003e7a <PHY_Read>
 80043ae:	4603      	mov	r3, r0
 80043b0:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d117      	bne.n	80043e8 <PHY_FrameChkReadErrorCnt+0xe4>
    {
        goto end;
    }

    result = PHY_Read(hDevice, ADDR_FC_FALSE_CARRIER_CNT, &cnt->FALSE_CARRIER_CNT);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	330e      	adds	r3, #14
 80043bc:	461a      	mov	r2, r3
 80043be:	4914      	ldr	r1, [pc, #80]	; (8004410 <PHY_FrameChkReadErrorCnt+0x10c>)
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff fd5a 	bl	8003e7a <PHY_Read>
 80043c6:	4603      	mov	r3, r0
 80043c8:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	2b00      	cmp	r3, #0
    {
        goto end;
    }
end:
 80043ce:	e00c      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043d0:	bf00      	nop
 80043d2:	e00a      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043d4:	bf00      	nop
 80043d6:	e008      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043d8:	bf00      	nop
 80043da:	e006      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043dc:	bf00      	nop
 80043de:	e004      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043e0:	bf00      	nop
 80043e2:	e002      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <PHY_FrameChkReadErrorCnt+0xe6>
        goto end;
 80043e8:	bf00      	nop
    return result;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	001f800b 	.word	0x001f800b
 80043f8:	001f800c 	.word	0x001f800c
 80043fc:	001f800d 	.word	0x001f800d
 8004400:	001f800e 	.word	0x001f800e
 8004404:	001f800f 	.word	0x001f800f
 8004408:	001f8010 	.word	0x001f8010
 800440c:	001f8011 	.word	0x001f8011
 8004410:	001f8013 	.word	0x001f8013

08004414 <checkIdentity>:
 *                  return ADI_PHY_UNSUPPORTED_DEVID
 *
 * @sa
 */
static adi_eth_Result_e checkIdentity(adi_phy_Device_t *hDevice, uint32_t *modelNum, uint32_t *revNum)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8004420:	2300      	movs	r3, #0
 8004422:	75fb      	strb	r3, [r7, #23]
    uint16_t            val16;

#if defined(MDIO_CL22)
    result = PHY_Read(hDevice, ADDR_MI_PHY_ID1, &val16);
#else
      result = PHY_Read(hDevice, ADDR_MMD1_DEV_ID1, &val16);
 8004424:	f107 0314 	add.w	r3, r7, #20
 8004428:	461a      	mov	r2, r3
 800442a:	491d      	ldr	r1, [pc, #116]	; (80044a0 <checkIdentity+0x8c>)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff fd24 	bl	8003e7a <PHY_Read>
 8004432:	4603      	mov	r3, r0
 8004434:	75fb      	strb	r3, [r7, #23]
#endif
    if (result != ADI_ETH_SUCCESS)
 8004436:	7dfb      	ldrb	r3, [r7, #23]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d128      	bne.n	800448e <checkIdentity+0x7a>
    {
        goto end;
    }
    if (val16 != ADI_PHY_DEVID1)
 800443c:	8abb      	ldrh	r3, [r7, #20]
 800443e:	f240 2283 	movw	r2, #643	; 0x283
 8004442:	4293      	cmp	r3, r2
 8004444:	d002      	beq.n	800444c <checkIdentity+0x38>
    {
        result = ADI_ETH_UNSUPPORTED_DEVICE;
 8004446:	2305      	movs	r3, #5
 8004448:	75fb      	strb	r3, [r7, #23]
        goto end;
 800444a:	e023      	b.n	8004494 <checkIdentity+0x80>
    }

#if defined(MDIO_CL22)
      result = PHY_Read(hDevice, ADDR_MI_PHY_ID2, &val16);
#else
      result = PHY_Read(hDevice, ADDR_MMD1_DEV_ID2, &val16);
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	461a      	mov	r2, r3
 8004452:	4914      	ldr	r1, [pc, #80]	; (80044a4 <checkIdentity+0x90>)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff fd10 	bl	8003e7a <PHY_Read>
 800445a:	4603      	mov	r3, r0
 800445c:	75fb      	strb	r3, [r7, #23]
#endif
    if (result != ADI_ETH_SUCCESS)
 800445e:	7dfb      	ldrb	r3, [r7, #23]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d116      	bne.n	8004492 <checkIdentity+0x7e>
    {
        goto end;
    }

    /* Check if the value of MMD1_DEV_ID2.OUI matches expected value */
    if ((val16 & BITM_MMD1_DEV_ID2_MMD1_DEV_ID2_OUI) != (ADI_PHY_DEVID2_OUI << BITP_MMD1_DEV_ID2_MMD1_DEV_ID2_OUI))
 8004464:	8abb      	ldrh	r3, [r7, #20]
 8004466:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800446a:	f5b3 4f3c 	cmp.w	r3, #48128	; 0xbc00
 800446e:	d002      	beq.n	8004476 <checkIdentity+0x62>
    {
        result = ADI_ETH_UNSUPPORTED_DEVICE;
 8004470:	2305      	movs	r3, #5
 8004472:	75fb      	strb	r3, [r7, #23]
        goto end;
 8004474:	e00e      	b.n	8004494 <checkIdentity+0x80>
    }

    *modelNum = (uint32_t)((val16 & BITM_MMD1_DEV_ID2_MMD1_MODEL_NUM) >> BITP_MMD1_DEV_ID2_MMD1_MODEL_NUM);
 8004476:	8abb      	ldrh	r3, [r7, #20]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	601a      	str	r2, [r3, #0]
    *revNum = (uint32_t)((val16 & BITM_MMD1_DEV_ID2_MMD1_REV_NUM) >> BITP_MMD1_DEV_ID2_MMD1_REV_NUM);
 8004482:	8abb      	ldrh	r3, [r7, #20]
 8004484:	f003 020f 	and.w	r2, r3, #15
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e002      	b.n	8004494 <checkIdentity+0x80>
        goto end;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <checkIdentity+0x80>
        goto end;
 8004492:	bf00      	nop

end:
    return result;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	001e0002 	.word	0x001e0002
 80044a4:	001e0003 	.word	0x001e0003

080044a8 <oaIrqHandler>:
 * @details         Called from the INT_N interrupt handler. Executes the OA state machine.
 *
 * @sa              oaStateMachine()
 */
void oaIrqHandler(adi_mac_Device_t *hDevice)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
    /* If SPI is busy, the interrupt is not required because all relevant info comes in the footer. */
    if (hDevice->spiState == ADI_MAC_SPI_STATE_READY)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <oaIrqHandler+0x22>
    {
        ADI_HAL_DISABLE_IRQ(hDevice->adinDevice);
 80044ba:	f002 f8ab 	bl	8006614 <HAL_DisableIrq>
        hDevice->state = ADI_MAC_STATE_IRQ_START;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2209      	movs	r2, #9
 80044c2:	701a      	strb	r2, [r3, #0]

        oaStateMachine(hDevice);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f813 	bl	80044f0 <oaStateMachine>
    }
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <spiCallback>:
 *                  (if SPI uses DMA). Executes the OA state machine.
 *
 * @sa              oaStateMachine()
 */
void spiCallback(void *pCBParam, uint32_t Event, void *pArg)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
    adi_mac_Device_t        *hDevice = (adi_mac_Device_t *)pCBParam;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	617b      	str	r3, [r7, #20]

    oaStateMachine(hDevice);
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	f000 f804 	bl	80044f0 <oaStateMachine>
}
 80044e8:	bf00      	nop
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <oaStateMachine>:
 *
 * @details         Implements the OPEN Alliance SPI protocol.
 *
 */
adi_eth_Result_e oaStateMachine(adi_mac_Device_t *hDevice)
{
 80044f0:	b590      	push	{r4, r7, lr}
 80044f2:	b0a9      	sub	sp, #164	; 0xa4
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e                result = ADI_ETH_SUCCESS;
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint32_t                        tail;
    uint32_t                        byteOffset;
    uint8_t                         *pRxBuf;
    volatile adi_mac_OaTxHeader_t   oaTxHeader;
    volatile adi_mac_OaRxFooter_t   oaRxFooter;
    uint32_t                        chunkSize = (1 << hDevice->oaCps);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8004504:	2201      	movs	r2, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t                        exst;
    uint32_t                        val32;
    uint32_t                        mem32;
    uint32_t                        expectedFcs = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	673b      	str	r3, [r7, #112]	; 0x70
    uint32_t                        cHdr;
    uint32_t                        eHdr;
    uint32_t                        Event = ADI_MAC_CALLBACK_STATUS_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t                         timestampBytes[8];
    static ADI_MAC_MDIOACC_0__t     mdioCmd;

    exst = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    switch (hDevice->state)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3b05      	subs	r3, #5
 8004524:	2b06      	cmp	r3, #6
 8004526:	f200 8705 	bhi.w	8005334 <oaStateMachine+0xe44>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <oaStateMachine+0x40>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	0800454d 	.word	0x0800454d
 8004534:	080045b3 	.word	0x080045b3
 8004538:	08004615 	.word	0x08004615
 800453c:	0800468f 	.word	0x0800468f
 8004540:	0800505d 	.word	0x0800505d
 8004544:	08005125 	.word	0x08005125
 8004548:	080051b7 	.word	0x080051b7
    {
        case ADI_MAC_STATE_CONTROL_START:

            len = hDevice->cnt;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c

            result = oaCtrlSetup(&hDevice->ctrlTxBuf[0], hDevice->wnr, hDevice->regAddr, hDevice->pRegData, &len);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
 800456c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	4623      	mov	r3, r4
 8004574:	f001 faa3 	bl	8005abe <oaCtrlSetup>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

            useDma = (len >= MIN_SIZE_FOR_DMA);
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	2b0f      	cmp	r3, #15
 8004582:	bf8c      	ite	hi
 8004584:	2301      	movhi	r3, #1
 8004586:	2300      	movls	r3, #0
 8004588:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            hDevice->state = ADI_MAC_STATE_CONTROL_END;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2206      	movs	r2, #6
 8004590:	701a      	strb	r2, [r3, #0]
            /* OA is full duplex, can chose either Rx or Tx */
            hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	705a      	strb	r2, [r3, #1]

            ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, &hDevice->ctrlTxBuf[0], &hDevice->ctrlRxBuf[0], len, useDma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80045a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045aa:	f002 f857 	bl	800665c <HAL_SpiReadWrite>

            break;
 80045ae:	f000 becf 	b.w	8005350 <oaStateMachine+0xe60>

        case ADI_MAC_STATE_CONTROL_END:

            /* Check header vs. echoed header for errors */
            cHdr = *(uint32_t *)&hDevice->ctrlTxBuf[0];
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61fb      	str	r3, [r7, #28]
            eHdr = *(uint32_t *)&hDevice->ctrlRxBuf[ADI_SPI_HEADER_SIZE];
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	61bb      	str	r3, [r7, #24]

            if (cHdr != eHdr)
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d003      	beq.n	80045d6 <oaStateMachine+0xe6>
            {
                hDevice->spiErr = 1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	605a      	str	r2, [r3, #4]
 80045d4:	e016      	b.n	8004604 <oaStateMachine+0x114>
            }
            else
            {
                hDevice->spiErr = 0;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	605a      	str	r2, [r3, #4]
                if (hDevice->wnr == ADI_MAC_SPI_READ)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10e      	bne.n	8004604 <oaStateMachine+0x114>
                {
                    result = oaCtrlCmdReadData((uint32_t *)hDevice->pRegData, &hDevice->ctrlRxBuf[2 * ADI_SPI_HEADER_SIZE], hDevice->cnt);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 01a8 	ldr.w	r0, [r3, #424]	; 0x1a8
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80045f8:	461a      	mov	r2, r3
 80045fa:	f001 faee 	bl	8005bda <oaCtrlCmdReadData>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

                }
            }
            hDevice->spiState = ADI_MAC_SPI_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	705a      	strb	r2, [r3, #1]
            hDevice->state = ADI_MAC_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	701a      	strb	r2, [r3, #0]

            break;
 8004610:	f000 be9e 	b.w	8005350 <oaStateMachine+0xe60>

        case ADI_MAC_STATE_DATA_START:

            result = oaSpiProcess(hDevice);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f001 f831 	bl	800567c <oaSpiProcess>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

            if ((result == ADI_ETH_SUCCESS) && hDevice->oaTrxSize)
 8004620:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004624:	2b00      	cmp	r3, #0
 8004626:	d11e      	bne.n	8004666 <oaStateMachine+0x176>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800462e:	2b00      	cmp	r3, #0
 8004630:	d019      	beq.n	8004666 <oaStateMachine+0x176>
            {
                /* Determine if it's worth using DMA based on the transaction size. */
                useDma = (hDevice->oaTrxSize >= MIN_SIZE_FOR_DMA);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8004638:	2b0f      	cmp	r3, #15
 800463a:	bf8c      	ite	hi
 800463c:	2301      	movhi	r3, #1
 800463e:	2300      	movls	r3, #0
 8004640:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

                hDevice->state = ADI_MAC_STATE_DATA_END;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2208      	movs	r2, #8
 8004648:	701a      	strb	r2, [r3, #0]
                /* Rx/Tx are the same in OA SPI, reusing the state names from   */
                /* generic SPI. Different state names also help with debugging. */
                hDevice->spiState = ADI_MAC_SPI_STATE_TX_FRAME;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2204      	movs	r2, #4
 800464e:	705a      	strb	r2, [r3, #1]

                /* Platform dependent function*/
                ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, spiTxBuf, spiRxBuf, hDevice->oaTrxSize, useDma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8004656:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800465a:	4996      	ldr	r1, [pc, #600]	; (80048b4 <oaStateMachine+0x3c4>)
 800465c:	4896      	ldr	r0, [pc, #600]	; (80048b8 <oaStateMachine+0x3c8>)
 800465e:	f001 fffd 	bl	800665c <HAL_SpiReadWrite>
                {
                    ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
                }
            }

            break;
 8004662:	f000 be70 	b.w	8005346 <oaStateMachine+0xe56>
                hDevice->state = ADI_MAC_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	701a      	strb	r2, [r3, #0]
                hDevice->spiState = ADI_MAC_SPI_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	705a      	strb	r2, [r3, #1]
                if (!hDevice->pendingCtrl)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f083 0301 	eor.w	r3, r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8660 	beq.w	8005346 <oaStateMachine+0xe56>
                    ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8004686:	f001 ffcc 	bl	8006622 <HAL_EnableIrq>
            break;
 800468a:	f000 be5c 	b.w	8005346 <oaStateMachine+0xe56>

        case ADI_MAC_STATE_DATA_END:

            for (uint32_t chunkStart = 0; chunkStart < hDevice->oaTrxSize; chunkStart += ADI_SPI_HEADER_SIZE + chunkSize)
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004694:	f000 bc51 	b.w	8004f3a <oaStateMachine+0xa4a>
            {
                oaRxFooter.VALUE32 = *(uint32_t *)&spiRxBuf[chunkStart + chunkSize];
 8004698:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800469c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800469e:	4413      	add	r3, r2
 80046a0:	4a84      	ldr	r2, [pc, #528]	; (80048b4 <oaStateMachine+0x3c4>)
 80046a2:	4413      	add	r3, r2
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
                oaRxFooter.VALUE32 = HTON32(oaRxFooter.VALUE32);
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 80046ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ae:	ba1b      	rev	r3, r3
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24

                if (oaRxFooter.VALUE32 == ADI_OA_HEADER_BAD)
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b8:	d108      	bne.n	80046cc <oaStateMachine+0x1dc>
                {
                    /* Parity error on transmitted header */
                    hDevice->oaErrorStats.hdrParityErrorCount++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 80046c8:	f000 bc30 	b.w	8004f2c <oaStateMachine+0xa3c>
                }
                else
                {
                    /* Ignore the chunk if the footer parity check fails. */
                    if (!MAC_CalculateParity((uint8_t *)&oaRxFooter.VALUE32, 4))
 80046cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d0:	2104      	movs	r1, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fb0a 	bl	8002cec <MAC_CalculateParity>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <oaStateMachine+0x200>
                    {
                        hDevice->oaErrorStats.ftrParityErrorCount++;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80046ec:	f000 bc1e 	b.w	8004f2c <oaStateMachine+0xa3c>
                    }
                    else
                    {
                        if (!oaRxFooter.SYNC)
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f3c3 7340 	ubfx	r3, r3, #29, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <oaStateMachine+0x21e>
                        {
                            hDevice->oaErrorStats.syncErrorCount++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800470a:	f000 bc0f 	b.w	8004f2c <oaStateMachine+0xa3c>
                        }
                        else
                        {
                            exst |= oaRxFooter.EXST;
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                            hDevice->oaTxc = oaRxFooter.TXC;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                            hDevice->oaRca = oaRxFooter.RCA;
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	f3c3 6304 	ubfx	r3, r3, #24, #5
 8004738:	b2db      	uxtb	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

                            if (oaRxFooter.DV && !hDevice->oaRxUseBackupBuf)
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 83a8 	beq.w	8004ea0 <oaStateMachine+0x9b0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004756:	f083 0301 	eor.w	r3, r3, #1
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 839f 	beq.w	8004ea0 <oaStateMachine+0x9b0>
                            {
                                pRxBuf = hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->pBuf;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	66bb      	str	r3, [r7, #104]	; 0x68
                                byteOffset = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                if (hDevice->oaTimestampSplit)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8004784:	2b00      	cmp	r3, #0
 8004786:	d03c      	beq.n	8004802 <oaStateMachine+0x312>
                                {
                                    /* If the timestamp was split into two chunks, the remaining 32b will be at the start of this chunk. */
                                    hDevice->oaTimestampSplit = false;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
                                    memcpy(&mem32, &spiRxBuf[chunkStart], 4);
 8004790:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004794:	4a47      	ldr	r2, [pc, #284]	; (80048b4 <oaStateMachine+0x3c4>)
 8004796:	4413      	add	r3, r2
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	623b      	str	r3, [r7, #32]
                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestamp = HTON32(mem32);
 800479c:	6a3a      	ldr	r2, [r7, #32]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	440b      	add	r3, r1
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	647a      	str	r2, [r7, #68]	; 0x44
 80047b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b4:	ba12      	rev	r2, r2
 80047b6:	61da      	str	r2, [r3, #28]
                                    memcpy(&timestampBytes[0], &spiRxBuf[chunkStart], 4);
 80047b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047bc:	4a3d      	ldr	r2, [pc, #244]	; (80048b4 <oaStateMachine+0x3c4>)
 80047be:	4413      	add	r3, r2
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	613b      	str	r3, [r7, #16]
                                    byteOffset += 4;
 80047c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047c8:	3304      	adds	r3, #4
 80047ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                    /* MAC_CalculateParity returns 1 if timestampBytes has odd parity, and oaTimestampParity is 0 if timestampBytes has odd parity. */
                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampValid = (MAC_CalculateParity(timestampBytes, 8) != hDevice->oaTimestampParity);
 80047ce:	f107 0310 	add.w	r3, r7, #16
 80047d2:	2108      	movs	r1, #8
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fa89 	bl	8002cec <MAC_CalculateParity>
 80047da:	4603      	mov	r3, r0
 80047dc:	4618      	mov	r0, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	440b      	add	r3, r1
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4290      	cmp	r0, r2
 80047f8:	bf14      	ite	ne
 80047fa:	2201      	movne	r2, #1
 80047fc:	2200      	moveq	r2, #0
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	765a      	strb	r2, [r3, #25]
                                }

                                if (oaRxFooter.EV)
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80db 	beq.w	80049c6 <oaStateMachine+0x4d6>
                                {
                                    /* If FD = 1, frame needs to be dropped */
                                    if (oaRxFooter.FD)
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <oaStateMachine+0x344>
                                    {
                                        /* Reset the receive index to reuse current buffer for next frame */
                                        hDevice->oaRxCurBufByteOffset = 0;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

                                        hDevice->oaErrorStats.fdCount++;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8004832:	e0c8      	b.n	80049c6 <oaStateMachine+0x4d6>
                                    else
                                    {
                                        /* Special case: a full frame is sent in a single chunk, this can occur */
                                        /* when frame is 64 bytes (including FCS) and the chunk is 64 bytes.    */
                                        /* This case is handled by SV=1 case.                                   */
                                        uint32_t ebo = oaRxFooter.EBO;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	f3c3 2305 	ubfx	r3, r3, #8, #6
 800483a:	b2db      	uxtb	r3, r3
 800483c:	667b      	str	r3, [r7, #100]	; 0x64
                                        uint32_t sbo = oaRxFooter.SWO * 4;
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	f3c3 4303 	ubfx	r3, r3, #16, #4
 8004844:	b2db      	uxtb	r3, r3
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	663b      	str	r3, [r7, #96]	; 0x60
                                        if (!(oaRxFooter.SV && (ebo > sbo)))
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	f3c3 5300 	ubfx	r3, r3, #20, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <oaStateMachine+0x370>
 8004856:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800485a:	429a      	cmp	r2, r3
 800485c:	f200 80b3 	bhi.w	80049c6 <oaStateMachine+0x4d6>
                                        {
                                            if (hDevice->oaValidFlag != ADI_MAC_OA_VALID_FLAG_START)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8004866:	2b01      	cmp	r3, #1
 8004868:	d00b      	beq.n	8004882 <oaStateMachine+0x392>
                                            {
                                                /* No prior SV was received, this is an error */
                                                /* Reset the receive index to reuse current buffer for next frame */
                                                hDevice->oaRxCurBufByteOffset = 0;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

                                                hDevice->oaErrorStats.invalidEvCount++;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8004880:	e09d      	b.n	80049be <oaStateMachine+0x4ce>
                                            }
                                            else
                                            {
                                                if (hDevice->oaRxCurBufByteOffset + ebo + 1 > hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->bufSize)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488a:	4413      	add	r3, r2
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	440b      	add	r3, r1
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d90a      	bls.n	80048bc <oaStateMachine+0x3cc>
                                                {
                                                    /* Rx buffer too small for the incoming frame, notify the user. */
                                                    Event |= ADI_MAC_CALLBACK_STATUS_RX_BUF_OVF;
 80048a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048aa:	f043 0302 	orr.w	r3, r3, #2
 80048ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048b2:	e059      	b.n	8004968 <oaStateMachine+0x478>
 80048b4:	200001bc 	.word	0x200001bc
 80048b8:	2000098c 	.word	0x2000098c
                                                }
                                                else
                                                {
                                                    memcpy(&pRxBuf[hDevice->oaRxCurBufByteOffset], &spiRxBuf[chunkStart], ebo + 1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80048c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048c4:	18d0      	adds	r0, r2, r3
 80048c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048ca:	4a9e      	ldr	r2, [pc, #632]	; (8004b44 <oaStateMachine+0x654>)
 80048cc:	1899      	adds	r1, r3, r2
 80048ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d0:	3301      	adds	r3, #1
 80048d2:	461a      	mov	r2, r3
 80048d4:	f014 ff65 	bl	80197a2 <memcpy>
                                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize = hDevice->oaRxCurBufByteOffset + ebo + 1;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80048de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048e0:	441a      	add	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	440b      	add	r3, r1
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	3201      	adds	r2, #1
 80048f6:	609a      	str	r2, [r3, #8]

                                                    /* Adjust buffer size for FCS */
                                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize -= FCS_SIZE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4413      	add	r3, r2
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	3a04      	subs	r2, #4
 800490e:	609a      	str	r2, [r3, #8]

                                                    if (hDevice->fcsCheckEn)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d026      	beq.n	8004968 <oaStateMachine+0x478>
                                                    {
                                                        uint32_t actualFcs;
                                                        memcpy(&actualFcs, &pRxBuf[hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize], FCS_SIZE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4413      	add	r3, r2
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004930:	4413      	add	r3, r2
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
                                                        expectedFcs = ADI_HAL_FCS_CALCULATE(hDevice->adinDevice, pRxBuf,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4413      	add	r3, r2
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	4619      	mov	r1, r3
 800494c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800494e:	f001 fc9f 	bl	8006290 <HAL_FcsCalculate>
 8004952:	6738      	str	r0, [r7, #112]	; 0x70
                                                                        hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize);
                                                        if (expectedFcs != actualFcs)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004958:	429a      	cmp	r2, r3
 800495a:	d005      	beq.n	8004968 <oaStateMachine+0x478>
                                                        {
                                                            Event |= ADI_MAC_CALLBACK_STATUS_FCS_ERROR;
 800495c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                                        }
                                                    }
                                                }
                                                tail = hDevice->pRxQueue->tail;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	65fb      	str	r3, [r7, #92]	; 0x5c
                                                queueRemove(hDevice->pRxQueue);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004974:	4618      	mov	r0, r3
 8004976:	f7fc fb00 	bl	8000f7a <queueRemove>
                                                if (hDevice->cbFunc[ADI_MAC_EVT_DYN_TBL_UPDATE] != NULL)
                                                {
                                                    hDevice->cbFunc[ADI_MAC_EVT_DYN_TBL_UPDATE](hDevice->adinDevice, Event, hDevice->pRxQueue->pEntries[tail].pBufDesc);
                                                }
    #endif
                                                if (hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4413      	add	r3, r2
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <oaStateMachine+0x4c6>
                                                {
                                                    hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc(hDevice->adinDevice, Event, hDevice->pRxQueue->pEntries[tail].pBufDesc);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80049a6:	6811      	ldr	r1, [r2, #0]
 80049a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049aa:	00d2      	lsls	r2, r2, #3
 80049ac:	440a      	add	r2, r1
 80049ae:	6852      	ldr	r2, [r2, #4]
 80049b0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80049b4:	4798      	blx	r3
                                                }

                                                hDevice->oaRxCurBufByteOffset = 0;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                                            }
                                            hDevice->oaValidFlag = ADI_MAC_OA_VALID_FLAG_END;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
                                        }
                                    }
                                }

                                if (oaRxFooter.SV)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	f3c3 5300 	ubfx	r3, r3, #20, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 81fa 	beq.w	8004dc8 <oaStateMachine+0x8d8>
                                {
                                    if ((hDevice->oaValidFlag != ADI_MAC_OA_VALID_FLAG_NONE) && (hDevice->oaValidFlag != ADI_MAC_OA_VALID_FLAG_END))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <oaStateMachine+0x506>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d006      	beq.n	80049f6 <oaStateMachine+0x506>
                                    {
                                        /* No prior EV was received, this is an error */
                                        hDevice->oaErrorStats.invalidSvCount++;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
                                    }

                                    uint32_t vs = oaRxFooter.VS;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	f3c3 5381 	ubfx	r3, r3, #22, #2
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	65bb      	str	r3, [r7, #88]	; 0x58
                                    adi_mac_RxFifoPrio_e prio = (adi_mac_RxFifoPrio_e)((vs & 0x2) >> 1);
 8004a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a02:	085b      	lsrs	r3, r3, #1
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined(ADI_MAC_ENABLE_RX_QUEUE_HI_PRIO)
                                    if (prio == ADI_MAC_RX_FIFO_PRIO_LOW)
 8004a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <oaStateMachine+0x530>
                                    {
                                        hDevice->pRxQueue = &hDevice->rxQueueLp;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	67da      	str	r2, [r3, #124]	; 0x7c
 8004a1e:	e004      	b.n	8004a2a <oaStateMachine+0x53a>
                                    }
                                    else
                                    {
                                        hDevice->pRxQueue = &hDevice->rxQueueHp;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	67da      	str	r2, [r3, #124]	; 0x7c
                                    }
#endif
                        			if (queueIsEmpty(hDevice->pRxQueue) && !hDevice->oaRxUseBackupBuf)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc fa71 	bl	8000f16 <queueIsEmpty>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d017      	beq.n	8004a6a <oaStateMachine+0x57a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004a40:	f083 0301 	eor.w	r3, r3, #1
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00f      	beq.n	8004a6a <oaStateMachine+0x57a>
                                        /* queue. The alternative is to use a backup buffer while the Rx queue is empty */
                                        /* and switch back to parsing chunks from spiRxBuf when new buffers are added   */
                                        /* to the Rx queue. There are hooks for this in the code but the switching      */
                                        /* between oaRxBackupBuf and spiRxBuf is not implemented yet. Perhaps an option */
                                        /* to use one option or the other can be useful to serve different use cases.   */
			                            hDevice->oaRxUseBackupBuf = false;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
			                            hDevice->oaRxBufChunkStart = chunkStart;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a58:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
                                        hDevice->oaRxBufTrxSize = hDevice->oaTrxSize;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8004a68:	e21a      	b.n	8004ea0 <oaStateMachine+0x9b0>
			                        }
			                        else
			                        {
                        				hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->prio = prio;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004a80:	741a      	strb	r2, [r3, #16]
#if defined(ADIN2111)
                        				hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->port = vs & 0x1;
#endif
                        				pRxBuf = hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->pBuf;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4413      	add	r3, r2
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	66bb      	str	r3, [r7, #104]	; 0x68

                                        hDevice->oaRxCurBufByteOffset = 0;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                    					/* SWO is multiple of words */
                                        byteOffset = oaRxFooter.SWO * 4;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f3c3 4303 	ubfx	r3, r3, #16, #4
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                        if (oaRxFooter.RTSA)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80d5 	beq.w	8004c66 <oaStateMachine+0x776>
	                                    {
                                            /* Store the parity in case the timestamp is split across multiple chunks. */
                                            /* RTSP is only valid for the chunk in which RTSA is 1. */
                                            hDevice->oaTimestampParity = oaRxFooter.RTSP;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
                                            if (hDevice->timestampFormat == ADI_MAC_TS_FORMAT_64B_1588)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 30f3 	ldrb.w	r3, [r3, #243]	; 0xf3
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d17c      	bne.n	8004bd0 <oaStateMachine+0x6e0>
                                            {
                                                memcpy(&mem32, &spiRxBuf[chunkStart + byteOffset], 4);
 8004ad6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ade:	4413      	add	r3, r2
 8004ae0:	4a18      	ldr	r2, [pc, #96]	; (8004b44 <oaStateMachine+0x654>)
 8004ae2:	4413      	add	r3, r2
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	623b      	str	r3, [r7, #32]
                                                hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampExt = HTON32(mem32);
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	440b      	add	r3, r1
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	643a      	str	r2, [r7, #64]	; 0x40
 8004afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b00:	ba12      	rev	r2, r2
 8004b02:	621a      	str	r2, [r3, #32]
                                                memcpy(&timestampBytes[4], &spiRxBuf[chunkStart + byteOffset], 4);
 8004b04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4a0d      	ldr	r2, [pc, #52]	; (8004b44 <oaStateMachine+0x654>)
 8004b10:	4413      	add	r3, r2
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	617b      	str	r3, [r7, #20]
                                                byteOffset += 4;
 8004b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                                /* If there is not room in the chunk for the lower 32b of the timestamp, those bits will be in the next chunk. */
                                                if ((chunkStart + byteOffset + 4) > (chunkStart + chunkSize))
 8004b20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b28:	4413      	add	r3, r2
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8004b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b32:	440b      	add	r3, r1
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d907      	bls.n	8004b48 <oaStateMachine+0x658>
                                                {
                                                    hDevice->oaTimestampSplit = true;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
 8004b40:	e09c      	b.n	8004c7c <oaStateMachine+0x78c>
 8004b42:	bf00      	nop
 8004b44:	200001bc 	.word	0x200001bc
                                                }
                                                else
                                                {
                                                    /* The lower 32b of the timestamp are in the same chunk. */
                                                    hDevice->oaTimestampSplit = false;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
                                                    memcpy(&mem32, &spiRxBuf[chunkStart + byteOffset], 4);
 8004b50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b58:	4413      	add	r3, r2
 8004b5a:	4a9a      	ldr	r2, [pc, #616]	; (8004dc4 <oaStateMachine+0x8d4>)
 8004b5c:	4413      	add	r3, r2
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	623b      	str	r3, [r7, #32]
                                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestamp = HTON32(mem32);
 8004b62:	6a3a      	ldr	r2, [r7, #32]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	440b      	add	r3, r1
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b7a:	ba12      	rev	r2, r2
 8004b7c:	61da      	str	r2, [r3, #28]
                                                    memcpy(&timestampBytes[0], &spiRxBuf[chunkStart + byteOffset], 4);
 8004b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b86:	4413      	add	r3, r2
 8004b88:	4a8e      	ldr	r2, [pc, #568]	; (8004dc4 <oaStateMachine+0x8d4>)
 8004b8a:	4413      	add	r3, r2
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	613b      	str	r3, [r7, #16]
                                                    byteOffset += 4;
 8004b90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b94:	3304      	adds	r3, #4
 8004b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                                    /* MAC_CalculateParity returns 1 if timestampBytes has odd parity, and oaTimestampParity is 0 if timestampBytes has odd parity. */
                                                    hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampValid = (MAC_CalculateParity(timestampBytes, 8) != hDevice->oaTimestampParity);
 8004b9a:	f107 0310 	add.w	r3, r7, #16
 8004b9e:	2108      	movs	r1, #8
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe f8a3 	bl	8002cec <MAC_CalculateParity>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	440b      	add	r3, r1
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4290      	cmp	r0, r2
 8004bc4:	bf14      	ite	ne
 8004bc6:	2201      	movne	r2, #1
 8004bc8:	2200      	moveq	r2, #0
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	765a      	strb	r2, [r3, #25]
 8004bce:	e055      	b.n	8004c7c <oaStateMachine+0x78c>
                                                }
                                            }
                                            else
                                            {
                                                /* Start of the frame is at a multiple of 4 bytes, so a 32-bit timestamp will always be contained in the same chunk. */
                                                hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampExt = 0;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	621a      	str	r2, [r3, #32]
                                                memcpy(&mem32, &spiRxBuf[chunkStart + byteOffset], 4);
 8004be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bee:	4413      	add	r3, r2
 8004bf0:	4a74      	ldr	r2, [pc, #464]	; (8004dc4 <oaStateMachine+0x8d4>)
 8004bf2:	4413      	add	r3, r2
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	623b      	str	r3, [r7, #32]
                                                hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestamp = HTON32(mem32);
 8004bf8:	6a3a      	ldr	r2, [r7, #32]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfe:	6819      	ldr	r1, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	440b      	add	r3, r1
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c10:	ba12      	rev	r2, r2
 8004c12:	61da      	str	r2, [r3, #28]
                                                memcpy(&timestampBytes[0], &spiRxBuf[chunkStart + byteOffset], 4);
 8004c14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c1c:	4413      	add	r3, r2
 8004c1e:	4a69      	ldr	r2, [pc, #420]	; (8004dc4 <oaStateMachine+0x8d4>)
 8004c20:	4413      	add	r3, r2
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	613b      	str	r3, [r7, #16]
                                                byteOffset += 4;
 8004c26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                                                /* MAC_CalculateParity returns 1 if timestampBytes has odd parity, and oaTimestampParity is 0 if timestampBytes has odd parity. */
                                                hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampValid = (MAC_CalculateParity(timestampBytes, 4) != hDevice->oaTimestampParity);
 8004c30:	f107 0310 	add.w	r3, r7, #16
 8004c34:	2104      	movs	r1, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe f858 	bl	8002cec <MAC_CalculateParity>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	440b      	add	r3, r1
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4290      	cmp	r0, r2
 8004c5a:	bf14      	ite	ne
 8004c5c:	2201      	movne	r2, #1
 8004c5e:	2200      	moveq	r2, #0
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	765a      	strb	r2, [r3, #25]
 8004c64:	e00a      	b.n	8004c7c <oaStateMachine+0x78c>
                                            }
	                                    }
	                                    else
	                                    {
	                                        hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->timestampValid = false;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	765a      	strb	r2, [r3, #25]
	                                    }

	                                    if (chunkSize - byteOffset)
 8004c7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d019      	beq.n	8004cba <oaStateMachine+0x7ca>
	                                    {
	                                        /* Rx buffer minimum size is greater than the maximum chunk size, no buffer overflow. */
	                                        memcpy(&pRxBuf[0], &spiRxBuf[chunkStart + byteOffset], chunkSize - byteOffset);
 8004c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c8e:	4413      	add	r3, r2
 8004c90:	4a4c      	ldr	r2, [pc, #304]	; (8004dc4 <oaStateMachine+0x8d4>)
 8004c92:	1899      	adds	r1, r3, r2
 8004c94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004ca0:	f014 fd7f 	bl	80197a2 <memcpy>
	                                        hDevice->oaRxCurBufByteOffset += chunkSize - byteOffset;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004caa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004cac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cb0:	1acb      	subs	r3, r1, r3
 8004cb2:	441a      	add	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	                                    }

                                        /* Special case: full frame inside a single chunk. */
                                        uint32_t ebo = oaRxFooter.EBO;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	f3c3 2305 	ubfx	r3, r3, #8, #6
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	653b      	str	r3, [r7, #80]	; 0x50
                                        uint32_t sbo = oaRxFooter.SWO * 4;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	f3c3 4303 	ubfx	r3, r3, #16, #4
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	64fb      	str	r3, [r7, #76]	; 0x4c
                                        if (oaRxFooter.EV && (ebo > sbo))
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d06d      	beq.n	8004db8 <oaStateMachine+0x8c8>
 8004cdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d969      	bls.n	8004db8 <oaStateMachine+0x8c8>
                                        {
                                            hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize = ebo + 1 - sbo - FCS_SIZE;
 8004ce4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	1ad2      	subs	r2, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cee:	6819      	ldr	r1, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	440b      	add	r3, r1
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	3a03      	subs	r2, #3
 8004cfe:	609a      	str	r2, [r3, #8]

                                            if (hDevice->fcsCheckEn)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d026      	beq.n	8004d58 <oaStateMachine+0x868>
                                            {
                                                uint32_t actualFcs;
                                                memcpy(&actualFcs, &pRxBuf[hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize], FCS_SIZE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d20:	4413      	add	r3, r2
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60bb      	str	r3, [r7, #8]
                                                expectedFcs = ADI_HAL_FCS_CALCULATE(hDevice->adinDevice, pRxBuf,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004d3e:	f001 faa7 	bl	8006290 <HAL_FcsCalculate>
 8004d42:	6738      	str	r0, [r7, #112]	; 0x70
                                                                hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->trxSize);

                                                if (expectedFcs != actualFcs)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d005      	beq.n	8004d58 <oaStateMachine+0x868>
                                                {
                                                    Event |= ADI_MAC_CALLBACK_STATUS_FCS_ERROR;
 8004d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                                }
                                            }
                                            tail = hDevice->pRxQueue->tail;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
                                            queueRemove(hDevice->pRxQueue);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fc f908 	bl	8000f7a <queueRemove>
                                            if (hDevice->cbFunc[ADI_MAC_EVT_DYN_TBL_UPDATE] != NULL)
                                            {
                                                hDevice->cbFunc[ADI_MAC_EVT_DYN_TBL_UPDATE](hDevice->adinDevice, Event, hDevice->pRxQueue->pEntries[tail].pBufDesc);
                                            }
#endif
                                            if (hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4413      	add	r3, r2
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d013      	beq.n	8004da6 <oaStateMachine+0x8b6>
                                            {
                                                hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc(hDevice->adinDevice, Event, hDevice->pRxQueue->pEntries[tail].pBufDesc);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4413      	add	r3, r2
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004d96:	6811      	ldr	r1, [r2, #0]
 8004d98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d9a:	00d2      	lsls	r2, r2, #3
 8004d9c:	440a      	add	r2, r1
 8004d9e:	6852      	ldr	r2, [r2, #4]
 8004da0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004da4:	4798      	blx	r3
                                            }

                                            hDevice->oaRxCurBufByteOffset = 0;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

                                            hDevice->oaValidFlag = ADI_MAC_OA_VALID_FLAG_END;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8004db6:	e073      	b.n	8004ea0 <oaStateMachine+0x9b0>
                                        }
                                        else
                                        {
                                            hDevice->oaValidFlag = ADI_MAC_OA_VALID_FLAG_START;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8004dc0:	e06e      	b.n	8004ea0 <oaStateMachine+0x9b0>
 8004dc2:	bf00      	nop
 8004dc4:	200001bc 	.word	0x200001bc
                                        }
                                    }
                                }
                                else
                                {
                                    if (!oaRxFooter.EV && (hDevice->oaValidFlag == ADI_MAC_OA_VALID_FLAG_START))
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d165      	bne.n	8004ea0 <oaStateMachine+0x9b0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d160      	bne.n	8004ea0 <oaStateMachine+0x9b0>
                                    {
                                        if (hDevice->oaRxCurBufByteOffset + chunkSize > hDevice->pRxQueue->pEntries[hDevice->pRxQueue->tail].pBufDesc->bufSize)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de6:	441a      	add	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dec:	6819      	ldr	r1, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	440b      	add	r3, r1
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d931      	bls.n	8004e64 <oaStateMachine+0x974>
                                        {
                                            /* Rx buffer too small for the incoming frame, notify the user. */
                                            /* At this point the current frame reception finishes and callback is executed. */
                                            Event |= ADI_MAC_CALLBACK_STATUS_RX_BUF_OVF;
 8004e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e04:	f043 0302 	orr.w	r3, r3, #2
 8004e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                            tail = hDevice->pRxQueue->tail;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	65fb      	str	r3, [r7, #92]	; 0x5c
                                            queueRemove(hDevice->pRxQueue);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fc f8ae 	bl	8000f7a <queueRemove>

                                            if (hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d013      	beq.n	8004e5a <oaStateMachine+0x96a>
                                            {
                                                hDevice->pRxQueue->pEntries[tail].pBufDesc->cbFunc(hDevice->adinDevice, Event, hDevice->pRxQueue->pEntries[tail].pBufDesc);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004e4a:	6811      	ldr	r1, [r2, #0]
 8004e4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e4e:	00d2      	lsls	r2, r2, #3
 8004e50:	440a      	add	r2, r1
 8004e52:	6852      	ldr	r2, [r2, #4]
 8004e54:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004e58:	4798      	blx	r3
                                            }

                                            hDevice->oaRxCurBufByteOffset = 0;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8004e62:	e01d      	b.n	8004ea0 <oaStateMachine+0x9b0>
                                        }
                                        else
                                        {
                                            memcpy(&pRxBuf[hDevice->oaRxCurBufByteOffset], &spiRxBuf[chunkStart + byteOffset], chunkSize - byteOffset);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004e6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e6c:	18d0      	adds	r0, r2, r3
 8004e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e76:	4413      	add	r3, r2
 8004e78:	4aa8      	ldr	r2, [pc, #672]	; (800511c <oaStateMachine+0xc2c>)
 8004e7a:	1899      	adds	r1, r3, r2
 8004e7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	f014 fc8c 	bl	80197a2 <memcpy>
                                            hDevice->oaRxCurBufByteOffset += chunkSize - byteOffset;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8004e90:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e96:	1acb      	subs	r3, r1, r3
 8004e98:	441a      	add	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
                                        }
                                    }
                                }
                            }

                            memcpy((void *)&oaTxHeader.VALUE32, &spiTxBuf[chunkStart], 4);
 8004ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea4:	4a9e      	ldr	r2, [pc, #632]	; (8005120 <oaStateMachine+0xc30>)
 8004ea6:	4413      	add	r3, r2
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
                            oaTxHeader.VALUE32 = HTON32(oaTxHeader.VALUE32);
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb2:	ba1b      	rev	r3, r3
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28

                            if (oaTxHeader.EV)
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d034      	beq.n	8004f2c <oaStateMachine+0xa3c>
                            {
                                tail = hDevice->txQueue.tail;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
                                queueRemove(&hDevice->txQueue);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	336c      	adds	r3, #108	; 0x6c
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fc f854 	bl	8000f7a <queueRemove>

                                /* Decrement the reference count, and call the callback function only if the reference  */
                                /* count is 0. This ensures that if the intent was to send the buffer to both ports, it */
                                /* will be returned to the buffer pool only after sending to both ports has completed.  */
                                hDevice->txQueue.pEntries[tail].pBufDesc->refCount--;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ee0:	3a01      	subs	r2, #1
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24
                                if (hDevice->txQueue.pEntries[tail].pBufDesc->cbFunc && (!hDevice->txQueue.pEntries[tail].pBufDesc->refCount))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d01a      	beq.n	8004f2c <oaStateMachine+0xa3c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4413      	add	r3, r2
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d111      	bne.n	8004f2c <oaStateMachine+0xa3c>
                                {
                                    hDevice->txQueue.pEntries[tail].pBufDesc->cbFunc(hDevice->adinDevice, Event, hDevice->txQueue.pEntries[tail].pBufDesc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 8004f1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f20:	00d2      	lsls	r2, r2, #3
 8004f22:	440a      	add	r2, r1
 8004f24:	6852      	ldr	r2, [r2, #4]
 8004f26:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004f2a:	4798      	blx	r3
            for (uint32_t chunkStart = 0; chunkStart < hDevice->oaTrxSize; chunkStart += ADI_SPI_HEADER_SIZE + chunkSize)
 8004f2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f32:	4413      	add	r3, r2
 8004f34:	3304      	adds	r3, #4
 8004f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8004f40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f44:	429a      	cmp	r2, r3
 8004f46:	f4ff aba7 	bcc.w	8004698 <oaStateMachine+0x1a8>
                            }
                        }
                    }
                }
            }
            if (exst || !oaRxFooter.SYNC)
 8004f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <oaStateMachine+0xa6e>
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d12b      	bne.n	8004fb6 <oaStateMachine+0xac6>
            {

                /* Read status registers */
                len = 2;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c

                result = oaCtrlSetup(&hDevice->ctrlTxBuf[0], ADI_MAC_SPI_READ, ADDR_MAC_STATUS0, hDevice->pRegData, &len);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 8004f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	2208      	movs	r2, #8
 8004f78:	2100      	movs	r1, #0
 8004f7a:	f000 fda0 	bl	8005abe <oaCtrlSetup>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

                useDma = (len >= MIN_SIZE_FOR_DMA);
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	bf8c      	ite	hi
 8004f8a:	2301      	movhi	r3, #1
 8004f8c:	2300      	movls	r3, #0
 8004f8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                hDevice->state = ADI_MAC_STATE_DATA_READ_STATUS;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	220a      	movs	r2, #10
 8004f96:	701a      	strb	r2, [r3, #0]
                /* Rx/Tx are the same in OA SPI, reusing the state names from   */
                /* generic SPI. Different state names also help with debugging. */
                hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	705a      	strb	r2, [r3, #1]

                ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, &hDevice->ctrlTxBuf[0], &hDevice->ctrlRxBuf[0], len, useDma);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004fb0:	f001 fb54 	bl	800665c <HAL_SpiReadWrite>
 8004fb4:	e051      	b.n	800505a <oaStateMachine+0xb6a>
            }
            else
            {
                if ((!queueIsEmpty(&hDevice->txQueue) && hDevice->oaTxc) || (!queueIsEmpty(hDevice->pRxQueue) && hDevice->oaRca))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	336c      	adds	r3, #108	; 0x6c
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fb ffab 	bl	8000f16 <queueIsEmpty>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f083 0301 	eor.w	r3, r3, #1
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d004      	beq.n	8004fd6 <oaStateMachine+0xae6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <oaStateMachine+0xb06>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb ff9b 	bl	8000f16 <queueIsEmpty>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f083 0301 	eor.w	r3, r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d023      	beq.n	8005034 <oaStateMachine+0xb44>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01e      	beq.n	8005034 <oaStateMachine+0xb44>
                {
                    result = oaSpiProcess(hDevice);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fb40 	bl	800567c <oaSpiProcess>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

                    /* Determine if it's worth using DMA based on the transaction size. */
                    useDma = (hDevice->oaTrxSize >= MIN_SIZE_FOR_DMA);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005008:	2b0f      	cmp	r3, #15
 800500a:	bf8c      	ite	hi
 800500c:	2301      	movhi	r3, #1
 800500e:	2300      	movls	r3, #0
 8005010:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

                    hDevice->state = ADI_MAC_STATE_DATA_END;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2208      	movs	r2, #8
 8005018:	701a      	strb	r2, [r3, #0]
                    /* Rx/Tx are the same in OA SPI, reusing the state names from   */
                    /* generic SPI. Different state names also help with debugging. */
                    hDevice->spiState = ADI_MAC_SPI_STATE_RX_FRAME;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	705a      	strb	r2, [r3, #1]

                    /* Platform dependent function*/
                    ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, spiTxBuf, spiRxBuf, hDevice->oaTrxSize, useDma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8005026:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800502a:	493c      	ldr	r1, [pc, #240]	; (800511c <oaStateMachine+0xc2c>)
 800502c:	483c      	ldr	r0, [pc, #240]	; (8005120 <oaStateMachine+0xc30>)
 800502e:	f001 fb15 	bl	800665c <HAL_SpiReadWrite>
 8005032:	e012      	b.n	800505a <oaStateMachine+0xb6a>

                }
                else
                {
                    hDevice->state = ADI_MAC_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	701a      	strb	r2, [r3, #0]
                    hDevice->spiState = ADI_MAC_SPI_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	705a      	strb	r2, [r3, #1]

                    if (!hDevice->pendingCtrl)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f083 0301 	eor.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 817b 	beq.w	800534a <oaStateMachine+0xe5a>
                    {
                        ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8005054:	f001 fae5 	bl	8006622 <HAL_EnableIrq>
                    }
                }
            }

            break;
 8005058:	e177      	b.n	800534a <oaStateMachine+0xe5a>
 800505a:	e176      	b.n	800534a <oaStateMachine+0xe5a>

        case ADI_MAC_STATE_IRQ_START:
            /* Single data chunk is response to an IRQ */
            oaTxHeader.VALUE32 = 0x00000000;
 800505c:	2300      	movs	r3, #0
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
            oaTxHeader.DNC = 1;
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
            oaTxHeader.NORX = 1;
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
            oaTxHeader.P = 1;
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28
            val32 = oaTxHeader.VALUE32 >> 1;
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            for (uint32_t i = 0; i < 31; i++)
 8005080:	2300      	movs	r3, #0
 8005082:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005084:	e01b      	b.n	80050be <oaStateMachine+0xbce>
            {
                oaTxHeader.P = oaTxHeader.P ^ (val32 & 0x1);
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	4053      	eors	r3, r2
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	f362 0300 	bfi	r3, r2, #0, #1
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
                val32 >>= 1;
 80050ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            for (uint32_t i = 0; i < 31; i++)
 80050b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ba:	3301      	adds	r3, #1
 80050bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c0:	2b1e      	cmp	r3, #30
 80050c2:	d9e0      	bls.n	8005086 <oaStateMachine+0xb96>
            }

            mem32 = HTON32(oaTxHeader.VALUE32);
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	ba1b      	rev	r3, r3
 80050cc:	623b      	str	r3, [r7, #32]
 80050ce:	6a3b      	ldr	r3, [r7, #32]
            memcpy(&spiTxBuf[0], &mem32, 4);
 80050d0:	4a13      	ldr	r2, [pc, #76]	; (8005120 <oaStateMachine+0xc30>)
 80050d2:	6013      	str	r3, [r2, #0]

            hDevice->oaTrxSize = ADI_SPI_HEADER_SIZE + (1 << hDevice->oaCps);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80050da:	2201      	movs	r2, #1
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	3304      	adds	r3, #4
 80050e2:	461a      	mov	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

            /* Determine if it's worth using DMA based on the transaction size. */
            useDma = (hDevice->oaTrxSize >= MIN_SIZE_FOR_DMA);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80050f0:	2b0f      	cmp	r3, #15
 80050f2:	bf8c      	ite	hi
 80050f4:	2301      	movhi	r3, #1
 80050f6:	2300      	movls	r3, #0
 80050f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

            hDevice->state = ADI_MAC_STATE_DATA_END;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2208      	movs	r2, #8
 8005100:	701a      	strb	r2, [r3, #0]
            /* Rx/Tx are the same in OA SPI, reusing the state names from   */
            /* generic SPI. Different state names also help with debugging. */
            hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	705a      	strb	r2, [r3, #1]

            /* Platform dependent function*/
            ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, spiTxBuf, spiRxBuf, hDevice->oaTrxSize, useDma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800510e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005112:	4902      	ldr	r1, [pc, #8]	; (800511c <oaStateMachine+0xc2c>)
 8005114:	4802      	ldr	r0, [pc, #8]	; (8005120 <oaStateMachine+0xc30>)
 8005116:	f001 faa1 	bl	800665c <HAL_SpiReadWrite>

            break;
 800511a:	e119      	b.n	8005350 <oaStateMachine+0xe60>
 800511c:	200001bc 	.word	0x200001bc
 8005120:	2000098c 	.word	0x2000098c

        case ADI_MAC_STATE_DATA_READ_STATUS:

            result = oaCtrlCmdReadData((uint32_t *)&hDevice->statusRegisters.status0, &hDevice->ctrlRxBuf[2 * ADI_SPI_HEADER_SIZE], 2);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8005130:	2202      	movs	r2, #2
 8005132:	4619      	mov	r1, r3
 8005134:	f000 fd51 	bl	8005bda <oaCtrlCmdReadData>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

            hDevice->statusRegisters.status0Masked = hDevice->statusRegisters.status0 & ~hDevice->irqMask0;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	43db      	mvns	r3, r3
 800514a:	401a      	ands	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
            hDevice->statusRegisters.status1Masked = hDevice->statusRegisters.status1 & ~hDevice->irqMask1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	43db      	mvns	r3, r3
 800515e:	401a      	ands	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
            hDevice->statusRegisters.p1StatusMasked = ADI_MAC_PHY_STATUS_INIT_VAL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f06f 2280 	mvn.w	r2, #2147516416	; 0x80008000
 800516c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            hDevice->statusRegisters.p1Status = ADI_MAC_PHY_STATUS_INIT_VAL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f06f 2280 	mvn.w	r2, #2147516416	; 0x80008000
 8005176:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

#if defined(ADIN2111)
            if ((hDevice->statusRegisters.status0Masked & BITM_MAC_STATUS0_PHYINT) || (hDevice->statusRegisters.status1Masked & BITM_MAC_STATUS1_P2_PHYINT))
#else
            if (hDevice->statusRegisters.status0Masked & BITM_MAC_STATUS0_PHYINT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d012      	beq.n	80051ae <oaStateMachine+0xcbe>
#endif
            {
                /* Read PHY interrupt status registers */
                /* PHY register reads are as implemented in MAC_PhyRead(). */
                uint32_t prtad;
                if (hDevice->statusRegisters.status0Masked & BITM_MAC_STATUS0_PHYINT)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <oaStateMachine+0xcac>
                {
                    prtad = 1;
 8005196:	2301      	movs	r3, #1
 8005198:	67bb      	str	r3, [r7, #120]	; 0x78
 800519a:	e001      	b.n	80051a0 <oaStateMachine+0xcb0>
                }
                else
                {
                    prtad = 2;
 800519c:	2302      	movs	r3, #2
 800519e:	67bb      	str	r3, [r7, #120]	; 0x78
                }
                oaPhyRegReadStart(hDevice, &mdioCmd, prtad, ADDR_CRSM_IRQ_STATUS);
 80051a0:	4b6e      	ldr	r3, [pc, #440]	; (800535c <oaStateMachine+0xe6c>)
 80051a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051a4:	496e      	ldr	r1, [pc, #440]	; (8005360 <oaStateMachine+0xe70>)
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f8e0 	bl	800536c <oaPhyRegReadStart>
            else
            {
                oaSpiIntHandle(hDevice);
            }

            break;
 80051ac:	e0d0      	b.n	8005350 <oaStateMachine+0xe60>
                oaSpiIntHandle(hDevice);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f9a5 	bl	80054fe <oaSpiIntHandle>
            break;
 80051b4:	e0cc      	b.n	8005350 <oaStateMachine+0xe60>

        case ADI_MAC_STATE_DATA_READ_PHY_REGISTER:

            /* Check header vs. echoed header for errors */
            memcpy(&cHdr, &hDevice->ctrlTxBuf[0], 4);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	61fb      	str	r3, [r7, #28]
            memcpy(&eHdr, &hDevice->ctrlRxBuf[ADI_SPI_HEADER_SIZE], 4);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	61bb      	str	r3, [r7, #24]

            if (cHdr != eHdr)
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d006      	beq.n	80051e0 <oaStateMachine+0xcf0>
            {
                hDevice->spiErr = 1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	605a      	str	r2, [r3, #4]
                oaSpiIntHandle(hDevice);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f990 	bl	80054fe <oaSpiIntHandle>

                    }
                }
            }

            break;
 80051de:	e0b6      	b.n	800534e <oaStateMachine+0xe5e>
                hDevice->spiErr = 0;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	605a      	str	r2, [r3, #4]
                if (hDevice->regAddr == ADDR_MAC_MDIOACC_0_)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d108      	bne.n	8005202 <oaStateMachine+0xd12>
                    hDevice->wnr = ADI_MAC_SPI_WRITE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
                    oaPhyRegReadStep(hDevice, &mdioCmd);
 80051f8:	4959      	ldr	r1, [pc, #356]	; (8005360 <oaStateMachine+0xe70>)
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f929 	bl	8005452 <oaPhyRegReadStep>
            break;
 8005200:	e0a5      	b.n	800534e <oaStateMachine+0xe5e>
                    if (hDevice->wnr == ADI_MAC_SPI_WRITE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005208:	2b01      	cmp	r3, #1
 800520a:	d108      	bne.n	800521e <oaStateMachine+0xd2e>
                        hDevice->wnr = ADI_MAC_SPI_READ;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
                        oaPhyRegReadStep(hDevice, &mdioCmd);
 8005214:	4952      	ldr	r1, [pc, #328]	; (8005360 <oaStateMachine+0xe70>)
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f91b 	bl	8005452 <oaPhyRegReadStep>
            break;
 800521c:	e097      	b.n	800534e <oaStateMachine+0xe5e>
                        result = oaCtrlCmdReadData((uint32_t *)hDevice->pRegData, &hDevice->ctrlRxBuf[2 * ADI_SPI_HEADER_SIZE], hDevice->cnt);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 01a8 	ldr.w	r0, [r3, #424]	; 0x1a8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005230:	461a      	mov	r2, r3
 8005232:	f000 fcd2 	bl	8005bda <oaCtrlCmdReadData>
 8005236:	4603      	mov	r3, r0
 8005238:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                        if (*hDevice->pRegData & BITM_MAC_MDIOACC_N__MDIO_TRDONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	da6c      	bge.n	8005322 <oaStateMachine+0xe32>
                            if ((hDevice->statusRegisters.status0Masked & BITM_MAC_STATUS0_PHYINT) &&
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800524e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d07b      	beq.n	800534e <oaStateMachine+0xe5e>
                                ((hDevice->statusRegisters.p1Status & 0xFFFF0000) == (ADI_MAC_PHY_STATUS_INIT_VAL & 0xFFFF0000)))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	041b      	lsls	r3, r3, #16
                            if ((hDevice->statusRegisters.status0Masked & BITM_MAC_STATUS0_PHYINT) &&
 8005260:	4a40      	ldr	r2, [pc, #256]	; (8005364 <oaStateMachine+0xe74>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d173      	bne.n	800534e <oaStateMachine+0xe5e>
                                if ((hDevice->statusRegisters.p1StatusMasked & 0x0000FFFF) == (ADI_MAC_PHY_STATUS_INIT_VAL & 0x0000FFFF))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800526c:	b29b      	uxth	r3, r3
 800526e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005272:	4293      	cmp	r3, r2
 8005274:	d131      	bne.n	80052da <oaStateMachine+0xdea>
                                    hDevice->statusRegisters.p1Status &= 0xFFFF0000;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	041b      	lsls	r3, r3, #16
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
                                    hDevice->statusRegisters.p1Status |= (*hDevice->pRegData & 0x0000FFFF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                    hDevice->statusRegisters.p1StatusMasked &= 0xFFFF0000;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80052a4:	0c1b      	lsrs	r3, r3, #16
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
                                    hDevice->statusRegisters.p1StatusMasked |= (hDevice->statusRegisters.p1Status & hDevice->phyIrqMask & 0x0000FFFF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80052c0:	400b      	ands	r3, r1
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                                    oaPhyRegReadStart(hDevice, &mdioCmd, 1, ADDR_PHY_SUBSYS_IRQ_STATUS);
 80052cc:	4b26      	ldr	r3, [pc, #152]	; (8005368 <oaStateMachine+0xe78>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	4923      	ldr	r1, [pc, #140]	; (8005360 <oaStateMachine+0xe70>)
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f84a 	bl	800536c <oaPhyRegReadStart>
            break;
 80052d8:	e039      	b.n	800534e <oaStateMachine+0xe5e>
                                    hDevice->statusRegisters.p1Status &= 0x0000FFFF;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                    hDevice->statusRegisters.p1Status |= ((*hDevice->pRegData << 16) & 0xFFFF0000);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                    hDevice->statusRegisters.p1StatusMasked &= 0x0000FFFF;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005306:	b29a      	uxth	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                                    hDevice->statusRegisters.p1StatusMasked |= ((hDevice->statusRegisters.p1Status & hDevice->phyIrqMask & 0xFFFF0000) << 16);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                                    oaSpiIntHandle(hDevice);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f8ef 	bl	80054fe <oaSpiIntHandle>
            break;
 8005320:	e015      	b.n	800534e <oaStateMachine+0xe5e>
                            hDevice->wnr = ADI_MAC_SPI_READ;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
                            oaPhyRegReadStep(hDevice, &mdioCmd);
 800532a:	490d      	ldr	r1, [pc, #52]	; (8005360 <oaStateMachine+0xe70>)
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f890 	bl	8005452 <oaPhyRegReadStep>
            break;
 8005332:	e00c      	b.n	800534e <oaStateMachine+0xe5e>

        default:
            hDevice->state = ADI_MAC_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	701a      	strb	r2, [r3, #0]
            hDevice->spiState = ADI_MAC_SPI_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	705a      	strb	r2, [r3, #1]

            ADI_HAL_ENABLE_IRQ(hDevice->adinDevice);
 8005340:	f001 f96f 	bl	8006622 <HAL_EnableIrq>
            break;
 8005344:	e004      	b.n	8005350 <oaStateMachine+0xe60>
            break;
 8005346:	bf00      	nop
 8005348:	e002      	b.n	8005350 <oaStateMachine+0xe60>
            break;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <oaStateMachine+0xe60>
            break;
 800534e:	bf00      	nop
    }

    return result;
 8005350:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8005354:	4618      	mov	r0, r3
 8005356:	379c      	adds	r7, #156	; 0x9c
 8005358:	46bd      	mov	sp, r7
 800535a:	bd90      	pop	{r4, r7, pc}
 800535c:	001e0010 	.word	0x001e0010
 8005360:	2000115c 	.word	0x2000115c
 8005364:	7fff0000 	.word	0x7fff0000
 8005368:	001f0011 	.word	0x001f0011

0800536c <oaPhyRegReadStart>:

adi_eth_Result_e oaPhyRegReadStart(adi_mac_Device_t *hDevice, ADI_MAC_MDIOACC_0__t *mdioCmd, uint32_t prtad, uint32_t regAddr)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af02      	add	r7, sp, #8
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
    adi_eth_Result_e        result;
    uint32_t                len;
    bool                    useDma;

    mdioCmd->VALUE32 = 0;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
    mdioCmd->MDIO_DEVAD = DEVTYPE(regAddr);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	0c1b      	lsrs	r3, r3, #16
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	b2d9      	uxtb	r1, r3
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	7893      	ldrb	r3, [r2, #2]
 800538e:	f361 0304 	bfi	r3, r1, #0, #5
 8005392:	7093      	strb	r3, [r2, #2]
    mdioCmd->MDIO_ST = ENUM_MAC_MDIOACC_N__MDIO_ST_CLAUSE45;
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	78d3      	ldrb	r3, [r2, #3]
 8005398:	f36f 1305 	bfc	r3, #4, #2
 800539c:	70d3      	strb	r3, [r2, #3]
    mdioCmd->MDIO_PRTAD = prtad;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	b2d9      	uxtb	r1, r3
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	8853      	ldrh	r3, [r2, #2]
 80053aa:	f361 1349 	bfi	r3, r1, #5, #5
 80053ae:	8053      	strh	r3, [r2, #2]
    mdioCmd->MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_ADDR;
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	78d3      	ldrb	r3, [r2, #3]
 80053b4:	f36f 0383 	bfc	r3, #2, #2
 80053b8:	70d3      	strb	r3, [r2, #3]
    mdioCmd->MDIO_DATA = REGADDR(regAddr);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	801a      	strh	r2, [r3, #0]

    hDevice->wnr = ADI_MAC_SPI_WRITE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    hDevice->regAddr = ADDR_MAC_MDIOACC_0_;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hDevice->pRegData = &mdioCmd->VALUE32;
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    hDevice->cnt = 1;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

    len = hDevice->cnt;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80053e8:	613b      	str	r3, [r7, #16]
    result = oaCtrlSetup(&hDevice->ctrlTxBuf[0], hDevice->wnr, hDevice->regAddr, hDevice->pRegData, &len);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
 8005402:	f107 0310 	add.w	r3, r7, #16
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	4623      	mov	r3, r4
 800540a:	f000 fb58 	bl	8005abe <oaCtrlSetup>
 800540e:	4603      	mov	r3, r0
 8005410:	75fb      	strb	r3, [r7, #23]
    if (result != ADI_ETH_SUCCESS)
 8005412:	7dfb      	ldrb	r3, [r7, #23]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d116      	bne.n	8005446 <oaPhyRegReadStart+0xda>
    {
        goto end;
    }

    useDma = (len >= MIN_SIZE_FOR_DMA);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b0f      	cmp	r3, #15
 800541c:	bf8c      	ite	hi
 800541e:	2301      	movhi	r3, #1
 8005420:	2300      	movls	r3, #0
 8005422:	75bb      	strb	r3, [r7, #22]
    hDevice->state = ADI_MAC_STATE_DATA_READ_PHY_REGISTER;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	220b      	movs	r2, #11
 8005428:	701a      	strb	r2, [r3, #0]
    /* Rx/Tx are the same in OA SPI, reusing the state names from   */
    /* generic SPI. Different state names also help with debugging. */
    hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	705a      	strb	r2, [r3, #1]

    ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, &hDevice->ctrlTxBuf[0], &hDevice->ctrlRxBuf[0], len, useDma);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	7dbb      	ldrb	r3, [r7, #22]
 8005440:	f001 f90c 	bl	800665c <HAL_SpiReadWrite>
 8005444:	e000      	b.n	8005448 <oaPhyRegReadStart+0xdc>
        goto end;
 8005446:	bf00      	nop

end:
    return result;
 8005448:	7dfb      	ldrb	r3, [r7, #23]
}
 800544a:	4618      	mov	r0, r3
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	bd90      	pop	{r4, r7, pc}

08005452 <oaPhyRegReadStep>:

adi_eth_Result_e oaPhyRegReadStep(adi_mac_Device_t *hDevice, ADI_MAC_MDIOACC_0__t *mdioCmd)
{
 8005452:	b590      	push	{r4, r7, lr}
 8005454:	b087      	sub	sp, #28
 8005456:	af02      	add	r7, sp, #8
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e        result;
    uint32_t                len;
    bool                    useDma;

    mdioCmd->MDIO_OP = ENUM_MAC_MDIOACC_N__MDIO_OP_MD_RD;
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	78d3      	ldrb	r3, [r2, #3]
 8005460:	f043 030c 	orr.w	r3, r3, #12
 8005464:	70d3      	strb	r3, [r2, #3]
    mdioCmd->MDIO_DATA = 0;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2200      	movs	r2, #0
 800546a:	801a      	strh	r2, [r3, #0]
    mdioCmd->MDIO_TRDONE = 0;
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	78d3      	ldrb	r3, [r2, #3]
 8005470:	f36f 13c7 	bfc	r3, #7, #1
 8005474:	70d3      	strb	r3, [r2, #3]

    hDevice->regAddr = ADDR_MAC_MDIOACC_1_;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2221      	movs	r2, #33	; 0x21
 800547a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hDevice->pRegData = &mdioCmd->VALUE32;
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    hDevice->cnt = 1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

    len = hDevice->cnt;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005494:	60bb      	str	r3, [r7, #8]
    result = oaCtrlSetup(&hDevice->ctrlTxBuf[0], hDevice->wnr, hDevice->regAddr, hDevice->pRegData, &len);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
 80054ae:	f107 0308 	add.w	r3, r7, #8
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	4623      	mov	r3, r4
 80054b6:	f000 fb02 	bl	8005abe <oaCtrlSetup>
 80054ba:	4603      	mov	r3, r0
 80054bc:	73fb      	strb	r3, [r7, #15]
    if (result != ADI_ETH_SUCCESS)
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d116      	bne.n	80054f2 <oaPhyRegReadStep+0xa0>
    {
        goto end;
    }

    useDma = (len >= MIN_SIZE_FOR_DMA);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	bf8c      	ite	hi
 80054ca:	2301      	movhi	r3, #1
 80054cc:	2300      	movls	r3, #0
 80054ce:	73bb      	strb	r3, [r7, #14]
    hDevice->state = ADI_MAC_STATE_DATA_READ_PHY_REGISTER;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	220b      	movs	r2, #11
 80054d4:	701a      	strb	r2, [r3, #0]
    /* Rx/Tx are the same in OA SPI, reusing the state names from   */
    /* generic SPI. Different state names also help with debugging. */
    hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	705a      	strb	r2, [r3, #1]

    ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, &hDevice->ctrlTxBuf[0], &hDevice->ctrlRxBuf[0], len, useDma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	7bbb      	ldrb	r3, [r7, #14]
 80054ec:	f001 f8b6 	bl	800665c <HAL_SpiReadWrite>
 80054f0:	e000      	b.n	80054f4 <oaPhyRegReadStep+0xa2>
        goto end;
 80054f2:	bf00      	nop

end:
    return result;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd90      	pop	{r4, r7, pc}

080054fe <oaSpiIntHandle>:

adi_eth_Result_e oaSpiIntHandle(adi_mac_Device_t *hDevice)
{
 80054fe:	b590      	push	{r4, r7, lr}
 8005500:	b08b      	sub	sp, #44	; 0x2c
 8005502:	af02      	add	r7, sp, #8
 8005504:	6078      	str	r0, [r7, #4]
    ADI_MAC_STATUS0_t       status0Masked;
    ADI_MAC_STATUS1_t       status1Masked;
    adi_mac_TimestampRdy_t  timestampReady;
    bool                    useDma;

    status0Masked.VALUE32 = hDevice->statusRegisters.status0Masked;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800550c:	61bb      	str	r3, [r7, #24]
    status1Masked.VALUE32 = hDevice->statusRegisters.status1Masked;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005514:	617b      	str	r3, [r7, #20]

    /* Link status and link status change behave differently in ADIN2111 */
#if !defined(ADIN2111)
    if (status1Masked.LINK_CHANGE)
 8005516:	7d3b      	ldrb	r3, [r7, #20]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d013      	beq.n	800554a <oaSpiIntHandle+0x4c>
    {
        if (hDevice->cbFunc[ADI_MAC_EVT_LINK_CHANGE] != NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00f      	beq.n	800554a <oaSpiIntHandle+0x4c>
        {
            adi_eth_LinkStatus_e    linkStatus = (adi_eth_LinkStatus_e)(hDevice->statusRegisters.status1 & BITM_MAC_STATUS1_P1_LINK_STATUS);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	73fb      	strb	r3, [r7, #15]
            hDevice->cbFunc[ADI_MAC_EVT_LINK_CHANGE](hDevice->cbParam[ADI_MAC_EVT_LINK_CHANGE], ADI_MAC_EVT_LINK_CHANGE, (void *)&linkStatus);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	69d0      	ldr	r0, [r2, #28]
 8005542:	f107 020f 	add.w	r2, r7, #15
 8005546:	2100      	movs	r1, #0
 8005548:	4798      	blx	r3

    /* Captured timestamp availability flags are different in ADIN2111 */
#if defined(ADIN2111)
    if ((status0Masked.TTSCAA | status0Masked.TTSCAB | status0Masked.TTSCAC) | (status1Masked.P2_TTSCAA | status1Masked.P2_TTSCAB | status1Masked.P2_TTSCAC))
#else
    if (status0Masked.TTSCAA | status0Masked.TTSCAB | status0Masked.TTSCAC)
 800554a:	7e7b      	ldrb	r3, [r7, #25]
 800554c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005550:	b2da      	uxtb	r2, r3
 8005552:	7e7b      	ldrb	r3, [r7, #25]
 8005554:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005558:	b2db      	uxtb	r3, r3
 800555a:	4313      	orrs	r3, r2
 800555c:	b2da      	uxtb	r2, r3
 800555e:	7e7b      	ldrb	r3, [r7, #25]
 8005560:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	4313      	orrs	r3, r2
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d029      	beq.n	80055c2 <oaSpiIntHandle+0xc4>
#endif
    {
        if (hDevice->cbFunc[ADI_MAC_EVT_TIMESTAMP_RDY] != NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d025      	beq.n	80055c2 <oaSpiIntHandle+0xc4>
            timestampReady.p1TimestampReadyC = (bool)status0Masked.TTSCAC;
            timestampReady.p2TimestampReadyA = (bool)status1Masked.P2_TTSCAA;
            timestampReady.p2TimestampReadyB = (bool)status1Masked.P2_TTSCAB;
            timestampReady.p2TimestampReadyC = (bool)status1Masked.P2_TTSCAC;
#else
            timestampReady.timestampReadyA = (bool)status0Masked.TTSCAA;
 8005576:	7e7b      	ldrb	r3, [r7, #25]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	743b      	strb	r3, [r7, #16]
            timestampReady.timestampReadyB = (bool)status0Masked.TTSCAB;
 800558a:	7e7b      	ldrb	r3, [r7, #25]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	bf14      	ite	ne
 8005596:	2301      	movne	r3, #1
 8005598:	2300      	moveq	r3, #0
 800559a:	b2db      	uxtb	r3, r3
 800559c:	747b      	strb	r3, [r7, #17]
            timestampReady.timestampReadyC = (bool)status0Masked.TTSCAC;
 800559e:	7e7b      	ldrb	r3, [r7, #25]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bf14      	ite	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	2300      	moveq	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	74bb      	strb	r3, [r7, #18]
#endif
            hDevice->cbFunc[ADI_MAC_EVT_TIMESTAMP_RDY](hDevice->cbParam[ADI_MAC_EVT_TIMESTAMP_RDY], ADI_MAC_EVT_TIMESTAMP_RDY, (void *)&timestampReady);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80055ba:	f107 0210 	add.w	r2, r7, #16
 80055be:	2104      	movs	r1, #4
 80055c0:	4798      	blx	r3
        }
    }

    /* General status callback will fire even if callbacks were executed for specific status bits  */
    if (status0Masked.VALUE32 || status1Masked.VALUE32)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <oaSpiIntHandle+0xd0>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <oaSpiIntHandle+0xe8>
    {
        if (hDevice->cbFunc[ADI_MAC_EVT_STATUS] != NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <oaSpiIntHandle+0xe8>
        {
            hDevice->cbFunc[ADI_MAC_EVT_STATUS](hDevice->cbParam[ADI_MAC_EVT_STATUS], ADI_MAC_EVT_STATUS, (void *)&hDevice->statusRegisters);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	32f4      	adds	r2, #244	; 0xf4
 80055e2:	2103      	movs	r1, #3
 80055e4:	4798      	blx	r3
        }
    }

    /* Now clear the status bits. Note that we only need to clear the MAC */
    /* status bits, the PHY status bits are cleared on read.              */
    hDevice->wnr = ADI_MAC_SPI_WRITE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    hDevice->regAddr = ADDR_MAC_STATUS0;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2208      	movs	r2, #8
 80055f2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    hDevice->pRegData = (uint32_t *)&hDevice->statusRegisters;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    hDevice->cnt = 2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

    result = oaCtrlSetup(&hDevice->ctrlTxBuf[0], hDevice->wnr, hDevice->regAddr, hDevice->pRegData, &hDevice->cnt);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	4623      	mov	r3, r4
 800562c:	f000 fa47 	bl	8005abe <oaCtrlSetup>
 8005630:	4603      	mov	r3, r0
 8005632:	77fb      	strb	r3, [r7, #31]
    if (result != ADI_ETH_SUCCESS)
 8005634:	7ffb      	ldrb	r3, [r7, #31]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11a      	bne.n	8005670 <oaSpiIntHandle+0x172>
    {
        goto end;
    }

    useDma = (hDevice->cnt >= MIN_SIZE_FOR_DMA);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005640:	2b0f      	cmp	r3, #15
 8005642:	bf8c      	ite	hi
 8005644:	2301      	movhi	r3, #1
 8005646:	2300      	movls	r3, #0
 8005648:	77bb      	strb	r3, [r7, #30]
    hDevice->state = ADI_MAC_STATE_DATA_START;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2207      	movs	r2, #7
 800564e:	701a      	strb	r2, [r3, #0]
    /* Rx/Tx are the same in OA SPI, reusing the state names from   */
    /* generic SPI. Different state names also help with debugging. */
    hDevice->spiState = ADI_MAC_SPI_STATE_RX;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	705a      	strb	r2, [r3, #1]

    ADI_HAL_SPI_READ_WRITE(hDevice->adinDevice, &hDevice->ctrlTxBuf[0], &hDevice->ctrlRxBuf[0], hDevice->cnt, useDma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
 8005668:	7fbb      	ldrb	r3, [r7, #30]
 800566a:	f000 fff7 	bl	800665c <HAL_SpiReadWrite>
 800566e:	e000      	b.n	8005672 <oaSpiIntHandle+0x174>
        goto end;
 8005670:	bf00      	nop

end:
    return result;
 8005672:	7ffb      	ldrb	r3, [r7, #31]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3724      	adds	r7, #36	; 0x24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd90      	pop	{r4, r7, pc}

0800567c <oaSpiProcess>:
 *                  (MAC interrupt handler), in which case it will create a
 *                  one-chunk transaction.
 *
 */
static adi_eth_Result_e oaSpiProcess(adi_mac_Device_t *hDevice)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e        result          = ADI_ETH_SUCCESS;
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]
    uint32_t                chunkCount      = 0;
 8005688:	2300      	movs	r3, #0
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t                txChunkCount    = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	623b      	str	r3, [r7, #32]
    uint32_t                queueByteCount  = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	61fb      	str	r3, [r7, #28]
    uint8_t                 *pBuf;

    /* First figure out how many chunks to handle in the SPI transaction */
    if (!queueIsEmpty(&hDevice->txQueue))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	336c      	adds	r3, #108	; 0x6c
 8005698:	4618      	mov	r0, r3
 800569a:	f7fb fc3c 	bl	8000f16 <queueIsEmpty>
 800569e:	4603      	mov	r3, r0
 80056a0:	f083 0301 	eor.w	r3, r3, #1
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d045      	beq.n	8005736 <oaSpiProcess+0xba>
    {
        uint32_t txIdx = hDevice->oaTxCurBufIdx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80056b0:	617b      	str	r3, [r7, #20]
        queueByteCount = 0;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
        do
        {
            queueByteCount += hDevice->txQueue.pEntries[txIdx].pBufDesc->trxSize;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	4413      	add	r3, r2
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	61fb      	str	r3, [r7, #28]
            txIdx++;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	3301      	adds	r3, #1
 80056ce:	617b      	str	r3, [r7, #20]
            if (txIdx == TX_QUEUE_NUM_ENTRIES_RAW)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d101      	bne.n	80056da <oaSpiProcess+0x5e>
            {
                txIdx = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
            }
        } while (txIdx != hDevice->txQueue.head);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d1e8      	bne.n	80056b6 <oaSpiProcess+0x3a>
        /* The current buffer may have been already partially transmitted */
        queueByteCount -= hDevice->oaTxCurBufByteOffset;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	61fb      	str	r3, [r7, #28]

        /* Round up the number of chunks */
        chunkCount = (queueByteCount >> hDevice->oaCps) + ((queueByteCount & ((1 << hDevice->oaCps) - 1)) ? 1: 0);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 8005702:	2101      	movs	r1, #1
 8005704:	fa01 f202 	lsl.w	r2, r1, r2
 8005708:	3a01      	subs	r2, #1
 800570a:	4611      	mov	r1, r2
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	400a      	ands	r2, r1
 8005710:	2a00      	cmp	r2, #0
 8005712:	d001      	beq.n	8005718 <oaSpiProcess+0x9c>
 8005714:	2201      	movs	r2, #1
 8005716:	e000      	b.n	800571a <oaSpiProcess+0x9e>
 8005718:	2200      	movs	r2, #0
 800571a:	4413      	add	r3, r2
 800571c:	627b      	str	r3, [r7, #36]	; 0x24

        if (chunkCount > hDevice->oaTxc)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005726:	429a      	cmp	r2, r3
 8005728:	d903      	bls.n	8005732 <oaSpiProcess+0xb6>
        {
            chunkCount = hDevice->oaTxc;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Save this for later, to indicate if a chunk has Tx data or not. */
        txChunkCount = chunkCount;
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	623b      	str	r3, [r7, #32]

    }
    if (hDevice->oaRca > chunkCount)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800573c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573e:	429a      	cmp	r2, r3
 8005740:	d203      	bcs.n	800574a <oaSpiProcess+0xce>
    {
        chunkCount = hDevice->oaRca;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (chunkCount > hDevice->oaMaxChunkCount)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	429a      	cmp	r2, r3
 8005754:	d903      	bls.n	800575e <oaSpiProcess+0xe2>
    {
        chunkCount = hDevice->oaMaxChunkCount;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (hDevice->oaRxUseBackupBuf && (chunkCount > ADI_OA_RX_BACKUP_BUF_CHUNK_COUNT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <oaSpiProcess+0xf6>
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	2b01      	cmp	r3, #1
 800576c:	d901      	bls.n	8005772 <oaSpiProcess+0xf6>
    {
        chunkCount = ADI_OA_RX_BACKUP_BUF_CHUNK_COUNT;
 800576e:	2301      	movs	r3, #1
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* This is from IRQ handler: the host needs to initiate a data transfer in response to an IRQ. */
    if ((!chunkCount) && (hDevice->state == ADI_MAC_STATE_IRQ_START))
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <oaSpiProcess+0x10a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b09      	cmp	r3, #9
 8005780:	d101      	bne.n	8005786 <oaSpiProcess+0x10a>
    {
        /* Fixed to a minimum transfer size is 1 chunk. */
        chunkCount = 1;
 8005782:	2301      	movs	r3, #1
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (hDevice->oaRxUseBackupBuf)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <oaSpiProcess+0x11e>
    {
        pBuf = &hDevice->oaRxBackupBuf[0];
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e001      	b.n	800579e <oaSpiProcess+0x122>
    }
    else
    {
        pBuf = &spiTxBuf[0];
 800579a:	4b1f      	ldr	r3, [pc, #124]	; (8005818 <oaSpiProcess+0x19c>)
 800579c:	61bb      	str	r3, [r7, #24]
    }

    hDevice->oaTrxSize = 0;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    for (uint32_t i = 0; i < chunkCount; i++)
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	e02b      	b.n	8005804 <oaSpiProcess+0x188>
    {
        bool txEn = (hDevice->state == ADI_MAC_STATE_IRQ_START) ? false: (i < txChunkCount);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	d005      	beq.n	80057c2 <oaSpiProcess+0x146>
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d201      	bcs.n	80057c2 <oaSpiProcess+0x146>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <oaSpiProcess+0x148>
 80057c2:	2300      	movs	r3, #0
 80057c4:	73bb      	strb	r3, [r7, #14]
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	73bb      	strb	r3, [r7, #14]
        oaCreateNextChunk(hDevice, &pBuf[hDevice->oaTrxSize], txEn);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4413      	add	r3, r2
 80057d8:	7bba      	ldrb	r2, [r7, #14]
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f81d 	bl	800581c <oaCreateNextChunk>
        hDevice->oaTrxSize += ADI_SPI_HEADER_SIZE + (1 << hDevice->oaCps);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 80057ee:	2101      	movs	r1, #1
 80057f0:	fa01 f202 	lsl.w	r2, r1, r2
 80057f4:	4413      	add	r3, r2
 80057f6:	1d1a      	adds	r2, r3, #4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    for (uint32_t i = 0; i < chunkCount; i++)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	3301      	adds	r3, #1
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	429a      	cmp	r2, r3
 800580a:	d3cf      	bcc.n	80057ac <oaSpiProcess+0x130>
    }

    return result;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3728      	adds	r7, #40	; 0x28
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	2000098c 	.word	0x2000098c

0800581c <oaCreateNextChunk>:
 *                  flagged via the txEn parameter: if true it will populate frame data into the
 *                  chunk, if false it will only read.
 *
 */
static adi_eth_Result_e oaCreateNextChunk(adi_mac_Device_t *hDevice, uint8_t *pBuf, bool txEn)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b090      	sub	sp, #64	; 0x40
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	71fb      	strb	r3, [r7, #7]
    adi_eth_Result_e        result = ADI_ETH_SUCCESS;
 800582a:	2300      	movs	r3, #0
 800582c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    adi_mac_FrameStruct_t   *pFrame = NULL;
 8005830:	2300      	movs	r3, #0
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint32_t                chunkSize = (1 << hDevice->oaCps);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800583a:	2201      	movs	r2, #1
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t                chunkBytesRemaining = chunkSize;
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t                chunkByteIdx = ADI_SPI_HEADER_SIZE;
 8005846:	2304      	movs	r3, #4
 8005848:	623b      	str	r3, [r7, #32]
    adi_mac_OaTxHeader_t    oaTxHeader;
    bool                    firstChunk = false;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    uint32_t                mem32;

    oaTxHeader.VALUE32 = 0x00000000;
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
    oaTxHeader.DNC = 1;
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585a:	75fb      	strb	r3, [r7, #23]

    /* If there are no buffers ready for Rx, ask the MAC to not send data to host */
    if ((hDevice->oaRxUseBackupBuf) || queueIsEmpty(hDevice->pRxQueue))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005862:	2b00      	cmp	r3, #0
 8005864:	d107      	bne.n	8005876 <oaCreateNextChunk+0x5a>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800586a:	4618      	mov	r0, r3
 800586c:	f7fb fb53 	bl	8000f16 <queueIsEmpty>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <oaCreateNextChunk+0x62>
    {
        oaTxHeader.NORX = 1;
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	f043 0320 	orr.w	r3, r3, #32
 800587c:	75fb      	strb	r3, [r7, #23]
    }

    // FIXME: queueIsFull: can this ever be false in the previous implementation?
    if (txEn && (queueIsFull(&hDevice->txQueue) || (hDevice->oaTxCurBufIdx != hDevice->txQueue.head)))
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d016      	beq.n	80058b2 <oaCreateNextChunk+0x96>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	336c      	adds	r3, #108	; 0x6c
 8005888:	4618      	mov	r0, r3
 800588a:	f7fb fb30 	bl	8000eee <queueIsFull>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <oaCreateNextChunk+0x86>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589e:	429a      	cmp	r2, r3
 80058a0:	d007      	beq.n	80058b2 <oaCreateNextChunk+0x96>
    {
        pFrame = &hDevice->txQueue.pEntries[hDevice->oaTxCurBufIdx];
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4413      	add	r3, r2
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if (pFrame == NULL)
 80058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <oaCreateNextChunk+0xa6>
    {
        oaTxHeader.DV = 0;
 80058b8:	7dbb      	ldrb	r3, [r7, #22]
 80058ba:	f36f 1345 	bfc	r3, #5, #1
 80058be:	75bb      	strb	r3, [r7, #22]
 80058c0:	e0dd      	b.n	8005a7e <oaCreateNextChunk+0x262>
    }
    else
    {
        oaTxHeader.DV = 1;
 80058c2:	7dbb      	ldrb	r3, [r7, #22]
 80058c4:	f043 0320 	orr.w	r3, r3, #32
 80058c8:	75bb      	strb	r3, [r7, #22]

        /* Have we already transmitted bytes from the frame? */
        if (!hDevice->oaTxCurBufByteOffset)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <oaCreateNextChunk+0xbe>
        {
            firstChunk = true;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        uint32_t bytesRemaining = pFrame->pBufDesc->trxSize - hDevice->oaTxCurBufByteOffset;
 80058da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	61fb      	str	r3, [r7, #28]
        uint32_t    bsize;


        if (bytesRemaining > chunkBytesRemaining)
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d902      	bls.n	80058f8 <oaCreateNextChunk+0xdc>
        {
            bsize = chunkBytesRemaining;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
 80058f6:	e001      	b.n	80058fc <oaCreateNextChunk+0xe0>
        }
        else
        {
            bsize = bytesRemaining;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        bytesRemaining -= bsize;
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	61fb      	str	r3, [r7, #28]
        chunkBytesRemaining -= bsize;
 8005904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	627b      	str	r3, [r7, #36]	; 0x24

        memcpy(&pBuf[chunkByteIdx], &pFrame->pBufDesc->pBuf[hDevice->oaTxCurBufByteOffset], bsize);
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	18d0      	adds	r0, r2, r3
 8005912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800591e:	4413      	add	r3, r2
 8005920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005922:	4619      	mov	r1, r3
 8005924:	f013 ff3d 	bl	80197a2 <memcpy>
        hDevice->oaTxCurBufByteOffset += bsize;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800592e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

        if (firstChunk)
 8005938:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800593c:	2b00      	cmp	r3, #0
 800593e:	d014      	beq.n	800596a <oaCreateNextChunk+0x14e>
        {
            oaTxHeader.SV = 1;
 8005940:	7dbb      	ldrb	r3, [r7, #22]
 8005942:	f043 0310 	orr.w	r3, r3, #16
 8005946:	75bb      	strb	r3, [r7, #22]
            oaTxHeader.SWO = 0;
 8005948:	7dbb      	ldrb	r3, [r7, #22]
 800594a:	f36f 0303 	bfc	r3, #0, #4
 800594e:	75bb      	strb	r3, [r7, #22]
            oaTxHeader.TMSC = (uint32_t)(pFrame->pBufDesc->egressCapt);
 8005950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	7e1b      	ldrb	r3, [r3, #24]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	b2da      	uxtb	r2, r3
 800595c:	7d3b      	ldrb	r3, [r7, #20]
 800595e:	f362 1387 	bfi	r3, r2, #6, #2
 8005962:	753b      	strb	r3, [r7, #20]

#if defined(ADIN2111)
            oaTxHeader.VS = pFrame->pBufDesc->port & 0x1;
#endif
            firstChunk = false;
 8005964:	2300      	movs	r3, #0
 8005966:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }
        if (bytesRemaining == 0)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d122      	bne.n	80059b6 <oaCreateNextChunk+0x19a>
        {
            oaTxHeader.EV = 1;
 8005970:	7d7b      	ldrb	r3, [r7, #21]
 8005972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005976:	757b      	strb	r3, [r7, #21]
            oaTxHeader.EBO = (bsize - 1);
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	b2db      	uxtb	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005984:	b2da      	uxtb	r2, r3
 8005986:	7d7b      	ldrb	r3, [r7, #21]
 8005988:	f362 0305 	bfi	r3, r2, #0, #6
 800598c:	757b      	strb	r3, [r7, #21]
            hDevice->oaTxCurBufIdx++;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
            if (hDevice->oaTxCurBufIdx == TX_QUEUE_NUM_ENTRIES_RAW)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80059a2:	2b05      	cmp	r3, #5
 80059a4:	d103      	bne.n	80059ae <oaCreateNextChunk+0x192>
            {
                hDevice->oaTxCurBufIdx = 0;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
            }
            hDevice->oaTxCurBufByteOffset = 0;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        if ((chunkBytesRemaining >= 4) && (hDevice->oaTxCurBufIdx != hDevice->txQueue.head))
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d960      	bls.n	8005a7e <oaCreateNextChunk+0x262>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d059      	beq.n	8005a7e <oaCreateNextChunk+0x262>
            /* There is room in the chunk to start transmit next frame */
            /* However we need to make sure this would not lead to a need */
            /* for duplicate SV or EV. */

            /* If there is already a valid SV, do not try to start a new frame */
            if (!oaTxHeader.SV)
 80059ca:	7dbb      	ldrb	r3, [r7, #22]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d153      	bne.n	8005a7e <oaCreateNextChunk+0x262>
            {
                pFrame = &hDevice->txQueue.pEntries[hDevice->oaTxCurBufIdx];
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4413      	add	r3, r2
 80059e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                uint32_t swo = (bsize + 3) / 4;
 80059e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e8:	3303      	adds	r3, #3
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	633b      	str	r3, [r7, #48]	; 0x30
                /* If we already have a valid EV, make sure the new frame is not shorter */
                /* than the available bytes in the chunk. */
                if (oaTxHeader.EV && (pFrame->pBufDesc->trxSize + swo * 4 <= chunkSize))
 80059ee:	7d7b      	ldrb	r3, [r7, #21]
 80059f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <oaCreateNextChunk+0x1f6>
 80059fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d302      	bcc.n	8005a12 <oaCreateNextChunk+0x1f6>
                {
                    swo++;
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	3301      	adds	r3, #1
 8005a10:	633b      	str	r3, [r7, #48]	; 0x30
                }

                chunkByteIdx = chunkByteIdx + swo * 4;
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	4413      	add	r3, r2
 8005a1a:	623b      	str	r3, [r7, #32]
                chunkBytesRemaining = chunkSize - swo * 4;
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
                memcpy(&pBuf[chunkByteIdx], &pFrame->pBufDesc->pBuf[hDevice->oaTxCurBufByteOffset], chunkBytesRemaining);
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	18d0      	adds	r0, r2, r3
 8005a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005a38:	4413      	add	r3, r2
 8005a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	f013 feb0 	bl	80197a2 <memcpy>
                hDevice->oaTxCurBufByteOffset += chunkBytesRemaining;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	441a      	add	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

                oaTxHeader.SV = 1;
 8005a52:	7dbb      	ldrb	r3, [r7, #22]
 8005a54:	f043 0310 	orr.w	r3, r3, #16
 8005a58:	75bb      	strb	r3, [r7, #22]
                oaTxHeader.SWO = swo;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	7dbb      	ldrb	r3, [r7, #22]
 8005a64:	f362 0303 	bfi	r3, r2, #0, #4
 8005a68:	75bb      	strb	r3, [r7, #22]

                oaTxHeader.TMSC = (uint32_t)(pFrame->pBufDesc->egressCapt);
 8005a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	7e1b      	ldrb	r3, [r3, #24]
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	7d3b      	ldrb	r3, [r7, #20]
 8005a78:	f362 1387 	bfi	r3, r2, #6, #2
 8005a7c:	753b      	strb	r3, [r7, #20]
            }
        }

    }

    oaTxHeader.P = 1;
 8005a7e:	7d3b      	ldrb	r3, [r7, #20]
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	753b      	strb	r3, [r7, #20]
    oaTxHeader.P = MAC_CalculateParity((uint8_t *)&oaTxHeader.VALUE32, 4);
 8005a86:	f107 0314 	add.w	r3, r7, #20
 8005a8a:	2104      	movs	r1, #4
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fd f92d 	bl	8002cec <MAC_CalculateParity>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	7d3b      	ldrb	r3, [r7, #20]
 8005a9c:	f362 0300 	bfi	r3, r2, #0, #1
 8005aa0:	753b      	strb	r3, [r7, #20]

    mem32 = HTON32(oaTxHeader.VALUE32);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	ba1b      	rev	r3, r3
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	693a      	ldr	r2, [r7, #16]
    memcpy(pBuf, &mem32, 4);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	601a      	str	r2, [r3, #0]

    return result;
 8005ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3740      	adds	r7, #64	; 0x40
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <oaCtrlSetup>:
 *
 * @details         Creates a control transaction data, including the control command header.
 *
 */
static adi_eth_Result_e oaCtrlSetup(uint8_t *pBuf, uint32_t wnr, uint32_t regAddr, uint32_t *pRegData, uint32_t *pLen)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	603b      	str	r3, [r7, #0]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8005acc:	2300      	movs	r3, #0
 8005ace:	75fb      	strb	r3, [r7, #23]
    uint32_t            byteLen;

    /* Size of header and echoed header */
    byteLen = 2 * ADI_SPI_HEADER_SIZE;
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	613b      	str	r3, [r7, #16]
    /* Convert words to bytes */
    byteLen += ADI_MAC_SPI_ACCESS_SIZE * (*pLen);
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4413      	add	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
#if defined(SPI_PROT_EN)
    /* Protection enabled */
    byteLen += ADI_MAC_SPI_ACCESS_SIZE * (*pLen);
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4413      	add	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
#endif

    if (byteLen > (ADI_MAC_SPI_CTRL_BUF_SIZE - 2))
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2bfe      	cmp	r3, #254	; 0xfe
 8005af0:	d902      	bls.n	8005af8 <oaCtrlSetup+0x3a>
    {
      result = ADI_ETH_INVALID_PARAM;
 8005af2:	2308      	movs	r3, #8
 8005af4:	75fb      	strb	r3, [r7, #23]
      goto end;
 8005af6:	e016      	b.n	8005b26 <oaCtrlSetup+0x68>
    }

    oaCtrlCmdHeader(pBuf, wnr, regAddr, *pLen);
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f815 	bl	8005b30 <oaCtrlCmdHeader>

    if (wnr == ADI_MAC_SPI_WRITE)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d109      	bne.n	8005b20 <oaCtrlSetup+0x62>
    {
        result = oaCtrlCmdWriteData(&pBuf[ADI_SPI_HEADER_SIZE], (uint32_t *)pRegData, (*pLen));
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	1d18      	adds	r0, r3, #4
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	f000 f89a 	bl	8005c50 <oaCtrlCmdWriteData>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	75fb      	strb	r3, [r7, #23]
    }

    *pLen = byteLen;
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	601a      	str	r2, [r3, #0]

end:
    return result;
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <oaCtrlCmdHeader>:
 * @param [in]      addr        Register address.
 * @param [in]      cnt         Number of registers.
 *
 */
static void oaCtrlCmdHeader(uint8_t *p, uint32_t wnr, uint32_t addr, uint32_t cnt)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	603b      	str	r3, [r7, #0]
    adi_mac_OaCtrlCmdHeader_t   header;
    uint32_t                    mem32;

    header.DNC = 0;
 8005b3e:	7efb      	ldrb	r3, [r7, #27]
 8005b40:	f36f 13c7 	bfc	r3, #7, #1
 8005b44:	76fb      	strb	r3, [r7, #27]
    header.HDRB = 0;
 8005b46:	7efb      	ldrb	r3, [r7, #27]
 8005b48:	f36f 1386 	bfc	r3, #6, #1
 8005b4c:	76fb      	strb	r3, [r7, #27]
    header.WNR = wnr;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	7efb      	ldrb	r3, [r7, #27]
 8005b58:	f362 1345 	bfi	r3, r2, #5, #1
 8005b5c:	76fb      	strb	r3, [r7, #27]
    header.AID = 0;
 8005b5e:	7efb      	ldrb	r3, [r7, #27]
 8005b60:	f36f 1304 	bfc	r3, #4, #1
 8005b64:	76fb      	strb	r3, [r7, #27]
    if (addr >= ADDR_MAC_TX_FSIZE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b2f      	cmp	r3, #47	; 0x2f
 8005b6a:	d905      	bls.n	8005b78 <oaCtrlCmdHeader+0x48>
    {
        header.MMS = 1;
 8005b6c:	7efb      	ldrb	r3, [r7, #27]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f362 0303 	bfi	r3, r2, #0, #4
 8005b74:	76fb      	strb	r3, [r7, #27]
 8005b76:	e003      	b.n	8005b80 <oaCtrlCmdHeader+0x50>
    }
    else
    {
        header.MMS = 0;
 8005b78:	7efb      	ldrb	r3, [r7, #27]
 8005b7a:	f36f 0303 	bfc	r3, #0, #4
 8005b7e:	76fb      	strb	r3, [r7, #27]
    }
    header.ADDR = addr;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f8a7 3019 	strh.w	r3, [r7, #25]
    header.LEN = (cnt - 1);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	7e3b      	ldrb	r3, [r7, #24]
 8005b98:	f362 0347 	bfi	r3, r2, #1, #7
 8005b9c:	763b      	strb	r3, [r7, #24]
    header.P = 1;
 8005b9e:	7e3b      	ldrb	r3, [r7, #24]
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	763b      	strb	r3, [r7, #24]
    header.P = MAC_CalculateParity((uint8_t *)&header.VALUE32, 4);
 8005ba6:	f107 0318 	add.w	r3, r7, #24
 8005baa:	2104      	movs	r1, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fd f89d 	bl	8002cec <MAC_CalculateParity>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	7e3b      	ldrb	r3, [r7, #24]
 8005bbc:	f362 0300 	bfi	r3, r2, #0, #1
 8005bc0:	763b      	strb	r3, [r7, #24]

    mem32 = HTON32(header.VALUE32);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	ba1b      	rev	r3, r3
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	697a      	ldr	r2, [r7, #20]
    memcpy(p, &mem32, 4);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <oaCtrlCmdReadData>:
 *                  If protection is enabled (#SPI_PROT_EN), it checks the integrity of the
 *                  received data and return #ADI_ETH_PROTECTION_ERROR in case of failure.
 *
 */
static adi_eth_Result_e oaCtrlCmdReadData(uint32_t *dst, uint8_t *src, uint32_t cnt)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b08b      	sub	sp, #44	; 0x2c
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e     result = ADI_ETH_SUCCESS;
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

#if defined(SPI_PROT_EN)
    uint32_t            val32[2];

    /* Protection enabled */
    for (uint32_t i = 0; i < cnt; i++)
 8005bec:	2300      	movs	r3, #0
 8005bee:	623b      	str	r3, [r7, #32]
 8005bf0:	e021      	b.n	8005c36 <oaCtrlCmdReadData+0x5c>
    {
        val32[0] = ((uint32_t *)src)[2 * i];
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	617b      	str	r3, [r7, #20]
        val32[1] = ((uint32_t *)src)[2 * i + 1];
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	3304      	adds	r3, #4
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	4413      	add	r3, r2
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	61bb      	str	r3, [r7, #24]
        if (val32[0] != ~val32[1])
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d003      	beq.n	8005c1e <oaCtrlCmdReadData+0x44>
        {
            result = ADI_ETH_PROTECTION_ERROR;
 8005c16:	2311      	movs	r3, #17
 8005c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            goto end;
 8005c1c:	e010      	b.n	8005c40 <oaCtrlCmdReadData+0x66>
        }
        dst[i] = HTON32(val32[0]);
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	68f9      	ldr	r1, [r7, #12]
 8005c26:	440b      	add	r3, r1
 8005c28:	61fa      	str	r2, [r7, #28]
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	ba12      	rev	r2, r2
 8005c2e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < cnt; i++)
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	3301      	adds	r3, #1
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	6a3a      	ldr	r2, [r7, #32]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d3d9      	bcc.n	8005bf2 <oaCtrlCmdReadData+0x18>
    }
end:
 8005c3e:	bf00      	nop
        dst[i] = HTON32(((uint32_t *)src)[i]);
    }

#endif

    return result;
 8005c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	372c      	adds	r7, #44	; 0x2c
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <oaCtrlCmdWriteData>:
 *                  If protection is enabled (#SPI_PROT_EN), it will add the integrity
 *                  check values as defined by the OPEN Alliance specification.
 *
 */
static adi_eth_Result_e oaCtrlCmdWriteData(uint8_t *dst, uint32_t *src, uint32_t cnt)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b089      	sub	sp, #36	; 0x24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
    adi_eth_Result_e     result = ADI_ETH_SUCCESS;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	76fb      	strb	r3, [r7, #27]

#if defined(SPI_PROT_EN)
      /* Protection enabled */
    for (uint32_t i = 0; i < cnt; i++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	e01e      	b.n	8005ca4 <oaCtrlCmdWriteData+0x54>
    {
        ((uint32_t *)dst)[2 * i] = HTON32(src[i]);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	68f9      	ldr	r1, [r7, #12]
 8005c76:	440b      	add	r3, r1
 8005c78:	613a      	str	r2, [r7, #16]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	ba12      	rev	r2, r2
 8005c7e:	601a      	str	r2, [r3, #0]
        ((uint32_t *)dst)[2 * i + 1] = HTON32(~src[i]);
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	4413      	add	r3, r2
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	43da      	mvns	r2, r3
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	3304      	adds	r3, #4
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	440b      	add	r3, r1
 8005c96:	617a      	str	r2, [r7, #20]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	ba12      	rev	r2, r2
 8005c9c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < cnt; i++)
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d3dc      	bcc.n	8005c66 <oaCtrlCmdWriteData+0x16>
        ((uint32_t *)dst)[i] = HTON32(src[i]);
    }

#endif

    return result;
 8005cac:	7efb      	ldrb	r3, [r7, #27]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3724      	adds	r7, #36	; 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <MAC_SendFrame>:
 *
 * @details         Executes the state machine to start sending a frame to the MAC.
 *
 */
adi_eth_Result_e MAC_SendFrame(adi_mac_Device_t *hDevice, adi_mac_FrameStruct_t *pFrame)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e          result = ADI_ETH_SUCCESS;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73fb      	strb	r3, [r7, #15]

    hDevice->state = ADI_MAC_STATE_DATA_START;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2207      	movs	r2, #7
 8005ccc:	701a      	strb	r2, [r3, #0]
    result = oaStateMachine(hDevice);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fe fc0e 	bl	80044f0 <oaStateMachine>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73fb      	strb	r3, [r7, #15]

    return result;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <PhyWrite>:

adin1110_DeviceHandle_t pDeviceHandle;


static uint32_t PhyWrite(uint8_t hwAddr, uint32_t regAddr, uint16_t data)
{
 8005ce4:	b590      	push	{r4, r7, lr}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	6039      	str	r1, [r7, #0]
 8005cee:	71fb      	strb	r3, [r7, #7]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	80bb      	strh	r3, [r7, #4]
    return (uint32_t)macDriverEntry.PhyWrite(pDeviceHandle->pMacDevice , hwAddr, regAddr, data);
 8005cf4:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <PhyWrite+0x30>)
 8005cf6:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8005cfa:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <PhyWrite+0x34>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6858      	ldr	r0, [r3, #4]
 8005d00:	88bb      	ldrh	r3, [r7, #4]
 8005d02:	79f9      	ldrb	r1, [r7, #7]
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	47a0      	blx	r4
 8005d08:	4603      	mov	r3, r0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd90      	pop	{r4, r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000000 	.word	0x20000000
 8005d18:	20001160 	.word	0x20001160

08005d1c <PhyRead>:

static uint32_t PhyRead(uint8_t hwAddr, uint32_t regAddr, uint16_t *data)
{
 8005d1c:	b590      	push	{r4, r7, lr}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	73fb      	strb	r3, [r7, #15]
    return (uint32_t)macDriverEntry.PhyRead(pDeviceHandle->pMacDevice , hwAddr, regAddr, data);
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <PhyRead+0x2c>)
 8005d2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <PhyRead+0x30>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6858      	ldr	r0, [r3, #4]
 8005d36:	7bf9      	ldrb	r1, [r7, #15]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	47a0      	blx	r4
 8005d3e:	4603      	mov	r3, r0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd90      	pop	{r4, r7, pc}
 8005d48:	20000000 	.word	0x20000000
 8005d4c:	20001160 	.word	0x20001160

08005d50 <adin1110_Init>:
 *                  Use adin1110_Enable() to establish the link.
 *
 * @sa              adin1110_UnInit()
 */
adi_eth_Result_e adin1110_Init(adin1110_DeviceHandle_t hDevice, adin1110_DriverConfig_t *pCfg)
{
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b08d      	sub	sp, #52	; 0x34
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
    adi_eth_Result_e        result = ADI_ETH_SUCCESS;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    adi_mac_DriverConfig_t  macDrvConfig;
    adi_phy_DriverConfig_t  phyDrvConfig;

    if (pCfg->devMemSize < ADIN1110_DEVICE_SIZE)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8005d68:	d203      	bcs.n	8005d72 <adin1110_Init+0x22>
    {
        result = ADI_ETH_INVALID_PARAM;
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto end;
 8005d70:	e044      	b.n	8005dfc <adin1110_Init+0xac>
    }

    hDevice->pUserContext = NULL;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	609a      	str	r2, [r3, #8]

    /* Initialize the MAC configuration structure. */
    macDrvConfig.pDevMem = (void *)pCfg->pDevMem;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	61bb      	str	r3, [r7, #24]
    macDrvConfig.devMemSize = ADI_MAC_DEVICE_SIZE;
 8005d7e:	f44f 736c 	mov.w	r3, #944	; 0x3b0
 8005d82:	61fb      	str	r3, [r7, #28]
    macDrvConfig.fcsCheckEn = pCfg->fcsCheckEn;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	7a1b      	ldrb	r3, [r3, #8]
 8005d88:	f887 3020 	strb.w	r3, [r7, #32]

    /* Initialize the PHY configuration structure. */
    phyDrvConfig.pDevMem = (void *)((uint8_t *)pCfg->pDevMem + ADI_MAC_DEVICE_SIZE);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8005d94:	60fb      	str	r3, [r7, #12]
    phyDrvConfig.devMemSize = ADI_PHY_DEVICE_SIZE;
 8005d96:	2330      	movs	r3, #48	; 0x30
 8005d98:	613b      	str	r3, [r7, #16]
    phyDrvConfig.enableIrq  = false;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	753b      	strb	r3, [r7, #20]

    pDeviceHandle = hDevice;
 8005d9e:	4a1a      	ldr	r2, [pc, #104]	; (8005e08 <adin1110_Init+0xb8>)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6013      	str	r3, [r2, #0]

    ADI_HAL_INIT(hDevice);
 8005da4:	f000 fc7a 	bl	800669c <HAL_Init_Hook>

    result = macDriverEntry.Init(&hDevice->pMacDevice, &macDrvConfig, (void *)hDevice);
 8005da8:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <adin1110_Init+0xbc>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	1d10      	adds	r0, r2, #4
 8005db0:	f107 0118 	add.w	r1, r7, #24
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	4798      	blx	r3
 8005db8:	4603      	mov	r3, r0
 8005dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (result == ADI_ETH_SUCCESS)
 8005dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d119      	bne.n	8005dfa <adin1110_Init+0xaa>
    {
        /* PHY address, used in internal MDIO accesses, is fixed in hardware. */
        phyDrvConfig.addr = ADIN1110_PHY_ADDR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	60bb      	str	r3, [r7, #8]
        result = phyDriverEntry.Init(&hDevice->pPhyDevice, &phyDrvConfig, hDevice, PhyRead, PhyWrite);
 8005dca:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <adin1110_Init+0xc0>)
 8005dcc:	681c      	ldr	r4, [r3, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f107 0108 	add.w	r1, r7, #8
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <adin1110_Init+0xc4>)
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <adin1110_Init+0xc8>)
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	47a0      	blx	r4
 8005dde:	4603      	mov	r3, r0
 8005de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        hDevice->pMacDevice->phyAddr = phyDrvConfig.addr;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	635a      	str	r2, [r3, #52]	; 0x34
        hDevice->pMacDevice->phyIrqMask = ADIN1110_PHY_IRQ_MASK;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f643 32ff 	movw	r2, #15359	; 0x3bff
 8005df4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8005df8:	e000      	b.n	8005dfc <adin1110_Init+0xac>
    }

end:
 8005dfa:	bf00      	nop
    return result;
 8005dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	372c      	adds	r7, #44	; 0x2c
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd90      	pop	{r4, r7, pc}
 8005e08:	20001160 	.word	0x20001160
 8005e0c:	20000000 	.word	0x20000000
 8005e10:	2000008c 	.word	0x2000008c
 8005e14:	08005ce5 	.word	0x08005ce5
 8005e18:	08005d1d 	.word	0x08005d1d

08005e1c <adin1110_Enable>:
 * @details         Enable the MAC-PHY operation by bringing PHY out of software powerdown and establishing link.
 *
 * @sa              adin1110_Disable()
 */
adi_eth_Result_e adin1110_Enable(adin1110_DeviceHandle_t hDevice)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e    result = ADI_ETH_SUCCESS;
 8005e24:	2300      	movs	r3, #0
 8005e26:	73fb      	strb	r3, [r7, #15]

    result = phyDriverEntry.ExitSoftwarePowerdown(hDevice->pPhyDevice);
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <adin1110_Enable+0x28>)
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]

    return result;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000008c 	.word	0x2000008c

08005e48 <adin1110_SyncConfig>:
 *                  CONFIG0.SYNC is cleared on reset, and the MAC device will not transmit or receive frames until CONFIG0.SYNC is set.
 *
 * @sa              adin1110_Reset()
 */
adi_eth_Result_e adin1110_SyncConfig(adin1110_DeviceHandle_t hDevice)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
    return macDriverEntry.SyncConfig(hDevice->pMacDevice);
 8005e50:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <adin1110_SyncConfig+0x20>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6852      	ldr	r2, [r2, #4]
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4798      	blx	r3
 8005e5c:	4603      	mov	r3, r0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000000 	.word	0x20000000

08005e6c <adin1110_GetLinkStatus>:
 *                  in the MAC STATUS register. It does not read from the PHY registers.
 *
 * @sa
 */
adi_eth_Result_e adin1110_GetLinkStatus(adin1110_DeviceHandle_t hDevice, adi_eth_LinkStatus_e *linkStatus)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
    return macDriverEntry.GetLinkStatus(hDevice->pMacDevice, 0, linkStatus);
 8005e76:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <adin1110_GetLinkStatus+0x24>)
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6850      	ldr	r0, [r2, #4]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	2100      	movs	r1, #0
 8005e82:	4798      	blx	r3
 8005e84:	4603      	mov	r3, r0

}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000000 	.word	0x20000000

08005e94 <adin1110_AddAddressFilter>:
 *                  If the address filter table is full, an entry can be made available using adin1110_ClearAddressFilter(). 
 *
 * @sa              adin1110_ClearAddressFilter()
 */
adi_eth_Result_e adin1110_AddAddressFilter(adin1110_DeviceHandle_t hDevice, uint8_t *macAddr, uint8_t *macAddrMask, uint32_t priority)
{
 8005e94:	b590      	push	{r4, r7, lr}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
    adi_mac_AddressRule_t   addrRule;

    addrRule.VALUE16 = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	82bb      	strh	r3, [r7, #20]
    /* Address rules only make sense if TO_HOST=1, because dropping frames is the default behaviour. */
    addrRule.TO_HOST = 1;
 8005ea6:	7d3b      	ldrb	r3, [r7, #20]
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	753b      	strb	r3, [r7, #20]
    addrRule.HOST_PRI = priority & (BITM_MAC_ADDR_FILT_UPR_N__HOST_PRI >> BITP_MAC_ADDR_FILT_UPR_N__HOST_PRI);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	7d3b      	ldrb	r3, [r7, #20]
 8005eb8:	f362 03c3 	bfi	r3, r2, #3, #1
 8005ebc:	753b      	strb	r3, [r7, #20]
    addrRule.APPLY2PORT1 = 1;
 8005ebe:	7d7b      	ldrb	r3, [r7, #21]
 8005ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec4:	757b      	strb	r3, [r7, #21]

    return macDriverEntry.AddAddressFilter(hDevice->pMacDevice, macAddr, macAddrMask, addrRule.VALUE16);
 8005ec6:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <adin1110_AddAddressFilter+0x4c>)
 8005ec8:	69dc      	ldr	r4, [r3, #28]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6858      	ldr	r0, [r3, #4]
 8005ece:	8abb      	ldrh	r3, [r7, #20]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	47a0      	blx	r4
 8005ed6:	4603      	mov	r3, r0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd90      	pop	{r4, r7, pc}
 8005ee0:	20000000 	.word	0x20000000

08005ee4 <adin1110_SubmitTxBuffer>:
 *                  successful!
 *
 * @sa
 */
adi_eth_Result_e adin1110_SubmitTxBuffer(adin1110_DeviceHandle_t hDevice, adi_eth_BufDesc_t *pBufDesc)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
    adi_mac_FrameHeader_t   header;

    header.VALUE16 = 0x0000;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	81bb      	strh	r3, [r7, #12]
    header.EGRESS_CAPTURE = pBufDesc->egressCapt;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	7e1b      	ldrb	r3, [r3, #24]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	7b3b      	ldrb	r3, [r7, #12]
 8005efe:	f362 1387 	bfi	r3, r2, #6, #2
 8005f02:	733b      	strb	r3, [r7, #12]

    /* For the ADIN1110, reference counter is always 1 */
    pBufDesc->refCount = 1;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2201      	movs	r2, #1
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24

    return macDriverEntry.SubmitTxBuffer(hDevice->pMacDevice, header, pBufDesc);
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <adin1110_SubmitTxBuffer+0x40>)
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6850      	ldr	r0, [r2, #4]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	89b9      	ldrh	r1, [r7, #12]
 8005f16:	4798      	blx	r3
 8005f18:	4603      	mov	r3, r0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000000 	.word	0x20000000

08005f28 <adin1110_SubmitRxBuffer>:
 *                  this will submit the buffer to the low (normal) priority queue.
 *
 * @sa
 */
adi_eth_Result_e adin1110_SubmitRxBuffer(adin1110_DeviceHandle_t hDevice, adi_eth_BufDesc_t *pBufDesc)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
    return macDriverEntry.SubmitRxBuffer(hDevice->pMacDevice, pBufDesc);
 8005f32:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <adin1110_SubmitRxBuffer+0x24>)
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6852      	ldr	r2, [r2, #4]
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4798      	blx	r3
 8005f40:	4603      	mov	r3, r0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000000 	.word	0x20000000

08005f50 <adin1110_RegisterCallback>:
 *                  It notifies the application when configured events occur.
 *
 * @sa
 */
adi_eth_Result_e adin1110_RegisterCallback(adin1110_DeviceHandle_t hDevice, adi_eth_Callback_t cbFunc, adi_mac_InterruptEvt_e cbEvent)
{
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	71fb      	strb	r3, [r7, #7]
    return macDriverEntry.RegisterCallback(hDevice->pMacDevice, cbFunc, cbEvent, (void *)hDevice);
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <adin1110_RegisterCallback+0x28>)
 8005f60:	691c      	ldr	r4, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6858      	ldr	r0, [r3, #4]
 8005f66:	79fa      	ldrb	r2, [r7, #7]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	47a0      	blx	r4
 8005f6e:	4603      	mov	r3, r0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd90      	pop	{r4, r7, pc}
 8005f78:	20000000 	.word	0x20000000

08005f7c <BSP_delayMs>:
 * @details Based on assumption that SysTick counter fires every milisecond
 *
 * @sa
 */
void BSP_delayMs(uint32_t delay)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
    volatile uint32_t now;
    uint32_t checkTime  = BSP_SysNow();
 8005f84:	f000 f8cf 	bl	8006126 <BSP_SysNow>
 8005f88:	60f8      	str	r0, [r7, #12]
    /* Read SysTick Timer every Ms*/
    while (1)
    {
      now  = BSP_SysNow();
 8005f8a:	f000 f8cc 	bl	8006126 <BSP_SysNow>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	60bb      	str	r3, [r7, #8]
       if (now - checkTime >= delay)
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d900      	bls.n	8005fa0 <BSP_delayMs+0x24>
      now  = BSP_SysNow();
 8005f9e:	e7f4      	b.n	8005f8a <BSP_delayMs+0xe>
       {
          break;
 8005fa0:	bf00      	nop
       }
    }
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <BSP_HWReset>:
 * @details Puld down Reset Pin, wait for 1mS release the Reset Pin
 *
 * @sa
 */
void BSP_HWReset(bool set)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_RESET);
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	4809      	ldr	r0, [pc, #36]	; (8005fe0 <BSP_HWReset+0x34>)
 8005fbc:	f002 fe00 	bl	8008bc0 <HAL_GPIO_WritePin>
    BSP_delayMs(RESET_DELAY);
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	f7ff ffdb 	bl	8005f7c <BSP_delayMs>
    HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	2180      	movs	r1, #128	; 0x80
 8005fca:	4805      	ldr	r0, [pc, #20]	; (8005fe0 <BSP_HWReset+0x34>)
 8005fcc:	f002 fdf8 	bl	8008bc0 <HAL_GPIO_WritePin>
    BSP_delayMs(AFTER_RESET_DELAY);
 8005fd0:	2064      	movs	r0, #100	; 0x64
 8005fd2:	f7ff ffd3 	bl	8005f7c <BSP_delayMs>
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	48000800 	.word	0x48000800

08005fe4 <bspLedSet>:

/* LED functions */

static void bspLedSet(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, bool on)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	807b      	strh	r3, [r7, #2]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	707b      	strb	r3, [r7, #1]
    if (on)
 8005ff4:	787b      	ldrb	r3, [r7, #1]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d006      	beq.n	8006008 <bspLedSet+0x24>
    {
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8005ffa:	887b      	ldrh	r3, [r7, #2]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f002 fddd 	bl	8008bc0 <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
    }
}
 8006006:	e005      	b.n	8006014 <bspLedSet+0x30>
        HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8006008:	887b      	ldrh	r3, [r7, #2]
 800600a:	2201      	movs	r2, #1
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f002 fdd6 	bl	8008bc0 <HAL_GPIO_WritePin>
}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <bspLedToggle>:

static void bspLedToggle(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	807b      	strh	r3, [r7, #2]
      HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8006028:	887b      	ldrh	r3, [r7, #2]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f002 fddf 	bl	8008bf0 <HAL_GPIO_TogglePin>
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <BSP_HeartBeat>:

/*
 * Heartbeat LED, ORANGE
 */
void BSP_HeartBeat(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
    bspLedToggle(BSP_LED3_PORT, BSP_LED3_PIN);
 8006040:	2140      	movs	r1, #64	; 0x40
 8006042:	4802      	ldr	r0, [pc, #8]	; (800604c <BSP_HeartBeat+0x10>)
 8006044:	f7ff ffea 	bl	800601c <bspLedToggle>
}
 8006048:	bf00      	nop
 800604a:	bd80      	pop	{r7, pc}
 800604c:	48001000 	.word	0x48001000

08006050 <BSP_ErrorLed>:

/*
 * Error LED, RED
 */
void BSP_ErrorLed(bool on)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	71fb      	strb	r3, [r7, #7]
    bspLedSet(BSP_LED2_PORT, BSP_LED2_PIN, on);
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	461a      	mov	r2, r3
 800605e:	2104      	movs	r1, #4
 8006060:	4803      	ldr	r0, [pc, #12]	; (8006070 <BSP_ErrorLed+0x20>)
 8006062:	f7ff ffbf 	bl	8005fe4 <bspLedSet>
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	48001000 	.word	0x48001000

08006074 <BSP_FuncLed1>:

/*
 * Custom function 1 LED
 */
void BSP_FuncLed1(bool on)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	71fb      	strb	r3, [r7, #7]
    bspLedSet(BSP_LED1_PORT, BSP_LED1_PIN, on);
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	461a      	mov	r2, r3
 8006082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006086:	4803      	ldr	r0, [pc, #12]	; (8006094 <BSP_FuncLed1+0x20>)
 8006088:	f7ff ffac 	bl	8005fe4 <bspLedSet>
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	48000800 	.word	0x48000800

08006098 <BSP_spi2_write_and_read>:
{
    MX_Led_Toggle();
}

uint32_t BSP_spi2_write_and_read(uint8_t *pBufferTx, uint8_t *pBufferRx, uint32_t nbBytes, bool useDma)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Write_Read(pBufferTx,  pBufferRx,  nbBytes, useDma);
 80060a6:	78fb      	ldrb	r3, [r7, #3]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f001 f9cb 	bl	8007448 <HAL_SPI_Write_Read>

    return 0;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <BSP_spi2_register_callback>:

extern uint32_t HAL_SPI_Register_Callback(ADI_CB const *pfCallback, void *const pCBParam);
uint32_t BSP_spi2_register_callback(ADI_CB const *pfCallback, void *const pCBParam)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  HAL_SPI_Register_Callback(pfCallback,  pCBParam);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 f9e9 	bl	80074a0 <HAL_SPI_Register_Callback>
  return 0;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <BSP_RegisterIRQCallback>:
    *value = returnVal ;
}

extern uint32_t HAL_INT_N_Register_Callback(ADI_CB const *pfCallback, void *const pCBParam);
uint32_t BSP_RegisterIRQCallback(ADI_CB const *intCallback, void * hDevice)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  return HAL_INT_N_Register_Callback(intCallback,  hDevice);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fa2f 	bl	8006548 <HAL_INT_N_Register_Callback>
 80060ea:	4603      	mov	r3, r0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <msgWrite>:

uint32_t msgWrite(char * ptr)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t error = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
  if(ptr == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <msgWrite+0x18>
  {
    error = 1;
 8006106:	2301      	movs	r3, #1
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e007      	b.n	800611c <msgWrite+0x28>
  }
  else
  {
    submitTxBuffer ((uint8_t*)ptr, strlen(ptr));
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fa f881 	bl	8000214 <strlen>
 8006112:	4603      	mov	r3, r0
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 fe92 	bl	8007e40 <submitTxBuffer>
  }
  return error;
 800611c:	68fb      	ldr	r3, [r7, #12]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <BSP_SysNow>:

uint32_t BSP_SysNow(void)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800612a:	f001 ff39 	bl	8007fa0 <HAL_GetTick>
 800612e:	4603      	mov	r3, r0
}
 8006130:	4618      	mov	r0, r3
 8006132:	bd80      	pop	{r7, pc}

08006134 <BSP_InitSystem>:


uint32_t BSP_InitSystem(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef     result = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	71fb      	strb	r3, [r7, #7]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  result = HAL_Init();
 800613e:	f001 fec6 	bl	8007ece <HAL_Init>
 8006142:	4603      	mov	r3, r0
 8006144:	71fb      	strb	r3, [r7, #7]
  if (result != HAL_OK)
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d118      	bne.n	800617e <BSP_InitSystem+0x4a>
  {
    goto end;
  }

  /* Configure the system clock */
  result = SystemClock_Config();
 800614c:	f001 fb07 	bl	800775e <SystemClock_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	71fb      	strb	r3, [r7, #7]
  if (result != HAL_OK)
 8006154:	79fb      	ldrb	r3, [r7, #7]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d113      	bne.n	8006182 <BSP_InitSystem+0x4e>
  {
    goto end;
  }

  /* Initialize all configured peripherals */
  GPIO_Init();
 800615a:	f000 f8c3 	bl	80062e4 <GPIO_Init>
  DMA_Init();
 800615e:	f000 f85d 	bl	800621c <DMA_Init>

  result = ETH_SPI_Init();
 8006162:	f001 f857 	bl	8007214 <ETH_SPI_Init>
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
  if (result != HAL_OK)
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <BSP_InitSystem+0x52>
  {
    goto end;
  }

  result = MX_USART1_UART_Init();
 8006170:	f001 fdf8 	bl	8007d64 <MX_USART1_UART_Init>
 8006174:	4603      	mov	r3, r0
 8006176:	71fb      	strb	r3, [r7, #7]
  if (result != HAL_OK)
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	2b00      	cmp	r3, #0
  {
    goto end;
  }

end:
 800617c:	e004      	b.n	8006188 <BSP_InitSystem+0x54>
    goto end;
 800617e:	bf00      	nop
 8006180:	e002      	b.n	8006188 <BSP_InitSystem+0x54>
    goto end;
 8006182:	bf00      	nop
 8006184:	e000      	b.n	8006188 <BSP_InitSystem+0x54>
    goto end;
 8006186:	bf00      	nop
  return (uint32_t)result;
 8006188:	79fb      	ldrb	r3, [r7, #7]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <common_Fail>:

char aDebugString[150u];

void common_Fail(char *FailureReason)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
    char fail[] = "Failed: ";
 800619c:	4a0f      	ldr	r2, [pc, #60]	; (80061dc <common_Fail+0x48>)
 800619e:	f107 030c 	add.w	r3, r7, #12
 80061a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80061a4:	c303      	stmia	r3!, {r0, r1}
 80061a6:	701a      	strb	r2, [r3, #0]
    char term[] = "\n\r";
 80061a8:	4a0d      	ldr	r2, [pc, #52]	; (80061e0 <common_Fail+0x4c>)
 80061aa:	f107 0308 	add.w	r3, r7, #8
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	4611      	mov	r1, r2
 80061b2:	8019      	strh	r1, [r3, #0]
 80061b4:	3302      	adds	r3, #2
 80061b6:	0c12      	lsrs	r2, r2, #16
 80061b8:	701a      	strb	r2, [r3, #0]

    /* Ignore return codes since there's nothing we can do if it fails */
    msgWrite(fail);
 80061ba:	f107 030c 	add.w	r3, r7, #12
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff ff98 	bl	80060f4 <msgWrite>
    msgWrite(FailureReason);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff ff95 	bl	80060f4 <msgWrite>
    msgWrite(term);
 80061ca:	f107 0308 	add.w	r3, r7, #8
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff ff90 	bl	80060f4 <msgWrite>
 }
 80061d4:	bf00      	nop
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	0801a490 	.word	0x0801a490
 80061e0:	0801a49c 	.word	0x0801a49c

080061e4 <common_Perf>:

void common_Perf(char *InfoString)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
    char term[] = "\n\r";
 80061ec:	4a0a      	ldr	r2, [pc, #40]	; (8006218 <common_Perf+0x34>)
 80061ee:	f107 030c 	add.w	r3, r7, #12
 80061f2:	6812      	ldr	r2, [r2, #0]
 80061f4:	4611      	mov	r1, r2
 80061f6:	8019      	strh	r1, [r3, #0]
 80061f8:	3302      	adds	r3, #2
 80061fa:	0c12      	lsrs	r2, r2, #16
 80061fc:	701a      	strb	r2, [r3, #0]

    /* Ignore return codes since there's nothing we can do if it fails */
    msgWrite(InfoString);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff ff78 	bl	80060f4 <msgWrite>
    msgWrite(term);
 8006204:	f107 030c 	add.w	r3, r7, #12
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff ff73 	bl	80060f4 <msgWrite>
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	0801a49c 	.word	0x0801a49c

0800621c <DMA_Init>:

/**
  * Enable DMA controller clock
  */
void DMA_Init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006222:	4b16      	ldr	r3, [pc, #88]	; (800627c <DMA_Init+0x60>)
 8006224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006226:	4a15      	ldr	r2, [pc, #84]	; (800627c <DMA_Init+0x60>)
 8006228:	f043 0304 	orr.w	r3, r3, #4
 800622c:	6493      	str	r3, [r2, #72]	; 0x48
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <DMA_Init+0x60>)
 8006230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800623a:	4b10      	ldr	r3, [pc, #64]	; (800627c <DMA_Init+0x60>)
 800623c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623e:	4a0f      	ldr	r2, [pc, #60]	; (800627c <DMA_Init+0x60>)
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	6493      	str	r3, [r2, #72]	; 0x48
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <DMA_Init+0x60>)
 8006248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006252:	2200      	movs	r2, #0
 8006254:	2100      	movs	r1, #0
 8006256:	200b      	movs	r0, #11
 8006258:	f001 ffad 	bl	80081b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800625c:	200b      	movs	r0, #11
 800625e:	f001 ffc6 	bl	80081ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006262:	2200      	movs	r2, #0
 8006264:	2100      	movs	r1, #0
 8006266:	200c      	movs	r0, #12
 8006268:	f001 ffa5 	bl	80081b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800626c:	200c      	movs	r0, #12
 800626e:	f001 ffbe 	bl	80081ee <HAL_NVIC_EnableIRQ>

}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40021000 	.word	0x40021000

08006280 <HAL_FcsInit>:
	0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
	0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};

uint32_t HAL_FcsInit(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
    /* Nothing to initialize for software FCS. */
    return ADI_HAL_SUCCESS;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_FcsCalculate>:
    /* Nothing to un-initialize for software FCS. */
    return ADI_HAL_SUCCESS;
}

uint32_t HAL_FcsCalculate(uint8_t *pBuf, uint32_t nbBytes)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
    const uint8_t *p = pBuf;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60fb      	str	r3, [r7, #12]
    uint32_t crc;

    crc = ~0U;
 800629e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062a2:	60bb      	str	r3, [r7, #8]
    while (nbBytes--)
 80062a4:	e00e      	b.n	80062c4 <HAL_FcsCalculate+0x34>
       crc = crc32_tab[(crc ^ *p++) & 0xFF] ^ (crc >> 8);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	60fa      	str	r2, [r7, #12]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4053      	eors	r3, r2
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	4a0a      	ldr	r2, [pc, #40]	; (80062e0 <HAL_FcsCalculate+0x50>)
 80062b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	4053      	eors	r3, r2
 80062c2:	60bb      	str	r3, [r7, #8]
    while (nbBytes--)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	1e5a      	subs	r2, r3, #1
 80062c8:	603a      	str	r2, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1eb      	bne.n	80062a6 <HAL_FcsCalculate+0x16>
    return crc ^ ~0U;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	43db      	mvns	r3, r3
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	0801a7dc 	.word	0x0801a7dc

080062e4 <GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void GPIO_Init(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08e      	sub	sp, #56	; 0x38
 80062e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	605a      	str	r2, [r3, #4]
 80062f4:	609a      	str	r2, [r3, #8]
 80062f6:	60da      	str	r2, [r3, #12]
 80062f8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    ETH_GPIO_ENABLE;
 80062fa:	4b8e      	ldr	r3, [pc, #568]	; (8006534 <GPIO_Init+0x250>)
 80062fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fe:	4a8d      	ldr	r2, [pc, #564]	; (8006534 <GPIO_Init+0x250>)
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006306:	4b8b      	ldr	r3, [pc, #556]	; (8006534 <GPIO_Init+0x250>)
 8006308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	623b      	str	r3, [r7, #32]
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	4b88      	ldr	r3, [pc, #544]	; (8006534 <GPIO_Init+0x250>)
 8006314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006316:	4a87      	ldr	r2, [pc, #540]	; (8006534 <GPIO_Init+0x250>)
 8006318:	f043 0302 	orr.w	r3, r3, #2
 800631c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800631e:	4b85      	ldr	r3, [pc, #532]	; (8006534 <GPIO_Init+0x250>)
 8006320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4b82      	ldr	r3, [pc, #520]	; (8006534 <GPIO_Init+0x250>)
 800632c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800632e:	4a81      	ldr	r2, [pc, #516]	; (8006534 <GPIO_Init+0x250>)
 8006330:	f043 0304 	orr.w	r3, r3, #4
 8006334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006336:	4b7f      	ldr	r3, [pc, #508]	; (8006534 <GPIO_Init+0x250>)
 8006338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	61bb      	str	r3, [r7, #24]
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	4b7c      	ldr	r3, [pc, #496]	; (8006534 <GPIO_Init+0x250>)
 8006344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006346:	4a7b      	ldr	r2, [pc, #492]	; (8006534 <GPIO_Init+0x250>)
 8006348:	f043 0308 	orr.w	r3, r3, #8
 800634c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800634e:	4b79      	ldr	r3, [pc, #484]	; (8006534 <GPIO_Init+0x250>)
 8006350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4b76      	ldr	r3, [pc, #472]	; (8006534 <GPIO_Init+0x250>)
 800635c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635e:	4a75      	ldr	r2, [pc, #468]	; (8006534 <GPIO_Init+0x250>)
 8006360:	f043 0310 	orr.w	r3, r3, #16
 8006364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006366:	4b73      	ldr	r3, [pc, #460]	; (8006534 <GPIO_Init+0x250>)
 8006368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4b70      	ldr	r3, [pc, #448]	; (8006534 <GPIO_Init+0x250>)
 8006374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006376:	4a6f      	ldr	r2, [pc, #444]	; (8006534 <GPIO_Init+0x250>)
 8006378:	f043 0320 	orr.w	r3, r3, #32
 800637c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800637e:	4b6d      	ldr	r3, [pc, #436]	; (8006534 <GPIO_Init+0x250>)
 8006380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4b6a      	ldr	r3, [pc, #424]	; (8006534 <GPIO_Init+0x250>)
 800638c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638e:	4a69      	ldr	r2, [pc, #420]	; (8006534 <GPIO_Init+0x250>)
 8006390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006396:	4b67      	ldr	r3, [pc, #412]	; (8006534 <GPIO_Init+0x250>)
 8006398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	60bb      	str	r3, [r7, #8]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4b64      	ldr	r3, [pc, #400]	; (8006534 <GPIO_Init+0x250>)
 80063a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a6:	4a63      	ldr	r2, [pc, #396]	; (8006534 <GPIO_Init+0x250>)
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063ae:	4b61      	ldr	r3, [pc, #388]	; (8006534 <GPIO_Init+0x250>)
 80063b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	607b      	str	r3, [r7, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
#if defined(EVAL_ADIN1110EBZ)
    HAL_GPIO_WritePin(BSP_LED1_PORT, BSP_LED1_PIN, GPIO_PIN_SET);
 80063ba:	2201      	movs	r2, #1
 80063bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063c0:	485d      	ldr	r0, [pc, #372]	; (8006538 <GPIO_Init+0x254>)
 80063c2:	f002 fbfd 	bl	8008bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BSP_LED2_PORT, BSP_LED2_PIN, GPIO_PIN_SET);
 80063c6:	2201      	movs	r2, #1
 80063c8:	2104      	movs	r1, #4
 80063ca:	485c      	ldr	r0, [pc, #368]	; (800653c <GPIO_Init+0x258>)
 80063cc:	f002 fbf8 	bl	8008bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BSP_LED3_PORT, BSP_LED3_PIN, GPIO_PIN_SET);
 80063d0:	2201      	movs	r2, #1
 80063d2:	2140      	movs	r1, #64	; 0x40
 80063d4:	4859      	ldr	r0, [pc, #356]	; (800653c <GPIO_Init+0x258>)
 80063d6:	f002 fbf3 	bl	8008bc0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BSP_LED4_PORT, BSP_LED4_PIN, GPIO_PIN_SET);
 80063da:	2201      	movs	r2, #1
 80063dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063e0:	4857      	ldr	r0, [pc, #348]	; (8006540 <GPIO_Init+0x25c>)
 80063e2:	f002 fbed 	bl	8008bc0 <HAL_GPIO_WritePin>

    HAL_PWREx_EnableVddIO2();
 80063e6:	f002 fd19 	bl	8008e1c <HAL_PWREx_EnableVddIO2>
    HAL_GPIO_WritePin(BSP_LED2_PORT, BSP_LED2_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(BSP_LED3_PORT, BSP_LED3_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(BSP_LED4_PORT, BSP_LED4_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(BSP_LED5_PORT, BSP_LED5_PIN, GPIO_PIN_RESET);
#endif
    HAL_GPIO_WritePin(ETH_SPI_SS_GPIO_Port, ETH_SPI_SS_Pin, GPIO_PIN_RESET);
 80063ea:	2200      	movs	r2, #0
 80063ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80063f0:	4854      	ldr	r0, [pc, #336]	; (8006544 <GPIO_Init+0x260>)
 80063f2:	f002 fbe5 	bl	8008bc0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 80063f6:	2201      	movs	r2, #1
 80063f8:	2180      	movs	r1, #128	; 0x80
 80063fa:	484f      	ldr	r0, [pc, #316]	; (8006538 <GPIO_Init+0x254>)
 80063fc:	f002 fbe0 	bl	8008bc0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = ETH_RESET_Pin;
 8006400:	2380      	movs	r3, #128	; 0x80
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006404:	2301      	movs	r3, #1
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006408:	2301      	movs	r3, #1
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800640c:	2300      	movs	r3, #0
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(ETH_RESET_GPIO_Port, &GPIO_InitStruct);
 8006410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006414:	4619      	mov	r1, r3
 8006416:	4848      	ldr	r0, [pc, #288]	; (8006538 <GPIO_Init+0x254>)
 8006418:	f002 fa40 	bl	800889c <HAL_GPIO_Init>

    /*Configure GPIO pins : PEPin PEPin */
    GPIO_InitStruct.Pin = BSP_LED4_PIN;
 800641c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006422:	2301      	movs	r3, #1
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006426:	2300      	movs	r3, #0
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800642a:	2300      	movs	r3, #0
 800642c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(BSP_LED4_PORT, &GPIO_InitStruct);
 800642e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006432:	4619      	mov	r1, r3
 8006434:	4842      	ldr	r0, [pc, #264]	; (8006540 <GPIO_Init+0x25c>)
 8006436:	f002 fa31 	bl	800889c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BSP_LED2_PIN;
 800643a:	2304      	movs	r3, #4
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800643e:	2301      	movs	r3, #1
 8006440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006442:	2300      	movs	r3, #0
 8006444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006446:	2300      	movs	r3, #0
 8006448:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(BSP_LED2_PORT, &GPIO_InitStruct);
 800644a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800644e:	4619      	mov	r1, r3
 8006450:	483a      	ldr	r0, [pc, #232]	; (800653c <GPIO_Init+0x258>)
 8006452:	f002 fa23 	bl	800889c <HAL_GPIO_Init>

    /*Configure GPIO pins : PBPin PBPin PBPin */
    GPIO_InitStruct.Pin = BSP_LED1_PIN;
 8006456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800645c:	2301      	movs	r3, #1
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006460:	2300      	movs	r3, #0
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006464:	2300      	movs	r3, #0
 8006466:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(BSP_LED1_PORT, &GPIO_InitStruct);
 8006468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800646c:	4619      	mov	r1, r3
 800646e:	4832      	ldr	r0, [pc, #200]	; (8006538 <GPIO_Init+0x254>)
 8006470:	f002 fa14 	bl	800889c <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(BSP_LED5_PORT, &GPIO_InitStruct);
#endif

    GPIO_InitStruct.Pin = BSP_LED3_PIN;
 8006474:	2340      	movs	r3, #64	; 0x40
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006478:	2301      	movs	r3, #1
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647c:	2300      	movs	r3, #0
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006480:	2300      	movs	r3, #0
 8006482:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(BSP_LED3_PORT, &GPIO_InitStruct);
 8006484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006488:	4619      	mov	r1, r3
 800648a:	482c      	ldr	r0, [pc, #176]	; (800653c <GPIO_Init+0x258>)
 800648c:	f002 fa06 	bl	800889c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_SPI_SS_Pin;
 8006490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006496:	2301      	movs	r3, #1
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649a:	2300      	movs	r3, #0
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800649e:	2300      	movs	r3, #0
 80064a0:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(ETH_SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80064a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a6:	4619      	mov	r1, r3
 80064a8:	4826      	ldr	r0, [pc, #152]	; (8006544 <GPIO_Init+0x260>)
 80064aa:	f002 f9f7 	bl	800889c <HAL_GPIO_Init>

    /*Configure GPIO pins : PBPin PBPin PBPin */
    GPIO_InitStruct.Pin = CFG0_Pin;
 80064ae:	2301      	movs	r3, #1
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064b2:	2300      	movs	r3, #0
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CFG0_GPIO_Port, &GPIO_InitStruct);
 80064ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064be:	4619      	mov	r1, r3
 80064c0:	4820      	ldr	r0, [pc, #128]	; (8006544 <GPIO_Init+0x260>)
 80064c2:	f002 f9eb 	bl	800889c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CFG1_Pin;
 80064c6:	2302      	movs	r3, #2
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064ca:	2300      	movs	r3, #0
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ce:	2300      	movs	r3, #0
 80064d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CFG1_GPIO_Port, &GPIO_InitStruct);
 80064d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d6:	4619      	mov	r1, r3
 80064d8:	481a      	ldr	r0, [pc, #104]	; (8006544 <GPIO_Init+0x260>)
 80064da:	f002 f9df 	bl	800889c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CFG2_Pin;
 80064de:	2304      	movs	r3, #4
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064e2:	2300      	movs	r3, #0
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CFG2_GPIO_Port, &GPIO_InitStruct);
 80064ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ee:	4619      	mov	r1, r3
 80064f0:	4814      	ldr	r0, [pc, #80]	; (8006544 <GPIO_Init+0x260>)
 80064f2:	f002 f9d3 	bl	800889c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CFG3_Pin;
 80064f6:	2320      	movs	r3, #32
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064fa:	2300      	movs	r3, #0
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CFG3_GPIO_Port, &GPIO_InitStruct);
 8006502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006506:	4619      	mov	r1, r3
 8006508:	480e      	ldr	r0, [pc, #56]	; (8006544 <GPIO_Init+0x260>)
 800650a:	f002 f9c7 	bl	800889c <HAL_GPIO_Init>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800650e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006514:	2300      	movs	r3, #0
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = ETH_INT_N_Pin;
 8006518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ETH_INT_N_GPIO_Port, &GPIO_InitStruct);
 800651e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006522:	4619      	mov	r1, r3
 8006524:	4807      	ldr	r0, [pc, #28]	; (8006544 <GPIO_Init+0x260>)
 8006526:	f002 f9b9 	bl	800889c <HAL_GPIO_Init>
}
 800652a:	bf00      	nop
 800652c:	3738      	adds	r7, #56	; 0x38
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40021000 	.word	0x40021000
 8006538:	48000800 	.word	0x48000800
 800653c:	48001000 	.word	0x48001000
 8006540:	48001800 	.word	0x48001800
 8006544:	48000400 	.word	0x48000400

08006548 <HAL_INT_N_Register_Callback>:
}
/* USER CODE END 2 */


uint32_t HAL_INT_N_Register_Callback(ADI_CB const *pfCallback, void *const pCBParam)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
    HAL_NVIC_SetPriority(ETH_INT_N_IRQn, 0xF, 0);
 8006552:	2200      	movs	r2, #0
 8006554:	210f      	movs	r1, #15
 8006556:	2028      	movs	r0, #40	; 0x28
 8006558:	f001 fe2d 	bl	80081b6 <HAL_NVIC_SetPriority>

    gpfIntCallback = (ADI_CB)pfCallback;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a05      	ldr	r2, [pc, #20]	; (8006574 <HAL_INT_N_Register_Callback+0x2c>)
 8006560:	6013      	str	r3, [r2, #0]
    gpIntCBParam = pCBParam ;
 8006562:	4a05      	ldr	r2, [pc, #20]	; (8006578 <HAL_INT_N_Register_Callback+0x30>)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6013      	str	r3, [r2, #0]

    return 0;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200011fc 	.word	0x200011fc
 8006578:	20001200 	.word	0x20001200

0800657c <HAL_GPIO_EXTI_Callback>:
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	80fb      	strh	r3, [r7, #6]
   if (GPIO_Pin == ETH_INT_N_Pin)
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800658c:	d10a      	bne.n	80065a4 <HAL_GPIO_EXTI_Callback+0x28>
  {
    if (gpfIntCallback)
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <HAL_GPIO_EXTI_Callback+0x30>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d006      	beq.n	80065a4 <HAL_GPIO_EXTI_Callback+0x28>
    {
        (*gpfIntCallback)(gpIntCBParam, 0, NULL);
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_GPIO_EXTI_Callback+0x30>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a05      	ldr	r2, [pc, #20]	; (80065b0 <HAL_GPIO_EXTI_Callback+0x34>)
 800659c:	6810      	ldr	r0, [r2, #0]
 800659e:	2200      	movs	r2, #0
 80065a0:	2100      	movs	r1, #0
 80065a2:	4798      	blx	r3
    }
  }

}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	200011fc 	.word	0x200011fc
 80065b0:	20001200 	.word	0x20001200

080065b4 <HAL_INT_N_DisableIRQ>:


uint32_t HAL_INT_N_DisableIRQ(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(ETH_INT_N_IRQn);
 80065b8:	2028      	movs	r0, #40	; 0x28
 80065ba:	f001 fe26 	bl	800820a <HAL_NVIC_DisableIRQ>

    return 0;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_INT_N_EnableIRQ>:

uint32_t HAL_INT_N_EnableIRQ(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
    HAL_NVIC_EnableIRQ(ETH_INT_N_IRQn);
 80065c8:	2028      	movs	r0, #40	; 0x28
 80065ca:	f001 fe10 	bl	80081ee <HAL_NVIC_EnableIRQ>

    return 0;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <__NVIC_GetEnableIRQ>:
  \return             0  Interrupt is not enabled.
  \return             1  Interrupt is enabled.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	4603      	mov	r3, r0
 80065dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	db0d      	blt.n	8006602 <__NVIC_GetEnableIRQ+0x2e>
  {
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80065e6:	4a0a      	ldr	r2, [pc, #40]	; (8006610 <__NVIC_GetEnableIRQ+0x3c>)
 80065e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	e000      	b.n	8006604 <__NVIC_GetEnableIRQ+0x30>
  }
  else
  {
    return(0U);
 8006602:	2300      	movs	r3, #0
  }
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	e000e100 	.word	0xe000e100

08006614 <HAL_DisableIrq>:
#endif
}
#endif

uint32_t HAL_DisableIrq(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
    HAL_INT_N_DisableIRQ();
 8006618:	f7ff ffcc 	bl	80065b4 <HAL_INT_N_DisableIRQ>

    return ADI_HAL_SUCCESS;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_EnableIrq>:

uint32_t HAL_EnableIrq(void)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	af00      	add	r7, sp, #0
    HAL_INT_N_EnableIRQ();
 8006626:	f7ff ffcd 	bl	80065c4 <HAL_INT_N_EnableIRQ>

    return ADI_HAL_SUCCESS;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_GetEnableIrq>:
{
    return NVIC_GetPendingIRQ(EXTI15_10_IRQn);
}

uint32_t HAL_GetEnableIrq(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
    return NVIC_GetEnableIRQ(EXTI15_10_IRQn);
 8006634:	2028      	movs	r0, #40	; 0x28
 8006636:	f7ff ffcd 	bl	80065d4 <__NVIC_GetEnableIRQ>
 800663a:	4603      	mov	r3, r0
}
 800663c:	4618      	mov	r0, r3
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_RegisterCallback>:
 * @details
 *
 * @sa
 */
uint32_t HAL_RegisterCallback(HAL_Callback_t const *intCallback, void * hDevice)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
    return BSP_RegisterIRQCallback (intCallback, hDevice);
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fd43 	bl	80060d8 <BSP_RegisterIRQCallback>
 8006652:	4603      	mov	r3, r0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_SpiReadWrite>:
 * @details
 *
 * @sa
 */
uint32_t HAL_SpiReadWrite(uint8_t *pBufferTx, uint8_t *pBufferRx, uint32_t nbBytes, bool useDma)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	70fb      	strb	r3, [r7, #3]
    return BSP_spi2_write_and_read (pBufferTx, pBufferRx, nbBytes, useDma);
 800666a:	78fb      	ldrb	r3, [r7, #3]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	68b9      	ldr	r1, [r7, #8]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff fd11 	bl	8006098 <BSP_spi2_write_and_read>
 8006676:	4603      	mov	r3, r0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_SpiRegisterCallback>:
 * @details
 *
 * @sa
 */
uint32_t HAL_SpiRegisterCallback(HAL_Callback_t const *spiCallback, void * hDevice)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
    return BSP_spi2_register_callback (spiCallback, hDevice);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff fd15 	bl	80060bc <BSP_spi2_register_callback>
 8006692:	4603      	mov	r3, r0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_Init_Hook>:

uint32_t HAL_Init_Hook(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
    return ADI_HAL_SUCCESS;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <txCallback>:
adi_eth_LinkStatus_e linkState ;



static void txCallback(void *pCBParam, uint32_t Event, void *pArg)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
    txBufAvailable[0] = true;
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <txCallback+0x20>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	701a      	strb	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20004f1c 	.word	0x20004f1c

080066d0 <rxCallback>:

static void rxCallback(void *pCBParam, uint32_t Event, void *pArg)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
    adin1110_DeviceHandle_t hDevice = (adin1110_DeviceHandle_t)pCBParam;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	61fb      	str	r3, [r7, #28]
    adi_eth_BufDesc_t       *pRxBufDesc;

    pRxBufDesc = (adi_eth_BufDesc_t *)pArg;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	61bb      	str	r3, [r7, #24]

    uint16_t frmLen = pRxBufDesc->trxSize;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	82fb      	strh	r3, [r7, #22]

    int unicast = ((pRxBufDesc->pBuf[0] & 0x01) == 0);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bf0c      	ite	eq
 80066f8:	2301      	moveq	r3, #1
 80066fa:	2300      	movne	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	613b      	str	r3, [r7, #16]

    LINK_STATS_INC(link.recv);
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <rxCallback+0x70>)
 8006702:	885b      	ldrh	r3, [r3, #2]
 8006704:	3301      	adds	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	4b0d      	ldr	r3, [pc, #52]	; (8006740 <rxCallback+0x70>)
 800670a:	805a      	strh	r2, [r3, #2]
    else
    {
      MIB2_STATS_NETIF_INC(netif, ifinnucastpkts);
    }

    writePQ(&pQ[0], pRxBufDesc->pBuf, frmLen);
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	8afa      	ldrh	r2, [r7, #22]
 8006712:	4619      	mov	r1, r3
 8006714:	480b      	ldr	r0, [pc, #44]	; (8006744 <rxCallback+0x74>)
 8006716:	f000 fbf7 	bl	8006f08 <writePQ>
    /* Since we're not doing anything with the Rx buffer in this example, */
    /* we are re-submitting it to the queue. */
    rxBufDesc[0].pBuf = &rxBuf[0][0];
 800671a:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <rxCallback+0x78>)
 800671c:	4a0b      	ldr	r2, [pc, #44]	; (800674c <rxCallback+0x7c>)
 800671e:	601a      	str	r2, [r3, #0]
    rxBufDesc[0].bufSize = MAX_FRAME_BUF_SIZE;
 8006720:	4b09      	ldr	r3, [pc, #36]	; (8006748 <rxCallback+0x78>)
 8006722:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006726:	605a      	str	r2, [r3, #4]
    rxBufDesc[0].cbFunc = rxCallback;
 8006728:	4b07      	ldr	r3, [pc, #28]	; (8006748 <rxCallback+0x78>)
 800672a:	4a09      	ldr	r2, [pc, #36]	; (8006750 <rxCallback+0x80>)
 800672c:	60da      	str	r2, [r3, #12]
    adin1110_SubmitRxBuffer(hDevice, pRxBufDesc);
 800672e:	69b9      	ldr	r1, [r7, #24]
 8006730:	69f8      	ldr	r0, [r7, #28]
 8006732:	f7ff fbf9 	bl	8005f28 <adin1110_SubmitRxBuffer>
}
 8006736:	bf00      	nop
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	2000770c 	.word	0x2000770c
 8006744:	20004f28 	.word	0x20004f28
 8006748:	20002fc8 	.word	0x20002fc8
 800674c:	20001204 	.word	0x20001204
 8006750:	080066d1 	.word	0x080066d1

08006754 <cbLinkChange>:

void cbLinkChange(void *pCBParam, uint32_t Event, void *pArg)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
    adi_eth_LinkStatus_e    linkStatus;

    linkStatus = *(adi_eth_LinkStatus_e *)pArg;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	75fb      	strb	r3, [r7, #23]
    linkState = linkStatus;
 8006766:	4a06      	ldr	r2, [pc, #24]	; (8006780 <cbLinkChange+0x2c>)
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	7013      	strb	r3, [r2, #0]
    linkStatusChanged = true;
 800676c:	4b05      	ldr	r3, [pc, #20]	; (8006784 <cbLinkChange+0x30>)
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
    (void)linkStatus;
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	200070cd 	.word	0x200070cd
 8006784:	200070cc 	.word	0x200070cc

08006788 <sys_now>:
    return result;
}


uint32_t sys_now(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  return BSP_SysNow();
 800678c:	f7ff fccb 	bl	8006126 <BSP_SysNow>
 8006790:	4603      	mov	r3, r0
}
 8006792:	4618      	mov	r0, r3
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <LwIP_ADIN1110LinkInput>:

err_t LwIP_ADIN1110LinkInput(struct netif *netif)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
    if (pDataAvailable(&pQ[0]) == 0)
 80067a0:	4811      	ldr	r0, [pc, #68]	; (80067e8 <LwIP_ADIN1110LinkInput+0x50>)
 80067a2:	f000 fb97 	bl	8006ed4 <pDataAvailable>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <LwIP_ADIN1110LinkInput+0x18>
    {
      return ERR_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	e017      	b.n	80067e0 <LwIP_ADIN1110LinkInput+0x48>
    }
    else
    {
      struct pbuf *p = (struct pbuf *)readPQ(&pQ[0]);
 80067b0:	480d      	ldr	r0, [pc, #52]	; (80067e8 <LwIP_ADIN1110LinkInput+0x50>)
 80067b2:	f000 fbef 	bl	8006f94 <readPQ>
 80067b6:	60f8      	str	r0, [r7, #12]
      if (p == NULL)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <LwIP_ADIN1110LinkInput+0x2c>
      {
        return ERR_MEM;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067c2:	e00d      	b.n	80067e0 <LwIP_ADIN1110LinkInput+0x48>
      }

      if (netif->input(p, netif) != ERR_OK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	4798      	blx	r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <LwIP_ADIN1110LinkInput+0x46>
      {
        LWIP_DEBUGF(NETIF_DEBUG, ("IP input error\r\n"));
        pbuf_free(p);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f008 fb31 	bl	800ee3c <pbuf_free>
        p = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
      }
    }
   return  ERR_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20004f28 	.word	0x20004f28

080067ec <low_level_output>:


static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
   LwIP_ADIN1110_t* eth = (LwIP_ADIN1110_t*) netif->state;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	617b      	str	r3, [r7, #20]

    adin1110_DeviceHandle_t *hDevice =   eth->hDevice;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	613b      	str	r3, [r7, #16]

    struct pbuf *pp;
    uint16_t frameLen = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	81fb      	strh	r3, [r7, #14]
    int total_len = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	61bb      	str	r3, [r7, #24]

    for(pp = p, total_len = 0; pp != NULL; pp = pp->next)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	2300      	movs	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	e025      	b.n	8006860 <low_level_output+0x74>
    {
      frameLen =  pp->len ;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	895b      	ldrh	r3, [r3, #10]
 8006818:	81fb      	strh	r3, [r7, #14]

      if(frameLen < 2)
 800681a:	89fb      	ldrh	r3, [r7, #14]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d91b      	bls.n	8006858 <low_level_output+0x6c>
      {
        continue;
      }

      memcpy(txBuf[txBufIndex] + total_len  ,(unsigned char*) pp->payload, frameLen);
 8006820:	4b45      	ldr	r3, [pc, #276]	; (8006938 <low_level_output+0x14c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006828:	fb02 f303 	mul.w	r3, r2, r3
 800682c:	4a43      	ldr	r2, [pc, #268]	; (800693c <low_level_output+0x150>)
 800682e:	441a      	add	r2, r3
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	18d0      	adds	r0, r2, r3
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	89fa      	ldrh	r2, [r7, #14]
 800683a:	4619      	mov	r1, r3
 800683c:	f012 ffb1 	bl	80197a2 <memcpy>
      total_len += frameLen ;
 8006840:	89fb      	ldrh	r3, [r7, #14]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	4413      	add	r3, r2
 8006846:	61bb      	str	r3, [r7, #24]

      if(total_len >= MAX_FRAME_BUF_SIZE)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	f240 52f3 	movw	r2, #1523	; 0x5f3
 800684e:	4293      	cmp	r3, r2
 8006850:	dd03      	ble.n	800685a <low_level_output+0x6e>
      {
        return ERR_VAL;
 8006852:	f06f 0305 	mvn.w	r3, #5
 8006856:	e06b      	b.n	8006930 <low_level_output+0x144>
        continue;
 8006858:	bf00      	nop
    for(pp = p, total_len = 0; pp != NULL; pp = pp->next)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1d6      	bne.n	8006814 <low_level_output+0x28>
      }
    }

    LINK_STATS_INC(link.xmit);
 8006866:	4b36      	ldr	r3, [pc, #216]	; (8006940 <low_level_output+0x154>)
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	3301      	adds	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	4b34      	ldr	r3, [pc, #208]	; (8006940 <low_level_output+0x154>)
 8006870:	801a      	strh	r2, [r3, #0]
    MIB2_STATS_NETIF_ADD(netif, ifoutoctets, total_len);

    if(total_len < MIN_FRAME_SIZE) // Pad to minimum ETH size
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	2b3b      	cmp	r3, #59	; 0x3b
 8006876:	dc01      	bgt.n	800687c <low_level_output+0x90>
    {
      total_len = MIN_FRAME_SIZE;
 8006878:	233c      	movs	r3, #60	; 0x3c
 800687a:	61bb      	str	r3, [r7, #24]
    }

    txBufDesc[txBufIndex].pBuf = &txBuf[txBufIndex][0];
 800687c:	4b2e      	ldr	r3, [pc, #184]	; (8006938 <low_level_output+0x14c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a2d      	ldr	r2, [pc, #180]	; (8006938 <low_level_output+0x14c>)
 8006882:	6812      	ldr	r2, [r2, #0]
 8006884:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	492b      	ldr	r1, [pc, #172]	; (800693c <low_level_output+0x150>)
 800688e:	4419      	add	r1, r3
 8006890:	482c      	ldr	r0, [pc, #176]	; (8006944 <low_level_output+0x158>)
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	4403      	add	r3, r0
 800689c:	6019      	str	r1, [r3, #0]
    txBufDesc[txBufIndex].trxSize = total_len;
 800689e:	4b26      	ldr	r3, [pc, #152]	; (8006938 <low_level_output+0x14c>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	69b9      	ldr	r1, [r7, #24]
 80068a4:	4827      	ldr	r0, [pc, #156]	; (8006944 <low_level_output+0x158>)
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	4403      	add	r3, r0
 80068b0:	3308      	adds	r3, #8
 80068b2:	6019      	str	r1, [r3, #0]
    txBufDesc[txBufIndex].bufSize = MAX_FRAME_BUF_SIZE;
 80068b4:	4b20      	ldr	r3, [pc, #128]	; (8006938 <low_level_output+0x14c>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	4922      	ldr	r1, [pc, #136]	; (8006944 <low_level_output+0x158>)
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	440b      	add	r3, r1
 80068c4:	3304      	adds	r3, #4
 80068c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80068ca:	601a      	str	r2, [r3, #0]
    txBufDesc[txBufIndex].egressCapt = ADI_MAC_EGRESS_CAPTURE_NONE;
 80068cc:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <low_level_output+0x14c>)
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	491c      	ldr	r1, [pc, #112]	; (8006944 <low_level_output+0x158>)
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	440b      	add	r3, r1
 80068dc:	3318      	adds	r3, #24
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
    txBufDesc[txBufIndex].cbFunc = txCallback;
 80068e2:	4b15      	ldr	r3, [pc, #84]	; (8006938 <low_level_output+0x14c>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4917      	ldr	r1, [pc, #92]	; (8006944 <low_level_output+0x158>)
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	440b      	add	r3, r1
 80068f2:	330c      	adds	r3, #12
 80068f4:	4a14      	ldr	r2, [pc, #80]	; (8006948 <low_level_output+0x15c>)
 80068f6:	601a      	str	r2, [r3, #0]
    {
      /* unicast packet */
      MIB2_STATS_NETIF_INC(netif, ifoutucastpkts);
    }

    while(adin1110_SubmitTxBuffer(*hDevice, &txBufDesc[txBufIndex]) == ADI_ETH_QUEUE_FULL)
 80068f8:	bf00      	nop
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <low_level_output+0x14c>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	4a0e      	ldr	r2, [pc, #56]	; (8006944 <low_level_output+0x158>)
 800690c:	4413      	add	r3, r2
 800690e:	4619      	mov	r1, r3
 8006910:	f7ff fae8 	bl	8005ee4 <adin1110_SubmitTxBuffer>
 8006914:	4603      	mov	r3, r0
 8006916:	2b12      	cmp	r3, #18
 8006918:	d0ef      	beq.n	80068fa <low_level_output+0x10e>
    {
      ;;
    }

    if(txBufIndex ++ >= 1 )
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <low_level_output+0x14c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	4905      	ldr	r1, [pc, #20]	; (8006938 <low_level_output+0x14c>)
 8006922:	600a      	str	r2, [r1, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	dd02      	ble.n	800692e <low_level_output+0x142>
    {
      txBufIndex = 0;
 8006928:	4b03      	ldr	r3, [pc, #12]	; (8006938 <low_level_output+0x14c>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
    }
   return ERR_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3720      	adds	r7, #32
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20004f24 	.word	0x20004f24
 800693c:	20003090 	.word	0x20003090
 8006940:	2000770c 	.word	0x2000770c
 8006944:	20004e54 	.word	0x20004e54
 8006948:	080066ad 	.word	0x080066ad

0800694c <LwIP_ADIN1110LinkOutput>:

static err_t LwIP_ADIN1110LinkOutput(struct netif *netif, struct pbuf *p)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
    low_level_output(netif, p);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ff47 	bl	80067ec <low_level_output>
    return ERR_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <ssiHandler>:


static u16_t ssiHandler(const char* tag, char *insertBuffer, int insertBufferLen)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  return 1;
 8006974:	2301      	movs	r3, #1
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <LwIP_StructInit>:


adi_eth_Result_e LwIP_StructInit(LwIP_ADIN1110_t* eth, adin1110_DeviceHandle_t* hDevice, uint8_t macAddress[6])
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
  eth->hDevice = hDevice;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	601a      	str	r2, [r3, #0]
  eth->macAddress =  macAddress;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	63da      	str	r2, [r3, #60]	; 0x3c


  return ADI_ETH_SUCCESS;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <LwipADIN1110Init>:

static err_t LwipADIN1110Init(struct netif *netif)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
   LwIP_ADIN1110_t* eth = (LwIP_ADIN1110_t*) netif->state;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	60fb      	str	r3, [r7, #12]

   netif->output = etharp_output;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a16      	ldr	r2, [pc, #88]	; (8006a14 <LwipADIN1110Init+0x6c>)
 80069ba:	615a      	str	r2, [r3, #20]
   netif->linkoutput = LwIP_ADIN1110LinkOutput;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <LwipADIN1110Init+0x70>)
 80069c0:	619a      	str	r2, [r3, #24]
   netif->name[0] = IFNAME0;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2265      	movs	r2, #101	; 0x65
 80069c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   netif->name[1] = IFNAME1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2230      	movs	r2, #48	; 0x30
 80069ce:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   netif->mtu = ETHERNET_MTU;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80069d8:	851a      	strh	r2, [r3, #40]	; 0x28
   netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	220e      	movs	r2, #14
 80069de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    netif->hostname = HOSTNAME;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a0d      	ldr	r2, [pc, #52]	; (8006a1c <LwipADIN1110Init+0x74>)
 80069e6:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_NETIF_HOSTNAME */


   netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET | NETIF_FLAG_IGMP;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	223a      	movs	r2, #58	; 0x3a
 80069ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, NETIF_LINK_SPEED_IN_BPS);

   memcpy(netif->hwaddr, eth->macAddress, sizeof(netif->hwaddr));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	2206      	movs	r2, #6
 80069fc:	4619      	mov	r1, r3
 80069fe:	f012 fed0 	bl	80197a2 <memcpy>
   netif->hwaddr_len = sizeof(netif->hwaddr);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2206      	movs	r2, #6
 8006a06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

   return ERR_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	080172ad 	.word	0x080172ad
 8006a18:	0800694d 	.word	0x0800694d
 8006a1c:	0801a4a0 	.word	0x0801a4a0

08006a20 <ADIN1110Init>:


static adi_eth_Result_e ADIN1110Init(LwIP_ADIN1110_t* eth)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e        result;
    adin1110_DeviceHandle_t *hDevice =   eth->hDevice;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	613b      	str	r3, [r7, #16]
    uint8_t  brcstMAC[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 8006a2e:	4a7c      	ldr	r2, [pc, #496]	; (8006c20 <ADIN1110Init+0x200>)
 8006a30:	f107 0308 	add.w	r3, r7, #8
 8006a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a38:	6018      	str	r0, [r3, #0]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	8019      	strh	r1, [r3, #0]

    result = adin1110_AddAddressFilter(*hDevice, brcstMAC, NULL, 0);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	f107 0108 	add.w	r1, r7, #8
 8006a46:	2300      	movs	r3, #0
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f7ff fa23 	bl	8005e94 <adin1110_AddAddressFilter>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73fb      	strb	r3, [r7, #15]
    DEBUG_RESULT("adin1110_AddAddressFilter", result, ADI_ETH_SUCCESS);
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d015      	beq.n	8006a84 <ADIN1110Init+0x64>
 8006a58:	f240 1321 	movw	r3, #289	; 0x121
 8006a5c:	4a71      	ldr	r2, [pc, #452]	; (8006c24 <ADIN1110Init+0x204>)
 8006a5e:	4972      	ldr	r1, [pc, #456]	; (8006c28 <ADIN1110Init+0x208>)
 8006a60:	4872      	ldr	r0, [pc, #456]	; (8006c2c <ADIN1110Init+0x20c>)
 8006a62:	f012 fcd1 	bl	8019408 <siprintf>
 8006a66:	4871      	ldr	r0, [pc, #452]	; (8006c2c <ADIN1110Init+0x20c>)
 8006a68:	f7ff fb94 	bl	8006194 <common_Fail>
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	4a70      	ldr	r2, [pc, #448]	; (8006c30 <ADIN1110Init+0x210>)
 8006a70:	4970      	ldr	r1, [pc, #448]	; (8006c34 <ADIN1110Init+0x214>)
 8006a72:	486e      	ldr	r0, [pc, #440]	; (8006c2c <ADIN1110Init+0x20c>)
 8006a74:	f012 fcc8 	bl	8019408 <siprintf>
 8006a78:	486c      	ldr	r0, [pc, #432]	; (8006c2c <ADIN1110Init+0x20c>)
 8006a7a:	f7ff fbb3 	bl	80061e4 <common_Perf>
 8006a7e:	2000      	movs	r0, #0
 8006a80:	f012 faf4 	bl	801906c <exit>

    result = adin1110_AddAddressFilter(*hDevice, eth->macAddress, NULL, 0);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f7ff fa00 	bl	8005e94 <adin1110_AddAddressFilter>
 8006a94:	4603      	mov	r3, r0
 8006a96:	73fb      	strb	r3, [r7, #15]
    DEBUG_RESULT("adin1110_AddAddressFilter", result, ADI_ETH_SUCCESS);
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d015      	beq.n	8006aca <ADIN1110Init+0xaa>
 8006a9e:	f44f 7392 	mov.w	r3, #292	; 0x124
 8006aa2:	4a60      	ldr	r2, [pc, #384]	; (8006c24 <ADIN1110Init+0x204>)
 8006aa4:	4960      	ldr	r1, [pc, #384]	; (8006c28 <ADIN1110Init+0x208>)
 8006aa6:	4861      	ldr	r0, [pc, #388]	; (8006c2c <ADIN1110Init+0x20c>)
 8006aa8:	f012 fcae 	bl	8019408 <siprintf>
 8006aac:	485f      	ldr	r0, [pc, #380]	; (8006c2c <ADIN1110Init+0x20c>)
 8006aae:	f7ff fb71 	bl	8006194 <common_Fail>
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	4a5e      	ldr	r2, [pc, #376]	; (8006c30 <ADIN1110Init+0x210>)
 8006ab6:	495f      	ldr	r1, [pc, #380]	; (8006c34 <ADIN1110Init+0x214>)
 8006ab8:	485c      	ldr	r0, [pc, #368]	; (8006c2c <ADIN1110Init+0x20c>)
 8006aba:	f012 fca5 	bl	8019408 <siprintf>
 8006abe:	485b      	ldr	r0, [pc, #364]	; (8006c2c <ADIN1110Init+0x20c>)
 8006ac0:	f7ff fb90 	bl	80061e4 <common_Perf>
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	f012 fad1 	bl	801906c <exit>

    result = adin1110_SyncConfig(*hDevice);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff f9ba 	bl	8005e48 <adin1110_SyncConfig>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]
    DEBUG_RESULT("adin1110_SyncConfig", result, ADI_ETH_SUCCESS);
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d015      	beq.n	8006b0a <ADIN1110Init+0xea>
 8006ade:	f240 1327 	movw	r3, #295	; 0x127
 8006ae2:	4a50      	ldr	r2, [pc, #320]	; (8006c24 <ADIN1110Init+0x204>)
 8006ae4:	4950      	ldr	r1, [pc, #320]	; (8006c28 <ADIN1110Init+0x208>)
 8006ae6:	4851      	ldr	r0, [pc, #324]	; (8006c2c <ADIN1110Init+0x20c>)
 8006ae8:	f012 fc8e 	bl	8019408 <siprintf>
 8006aec:	484f      	ldr	r0, [pc, #316]	; (8006c2c <ADIN1110Init+0x20c>)
 8006aee:	f7ff fb51 	bl	8006194 <common_Fail>
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	4a50      	ldr	r2, [pc, #320]	; (8006c38 <ADIN1110Init+0x218>)
 8006af6:	494f      	ldr	r1, [pc, #316]	; (8006c34 <ADIN1110Init+0x214>)
 8006af8:	484c      	ldr	r0, [pc, #304]	; (8006c2c <ADIN1110Init+0x20c>)
 8006afa:	f012 fc85 	bl	8019408 <siprintf>
 8006afe:	484b      	ldr	r0, [pc, #300]	; (8006c2c <ADIN1110Init+0x20c>)
 8006b00:	f7ff fb70 	bl	80061e4 <common_Perf>
 8006b04:	2000      	movs	r0, #0
 8006b06:	f012 fab1 	bl	801906c <exit>

    result = adin1110_RegisterCallback(*hDevice, cbLinkChange, ADI_MAC_EVT_LINK_CHANGE);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	494a      	ldr	r1, [pc, #296]	; (8006c3c <ADIN1110Init+0x21c>)
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff fa1c 	bl	8005f50 <adin1110_RegisterCallback>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]
    DEBUG_RESULT("adin1110_RegisterCallback (ADI_MAC_EVT_LINK_CHANGE)", result, ADI_ETH_SUCCESS);
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d015      	beq.n	8006b4e <ADIN1110Init+0x12e>
 8006b22:	f44f 7395 	mov.w	r3, #298	; 0x12a
 8006b26:	4a3f      	ldr	r2, [pc, #252]	; (8006c24 <ADIN1110Init+0x204>)
 8006b28:	493f      	ldr	r1, [pc, #252]	; (8006c28 <ADIN1110Init+0x208>)
 8006b2a:	4840      	ldr	r0, [pc, #256]	; (8006c2c <ADIN1110Init+0x20c>)
 8006b2c:	f012 fc6c 	bl	8019408 <siprintf>
 8006b30:	483e      	ldr	r0, [pc, #248]	; (8006c2c <ADIN1110Init+0x20c>)
 8006b32:	f7ff fb2f 	bl	8006194 <common_Fail>
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	4a41      	ldr	r2, [pc, #260]	; (8006c40 <ADIN1110Init+0x220>)
 8006b3a:	493e      	ldr	r1, [pc, #248]	; (8006c34 <ADIN1110Init+0x214>)
 8006b3c:	483b      	ldr	r0, [pc, #236]	; (8006c2c <ADIN1110Init+0x20c>)
 8006b3e:	f012 fc63 	bl	8019408 <siprintf>
 8006b42:	483a      	ldr	r0, [pc, #232]	; (8006c2c <ADIN1110Init+0x20c>)
 8006b44:	f7ff fb4e 	bl	80061e4 <common_Perf>
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f012 fa8f 	bl	801906c <exit>

        /* Prepare Rx buffers */
    for (uint32_t i = 0; i < 1; i++)
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	e039      	b.n	8006bc8 <ADIN1110Init+0x1a8>
    {
        txBufAvailable[i] = true;
 8006b54:	4a3b      	ldr	r2, [pc, #236]	; (8006c44 <ADIN1110Init+0x224>)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	4413      	add	r3, r2
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	701a      	strb	r2, [r3, #0]

        rxBufDesc[i].pBuf = &rxBuf[i][0];
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006b64:	fb02 f303 	mul.w	r3, r2, r3
 8006b68:	4a37      	ldr	r2, [pc, #220]	; (8006c48 <ADIN1110Init+0x228>)
 8006b6a:	1899      	adds	r1, r3, r2
 8006b6c:	4837      	ldr	r0, [pc, #220]	; (8006c4c <ADIN1110Init+0x22c>)
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	4403      	add	r3, r0
 8006b7a:	6019      	str	r1, [r3, #0]
        rxBufDesc[i].bufSize = MAX_FRAME_BUF_SIZE;
 8006b7c:	4933      	ldr	r1, [pc, #204]	; (8006c4c <ADIN1110Init+0x22c>)
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	440b      	add	r3, r1
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006b90:	601a      	str	r2, [r3, #0]
        rxBufDesc[i].cbFunc = rxCallback;
 8006b92:	492e      	ldr	r1, [pc, #184]	; (8006c4c <ADIN1110Init+0x22c>)
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	440b      	add	r3, r1
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	4a2b      	ldr	r2, [pc, #172]	; (8006c50 <ADIN1110Init+0x230>)
 8006ba4:	601a      	str	r2, [r3, #0]

        result = adin1110_SubmitRxBuffer(*hDevice, &rxBufDesc[i]);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	6818      	ldr	r0, [r3, #0]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	4a25      	ldr	r2, [pc, #148]	; (8006c4c <ADIN1110Init+0x22c>)
 8006bb6:	4413      	add	r3, r2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f7ff f9b5 	bl	8005f28 <adin1110_SubmitRxBuffer>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	73fb      	strb	r3, [r7, #15]
    for (uint32_t i = 0; i < 1; i++)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0c2      	beq.n	8006b54 <ADIN1110Init+0x134>
    }

    result = adin1110_Enable(*hDevice);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff f922 	bl	8005e1c <adin1110_Enable>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]
    DEBUG_RESULT("Device enable error", result, ADI_ETH_SUCCESS);
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d015      	beq.n	8006c0e <ADIN1110Init+0x1ee>
 8006be2:	f240 1339 	movw	r3, #313	; 0x139
 8006be6:	4a0f      	ldr	r2, [pc, #60]	; (8006c24 <ADIN1110Init+0x204>)
 8006be8:	490f      	ldr	r1, [pc, #60]	; (8006c28 <ADIN1110Init+0x208>)
 8006bea:	4810      	ldr	r0, [pc, #64]	; (8006c2c <ADIN1110Init+0x20c>)
 8006bec:	f012 fc0c 	bl	8019408 <siprintf>
 8006bf0:	480e      	ldr	r0, [pc, #56]	; (8006c2c <ADIN1110Init+0x20c>)
 8006bf2:	f7ff facf 	bl	8006194 <common_Fail>
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <ADIN1110Init+0x234>)
 8006bfa:	490e      	ldr	r1, [pc, #56]	; (8006c34 <ADIN1110Init+0x214>)
 8006bfc:	480b      	ldr	r0, [pc, #44]	; (8006c2c <ADIN1110Init+0x20c>)
 8006bfe:	f012 fc03 	bl	8019408 <siprintf>
 8006c02:	480a      	ldr	r0, [pc, #40]	; (8006c2c <ADIN1110Init+0x20c>)
 8006c04:	f7ff faee 	bl	80061e4 <common_Perf>
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f012 fa2f 	bl	801906c <exit>

    initPQueue(&pQ[0]);
 8006c0e:	4812      	ldr	r0, [pc, #72]	; (8006c58 <ADIN1110Init+0x238>)
 8006c10:	f000 f948 	bl	8006ea4 <initPQueue>

  return result;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	0801a574 	.word	0x0801a574
 8006c24:	0801a4b4 	.word	0x0801a4b4
 8006c28:	0801a4d4 	.word	0x0801a4d4
 8006c2c:	20001164 	.word	0x20001164
 8006c30:	0801a4dc 	.word	0x0801a4dc
 8006c34:	0801a4f8 	.word	0x0801a4f8
 8006c38:	0801a518 	.word	0x0801a518
 8006c3c:	08006755 	.word	0x08006755
 8006c40:	0801a52c 	.word	0x0801a52c
 8006c44:	20004f1c 	.word	0x20004f1c
 8006c48:	20001204 	.word	0x20001204
 8006c4c:	20002fc8 	.word	0x20002fc8
 8006c50:	080066d1 	.word	0x080066d1
 8006c54:	0801a560 	.word	0x0801a560
 8006c58:	20004f28 	.word	0x20004f28

08006c5c <LwIP_Init>:


void LwIP_Init( LwIP_ADIN1110_t* eth,  board_t *boardDetails)
{
 8006c5c:	b590      	push	{r4, r7, lr}
 8006c5e:	b08b      	sub	sp, #44	; 0x2c
 8006c60:	af04      	add	r7, sp, #16
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
    ADIN1110Init(eth);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7ff feda 	bl	8006a20 <ADIN1110Init>
    lwip_init();
 8006c6c:	f007 fb3f 	bl	800e2ee <lwip_init>
    http_set_ssi_handler(ssiHandler, NULL, 0);
 8006c70:	2200      	movs	r2, #0
 8006c72:	2100      	movs	r1, #0
 8006c74:	4888      	ldr	r0, [pc, #544]	; (8006e98 <LwIP_Init+0x23c>)
 8006c76:	f007 f8d7 	bl	800de28 <http_set_ssi_handler>
    httpd_init();
 8006c7a:	f007 f8bb 	bl	800ddf4 <httpd_init>
    if (boardDetails->ip_addr_fixed == 1)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	f040 80e8 	bne.w	8006e58 <LwIP_Init+0x1fc>
    {
      ip4_addr_t ip, mask, gw;
      // Add our network interface to the netif_list and set it as default
      IP4_ADDR(&ip, boardDetails->ip_addr[0], boardDetails->ip_addr[1], boardDetails->ip_addr[2], boardDetails->ip_addr[3]);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	789b      	ldrb	r3, [r3, #2]
 8006c8c:	061a      	lsls	r2, r3, #24
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	78db      	ldrb	r3, [r3, #3]
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	431a      	orrs	r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	791b      	ldrb	r3, [r3, #4]
 8006c9a:	021b      	lsls	r3, r3, #8
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	7952      	ldrb	r2, [r2, #5]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	061a      	lsls	r2, r3, #24
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	789b      	ldrb	r3, [r3, #2]
 8006caa:	0619      	lsls	r1, r3, #24
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	78db      	ldrb	r3, [r3, #3]
 8006cb0:	041b      	lsls	r3, r3, #16
 8006cb2:	4319      	orrs	r1, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	791b      	ldrb	r3, [r3, #4]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	7949      	ldrb	r1, [r1, #5]
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	789b      	ldrb	r3, [r3, #2]
 8006cce:	0619      	lsls	r1, r3, #24
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	78db      	ldrb	r3, [r3, #3]
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	4319      	orrs	r1, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	791b      	ldrb	r3, [r3, #4]
 8006cdc:	021b      	lsls	r3, r3, #8
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	7949      	ldrb	r1, [r1, #5]
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	0a1b      	lsrs	r3, r3, #8
 8006ce8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006cec:	431a      	orrs	r2, r3
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	789b      	ldrb	r3, [r3, #2]
 8006cf2:	0619      	lsls	r1, r3, #24
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	78db      	ldrb	r3, [r3, #3]
 8006cf8:	041b      	lsls	r3, r3, #16
 8006cfa:	4319      	orrs	r1, r3
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	791b      	ldrb	r3, [r3, #4]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	430b      	orrs	r3, r1
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	7949      	ldrb	r1, [r1, #5]
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	0e1b      	lsrs	r3, r3, #24
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]
      IP4_ADDR(&mask,  boardDetails->net_mask[0], boardDetails->net_mask[1], boardDetails->net_mask[2], boardDetails->net_mask[3]);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	799b      	ldrb	r3, [r3, #6]
 8006d14:	061a      	lsls	r2, r3, #24
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	79db      	ldrb	r3, [r3, #7]
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	7a1b      	ldrb	r3, [r3, #8]
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	4313      	orrs	r3, r2
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	7a52      	ldrb	r2, [r2, #9]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	061a      	lsls	r2, r3, #24
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	799b      	ldrb	r3, [r3, #6]
 8006d32:	0619      	lsls	r1, r3, #24
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	79db      	ldrb	r3, [r3, #7]
 8006d38:	041b      	lsls	r3, r3, #16
 8006d3a:	4319      	orrs	r1, r3
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	7a1b      	ldrb	r3, [r3, #8]
 8006d40:	021b      	lsls	r3, r3, #8
 8006d42:	430b      	orrs	r3, r1
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	7a49      	ldrb	r1, [r1, #9]
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d50:	431a      	orrs	r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	799b      	ldrb	r3, [r3, #6]
 8006d56:	0619      	lsls	r1, r3, #24
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	79db      	ldrb	r3, [r3, #7]
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	4319      	orrs	r1, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	7a1b      	ldrb	r3, [r3, #8]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	430b      	orrs	r3, r1
 8006d68:	6839      	ldr	r1, [r7, #0]
 8006d6a:	7a49      	ldrb	r1, [r1, #9]
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d74:	431a      	orrs	r2, r3
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	799b      	ldrb	r3, [r3, #6]
 8006d7a:	0619      	lsls	r1, r3, #24
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	79db      	ldrb	r3, [r3, #7]
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	4319      	orrs	r1, r3
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	7a1b      	ldrb	r3, [r3, #8]
 8006d88:	021b      	lsls	r3, r3, #8
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	7a49      	ldrb	r1, [r1, #9]
 8006d90:	430b      	orrs	r3, r1
 8006d92:	0e1b      	lsrs	r3, r3, #24
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
      IP4_ADDR(&gw,   boardDetails->gateway[0], boardDetails->gateway[1], boardDetails->gateway[2], boardDetails->gateway[3]);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	7a9b      	ldrb	r3, [r3, #10]
 8006d9c:	061a      	lsls	r2, r3, #24
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	7adb      	ldrb	r3, [r3, #11]
 8006da2:	041b      	lsls	r3, r3, #16
 8006da4:	431a      	orrs	r2, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	7b1b      	ldrb	r3, [r3, #12]
 8006daa:	021b      	lsls	r3, r3, #8
 8006dac:	4313      	orrs	r3, r2
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	7b52      	ldrb	r2, [r2, #13]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	061a      	lsls	r2, r3, #24
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	7a9b      	ldrb	r3, [r3, #10]
 8006dba:	0619      	lsls	r1, r3, #24
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	7adb      	ldrb	r3, [r3, #11]
 8006dc0:	041b      	lsls	r3, r3, #16
 8006dc2:	4319      	orrs	r1, r3
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	7b1b      	ldrb	r3, [r3, #12]
 8006dc8:	021b      	lsls	r3, r3, #8
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	7b49      	ldrb	r1, [r1, #13]
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	021b      	lsls	r3, r3, #8
 8006dd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	7a9b      	ldrb	r3, [r3, #10]
 8006dde:	0619      	lsls	r1, r3, #24
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	7adb      	ldrb	r3, [r3, #11]
 8006de4:	041b      	lsls	r3, r3, #16
 8006de6:	4319      	orrs	r1, r3
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	7b1b      	ldrb	r3, [r3, #12]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	430b      	orrs	r3, r1
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	7b49      	ldrb	r1, [r1, #13]
 8006df4:	430b      	orrs	r3, r1
 8006df6:	0a1b      	lsrs	r3, r3, #8
 8006df8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	7a9b      	ldrb	r3, [r3, #10]
 8006e02:	0619      	lsls	r1, r3, #24
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	7adb      	ldrb	r3, [r3, #11]
 8006e08:	041b      	lsls	r3, r3, #16
 8006e0a:	4319      	orrs	r1, r3
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	7b1b      	ldrb	r3, [r3, #12]
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	430b      	orrs	r3, r1
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	7b49      	ldrb	r1, [r1, #13]
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	0e1b      	lsrs	r3, r3, #24
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

      netif_add(&eth->netif, &ip, &mask, &gw, eth,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	1d18      	adds	r0, r3, #4
 8006e24:	f107 040c 	add.w	r4, r7, #12
 8006e28:	f107 0210 	add.w	r2, r7, #16
 8006e2c:	f107 0114 	add.w	r1, r7, #20
 8006e30:	4b1a      	ldr	r3, [pc, #104]	; (8006e9c <LwIP_Init+0x240>)
 8006e32:	9302      	str	r3, [sp, #8]
 8006e34:	4b1a      	ldr	r3, [pc, #104]	; (8006ea0 <LwIP_Init+0x244>)
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	f007 fb45 	bl	800e4cc <netif_add>
      LwipADIN1110Init, ethernet_input);

      netif_set_default(&eth->netif);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4618      	mov	r0, r3
 8006e48:	f007 fcac 	bl	800e7a4 <netif_set_default>
      netif_set_up(&eth->netif);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	4618      	mov	r0, r3
 8006e52:	f007 fcb7 	bl	800e7c4 <netif_set_up>
      netif_set_up(&eth->netif);

      dhcp_start(&eth->netif);
    }
//   netif_set_status_callback(&eth->netif, LwipADIN1110NetifStatusCallback);
}
 8006e56:	e01b      	b.n	8006e90 <LwIP_Init+0x234>
      netif_add(&eth->netif, IPADDR_ANY, IPADDR_ANY, IPADDR_ANY, eth,
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	1d18      	adds	r0, r3, #4
 8006e5c:	4b0f      	ldr	r3, [pc, #60]	; (8006e9c <LwIP_Init+0x240>)
 8006e5e:	9302      	str	r3, [sp, #8]
 8006e60:	4b0f      	ldr	r3, [pc, #60]	; (8006ea0 <LwIP_Init+0x244>)
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f007 fb2d 	bl	800e4cc <netif_add>
      netif_set_default(&eth->netif);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4618      	mov	r0, r3
 8006e78:	f007 fc94 	bl	800e7a4 <netif_set_default>
      netif_set_up(&eth->netif);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4618      	mov	r0, r3
 8006e82:	f007 fc9f 	bl	800e7c4 <netif_set_up>
      dhcp_start(&eth->netif);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f00e fbba 	bl	8015604 <dhcp_start>
}
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd90      	pop	{r4, r7, pc}
 8006e98:	08006969 	.word	0x08006969
 8006e9c:	08018e8d 	.word	0x08018e8d
 8006ea0:	080069a9 	.word	0x080069a9

08006ea4 <initPQueue>:

void initPQueue(pQueue_t* pQ)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
    pQ->nWrQ = 0;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f8c2 3dc0 	str.w	r3, [r2, #3520]	; 0xdc0
    pQ->nRdQ = 0;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f8c2 3dbc 	str.w	r3, [r2, #3516]	; 0xdbc
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <pDataAvailable>:


uint32_t pDataAvailable(pQueue_t* pQ)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  if (pQ->nWrQ != pQ->nRdQ)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee2:	f8d3 2dc0 	ldr.w	r2, [r3, #3520]	; 0xdc0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eec:	f8d3 3dbc 	ldr.w	r3, [r3, #3516]	; 0xdbc
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d001      	beq.n	8006ef8 <pDataAvailable+0x24>
  {
    return 1;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <pDataAvailable+0x26>
  }
  return 0;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
	...

08006f08 <writePQ>:

void writePQ(pQueue_t* pQ, uint8_t *ethFrame, int lenEthFrame)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
    memcpy(&pQ->pData[pQ->nWrQ][0] , ethFrame, lenEthFrame);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f1a:	f8d3 3dc0 	ldr.w	r3, [r3, #3520]	; 0xdc0
 8006f1e:	f240 52ee 	movw	r2, #1518	; 0x5ee
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f012 fc37 	bl	80197a2 <memcpy>
    pQ->lenData[pQ->nWrQ] = lenEthFrame;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3a:	f8d3 2dc0 	ldr.w	r2, [r3, #3520]	; 0xdc0
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f202 726a 	addw	r2, r2, #1898	; 0x76a
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQ->nWrQ++;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f50:	f8d3 3dc0 	ldr.w	r3, [r3, #3520]	; 0xdc0
 8006f54:	3301      	adds	r3, #1
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f5c:	f8c2 3dc0 	str.w	r3, [r2, #3520]	; 0xdc0
    pQ->nWrQ %= MAX_P_QUEUE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f66:	f8d3 1dc0 	ldr.w	r1, [r3, #3520]	; 0xdc0
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <writePQ+0x88>)
 8006f6c:	fb83 2301 	smull	r2, r3, r3, r1
 8006f70:	105a      	asrs	r2, r3, #1
 8006f72:	17cb      	asrs	r3, r1, #31
 8006f74:	1ad2      	subs	r2, r2, r3
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	1aca      	subs	r2, r1, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f84:	f8c3 2dc0 	str.w	r2, [r3, #3520]	; 0xdc0
}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	66666667 	.word	0x66666667

08006f94 <readPQ>:

void* readPQ(pQueue_t* pQ)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
    int ehtFrmLen = pQ->lenData[pQ->nRdQ] ;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa2:	f8d3 2dbc 	ldr.w	r2, [r3, #3516]	; 0xdbc
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f202 726a 	addw	r2, r2, #1898	; 0x76a
 8006fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb0:	60fb      	str	r3, [r7, #12]
    struct pbuf* p = pbuf_alloc(PBUF_RAW, MAX_FRAME_BUF_SIZE, PBUF_RAM);
 8006fb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006fb6:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8006fba:	2000      	movs	r0, #0
 8006fbc:	f007 fcfc 	bl	800e9b8 <pbuf_alloc>
 8006fc0:	60b8      	str	r0, [r7, #8]
    memcpy(((uint8_t*) p->payload) , &pQ->pData[pQ->nRdQ][0], ehtFrmLen);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6858      	ldr	r0, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fcc:	f8d3 3dbc 	ldr.w	r3, [r3, #3516]	; 0xdbc
 8006fd0:	f240 52ee 	movw	r2, #1518	; 0x5ee
 8006fd4:	fb02 f303 	mul.w	r3, r2, r3
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	4413      	add	r3, r2
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	f012 fbdf 	bl	80197a2 <memcpy>

    pQ->nRdQ++;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fea:	f8d3 3dbc 	ldr.w	r3, [r3, #3516]	; 0xdbc
 8006fee:	3301      	adds	r3, #1
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ff6:	f8c2 3dbc 	str.w	r3, [r2, #3516]	; 0xdbc
    pQ->nRdQ %= MAX_P_QUEUE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007000:	f8d3 1dbc 	ldr.w	r1, [r3, #3516]	; 0xdbc
 8007004:	4b09      	ldr	r3, [pc, #36]	; (800702c <readPQ+0x98>)
 8007006:	fb83 2301 	smull	r2, r3, r3, r1
 800700a:	105a      	asrs	r2, r3, #1
 800700c:	17cb      	asrs	r3, r1, #31
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	4613      	mov	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	1aca      	subs	r2, r1, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800701e:	f8c3 2dbc 	str.w	r2, [r3, #3516]	; 0xdbc

    return (void*)p;
 8007022:	68bb      	ldr	r3, [r7, #8]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	66666667 	.word	0x66666667

08007030 <discoveradin1110>:


uint32_t discoveradin1110(adin1110_DeviceHandle_t *hDevice)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
    adi_eth_Result_e        result;
    uint32_t                error = 1;
 8007038:	2301      	movs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]

    /****** Driver Init *****/
    for (uint32_t i = 0; i < ADIN1110_INIT_ITER; i++)
 800703c:	2300      	movs	r3, #0
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	e010      	b.n	8007064 <discoveradin1110+0x34>
    {
        result = adin1110_Init(*hDevice, &drvConfig);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	490b      	ldr	r1, [pc, #44]	; (8007074 <discoveradin1110+0x44>)
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe fe81 	bl	8005d50 <adin1110_Init>
 800704e:	4603      	mov	r3, r0
 8007050:	73fb      	strb	r3, [r7, #15]
        if (result == ADI_ETH_SUCCESS)
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <discoveradin1110+0x2e>
        {
            error = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	617b      	str	r3, [r7, #20]
            break;
 800705c:	e005      	b.n	800706a <discoveradin1110+0x3a>
    for (uint32_t i = 0; i < ADIN1110_INIT_ITER; i++)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3301      	adds	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b04      	cmp	r3, #4
 8007068:	d9eb      	bls.n	8007042 <discoveradin1110+0x12>
        }
    }
   // DEBUG_RESULT("No MACPHY device found", result, ADI_ETH_SUCCESS);
    return error;
 800706a:	697b      	ldr	r3, [r7, #20]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	2000011c 	.word	0x2000011c

08007078 <main>:
struct netif gnetif;



int main(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b09e      	sub	sp, #120	; 0x78
 800707c:	af00      	add	r7, sp, #0

	SystemClock_Config();
 800707e:	f000 fb6e 	bl	800775e <SystemClock_Config>
	HAL_Init();
 8007082:	f000 ff24 	bl	8007ece <HAL_Init>


    uint32_t       error;
    uint32_t       heartbeatCheckTime = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	677b      	str	r3, [r7, #116]	; 0x74

    adin1110_DeviceStruct_t dev;
    adin1110_DeviceHandle_t hDevice = &dev;
 800708a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800708e:	65fb      	str	r3, [r7, #92]	; 0x5c

    adi_eth_LinkStatus_e linkStatus;
    //adi_eth_Result_e result;

    /****** System Init *****/
    error = BSP_InitSystem();
 8007090:	f7ff f850 	bl	8006134 <BSP_InitSystem>
 8007094:	6738      	str	r0, [r7, #112]	; 0x70
    DEBUG_RESULT("BSP_InitSystem", error, 0);
 8007096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007098:	2b00      	cmp	r3, #0
 800709a:	d014      	beq.n	80070c6 <main+0x4e>
 800709c:	2342      	movs	r3, #66	; 0x42
 800709e:	4a57      	ldr	r2, [pc, #348]	; (80071fc <main+0x184>)
 80070a0:	4957      	ldr	r1, [pc, #348]	; (8007200 <main+0x188>)
 80070a2:	4858      	ldr	r0, [pc, #352]	; (8007204 <main+0x18c>)
 80070a4:	f012 f9b0 	bl	8019408 <siprintf>
 80070a8:	4856      	ldr	r0, [pc, #344]	; (8007204 <main+0x18c>)
 80070aa:	f7ff f873 	bl	8006194 <common_Fail>
 80070ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070b0:	4a55      	ldr	r2, [pc, #340]	; (8007208 <main+0x190>)
 80070b2:	4956      	ldr	r1, [pc, #344]	; (800720c <main+0x194>)
 80070b4:	4853      	ldr	r0, [pc, #332]	; (8007204 <main+0x18c>)
 80070b6:	f012 f9a7 	bl	8019408 <siprintf>
 80070ba:	4852      	ldr	r0, [pc, #328]	; (8007204 <main+0x18c>)
 80070bc:	f7ff f892 	bl	80061e4 <common_Perf>
 80070c0:	2000      	movs	r0, #0
 80070c2:	f011 ffd3 	bl	801906c <exit>

    BSP_HWReset(true);
 80070c6:	2001      	movs	r0, #1
 80070c8:	f7fe ff70 	bl	8005fac <BSP_HWReset>

    boardDetails.mac[0] =	0x00;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75bb      	strb	r3, [r7, #22]
    boardDetails.mac[1] =	0xE0;
 80070d0:	23e0      	movs	r3, #224	; 0xe0
 80070d2:	75fb      	strb	r3, [r7, #23]
    boardDetails.mac[2] =	0x22;
 80070d4:	2322      	movs	r3, #34	; 0x22
 80070d6:	763b      	strb	r3, [r7, #24]
    boardDetails.mac[3] =	0xFE;
 80070d8:	23fe      	movs	r3, #254	; 0xfe
 80070da:	767b      	strb	r3, [r7, #25]
    boardDetails.mac[4] =	0xDA;
 80070dc:	23da      	movs	r3, #218	; 0xda
 80070de:	76bb      	strb	r3, [r7, #26]
    boardDetails.mac[5] =	0xC9;
 80070e0:	23c9      	movs	r3, #201	; 0xc9
 80070e2:	76fb      	strb	r3, [r7, #27]

    boardDetails.ip_addr[0] =   192;
 80070e4:	23c0      	movs	r3, #192	; 0xc0
 80070e6:	72bb      	strb	r3, [r7, #10]
    boardDetails.ip_addr[1] =   168;
 80070e8:	23a8      	movs	r3, #168	; 0xa8
 80070ea:	72fb      	strb	r3, [r7, #11]
    boardDetails.ip_addr[2] =   20;
 80070ec:	2314      	movs	r3, #20
 80070ee:	733b      	strb	r3, [r7, #12]
    boardDetails.ip_addr[3] =   8;
 80070f0:	2308      	movs	r3, #8
 80070f2:	737b      	strb	r3, [r7, #13]

    boardDetails.net_mask[0] =  255;
 80070f4:	23ff      	movs	r3, #255	; 0xff
 80070f6:	73bb      	strb	r3, [r7, #14]
    boardDetails.net_mask[1] =  255;
 80070f8:	23ff      	movs	r3, #255	; 0xff
 80070fa:	73fb      	strb	r3, [r7, #15]
    boardDetails.net_mask[2] =  255;
 80070fc:	23ff      	movs	r3, #255	; 0xff
 80070fe:	743b      	strb	r3, [r7, #16]
    boardDetails.net_mask[3] =  0;
 8007100:	2300      	movs	r3, #0
 8007102:	747b      	strb	r3, [r7, #17]

    boardDetails.gateway[0] =   192;
 8007104:	23c0      	movs	r3, #192	; 0xc0
 8007106:	74bb      	strb	r3, [r7, #18]
    boardDetails.gateway[1] =   168;
 8007108:	23a8      	movs	r3, #168	; 0xa8
 800710a:	74fb      	strb	r3, [r7, #19]
    boardDetails.gateway[2] =   20;
 800710c:	2314      	movs	r3, #20
 800710e:	753b      	strb	r3, [r7, #20]
    boardDetails.gateway[3] =   1;
 8007110:	2301      	movs	r3, #1
 8007112:	757b      	strb	r3, [r7, #21]

    boardDetails.ip_addr_fixed = IP_FIXED;//IP_DYNAMIC;
 8007114:	2301      	movs	r3, #1
 8007116:	727b      	strb	r3, [r7, #9]

    error = discoveradin1110(&hDevice);
 8007118:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff ff87 	bl	8007030 <discoveradin1110>
 8007122:	6738      	str	r0, [r7, #112]	; 0x70
    DEBUG_RESULT("Failed to access ADIN1110", error, 0);
 8007124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007126:	2b00      	cmp	r3, #0
 8007128:	d014      	beq.n	8007154 <main+0xdc>
 800712a:	235f      	movs	r3, #95	; 0x5f
 800712c:	4a33      	ldr	r2, [pc, #204]	; (80071fc <main+0x184>)
 800712e:	4934      	ldr	r1, [pc, #208]	; (8007200 <main+0x188>)
 8007130:	4834      	ldr	r0, [pc, #208]	; (8007204 <main+0x18c>)
 8007132:	f012 f969 	bl	8019408 <siprintf>
 8007136:	4833      	ldr	r0, [pc, #204]	; (8007204 <main+0x18c>)
 8007138:	f7ff f82c 	bl	8006194 <common_Fail>
 800713c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800713e:	4a34      	ldr	r2, [pc, #208]	; (8007210 <main+0x198>)
 8007140:	4932      	ldr	r1, [pc, #200]	; (800720c <main+0x194>)
 8007142:	4830      	ldr	r0, [pc, #192]	; (8007204 <main+0x18c>)
 8007144:	f012 f960 	bl	8019408 <siprintf>
 8007148:	482e      	ldr	r0, [pc, #184]	; (8007204 <main+0x18c>)
 800714a:	f7ff f84b 	bl	80061e4 <common_Perf>
 800714e:	2000      	movs	r0, #0
 8007150:	f011 ff8c 	bl	801906c <exit>

    //SETTER OP DRITT GREIER
    LwIP_StructInit(&myConn, &hDevice, boardDetails.mac);
 8007154:	f107 0308 	add.w	r3, r7, #8
 8007158:	f103 020e 	add.w	r2, r3, #14
 800715c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8007160:	f107 031c 	add.w	r3, r7, #28
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff fc0c 	bl	8006982 <LwIP_StructInit>
      LwipADIN1110Init, ethernet_input);

      netif_set_default(&eth->netif);
      netif_set_up(&eth->netif);
     */
    LwIP_Init(&myConn, &boardDetails);
 800716a:	f107 0208 	add.w	r2, r7, #8
 800716e:	f107 031c 	add.w	r3, r7, #28
 8007172:	4611      	mov	r1, r2
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff fd71 	bl	8006c5c <LwIP_Init>
    LwIP_ADIN1110LinkInput(&myConn.netif);
 800717a:	f107 031c 	add.w	r3, r7, #28
 800717e:	3304      	adds	r3, #4
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff fb09 	bl	8006798 <LwIP_ADIN1110LinkInput>
    BSP_delayMs(500);
 8007186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800718a:	f7fe fef7 	bl	8005f7c <BSP_delayMs>

    netif_set_link_up(&myConn.netif);
 800718e:	f107 031c 	add.w	r3, r7, #28
 8007192:	3304      	adds	r3, #4
 8007194:	4618      	mov	r0, r3
 8007196:	f007 fb63 	bl	800e860 <netif_set_link_up>
    tcpecho_raw_init();
 800719a:	f000 fd7d 	bl	8007c98 <tcpecho_raw_init>


    while(1)
    {

      uint32_t now  = BSP_SysNow();
 800719e:	f7fe ffc2 	bl	8006126 <BSP_SysNow>
 80071a2:	66f8      	str	r0, [r7, #108]	; 0x6c

  	if (now - heartbeatCheckTime >= 250)
 80071a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2bf9      	cmp	r3, #249	; 0xf9
 80071ac:	d915      	bls.n	80071da <main+0x162>
  	      {
  	        heartbeatCheckTime = now;
 80071ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b0:	677b      	str	r3, [r7, #116]	; 0x74

  	        BSP_HeartBeat();
 80071b2:	f7fe ff43 	bl	800603c <BSP_HeartBeat>

  	        adin1110_GetLinkStatus(hDevice, &linkStatus);
 80071b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b8:	1dfa      	adds	r2, r7, #7
 80071ba:	4611      	mov	r1, r2
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe fe55 	bl	8005e6c <adin1110_GetLinkStatus>

  	        if ( linkStatus == ADI_ETH_LINK_STATUS_UP )
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d103      	bne.n	80071d0 <main+0x158>
  	        	BSP_FuncLed1(true);
 80071c8:	2001      	movs	r0, #1
 80071ca:	f7fe ff53 	bl	8006074 <BSP_FuncLed1>
 80071ce:	e002      	b.n	80071d6 <main+0x15e>



  	        else
  	        	BSP_FuncLed1(false);
 80071d0:	2000      	movs	r0, #0
 80071d2:	f7fe ff4f 	bl	8006074 <BSP_FuncLed1>

  	        sys_check_timeouts();
 80071d6:	f00d fa1d 	bl	8014614 <sys_check_timeouts>
  	      }

  	      if ( LwIP_ADIN1110LinkInput(&myConn.netif) == 0)
 80071da:	f107 031c 	add.w	r3, r7, #28
 80071de:	3304      	adds	r3, #4
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff fad9 	bl	8006798 <LwIP_ADIN1110LinkInput>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <main+0x17c>
  	    	  BSP_ErrorLed(false);
 80071ec:	2000      	movs	r0, #0
 80071ee:	f7fe ff2f 	bl	8006050 <BSP_ErrorLed>
 80071f2:	e7d4      	b.n	800719e <main+0x126>
  	      else
  	    	  BSP_ErrorLed(true);
 80071f4:	2001      	movs	r0, #1
 80071f6:	f7fe ff2b 	bl	8006050 <BSP_ErrorLed>
    {
 80071fa:	e7d0      	b.n	800719e <main+0x126>
 80071fc:	0801a57c 	.word	0x0801a57c
 8007200:	0801a590 	.word	0x0801a590
 8007204:	20001164 	.word	0x20001164
 8007208:	0801a598 	.word	0x0801a598
 800720c:	0801a5a8 	.word	0x0801a5a8
 8007210:	0801a5c8 	.word	0x0801a5c8

08007214 <ETH_SPI_Init>:
DMA_HandleTypeDef hDmaEthSpiTx;
DMA_HandleTypeDef hDmaEthSpiRx;

/* ETH_SPI init function */
HAL_StatusTypeDef ETH_SPI_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef   result = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	71fb      	strb	r3, [r7, #7]

  hEthSpi.Instance = ETH_SPI;
 800721e:	4b20      	ldr	r3, [pc, #128]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007220:	4a20      	ldr	r2, [pc, #128]	; (80072a4 <ETH_SPI_Init+0x90>)
 8007222:	601a      	str	r2, [r3, #0]
  hEthSpi.Init.Mode = SPI_MODE_MASTER;
 8007224:	4b1e      	ldr	r3, [pc, #120]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007226:	f44f 7282 	mov.w	r2, #260	; 0x104
 800722a:	605a      	str	r2, [r3, #4]
  hEthSpi.Init.Direction = SPI_DIRECTION_2LINES;
 800722c:	4b1c      	ldr	r3, [pc, #112]	; (80072a0 <ETH_SPI_Init+0x8c>)
 800722e:	2200      	movs	r2, #0
 8007230:	609a      	str	r2, [r3, #8]
  hEthSpi.Init.DataSize = SPI_DATASIZE_8BIT;
 8007232:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007234:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007238:	60da      	str	r2, [r3, #12]
  hEthSpi.Init.CLKPolarity = SPI_POLARITY_LOW;
 800723a:	4b19      	ldr	r3, [pc, #100]	; (80072a0 <ETH_SPI_Init+0x8c>)
 800723c:	2200      	movs	r2, #0
 800723e:	611a      	str	r2, [r3, #16]
  hEthSpi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007240:	4b17      	ldr	r3, [pc, #92]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007242:	2200      	movs	r2, #0
 8007244:	615a      	str	r2, [r3, #20]
  hEthSpi.Init.NSS = SPI_NSS_SOFT;
 8007246:	4b16      	ldr	r3, [pc, #88]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800724c:	619a      	str	r2, [r3, #24]
  hEthSpi.Init.BaudRatePrescaler = BSP_CLK_CFG_SPI_BAUDPRESCALER;
 800724e:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007250:	2200      	movs	r2, #0
 8007252:	61da      	str	r2, [r3, #28]
  hEthSpi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007254:	4b12      	ldr	r3, [pc, #72]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007256:	2200      	movs	r2, #0
 8007258:	621a      	str	r2, [r3, #32]
  hEthSpi.Init.TIMode = SPI_TIMODE_DISABLE;
 800725a:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <ETH_SPI_Init+0x8c>)
 800725c:	2200      	movs	r2, #0
 800725e:	625a      	str	r2, [r3, #36]	; 0x24
  hEthSpi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007260:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007262:	2200      	movs	r2, #0
 8007264:	629a      	str	r2, [r3, #40]	; 0x28
  hEthSpi.Init.CRCPolynomial = 7;
 8007266:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007268:	2207      	movs	r2, #7
 800726a:	62da      	str	r2, [r3, #44]	; 0x2c
  hEthSpi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800726c:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <ETH_SPI_Init+0x8c>)
 800726e:	2200      	movs	r2, #0
 8007270:	631a      	str	r2, [r3, #48]	; 0x30
  hEthSpi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007272:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007274:	2200      	movs	r2, #0
 8007276:	635a      	str	r2, [r3, #52]	; 0x34

  status = HAL_OK;
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <ETH_SPI_Init+0x94>)
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
  result = HAL_SPI_Init(&hEthSpi);
 800727e:	4808      	ldr	r0, [pc, #32]	; (80072a0 <ETH_SPI_Init+0x8c>)
 8007280:	f003 f9cc 	bl	800a61c <HAL_SPI_Init>
 8007284:	4603      	mov	r3, r0
 8007286:	71fb      	strb	r3, [r7, #7]

  if (status != HAL_OK)
 8007288:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <ETH_SPI_Init+0x94>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <ETH_SPI_Init+0x82>
  {
      result = status;
 8007290:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <ETH_SPI_Init+0x94>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	71fb      	strb	r3, [r7, #7]
  }

  return result;
 8007296:	79fb      	ldrb	r3, [r7, #7]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	200070d8 	.word	0x200070d8
 80072a4:	40003800 	.word	0x40003800
 80072a8:	200070ce 	.word	0x200070ce

080072ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08a      	sub	sp, #40	; 0x28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef   result = HAL_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ba:	f107 0310 	add.w	r3, r7, #16
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	605a      	str	r2, [r3, #4]
 80072c4:	609a      	str	r2, [r3, #8]
 80072c6:	60da      	str	r2, [r3, #12]
 80072c8:	611a      	str	r2, [r3, #16]

  if(spiHandle->Instance == ETH_SPI)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a57      	ldr	r2, [pc, #348]	; (800742c <HAL_SPI_MspInit+0x180>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	f040 80a2 	bne.w	800741a <HAL_SPI_MspInit+0x16e>
  {
    ETH_SPI_CLK_ENABLE();
 80072d6:	4b56      	ldr	r3, [pc, #344]	; (8007430 <HAL_SPI_MspInit+0x184>)
 80072d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072da:	4a55      	ldr	r2, [pc, #340]	; (8007430 <HAL_SPI_MspInit+0x184>)
 80072dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072e0:	6593      	str	r3, [r2, #88]	; 0x58
 80072e2:	4b53      	ldr	r3, [pc, #332]	; (8007430 <HAL_SPI_MspInit+0x184>)
 80072e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = ETH_SPI_CLK_Pin;
 80072ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072f4:	2302      	movs	r3, #2
 80072f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072fc:	2303      	movs	r3, #3
 80072fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = ETH_SPI_CLK_AF;
 8007300:	2305      	movs	r3, #5
 8007302:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ETH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8007304:	f107 0310 	add.w	r3, r7, #16
 8007308:	4619      	mov	r1, r3
 800730a:	484a      	ldr	r0, [pc, #296]	; (8007434 <HAL_SPI_MspInit+0x188>)
 800730c:	f001 fac6 	bl	800889c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_SPI_MOSI_Pin;
 8007310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007314:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007316:	2302      	movs	r3, #2
 8007318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731a:	2300      	movs	r3, #0
 800731c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800731e:	2303      	movs	r3, #3
 8007320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = ETH_SPI_MOSI_AF;
 8007322:	2305      	movs	r3, #5
 8007324:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ETH_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8007326:	f107 0310 	add.w	r3, r7, #16
 800732a:	4619      	mov	r1, r3
 800732c:	4841      	ldr	r0, [pc, #260]	; (8007434 <HAL_SPI_MspInit+0x188>)
 800732e:	f001 fab5 	bl	800889c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_SPI_MISO_Pin;
 8007332:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007338:	2302      	movs	r3, #2
 800733a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800733c:	2300      	movs	r3, #0
 800733e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007340:	2303      	movs	r3, #3
 8007342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = ETH_SPI_MISO_AF;
 8007344:	2305      	movs	r3, #5
 8007346:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ETH_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8007348:	f107 0310 	add.w	r3, r7, #16
 800734c:	4619      	mov	r1, r3
 800734e:	4839      	ldr	r0, [pc, #228]	; (8007434 <HAL_SPI_MspInit+0x188>)
 8007350:	f001 faa4 	bl	800889c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB9);
 8007354:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007358:	f001 fc7c 	bl	8008c54 <HAL_I2CEx_EnableFastModePlus>

    /* SPI DMA Init */
    /* SPI_TX Init */
    hDmaEthSpiTx.Instance = DMA1_Channel1;
 800735c:	4b36      	ldr	r3, [pc, #216]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 800735e:	4a37      	ldr	r2, [pc, #220]	; (800743c <HAL_SPI_MspInit+0x190>)
 8007360:	601a      	str	r2, [r3, #0]
    hDmaEthSpiTx.Init.Request = ETH_SPI_DMA_REQ_TX;
 8007362:	4b35      	ldr	r3, [pc, #212]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 8007364:	220d      	movs	r2, #13
 8007366:	605a      	str	r2, [r3, #4]
    hDmaEthSpiTx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007368:	4b33      	ldr	r3, [pc, #204]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 800736a:	2210      	movs	r2, #16
 800736c:	609a      	str	r2, [r3, #8]
    hDmaEthSpiTx.Init.PeriphInc = DMA_PINC_DISABLE;
 800736e:	4b32      	ldr	r3, [pc, #200]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 8007370:	2200      	movs	r2, #0
 8007372:	60da      	str	r2, [r3, #12]
    hDmaEthSpiTx.Init.MemInc = DMA_MINC_ENABLE;
 8007374:	4b30      	ldr	r3, [pc, #192]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 8007376:	2280      	movs	r2, #128	; 0x80
 8007378:	611a      	str	r2, [r3, #16]
    hDmaEthSpiTx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800737a:	4b2f      	ldr	r3, [pc, #188]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 800737c:	2200      	movs	r2, #0
 800737e:	615a      	str	r2, [r3, #20]
    hDmaEthSpiTx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007380:	4b2d      	ldr	r3, [pc, #180]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 8007382:	2200      	movs	r2, #0
 8007384:	619a      	str	r2, [r3, #24]
    hDmaEthSpiTx.Init.Mode = DMA_NORMAL;
 8007386:	4b2c      	ldr	r3, [pc, #176]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 8007388:	2200      	movs	r2, #0
 800738a:	61da      	str	r2, [r3, #28]
    hDmaEthSpiTx.Init.Priority = DMA_PRIORITY_LOW;
 800738c:	4b2a      	ldr	r3, [pc, #168]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 800738e:	2200      	movs	r2, #0
 8007390:	621a      	str	r2, [r3, #32]
    result = HAL_DMA_Init(&hDmaEthSpiTx);
 8007392:	4829      	ldr	r0, [pc, #164]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 8007394:	f000 ff54 	bl	8008240 <HAL_DMA_Init>
 8007398:	4603      	mov	r3, r0
 800739a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (result != HAL_OK)
 800739e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d13b      	bne.n	800741e <HAL_SPI_MspInit+0x172>
    {
      goto end;
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hDmaEthSpiTx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a23      	ldr	r2, [pc, #140]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 80073aa:	655a      	str	r2, [r3, #84]	; 0x54
 80073ac:	4a22      	ldr	r2, [pc, #136]	; (8007438 <HAL_SPI_MspInit+0x18c>)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI_RX Init */
    hDmaEthSpiRx.Instance = DMA1_Channel2;
 80073b2:	4b23      	ldr	r3, [pc, #140]	; (8007440 <HAL_SPI_MspInit+0x194>)
 80073b4:	4a23      	ldr	r2, [pc, #140]	; (8007444 <HAL_SPI_MspInit+0x198>)
 80073b6:	601a      	str	r2, [r3, #0]
    hDmaEthSpiRx.Init.Request = ETH_SPI_DMA_REQ_RX;
 80073b8:	4b21      	ldr	r3, [pc, #132]	; (8007440 <HAL_SPI_MspInit+0x194>)
 80073ba:	220c      	movs	r2, #12
 80073bc:	605a      	str	r2, [r3, #4]
    hDmaEthSpiRx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073be:	4b20      	ldr	r3, [pc, #128]	; (8007440 <HAL_SPI_MspInit+0x194>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	609a      	str	r2, [r3, #8]
    hDmaEthSpiRx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073c4:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <HAL_SPI_MspInit+0x194>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	60da      	str	r2, [r3, #12]
    hDmaEthSpiRx.Init.MemInc = DMA_MINC_ENABLE;
 80073ca:	4b1d      	ldr	r3, [pc, #116]	; (8007440 <HAL_SPI_MspInit+0x194>)
 80073cc:	2280      	movs	r2, #128	; 0x80
 80073ce:	611a      	str	r2, [r3, #16]
    hDmaEthSpiRx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80073d0:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <HAL_SPI_MspInit+0x194>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	615a      	str	r2, [r3, #20]
    hDmaEthSpiRx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073d6:	4b1a      	ldr	r3, [pc, #104]	; (8007440 <HAL_SPI_MspInit+0x194>)
 80073d8:	2200      	movs	r2, #0
 80073da:	619a      	str	r2, [r3, #24]
    hDmaEthSpiRx.Init.Mode = DMA_NORMAL;
 80073dc:	4b18      	ldr	r3, [pc, #96]	; (8007440 <HAL_SPI_MspInit+0x194>)
 80073de:	2200      	movs	r2, #0
 80073e0:	61da      	str	r2, [r3, #28]
    hDmaEthSpiRx.Init.Priority = DMA_PRIORITY_LOW;
 80073e2:	4b17      	ldr	r3, [pc, #92]	; (8007440 <HAL_SPI_MspInit+0x194>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	621a      	str	r2, [r3, #32]
    result = HAL_DMA_Init(&hDmaEthSpiRx);
 80073e8:	4815      	ldr	r0, [pc, #84]	; (8007440 <HAL_SPI_MspInit+0x194>)
 80073ea:	f000 ff29 	bl	8008240 <HAL_DMA_Init>
 80073ee:	4603      	mov	r3, r0
 80073f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (result != HAL_OK)
 80073f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d112      	bne.n	8007422 <HAL_SPI_MspInit+0x176>
    {
      goto end;
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hDmaEthSpiRx);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a10      	ldr	r2, [pc, #64]	; (8007440 <HAL_SPI_MspInit+0x194>)
 8007400:	659a      	str	r2, [r3, #88]	; 0x58
 8007402:	4a0f      	ldr	r2, [pc, #60]	; (8007440 <HAL_SPI_MspInit+0x194>)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6293      	str	r3, [r2, #40]	; 0x28

    /* For interrupt-based SPI operation */
    HAL_NVIC_SetPriority(ETH_SPI_IRQn, 0, 0);
 8007408:	2200      	movs	r2, #0
 800740a:	2100      	movs	r1, #0
 800740c:	2024      	movs	r0, #36	; 0x24
 800740e:	f000 fed2 	bl	80081b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_SPI_IRQn);
 8007412:	2024      	movs	r0, #36	; 0x24
 8007414:	f000 feeb 	bl	80081ee <HAL_NVIC_EnableIRQ>
  }

end:
  return;
 8007418:	e004      	b.n	8007424 <HAL_SPI_MspInit+0x178>
end:
 800741a:	bf00      	nop
 800741c:	e002      	b.n	8007424 <HAL_SPI_MspInit+0x178>
      goto end;
 800741e:	bf00      	nop
 8007420:	e000      	b.n	8007424 <HAL_SPI_MspInit+0x178>
      goto end;
 8007422:	bf00      	nop
  return;
 8007424:	bf00      	nop
}
 8007426:	3728      	adds	r7, #40	; 0x28
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	40003800 	.word	0x40003800
 8007430:	40021000 	.word	0x40021000
 8007434:	48000400 	.word	0x48000400
 8007438:	2000713c 	.word	0x2000713c
 800743c:	40020008 	.word	0x40020008
 8007440:	2000719c 	.word	0x2000719c
 8007444:	4002001c 	.word	0x4002001c

08007448 <HAL_SPI_Write_Read>:
  }
}


HAL_StatusTypeDef HAL_SPI_Write_Read(uint8_t *pBufferTx, uint8_t *pBufferRx, uint32_t nbBytes, bool useDma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef   status;

    /* Assert SS. */
    HAL_GPIO_WritePin(ETH_SPI_SS_GPIO_Port, ETH_SPI_SS_Pin, GPIO_PIN_RESET);
 8007456:	2200      	movs	r2, #0
 8007458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800745c:	480e      	ldr	r0, [pc, #56]	; (8007498 <HAL_SPI_Write_Read+0x50>)
 800745e:	f001 fbaf 	bl	8008bc0 <HAL_GPIO_WritePin>

    if (useDma)
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d009      	beq.n	800747c <HAL_SPI_Write_Read+0x34>
    {
        status = HAL_SPI_TransmitReceive_DMA(&hEthSpi, (uint8_t *)pBufferTx, (uint8_t *)pBufferRx, nbBytes);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	b29b      	uxth	r3, r3
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	68f9      	ldr	r1, [r7, #12]
 8007470:	480a      	ldr	r0, [pc, #40]	; (800749c <HAL_SPI_Write_Read+0x54>)
 8007472:	f003 fa25 	bl	800a8c0 <HAL_SPI_TransmitReceive_DMA>
 8007476:	4603      	mov	r3, r0
 8007478:	75fb      	strb	r3, [r7, #23]
 800747a:	e008      	b.n	800748e <HAL_SPI_Write_Read+0x46>
    }
    else
    {
        status = HAL_SPI_TransmitReceive_IT(&hEthSpi, (uint8_t *)pBufferTx, (uint8_t *)pBufferRx, nbBytes);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	b29b      	uxth	r3, r3
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	68f9      	ldr	r1, [r7, #12]
 8007484:	4805      	ldr	r0, [pc, #20]	; (800749c <HAL_SPI_Write_Read+0x54>)
 8007486:	f003 f96d 	bl	800a764 <HAL_SPI_TransmitReceive_IT>
 800748a:	4603      	mov	r3, r0
 800748c:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	48000400 	.word	0x48000400
 800749c:	200070d8 	.word	0x200070d8

080074a0 <HAL_SPI_Register_Callback>:

uint32_t HAL_SPI_Register_Callback(ADI_CB const *pfCallback, void *const pCBParam)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
    gpfSpiCallback = (ADI_CB)pfCallback;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a05      	ldr	r2, [pc, #20]	; (80074c4 <HAL_SPI_Register_Callback+0x24>)
 80074ae:	6013      	str	r3, [r2, #0]
    gpSpiCBParam = pCBParam ;
 80074b0:	4a05      	ldr	r2, [pc, #20]	; (80074c8 <HAL_SPI_Register_Callback+0x28>)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6013      	str	r3, [r2, #0]

    return 0;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	200070d0 	.word	0x200070d0
 80074c8:	200070d4 	.word	0x200070d4

080074cc <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == ETH_SPI)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a09      	ldr	r2, [pc, #36]	; (8007500 <HAL_SPI_TxRxCpltCallback+0x34>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d10c      	bne.n	80074f8 <HAL_SPI_TxRxCpltCallback+0x2c>
    {
        /* Deassert SS */
        HAL_GPIO_WritePin(ETH_SPI_SS_GPIO_Port, ETH_SPI_SS_Pin, GPIO_PIN_SET);
 80074de:	2201      	movs	r2, #1
 80074e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80074e4:	4807      	ldr	r0, [pc, #28]	; (8007504 <HAL_SPI_TxRxCpltCallback+0x38>)
 80074e6:	f001 fb6b 	bl	8008bc0 <HAL_GPIO_WritePin>

        (*gpfSpiCallback)(gpSpiCBParam, 0, NULL);
 80074ea:	4b07      	ldr	r3, [pc, #28]	; (8007508 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a07      	ldr	r2, [pc, #28]	; (800750c <HAL_SPI_TxRxCpltCallback+0x40>)
 80074f0:	6810      	ldr	r0, [r2, #0]
 80074f2:	2200      	movs	r2, #0
 80074f4:	2100      	movs	r1, #0
 80074f6:	4798      	blx	r3
    }
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	40003800 	.word	0x40003800
 8007504:	48000400 	.word	0x48000400
 8007508:	200070d0 	.word	0x200070d0
 800750c:	200070d4 	.word	0x200070d4

08007510 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == ETH_SPI)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a09      	ldr	r2, [pc, #36]	; (8007544 <HAL_SPI_ErrorCallback+0x34>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d10c      	bne.n	800753c <HAL_SPI_ErrorCallback+0x2c>
  {
    HAL_GPIO_WritePin(ETH_SPI_SS_GPIO_Port, ETH_SPI_SS_Pin, GPIO_PIN_SET);//deassert SS
 8007522:	2201      	movs	r2, #1
 8007524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007528:	4807      	ldr	r0, [pc, #28]	; (8007548 <HAL_SPI_ErrorCallback+0x38>)
 800752a:	f001 fb49 	bl	8008bc0 <HAL_GPIO_WritePin>

    (*gpfSpiCallback)(gpSpiCBParam, 1, NULL);
 800752e:	4b07      	ldr	r3, [pc, #28]	; (800754c <HAL_SPI_ErrorCallback+0x3c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a07      	ldr	r2, [pc, #28]	; (8007550 <HAL_SPI_ErrorCallback+0x40>)
 8007534:	6810      	ldr	r0, [r2, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	2101      	movs	r1, #1
 800753a:	4798      	blx	r3
  }
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40003800 	.word	0x40003800
 8007548:	48000400 	.word	0x48000400
 800754c:	200070d0 	.word	0x200070d0
 8007550:	200070d4 	.word	0x200070d4

08007554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800755a:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <HAL_MspInit+0x44>)
 800755c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755e:	4a0e      	ldr	r2, [pc, #56]	; (8007598 <HAL_MspInit+0x44>)
 8007560:	f043 0301 	orr.w	r3, r3, #1
 8007564:	6613      	str	r3, [r2, #96]	; 0x60
 8007566:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <HAL_MspInit+0x44>)
 8007568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	607b      	str	r3, [r7, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <HAL_MspInit+0x44>)
 8007574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007576:	4a08      	ldr	r2, [pc, #32]	; (8007598 <HAL_MspInit+0x44>)
 8007578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800757c:	6593      	str	r3, [r2, #88]	; 0x58
 800757e:	4b06      	ldr	r3, [pc, #24]	; (8007598 <HAL_MspInit+0x44>)
 8007580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40021000 	.word	0x40021000

0800759c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80075a0:	bf00      	nop
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075aa:	b480      	push	{r7}
 80075ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075ae:	e7fe      	b.n	80075ae <HardFault_Handler+0x4>

080075b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075b4:	e7fe      	b.n	80075b4 <MemManage_Handler+0x4>

080075b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075b6:	b480      	push	{r7}
 80075b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075ba:	e7fe      	b.n	80075ba <BusFault_Handler+0x4>

080075bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075c0:	e7fe      	b.n	80075c0 <UsageFault_Handler+0x4>

080075c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80075c2:	b480      	push	{r7}
 80075c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  while(1)
 80075c6:	e7fe      	b.n	80075c6 <SVC_Handler+0x4>

080075c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  while(1)
 80075cc:	e7fe      	b.n	80075cc <DebugMon_Handler+0x4>

080075ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80075ce:	b480      	push	{r7}
 80075d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  while(1)
 80075d2:	e7fe      	b.n	80075d2 <PendSV_Handler+0x4>

080075d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80075d8:	f000 fcce 	bl	8007f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80075dc:	bf00      	nop
 80075de:	bd80      	pop	{r7, pc}

080075e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hDmaEthSpiTx);
 80075e4:	4802      	ldr	r0, [pc, #8]	; (80075f0 <DMA1_Channel1_IRQHandler+0x10>)
 80075e6:	f001 f809 	bl	80085fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80075ea:	bf00      	nop
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	2000713c 	.word	0x2000713c

080075f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hDmaEthSpiRx);
 80075f8:	4802      	ldr	r0, [pc, #8]	; (8007604 <DMA1_Channel2_IRQHandler+0x10>)
 80075fa:	f000 ffff 	bl	80085fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80075fe:	bf00      	nop
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	2000719c 	.word	0x2000719c

08007608 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800760c:	4802      	ldr	r0, [pc, #8]	; (8007618 <USART1_IRQHandler+0x10>)
 800760e:	f004 f8c3 	bl	800b798 <HAL_UART_IRQHandler>
}
 8007612:	bf00      	nop
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20007208 	.word	0x20007208

0800761c <EXTI15_10_IRQHandler>:
/* USER CODE BEGIN 1 */
void ETH_INT_N_IRQ_HANDLER(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ETH_INT_N_Pin);
 8007620:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007624:	f001 fafe 	bl	8008c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007628:	bf00      	nop
 800762a:	bd80      	pop	{r7, pc}

0800762c <SPI2_IRQHandler>:
  * @brief  This function handles SPI interrupt request.
  * @param  None
  * @retval None
  */
void ETH_SPI_IRQ_HANDLER(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hEthSpi);
 8007630:	4802      	ldr	r0, [pc, #8]	; (800763c <SPI2_IRQHandler+0x10>)
 8007632:	f003 fac9 	bl	800abc8 <HAL_SPI_IRQHandler>
}
 8007636:	bf00      	nop
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	200070d8 	.word	0x200070d8

08007640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  return 1;
 8007644:	2301      	movs	r3, #1
}
 8007646:	4618      	mov	r0, r3
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <_kill>:

int _kill(int pid, int sig)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800765a:	f012 f875 	bl	8019748 <__errno>
 800765e:	4603      	mov	r3, r0
 8007660:	2216      	movs	r2, #22
 8007662:	601a      	str	r2, [r3, #0]
  return -1;
 8007664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <_exit>:

void _exit (int status)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff ffe7 	bl	8007650 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007682:	e7fe      	b.n	8007682 <_exit+0x12>

08007684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007690:	2300      	movs	r3, #0
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	e00a      	b.n	80076ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007696:	f3af 8000 	nop.w
 800769a:	4601      	mov	r1, r0
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	60ba      	str	r2, [r7, #8]
 80076a2:	b2ca      	uxtb	r2, r1
 80076a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	3301      	adds	r3, #1
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	dbf0      	blt.n	8007696 <_read+0x12>
  }

  return len;
 80076b4:	687b      	ldr	r3, [r7, #4]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b086      	sub	sp, #24
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	60b9      	str	r1, [r7, #8]
 80076c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
 80076ce:	e009      	b.n	80076e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	60ba      	str	r2, [r7, #8]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	4618      	mov	r0, r3
 80076da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	3301      	adds	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	dbf1      	blt.n	80076d0 <_write+0x12>
  }
  return len;
 80076ec:	687b      	ldr	r3, [r7, #4]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <_close>:

int _close(int file)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800771e:	605a      	str	r2, [r3, #4]
  return 0;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <_isatty>:

int _isatty(int file)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007736:	2301      	movs	r3, #1
}
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <SystemClock_Config>:

#include "sysclock.h"


HAL_StatusTypeDef SystemClock_Config(void)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b0bc      	sub	sp, #240	; 0xf0
 8007762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef     result;

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007764:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8007768:	2244      	movs	r2, #68	; 0x44
 800776a:	2100      	movs	r1, #0
 800776c:	4618      	mov	r0, r3
 800776e:	f011 ff6d 	bl	801964c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007772:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	605a      	str	r2, [r3, #4]
 800777c:	609a      	str	r2, [r3, #8]
 800777e:	60da      	str	r2, [r3, #12]
 8007780:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007782:	463b      	mov	r3, r7
 8007784:	2294      	movs	r2, #148	; 0x94
 8007786:	2100      	movs	r1, #0
 8007788:	4618      	mov	r0, r3
 800778a:	f011 ff5f 	bl	801964c <memset>

  /** Configure the main internal regulator output voltage
  */
  result = HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800778e:	2000      	movs	r0, #0
 8007790:	f001 faa0 	bl	8008cd4 <HAL_PWREx_ControlVoltageScaling>
 8007794:	4603      	mov	r3, r0
 8007796:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  if (result != HAL_OK)
 800779a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d15f      	bne.n	8007862 <SystemClock_Config+0x104>
    goto end;
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80077a2:	2312      	movs	r3, #18
 80077a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80077a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80077b0:	2340      	movs	r3, #64	; 0x40
 80077b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80077c2:	2360      	movs	r3, #96	; 0x60
 80077c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80077c8:	2302      	movs	r3, #2
 80077ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLM = 1;
 80077d4:	2301      	movs	r3, #1
 80077d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLN = BSP_CLK_CFG_PLLN;
 80077da:	2330      	movs	r3, #48	; 0x30
 80077dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80077e0:	2302      	movs	r3, #2
 80077e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80077e6:	2302      	movs	r3, #2
 80077e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLR = BSP_CLK_CFG_PLLR;
 80077ec:	2302      	movs	r3, #2
 80077ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  result = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80077f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80077f6:	4618      	mov	r0, r3
 80077f8:	f001 fb20 	bl	8008e3c <HAL_RCC_OscConfig>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  if (result != HAL_OK)
 8007802:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8007806:	2b00      	cmp	r3, #0
 8007808:	d12d      	bne.n	8007866 <SystemClock_Config+0x108>
  {
    goto end;
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800780a:	230f      	movs	r3, #15
 800780c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007810:	2303      	movs	r3, #3
 8007812:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007816:	2300      	movs	r3, #0
 8007818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB1CLKDivider = BSP_CLK_CFG_APB1CLKDIV;
 800781c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007824:	2300      	movs	r3, #0
 8007826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  result = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, BSP_CLK_CFG_FLASH_LATENCY);
 800782a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800782e:	2104      	movs	r1, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f001 ff1d 	bl	8009670 <HAL_RCC_ClockConfig>
 8007836:	4603      	mov	r3, r0
 8007838:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  if (result != HAL_OK)
 800783c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8007840:	2b00      	cmp	r3, #0
 8007842:	d112      	bne.n	800786a <SystemClock_Config+0x10c>
  {
    goto end;
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007844:	2301      	movs	r3, #1
 8007846:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8007848:	2302      	movs	r3, #2
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
  result = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800784c:	463b      	mov	r3, r7
 800784e:	4618      	mov	r0, r3
 8007850:	f002 f9cc 	bl	8009bec <HAL_RCCEx_PeriphCLKConfig>
 8007854:	4603      	mov	r3, r0
 8007856:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  if (result != HAL_OK)
 800785a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800785e:	2b00      	cmp	r3, #0
  {
    goto end;
  }

end:
 8007860:	e004      	b.n	800786c <SystemClock_Config+0x10e>
    goto end;
 8007862:	bf00      	nop
 8007864:	e002      	b.n	800786c <SystemClock_Config+0x10e>
    goto end;
 8007866:	bf00      	nop
 8007868:	e000      	b.n	800786c <SystemClock_Config+0x10e>
    goto end;
 800786a:	bf00      	nop
  return result;
 800786c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8007870:	4618      	mov	r0, r3
 8007872:	37f0      	adds	r7, #240	; 0xf0
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007880:	4a14      	ldr	r2, [pc, #80]	; (80078d4 <_sbrk+0x5c>)
 8007882:	4b15      	ldr	r3, [pc, #84]	; (80078d8 <_sbrk+0x60>)
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800788c:	4b13      	ldr	r3, [pc, #76]	; (80078dc <_sbrk+0x64>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007894:	4b11      	ldr	r3, [pc, #68]	; (80078dc <_sbrk+0x64>)
 8007896:	4a12      	ldr	r2, [pc, #72]	; (80078e0 <_sbrk+0x68>)
 8007898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800789a:	4b10      	ldr	r3, [pc, #64]	; (80078dc <_sbrk+0x64>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4413      	add	r3, r2
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d207      	bcs.n	80078b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80078a8:	f011 ff4e 	bl	8019748 <__errno>
 80078ac:	4603      	mov	r3, r0
 80078ae:	220c      	movs	r2, #12
 80078b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80078b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078b6:	e009      	b.n	80078cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80078b8:	4b08      	ldr	r3, [pc, #32]	; (80078dc <_sbrk+0x64>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <_sbrk+0x64>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4413      	add	r3, r2
 80078c6:	4a05      	ldr	r2, [pc, #20]	; (80078dc <_sbrk+0x64>)
 80078c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80078ca:	68fb      	ldr	r3, [r7, #12]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	200a0000 	.word	0x200a0000
 80078d8:	00000400 	.word	0x00000400
 80078dc:	200071fc 	.word	0x200071fc
 80078e0:	20007a98 	.word	0x20007a98

080078e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80078e8:	4b17      	ldr	r3, [pc, #92]	; (8007948 <SystemInit+0x64>)
 80078ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ee:	4a16      	ldr	r2, [pc, #88]	; (8007948 <SystemInit+0x64>)
 80078f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80078f8:	4b14      	ldr	r3, [pc, #80]	; (800794c <SystemInit+0x68>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a13      	ldr	r2, [pc, #76]	; (800794c <SystemInit+0x68>)
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007904:	4b11      	ldr	r3, [pc, #68]	; (800794c <SystemInit+0x68>)
 8007906:	2200      	movs	r2, #0
 8007908:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800790a:	4b10      	ldr	r3, [pc, #64]	; (800794c <SystemInit+0x68>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a0f      	ldr	r2, [pc, #60]	; (800794c <SystemInit+0x68>)
 8007910:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007914:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007918:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <SystemInit+0x68>)
 800791c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007920:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007922:	4b0a      	ldr	r3, [pc, #40]	; (800794c <SystemInit+0x68>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a09      	ldr	r2, [pc, #36]	; (800794c <SystemInit+0x68>)
 8007928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800792c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800792e:	4b07      	ldr	r3, [pc, #28]	; (800794c <SystemInit+0x68>)
 8007930:	2200      	movs	r2, #0
 8007932:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007934:	4b04      	ldr	r3, [pc, #16]	; (8007948 <SystemInit+0x64>)
 8007936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800793a:	609a      	str	r2, [r3, #8]
#endif
}
 800793c:	bf00      	nop
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	e000ed00 	.word	0xe000ed00
 800794c:	40021000 	.word	0x40021000

08007950 <tcpecho_raw_free>:
  struct pbuf *p;
};

static void
tcpecho_raw_free(struct tcpecho_raw_state *es)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  if (es != NULL) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <tcpecho_raw_free+0x26>
    if (es->p) {
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d004      	beq.n	8007970 <tcpecho_raw_free+0x20>
      /* free the buffer chain if present */
      pbuf_free(es->p);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	4618      	mov	r0, r3
 800796c:	f007 fa66 	bl	800ee3c <pbuf_free>
    }

    mem_free(es);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f006 fcf4 	bl	800e35e <mem_free>
  }  
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <tcpecho_raw_close>:

static void
tcpecho_raw_close(struct tcp_pcb *tpcb, struct tcpecho_raw_state *es)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
  tcp_arg(tpcb, NULL);
 8007988:	2100      	movs	r1, #0
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f008 fdf0 	bl	8010570 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8007990:	2100      	movs	r1, #0
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f008 fe0f 	bl	80105b6 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8007998:	2100      	movs	r1, #0
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f008 fdf9 	bl	8010592 <tcp_recv>
  tcp_err(tpcb, NULL);
 80079a0:	2100      	movs	r1, #0
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f008 fe19 	bl	80105da <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80079a8:	2200      	movs	r2, #0
 80079aa:	2100      	movs	r1, #0
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f008 fe3d 	bl	801062c <tcp_poll>

  tcpecho_raw_free(es);
 80079b2:	6838      	ldr	r0, [r7, #0]
 80079b4:	f7ff ffcc 	bl	8007950 <tcpecho_raw_free>

  tcp_close(tpcb);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f007 fda0 	bl	800f4fe <tcp_close>
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <tcpecho_raw_send>:

static void
tcpecho_raw_send(struct tcp_pcb *tpcb, struct tcpecho_raw_state *es)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 80079d4:	e031      	b.n	8007a3a <tcpecho_raw_send+0x74>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb))) {
    ptr = es->p;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	6859      	ldr	r1, [r3, #4]
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	895a      	ldrh	r2, [r3, #10]
 80079e4:	2301      	movs	r3, #1
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f00b fa22 	bl	8012e30 <tcp_write>
 80079ec:	4603      	mov	r3, r0
 80079ee:	75fb      	strb	r3, [r7, #23]
    if (wr_err == ERR_OK) {
 80079f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d118      	bne.n	8007a2a <tcpecho_raw_send+0x64>
      u16_t plen;

      plen = ptr->len;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	895b      	ldrh	r3, [r3, #10]
 80079fc:	81fb      	strh	r3, [r7, #14]
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	609a      	str	r2, [r3, #8]
      if(es->p != NULL) {
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d004      	beq.n	8007a18 <tcpecho_raw_send+0x52>
        /* new reference! */
        pbuf_ref(es->p);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f007 fa7c 	bl	800ef10 <pbuf_ref>
      }
      /* chop first pbuf from chain */
      pbuf_free(ptr);
 8007a18:	6938      	ldr	r0, [r7, #16]
 8007a1a:	f007 fa0f 	bl	800ee3c <pbuf_free>
      /* we can read more data now */
      tcp_recved(tpcb, plen);
 8007a1e:	89fb      	ldrh	r3, [r7, #14]
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f007 ffb0 	bl	800f988 <tcp_recved>
 8007a28:	e007      	b.n	8007a3a <tcpecho_raw_send+0x74>
    } else if(wr_err == ERR_MEM) {
 8007a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a32:	d102      	bne.n	8007a3a <tcpecho_raw_send+0x74>
      /* we are low on memory, try later / harder, defer to poll */
      es->p = ptr;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	609a      	str	r2, [r3, #8]
         (es->p != NULL) && 
 8007a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <tcpecho_raw_send+0x94>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <tcpecho_raw_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb))) {
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	895a      	ldrh	r2, [r3, #10]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d9bd      	bls.n	80079d6 <tcpecho_raw_send+0x10>
    } else {
      /* other problem ?? */
    }
  }
}
 8007a5a:	bf00      	nop
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <tcpecho_raw_error>:

static void
tcpecho_raw_error(void *arg, err_t err)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b084      	sub	sp, #16
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  struct tcpecho_raw_state *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcpecho_raw_state *)arg;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60fb      	str	r3, [r7, #12]

  tcpecho_raw_free(es);
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff ff6c 	bl	8007950 <tcpecho_raw_free>
}
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <tcpecho_raw_poll>:
// Define 'last_send_time'
// Function poll callback for the TCP echo server. Timer baserer seg til polling interval set i initialization.
static err_t tcpecho_raw_poll(void *arg, struct tcp_pcb *tpcb) {
 8007a80:	b590      	push	{r4, r7, lr}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]

	// Retrieve the state structure til current TCP connection, passed as 'arg' basert på default LWIP -raw API.
	struct tcpecho_raw_state *es = (struct tcpecho_raw_state *)arg;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	617b      	str	r3, [r7, #20]

	// Get the current system time in milliseconds from the lwIP system clock.
	u32_t current_time = sys_now();
 8007a8e:	f7fe fe7b 	bl	8006788 <sys_now>
 8007a92:	6138      	str	r0, [r7, #16]

    // Check if 500ms
    if (current_time - last_send_time >= 500) {
 8007a94:	4b18      	ldr	r3, [pc, #96]	; (8007af8 <tcpecho_raw_poll+0x78>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007aa0:	d31b      	bcc.n	8007ada <tcpecho_raw_poll+0x5a>
        const char *msg = "Hello, this is a timed message! \n";
 8007aa2:	4b16      	ldr	r3, [pc, #88]	; (8007afc <tcpecho_raw_poll+0x7c>)
 8007aa4:	60fb      	str	r3, [r7, #12]

        // Check if there is enough space in the TCP send buffer to send the message.
        if (tcp_sndbuf(tpcb) > strlen(msg)) {
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007aac:	461c      	mov	r4, r3
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f7f8 fbb0 	bl	8000214 <strlen>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	429c      	cmp	r4, r3
 8007ab8:	d90f      	bls.n	8007ada <tcpecho_raw_poll+0x5a>
        	 // Write the message to the TCP send buffer.
        	/* pcb: The TCP control block (PCB) -> Den init
			   data: Pointer to the data to be sent.
               len: Length of the data in bytes.
               flags: Control flag -> operation av tcp_write.*/
            tcp_write(tpcb, msg, strlen(msg), TCP_WRITE_FLAG_COPY);// Ensure that the message is actually sent out over the network.
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7f8 fbaa 	bl	8000214 <strlen>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	6838      	ldr	r0, [r7, #0]
 8007aca:	f00b f9b1 	bl	8012e30 <tcp_write>
             avoiding potential pitfalls like buffer overruns or unnecessary delays in data transmission.
             - https://lwip.fandom.com/wiki/Tuning_TCP
             */

            // Calls the internal lwIP function to process and send TCP packets.
            tcp_output(tpcb); //OUTPUT fra LWIP
 8007ace:	6838      	ldr	r0, [r7, #0]
 8007ad0:	f00b fe74 	bl	80137bc <tcp_output>
            last_send_time = current_time;  // Update the last send time -> current time
 8007ad4:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <tcpecho_raw_poll+0x78>)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	6013      	str	r3, [r2, #0]
        }
    }

    // Check if -> echo server state == not null, som betyr connection is still active
    if (es != NULL) {
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <tcpecho_raw_poll+0x64>
    	// Abort the TCP connection to clean up the PCB and release resources.
        tcp_abort(tpcb);
        return ERR_ABRT;
    }
    // If everything processed correctly and the connection is still active, return ERR_OK.
    return ERR_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e004      	b.n	8007aee <tcpecho_raw_poll+0x6e>
        tcp_abort(tpcb);
 8007ae4:	6838      	ldr	r0, [r7, #0]
 8007ae6:	f007 fdcd 	bl	800f684 <tcp_abort>
        return ERR_ABRT;
 8007aea:	f06f 030c 	mvn.w	r3, #12
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	371c      	adds	r7, #28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd90      	pop	{r4, r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20007200 	.word	0x20007200
 8007afc:	0801a604 	.word	0x0801a604

08007b00 <tcpecho_raw_sent>:


static err_t
tcpecho_raw_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
  struct tcpecho_raw_state *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcpecho_raw_state *)arg;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2200      	movs	r2, #0
 8007b16:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL) {
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d008      	beq.n	8007b32 <tcpecho_raw_sent+0x32>
    /* still got pbufs to send */
    tcp_sent(tpcb, tcpecho_raw_sent);
 8007b20:	490a      	ldr	r1, [pc, #40]	; (8007b4c <tcpecho_raw_sent+0x4c>)
 8007b22:	68b8      	ldr	r0, [r7, #8]
 8007b24:	f008 fd47 	bl	80105b6 <tcp_sent>
    tcpecho_raw_send(tpcb, es);
 8007b28:	6979      	ldr	r1, [r7, #20]
 8007b2a:	68b8      	ldr	r0, [r7, #8]
 8007b2c:	f7ff ff4b 	bl	80079c6 <tcpecho_raw_send>
 8007b30:	e007      	b.n	8007b42 <tcpecho_raw_sent+0x42>
  } else {
    /* no more pbufs to send */
    if(es->state == ES_CLOSING) {
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d103      	bne.n	8007b42 <tcpecho_raw_sent+0x42>
      tcpecho_raw_close(tpcb, es);
 8007b3a:	6979      	ldr	r1, [r7, #20]
 8007b3c:	68b8      	ldr	r0, [r7, #8]
 8007b3e:	f7ff ff1e 	bl	800797e <tcpecho_raw_close>
    }
  }
  return ERR_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	08007b01 	.word	0x08007b01

08007b50 <tcpecho_raw_recv>:
static err_t
tcpecho_raw_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	70fb      	strb	r3, [r7, #3]
    struct tcpecho_raw_state *es;
    err_t ret_err;

    LWIP_ASSERT("arg != NULL", arg != NULL);
    es = (struct tcpecho_raw_state *)arg;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	613b      	str	r3, [r7, #16]

    if (p == NULL) {
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d112      	bne.n	8007b8e <tcpecho_raw_recv+0x3e>
        // Connection closed
        es->state = ES_CLOSING;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2203      	movs	r2, #3
 8007b6c:	701a      	strb	r2, [r3, #0]
        if (es->p == NULL) {
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <tcpecho_raw_recv+0x30>
            tcpecho_raw_close(tpcb, es);
 8007b76:	6939      	ldr	r1, [r7, #16]
 8007b78:	68b8      	ldr	r0, [r7, #8]
 8007b7a:	f7ff ff00 	bl	800797e <tcpecho_raw_close>
 8007b7e:	e003      	b.n	8007b88 <tcpecho_raw_recv+0x38>
        } else {
            tcpecho_raw_send(tpcb, es);
 8007b80:	6939      	ldr	r1, [r7, #16]
 8007b82:	68b8      	ldr	r0, [r7, #8]
 8007b84:	f7ff ff1f 	bl	80079c6 <tcpecho_raw_send>
        }
        ret_err = ERR_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	75fb      	strb	r3, [r7, #23]
 8007b8c:	e02d      	b.n	8007bea <tcpecho_raw_recv+0x9a>
    } else if (err != ERR_OK) {
 8007b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d008      	beq.n	8007ba8 <tcpecho_raw_recv+0x58>
        // Handle receive error
        if (p != NULL) {
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <tcpecho_raw_recv+0x52>
            pbuf_free(p);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f007 f94d 	bl	800ee3c <pbuf_free>
        }
        ret_err = err;
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	75fb      	strb	r3, [r7, #23]
 8007ba6:	e020      	b.n	8007bea <tcpecho_raw_recv+0x9a>
    } else {
        // Process received data
        if (es->state == ES_ACCEPTED) {
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d102      	bne.n	8007bb6 <tcpecho_raw_recv+0x66>
            es->state = ES_RECEIVED;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	701a      	strb	r2, [r3, #0]
        }
        send_eval_string_msg(tpcb); // Send the EVAL_STRING_MSG
 8007bb6:	68b8      	ldr	r0, [r7, #8]
 8007bb8:	f000 f8aa 	bl	8007d10 <send_eval_string_msg>

        // Echo logic as before
        if (es->p != NULL) {
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d006      	beq.n	8007bd2 <tcpecho_raw_recv+0x82>
            pbuf_cat(es->p, p);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f007 f9b3 	bl	800ef36 <pbuf_cat>
 8007bd0:	e005      	b.n	8007bde <tcpecho_raw_recv+0x8e>
        } else {
            es->p = p;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	609a      	str	r2, [r3, #8]
            pbuf_ref(p);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f007 f999 	bl	800ef10 <pbuf_ref>
        }
        tcpecho_raw_send(tpcb, es);
 8007bde:	6939      	ldr	r1, [r7, #16]
 8007be0:	68b8      	ldr	r0, [r7, #8]
 8007be2:	f7ff fef0 	bl	80079c6 <tcpecho_raw_send>
        ret_err = ERR_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	75fb      	strb	r3, [r7, #23]
    }
    return ret_err;
 8007bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <tcpecho_raw_accept>:


static err_t
tcpecho_raw_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	71fb      	strb	r3, [r7, #7]
  err_t ret_err;
  struct tcpecho_raw_state *es;

  LWIP_UNUSED_ARG(arg);
  if ((err != ERR_OK) || (newpcb == NULL)) {
 8007c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <tcpecho_raw_accept+0x1c>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d102      	bne.n	8007c1a <tcpecho_raw_accept+0x22>
    return ERR_VAL;
 8007c14:	f06f 0305 	mvn.w	r3, #5
 8007c18:	e032      	b.n	8007c80 <tcpecho_raw_accept+0x88>
  }

  /* Unless this pcb should have NORMAL priority, set its priority now.
     When running out of pcbs, low priority pcbs can be aborted to create
     new pcbs of higher priority. */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	68b8      	ldr	r0, [r7, #8]
 8007c1e:	f008 fadb 	bl	80101d8 <tcp_setprio>

  es = (struct tcpecho_raw_state *)mem_malloc(sizeof(struct tcpecho_raw_state));
 8007c22:	200c      	movs	r0, #12
 8007c24:	f006 fb8d 	bl	800e342 <mem_malloc>
 8007c28:	6138      	str	r0, [r7, #16]
  if (es != NULL) {
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d023      	beq.n	8007c78 <tcpecho_raw_accept+0x80>
    es->state = ES_ACCEPTED;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2201      	movs	r2, #1
 8007c34:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	2200      	movs	r2, #0
 8007c46:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 8007c48:	6939      	ldr	r1, [r7, #16]
 8007c4a:	68b8      	ldr	r0, [r7, #8]
 8007c4c:	f008 fc90 	bl	8010570 <tcp_arg>
    tcp_recv(newpcb, tcpecho_raw_recv);
 8007c50:	490d      	ldr	r1, [pc, #52]	; (8007c88 <tcpecho_raw_accept+0x90>)
 8007c52:	68b8      	ldr	r0, [r7, #8]
 8007c54:	f008 fc9d 	bl	8010592 <tcp_recv>
    tcp_err(newpcb, tcpecho_raw_error);
 8007c58:	490c      	ldr	r1, [pc, #48]	; (8007c8c <tcpecho_raw_accept+0x94>)
 8007c5a:	68b8      	ldr	r0, [r7, #8]
 8007c5c:	f008 fcbd 	bl	80105da <tcp_err>
    tcp_poll(newpcb, tcpecho_raw_poll, 0);
 8007c60:	2200      	movs	r2, #0
 8007c62:	490b      	ldr	r1, [pc, #44]	; (8007c90 <tcpecho_raw_accept+0x98>)
 8007c64:	68b8      	ldr	r0, [r7, #8]
 8007c66:	f008 fce1 	bl	801062c <tcp_poll>
    tcp_sent(newpcb, tcpecho_raw_sent);
 8007c6a:	490a      	ldr	r1, [pc, #40]	; (8007c94 <tcpecho_raw_accept+0x9c>)
 8007c6c:	68b8      	ldr	r0, [r7, #8]
 8007c6e:	f008 fca2 	bl	80105b6 <tcp_sent>
    ret_err = ERR_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75fb      	strb	r3, [r7, #23]
 8007c76:	e001      	b.n	8007c7c <tcpecho_raw_accept+0x84>
  } else {
    ret_err = ERR_MEM;
 8007c78:	23ff      	movs	r3, #255	; 0xff
 8007c7a:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8007c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	08007b51 	.word	0x08007b51
 8007c8c:	08007a63 	.word	0x08007a63
 8007c90:	08007a81 	.word	0x08007a81
 8007c94:	08007b01 	.word	0x08007b01

08007c98 <tcpecho_raw_init>:

// Initialization function to set up the PCB and polling
void tcpecho_raw_init(void) {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
	//LAGER TCP  PCB -> TCP SOCKET
    global_tpcb = tcp_new();
 8007c9e:	f008 fc51 	bl	8010544 <tcp_new>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <tcpecho_raw_init+0x68>)
 8007ca6:	6013      	str	r3, [r2, #0]
    if (global_tpcb != NULL) {  // Check if the PCB was successfully created.
 8007ca8:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <tcpecho_raw_init+0x68>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d022      	beq.n	8007cf6 <tcpecho_raw_init+0x5e>
        err_t err = tcp_bind(global_tpcb, IP_ADDR_ANY, 66);
 8007cb0:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <tcpecho_raw_init+0x68>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2242      	movs	r2, #66	; 0x42
 8007cb6:	4913      	ldr	r1, [pc, #76]	; (8007d04 <tcpecho_raw_init+0x6c>)
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f007 fcef 	bl	800f69c <tcp_bind>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	71fb      	strb	r3, [r7, #7]
        // Bind the newly created PCB object to any IP address on port 66.

        if (err == ERR_OK) {// Check if the binding was successful.
 8007cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d115      	bne.n	8007cf6 <tcpecho_raw_init+0x5e>

        	// Putter PCB == LISTEN state, convert til listen PCB -> accept incoming connections.
        	global_tpcb = tcp_listen(global_tpcb);
 8007cca:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <tcpecho_raw_init+0x68>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	21ff      	movs	r1, #255	; 0xff
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f007 fd75 	bl	800f7c0 <tcp_listen_with_backlog>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4a09      	ldr	r2, [pc, #36]	; (8007d00 <tcpecho_raw_init+0x68>)
 8007cda:	6013      	str	r3, [r2, #0]

        	 // Set up a callback function som event handler -> incoming connections.
        	 // `tcp_accept` assigns a function to be called when a new connection is established.
            tcp_accept(global_tpcb, tcpecho_raw_accept);
 8007cdc:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <tcpecho_raw_init+0x68>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4909      	ldr	r1, [pc, #36]	; (8007d08 <tcpecho_raw_init+0x70>)
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f008 fc8b 	bl	80105fe <tcp_accept>

            // Set up a callback function to be called periodically
            // polling callback brukt som regularly check/event handle tasks som å  sende periodic/timed messages
            // The `1` = polling frequency; in the lwIP stack ->> multiplied av TCP timer interval
            // (typically 500 ms), so a value of `1`  = 500 ms.
            tcp_poll(global_tpcb, tcpecho_raw_poll, 1);  // Set the poll interval
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <tcpecho_raw_init+0x68>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2201      	movs	r2, #1
 8007cee:	4907      	ldr	r1, [pc, #28]	; (8007d0c <tcpecho_raw_init+0x74>)
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f008 fc9b 	bl	801062c <tcp_poll>
        }
    }
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20007204 	.word	0x20007204
 8007d04:	0801bb3c 	.word	0x0801bb3c
 8007d08:	08007bf9 	.word	0x08007bf9
 8007d0c:	08007a81 	.word	0x08007a81

08007d10 <send_eval_string_msg>:



void send_eval_string_msg(struct tcp_pcb *tpcb) {
 8007d10:	b590      	push	{r4, r7, lr}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
    if (tpcb != NULL && tcp_sndbuf(tpcb) > strlen(EVAL_STRING_MSG)) {
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d01c      	beq.n	8007d58 <send_eval_string_msg+0x48>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007d24:	461c      	mov	r4, r3
 8007d26:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <send_eval_string_msg+0x50>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7f8 fa72 	bl	8000214 <strlen>
 8007d30:	4603      	mov	r3, r0
 8007d32:	429c      	cmp	r4, r3
 8007d34:	d910      	bls.n	8007d58 <send_eval_string_msg+0x48>
        tcp_write(tpcb, EVAL_STRING_MSG, strlen(EVAL_STRING_MSG), TCP_WRITE_FLAG_COPY);
 8007d36:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <send_eval_string_msg+0x50>)
 8007d38:	681c      	ldr	r4, [r3, #0]
 8007d3a:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <send_eval_string_msg+0x50>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7f8 fa68 	bl	8000214 <strlen>
 8007d44:	4603      	mov	r3, r0
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4621      	mov	r1, r4
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f00b f86f 	bl	8012e30 <tcp_write>
        tcp_output(tpcb);  // Data sendt Instant, brukes kanskje senere, vet ikke, har bare med tilfelle
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f00b fd32 	bl	80137bc <tcp_output>
    }
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd90      	pop	{r4, r7, pc}
 8007d60:	2000012c 	.word	0x2000012c

08007d64 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart1_rx;
/* USART1 init function */

HAL_StatusTypeDef MX_USART1_UART_Init(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007d68:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007d6a:	4a14      	ldr	r2, [pc, #80]	; (8007dbc <MX_USART1_UART_Init+0x58>)
 8007d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007d6e:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007d74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d76:	4b10      	ldr	r3, [pc, #64]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d7c:	4b0e      	ldr	r3, [pc, #56]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d82:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d88:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007d8a:	220c      	movs	r2, #12
 8007d8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d94:	4b08      	ldr	r3, [pc, #32]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007da6:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	629a      	str	r2, [r3, #40]	; 0x28

  return HAL_UART_Init(&huart1);
 8007dac:	4802      	ldr	r0, [pc, #8]	; (8007db8 <MX_USART1_UART_Init+0x54>)
 8007dae:	f003 fc13 	bl	800b5d8 <HAL_UART_Init>
 8007db2:	4603      	mov	r3, r0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20007208 	.word	0x20007208
 8007dbc:	40013800 	.word	0x40013800

08007dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	605a      	str	r2, [r3, #4]
 8007dd2:	609a      	str	r2, [r3, #8]
 8007dd4:	60da      	str	r2, [r3, #12]
 8007dd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a16      	ldr	r2, [pc, #88]	; (8007e38 <HAL_UART_MspInit+0x78>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d125      	bne.n	8007e2e <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007de2:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <HAL_UART_MspInit+0x7c>)
 8007de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de6:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <HAL_UART_MspInit+0x7c>)
 8007de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dec:	6613      	str	r3, [r2, #96]	; 0x60
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <HAL_UART_MspInit+0x7c>)
 8007df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007df6:	60bb      	str	r3, [r7, #8]
 8007df8:	68bb      	ldr	r3, [r7, #8]

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8007dfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e00:	2302      	movs	r3, #2
 8007e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007e0c:	2307      	movs	r3, #7
 8007e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e10:	f107 030c 	add.w	r3, r7, #12
 8007e14:	4619      	mov	r1, r3
 8007e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e1a:	f000 fd3f 	bl	800889c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */
 /* NVIC for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 1);
 8007e1e:	2201      	movs	r2, #1
 8007e20:	2101      	movs	r1, #1
 8007e22:	2025      	movs	r0, #37	; 0x25
 8007e24:	f000 f9c7 	bl	80081b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007e28:	2025      	movs	r0, #37	; 0x25
 8007e2a:	f000 f9e0 	bl	80081ee <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_MspInit 1 */

  }
}
 8007e2e:	bf00      	nop
 8007e30:	3720      	adds	r7, #32
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40013800 	.word	0x40013800
 8007e3c:	40021000 	.word	0x40021000

08007e40 <submitTxBuffer>:

  return HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, nbBytes);
}

HAL_StatusTypeDef submitTxBuffer (uint8_t * buffer, int nbBytes)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]

  return HAL_UART_Transmit(&huart1, (uint8_t*)buffer, nbBytes,5);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	2305      	movs	r3, #5
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	4804      	ldr	r0, [pc, #16]	; (8007e64 <submitTxBuffer+0x24>)
 8007e54:	f003 fc10 	bl	800b678 <HAL_UART_Transmit>
 8007e58:	4603      	mov	r3, r0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20007208 	.word	0x20007208

08007e68 <HAL_UART_ErrorCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007eb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007e80:	f7ff fd30 	bl	80078e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007e84:	480c      	ldr	r0, [pc, #48]	; (8007eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8007e86:	490d      	ldr	r1, [pc, #52]	; (8007ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8007e88:	4a0d      	ldr	r2, [pc, #52]	; (8007ec0 <LoopForever+0xe>)
  movs r3, #0
 8007e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007e8c:	e002      	b.n	8007e94 <LoopCopyDataInit>

08007e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007e92:	3304      	adds	r3, #4

08007e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007e98:	d3f9      	bcc.n	8007e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007e9a:	4a0a      	ldr	r2, [pc, #40]	; (8007ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007e9c:	4c0a      	ldr	r4, [pc, #40]	; (8007ec8 <LoopForever+0x16>)
  movs r3, #0
 8007e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ea0:	e001      	b.n	8007ea6 <LoopFillZerobss>

08007ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ea4:	3204      	adds	r2, #4

08007ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ea8:	d3fb      	bcc.n	8007ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007eaa:	f011 fc53 	bl	8019754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007eae:	f7ff f8e3 	bl	8007078 <main>

08007eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8007eb2:	e7fe      	b.n	8007eb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007eb4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8007eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007ebc:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8007ec0:	0801bc40 	.word	0x0801bc40
  ldr r2, =_sbss
 8007ec4:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8007ec8:	20007a94 	.word	0x20007a94

08007ecc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007ecc:	e7fe      	b.n	8007ecc <ADC1_IRQHandler>

08007ece <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ed8:	2003      	movs	r0, #3
 8007eda:	f000 f961 	bl	80081a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007ede:	2000      	movs	r0, #0
 8007ee0:	f000 f80e 	bl	8007f00 <HAL_InitTick>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	71fb      	strb	r3, [r7, #7]
 8007eee:	e001      	b.n	8007ef4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007ef0:	f7ff fb30 	bl	8007554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007ef4:	79fb      	ldrb	r3, [r7, #7]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <HAL_InitTick+0x6c>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d023      	beq.n	8007f5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007f14:	4b16      	ldr	r3, [pc, #88]	; (8007f70 <HAL_InitTick+0x70>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <HAL_InitTick+0x6c>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f97b 	bl	8008226 <HAL_SYSTICK_Config>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10f      	bne.n	8007f56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b0f      	cmp	r3, #15
 8007f3a:	d809      	bhi.n	8007f50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f44:	f000 f937 	bl	80081b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007f48:	4a0a      	ldr	r2, [pc, #40]	; (8007f74 <HAL_InitTick+0x74>)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	e007      	b.n	8007f60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	73fb      	strb	r3, [r7, #15]
 8007f54:	e004      	b.n	8007f60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	73fb      	strb	r3, [r7, #15]
 8007f5a:	e001      	b.n	8007f60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000134 	.word	0x20000134
 8007f70:	20000128 	.word	0x20000128
 8007f74:	20000130 	.word	0x20000130

08007f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007f7c:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <HAL_IncTick+0x20>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <HAL_IncTick+0x24>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4413      	add	r3, r2
 8007f88:	4a04      	ldr	r2, [pc, #16]	; (8007f9c <HAL_IncTick+0x24>)
 8007f8a:	6013      	str	r3, [r2, #0]
}
 8007f8c:	bf00      	nop
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	20000134 	.word	0x20000134
 8007f9c:	2000729c 	.word	0x2000729c

08007fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8007fa4:	4b03      	ldr	r3, [pc, #12]	; (8007fb4 <HAL_GetTick+0x14>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	2000729c 	.word	0x2000729c

08007fb8 <__NVIC_SetPriorityGrouping>:
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007fc8:	4b0c      	ldr	r3, [pc, #48]	; (8007ffc <__NVIC_SetPriorityGrouping+0x44>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fea:	4a04      	ldr	r2, [pc, #16]	; (8007ffc <__NVIC_SetPriorityGrouping+0x44>)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	60d3      	str	r3, [r2, #12]
}
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	e000ed00 	.word	0xe000ed00

08008000 <__NVIC_GetPriorityGrouping>:
{
 8008000:	b480      	push	{r7}
 8008002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008004:	4b04      	ldr	r3, [pc, #16]	; (8008018 <__NVIC_GetPriorityGrouping+0x18>)
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	0a1b      	lsrs	r3, r3, #8
 800800a:	f003 0307 	and.w	r3, r3, #7
}
 800800e:	4618      	mov	r0, r3
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	e000ed00 	.word	0xe000ed00

0800801c <__NVIC_EnableIRQ>:
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800802a:	2b00      	cmp	r3, #0
 800802c:	db0b      	blt.n	8008046 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	f003 021f 	and.w	r2, r3, #31
 8008034:	4907      	ldr	r1, [pc, #28]	; (8008054 <__NVIC_EnableIRQ+0x38>)
 8008036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800803a:	095b      	lsrs	r3, r3, #5
 800803c:	2001      	movs	r0, #1
 800803e:	fa00 f202 	lsl.w	r2, r0, r2
 8008042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	e000e100 	.word	0xe000e100

08008058 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008066:	2b00      	cmp	r3, #0
 8008068:	db12      	blt.n	8008090 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	f003 021f 	and.w	r2, r3, #31
 8008070:	490a      	ldr	r1, [pc, #40]	; (800809c <__NVIC_DisableIRQ+0x44>)
 8008072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008076:	095b      	lsrs	r3, r3, #5
 8008078:	2001      	movs	r0, #1
 800807a:	fa00 f202 	lsl.w	r2, r0, r2
 800807e:	3320      	adds	r3, #32
 8008080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008084:	f3bf 8f4f 	dsb	sy
}
 8008088:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800808a:	f3bf 8f6f 	isb	sy
}
 800808e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	e000e100 	.word	0xe000e100

080080a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	6039      	str	r1, [r7, #0]
 80080aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	db0a      	blt.n	80080ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	490c      	ldr	r1, [pc, #48]	; (80080ec <__NVIC_SetPriority+0x4c>)
 80080ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080be:	0112      	lsls	r2, r2, #4
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	440b      	add	r3, r1
 80080c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80080c8:	e00a      	b.n	80080e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	4908      	ldr	r1, [pc, #32]	; (80080f0 <__NVIC_SetPriority+0x50>)
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	f003 030f 	and.w	r3, r3, #15
 80080d6:	3b04      	subs	r3, #4
 80080d8:	0112      	lsls	r2, r2, #4
 80080da:	b2d2      	uxtb	r2, r2
 80080dc:	440b      	add	r3, r1
 80080de:	761a      	strb	r2, [r3, #24]
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	e000e100 	.word	0xe000e100
 80080f0:	e000ed00 	.word	0xe000ed00

080080f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b089      	sub	sp, #36	; 0x24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	f1c3 0307 	rsb	r3, r3, #7
 800810e:	2b04      	cmp	r3, #4
 8008110:	bf28      	it	cs
 8008112:	2304      	movcs	r3, #4
 8008114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	3304      	adds	r3, #4
 800811a:	2b06      	cmp	r3, #6
 800811c:	d902      	bls.n	8008124 <NVIC_EncodePriority+0x30>
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	3b03      	subs	r3, #3
 8008122:	e000      	b.n	8008126 <NVIC_EncodePriority+0x32>
 8008124:	2300      	movs	r3, #0
 8008126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	fa02 f303 	lsl.w	r3, r2, r3
 8008132:	43da      	mvns	r2, r3
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	401a      	ands	r2, r3
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800813c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	fa01 f303 	lsl.w	r3, r1, r3
 8008146:	43d9      	mvns	r1, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800814c:	4313      	orrs	r3, r2
         );
}
 800814e:	4618      	mov	r0, r3
 8008150:	3724      	adds	r7, #36	; 0x24
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
	...

0800815c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3b01      	subs	r3, #1
 8008168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800816c:	d301      	bcc.n	8008172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800816e:	2301      	movs	r3, #1
 8008170:	e00f      	b.n	8008192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008172:	4a0a      	ldr	r2, [pc, #40]	; (800819c <SysTick_Config+0x40>)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3b01      	subs	r3, #1
 8008178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800817a:	210f      	movs	r1, #15
 800817c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008180:	f7ff ff8e 	bl	80080a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008184:	4b05      	ldr	r3, [pc, #20]	; (800819c <SysTick_Config+0x40>)
 8008186:	2200      	movs	r2, #0
 8008188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800818a:	4b04      	ldr	r3, [pc, #16]	; (800819c <SysTick_Config+0x40>)
 800818c:	2207      	movs	r2, #7
 800818e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	e000e010 	.word	0xe000e010

080081a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff ff05 	bl	8007fb8 <__NVIC_SetPriorityGrouping>
}
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b086      	sub	sp, #24
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	4603      	mov	r3, r0
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
 80081c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80081c8:	f7ff ff1a 	bl	8008000 <__NVIC_GetPriorityGrouping>
 80081cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	6978      	ldr	r0, [r7, #20]
 80081d4:	f7ff ff8e 	bl	80080f4 <NVIC_EncodePriority>
 80081d8:	4602      	mov	r2, r0
 80081da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081de:	4611      	mov	r1, r2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff ff5d 	bl	80080a0 <__NVIC_SetPriority>
}
 80081e6:	bf00      	nop
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	4603      	mov	r3, r0
 80081f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff ff0d 	bl	800801c <__NVIC_EnableIRQ>
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	4603      	mov	r3, r0
 8008212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff ff1d 	bl	8008058 <__NVIC_DisableIRQ>
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff ff94 	bl	800815c <SysTick_Config>
 8008234:	4603      	mov	r3, r0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e08d      	b.n	800836e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	4b47      	ldr	r3, [pc, #284]	; (8008378 <HAL_DMA_Init+0x138>)
 800825a:	429a      	cmp	r2, r3
 800825c:	d80f      	bhi.n	800827e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	4b45      	ldr	r3, [pc, #276]	; (800837c <HAL_DMA_Init+0x13c>)
 8008266:	4413      	add	r3, r2
 8008268:	4a45      	ldr	r2, [pc, #276]	; (8008380 <HAL_DMA_Init+0x140>)
 800826a:	fba2 2303 	umull	r2, r3, r2, r3
 800826e:	091b      	lsrs	r3, r3, #4
 8008270:	009a      	lsls	r2, r3, #2
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a42      	ldr	r2, [pc, #264]	; (8008384 <HAL_DMA_Init+0x144>)
 800827a:	641a      	str	r2, [r3, #64]	; 0x40
 800827c:	e00e      	b.n	800829c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	4b40      	ldr	r3, [pc, #256]	; (8008388 <HAL_DMA_Init+0x148>)
 8008286:	4413      	add	r3, r2
 8008288:	4a3d      	ldr	r2, [pc, #244]	; (8008380 <HAL_DMA_Init+0x140>)
 800828a:	fba2 2303 	umull	r2, r3, r2, r3
 800828e:	091b      	lsrs	r3, r3, #4
 8008290:	009a      	lsls	r2, r3, #2
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a3c      	ldr	r2, [pc, #240]	; (800838c <HAL_DMA_Init+0x14c>)
 800829a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80082b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80082c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa72 	bl	80087d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082fc:	d102      	bne.n	8008304 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008318:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d010      	beq.n	8008344 <HAL_DMA_Init+0x104>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2b04      	cmp	r3, #4
 8008328:	d80c      	bhi.n	8008344 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa92 	bl	8008854 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008340:	605a      	str	r2, [r3, #4]
 8008342:	e008      	b.n	8008356 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	40020407 	.word	0x40020407
 800837c:	bffdfff8 	.word	0xbffdfff8
 8008380:	cccccccd 	.word	0xcccccccd
 8008384:	40020000 	.word	0x40020000
 8008388:	bffdfbf8 	.word	0xbffdfbf8
 800838c:	40020400 	.word	0x40020400

08008390 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_DMA_Start_IT+0x20>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e066      	b.n	800847e <HAL_DMA_Start_IT+0xee>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d155      	bne.n	8008470 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0201 	bic.w	r2, r2, #1
 80083e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 f9b6 	bl	800875a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d008      	beq.n	8008408 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 020e 	orr.w	r2, r2, #14
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	e00f      	b.n	8008428 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0204 	bic.w	r2, r2, #4
 8008416:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 020a 	orr.w	r2, r2, #10
 8008426:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008444:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800844a:	2b00      	cmp	r3, #0
 800844c:	d007      	beq.n	800845e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800845c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0201 	orr.w	r2, r2, #1
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	e005      	b.n	800847c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008478:	2302      	movs	r3, #2
 800847a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800847c:	7dfb      	ldrb	r3, [r7, #23]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d008      	beq.n	80084b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2204      	movs	r2, #4
 80084a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e040      	b.n	8008532 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f022 020e 	bic.w	r2, r2, #14
 80084be:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084ce:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0201 	bic.w	r2, r2, #1
 80084de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e4:	f003 021c 	and.w	r2, r3, #28
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	2101      	movs	r1, #1
 80084ee:	fa01 f202 	lsl.w	r2, r1, r2
 80084f2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80084fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00c      	beq.n	8008520 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008514:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800851e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b02      	cmp	r3, #2
 8008554:	d005      	beq.n	8008562 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	73fb      	strb	r3, [r7, #15]
 8008560:	e047      	b.n	80085f2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 020e 	bic.w	r2, r2, #14
 8008570:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 0201 	bic.w	r2, r2, #1
 8008580:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800858c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008590:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	f003 021c 	and.w	r2, r3, #28
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859e:	2101      	movs	r1, #1
 80085a0:	fa01 f202 	lsl.w	r2, r1, r2
 80085a4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80085ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00c      	beq.n	80085d2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80085d0:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
    }
  }
  return status;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008618:	f003 031c 	and.w	r3, r3, #28
 800861c:	2204      	movs	r2, #4
 800861e:	409a      	lsls	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4013      	ands	r3, r2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d026      	beq.n	8008676 <HAL_DMA_IRQHandler+0x7a>
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d021      	beq.n	8008676 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0320 	and.w	r3, r3, #32
 800863c:	2b00      	cmp	r3, #0
 800863e:	d107      	bne.n	8008650 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0204 	bic.w	r2, r2, #4
 800864e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008654:	f003 021c 	and.w	r2, r3, #28
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	2104      	movs	r1, #4
 800865e:	fa01 f202 	lsl.w	r2, r1, r2
 8008662:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	2b00      	cmp	r3, #0
 800866a:	d071      	beq.n	8008750 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008674:	e06c      	b.n	8008750 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867a:	f003 031c 	and.w	r3, r3, #28
 800867e:	2202      	movs	r2, #2
 8008680:	409a      	lsls	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4013      	ands	r3, r2
 8008686:	2b00      	cmp	r3, #0
 8008688:	d02e      	beq.n	80086e8 <HAL_DMA_IRQHandler+0xec>
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f003 0302 	and.w	r3, r3, #2
 8008690:	2b00      	cmp	r3, #0
 8008692:	d029      	beq.n	80086e8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10b      	bne.n	80086ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 020a 	bic.w	r2, r2, #10
 80086b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086be:	f003 021c 	and.w	r2, r3, #28
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	2102      	movs	r1, #2
 80086c8:	fa01 f202 	lsl.w	r2, r1, r2
 80086cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d038      	beq.n	8008750 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80086e6:	e033      	b.n	8008750 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ec:	f003 031c 	and.w	r3, r3, #28
 80086f0:	2208      	movs	r2, #8
 80086f2:	409a      	lsls	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4013      	ands	r3, r2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d02a      	beq.n	8008752 <HAL_DMA_IRQHandler+0x156>
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d025      	beq.n	8008752 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 020e 	bic.w	r2, r2, #14
 8008714:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871a:	f003 021c 	and.w	r2, r3, #28
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	2101      	movs	r1, #1
 8008724:	fa01 f202 	lsl.w	r2, r1, r2
 8008728:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008744:	2b00      	cmp	r3, #0
 8008746:	d004      	beq.n	8008752 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008750:	bf00      	nop
 8008752:	bf00      	nop
}
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800875a:	b480      	push	{r7}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	60f8      	str	r0, [r7, #12]
 8008762:	60b9      	str	r1, [r7, #8]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008770:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008782:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008788:	f003 021c 	and.w	r2, r3, #28
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008790:	2101      	movs	r1, #1
 8008792:	fa01 f202 	lsl.w	r2, r1, r2
 8008796:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	2b10      	cmp	r3, #16
 80087a6:	d108      	bne.n	80087ba <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80087b8:	e007      	b.n	80087ca <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	60da      	str	r2, [r3, #12]
}
 80087ca:	bf00      	nop
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
	...

080087d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	4b17      	ldr	r3, [pc, #92]	; (8008844 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d80a      	bhi.n	8008802 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f0:	089b      	lsrs	r3, r3, #2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087f8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	6493      	str	r3, [r2, #72]	; 0x48
 8008800:	e007      	b.n	8008812 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008806:	089b      	lsrs	r3, r3, #2
 8008808:	009a      	lsls	r2, r3, #2
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800880c:	4413      	add	r3, r2
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	3b08      	subs	r3, #8
 800881a:	4a0c      	ldr	r2, [pc, #48]	; (800884c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800881c:	fba2 2303 	umull	r2, r3, r2, r3
 8008820:	091b      	lsrs	r3, r3, #4
 8008822:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a0a      	ldr	r2, [pc, #40]	; (8008850 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008828:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f003 031f 	and.w	r3, r3, #31
 8008830:	2201      	movs	r2, #1
 8008832:	409a      	lsls	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008838:	bf00      	nop
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	40020407 	.word	0x40020407
 8008848:	4002081c 	.word	0x4002081c
 800884c:	cccccccd 	.word	0xcccccccd
 8008850:	40020880 	.word	0x40020880

08008854 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	461a      	mov	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a08      	ldr	r2, [pc, #32]	; (8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008876:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3b01      	subs	r3, #1
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	2201      	movs	r2, #1
 8008882:	409a      	lsls	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	1000823f 	.word	0x1000823f
 8008898:	40020940 	.word	0x40020940

0800889c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088aa:	e166      	b.n	8008b7a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	2101      	movs	r1, #1
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	fa01 f303 	lsl.w	r3, r1, r3
 80088b8:	4013      	ands	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 8158 	beq.w	8008b74 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f003 0303 	and.w	r3, r3, #3
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d005      	beq.n	80088dc <HAL_GPIO_Init+0x40>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 0303 	and.w	r3, r3, #3
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d130      	bne.n	800893e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	2203      	movs	r2, #3
 80088e8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ec:	43db      	mvns	r3, r3
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	4013      	ands	r3, r2
 80088f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	005b      	lsls	r3, r3, #1
 80088fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008912:	2201      	movs	r2, #1
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	fa02 f303 	lsl.w	r3, r2, r3
 800891a:	43db      	mvns	r3, r3
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4013      	ands	r3, r2
 8008920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	091b      	lsrs	r3, r3, #4
 8008928:	f003 0201 	and.w	r2, r3, #1
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	fa02 f303 	lsl.w	r3, r2, r3
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4313      	orrs	r3, r2
 8008936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	2b03      	cmp	r3, #3
 8008948:	d017      	beq.n	800897a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	2203      	movs	r2, #3
 8008956:	fa02 f303 	lsl.w	r3, r2, r3
 800895a:	43db      	mvns	r3, r3
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4013      	ands	r3, r2
 8008960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	fa02 f303 	lsl.w	r3, r2, r3
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	4313      	orrs	r3, r2
 8008972:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f003 0303 	and.w	r3, r3, #3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d123      	bne.n	80089ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	08da      	lsrs	r2, r3, #3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3208      	adds	r2, #8
 800898e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	220f      	movs	r2, #15
 800899e:	fa02 f303 	lsl.w	r3, r2, r3
 80089a2:	43db      	mvns	r3, r3
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	4013      	ands	r3, r2
 80089a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	691a      	ldr	r2, [r3, #16]
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f003 0307 	and.w	r3, r3, #7
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4313      	orrs	r3, r2
 80089be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	08da      	lsrs	r2, r3, #3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3208      	adds	r2, #8
 80089c8:	6939      	ldr	r1, [r7, #16]
 80089ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	005b      	lsls	r3, r3, #1
 80089d8:	2203      	movs	r2, #3
 80089da:	fa02 f303 	lsl.w	r3, r2, r3
 80089de:	43db      	mvns	r3, r3
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	4013      	ands	r3, r2
 80089e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f003 0203 	and.w	r2, r3, #3
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	005b      	lsls	r3, r3, #1
 80089f2:	fa02 f303 	lsl.w	r3, r2, r3
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 80b2 	beq.w	8008b74 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a10:	4b61      	ldr	r3, [pc, #388]	; (8008b98 <HAL_GPIO_Init+0x2fc>)
 8008a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a14:	4a60      	ldr	r2, [pc, #384]	; (8008b98 <HAL_GPIO_Init+0x2fc>)
 8008a16:	f043 0301 	orr.w	r3, r3, #1
 8008a1a:	6613      	str	r3, [r2, #96]	; 0x60
 8008a1c:	4b5e      	ldr	r3, [pc, #376]	; (8008b98 <HAL_GPIO_Init+0x2fc>)
 8008a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	60bb      	str	r3, [r7, #8]
 8008a26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008a28:	4a5c      	ldr	r2, [pc, #368]	; (8008b9c <HAL_GPIO_Init+0x300>)
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	089b      	lsrs	r3, r3, #2
 8008a2e:	3302      	adds	r3, #2
 8008a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f003 0303 	and.w	r3, r3, #3
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	220f      	movs	r2, #15
 8008a40:	fa02 f303 	lsl.w	r3, r2, r3
 8008a44:	43db      	mvns	r3, r3
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008a52:	d02b      	beq.n	8008aac <HAL_GPIO_Init+0x210>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a52      	ldr	r2, [pc, #328]	; (8008ba0 <HAL_GPIO_Init+0x304>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d025      	beq.n	8008aa8 <HAL_GPIO_Init+0x20c>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a51      	ldr	r2, [pc, #324]	; (8008ba4 <HAL_GPIO_Init+0x308>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d01f      	beq.n	8008aa4 <HAL_GPIO_Init+0x208>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a50      	ldr	r2, [pc, #320]	; (8008ba8 <HAL_GPIO_Init+0x30c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d019      	beq.n	8008aa0 <HAL_GPIO_Init+0x204>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a4f      	ldr	r2, [pc, #316]	; (8008bac <HAL_GPIO_Init+0x310>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d013      	beq.n	8008a9c <HAL_GPIO_Init+0x200>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a4e      	ldr	r2, [pc, #312]	; (8008bb0 <HAL_GPIO_Init+0x314>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00d      	beq.n	8008a98 <HAL_GPIO_Init+0x1fc>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a4d      	ldr	r2, [pc, #308]	; (8008bb4 <HAL_GPIO_Init+0x318>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d007      	beq.n	8008a94 <HAL_GPIO_Init+0x1f8>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a4c      	ldr	r2, [pc, #304]	; (8008bb8 <HAL_GPIO_Init+0x31c>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d101      	bne.n	8008a90 <HAL_GPIO_Init+0x1f4>
 8008a8c:	2307      	movs	r3, #7
 8008a8e:	e00e      	b.n	8008aae <HAL_GPIO_Init+0x212>
 8008a90:	2308      	movs	r3, #8
 8008a92:	e00c      	b.n	8008aae <HAL_GPIO_Init+0x212>
 8008a94:	2306      	movs	r3, #6
 8008a96:	e00a      	b.n	8008aae <HAL_GPIO_Init+0x212>
 8008a98:	2305      	movs	r3, #5
 8008a9a:	e008      	b.n	8008aae <HAL_GPIO_Init+0x212>
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	e006      	b.n	8008aae <HAL_GPIO_Init+0x212>
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e004      	b.n	8008aae <HAL_GPIO_Init+0x212>
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e002      	b.n	8008aae <HAL_GPIO_Init+0x212>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e000      	b.n	8008aae <HAL_GPIO_Init+0x212>
 8008aac:	2300      	movs	r3, #0
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	f002 0203 	and.w	r2, r2, #3
 8008ab4:	0092      	lsls	r2, r2, #2
 8008ab6:	4093      	lsls	r3, r2
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008abe:	4937      	ldr	r1, [pc, #220]	; (8008b9c <HAL_GPIO_Init+0x300>)
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	089b      	lsrs	r3, r3, #2
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008acc:	4b3b      	ldr	r3, [pc, #236]	; (8008bbc <HAL_GPIO_Init+0x320>)
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	43db      	mvns	r3, r3
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	4013      	ands	r3, r2
 8008ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008af0:	4a32      	ldr	r2, [pc, #200]	; (8008bbc <HAL_GPIO_Init+0x320>)
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008af6:	4b31      	ldr	r3, [pc, #196]	; (8008bbc <HAL_GPIO_Init+0x320>)
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	43db      	mvns	r3, r3
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	4013      	ands	r3, r2
 8008b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008b1a:	4a28      	ldr	r2, [pc, #160]	; (8008bbc <HAL_GPIO_Init+0x320>)
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008b20:	4b26      	ldr	r3, [pc, #152]	; (8008bbc <HAL_GPIO_Init+0x320>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	43db      	mvns	r3, r3
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008b44:	4a1d      	ldr	r2, [pc, #116]	; (8008bbc <HAL_GPIO_Init+0x320>)
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008b4a:	4b1c      	ldr	r3, [pc, #112]	; (8008bbc <HAL_GPIO_Init+0x320>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	43db      	mvns	r3, r3
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	4013      	ands	r3, r2
 8008b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d003      	beq.n	8008b6e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008b6e:	4a13      	ldr	r2, [pc, #76]	; (8008bbc <HAL_GPIO_Init+0x320>)
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	3301      	adds	r3, #1
 8008b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	fa22 f303 	lsr.w	r3, r2, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f47f ae91 	bne.w	80088ac <HAL_GPIO_Init+0x10>
  }
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	40021000 	.word	0x40021000
 8008b9c:	40010000 	.word	0x40010000
 8008ba0:	48000400 	.word	0x48000400
 8008ba4:	48000800 	.word	0x48000800
 8008ba8:	48000c00 	.word	0x48000c00
 8008bac:	48001000 	.word	0x48001000
 8008bb0:	48001400 	.word	0x48001400
 8008bb4:	48001800 	.word	0x48001800
 8008bb8:	48001c00 	.word	0x48001c00
 8008bbc:	40010400 	.word	0x40010400

08008bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	807b      	strh	r3, [r7, #2]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008bd0:	787b      	ldrb	r3, [r7, #1]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008bd6:	887a      	ldrh	r2, [r7, #2]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008bdc:	e002      	b.n	8008be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008bde:	887a      	ldrh	r2, [r7, #2]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008c02:	887a      	ldrh	r2, [r7, #2]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4013      	ands	r3, r2
 8008c08:	041a      	lsls	r2, r3, #16
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	43d9      	mvns	r1, r3
 8008c0e:	887b      	ldrh	r3, [r7, #2]
 8008c10:	400b      	ands	r3, r1
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	619a      	str	r2, [r3, #24]
}
 8008c18:	bf00      	nop
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008c2e:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c30:	695a      	ldr	r2, [r3, #20]
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	4013      	ands	r3, r2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d006      	beq.n	8008c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c3a:	4a05      	ldr	r2, [pc, #20]	; (8008c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
 8008c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c40:	88fb      	ldrh	r3, [r7, #6]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fd fc9a 	bl	800657c <HAL_GPIO_EXTI_Callback>
  }
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	40010400 	.word	0x40010400

08008c54 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c5c:	4b0b      	ldr	r3, [pc, #44]	; (8008c8c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c60:	4a0a      	ldr	r2, [pc, #40]	; (8008c8c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008c62:	f043 0301 	orr.w	r3, r3, #1
 8008c66:	6613      	str	r3, [r2, #96]	; 0x60
 8008c68:	4b08      	ldr	r3, [pc, #32]	; (8008c8c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	60fb      	str	r3, [r7, #12]
 8008c72:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008c74:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	4905      	ldr	r1, [pc, #20]	; (8008c90 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	604b      	str	r3, [r1, #4]
}
 8008c80:	bf00      	nop
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	40021000 	.word	0x40021000
 8008c90:	40010000 	.word	0x40010000

08008c94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008c98:	4b0d      	ldr	r3, [pc, #52]	; (8008cd0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca4:	d102      	bne.n	8008cac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008caa:	e00b      	b.n	8008cc4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008cac:	4b08      	ldr	r3, [pc, #32]	; (8008cd0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cba:	d102      	bne.n	8008cc2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cc0:	e000      	b.n	8008cc4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8008cc2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	40007000 	.word	0x40007000

08008cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d141      	bne.n	8008d66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ce2:	4b4b      	ldr	r3, [pc, #300]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cee:	d131      	bne.n	8008d54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008cf0:	4b47      	ldr	r3, [pc, #284]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cf6:	4a46      	ldr	r2, [pc, #280]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d00:	4b43      	ldr	r3, [pc, #268]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008d08:	4a41      	ldr	r2, [pc, #260]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008d10:	4b40      	ldr	r3, [pc, #256]	; (8008e14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2232      	movs	r2, #50	; 0x32
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	4a3f      	ldr	r2, [pc, #252]	; (8008e18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d20:	0c9b      	lsrs	r3, r3, #18
 8008d22:	3301      	adds	r3, #1
 8008d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d26:	e002      	b.n	8008d2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d2e:	4b38      	ldr	r3, [pc, #224]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d3a:	d102      	bne.n	8008d42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1f2      	bne.n	8008d28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008d42:	4b33      	ldr	r3, [pc, #204]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d4e:	d158      	bne.n	8008e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e057      	b.n	8008e04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d54:	4b2e      	ldr	r3, [pc, #184]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d5a:	4a2d      	ldr	r2, [pc, #180]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008d64:	e04d      	b.n	8008e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d6c:	d141      	bne.n	8008df2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008d6e:	4b28      	ldr	r3, [pc, #160]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d7a:	d131      	bne.n	8008de0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d7c:	4b24      	ldr	r3, [pc, #144]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d82:	4a23      	ldr	r2, [pc, #140]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d8c:	4b20      	ldr	r3, [pc, #128]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008d94:	4a1e      	ldr	r2, [pc, #120]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008d9c:	4b1d      	ldr	r3, [pc, #116]	; (8008e14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2232      	movs	r2, #50	; 0x32
 8008da2:	fb02 f303 	mul.w	r3, r2, r3
 8008da6:	4a1c      	ldr	r2, [pc, #112]	; (8008e18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008da8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dac:	0c9b      	lsrs	r3, r3, #18
 8008dae:	3301      	adds	r3, #1
 8008db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008db2:	e002      	b.n	8008dba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008dba:	4b15      	ldr	r3, [pc, #84]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc6:	d102      	bne.n	8008dce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1f2      	bne.n	8008db4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008dce:	4b10      	ldr	r3, [pc, #64]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dda:	d112      	bne.n	8008e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e011      	b.n	8008e04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de6:	4a0a      	ldr	r2, [pc, #40]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008df0:	e007      	b.n	8008e02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008df2:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008dfa:	4a05      	ldr	r2, [pc, #20]	; (8008e10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e00:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	40007000 	.word	0x40007000
 8008e14:	20000128 	.word	0x20000128
 8008e18:	431bde83 	.word	0x431bde83

08008e1c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8008e20:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4a04      	ldr	r2, [pc, #16]	; (8008e38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e2a:	6053      	str	r3, [r2, #4]
}
 8008e2c:	bf00      	nop
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	40007000 	.word	0x40007000

08008e3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d102      	bne.n	8008e50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	f000 bc08 	b.w	8009660 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e50:	4b96      	ldr	r3, [pc, #600]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f003 030c 	and.w	r3, r3, #12
 8008e58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e5a:	4b94      	ldr	r3, [pc, #592]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 80e4 	beq.w	800903a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <HAL_RCC_OscConfig+0x4c>
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	2b0c      	cmp	r3, #12
 8008e7c:	f040 808b 	bne.w	8008f96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	f040 8087 	bne.w	8008f96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e88:	4b88      	ldr	r3, [pc, #544]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <HAL_RCC_OscConfig+0x64>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e3df      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1a      	ldr	r2, [r3, #32]
 8008ea4:	4b81      	ldr	r3, [pc, #516]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0308 	and.w	r3, r3, #8
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <HAL_RCC_OscConfig+0x7e>
 8008eb0:	4b7e      	ldr	r3, [pc, #504]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eb8:	e005      	b.n	8008ec6 <HAL_RCC_OscConfig+0x8a>
 8008eba:	4b7c      	ldr	r3, [pc, #496]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ec0:	091b      	lsrs	r3, r3, #4
 8008ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d223      	bcs.n	8008f12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 fdcc 	bl	8009a6c <RCC_SetFlashLatencyFromMSIRange>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e3c0      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ede:	4b73      	ldr	r3, [pc, #460]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a72      	ldr	r2, [pc, #456]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008ee4:	f043 0308 	orr.w	r3, r3, #8
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	4b70      	ldr	r3, [pc, #448]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	496d      	ldr	r1, [pc, #436]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008efc:	4b6b      	ldr	r3, [pc, #428]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	021b      	lsls	r3, r3, #8
 8008f0a:	4968      	ldr	r1, [pc, #416]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	604b      	str	r3, [r1, #4]
 8008f10:	e025      	b.n	8008f5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f12:	4b66      	ldr	r3, [pc, #408]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a65      	ldr	r2, [pc, #404]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008f18:	f043 0308 	orr.w	r3, r3, #8
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	4b63      	ldr	r3, [pc, #396]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	4960      	ldr	r1, [pc, #384]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f30:	4b5e      	ldr	r3, [pc, #376]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	021b      	lsls	r3, r3, #8
 8008f3e:	495b      	ldr	r1, [pc, #364]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d109      	bne.n	8008f5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fd8c 	bl	8009a6c <RCC_SetFlashLatencyFromMSIRange>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e380      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f5e:	f000 fcc1 	bl	80098e4 <HAL_RCC_GetSysClockFreq>
 8008f62:	4602      	mov	r2, r0
 8008f64:	4b51      	ldr	r3, [pc, #324]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	091b      	lsrs	r3, r3, #4
 8008f6a:	f003 030f 	and.w	r3, r3, #15
 8008f6e:	4950      	ldr	r1, [pc, #320]	; (80090b0 <HAL_RCC_OscConfig+0x274>)
 8008f70:	5ccb      	ldrb	r3, [r1, r3]
 8008f72:	f003 031f 	and.w	r3, r3, #31
 8008f76:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7a:	4a4e      	ldr	r2, [pc, #312]	; (80090b4 <HAL_RCC_OscConfig+0x278>)
 8008f7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008f7e:	4b4e      	ldr	r3, [pc, #312]	; (80090b8 <HAL_RCC_OscConfig+0x27c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fe ffbc 	bl	8007f00 <HAL_InitTick>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d052      	beq.n	8009038 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008f92:	7bfb      	ldrb	r3, [r7, #15]
 8008f94:	e364      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d032      	beq.n	8009004 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008f9e:	4b43      	ldr	r3, [pc, #268]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a42      	ldr	r2, [pc, #264]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008fa4:	f043 0301 	orr.w	r3, r3, #1
 8008fa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008faa:	f7fe fff9 	bl	8007fa0 <HAL_GetTick>
 8008fae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008fb0:	e008      	b.n	8008fc4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008fb2:	f7fe fff5 	bl	8007fa0 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d901      	bls.n	8008fc4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e34d      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008fc4:	4b39      	ldr	r3, [pc, #228]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0302 	and.w	r3, r3, #2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d0f0      	beq.n	8008fb2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fd0:	4b36      	ldr	r3, [pc, #216]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a35      	ldr	r2, [pc, #212]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008fd6:	f043 0308 	orr.w	r3, r3, #8
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	4b33      	ldr	r3, [pc, #204]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	4930      	ldr	r1, [pc, #192]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008fee:	4b2f      	ldr	r3, [pc, #188]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	69db      	ldr	r3, [r3, #28]
 8008ffa:	021b      	lsls	r3, r3, #8
 8008ffc:	492b      	ldr	r1, [pc, #172]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	604b      	str	r3, [r1, #4]
 8009002:	e01a      	b.n	800903a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009004:	4b29      	ldr	r3, [pc, #164]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a28      	ldr	r2, [pc, #160]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 800900a:	f023 0301 	bic.w	r3, r3, #1
 800900e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009010:	f7fe ffc6 	bl	8007fa0 <HAL_GetTick>
 8009014:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009016:	e008      	b.n	800902a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009018:	f7fe ffc2 	bl	8007fa0 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	2b02      	cmp	r3, #2
 8009024:	d901      	bls.n	800902a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e31a      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800902a:	4b20      	ldr	r3, [pc, #128]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0302 	and.w	r3, r3, #2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1f0      	bne.n	8009018 <HAL_RCC_OscConfig+0x1dc>
 8009036:	e000      	b.n	800903a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009038:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d073      	beq.n	800912e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b08      	cmp	r3, #8
 800904a:	d005      	beq.n	8009058 <HAL_RCC_OscConfig+0x21c>
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	2b0c      	cmp	r3, #12
 8009050:	d10e      	bne.n	8009070 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2b03      	cmp	r3, #3
 8009056:	d10b      	bne.n	8009070 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009058:	4b14      	ldr	r3, [pc, #80]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d063      	beq.n	800912c <HAL_RCC_OscConfig+0x2f0>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d15f      	bne.n	800912c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e2f7      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009078:	d106      	bne.n	8009088 <HAL_RCC_OscConfig+0x24c>
 800907a:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a0b      	ldr	r2, [pc, #44]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8009080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009084:	6013      	str	r3, [r2, #0]
 8009086:	e025      	b.n	80090d4 <HAL_RCC_OscConfig+0x298>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009090:	d114      	bne.n	80090bc <HAL_RCC_OscConfig+0x280>
 8009092:	4b06      	ldr	r3, [pc, #24]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a05      	ldr	r2, [pc, #20]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 8009098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	4b03      	ldr	r3, [pc, #12]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a02      	ldr	r2, [pc, #8]	; (80090ac <HAL_RCC_OscConfig+0x270>)
 80090a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	e013      	b.n	80090d4 <HAL_RCC_OscConfig+0x298>
 80090ac:	40021000 	.word	0x40021000
 80090b0:	0801abdc 	.word	0x0801abdc
 80090b4:	20000128 	.word	0x20000128
 80090b8:	20000130 	.word	0x20000130
 80090bc:	4ba0      	ldr	r3, [pc, #640]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a9f      	ldr	r2, [pc, #636]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80090c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	4b9d      	ldr	r3, [pc, #628]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a9c      	ldr	r2, [pc, #624]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80090ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d013      	beq.n	8009104 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090dc:	f7fe ff60 	bl	8007fa0 <HAL_GetTick>
 80090e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090e2:	e008      	b.n	80090f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090e4:	f7fe ff5c 	bl	8007fa0 <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b64      	cmp	r3, #100	; 0x64
 80090f0:	d901      	bls.n	80090f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e2b4      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090f6:	4b92      	ldr	r3, [pc, #584]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0f0      	beq.n	80090e4 <HAL_RCC_OscConfig+0x2a8>
 8009102:	e014      	b.n	800912e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009104:	f7fe ff4c 	bl	8007fa0 <HAL_GetTick>
 8009108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800910a:	e008      	b.n	800911e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800910c:	f7fe ff48 	bl	8007fa0 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b64      	cmp	r3, #100	; 0x64
 8009118:	d901      	bls.n	800911e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e2a0      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800911e:	4b88      	ldr	r3, [pc, #544]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1f0      	bne.n	800910c <HAL_RCC_OscConfig+0x2d0>
 800912a:	e000      	b.n	800912e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800912c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d060      	beq.n	80091fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	2b04      	cmp	r3, #4
 800913e:	d005      	beq.n	800914c <HAL_RCC_OscConfig+0x310>
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	2b0c      	cmp	r3, #12
 8009144:	d119      	bne.n	800917a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d116      	bne.n	800917a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800914c:	4b7c      	ldr	r3, [pc, #496]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <HAL_RCC_OscConfig+0x328>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e27d      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009164:	4b76      	ldr	r3, [pc, #472]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	061b      	lsls	r3, r3, #24
 8009172:	4973      	ldr	r1, [pc, #460]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009174:	4313      	orrs	r3, r2
 8009176:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009178:	e040      	b.n	80091fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d023      	beq.n	80091ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009182:	4b6f      	ldr	r3, [pc, #444]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a6e      	ldr	r2, [pc, #440]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800918c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800918e:	f7fe ff07 	bl	8007fa0 <HAL_GetTick>
 8009192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009194:	e008      	b.n	80091a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009196:	f7fe ff03 	bl	8007fa0 <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d901      	bls.n	80091a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e25b      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091a8:	4b65      	ldr	r3, [pc, #404]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0f0      	beq.n	8009196 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091b4:	4b62      	ldr	r3, [pc, #392]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	061b      	lsls	r3, r3, #24
 80091c2:	495f      	ldr	r1, [pc, #380]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	604b      	str	r3, [r1, #4]
 80091c8:	e018      	b.n	80091fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091ca:	4b5d      	ldr	r3, [pc, #372]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a5c      	ldr	r2, [pc, #368]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80091d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d6:	f7fe fee3 	bl	8007fa0 <HAL_GetTick>
 80091da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80091dc:	e008      	b.n	80091f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091de:	f7fe fedf 	bl	8007fa0 <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d901      	bls.n	80091f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e237      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80091f0:	4b53      	ldr	r3, [pc, #332]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1f0      	bne.n	80091de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0308 	and.w	r3, r3, #8
 8009204:	2b00      	cmp	r3, #0
 8009206:	d03c      	beq.n	8009282 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01c      	beq.n	800924a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009210:	4b4b      	ldr	r3, [pc, #300]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009216:	4a4a      	ldr	r2, [pc, #296]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009218:	f043 0301 	orr.w	r3, r3, #1
 800921c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009220:	f7fe febe 	bl	8007fa0 <HAL_GetTick>
 8009224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009226:	e008      	b.n	800923a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009228:	f7fe feba 	bl	8007fa0 <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	2b02      	cmp	r3, #2
 8009234:	d901      	bls.n	800923a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e212      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800923a:	4b41      	ldr	r3, [pc, #260]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 800923c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009240:	f003 0302 	and.w	r3, r3, #2
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0ef      	beq.n	8009228 <HAL_RCC_OscConfig+0x3ec>
 8009248:	e01b      	b.n	8009282 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800924a:	4b3d      	ldr	r3, [pc, #244]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 800924c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009250:	4a3b      	ldr	r2, [pc, #236]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009252:	f023 0301 	bic.w	r3, r3, #1
 8009256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800925a:	f7fe fea1 	bl	8007fa0 <HAL_GetTick>
 800925e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009260:	e008      	b.n	8009274 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009262:	f7fe fe9d 	bl	8007fa0 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	2b02      	cmp	r3, #2
 800926e:	d901      	bls.n	8009274 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e1f5      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009274:	4b32      	ldr	r3, [pc, #200]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1ef      	bne.n	8009262 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0304 	and.w	r3, r3, #4
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 80a6 	beq.w	80093dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009290:	2300      	movs	r3, #0
 8009292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009294:	4b2a      	ldr	r3, [pc, #168]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10d      	bne.n	80092bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092a0:	4b27      	ldr	r3, [pc, #156]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80092a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a4:	4a26      	ldr	r2, [pc, #152]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80092a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092aa:	6593      	str	r3, [r2, #88]	; 0x58
 80092ac:	4b24      	ldr	r3, [pc, #144]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 80092ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b4:	60bb      	str	r3, [r7, #8]
 80092b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092b8:	2301      	movs	r3, #1
 80092ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092bc:	4b21      	ldr	r3, [pc, #132]	; (8009344 <HAL_RCC_OscConfig+0x508>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d118      	bne.n	80092fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092c8:	4b1e      	ldr	r3, [pc, #120]	; (8009344 <HAL_RCC_OscConfig+0x508>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1d      	ldr	r2, [pc, #116]	; (8009344 <HAL_RCC_OscConfig+0x508>)
 80092ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092d4:	f7fe fe64 	bl	8007fa0 <HAL_GetTick>
 80092d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092da:	e008      	b.n	80092ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092dc:	f7fe fe60 	bl	8007fa0 <HAL_GetTick>
 80092e0:	4602      	mov	r2, r0
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e1b8      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092ee:	4b15      	ldr	r3, [pc, #84]	; (8009344 <HAL_RCC_OscConfig+0x508>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0f0      	beq.n	80092dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d108      	bne.n	8009314 <HAL_RCC_OscConfig+0x4d8>
 8009302:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009308:	4a0d      	ldr	r2, [pc, #52]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 800930a:	f043 0301 	orr.w	r3, r3, #1
 800930e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009312:	e029      	b.n	8009368 <HAL_RCC_OscConfig+0x52c>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	2b05      	cmp	r3, #5
 800931a:	d115      	bne.n	8009348 <HAL_RCC_OscConfig+0x50c>
 800931c:	4b08      	ldr	r3, [pc, #32]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 800931e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009322:	4a07      	ldr	r2, [pc, #28]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009324:	f043 0304 	orr.w	r3, r3, #4
 8009328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800932c:	4b04      	ldr	r3, [pc, #16]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009332:	4a03      	ldr	r2, [pc, #12]	; (8009340 <HAL_RCC_OscConfig+0x504>)
 8009334:	f043 0301 	orr.w	r3, r3, #1
 8009338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800933c:	e014      	b.n	8009368 <HAL_RCC_OscConfig+0x52c>
 800933e:	bf00      	nop
 8009340:	40021000 	.word	0x40021000
 8009344:	40007000 	.word	0x40007000
 8009348:	4b9d      	ldr	r3, [pc, #628]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 800934a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800934e:	4a9c      	ldr	r2, [pc, #624]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 8009350:	f023 0301 	bic.w	r3, r3, #1
 8009354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009358:	4b99      	ldr	r3, [pc, #612]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 800935a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800935e:	4a98      	ldr	r2, [pc, #608]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 8009360:	f023 0304 	bic.w	r3, r3, #4
 8009364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d016      	beq.n	800939e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009370:	f7fe fe16 	bl	8007fa0 <HAL_GetTick>
 8009374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009376:	e00a      	b.n	800938e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009378:	f7fe fe12 	bl	8007fa0 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	f241 3288 	movw	r2, #5000	; 0x1388
 8009386:	4293      	cmp	r3, r2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e168      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800938e:	4b8c      	ldr	r3, [pc, #560]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 8009390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0ed      	beq.n	8009378 <HAL_RCC_OscConfig+0x53c>
 800939c:	e015      	b.n	80093ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800939e:	f7fe fdff 	bl	8007fa0 <HAL_GetTick>
 80093a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093a4:	e00a      	b.n	80093bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093a6:	f7fe fdfb 	bl	8007fa0 <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d901      	bls.n	80093bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e151      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093bc:	4b80      	ldr	r3, [pc, #512]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 80093be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c2:	f003 0302 	and.w	r3, r3, #2
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1ed      	bne.n	80093a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093ca:	7ffb      	ldrb	r3, [r7, #31]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d105      	bne.n	80093dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093d0:	4b7b      	ldr	r3, [pc, #492]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 80093d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d4:	4a7a      	ldr	r2, [pc, #488]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 80093d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0320 	and.w	r3, r3, #32
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d03c      	beq.n	8009462 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d01c      	beq.n	800942a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80093f0:	4b73      	ldr	r3, [pc, #460]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 80093f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093f6:	4a72      	ldr	r2, [pc, #456]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 80093f8:	f043 0301 	orr.w	r3, r3, #1
 80093fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009400:	f7fe fdce 	bl	8007fa0 <HAL_GetTick>
 8009404:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009406:	e008      	b.n	800941a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009408:	f7fe fdca 	bl	8007fa0 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b02      	cmp	r3, #2
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e122      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800941a:	4b69      	ldr	r3, [pc, #420]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 800941c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0ef      	beq.n	8009408 <HAL_RCC_OscConfig+0x5cc>
 8009428:	e01b      	b.n	8009462 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800942a:	4b65      	ldr	r3, [pc, #404]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 800942c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009430:	4a63      	ldr	r2, [pc, #396]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 8009432:	f023 0301 	bic.w	r3, r3, #1
 8009436:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800943a:	f7fe fdb1 	bl	8007fa0 <HAL_GetTick>
 800943e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009440:	e008      	b.n	8009454 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009442:	f7fe fdad 	bl	8007fa0 <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	2b02      	cmp	r3, #2
 800944e:	d901      	bls.n	8009454 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	e105      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009454:	4b5a      	ldr	r3, [pc, #360]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 8009456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800945a:	f003 0302 	and.w	r3, r3, #2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1ef      	bne.n	8009442 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80f9 	beq.w	800965e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009470:	2b02      	cmp	r3, #2
 8009472:	f040 80cf 	bne.w	8009614 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009476:	4b52      	ldr	r3, [pc, #328]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f003 0203 	and.w	r2, r3, #3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009486:	429a      	cmp	r2, r3
 8009488:	d12c      	bne.n	80094e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009494:	3b01      	subs	r3, #1
 8009496:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009498:	429a      	cmp	r2, r3
 800949a:	d123      	bne.n	80094e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d11b      	bne.n	80094e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d113      	bne.n	80094e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c6:	085b      	lsrs	r3, r3, #1
 80094c8:	3b01      	subs	r3, #1
 80094ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d109      	bne.n	80094e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	085b      	lsrs	r3, r3, #1
 80094dc:	3b01      	subs	r3, #1
 80094de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d071      	beq.n	80095c8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	2b0c      	cmp	r3, #12
 80094e8:	d068      	beq.n	80095bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80094ea:	4b35      	ldr	r3, [pc, #212]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d105      	bne.n	8009502 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80094f6:	4b32      	ldr	r3, [pc, #200]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e0ac      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009506:	4b2e      	ldr	r3, [pc, #184]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a2d      	ldr	r2, [pc, #180]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 800950c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009510:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009512:	f7fe fd45 	bl	8007fa0 <HAL_GetTick>
 8009516:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009518:	e008      	b.n	800952c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800951a:	f7fe fd41 	bl	8007fa0 <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	2b02      	cmp	r3, #2
 8009526:	d901      	bls.n	800952c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8009528:	2303      	movs	r3, #3
 800952a:	e099      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800952c:	4b24      	ldr	r3, [pc, #144]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1f0      	bne.n	800951a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009538:	4b21      	ldr	r3, [pc, #132]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	4b21      	ldr	r3, [pc, #132]	; (80095c4 <HAL_RCC_OscConfig+0x788>)
 800953e:	4013      	ands	r3, r2
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009548:	3a01      	subs	r2, #1
 800954a:	0112      	lsls	r2, r2, #4
 800954c:	4311      	orrs	r1, r2
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009552:	0212      	lsls	r2, r2, #8
 8009554:	4311      	orrs	r1, r2
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800955a:	0852      	lsrs	r2, r2, #1
 800955c:	3a01      	subs	r2, #1
 800955e:	0552      	lsls	r2, r2, #21
 8009560:	4311      	orrs	r1, r2
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009566:	0852      	lsrs	r2, r2, #1
 8009568:	3a01      	subs	r2, #1
 800956a:	0652      	lsls	r2, r2, #25
 800956c:	4311      	orrs	r1, r2
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009572:	06d2      	lsls	r2, r2, #27
 8009574:	430a      	orrs	r2, r1
 8009576:	4912      	ldr	r1, [pc, #72]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 8009578:	4313      	orrs	r3, r2
 800957a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800957c:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a0f      	ldr	r2, [pc, #60]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 8009582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009586:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009588:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	4a0c      	ldr	r2, [pc, #48]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 800958e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009592:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009594:	f7fe fd04 	bl	8007fa0 <HAL_GetTick>
 8009598:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800959a:	e008      	b.n	80095ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800959c:	f7fe fd00 	bl	8007fa0 <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d901      	bls.n	80095ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e058      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095ae:	4b04      	ldr	r3, [pc, #16]	; (80095c0 <HAL_RCC_OscConfig+0x784>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0f0      	beq.n	800959c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80095ba:	e050      	b.n	800965e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e04f      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
 80095c0:	40021000 	.word	0x40021000
 80095c4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095c8:	4b27      	ldr	r3, [pc, #156]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d144      	bne.n	800965e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80095d4:	4b24      	ldr	r3, [pc, #144]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a23      	ldr	r2, [pc, #140]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 80095da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80095e0:	4b21      	ldr	r3, [pc, #132]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	4a20      	ldr	r2, [pc, #128]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 80095e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80095ec:	f7fe fcd8 	bl	8007fa0 <HAL_GetTick>
 80095f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095f2:	e008      	b.n	8009606 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095f4:	f7fe fcd4 	bl	8007fa0 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d901      	bls.n	8009606 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e02c      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009606:	4b18      	ldr	r3, [pc, #96]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0f0      	beq.n	80095f4 <HAL_RCC_OscConfig+0x7b8>
 8009612:	e024      	b.n	800965e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	2b0c      	cmp	r3, #12
 8009618:	d01f      	beq.n	800965a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800961a:	4b13      	ldr	r3, [pc, #76]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a12      	ldr	r2, [pc, #72]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 8009620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009626:	f7fe fcbb 	bl	8007fa0 <HAL_GetTick>
 800962a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800962c:	e008      	b.n	8009640 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800962e:	f7fe fcb7 	bl	8007fa0 <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	2b02      	cmp	r3, #2
 800963a:	d901      	bls.n	8009640 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	e00f      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009640:	4b09      	ldr	r3, [pc, #36]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1f0      	bne.n	800962e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800964c:	4b06      	ldr	r3, [pc, #24]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	4905      	ldr	r1, [pc, #20]	; (8009668 <HAL_RCC_OscConfig+0x82c>)
 8009652:	4b06      	ldr	r3, [pc, #24]	; (800966c <HAL_RCC_OscConfig+0x830>)
 8009654:	4013      	ands	r3, r2
 8009656:	60cb      	str	r3, [r1, #12]
 8009658:	e001      	b.n	800965e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e000      	b.n	8009660 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3720      	adds	r7, #32
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	40021000 	.word	0x40021000
 800966c:	feeefffc 	.word	0xfeeefffc

08009670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800967a:	2300      	movs	r3, #0
 800967c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e11d      	b.n	80098c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009688:	4b90      	ldr	r3, [pc, #576]	; (80098cc <HAL_RCC_ClockConfig+0x25c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 030f 	and.w	r3, r3, #15
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d910      	bls.n	80096b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009696:	4b8d      	ldr	r3, [pc, #564]	; (80098cc <HAL_RCC_ClockConfig+0x25c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f023 020f 	bic.w	r2, r3, #15
 800969e:	498b      	ldr	r1, [pc, #556]	; (80098cc <HAL_RCC_ClockConfig+0x25c>)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096a6:	4b89      	ldr	r3, [pc, #548]	; (80098cc <HAL_RCC_ClockConfig+0x25c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 030f 	and.w	r3, r3, #15
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d001      	beq.n	80096b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e105      	b.n	80098c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d010      	beq.n	80096e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689a      	ldr	r2, [r3, #8]
 80096c8:	4b81      	ldr	r3, [pc, #516]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d908      	bls.n	80096e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096d4:	4b7e      	ldr	r3, [pc, #504]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	497b      	ldr	r1, [pc, #492]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d079      	beq.n	80097e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d11e      	bne.n	8009738 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096fa:	4b75      	ldr	r3, [pc, #468]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e0dc      	b.n	80098c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800970a:	f000 fa09 	bl	8009b20 <RCC_GetSysClockFreqFromPLLSource>
 800970e:	4603      	mov	r3, r0
 8009710:	4a70      	ldr	r2, [pc, #448]	; (80098d4 <HAL_RCC_ClockConfig+0x264>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d946      	bls.n	80097a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009716:	4b6e      	ldr	r3, [pc, #440]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d140      	bne.n	80097a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009722:	4b6b      	ldr	r3, [pc, #428]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800972a:	4a69      	ldr	r2, [pc, #420]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 800972c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009730:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009732:	2380      	movs	r3, #128	; 0x80
 8009734:	617b      	str	r3, [r7, #20]
 8009736:	e035      	b.n	80097a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	2b02      	cmp	r3, #2
 800973e:	d107      	bne.n	8009750 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009740:	4b63      	ldr	r3, [pc, #396]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d115      	bne.n	8009778 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e0b9      	b.n	80098c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d107      	bne.n	8009768 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009758:	4b5d      	ldr	r3, [pc, #372]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d109      	bne.n	8009778 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e0ad      	b.n	80098c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009768:	4b59      	ldr	r3, [pc, #356]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e0a5      	b.n	80098c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8009778:	f000 f8b4 	bl	80098e4 <HAL_RCC_GetSysClockFreq>
 800977c:	4603      	mov	r3, r0
 800977e:	4a55      	ldr	r2, [pc, #340]	; (80098d4 <HAL_RCC_ClockConfig+0x264>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d90f      	bls.n	80097a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009784:	4b52      	ldr	r3, [pc, #328]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d109      	bne.n	80097a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009790:	4b4f      	ldr	r3, [pc, #316]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009798:	4a4d      	ldr	r2, [pc, #308]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 800979a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800979e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80097a0:	2380      	movs	r3, #128	; 0x80
 80097a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097a4:	4b4a      	ldr	r3, [pc, #296]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f023 0203 	bic.w	r2, r3, #3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	4947      	ldr	r1, [pc, #284]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097b6:	f7fe fbf3 	bl	8007fa0 <HAL_GetTick>
 80097ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097bc:	e00a      	b.n	80097d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097be:	f7fe fbef 	bl	8007fa0 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d901      	bls.n	80097d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e077      	b.n	80098c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097d4:	4b3e      	ldr	r3, [pc, #248]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f003 020c 	and.w	r2, r3, #12
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d1eb      	bne.n	80097be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	2b80      	cmp	r3, #128	; 0x80
 80097ea:	d105      	bne.n	80097f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80097ec:	4b38      	ldr	r3, [pc, #224]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	4a37      	ldr	r2, [pc, #220]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 80097f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d010      	beq.n	8009826 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	4b31      	ldr	r3, [pc, #196]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009810:	429a      	cmp	r2, r3
 8009812:	d208      	bcs.n	8009826 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009814:	4b2e      	ldr	r3, [pc, #184]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	492b      	ldr	r1, [pc, #172]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009822:	4313      	orrs	r3, r2
 8009824:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009826:	4b29      	ldr	r3, [pc, #164]	; (80098cc <HAL_RCC_ClockConfig+0x25c>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 030f 	and.w	r3, r3, #15
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	429a      	cmp	r2, r3
 8009832:	d210      	bcs.n	8009856 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009834:	4b25      	ldr	r3, [pc, #148]	; (80098cc <HAL_RCC_ClockConfig+0x25c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f023 020f 	bic.w	r2, r3, #15
 800983c:	4923      	ldr	r1, [pc, #140]	; (80098cc <HAL_RCC_ClockConfig+0x25c>)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	4313      	orrs	r3, r2
 8009842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009844:	4b21      	ldr	r3, [pc, #132]	; (80098cc <HAL_RCC_ClockConfig+0x25c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 030f 	and.w	r3, r3, #15
 800984c:	683a      	ldr	r2, [r7, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d001      	beq.n	8009856 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e036      	b.n	80098c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0304 	and.w	r3, r3, #4
 800985e:	2b00      	cmp	r3, #0
 8009860:	d008      	beq.n	8009874 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009862:	4b1b      	ldr	r3, [pc, #108]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	4918      	ldr	r1, [pc, #96]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009870:	4313      	orrs	r3, r2
 8009872:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0308 	and.w	r3, r3, #8
 800987c:	2b00      	cmp	r3, #0
 800987e:	d009      	beq.n	8009894 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009880:	4b13      	ldr	r3, [pc, #76]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	00db      	lsls	r3, r3, #3
 800988e:	4910      	ldr	r1, [pc, #64]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 8009890:	4313      	orrs	r3, r2
 8009892:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009894:	f000 f826 	bl	80098e4 <HAL_RCC_GetSysClockFreq>
 8009898:	4602      	mov	r2, r0
 800989a:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <HAL_RCC_ClockConfig+0x260>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	091b      	lsrs	r3, r3, #4
 80098a0:	f003 030f 	and.w	r3, r3, #15
 80098a4:	490c      	ldr	r1, [pc, #48]	; (80098d8 <HAL_RCC_ClockConfig+0x268>)
 80098a6:	5ccb      	ldrb	r3, [r1, r3]
 80098a8:	f003 031f 	and.w	r3, r3, #31
 80098ac:	fa22 f303 	lsr.w	r3, r2, r3
 80098b0:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <HAL_RCC_ClockConfig+0x26c>)
 80098b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80098b4:	4b0a      	ldr	r3, [pc, #40]	; (80098e0 <HAL_RCC_ClockConfig+0x270>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fe fb21 	bl	8007f00 <HAL_InitTick>
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	40022000 	.word	0x40022000
 80098d0:	40021000 	.word	0x40021000
 80098d4:	04c4b400 	.word	0x04c4b400
 80098d8:	0801abdc 	.word	0x0801abdc
 80098dc:	20000128 	.word	0x20000128
 80098e0:	20000130 	.word	0x20000130

080098e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b089      	sub	sp, #36	; 0x24
 80098e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	61fb      	str	r3, [r7, #28]
 80098ee:	2300      	movs	r3, #0
 80098f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098f2:	4b3e      	ldr	r3, [pc, #248]	; (80099ec <HAL_RCC_GetSysClockFreq+0x108>)
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f003 030c 	and.w	r3, r3, #12
 80098fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098fc:	4b3b      	ldr	r3, [pc, #236]	; (80099ec <HAL_RCC_GetSysClockFreq+0x108>)
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f003 0303 	and.w	r3, r3, #3
 8009904:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <HAL_RCC_GetSysClockFreq+0x34>
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2b0c      	cmp	r3, #12
 8009910:	d121      	bne.n	8009956 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d11e      	bne.n	8009956 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009918:	4b34      	ldr	r3, [pc, #208]	; (80099ec <HAL_RCC_GetSysClockFreq+0x108>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0308 	and.w	r3, r3, #8
 8009920:	2b00      	cmp	r3, #0
 8009922:	d107      	bne.n	8009934 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009924:	4b31      	ldr	r3, [pc, #196]	; (80099ec <HAL_RCC_GetSysClockFreq+0x108>)
 8009926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800992a:	0a1b      	lsrs	r3, r3, #8
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	61fb      	str	r3, [r7, #28]
 8009932:	e005      	b.n	8009940 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009934:	4b2d      	ldr	r3, [pc, #180]	; (80099ec <HAL_RCC_GetSysClockFreq+0x108>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	091b      	lsrs	r3, r3, #4
 800993a:	f003 030f 	and.w	r3, r3, #15
 800993e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009940:	4a2b      	ldr	r2, [pc, #172]	; (80099f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009948:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10d      	bne.n	800996c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009954:	e00a      	b.n	800996c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b04      	cmp	r3, #4
 800995a:	d102      	bne.n	8009962 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800995c:	4b25      	ldr	r3, [pc, #148]	; (80099f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800995e:	61bb      	str	r3, [r7, #24]
 8009960:	e004      	b.n	800996c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b08      	cmp	r3, #8
 8009966:	d101      	bne.n	800996c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009968:	4b23      	ldr	r3, [pc, #140]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800996a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	2b0c      	cmp	r3, #12
 8009970:	d134      	bne.n	80099dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009972:	4b1e      	ldr	r3, [pc, #120]	; (80099ec <HAL_RCC_GetSysClockFreq+0x108>)
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f003 0303 	and.w	r3, r3, #3
 800997a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b02      	cmp	r3, #2
 8009980:	d003      	beq.n	800998a <HAL_RCC_GetSysClockFreq+0xa6>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b03      	cmp	r3, #3
 8009986:	d003      	beq.n	8009990 <HAL_RCC_GetSysClockFreq+0xac>
 8009988:	e005      	b.n	8009996 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800998a:	4b1a      	ldr	r3, [pc, #104]	; (80099f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800998c:	617b      	str	r3, [r7, #20]
      break;
 800998e:	e005      	b.n	800999c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009990:	4b19      	ldr	r3, [pc, #100]	; (80099f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8009992:	617b      	str	r3, [r7, #20]
      break;
 8009994:	e002      	b.n	800999c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	617b      	str	r3, [r7, #20]
      break;
 800999a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800999c:	4b13      	ldr	r3, [pc, #76]	; (80099ec <HAL_RCC_GetSysClockFreq+0x108>)
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	091b      	lsrs	r3, r3, #4
 80099a2:	f003 030f 	and.w	r3, r3, #15
 80099a6:	3301      	adds	r3, #1
 80099a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80099aa:	4b10      	ldr	r3, [pc, #64]	; (80099ec <HAL_RCC_GetSysClockFreq+0x108>)
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	0a1b      	lsrs	r3, r3, #8
 80099b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	fb03 f202 	mul.w	r2, r3, r2
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80099c2:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <HAL_RCC_GetSysClockFreq+0x108>)
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	0e5b      	lsrs	r3, r3, #25
 80099c8:	f003 0303 	and.w	r3, r3, #3
 80099cc:	3301      	adds	r3, #1
 80099ce:	005b      	lsls	r3, r3, #1
 80099d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80099da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80099dc:	69bb      	ldr	r3, [r7, #24]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3724      	adds	r7, #36	; 0x24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	40021000 	.word	0x40021000
 80099f0:	0801abf4 	.word	0x0801abf4
 80099f4:	00f42400 	.word	0x00f42400
 80099f8:	02dc6c00 	.word	0x02dc6c00

080099fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099fc:	b480      	push	{r7}
 80099fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a00:	4b03      	ldr	r3, [pc, #12]	; (8009a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a02:	681b      	ldr	r3, [r3, #0]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	20000128 	.word	0x20000128

08009a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009a18:	f7ff fff0 	bl	80099fc <HAL_RCC_GetHCLKFreq>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	4b06      	ldr	r3, [pc, #24]	; (8009a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	0a1b      	lsrs	r3, r3, #8
 8009a24:	f003 0307 	and.w	r3, r3, #7
 8009a28:	4904      	ldr	r1, [pc, #16]	; (8009a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a2a:	5ccb      	ldrb	r3, [r1, r3]
 8009a2c:	f003 031f 	and.w	r3, r3, #31
 8009a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	40021000 	.word	0x40021000
 8009a3c:	0801abec 	.word	0x0801abec

08009a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009a44:	f7ff ffda 	bl	80099fc <HAL_RCC_GetHCLKFreq>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	4b06      	ldr	r3, [pc, #24]	; (8009a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	0adb      	lsrs	r3, r3, #11
 8009a50:	f003 0307 	and.w	r3, r3, #7
 8009a54:	4904      	ldr	r1, [pc, #16]	; (8009a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a56:	5ccb      	ldrb	r3, [r1, r3]
 8009a58:	f003 031f 	and.w	r3, r3, #31
 8009a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	40021000 	.word	0x40021000
 8009a68:	0801abec 	.word	0x0801abec

08009a6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009a74:	2300      	movs	r3, #0
 8009a76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009a78:	4b27      	ldr	r3, [pc, #156]	; (8009b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d003      	beq.n	8009a8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009a84:	f7ff f906 	bl	8008c94 <HAL_PWREx_GetVoltageRange>
 8009a88:	6178      	str	r0, [r7, #20]
 8009a8a:	e014      	b.n	8009ab6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009a8c:	4b22      	ldr	r3, [pc, #136]	; (8009b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a90:	4a21      	ldr	r2, [pc, #132]	; (8009b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a96:	6593      	str	r3, [r2, #88]	; 0x58
 8009a98:	4b1f      	ldr	r3, [pc, #124]	; (8009b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009aa4:	f7ff f8f6 	bl	8008c94 <HAL_PWREx_GetVoltageRange>
 8009aa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009aaa:	4b1b      	ldr	r3, [pc, #108]	; (8009b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aae:	4a1a      	ldr	r2, [pc, #104]	; (8009b18 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8009ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ab4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009abc:	d10b      	bne.n	8009ad6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b80      	cmp	r3, #128	; 0x80
 8009ac2:	d913      	bls.n	8009aec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2ba0      	cmp	r3, #160	; 0xa0
 8009ac8:	d902      	bls.n	8009ad0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009aca:	2302      	movs	r3, #2
 8009acc:	613b      	str	r3, [r7, #16]
 8009ace:	e00d      	b.n	8009aec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	e00a      	b.n	8009aec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8009ada:	d902      	bls.n	8009ae2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009adc:	2302      	movs	r3, #2
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	e004      	b.n	8009aec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b70      	cmp	r3, #112	; 0x70
 8009ae6:	d101      	bne.n	8009aec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ae8:	2301      	movs	r3, #1
 8009aea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009aec:	4b0b      	ldr	r3, [pc, #44]	; (8009b1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f023 020f 	bic.w	r2, r3, #15
 8009af4:	4909      	ldr	r1, [pc, #36]	; (8009b1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009afc:	4b07      	ldr	r3, [pc, #28]	; (8009b1c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 030f 	and.w	r3, r3, #15
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d001      	beq.n	8009b0e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e000      	b.n	8009b10 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40021000 	.word	0x40021000
 8009b1c:	40022000 	.word	0x40022000

08009b20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b087      	sub	sp, #28
 8009b24:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b26:	4b2d      	ldr	r3, [pc, #180]	; (8009bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d00b      	beq.n	8009b4e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d825      	bhi.n	8009b88 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d008      	beq.n	8009b54 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d11f      	bne.n	8009b88 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009b48:	4b25      	ldr	r3, [pc, #148]	; (8009be0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009b4a:	613b      	str	r3, [r7, #16]
    break;
 8009b4c:	e01f      	b.n	8009b8e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8009b4e:	4b25      	ldr	r3, [pc, #148]	; (8009be4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009b50:	613b      	str	r3, [r7, #16]
    break;
 8009b52:	e01c      	b.n	8009b8e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009b54:	4b21      	ldr	r3, [pc, #132]	; (8009bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0308 	and.w	r3, r3, #8
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d107      	bne.n	8009b70 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009b60:	4b1e      	ldr	r3, [pc, #120]	; (8009bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b66:	0a1b      	lsrs	r3, r3, #8
 8009b68:	f003 030f 	and.w	r3, r3, #15
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	e005      	b.n	8009b7c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009b70:	4b1a      	ldr	r3, [pc, #104]	; (8009bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	091b      	lsrs	r3, r3, #4
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8009b7c:	4a1a      	ldr	r2, [pc, #104]	; (8009be8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b84:	613b      	str	r3, [r7, #16]
    break;
 8009b86:	e002      	b.n	8009b8e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	613b      	str	r3, [r7, #16]
    break;
 8009b8c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b8e:	4b13      	ldr	r3, [pc, #76]	; (8009bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	091b      	lsrs	r3, r3, #4
 8009b94:	f003 030f 	and.w	r3, r3, #15
 8009b98:	3301      	adds	r3, #1
 8009b9a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009b9c:	4b0f      	ldr	r3, [pc, #60]	; (8009bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	0a1b      	lsrs	r3, r3, #8
 8009ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	fb03 f202 	mul.w	r2, r3, r2
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bb2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009bb4:	4b09      	ldr	r3, [pc, #36]	; (8009bdc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	0e5b      	lsrs	r3, r3, #25
 8009bba:	f003 0303 	and.w	r3, r3, #3
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	005b      	lsls	r3, r3, #1
 8009bc2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bcc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009bce:	683b      	ldr	r3, [r7, #0]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	371c      	adds	r7, #28
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	40021000 	.word	0x40021000
 8009be0:	00f42400 	.word	0x00f42400
 8009be4:	02dc6c00 	.word	0x02dc6c00
 8009be8:	0801abf4 	.word	0x0801abf4

08009bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d040      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c0c:	2b80      	cmp	r3, #128	; 0x80
 8009c0e:	d02a      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c10:	2b80      	cmp	r3, #128	; 0x80
 8009c12:	d825      	bhi.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009c14:	2b60      	cmp	r3, #96	; 0x60
 8009c16:	d026      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c18:	2b60      	cmp	r3, #96	; 0x60
 8009c1a:	d821      	bhi.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009c1c:	2b40      	cmp	r3, #64	; 0x40
 8009c1e:	d006      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009c20:	2b40      	cmp	r3, #64	; 0x40
 8009c22:	d81d      	bhi.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d009      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009c28:	2b20      	cmp	r3, #32
 8009c2a:	d010      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009c2c:	e018      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009c2e:	4b89      	ldr	r3, [pc, #548]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	4a88      	ldr	r2, [pc, #544]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c38:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009c3a:	e015      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3304      	adds	r3, #4
 8009c40:	2100      	movs	r1, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fb02 	bl	800a24c <RCCEx_PLLSAI1_Config>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009c4c:	e00c      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	3320      	adds	r3, #32
 8009c52:	2100      	movs	r1, #0
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fbed 	bl	800a434 <RCCEx_PLLSAI2_Config>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009c5e:	e003      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	74fb      	strb	r3, [r7, #19]
      break;
 8009c64:	e000      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8009c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c68:	7cfb      	ldrb	r3, [r7, #19]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10b      	bne.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c6e:	4b79      	ldr	r3, [pc, #484]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c74:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c7c:	4975      	ldr	r1, [pc, #468]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009c84:	e001      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c86:	7cfb      	ldrb	r3, [r7, #19]
 8009c88:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d047      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c9e:	d030      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca4:	d82a      	bhi.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009caa:	d02a      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cb0:	d824      	bhi.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cb6:	d008      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cbc:	d81e      	bhi.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc6:	d010      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009cc8:	e018      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009cca:	4b62      	ldr	r3, [pc, #392]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	4a61      	ldr	r2, [pc, #388]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cd4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009cd6:	e015      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	2100      	movs	r1, #0
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fab4 	bl	800a24c <RCCEx_PLLSAI1_Config>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009ce8:	e00c      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	3320      	adds	r3, #32
 8009cee:	2100      	movs	r1, #0
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 fb9f 	bl	800a434 <RCCEx_PLLSAI2_Config>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009cfa:	e003      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	74fb      	strb	r3, [r7, #19]
      break;
 8009d00:	e000      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8009d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d04:	7cfb      	ldrb	r3, [r7, #19]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10b      	bne.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009d0a:	4b52      	ldr	r3, [pc, #328]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d18:	494e      	ldr	r1, [pc, #312]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009d20:	e001      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d22:	7cfb      	ldrb	r3, [r7, #19]
 8009d24:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 809f 	beq.w	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d34:	2300      	movs	r3, #0
 8009d36:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009d38:	4b46      	ldr	r3, [pc, #280]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d101      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e000      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00d      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d4e:	4b41      	ldr	r3, [pc, #260]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d52:	4a40      	ldr	r2, [pc, #256]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d58:	6593      	str	r3, [r2, #88]	; 0x58
 8009d5a:	4b3e      	ldr	r3, [pc, #248]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d62:	60bb      	str	r3, [r7, #8]
 8009d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d66:	2301      	movs	r3, #1
 8009d68:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d6a:	4b3b      	ldr	r3, [pc, #236]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a3a      	ldr	r2, [pc, #232]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d76:	f7fe f913 	bl	8007fa0 <HAL_GetTick>
 8009d7a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009d7c:	e009      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d7e:	f7fe f90f 	bl	8007fa0 <HAL_GetTick>
 8009d82:	4602      	mov	r2, r0
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d902      	bls.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	74fb      	strb	r3, [r7, #19]
        break;
 8009d90:	e005      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009d92:	4b31      	ldr	r3, [pc, #196]	; (8009e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0ef      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009d9e:	7cfb      	ldrb	r3, [r7, #19]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d15b      	bne.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009da4:	4b2b      	ldr	r3, [pc, #172]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d01f      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dbc:	697a      	ldr	r2, [r7, #20]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d019      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009dc2:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dcc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009dce:	4b21      	ldr	r3, [pc, #132]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dd4:	4a1f      	ldr	r2, [pc, #124]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009dde:	4b1d      	ldr	r3, [pc, #116]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de4:	4a1b      	ldr	r2, [pc, #108]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009dee:	4a19      	ldr	r2, [pc, #100]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d016      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e00:	f7fe f8ce 	bl	8007fa0 <HAL_GetTick>
 8009e04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e06:	e00b      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e08:	f7fe f8ca 	bl	8007fa0 <HAL_GetTick>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d902      	bls.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	74fb      	strb	r3, [r7, #19]
            break;
 8009e1e:	e006      	b.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e20:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0ec      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009e2e:	7cfb      	ldrb	r3, [r7, #19]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10c      	bne.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e34:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e44:	4903      	ldr	r1, [pc, #12]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009e4c:	e008      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e4e:	7cfb      	ldrb	r3, [r7, #19]
 8009e50:	74bb      	strb	r3, [r7, #18]
 8009e52:	e005      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8009e54:	40021000 	.word	0x40021000
 8009e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5c:	7cfb      	ldrb	r3, [r7, #19]
 8009e5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e60:	7c7b      	ldrb	r3, [r7, #17]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d105      	bne.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e66:	4ba0      	ldr	r3, [pc, #640]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6a:	4a9f      	ldr	r2, [pc, #636]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00a      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009e7e:	4b9a      	ldr	r3, [pc, #616]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e84:	f023 0203 	bic.w	r2, r3, #3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e8c:	4996      	ldr	r1, [pc, #600]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 0302 	and.w	r3, r3, #2
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00a      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ea0:	4b91      	ldr	r3, [pc, #580]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea6:	f023 020c 	bic.w	r2, r3, #12
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eae:	498e      	ldr	r1, [pc, #568]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00a      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009ec2:	4b89      	ldr	r3, [pc, #548]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed0:	4985      	ldr	r1, [pc, #532]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0308 	and.w	r3, r3, #8
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00a      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ee4:	4b80      	ldr	r3, [pc, #512]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ef2:	497d      	ldr	r1, [pc, #500]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0310 	and.w	r3, r3, #16
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009f06:	4b78      	ldr	r3, [pc, #480]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f14:	4974      	ldr	r1, [pc, #464]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 0320 	and.w	r3, r3, #32
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00a      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f28:	4b6f      	ldr	r3, [pc, #444]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f36:	496c      	ldr	r1, [pc, #432]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f4a:	4b67      	ldr	r3, [pc, #412]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f58:	4963      	ldr	r1, [pc, #396]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00a      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f6c:	4b5e      	ldr	r3, [pc, #376]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f7a:	495b      	ldr	r1, [pc, #364]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f8e:	4b56      	ldr	r3, [pc, #344]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9c:	4952      	ldr	r1, [pc, #328]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009fb0:	4b4d      	ldr	r3, [pc, #308]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fbe:	494a      	ldr	r1, [pc, #296]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009fd2:	4b45      	ldr	r3, [pc, #276]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe0:	4941      	ldr	r1, [pc, #260]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ff4:	4b3c      	ldr	r3, [pc, #240]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ffa:	f023 0203 	bic.w	r2, r3, #3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a002:	4939      	ldr	r1, [pc, #228]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a004:	4313      	orrs	r3, r2
 800a006:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d028      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a016:	4b34      	ldr	r3, [pc, #208]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a01c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a024:	4930      	ldr	r1, [pc, #192]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a026:	4313      	orrs	r3, r2
 800a028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a034:	d106      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a036:	4b2c      	ldr	r3, [pc, #176]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	4a2b      	ldr	r2, [pc, #172]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a03c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a040:	60d3      	str	r3, [r2, #12]
 800a042:	e011      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a04c:	d10c      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3304      	adds	r3, #4
 800a052:	2101      	movs	r1, #1
 800a054:	4618      	mov	r0, r3
 800a056:	f000 f8f9 	bl	800a24c <RCCEx_PLLSAI1_Config>
 800a05a:	4603      	mov	r3, r0
 800a05c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a05e:	7cfb      	ldrb	r3, [r7, #19]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800a064:	7cfb      	ldrb	r3, [r7, #19]
 800a066:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d04d      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a07c:	d108      	bne.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800a07e:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a084:	4a18      	ldr	r2, [pc, #96]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a08a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800a08e:	e012      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800a090:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a096:	4a14      	ldr	r2, [pc, #80]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a09c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800a0a0:	4b11      	ldr	r3, [pc, #68]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0ae:	490e      	ldr	r1, [pc, #56]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0be:	d106      	bne.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0c0:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	4a08      	ldr	r2, [pc, #32]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0ca:	60d3      	str	r3, [r2, #12]
 800a0cc:	e020      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0d6:	d109      	bne.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a0d8:	4b03      	ldr	r3, [pc, #12]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	4a02      	ldr	r2, [pc, #8]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800a0de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0e2:	60d3      	str	r3, [r2, #12]
 800a0e4:	e014      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a0e6:	bf00      	nop
 800a0e8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0f4:	d10c      	bne.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 f8a5 	bl	800a24c <RCCEx_PLLSAI1_Config>
 800a102:	4603      	mov	r3, r0
 800a104:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a106:	7cfb      	ldrb	r3, [r7, #19]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800a10c:	7cfb      	ldrb	r3, [r7, #19]
 800a10e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d028      	beq.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a11c:	4b4a      	ldr	r3, [pc, #296]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a12a:	4947      	ldr	r1, [pc, #284]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a13a:	d106      	bne.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a13c:	4b42      	ldr	r3, [pc, #264]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	4a41      	ldr	r2, [pc, #260]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a146:	60d3      	str	r3, [r2, #12]
 800a148:	e011      	b.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a14e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a152:	d10c      	bne.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3304      	adds	r3, #4
 800a158:	2101      	movs	r1, #1
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 f876 	bl	800a24c <RCCEx_PLLSAI1_Config>
 800a160:	4603      	mov	r3, r0
 800a162:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a164:	7cfb      	ldrb	r3, [r7, #19]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800a16a:	7cfb      	ldrb	r3, [r7, #19]
 800a16c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a176:	2b00      	cmp	r3, #0
 800a178:	d01e      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a17a:	4b33      	ldr	r3, [pc, #204]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a180:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a18a:	492f      	ldr	r1, [pc, #188]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a18c:	4313      	orrs	r3, r2
 800a18e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a19c:	d10c      	bne.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	2102      	movs	r1, #2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 f851 	bl	800a24c <RCCEx_PLLSAI1_Config>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a1ae:	7cfb      	ldrb	r3, [r7, #19]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800a1b4:	7cfb      	ldrb	r3, [r7, #19]
 800a1b6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a1c4:	4b20      	ldr	r3, [pc, #128]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a1c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1ca:	f023 0204 	bic.w	r2, r3, #4
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1d4:	491c      	ldr	r1, [pc, #112]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800a1e8:	4b17      	ldr	r3, [pc, #92]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a1ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1ee:	f023 0218 	bic.w	r2, r3, #24
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f8:	4913      	ldr	r1, [pc, #76]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d017      	beq.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a20c:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a20e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a21c:	490a      	ldr	r1, [pc, #40]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a22a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a22e:	d105      	bne.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a230:	4b05      	ldr	r3, [pc, #20]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	4a04      	ldr	r2, [pc, #16]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a23a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a23c:	7cbb      	ldrb	r3, [r7, #18]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	40021000 	.word	0x40021000

0800a24c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a25a:	4b72      	ldr	r3, [pc, #456]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00e      	beq.n	800a284 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a266:	4b6f      	ldr	r3, [pc, #444]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	f003 0203 	and.w	r2, r3, #3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d103      	bne.n	800a27e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
       ||
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d142      	bne.n	800a304 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	73fb      	strb	r3, [r7, #15]
 800a282:	e03f      	b.n	800a304 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d018      	beq.n	800a2be <RCCEx_PLLSAI1_Config+0x72>
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d825      	bhi.n	800a2dc <RCCEx_PLLSAI1_Config+0x90>
 800a290:	2b01      	cmp	r3, #1
 800a292:	d002      	beq.n	800a29a <RCCEx_PLLSAI1_Config+0x4e>
 800a294:	2b02      	cmp	r3, #2
 800a296:	d009      	beq.n	800a2ac <RCCEx_PLLSAI1_Config+0x60>
 800a298:	e020      	b.n	800a2dc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a29a:	4b62      	ldr	r3, [pc, #392]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0302 	and.w	r3, r3, #2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d11d      	bne.n	800a2e2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a2aa:	e01a      	b.n	800a2e2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a2ac:	4b5d      	ldr	r3, [pc, #372]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d116      	bne.n	800a2e6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a2bc:	e013      	b.n	800a2e6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a2be:	4b59      	ldr	r3, [pc, #356]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10f      	bne.n	800a2ea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a2ca:	4b56      	ldr	r3, [pc, #344]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d109      	bne.n	800a2ea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a2da:	e006      	b.n	800a2ea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	73fb      	strb	r3, [r7, #15]
      break;
 800a2e0:	e004      	b.n	800a2ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a2e2:	bf00      	nop
 800a2e4:	e002      	b.n	800a2ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a2e6:	bf00      	nop
 800a2e8:	e000      	b.n	800a2ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800a2ea:	bf00      	nop
    }

    if(status == HAL_OK)
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d108      	bne.n	800a304 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800a2f2:	4b4c      	ldr	r3, [pc, #304]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f023 0203 	bic.w	r2, r3, #3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4949      	ldr	r1, [pc, #292]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a300:	4313      	orrs	r3, r2
 800a302:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	2b00      	cmp	r3, #0
 800a308:	f040 8086 	bne.w	800a418 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a30c:	4b45      	ldr	r3, [pc, #276]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a44      	ldr	r2, [pc, #272]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a318:	f7fd fe42 	bl	8007fa0 <HAL_GetTick>
 800a31c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a31e:	e009      	b.n	800a334 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a320:	f7fd fe3e 	bl	8007fa0 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d902      	bls.n	800a334 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	73fb      	strb	r3, [r7, #15]
        break;
 800a332:	e005      	b.n	800a340 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a334:	4b3b      	ldr	r3, [pc, #236]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1ef      	bne.n	800a320 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d168      	bne.n	800a418 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d113      	bne.n	800a374 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a34c:	4b35      	ldr	r3, [pc, #212]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a34e:	691a      	ldr	r2, [r3, #16]
 800a350:	4b35      	ldr	r3, [pc, #212]	; (800a428 <RCCEx_PLLSAI1_Config+0x1dc>)
 800a352:	4013      	ands	r3, r2
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	6892      	ldr	r2, [r2, #8]
 800a358:	0211      	lsls	r1, r2, #8
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	68d2      	ldr	r2, [r2, #12]
 800a35e:	06d2      	lsls	r2, r2, #27
 800a360:	4311      	orrs	r1, r2
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	6852      	ldr	r2, [r2, #4]
 800a366:	3a01      	subs	r2, #1
 800a368:	0112      	lsls	r2, r2, #4
 800a36a:	430a      	orrs	r2, r1
 800a36c:	492d      	ldr	r1, [pc, #180]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	610b      	str	r3, [r1, #16]
 800a372:	e02d      	b.n	800a3d0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d115      	bne.n	800a3a6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a37a:	4b2a      	ldr	r3, [pc, #168]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a37c:	691a      	ldr	r2, [r3, #16]
 800a37e:	4b2b      	ldr	r3, [pc, #172]	; (800a42c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a380:	4013      	ands	r3, r2
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	6892      	ldr	r2, [r2, #8]
 800a386:	0211      	lsls	r1, r2, #8
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	6912      	ldr	r2, [r2, #16]
 800a38c:	0852      	lsrs	r2, r2, #1
 800a38e:	3a01      	subs	r2, #1
 800a390:	0552      	lsls	r2, r2, #21
 800a392:	4311      	orrs	r1, r2
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6852      	ldr	r2, [r2, #4]
 800a398:	3a01      	subs	r2, #1
 800a39a:	0112      	lsls	r2, r2, #4
 800a39c:	430a      	orrs	r2, r1
 800a39e:	4921      	ldr	r1, [pc, #132]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	610b      	str	r3, [r1, #16]
 800a3a4:	e014      	b.n	800a3d0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a3a6:	4b1f      	ldr	r3, [pc, #124]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a3a8:	691a      	ldr	r2, [r3, #16]
 800a3aa:	4b21      	ldr	r3, [pc, #132]	; (800a430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	6892      	ldr	r2, [r2, #8]
 800a3b2:	0211      	lsls	r1, r2, #8
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6952      	ldr	r2, [r2, #20]
 800a3b8:	0852      	lsrs	r2, r2, #1
 800a3ba:	3a01      	subs	r2, #1
 800a3bc:	0652      	lsls	r2, r2, #25
 800a3be:	4311      	orrs	r1, r2
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6852      	ldr	r2, [r2, #4]
 800a3c4:	3a01      	subs	r2, #1
 800a3c6:	0112      	lsls	r2, r2, #4
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	4916      	ldr	r1, [pc, #88]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a3d0:	4b14      	ldr	r3, [pc, #80]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a13      	ldr	r2, [pc, #76]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a3d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a3da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3dc:	f7fd fde0 	bl	8007fa0 <HAL_GetTick>
 800a3e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a3e2:	e009      	b.n	800a3f8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a3e4:	f7fd fddc 	bl	8007fa0 <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	d902      	bls.n	800a3f8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	73fb      	strb	r3, [r7, #15]
          break;
 800a3f6:	e005      	b.n	800a404 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a3f8:	4b0a      	ldr	r3, [pc, #40]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d0ef      	beq.n	800a3e4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a40a:	4b06      	ldr	r3, [pc, #24]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a40c:	691a      	ldr	r2, [r3, #16]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	4904      	ldr	r1, [pc, #16]	; (800a424 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a414:	4313      	orrs	r3, r2
 800a416:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	40021000 	.word	0x40021000
 800a428:	07ff800f 	.word	0x07ff800f
 800a42c:	ff9f800f 	.word	0xff9f800f
 800a430:	f9ff800f 	.word	0xf9ff800f

0800a434 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a442:	4b72      	ldr	r3, [pc, #456]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f003 0303 	and.w	r3, r3, #3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00e      	beq.n	800a46c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a44e:	4b6f      	ldr	r3, [pc, #444]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	f003 0203 	and.w	r2, r3, #3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d103      	bne.n	800a466 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
       ||
 800a462:	2b00      	cmp	r3, #0
 800a464:	d142      	bne.n	800a4ec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	73fb      	strb	r3, [r7, #15]
 800a46a:	e03f      	b.n	800a4ec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b03      	cmp	r3, #3
 800a472:	d018      	beq.n	800a4a6 <RCCEx_PLLSAI2_Config+0x72>
 800a474:	2b03      	cmp	r3, #3
 800a476:	d825      	bhi.n	800a4c4 <RCCEx_PLLSAI2_Config+0x90>
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d002      	beq.n	800a482 <RCCEx_PLLSAI2_Config+0x4e>
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d009      	beq.n	800a494 <RCCEx_PLLSAI2_Config+0x60>
 800a480:	e020      	b.n	800a4c4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a482:	4b62      	ldr	r3, [pc, #392]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d11d      	bne.n	800a4ca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a492:	e01a      	b.n	800a4ca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a494:	4b5d      	ldr	r3, [pc, #372]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d116      	bne.n	800a4ce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4a4:	e013      	b.n	800a4ce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a4a6:	4b59      	ldr	r3, [pc, #356]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10f      	bne.n	800a4d2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a4b2:	4b56      	ldr	r3, [pc, #344]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d109      	bne.n	800a4d2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a4c2:	e006      	b.n	800a4d2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4c8:	e004      	b.n	800a4d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a4ca:	bf00      	nop
 800a4cc:	e002      	b.n	800a4d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a4ce:	bf00      	nop
 800a4d0:	e000      	b.n	800a4d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a4d2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d108      	bne.n	800a4ec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800a4da:	4b4c      	ldr	r3, [pc, #304]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	f023 0203 	bic.w	r2, r3, #3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4949      	ldr	r1, [pc, #292]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f040 8086 	bne.w	800a600 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a4f4:	4b45      	ldr	r3, [pc, #276]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a44      	ldr	r2, [pc, #272]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a4fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a500:	f7fd fd4e 	bl	8007fa0 <HAL_GetTick>
 800a504:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a506:	e009      	b.n	800a51c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a508:	f7fd fd4a 	bl	8007fa0 <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b02      	cmp	r3, #2
 800a514:	d902      	bls.n	800a51c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	73fb      	strb	r3, [r7, #15]
        break;
 800a51a:	e005      	b.n	800a528 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a51c:	4b3b      	ldr	r3, [pc, #236]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1ef      	bne.n	800a508 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d168      	bne.n	800a600 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d113      	bne.n	800a55c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a534:	4b35      	ldr	r3, [pc, #212]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a536:	695a      	ldr	r2, [r3, #20]
 800a538:	4b35      	ldr	r3, [pc, #212]	; (800a610 <RCCEx_PLLSAI2_Config+0x1dc>)
 800a53a:	4013      	ands	r3, r2
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	6892      	ldr	r2, [r2, #8]
 800a540:	0211      	lsls	r1, r2, #8
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	68d2      	ldr	r2, [r2, #12]
 800a546:	06d2      	lsls	r2, r2, #27
 800a548:	4311      	orrs	r1, r2
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	6852      	ldr	r2, [r2, #4]
 800a54e:	3a01      	subs	r2, #1
 800a550:	0112      	lsls	r2, r2, #4
 800a552:	430a      	orrs	r2, r1
 800a554:	492d      	ldr	r1, [pc, #180]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a556:	4313      	orrs	r3, r2
 800a558:	614b      	str	r3, [r1, #20]
 800a55a:	e02d      	b.n	800a5b8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d115      	bne.n	800a58e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a562:	4b2a      	ldr	r3, [pc, #168]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a564:	695a      	ldr	r2, [r3, #20]
 800a566:	4b2b      	ldr	r3, [pc, #172]	; (800a614 <RCCEx_PLLSAI2_Config+0x1e0>)
 800a568:	4013      	ands	r3, r2
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	6892      	ldr	r2, [r2, #8]
 800a56e:	0211      	lsls	r1, r2, #8
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	6912      	ldr	r2, [r2, #16]
 800a574:	0852      	lsrs	r2, r2, #1
 800a576:	3a01      	subs	r2, #1
 800a578:	0552      	lsls	r2, r2, #21
 800a57a:	4311      	orrs	r1, r2
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	6852      	ldr	r2, [r2, #4]
 800a580:	3a01      	subs	r2, #1
 800a582:	0112      	lsls	r2, r2, #4
 800a584:	430a      	orrs	r2, r1
 800a586:	4921      	ldr	r1, [pc, #132]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	614b      	str	r3, [r1, #20]
 800a58c:	e014      	b.n	800a5b8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a58e:	4b1f      	ldr	r3, [pc, #124]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a590:	695a      	ldr	r2, [r3, #20]
 800a592:	4b21      	ldr	r3, [pc, #132]	; (800a618 <RCCEx_PLLSAI2_Config+0x1e4>)
 800a594:	4013      	ands	r3, r2
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6892      	ldr	r2, [r2, #8]
 800a59a:	0211      	lsls	r1, r2, #8
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6952      	ldr	r2, [r2, #20]
 800a5a0:	0852      	lsrs	r2, r2, #1
 800a5a2:	3a01      	subs	r2, #1
 800a5a4:	0652      	lsls	r2, r2, #25
 800a5a6:	4311      	orrs	r1, r2
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	6852      	ldr	r2, [r2, #4]
 800a5ac:	3a01      	subs	r2, #1
 800a5ae:	0112      	lsls	r2, r2, #4
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	4916      	ldr	r1, [pc, #88]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a5b8:	4b14      	ldr	r3, [pc, #80]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a13      	ldr	r2, [pc, #76]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a5be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5c4:	f7fd fcec 	bl	8007fa0 <HAL_GetTick>
 800a5c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a5ca:	e009      	b.n	800a5e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a5cc:	f7fd fce8 	bl	8007fa0 <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d902      	bls.n	800a5e0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	73fb      	strb	r3, [r7, #15]
          break;
 800a5de:	e005      	b.n	800a5ec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0ef      	beq.n	800a5cc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d106      	bne.n	800a600 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a5f2:	4b06      	ldr	r3, [pc, #24]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a5f4:	695a      	ldr	r2, [r3, #20]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	699b      	ldr	r3, [r3, #24]
 800a5fa:	4904      	ldr	r1, [pc, #16]	; (800a60c <RCCEx_PLLSAI2_Config+0x1d8>)
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a600:	7bfb      	ldrb	r3, [r7, #15]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	40021000 	.word	0x40021000
 800a610:	07ff800f 	.word	0x07ff800f
 800a614:	ff9f800f 	.word	0xff9f800f
 800a618:	f9ff800f 	.word	0xf9ff800f

0800a61c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e095      	b.n	800a75a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a632:	2b00      	cmp	r3, #0
 800a634:	d108      	bne.n	800a648 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a63e:	d009      	beq.n	800a654 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	61da      	str	r2, [r3, #28]
 800a646:	e005      	b.n	800a654 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7fc fe1c 	bl	80072ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2202      	movs	r2, #2
 800a678:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a68a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a694:	d902      	bls.n	800a69c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	e002      	b.n	800a6a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a69c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a6aa:	d007      	beq.n	800a6bc <HAL_SPI_Init+0xa0>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6b4:	d002      	beq.n	800a6bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a6cc:	431a      	orrs	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	f003 0302 	and.w	r3, r3, #2
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	69db      	ldr	r3, [r3, #28]
 800a6f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fe:	ea42 0103 	orr.w	r1, r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a706:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	0c1b      	lsrs	r3, r3, #16
 800a718:	f003 0204 	and.w	r2, r3, #4
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	f003 0310 	and.w	r3, r3, #16
 800a724:	431a      	orrs	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72a:	f003 0308 	and.w	r3, r3, #8
 800a72e:	431a      	orrs	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a738:	ea42 0103 	orr.w	r1, r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	430a      	orrs	r2, r1
 800a748:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
	...

0800a764 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
 800a770:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a77c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a784:	7dbb      	ldrb	r3, [r7, #22]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d00d      	beq.n	800a7a6 <HAL_SPI_TransmitReceive_IT+0x42>
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a790:	d106      	bne.n	800a7a0 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <HAL_SPI_TransmitReceive_IT+0x3c>
 800a79a:	7dbb      	ldrb	r3, [r7, #22]
 800a79c:	2b04      	cmp	r3, #4
 800a79e:	d002      	beq.n	800a7a6 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a7a4:	e07d      	b.n	800a8a2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <HAL_SPI_TransmitReceive_IT+0x54>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <HAL_SPI_TransmitReceive_IT+0x54>
 800a7b2:	887b      	ldrh	r3, [r7, #2]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a7bc:	e071      	b.n	800a8a2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d101      	bne.n	800a7cc <HAL_SPI_TransmitReceive_IT+0x68>
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	e06b      	b.n	800a8a4 <HAL_SPI_TransmitReceive_IT+0x140>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d003      	beq.n	800a7e8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2205      	movs	r2, #5
 800a7e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	887a      	ldrh	r2, [r7, #2]
 800a7f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	887a      	ldrh	r2, [r7, #2]
 800a7fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	887a      	ldrh	r2, [r7, #2]
 800a80a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	887a      	ldrh	r2, [r7, #2]
 800a812:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a81e:	d906      	bls.n	800a82e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4a23      	ldr	r2, [pc, #140]	; (800a8b0 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800a824:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	4a22      	ldr	r2, [pc, #136]	; (800a8b4 <HAL_SPI_TransmitReceive_IT+0x150>)
 800a82a:	651a      	str	r2, [r3, #80]	; 0x50
 800a82c:	e005      	b.n	800a83a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	4a21      	ldr	r2, [pc, #132]	; (800a8b8 <HAL_SPI_TransmitReceive_IT+0x154>)
 800a832:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	4a21      	ldr	r2, [pc, #132]	; (800a8bc <HAL_SPI_TransmitReceive_IT+0x158>)
 800a838:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a842:	d802      	bhi.n	800a84a <HAL_SPI_TransmitReceive_IT+0xe6>
 800a844:	887b      	ldrh	r3, [r7, #2]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d908      	bls.n	800a85c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a858:	605a      	str	r2, [r3, #4]
 800a85a:	e007      	b.n	800a86c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a86a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a876:	2b40      	cmp	r3, #64	; 0x40
 800a878:	d007      	beq.n	800a88a <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a888:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800a8a0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	371c      	adds	r7, #28
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	0800b117 	.word	0x0800b117
 800a8b4:	0800b17d 	.word	0x0800b17d
 800a8b8:	0800afc7 	.word	0x0800afc7
 800a8bc:	0800b085 	.word	0x0800b085

0800a8c0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d101      	bne.n	800a8e0 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e164      	b.n	800abaa <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a8ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a8f6:	7dbb      	ldrb	r3, [r7, #22]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d00d      	beq.n	800a918 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a902:	d106      	bne.n	800a912 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <HAL_SPI_TransmitReceive_DMA+0x52>
 800a90c:	7dbb      	ldrb	r3, [r7, #22]
 800a90e:	2b04      	cmp	r3, #4
 800a910:	d002      	beq.n	800a918 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a912:	2302      	movs	r3, #2
 800a914:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a916:	e143      	b.n	800aba0 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d005      	beq.n	800a92a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a924:	887b      	ldrh	r3, [r7, #2]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d102      	bne.n	800a930 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a92e:	e137      	b.n	800aba0 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d003      	beq.n	800a944 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2205      	movs	r2, #5
 800a940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	887a      	ldrh	r2, [r7, #2]
 800a954:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	887a      	ldrh	r2, [r7, #2]
 800a95a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	887a      	ldrh	r2, [r7, #2]
 800a966:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	887a      	ldrh	r2, [r7, #2]
 800a96e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	685a      	ldr	r2, [r3, #4]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800a98c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a996:	d908      	bls.n	800a9aa <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a9a6:	605a      	str	r2, [r3, #4]
 800a9a8:	e06f      	b.n	800aa8a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a9b8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9c4:	d126      	bne.n	800aa14 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10f      	bne.n	800a9f2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a9e0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	085b      	lsrs	r3, r3, #1
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a9f0:	e010      	b.n	800aa14 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa00:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	085b      	lsrs	r3, r3, #1
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa1e:	d134      	bne.n	800aa8a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa2e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d111      	bne.n	800aa64 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa4e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	085b      	lsrs	r3, r3, #1
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800aa62:	e012      	b.n	800aa8a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	685a      	ldr	r2, [r3, #4]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa72:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	085b      	lsrs	r3, r3, #1
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	3301      	adds	r3, #1
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b04      	cmp	r3, #4
 800aa94:	d108      	bne.n	800aaa8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa9a:	4a46      	ldr	r2, [pc, #280]	; (800abb4 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800aa9c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaa2:	4a45      	ldr	r2, [pc, #276]	; (800abb8 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800aaa4:	62da      	str	r2, [r3, #44]	; 0x2c
 800aaa6:	e007      	b.n	800aab8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaac:	4a43      	ldr	r2, [pc, #268]	; (800abbc <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800aaae:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aab4:	4a42      	ldr	r2, [pc, #264]	; (800abc0 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800aab6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aabc:	4a41      	ldr	r2, [pc, #260]	; (800abc4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800aabe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aac4:	2200      	movs	r2, #0
 800aac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	330c      	adds	r3, #12
 800aad2:	4619      	mov	r1, r3
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aae0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800aae2:	f7fd fc55 	bl	8008390 <HAL_DMA_Start_IT>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d008      	beq.n	800aafe <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaf0:	f043 0210 	orr.w	r2, r3, #16
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	75fb      	strb	r3, [r7, #23]

    goto error;
 800aafc:	e050      	b.n	800aba0 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685a      	ldr	r2, [r3, #4]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f042 0201 	orr.w	r2, r2, #1
 800ab0c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab12:	2200      	movs	r2, #0
 800ab14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab22:	2200      	movs	r2, #0
 800ab24:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab36:	4619      	mov	r1, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	330c      	adds	r3, #12
 800ab3e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab44:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ab46:	f7fd fc23 	bl	8008390 <HAL_DMA_Start_IT>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d008      	beq.n	800ab62 <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab54:	f043 0210 	orr.w	r2, r3, #16
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	75fb      	strb	r3, [r7, #23]

    goto error;
 800ab60:	e01e      	b.n	800aba0 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6c:	2b40      	cmp	r3, #64	; 0x40
 800ab6e:	d007      	beq.n	800ab80 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab7e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685a      	ldr	r2, [r3, #4]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f042 0220 	orr.w	r2, r2, #32
 800ab8e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f042 0202 	orr.w	r2, r2, #2
 800ab9e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800aba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	0800af25 	.word	0x0800af25
 800abb8:	0800aded 	.word	0x0800aded
 800abbc:	0800af41 	.word	0x0800af41
 800abc0:	0800ae95 	.word	0x0800ae95
 800abc4:	0800af5d 	.word	0x0800af5d

0800abc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10e      	bne.n	800ac08 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d009      	beq.n	800ac08 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d004      	beq.n	800ac08 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	4798      	blx	r3
    return;
 800ac06:	e0ce      	b.n	800ada6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	f003 0302 	and.w	r3, r3, #2
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d009      	beq.n	800ac26 <HAL_SPI_IRQHandler+0x5e>
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d004      	beq.n	800ac26 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	4798      	blx	r3
    return;
 800ac24:	e0bf      	b.n	800ada6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <HAL_SPI_IRQHandler+0x7e>
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d105      	bne.n	800ac46 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 80b0 	beq.w	800ada6 <HAL_SPI_IRQHandler+0x1de>
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	f003 0320 	and.w	r3, r3, #32
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 80aa 	beq.w	800ada6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d023      	beq.n	800aca4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b03      	cmp	r3, #3
 800ac66:	d011      	beq.n	800ac8c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac6c:	f043 0204 	orr.w	r2, r3, #4
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac74:	2300      	movs	r3, #0
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	617b      	str	r3, [r7, #20]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	e00b      	b.n	800aca4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	613b      	str	r3, [r7, #16]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	613b      	str	r3, [r7, #16]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	613b      	str	r3, [r7, #16]
 800aca0:	693b      	ldr	r3, [r7, #16]
        return;
 800aca2:	e080      	b.n	800ada6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	f003 0320 	and.w	r3, r3, #32
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d014      	beq.n	800acd8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acb2:	f043 0201 	orr.w	r2, r3, #1
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800acba:	2300      	movs	r3, #0
 800acbc:	60fb      	str	r3, [r7, #12]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	60fb      	str	r3, [r7, #12]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00c      	beq.n	800acfc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ace6:	f043 0208 	orr.w	r2, r3, #8
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800acee:	2300      	movs	r3, #0
 800acf0:	60bb      	str	r3, [r7, #8]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	60bb      	str	r3, [r7, #8]
 800acfa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d04f      	beq.n	800ada4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad12:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	f003 0302 	and.w	r3, r3, #2
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d104      	bne.n	800ad30 <HAL_SPI_IRQHandler+0x168>
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d034      	beq.n	800ad9a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f022 0203 	bic.w	r2, r2, #3
 800ad3e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d011      	beq.n	800ad6c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad4c:	4a17      	ldr	r2, [pc, #92]	; (800adac <HAL_SPI_IRQHandler+0x1e4>)
 800ad4e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fd fbf2 	bl	800853e <HAL_DMA_Abort_IT>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d005      	beq.n	800ad6c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d016      	beq.n	800ada2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad78:	4a0c      	ldr	r2, [pc, #48]	; (800adac <HAL_SPI_IRQHandler+0x1e4>)
 800ad7a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fd fbdc 	bl	800853e <HAL_DMA_Abort_IT>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00a      	beq.n	800ada2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ad98:	e003      	b.n	800ada2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7fc fbb8 	bl	8007510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ada0:	e000      	b.n	800ada4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800ada2:	bf00      	nop
    return;
 800ada4:	bf00      	nop
  }
}
 800ada6:	3720      	adds	r7, #32
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	0800af9d 	.word	0x0800af9d

0800adb0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800adfa:	f7fd f8d1 	bl	8007fa0 <HAL_GetTick>
 800adfe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 0320 	and.w	r3, r3, #32
 800ae0a:	2b20      	cmp	r3, #32
 800ae0c:	d03c      	beq.n	800ae88 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f022 0220 	bic.w	r2, r2, #32
 800ae1c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10d      	bne.n	800ae42 <SPI_DMAReceiveCplt+0x56>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae2e:	d108      	bne.n	800ae42 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f022 0203 	bic.w	r2, r2, #3
 800ae3e:	605a      	str	r2, [r3, #4]
 800ae40:	e007      	b.n	800ae52 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f022 0201 	bic.w	r2, r2, #1
 800ae50:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	2164      	movs	r1, #100	; 0x64
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 fade 	bl	800b418 <SPI_EndRxTransaction>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d002      	beq.n	800ae68 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2220      	movs	r2, #32
 800ae66:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d003      	beq.n	800ae88 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f7fc fb45 	bl	8007510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ae86:	e002      	b.n	800ae8e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7ff ff91 	bl	800adb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aea2:	f7fd f87d 	bl	8007fa0 <HAL_GetTick>
 800aea6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0320 	and.w	r3, r3, #32
 800aeb2:	2b20      	cmp	r3, #32
 800aeb4:	d030      	beq.n	800af18 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f022 0220 	bic.w	r2, r2, #32
 800aec4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	2164      	movs	r1, #100	; 0x64
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 fafc 	bl	800b4c8 <SPI_EndRxTxTransaction>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d005      	beq.n	800aee2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeda:	f043 0220 	orr.w	r2, r3, #32
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f022 0203 	bic.w	r2, r2, #3
 800aef0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d003      	beq.n	800af18 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7fc fafd 	bl	8007510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800af16:	e002      	b.n	800af1e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7fc fad7 	bl	80074cc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af30:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f7ff ff46 	bl	800adc4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af38:	bf00      	nop
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f7ff ff42 	bl	800add8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af54:	bf00      	nop
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af68:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f022 0203 	bic.w	r2, r2, #3
 800af78:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af7e:	f043 0210 	orr.w	r2, r3, #16
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7fc fabe 	bl	8007510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af94:	bf00      	nop
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7fc faa9 	bl	8007510 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800afbe:	bf00      	nop
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b082      	sub	sp, #8
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d923      	bls.n	800b022 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68da      	ldr	r2, [r3, #12]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe4:	b292      	uxth	r2, r2
 800afe6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afec:	1c9a      	adds	r2, r3, #2
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aff8:	b29b      	uxth	r3, r3
 800affa:	3b02      	subs	r3, #2
 800affc:	b29a      	uxth	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d11f      	bne.n	800b050 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	685a      	ldr	r2, [r3, #4]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b01e:	605a      	str	r2, [r3, #4]
 800b020:	e016      	b.n	800b050 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f103 020c 	add.w	r2, r3, #12
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	7812      	ldrb	r2, [r2, #0]
 800b030:	b2d2      	uxtb	r2, r2
 800b032:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b044:	b29b      	uxth	r3, r3
 800b046:	3b01      	subs	r3, #1
 800b048:	b29a      	uxth	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b056:	b29b      	uxth	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10f      	bne.n	800b07c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b06a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b070:	b29b      	uxth	r3, r3
 800b072:	2b00      	cmp	r3, #0
 800b074:	d102      	bne.n	800b07c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fa6c 	bl	800b554 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b07c:	bf00      	nop
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b090:	b29b      	uxth	r3, r3
 800b092:	2b01      	cmp	r3, #1
 800b094:	d912      	bls.n	800b0bc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09a:	881a      	ldrh	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a6:	1c9a      	adds	r2, r3, #2
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	3b02      	subs	r3, #2
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b0ba:	e012      	b.n	800b0e2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	330c      	adds	r3, #12
 800b0c6:	7812      	ldrb	r2, [r2, #0]
 800b0c8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ce:	1c5a      	adds	r2, r3, #1
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d110      	bne.n	800b10e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685a      	ldr	r2, [r3, #4]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0fa:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b102:	b29b      	uxth	r3, r3
 800b104:	2b00      	cmp	r3, #0
 800b106:	d102      	bne.n	800b10e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fa23 	bl	800b554 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b10e:	bf00      	nop
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b082      	sub	sp, #8
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68da      	ldr	r2, [r3, #12]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b128:	b292      	uxth	r2, r2
 800b12a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b130:	1c9a      	adds	r2, r3, #2
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	3b01      	subs	r3, #1
 800b140:	b29a      	uxth	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b14e:	b29b      	uxth	r3, r3
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10f      	bne.n	800b174 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b162:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b168:	b29b      	uxth	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f9f0 	bl	800b554 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b174:	bf00      	nop
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b188:	881a      	ldrh	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b194:	1c9a      	adds	r2, r3, #2
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d110      	bne.n	800b1d4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1c0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d102      	bne.n	800b1d4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f9c0 	bl	800b554 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b1d4:	bf00      	nop
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	603b      	str	r3, [r7, #0]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b1ec:	f7fc fed8 	bl	8007fa0 <HAL_GetTick>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	1a9b      	subs	r3, r3, r2
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b1fc:	f7fc fed0 	bl	8007fa0 <HAL_GetTick>
 800b200:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b202:	4b39      	ldr	r3, [pc, #228]	; (800b2e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	015b      	lsls	r3, r3, #5
 800b208:	0d1b      	lsrs	r3, r3, #20
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	fb02 f303 	mul.w	r3, r2, r3
 800b210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b212:	e054      	b.n	800b2be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b21a:	d050      	beq.n	800b2be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b21c:	f7fc fec0 	bl	8007fa0 <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	69fa      	ldr	r2, [r7, #28]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d902      	bls.n	800b232 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d13d      	bne.n	800b2ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b24a:	d111      	bne.n	800b270 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b254:	d004      	beq.n	800b260 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b25e:	d107      	bne.n	800b270 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b26e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b278:	d10f      	bne.n	800b29a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b288:	601a      	str	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e017      	b.n	800b2de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	bf0c      	ite	eq
 800b2ce:	2301      	moveq	r3, #1
 800b2d0:	2300      	movne	r3, #0
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	79fb      	ldrb	r3, [r7, #7]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d19b      	bne.n	800b214 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3720      	adds	r7, #32
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20000128 	.word	0x20000128

0800b2ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08a      	sub	sp, #40	; 0x28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b2fe:	f7fc fe4f 	bl	8007fa0 <HAL_GetTick>
 800b302:	4602      	mov	r2, r0
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	1a9b      	subs	r3, r3, r2
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	4413      	add	r3, r2
 800b30c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b30e:	f7fc fe47 	bl	8007fa0 <HAL_GetTick>
 800b312:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	330c      	adds	r3, #12
 800b31a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b31c:	4b3d      	ldr	r3, [pc, #244]	; (800b414 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	4613      	mov	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	00da      	lsls	r2, r3, #3
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	0d1b      	lsrs	r3, r3, #20
 800b32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b32e:	fb02 f303 	mul.w	r3, r2, r3
 800b332:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b334:	e060      	b.n	800b3f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b33c:	d107      	bne.n	800b34e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d104      	bne.n	800b34e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b354:	d050      	beq.n	800b3f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b356:	f7fc fe23 	bl	8007fa0 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b362:	429a      	cmp	r2, r3
 800b364:	d902      	bls.n	800b36c <SPI_WaitFifoStateUntilTimeout+0x80>
 800b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d13d      	bne.n	800b3e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	685a      	ldr	r2, [r3, #4]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b37a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b384:	d111      	bne.n	800b3aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b38e:	d004      	beq.n	800b39a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b398:	d107      	bne.n	800b3aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3b2:	d10f      	bne.n	800b3d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b3d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e010      	b.n	800b40a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	689a      	ldr	r2, [r3, #8]
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	4013      	ands	r3, r2
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	429a      	cmp	r2, r3
 800b406:	d196      	bne.n	800b336 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3728      	adds	r7, #40	; 0x28
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20000128 	.word	0x20000128

0800b418 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af02      	add	r7, sp, #8
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b42c:	d111      	bne.n	800b452 <SPI_EndRxTransaction+0x3a>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b436:	d004      	beq.n	800b442 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b440:	d107      	bne.n	800b452 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b450:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2200      	movs	r2, #0
 800b45a:	2180      	movs	r1, #128	; 0x80
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f7ff febd 	bl	800b1dc <SPI_WaitFlagStateUntilTimeout>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d007      	beq.n	800b478 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b46c:	f043 0220 	orr.w	r2, r3, #32
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b474:	2303      	movs	r3, #3
 800b476:	e023      	b.n	800b4c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b480:	d11d      	bne.n	800b4be <SPI_EndRxTransaction+0xa6>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b48a:	d004      	beq.n	800b496 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b494:	d113      	bne.n	800b4be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f7ff ff22 	bl	800b2ec <SPI_WaitFifoStateUntilTimeout>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d007      	beq.n	800b4be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4b2:	f043 0220 	orr.w	r2, r3, #32
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e000      	b.n	800b4c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af02      	add	r7, sp, #8
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f7ff ff03 	bl	800b2ec <SPI_WaitFifoStateUntilTimeout>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d007      	beq.n	800b4fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4f0:	f043 0220 	orr.w	r2, r3, #32
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	e027      	b.n	800b54c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	2200      	movs	r2, #0
 800b504:	2180      	movs	r1, #128	; 0x80
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f7ff fe68 	bl	800b1dc <SPI_WaitFlagStateUntilTimeout>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d007      	beq.n	800b522 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b516:	f043 0220 	orr.w	r2, r3, #32
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e014      	b.n	800b54c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2200      	movs	r2, #0
 800b52a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f7ff fedc 	bl	800b2ec <SPI_WaitFifoStateUntilTimeout>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d007      	beq.n	800b54a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b53e:	f043 0220 	orr.w	r2, r3, #32
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	e000      	b.n	800b54c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b55c:	f7fc fd20 	bl	8007fa0 <HAL_GetTick>
 800b560:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f022 0220 	bic.w	r2, r2, #32
 800b570:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	2164      	movs	r1, #100	; 0x64
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7ff ffa6 	bl	800b4c8 <SPI_EndRxTxTransaction>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d005      	beq.n	800b58e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b586:	f043 0220 	orr.w	r2, r3, #32
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b592:	2b00      	cmp	r3, #0
 800b594:	d115      	bne.n	800b5c2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d107      	bne.n	800b5b2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff fc00 	bl	800adb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b5b0:	e00e      	b.n	800b5d0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7fb ff86 	bl	80074cc <HAL_SPI_TxRxCpltCallback>
}
 800b5c0:	e006      	b.n	800b5d0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7fb ffa0 	bl	8007510 <HAL_SPI_ErrorCallback>
}
 800b5d0:	bf00      	nop
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e042      	b.n	800b670 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d106      	bne.n	800b602 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7fc fbdf 	bl	8007dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2224      	movs	r2, #36	; 0x24
 800b606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f022 0201 	bic.w	r2, r2, #1
 800b618:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 feee 	bl	800c404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fbef 	bl	800be0c <UART_SetConfig>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b01      	cmp	r3, #1
 800b632:	d101      	bne.n	800b638 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	e01b      	b.n	800b670 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689a      	ldr	r2, [r3, #8]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f042 0201 	orr.w	r2, r2, #1
 800b666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 ff6d 	bl	800c548 <UART_CheckIdleState>
 800b66e:	4603      	mov	r3, r0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08a      	sub	sp, #40	; 0x28
 800b67c:	af02      	add	r7, sp, #8
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	603b      	str	r3, [r7, #0]
 800b684:	4613      	mov	r3, r2
 800b686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b68e:	2b20      	cmp	r3, #32
 800b690:	d17c      	bne.n	800b78c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <HAL_UART_Transmit+0x26>
 800b698:	88fb      	ldrh	r3, [r7, #6]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e075      	b.n	800b78e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2221      	movs	r2, #33	; 0x21
 800b6ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b6b2:	f7fc fc75 	bl	8007fa0 <HAL_GetTick>
 800b6b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	88fa      	ldrh	r2, [r7, #6]
 800b6bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	88fa      	ldrh	r2, [r7, #6]
 800b6c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6d0:	d108      	bne.n	800b6e4 <HAL_UART_Transmit+0x6c>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d104      	bne.n	800b6e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	61bb      	str	r3, [r7, #24]
 800b6e2:	e003      	b.n	800b6ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b6ec:	e031      	b.n	800b752 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2180      	movs	r1, #128	; 0x80
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 ffcf 	bl	800c69c <UART_WaitOnFlagUntilTimeout>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d005      	beq.n	800b710 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2220      	movs	r2, #32
 800b708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b70c:	2303      	movs	r3, #3
 800b70e:	e03e      	b.n	800b78e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10b      	bne.n	800b72e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	881a      	ldrh	r2, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b722:	b292      	uxth	r2, r2
 800b724:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	3302      	adds	r3, #2
 800b72a:	61bb      	str	r3, [r7, #24]
 800b72c:	e008      	b.n	800b740 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	781a      	ldrb	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	b292      	uxth	r2, r2
 800b738:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	3301      	adds	r3, #1
 800b73e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b746:	b29b      	uxth	r3, r3
 800b748:	3b01      	subs	r3, #1
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1c7      	bne.n	800b6ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2200      	movs	r2, #0
 800b766:	2140      	movs	r1, #64	; 0x40
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f000 ff97 	bl	800c69c <UART_WaitOnFlagUntilTimeout>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2220      	movs	r2, #32
 800b778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b77c:	2303      	movs	r3, #3
 800b77e:	e006      	b.n	800b78e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2220      	movs	r2, #32
 800b784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	e000      	b.n	800b78e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800b78c:	2302      	movs	r3, #2
  }
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3720      	adds	r7, #32
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
	...

0800b798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b0ba      	sub	sp, #232	; 0xe8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	69db      	ldr	r3, [r3, #28]
 800b7a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b7be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b7c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b7cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d11b      	bne.n	800b80c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d8:	f003 0320 	and.w	r3, r3, #32
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d015      	beq.n	800b80c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7e4:	f003 0320 	and.w	r3, r3, #32
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d105      	bne.n	800b7f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d009      	beq.n	800b80c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f000 82e3 	beq.w	800bdc8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	4798      	blx	r3
      }
      return;
 800b80a:	e2dd      	b.n	800bdc8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800b80c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 8123 	beq.w	800ba5c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b816:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b81a:	4b8d      	ldr	r3, [pc, #564]	; (800ba50 <HAL_UART_IRQHandler+0x2b8>)
 800b81c:	4013      	ands	r3, r2
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d106      	bne.n	800b830 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b822:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b826:	4b8b      	ldr	r3, [pc, #556]	; (800ba54 <HAL_UART_IRQHandler+0x2bc>)
 800b828:	4013      	ands	r3, r2
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f000 8116 	beq.w	800ba5c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d011      	beq.n	800b860 <HAL_UART_IRQHandler+0xc8>
 800b83c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00b      	beq.n	800b860 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2201      	movs	r2, #1
 800b84e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b856:	f043 0201 	orr.w	r2, r3, #1
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b864:	f003 0302 	and.w	r3, r3, #2
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d011      	beq.n	800b890 <HAL_UART_IRQHandler+0xf8>
 800b86c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00b      	beq.n	800b890 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2202      	movs	r2, #2
 800b87e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b886:	f043 0204 	orr.w	r2, r3, #4
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b894:	f003 0304 	and.w	r3, r3, #4
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d011      	beq.n	800b8c0 <HAL_UART_IRQHandler+0x128>
 800b89c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8a0:	f003 0301 	and.w	r3, r3, #1
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00b      	beq.n	800b8c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2204      	movs	r2, #4
 800b8ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8b6:	f043 0202 	orr.w	r2, r3, #2
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8c4:	f003 0308 	and.w	r3, r3, #8
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d017      	beq.n	800b8fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8d0:	f003 0320 	and.w	r3, r3, #32
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d105      	bne.n	800b8e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b8d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b8dc:	4b5c      	ldr	r3, [pc, #368]	; (800ba50 <HAL_UART_IRQHandler+0x2b8>)
 800b8de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00b      	beq.n	800b8fc <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2208      	movs	r2, #8
 800b8ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8f2:	f043 0208 	orr.w	r2, r3, #8
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b904:	2b00      	cmp	r3, #0
 800b906:	d012      	beq.n	800b92e <HAL_UART_IRQHandler+0x196>
 800b908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b90c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00c      	beq.n	800b92e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b91c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b924:	f043 0220 	orr.w	r2, r3, #32
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 8249 	beq.w	800bdcc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b93a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b93e:	f003 0320 	and.w	r3, r3, #32
 800b942:	2b00      	cmp	r3, #0
 800b944:	d013      	beq.n	800b96e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b94a:	f003 0320 	and.w	r3, r3, #32
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d105      	bne.n	800b95e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d007      	beq.n	800b96e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b962:	2b00      	cmp	r3, #0
 800b964:	d003      	beq.n	800b96e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b974:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b982:	2b40      	cmp	r3, #64	; 0x40
 800b984:	d005      	beq.n	800b992 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b98a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d054      	beq.n	800ba3c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 fee9 	bl	800c76a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a2:	2b40      	cmp	r3, #64	; 0x40
 800b9a4:	d146      	bne.n	800ba34 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b9b4:	e853 3f00 	ldrex	r3, [r3]
 800b9b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b9bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3308      	adds	r3, #8
 800b9ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b9d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b9d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b9de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b9e2:	e841 2300 	strex	r3, r2, [r1]
 800b9e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b9ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1d9      	bne.n	800b9a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d017      	beq.n	800ba2c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba02:	4a15      	ldr	r2, [pc, #84]	; (800ba58 <HAL_UART_IRQHandler+0x2c0>)
 800ba04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7fc fd96 	bl	800853e <HAL_DMA_Abort_IT>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d019      	beq.n	800ba4c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ba26:	4610      	mov	r0, r2
 800ba28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba2a:	e00f      	b.n	800ba4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7fc fa1b 	bl	8007e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba32:	e00b      	b.n	800ba4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7fc fa17 	bl	8007e68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba3a:	e007      	b.n	800ba4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7fc fa13 	bl	8007e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ba4a:	e1bf      	b.n	800bdcc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba4c:	bf00      	nop
    return;
 800ba4e:	e1bd      	b.n	800bdcc <HAL_UART_IRQHandler+0x634>
 800ba50:	10000001 	.word	0x10000001
 800ba54:	04000120 	.word	0x04000120
 800ba58:	0800c837 	.word	0x0800c837

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	f040 8153 	bne.w	800bd0c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ba66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba6a:	f003 0310 	and.w	r3, r3, #16
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f000 814c 	beq.w	800bd0c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ba74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba78:	f003 0310 	and.w	r3, r3, #16
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f000 8145 	beq.w	800bd0c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2210      	movs	r2, #16
 800ba88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba94:	2b40      	cmp	r3, #64	; 0x40
 800ba96:	f040 80bb 	bne.w	800bc10 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800baa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800baac:	2b00      	cmp	r3, #0
 800baae:	f000 818f 	beq.w	800bdd0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bab8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800babc:	429a      	cmp	r2, r3
 800babe:	f080 8187 	bcs.w	800bdd0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bac8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f003 0320 	and.w	r3, r3, #32
 800bada:	2b00      	cmp	r3, #0
 800badc:	f040 8087 	bne.w	800bbee <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800baec:	e853 3f00 	ldrex	r3, [r3]
 800baf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800baf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800baf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bafc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	461a      	mov	r2, r3
 800bb06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bb0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bb16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb1a:	e841 2300 	strex	r3, r2, [r1]
 800bb1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bb22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1da      	bne.n	800bae0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3308      	adds	r3, #8
 800bb30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb34:	e853 3f00 	ldrex	r3, [r3]
 800bb38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bb3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb3c:	f023 0301 	bic.w	r3, r3, #1
 800bb40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3308      	adds	r3, #8
 800bb4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb5a:	e841 2300 	strex	r3, r2, [r1]
 800bb5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1e1      	bne.n	800bb2a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3308      	adds	r3, #8
 800bb6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb70:	e853 3f00 	ldrex	r3, [r3]
 800bb74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3308      	adds	r3, #8
 800bb86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e3      	bne.n	800bb66 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2220      	movs	r2, #32
 800bba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb4:	e853 3f00 	ldrex	r3, [r3]
 800bbb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bbba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbbc:	f023 0310 	bic.w	r3, r3, #16
 800bbc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bbce:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbd0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bbd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbd6:	e841 2300 	strex	r3, r2, [r1]
 800bbda:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bbdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1e4      	bne.n	800bbac <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fc fc4c 	bl	8008486 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2202      	movs	r2, #2
 800bbf2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f8f3 	bl	800bdf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc0e:	e0df      	b.n	800bdd0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f000 80d1 	beq.w	800bdd4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800bc32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 80cc 	beq.w	800bdd4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	e853 3f00 	ldrex	r3, [r3]
 800bc48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc5e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc66:	e841 2300 	strex	r3, r2, [r1]
 800bc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1e4      	bne.n	800bc3c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3308      	adds	r3, #8
 800bc78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7c:	e853 3f00 	ldrex	r3, [r3]
 800bc80:	623b      	str	r3, [r7, #32]
   return(result);
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc88:	f023 0301 	bic.w	r3, r3, #1
 800bc8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3308      	adds	r3, #8
 800bc96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc9a:	633a      	str	r2, [r7, #48]	; 0x30
 800bc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bca2:	e841 2300 	strex	r3, r2, [r1]
 800bca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1e1      	bne.n	800bc72 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2220      	movs	r2, #32
 800bcb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	e853 3f00 	ldrex	r3, [r3]
 800bcce:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f023 0310 	bic.w	r3, r3, #16
 800bcd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bce4:	61fb      	str	r3, [r7, #28]
 800bce6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce8:	69b9      	ldr	r1, [r7, #24]
 800bcea:	69fa      	ldr	r2, [r7, #28]
 800bcec:	e841 2300 	strex	r3, r2, [r1]
 800bcf0:	617b      	str	r3, [r7, #20]
   return(result);
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1e4      	bne.n	800bcc2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bcfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd02:	4619      	mov	r1, r3
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f875 	bl	800bdf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd0a:	e063      	b.n	800bdd4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bd0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00e      	beq.n	800bd36 <HAL_UART_IRQHandler+0x59e>
 800bd18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d008      	beq.n	800bd36 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bd2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fdc2 	bl	800c8b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd34:	e051      	b.n	800bdda <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bd36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d014      	beq.n	800bd6c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bd42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d105      	bne.n	800bd5a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bd4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d008      	beq.n	800bd6c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d03a      	beq.n	800bdd8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	4798      	blx	r3
    }
    return;
 800bd6a:	e035      	b.n	800bdd8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d009      	beq.n	800bd8c <HAL_UART_IRQHandler+0x5f4>
 800bd78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d003      	beq.n	800bd8c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fd6c 	bl	800c862 <UART_EndTransmit_IT>
    return;
 800bd8a:	e026      	b.n	800bdda <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bd8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d009      	beq.n	800bdac <HAL_UART_IRQHandler+0x614>
 800bd98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d003      	beq.n	800bdac <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fd9b 	bl	800c8e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdaa:	e016      	b.n	800bdda <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bdac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d010      	beq.n	800bdda <HAL_UART_IRQHandler+0x642>
 800bdb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	da0c      	bge.n	800bdda <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fd83 	bl	800c8cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdc6:	e008      	b.n	800bdda <HAL_UART_IRQHandler+0x642>
      return;
 800bdc8:	bf00      	nop
 800bdca:	e006      	b.n	800bdda <HAL_UART_IRQHandler+0x642>
    return;
 800bdcc:	bf00      	nop
 800bdce:	e004      	b.n	800bdda <HAL_UART_IRQHandler+0x642>
      return;
 800bdd0:	bf00      	nop
 800bdd2:	e002      	b.n	800bdda <HAL_UART_IRQHandler+0x642>
      return;
 800bdd4:	bf00      	nop
 800bdd6:	e000      	b.n	800bdda <HAL_UART_IRQHandler+0x642>
    return;
 800bdd8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800bdda:	37e8      	adds	r7, #232	; 0xe8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be10:	b08c      	sub	sp, #48	; 0x30
 800be12:	af00      	add	r7, sp, #0
 800be14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	689a      	ldr	r2, [r3, #8]
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	431a      	orrs	r2, r3
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	431a      	orrs	r2, r3
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	69db      	ldr	r3, [r3, #28]
 800be30:	4313      	orrs	r3, r2
 800be32:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	4baa      	ldr	r3, [pc, #680]	; (800c0e4 <UART_SetConfig+0x2d8>)
 800be3c:	4013      	ands	r3, r2
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	6812      	ldr	r2, [r2, #0]
 800be42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be44:	430b      	orrs	r3, r1
 800be46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	68da      	ldr	r2, [r3, #12]
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	430a      	orrs	r2, r1
 800be5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a9f      	ldr	r2, [pc, #636]	; (800c0e8 <UART_SetConfig+0x2dc>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d004      	beq.n	800be78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be74:	4313      	orrs	r3, r2
 800be76:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800be82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	6812      	ldr	r2, [r2, #0]
 800be8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be8c:	430b      	orrs	r3, r1
 800be8e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be96:	f023 010f 	bic.w	r1, r3, #15
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a90      	ldr	r2, [pc, #576]	; (800c0ec <UART_SetConfig+0x2e0>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d125      	bne.n	800befc <UART_SetConfig+0xf0>
 800beb0:	4b8f      	ldr	r3, [pc, #572]	; (800c0f0 <UART_SetConfig+0x2e4>)
 800beb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beb6:	f003 0303 	and.w	r3, r3, #3
 800beba:	2b03      	cmp	r3, #3
 800bebc:	d81a      	bhi.n	800bef4 <UART_SetConfig+0xe8>
 800bebe:	a201      	add	r2, pc, #4	; (adr r2, 800bec4 <UART_SetConfig+0xb8>)
 800bec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec4:	0800bed5 	.word	0x0800bed5
 800bec8:	0800bee5 	.word	0x0800bee5
 800becc:	0800bedd 	.word	0x0800bedd
 800bed0:	0800beed 	.word	0x0800beed
 800bed4:	2301      	movs	r3, #1
 800bed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800beda:	e116      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bedc:	2302      	movs	r3, #2
 800bede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bee2:	e112      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bee4:	2304      	movs	r3, #4
 800bee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800beea:	e10e      	b.n	800c10a <UART_SetConfig+0x2fe>
 800beec:	2308      	movs	r3, #8
 800beee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bef2:	e10a      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bef4:	2310      	movs	r3, #16
 800bef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800befa:	e106      	b.n	800c10a <UART_SetConfig+0x2fe>
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a7c      	ldr	r2, [pc, #496]	; (800c0f4 <UART_SetConfig+0x2e8>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d138      	bne.n	800bf78 <UART_SetConfig+0x16c>
 800bf06:	4b7a      	ldr	r3, [pc, #488]	; (800c0f0 <UART_SetConfig+0x2e4>)
 800bf08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf0c:	f003 030c 	and.w	r3, r3, #12
 800bf10:	2b0c      	cmp	r3, #12
 800bf12:	d82d      	bhi.n	800bf70 <UART_SetConfig+0x164>
 800bf14:	a201      	add	r2, pc, #4	; (adr r2, 800bf1c <UART_SetConfig+0x110>)
 800bf16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1a:	bf00      	nop
 800bf1c:	0800bf51 	.word	0x0800bf51
 800bf20:	0800bf71 	.word	0x0800bf71
 800bf24:	0800bf71 	.word	0x0800bf71
 800bf28:	0800bf71 	.word	0x0800bf71
 800bf2c:	0800bf61 	.word	0x0800bf61
 800bf30:	0800bf71 	.word	0x0800bf71
 800bf34:	0800bf71 	.word	0x0800bf71
 800bf38:	0800bf71 	.word	0x0800bf71
 800bf3c:	0800bf59 	.word	0x0800bf59
 800bf40:	0800bf71 	.word	0x0800bf71
 800bf44:	0800bf71 	.word	0x0800bf71
 800bf48:	0800bf71 	.word	0x0800bf71
 800bf4c:	0800bf69 	.word	0x0800bf69
 800bf50:	2300      	movs	r3, #0
 800bf52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf56:	e0d8      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bf58:	2302      	movs	r3, #2
 800bf5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf5e:	e0d4      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bf60:	2304      	movs	r3, #4
 800bf62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf66:	e0d0      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bf68:	2308      	movs	r3, #8
 800bf6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf6e:	e0cc      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bf70:	2310      	movs	r3, #16
 800bf72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf76:	e0c8      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a5e      	ldr	r2, [pc, #376]	; (800c0f8 <UART_SetConfig+0x2ec>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d125      	bne.n	800bfce <UART_SetConfig+0x1c2>
 800bf82:	4b5b      	ldr	r3, [pc, #364]	; (800c0f0 <UART_SetConfig+0x2e4>)
 800bf84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bf8c:	2b30      	cmp	r3, #48	; 0x30
 800bf8e:	d016      	beq.n	800bfbe <UART_SetConfig+0x1b2>
 800bf90:	2b30      	cmp	r3, #48	; 0x30
 800bf92:	d818      	bhi.n	800bfc6 <UART_SetConfig+0x1ba>
 800bf94:	2b20      	cmp	r3, #32
 800bf96:	d00a      	beq.n	800bfae <UART_SetConfig+0x1a2>
 800bf98:	2b20      	cmp	r3, #32
 800bf9a:	d814      	bhi.n	800bfc6 <UART_SetConfig+0x1ba>
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <UART_SetConfig+0x19a>
 800bfa0:	2b10      	cmp	r3, #16
 800bfa2:	d008      	beq.n	800bfb6 <UART_SetConfig+0x1aa>
 800bfa4:	e00f      	b.n	800bfc6 <UART_SetConfig+0x1ba>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfac:	e0ad      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bfae:	2302      	movs	r3, #2
 800bfb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfb4:	e0a9      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bfb6:	2304      	movs	r3, #4
 800bfb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfbc:	e0a5      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bfbe:	2308      	movs	r3, #8
 800bfc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfc4:	e0a1      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bfc6:	2310      	movs	r3, #16
 800bfc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfcc:	e09d      	b.n	800c10a <UART_SetConfig+0x2fe>
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a4a      	ldr	r2, [pc, #296]	; (800c0fc <UART_SetConfig+0x2f0>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d125      	bne.n	800c024 <UART_SetConfig+0x218>
 800bfd8:	4b45      	ldr	r3, [pc, #276]	; (800c0f0 <UART_SetConfig+0x2e4>)
 800bfda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bfe2:	2bc0      	cmp	r3, #192	; 0xc0
 800bfe4:	d016      	beq.n	800c014 <UART_SetConfig+0x208>
 800bfe6:	2bc0      	cmp	r3, #192	; 0xc0
 800bfe8:	d818      	bhi.n	800c01c <UART_SetConfig+0x210>
 800bfea:	2b80      	cmp	r3, #128	; 0x80
 800bfec:	d00a      	beq.n	800c004 <UART_SetConfig+0x1f8>
 800bfee:	2b80      	cmp	r3, #128	; 0x80
 800bff0:	d814      	bhi.n	800c01c <UART_SetConfig+0x210>
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <UART_SetConfig+0x1f0>
 800bff6:	2b40      	cmp	r3, #64	; 0x40
 800bff8:	d008      	beq.n	800c00c <UART_SetConfig+0x200>
 800bffa:	e00f      	b.n	800c01c <UART_SetConfig+0x210>
 800bffc:	2300      	movs	r3, #0
 800bffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c002:	e082      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c004:	2302      	movs	r3, #2
 800c006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c00a:	e07e      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c00c:	2304      	movs	r3, #4
 800c00e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c012:	e07a      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c014:	2308      	movs	r3, #8
 800c016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c01a:	e076      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c01c:	2310      	movs	r3, #16
 800c01e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c022:	e072      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a35      	ldr	r2, [pc, #212]	; (800c100 <UART_SetConfig+0x2f4>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d12a      	bne.n	800c084 <UART_SetConfig+0x278>
 800c02e:	4b30      	ldr	r3, [pc, #192]	; (800c0f0 <UART_SetConfig+0x2e4>)
 800c030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c03c:	d01a      	beq.n	800c074 <UART_SetConfig+0x268>
 800c03e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c042:	d81b      	bhi.n	800c07c <UART_SetConfig+0x270>
 800c044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c048:	d00c      	beq.n	800c064 <UART_SetConfig+0x258>
 800c04a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c04e:	d815      	bhi.n	800c07c <UART_SetConfig+0x270>
 800c050:	2b00      	cmp	r3, #0
 800c052:	d003      	beq.n	800c05c <UART_SetConfig+0x250>
 800c054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c058:	d008      	beq.n	800c06c <UART_SetConfig+0x260>
 800c05a:	e00f      	b.n	800c07c <UART_SetConfig+0x270>
 800c05c:	2300      	movs	r3, #0
 800c05e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c062:	e052      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c064:	2302      	movs	r3, #2
 800c066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c06a:	e04e      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c06c:	2304      	movs	r3, #4
 800c06e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c072:	e04a      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c074:	2308      	movs	r3, #8
 800c076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c07a:	e046      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c07c:	2310      	movs	r3, #16
 800c07e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c082:	e042      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a17      	ldr	r2, [pc, #92]	; (800c0e8 <UART_SetConfig+0x2dc>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d13a      	bne.n	800c104 <UART_SetConfig+0x2f8>
 800c08e:	4b18      	ldr	r3, [pc, #96]	; (800c0f0 <UART_SetConfig+0x2e4>)
 800c090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c094:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c09c:	d01a      	beq.n	800c0d4 <UART_SetConfig+0x2c8>
 800c09e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0a2:	d81b      	bhi.n	800c0dc <UART_SetConfig+0x2d0>
 800c0a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0a8:	d00c      	beq.n	800c0c4 <UART_SetConfig+0x2b8>
 800c0aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0ae:	d815      	bhi.n	800c0dc <UART_SetConfig+0x2d0>
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d003      	beq.n	800c0bc <UART_SetConfig+0x2b0>
 800c0b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0b8:	d008      	beq.n	800c0cc <UART_SetConfig+0x2c0>
 800c0ba:	e00f      	b.n	800c0dc <UART_SetConfig+0x2d0>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0c2:	e022      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0ca:	e01e      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c0cc:	2304      	movs	r3, #4
 800c0ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0d2:	e01a      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c0d4:	2308      	movs	r3, #8
 800c0d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0da:	e016      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c0dc:	2310      	movs	r3, #16
 800c0de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0e2:	e012      	b.n	800c10a <UART_SetConfig+0x2fe>
 800c0e4:	cfff69f3 	.word	0xcfff69f3
 800c0e8:	40008000 	.word	0x40008000
 800c0ec:	40013800 	.word	0x40013800
 800c0f0:	40021000 	.word	0x40021000
 800c0f4:	40004400 	.word	0x40004400
 800c0f8:	40004800 	.word	0x40004800
 800c0fc:	40004c00 	.word	0x40004c00
 800c100:	40005000 	.word	0x40005000
 800c104:	2310      	movs	r3, #16
 800c106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4aae      	ldr	r2, [pc, #696]	; (800c3c8 <UART_SetConfig+0x5bc>)
 800c110:	4293      	cmp	r3, r2
 800c112:	f040 8097 	bne.w	800c244 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c116:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c11a:	2b08      	cmp	r3, #8
 800c11c:	d823      	bhi.n	800c166 <UART_SetConfig+0x35a>
 800c11e:	a201      	add	r2, pc, #4	; (adr r2, 800c124 <UART_SetConfig+0x318>)
 800c120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c124:	0800c149 	.word	0x0800c149
 800c128:	0800c167 	.word	0x0800c167
 800c12c:	0800c151 	.word	0x0800c151
 800c130:	0800c167 	.word	0x0800c167
 800c134:	0800c157 	.word	0x0800c157
 800c138:	0800c167 	.word	0x0800c167
 800c13c:	0800c167 	.word	0x0800c167
 800c140:	0800c167 	.word	0x0800c167
 800c144:	0800c15f 	.word	0x0800c15f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c148:	f7fd fc64 	bl	8009a14 <HAL_RCC_GetPCLK1Freq>
 800c14c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c14e:	e010      	b.n	800c172 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c150:	4b9e      	ldr	r3, [pc, #632]	; (800c3cc <UART_SetConfig+0x5c0>)
 800c152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c154:	e00d      	b.n	800c172 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c156:	f7fd fbc5 	bl	80098e4 <HAL_RCC_GetSysClockFreq>
 800c15a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c15c:	e009      	b.n	800c172 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c15e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c164:	e005      	b.n	800c172 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c166:	2300      	movs	r3, #0
 800c168:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 8130 	beq.w	800c3da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17e:	4a94      	ldr	r2, [pc, #592]	; (800c3d0 <UART_SetConfig+0x5c4>)
 800c180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c184:	461a      	mov	r2, r3
 800c186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c188:	fbb3 f3f2 	udiv	r3, r3, r2
 800c18c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	685a      	ldr	r2, [r3, #4]
 800c192:	4613      	mov	r3, r2
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	4413      	add	r3, r2
 800c198:	69ba      	ldr	r2, [r7, #24]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d305      	bcc.n	800c1aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c1a4:	69ba      	ldr	r2, [r7, #24]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d903      	bls.n	800c1b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c1b0:	e113      	b.n	800c3da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	60bb      	str	r3, [r7, #8]
 800c1b8:	60fa      	str	r2, [r7, #12]
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1be:	4a84      	ldr	r2, [pc, #528]	; (800c3d0 <UART_SetConfig+0x5c4>)
 800c1c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	603b      	str	r3, [r7, #0]
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c1d4:	f7f4 fcba 	bl	8000b4c <__aeabi_uldivmod>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	460b      	mov	r3, r1
 800c1dc:	4610      	mov	r0, r2
 800c1de:	4619      	mov	r1, r3
 800c1e0:	f04f 0200 	mov.w	r2, #0
 800c1e4:	f04f 0300 	mov.w	r3, #0
 800c1e8:	020b      	lsls	r3, r1, #8
 800c1ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c1ee:	0202      	lsls	r2, r0, #8
 800c1f0:	6979      	ldr	r1, [r7, #20]
 800c1f2:	6849      	ldr	r1, [r1, #4]
 800c1f4:	0849      	lsrs	r1, r1, #1
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	460c      	mov	r4, r1
 800c1fa:	4605      	mov	r5, r0
 800c1fc:	eb12 0804 	adds.w	r8, r2, r4
 800c200:	eb43 0905 	adc.w	r9, r3, r5
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	469a      	mov	sl, r3
 800c20c:	4693      	mov	fp, r2
 800c20e:	4652      	mov	r2, sl
 800c210:	465b      	mov	r3, fp
 800c212:	4640      	mov	r0, r8
 800c214:	4649      	mov	r1, r9
 800c216:	f7f4 fc99 	bl	8000b4c <__aeabi_uldivmod>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4613      	mov	r3, r2
 800c220:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c222:	6a3b      	ldr	r3, [r7, #32]
 800c224:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c228:	d308      	bcc.n	800c23c <UART_SetConfig+0x430>
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c230:	d204      	bcs.n	800c23c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	6a3a      	ldr	r2, [r7, #32]
 800c238:	60da      	str	r2, [r3, #12]
 800c23a:	e0ce      	b.n	800c3da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c23c:	2301      	movs	r3, #1
 800c23e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c242:	e0ca      	b.n	800c3da <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	69db      	ldr	r3, [r3, #28]
 800c248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c24c:	d166      	bne.n	800c31c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c24e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c252:	2b08      	cmp	r3, #8
 800c254:	d827      	bhi.n	800c2a6 <UART_SetConfig+0x49a>
 800c256:	a201      	add	r2, pc, #4	; (adr r2, 800c25c <UART_SetConfig+0x450>)
 800c258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25c:	0800c281 	.word	0x0800c281
 800c260:	0800c289 	.word	0x0800c289
 800c264:	0800c291 	.word	0x0800c291
 800c268:	0800c2a7 	.word	0x0800c2a7
 800c26c:	0800c297 	.word	0x0800c297
 800c270:	0800c2a7 	.word	0x0800c2a7
 800c274:	0800c2a7 	.word	0x0800c2a7
 800c278:	0800c2a7 	.word	0x0800c2a7
 800c27c:	0800c29f 	.word	0x0800c29f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c280:	f7fd fbc8 	bl	8009a14 <HAL_RCC_GetPCLK1Freq>
 800c284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c286:	e014      	b.n	800c2b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c288:	f7fd fbda 	bl	8009a40 <HAL_RCC_GetPCLK2Freq>
 800c28c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c28e:	e010      	b.n	800c2b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c290:	4b4e      	ldr	r3, [pc, #312]	; (800c3cc <UART_SetConfig+0x5c0>)
 800c292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c294:	e00d      	b.n	800c2b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c296:	f7fd fb25 	bl	80098e4 <HAL_RCC_GetSysClockFreq>
 800c29a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c29c:	e009      	b.n	800c2b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c29e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c2a4:	e005      	b.n	800c2b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c2b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f000 8090 	beq.w	800c3da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2be:	4a44      	ldr	r2, [pc, #272]	; (800c3d0 <UART_SetConfig+0x5c4>)
 800c2c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2cc:	005a      	lsls	r2, r3, #1
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	085b      	lsrs	r3, r3, #1
 800c2d4:	441a      	add	r2, r3
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2e0:	6a3b      	ldr	r3, [r7, #32]
 800c2e2:	2b0f      	cmp	r3, #15
 800c2e4:	d916      	bls.n	800c314 <UART_SetConfig+0x508>
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2ec:	d212      	bcs.n	800c314 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c2ee:	6a3b      	ldr	r3, [r7, #32]
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	f023 030f 	bic.w	r3, r3, #15
 800c2f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	085b      	lsrs	r3, r3, #1
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	f003 0307 	and.w	r3, r3, #7
 800c302:	b29a      	uxth	r2, r3
 800c304:	8bfb      	ldrh	r3, [r7, #30]
 800c306:	4313      	orrs	r3, r2
 800c308:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	8bfa      	ldrh	r2, [r7, #30]
 800c310:	60da      	str	r2, [r3, #12]
 800c312:	e062      	b.n	800c3da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c31a:	e05e      	b.n	800c3da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c31c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c320:	2b08      	cmp	r3, #8
 800c322:	d828      	bhi.n	800c376 <UART_SetConfig+0x56a>
 800c324:	a201      	add	r2, pc, #4	; (adr r2, 800c32c <UART_SetConfig+0x520>)
 800c326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32a:	bf00      	nop
 800c32c:	0800c351 	.word	0x0800c351
 800c330:	0800c359 	.word	0x0800c359
 800c334:	0800c361 	.word	0x0800c361
 800c338:	0800c377 	.word	0x0800c377
 800c33c:	0800c367 	.word	0x0800c367
 800c340:	0800c377 	.word	0x0800c377
 800c344:	0800c377 	.word	0x0800c377
 800c348:	0800c377 	.word	0x0800c377
 800c34c:	0800c36f 	.word	0x0800c36f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c350:	f7fd fb60 	bl	8009a14 <HAL_RCC_GetPCLK1Freq>
 800c354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c356:	e014      	b.n	800c382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c358:	f7fd fb72 	bl	8009a40 <HAL_RCC_GetPCLK2Freq>
 800c35c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c35e:	e010      	b.n	800c382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c360:	4b1a      	ldr	r3, [pc, #104]	; (800c3cc <UART_SetConfig+0x5c0>)
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c364:	e00d      	b.n	800c382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c366:	f7fd fabd 	bl	80098e4 <HAL_RCC_GetSysClockFreq>
 800c36a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c36c:	e009      	b.n	800c382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c36e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c374:	e005      	b.n	800c382 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c376:	2300      	movs	r3, #0
 800c378:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c380:	bf00      	nop
    }

    if (pclk != 0U)
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	2b00      	cmp	r3, #0
 800c386:	d028      	beq.n	800c3da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38c:	4a10      	ldr	r2, [pc, #64]	; (800c3d0 <UART_SetConfig+0x5c4>)
 800c38e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c392:	461a      	mov	r2, r3
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c396:	fbb3 f2f2 	udiv	r2, r3, r2
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	085b      	lsrs	r3, r3, #1
 800c3a0:	441a      	add	r2, r3
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3ac:	6a3b      	ldr	r3, [r7, #32]
 800c3ae:	2b0f      	cmp	r3, #15
 800c3b0:	d910      	bls.n	800c3d4 <UART_SetConfig+0x5c8>
 800c3b2:	6a3b      	ldr	r3, [r7, #32]
 800c3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3b8:	d20c      	bcs.n	800c3d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	60da      	str	r2, [r3, #12]
 800c3c4:	e009      	b.n	800c3da <UART_SetConfig+0x5ce>
 800c3c6:	bf00      	nop
 800c3c8:	40008000 	.word	0x40008000
 800c3cc:	00f42400 	.word	0x00f42400
 800c3d0:	0801ac24 	.word	0x0801ac24
      }
      else
      {
        ret = HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c3f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3730      	adds	r7, #48	; 0x30
 800c3fe:	46bd      	mov	sp, r7
 800c400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c410:	f003 0308 	and.w	r3, r3, #8
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00a      	beq.n	800c42e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c432:	f003 0301 	and.w	r3, r3, #1
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c454:	f003 0302 	and.w	r3, r3, #2
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00a      	beq.n	800c472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	430a      	orrs	r2, r1
 800c470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c476:	f003 0304 	and.w	r3, r3, #4
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00a      	beq.n	800c494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	430a      	orrs	r2, r1
 800c492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c498:	f003 0310 	and.w	r3, r3, #16
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00a      	beq.n	800c4b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ba:	f003 0320 	and.w	r3, r3, #32
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00a      	beq.n	800c4d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	689b      	ldr	r3, [r3, #8]
 800c4c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	430a      	orrs	r2, r1
 800c4d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d01a      	beq.n	800c51a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	430a      	orrs	r2, r1
 800c4f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c502:	d10a      	bne.n	800c51a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	430a      	orrs	r2, r1
 800c518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00a      	beq.n	800c53c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	430a      	orrs	r2, r1
 800c53a:	605a      	str	r2, [r3, #4]
  }
}
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b098      	sub	sp, #96	; 0x60
 800c54c:	af02      	add	r7, sp, #8
 800c54e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c558:	f7fb fd22 	bl	8007fa0 <HAL_GetTick>
 800c55c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 0308 	and.w	r3, r3, #8
 800c568:	2b08      	cmp	r3, #8
 800c56a:	d12f      	bne.n	800c5cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c56c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c574:	2200      	movs	r2, #0
 800c576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f88e 	bl	800c69c <UART_WaitOnFlagUntilTimeout>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d022      	beq.n	800c5cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58e:	e853 3f00 	ldrex	r3, [r3]
 800c592:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c59a:	653b      	str	r3, [r7, #80]	; 0x50
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5a4:	647b      	str	r3, [r7, #68]	; 0x44
 800c5a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5ac:	e841 2300 	strex	r3, r2, [r1]
 800c5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1e6      	bne.n	800c586 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2220      	movs	r2, #32
 800c5bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	e063      	b.n	800c694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 0304 	and.w	r3, r3, #4
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	d149      	bne.n	800c66e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f857 	bl	800c69c <UART_WaitOnFlagUntilTimeout>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d03c      	beq.n	800c66e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fc:	e853 3f00 	ldrex	r3, [r3]
 800c600:	623b      	str	r3, [r7, #32]
   return(result);
 800c602:	6a3b      	ldr	r3, [r7, #32]
 800c604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	461a      	mov	r2, r3
 800c610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c612:	633b      	str	r3, [r7, #48]	; 0x30
 800c614:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c61a:	e841 2300 	strex	r3, r2, [r1]
 800c61e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1e6      	bne.n	800c5f4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3308      	adds	r3, #8
 800c62c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	e853 3f00 	ldrex	r3, [r3]
 800c634:	60fb      	str	r3, [r7, #12]
   return(result);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f023 0301 	bic.w	r3, r3, #1
 800c63c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3308      	adds	r3, #8
 800c644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c646:	61fa      	str	r2, [r7, #28]
 800c648:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64a:	69b9      	ldr	r1, [r7, #24]
 800c64c:	69fa      	ldr	r2, [r7, #28]
 800c64e:	e841 2300 	strex	r3, r2, [r1]
 800c652:	617b      	str	r3, [r7, #20]
   return(result);
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1e5      	bne.n	800c626 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2220      	movs	r2, #32
 800c65e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c66a:	2303      	movs	r3, #3
 800c66c:	e012      	b.n	800c694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2220      	movs	r2, #32
 800c672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2220      	movs	r2, #32
 800c67a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3758      	adds	r7, #88	; 0x58
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	603b      	str	r3, [r7, #0]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6ac:	e049      	b.n	800c742 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6b4:	d045      	beq.n	800c742 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6b6:	f7fb fc73 	bl	8007fa0 <HAL_GetTick>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	69ba      	ldr	r2, [r7, #24]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d302      	bcc.n	800c6cc <UART_WaitOnFlagUntilTimeout+0x30>
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c6cc:	2303      	movs	r3, #3
 800c6ce:	e048      	b.n	800c762 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f003 0304 	and.w	r3, r3, #4
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d031      	beq.n	800c742 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	69db      	ldr	r3, [r3, #28]
 800c6e4:	f003 0308 	and.w	r3, r3, #8
 800c6e8:	2b08      	cmp	r3, #8
 800c6ea:	d110      	bne.n	800c70e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2208      	movs	r2, #8
 800c6f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 f838 	bl	800c76a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2208      	movs	r2, #8
 800c6fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e029      	b.n	800c762 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	69db      	ldr	r3, [r3, #28]
 800c714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c71c:	d111      	bne.n	800c742 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f000 f81e 	bl	800c76a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2220      	movs	r2, #32
 800c732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2200      	movs	r2, #0
 800c73a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c73e:	2303      	movs	r3, #3
 800c740:	e00f      	b.n	800c762 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	69da      	ldr	r2, [r3, #28]
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	4013      	ands	r3, r2
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	429a      	cmp	r2, r3
 800c750:	bf0c      	ite	eq
 800c752:	2301      	moveq	r3, #1
 800c754:	2300      	movne	r3, #0
 800c756:	b2db      	uxtb	r3, r3
 800c758:	461a      	mov	r2, r3
 800c75a:	79fb      	ldrb	r3, [r7, #7]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d0a6      	beq.n	800c6ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c76a:	b480      	push	{r7}
 800c76c:	b095      	sub	sp, #84	; 0x54
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c77a:	e853 3f00 	ldrex	r3, [r3]
 800c77e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c786:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	461a      	mov	r2, r3
 800c78e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c790:	643b      	str	r3, [r7, #64]	; 0x40
 800c792:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c798:	e841 2300 	strex	r3, r2, [r1]
 800c79c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1e6      	bne.n	800c772 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ac:	6a3b      	ldr	r3, [r7, #32]
 800c7ae:	e853 3f00 	ldrex	r3, [r3]
 800c7b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7ba:	f023 0301 	bic.w	r3, r3, #1
 800c7be:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	3308      	adds	r3, #8
 800c7c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7d0:	e841 2300 	strex	r3, r2, [r1]
 800c7d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1e3      	bne.n	800c7a4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d118      	bne.n	800c816 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	e853 3f00 	ldrex	r3, [r3]
 800c7f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	f023 0310 	bic.w	r3, r3, #16
 800c7f8:	647b      	str	r3, [r7, #68]	; 0x44
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	461a      	mov	r2, r3
 800c800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c802:	61bb      	str	r3, [r7, #24]
 800c804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c806:	6979      	ldr	r1, [r7, #20]
 800c808:	69ba      	ldr	r2, [r7, #24]
 800c80a:	e841 2300 	strex	r3, r2, [r1]
 800c80e:	613b      	str	r3, [r7, #16]
   return(result);
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1e6      	bne.n	800c7e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2220      	movs	r2, #32
 800c81a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2200      	movs	r2, #0
 800c822:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c82a:	bf00      	nop
 800c82c:	3754      	adds	r7, #84	; 0x54
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b084      	sub	sp, #16
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2200      	movs	r2, #0
 800c848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2200      	movs	r2, #0
 800c850:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f7fb fb07 	bl	8007e68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c85a:	bf00      	nop
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b088      	sub	sp, #32
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	e853 3f00 	ldrex	r3, [r3]
 800c876:	60bb      	str	r3, [r7, #8]
   return(result);
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c87e:	61fb      	str	r3, [r7, #28]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	461a      	mov	r2, r3
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	61bb      	str	r3, [r7, #24]
 800c88a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88c:	6979      	ldr	r1, [r7, #20]
 800c88e:	69ba      	ldr	r2, [r7, #24]
 800c890:	e841 2300 	strex	r3, r2, [r1]
 800c894:	613b      	str	r3, [r7, #16]
   return(result);
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1e6      	bne.n	800c86a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2220      	movs	r2, #32
 800c8a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7ff fa98 	bl	800bde0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8b0:	bf00      	nop
 800c8b2:	3720      	adds	r7, #32
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c8e8:	bf00      	nop
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d002      	beq.n	800c90a <fs_open+0x16>
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d102      	bne.n	800c910 <fs_open+0x1c>
    return ERR_ARG;
 800c90a:	f06f 030f 	mvn.w	r3, #15
 800c90e:	e028      	b.n	800c962 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c910:	4b16      	ldr	r3, [pc, #88]	; (800c96c <fs_open+0x78>)
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	e020      	b.n	800c958 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	4619      	mov	r1, r3
 800c91c:	6838      	ldr	r0, [r7, #0]
 800c91e:	f7f3 fc6f 	bl	8000200 <strcmp>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d114      	bne.n	800c952 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	689a      	ldr	r2, [r3, #8]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	68da      	ldr	r2, [r3, #12]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	68da      	ldr	r2, [r3, #12]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	7c1a      	ldrb	r2, [r3, #16]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	e007      	b.n	800c962 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	60fb      	str	r3, [r7, #12]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1db      	bne.n	800c916 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800c95e:	f06f 0305 	mvn.w	r3, #5
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	0801ba04 	.word	0x0801ba04

0800c970 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800c978:	bf00      	nop
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	1ad3      	subs	r3, r2, r3
}
 800c996:	4618      	mov	r0, r3
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
	...

0800c9a4 <http_add_connection>:
    running out of memory */
static struct http_state *http_connections;

static void
http_add_connection(struct http_state *hs)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  /* add the connection to the list */
  hs->next = http_connections;
 800c9ac:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <http_add_connection+0x24>)
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	601a      	str	r2, [r3, #0]
  http_connections = hs;
 800c9b4:	4a04      	ldr	r2, [pc, #16]	; (800c9c8 <http_add_connection+0x24>)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6013      	str	r3, [r2, #0]
}
 800c9ba:	bf00      	nop
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	200076e4 	.word	0x200076e4

0800c9cc <http_remove_connection>:

static void
http_remove_connection(struct http_state *hs)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* take the connection off the list */
  if (http_connections) {
 800c9d4:	4b14      	ldr	r3, [pc, #80]	; (800ca28 <http_remove_connection+0x5c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d01f      	beq.n	800ca1c <http_remove_connection+0x50>
    if (http_connections == hs) {
 800c9dc:	4b12      	ldr	r3, [pc, #72]	; (800ca28 <http_remove_connection+0x5c>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d104      	bne.n	800c9f0 <http_remove_connection+0x24>
      http_connections = hs->next;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a0f      	ldr	r2, [pc, #60]	; (800ca28 <http_remove_connection+0x5c>)
 800c9ec:	6013      	str	r3, [r2, #0]
          break;
        }
      }
    }
  }
}
 800c9ee:	e015      	b.n	800ca1c <http_remove_connection+0x50>
      for (last = http_connections; last->next != NULL; last = last->next) {
 800c9f0:	4b0d      	ldr	r3, [pc, #52]	; (800ca28 <http_remove_connection+0x5c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	e00d      	b.n	800ca14 <http_remove_connection+0x48>
        if (last->next == hs) {
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d105      	bne.n	800ca0e <http_remove_connection+0x42>
          last->next = hs->next;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	601a      	str	r2, [r3, #0]
          break;
 800ca0a:	bf00      	nop
}
 800ca0c:	e006      	b.n	800ca1c <http_remove_connection+0x50>
      for (last = http_connections; last->next != NULL; last = last->next) {
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	60fb      	str	r3, [r7, #12]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1ed      	bne.n	800c9f8 <http_remove_connection+0x2c>
}
 800ca1c:	bf00      	nop
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	200076e4 	.word	0x200076e4

0800ca2c <http_kill_oldest_connection>:

static void
http_kill_oldest_connection(u8_t ssi_required)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	4603      	mov	r3, r0
 800ca34:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs = http_connections;
 800ca36:	4b16      	ldr	r3, [pc, #88]	; (800ca90 <http_kill_oldest_connection+0x64>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	60fb      	str	r3, [r7, #12]
  struct http_state *hs_free_next = NULL;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	60bb      	str	r3, [r7, #8]
  while (hs && hs->next) {
 800ca40:	e00f      	b.n	800ca62 <http_kill_oldest_connection+0x36>
#if LWIP_HTTPD_SSI
    if (ssi_required) {
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d007      	beq.n	800ca58 <http_kill_oldest_connection+0x2c>
      if (hs->next->ssi != NULL) {
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d004      	beq.n	800ca5c <http_kill_oldest_connection+0x30>
        hs_free_next = hs;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	60bb      	str	r3, [r7, #8]
 800ca56:	e001      	b.n	800ca5c <http_kill_oldest_connection+0x30>
    } else
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(ssi_required);
#endif /* LWIP_HTTPD_SSI */
    {
      hs_free_next = hs;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	60bb      	str	r3, [r7, #8]
    }
    LWIP_ASSERT("broken list", hs != hs->next);
    hs = hs->next;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	60fb      	str	r3, [r7, #12]
  while (hs && hs->next) {
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d003      	beq.n	800ca70 <http_kill_oldest_connection+0x44>
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1e8      	bne.n	800ca42 <http_kill_oldest_connection+0x16>
  }
  if (hs_free_next != NULL) {
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d008      	beq.n	800ca88 <http_kill_oldest_connection+0x5c>
    LWIP_ASSERT("hs_free_next->next != NULL", hs_free_next->next != NULL);
    LWIP_ASSERT("hs_free_next->next->pcb != NULL", hs_free_next->next->pcb != NULL);
    /* send RST when killing a connection because of memory shortage */
    http_close_or_abort_conn(hs_free_next->next->pcb, hs_free_next->next, 1); /* this also unlinks the http_state from the list */
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	6a18      	ldr	r0, [r3, #32]
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2201      	movs	r2, #1
 800ca82:	4619      	mov	r1, r3
 800ca84:	f000 f90e 	bl	800cca4 <http_close_or_abort_conn>
  }
}
 800ca88:	bf00      	nop
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	200076e4 	.word	0x200076e4

0800ca94 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800ca9a:	480e      	ldr	r0, [pc, #56]	; (800cad4 <http_ssi_state_alloc+0x40>)
 800ca9c:	f001 fca5 	bl	800e3ea <memp_malloc_pool>
 800caa0:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED
  if (ret == NULL) {
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d106      	bne.n	800cab6 <http_ssi_state_alloc+0x22>
    http_kill_oldest_connection(1);
 800caa8:	2001      	movs	r0, #1
 800caaa:	f7ff ffbf 	bl	800ca2c <http_kill_oldest_connection>
    ret = HTTP_ALLOC_SSI_STATE();
 800caae:	4809      	ldr	r0, [pc, #36]	; (800cad4 <http_ssi_state_alloc+0x40>)
 800cab0:	f001 fc9b 	bl	800e3ea <memp_malloc_pool>
 800cab4:	6078      	str	r0, [r7, #4]
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d005      	beq.n	800cac8 <http_ssi_state_alloc+0x34>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800cabc:	f44f 5281 	mov.w	r2, #4128	; 0x1020
 800cac0:	2100      	movs	r1, #0
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f00c fdc2 	bl	801964c <memset>
  }
  return ret;
 800cac8:	687b      	ldr	r3, [r7, #4]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	0801ba5c 	.word	0x0801ba5c

0800cad8 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d003      	beq.n	800caee <http_ssi_state_free+0x16>
    HTTP_FREE_SSI_STATE(ssi);
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	4803      	ldr	r0, [pc, #12]	; (800caf8 <http_ssi_state_free+0x20>)
 800caea:	f001 fcb7 	bl	800e45c <memp_free_pool>
  }
}
 800caee:	bf00      	nop
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	0801ba5c 	.word	0x0801ba5c

0800cafc <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800cb04:	2234      	movs	r2, #52	; 0x34
 800cb06:	2100      	movs	r1, #0
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f00c fd9f 	bl	801964c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800cb0e:	bf00      	nop
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
	...

0800cb18 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800cb1e:	480e      	ldr	r0, [pc, #56]	; (800cb58 <http_state_alloc+0x40>)
 800cb20:	f001 fc63 	bl	800e3ea <memp_malloc_pool>
 800cb24:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED
  if (ret == NULL) {
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d106      	bne.n	800cb3a <http_state_alloc+0x22>
    http_kill_oldest_connection(0);
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	f7ff ff7d 	bl	800ca2c <http_kill_oldest_connection>
    ret = HTTP_ALLOC_HTTP_STATE();
 800cb32:	4809      	ldr	r0, [pc, #36]	; (800cb58 <http_state_alloc+0x40>)
 800cb34:	f001 fc59 	bl	800e3ea <memp_malloc_pool>
 800cb38:	6078      	str	r0, [r7, #4]
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d005      	beq.n	800cb4c <http_state_alloc+0x34>
    http_state_init(ret);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f7ff ffdb 	bl	800cafc <http_state_init>
    http_add_connection(ret);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff ff2c 	bl	800c9a4 <http_add_connection>
  }
  return ret;
 800cb4c:	687b      	ldr	r3, [r7, #4]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3708      	adds	r7, #8
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	0801ba54 	.word	0x0801ba54

0800cb5c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d007      	beq.n	800cb7c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff fefd 	bl	800c970 <fs_close>
    hs->handle = NULL;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	619a      	str	r2, [r3, #24]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d007      	beq.n	800cb94 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7ff ffa5 	bl	800cad8 <http_ssi_state_free>
    hs->ssi = NULL;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d007      	beq.n	800cbac <http_state_eof+0x50>
    pbuf_free(hs->req);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba0:	4618      	mov	r0, r3
 800cba2:	f002 f94b 	bl	800ee3c <pbuf_free>
    hs->req = NULL;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800cbac:	bf00      	nop
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d009      	beq.n	800cbd6 <http_state_free+0x22>
    http_state_eof(hs);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff ffca 	bl	800cb5c <http_state_eof>
    http_remove_connection(hs);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7ff feff 	bl	800c9cc <http_remove_connection>
    HTTP_FREE_HTTP_STATE(hs);
 800cbce:	6879      	ldr	r1, [r7, #4]
 800cbd0:	4803      	ldr	r0, [pc, #12]	; (800cbe0 <http_state_free+0x2c>)
 800cbd2:	f001 fc43 	bl	800e45c <memp_free_pool>
  }
}
 800cbd6:	bf00      	nop
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	0801ba54 	.word	0x0801ba54

0800cbe4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	881b      	ldrh	r3, [r3, #0]
 800cbf6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800cbf8:	8afb      	ldrh	r3, [r7, #22]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d101      	bne.n	800cc02 <http_write+0x1e>
    return ERR_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	e04b      	b.n	800cc9a <http_write+0xb6>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cc08:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800cc0a:	8aba      	ldrh	r2, [r7, #20]
 800cc0c:	8afb      	ldrh	r3, [r7, #22]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d201      	bcs.n	800cc16 <http_write+0x32>
    len = max_len;
 800cc12:	8abb      	ldrh	r3, [r7, #20]
 800cc14:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800cc16:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800cc1a:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800cc1c:	8afa      	ldrh	r2, [r7, #22]
 800cc1e:	8abb      	ldrh	r3, [r7, #20]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d901      	bls.n	800cc28 <http_write+0x44>
    len = max_len;
 800cc24:	8abb      	ldrh	r3, [r7, #20]
 800cc26:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800cc28:	78fb      	ldrb	r3, [r7, #3]
 800cc2a:	8afa      	ldrh	r2, [r7, #22]
 800cc2c:	68b9      	ldr	r1, [r7, #8]
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	f006 f8fe 	bl	8012e30 <tcp_write>
 800cc34:	4603      	mov	r3, r0
 800cc36:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800cc38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc40:	d10f      	bne.n	800cc62 <http_write+0x7e>
      if ((altcp_sndbuf(pcb) == 0) ||
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d004      	beq.n	800cc56 <http_write+0x72>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800cc52:	2b0b      	cmp	r3, #11
 800cc54:	d902      	bls.n	800cc5c <http_write+0x78>
        /* no need to try smaller sizes */
        len = 1;
 800cc56:	2301      	movs	r3, #1
 800cc58:	82fb      	strh	r3, [r7, #22]
 800cc5a:	e002      	b.n	800cc62 <http_write+0x7e>
      } else {
        len /= 2;
 800cc5c:	8afb      	ldrh	r3, [r7, #22]
 800cc5e:	085b      	lsrs	r3, r3, #1
 800cc60:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800cc62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc6a:	d102      	bne.n	800cc72 <http_write+0x8e>
 800cc6c:	8afb      	ldrh	r3, [r7, #22]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d8da      	bhi.n	800cc28 <http_write+0x44>

  if (err == ERR_OK) {
 800cc72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d103      	bne.n	800cc82 <http_write+0x9e>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	8afa      	ldrh	r2, [r7, #22]
 800cc7e:	801a      	strh	r2, [r3, #0]
 800cc80:	e002      	b.n	800cc88 <http_write+0xa4>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	801a      	strh	r2, [r3, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	8b5b      	ldrh	r3, [r3, #26]
 800cc8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	835a      	strh	r2, [r3, #26]
#endif

  return err;
 800cc96:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
	...

0800cca4 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f003 fc5b 	bl	8010570 <tcp_arg>
  altcp_recv(pcb, NULL);
 800ccba:	2100      	movs	r1, #0
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f003 fc68 	bl	8010592 <tcp_recv>
  altcp_err(pcb, NULL);
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f003 fc88 	bl	80105da <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ccca:	2200      	movs	r2, #0
 800cccc:	2100      	movs	r1, #0
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f003 fcac 	bl	801062c <tcp_poll>
  altcp_sent(pcb, NULL);
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	f003 fc6d 	bl	80105b6 <tcp_sent>
  if (hs != NULL) {
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d002      	beq.n	800cce8 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800cce2:	68b8      	ldr	r0, [r7, #8]
 800cce4:	f7ff ff66 	bl	800cbb4 <http_state_free>
  }

  if (abort_conn) {
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d004      	beq.n	800ccf8 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f002 fcc8 	bl	800f684 <tcp_abort>
    return ERR_OK;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	e00f      	b.n	800cd18 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f002 fc00 	bl	800f4fe <tcp_close>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800cd02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d004      	beq.n	800cd14 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800cd0a:	2204      	movs	r2, #4
 800cd0c:	4904      	ldr	r1, [pc, #16]	; (800cd20 <http_close_or_abort_conn+0x7c>)
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f003 fc8c 	bl	801062c <tcp_poll>
  }
  return err;
 800cd14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	0800dbcf 	.word	0x0800dbcf

0800cd24 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800cd2e:	2200      	movs	r2, #0
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff ffb6 	bl	800cca4 <http_close_or_abort_conn>
 800cd38:	4603      	mov	r3, r0
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b082      	sub	sp, #8
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
 800cd4a:	6039      	str	r1, [r7, #0]
  /* HTTP/1.1 persistent connection? (Not supported for SSI) */
#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  if (hs->keepalive) {
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d01a      	beq.n	800cd8c <http_eof+0x4a>
    http_remove_connection(hs);
 800cd56:	6838      	ldr	r0, [r7, #0]
 800cd58:	f7ff fe38 	bl	800c9cc <http_remove_connection>

    http_state_eof(hs);
 800cd5c:	6838      	ldr	r0, [r7, #0]
 800cd5e:	f7ff fefd 	bl	800cb5c <http_state_eof>
    http_state_init(hs);
 800cd62:	6838      	ldr	r0, [r7, #0]
 800cd64:	f7ff feca 	bl	800cafc <http_state_init>
    /* restore state: */
    hs->pcb = pcb;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	621a      	str	r2, [r3, #32]
    hs->keepalive = 1;
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    http_add_connection(hs);
 800cd76:	6838      	ldr	r0, [r7, #0]
 800cd78:	f7ff fe14 	bl	800c9a4 <http_add_connection>
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	8b5b      	ldrh	r3, [r3, #26]
 800cd80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	835a      	strh	r2, [r3, #26]
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
  }
}
 800cd8a:	e003      	b.n	800cd94 <http_eof+0x52>
    http_close_conn(pcb, hs);
 800cd8c:	6839      	ldr	r1, [r7, #0]
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7ff ffc8 	bl	800cd24 <http_close_conn>
}
 800cd94:	bf00      	nop
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
  ssi = hs->ssi;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda8:	617b      	str	r3, [r7, #20]
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
  ssi->tag_part = HTTPD_LAST_TAG_PART;
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	3312      	adds	r3, #18
 800cdae:	613b      	str	r3, [r7, #16]
#endif

  if (httpd_ssi_handler
 800cdb0:	4b37      	ldr	r3, [pc, #220]	; (800ce90 <get_tag_insert+0xf4>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d012      	beq.n	800cdde <get_tag_insert+0x42>
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800cdb8:	4b35      	ldr	r3, [pc, #212]	; (800ce90 <get_tag_insert+0xf4>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	697a      	ldr	r2, [r7, #20]
 800cdbe:	f102 011b 	add.w	r1, r2, #27
 800cdc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cdc6:	6938      	ldr	r0, [r7, #16]
 800cdc8:	4798      	blx	r3
 800cdca:	4603      	mov	r3, r0
 800cdcc:	461a      	mov	r2, r3
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	81da      	strh	r2, [r3, #14]
#if LWIP_HTTPD_FILE_STATE
                                              , (hs->handle ? hs->handle->state : NULL)
#endif /* LWIP_HTTPD_FILE_STATE */
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	89db      	ldrh	r3, [r3, #14]
 800cdd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d153      	bne.n	800ce86 <get_tag_insert+0xea>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	3312      	adds	r3, #18
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f3 fa16 	bl	8000214 <strlen>
 800cde8:	4603      	mov	r3, r0
 800cdea:	f640 72e6 	movw	r2, #4070	; 0xfe6
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d81b      	bhi.n	800ce2a <get_tag_insert+0x8e>
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	3312      	adds	r3, #18
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7f3 fa0c 	bl	8000214 <strlen>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b09      	cmp	r3, #9
 800ce00:	d813      	bhi.n	800ce2a <get_tag_insert+0x8e>
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	3312      	adds	r3, #18
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7f3 fa04 	bl	8000214 <strlen>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	f640 72e6 	movw	r2, #4070	; 0xfe6
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d806      	bhi.n	800ce24 <get_tag_insert+0x88>
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	3312      	adds	r3, #18
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7f3 f9fa 	bl	8000214 <strlen>
 800ce20:	4603      	mov	r3, r0
 800ce22:	e003      	b.n	800ce2c <get_tag_insert+0x90>
 800ce24:	f640 73e7 	movw	r3, #4071	; 0xfe7
 800ce28:	e000      	b.n	800ce2c <get_tag_insert+0x90>
 800ce2a:	2309      	movs	r3, #9
 800ce2c:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	331b      	adds	r3, #27
 800ce32:	2212      	movs	r2, #18
 800ce34:	4917      	ldr	r1, [pc, #92]	; (800ce94 <get_tag_insert+0xf8>)
 800ce36:	4618      	mov	r0, r3
 800ce38:	f00c fcb3 	bl	80197a2 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	3312      	adds	r3, #18
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	f00c fcaa 	bl	80197a2 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3312      	adds	r3, #18
 800ce52:	3318      	adds	r3, #24
 800ce54:	697a      	ldr	r2, [r7, #20]
 800ce56:	4413      	add	r3, r2
 800ce58:	3303      	adds	r3, #3
 800ce5a:	2207      	movs	r2, #7
 800ce5c:	490e      	ldr	r1, [pc, #56]	; (800ce98 <get_tag_insert+0xfc>)
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f00c fc9f 	bl	80197a2 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	3319      	adds	r3, #25
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	331b      	adds	r3, #27
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7f3 f9cd 	bl	8000214 <strlen>
 800ce7a:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
  ssi->tag_insert_len = (u16_t)len;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	81da      	strh	r2, [r3, #14]
 800ce84:	e000      	b.n	800ce88 <get_tag_insert+0xec>
          return;
 800ce86:	bf00      	nop
}
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	200076e0 	.word	0x200076e0
 800ce94:	0801a6c0 	.word	0x0801a6c0
 800ce98:	0801a6d4 	.word	0x0801a6d4

0800ce9c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d105      	bne.n	800ceba <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7ff ff46 	bl	800cd42 <http_eof>
    return 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e00f      	b.n	800ceda <http_check_eof+0x3e>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	699b      	ldr	r3, [r3, #24]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7ff fd60 	bl	800c984 <fs_bytes_left>
 800cec4:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	dc05      	bgt.n	800ced8 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800cecc:	6839      	ldr	r1, [r7, #0]
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7ff ff37 	bl	800cd42 <http_eof>
    return 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	e000      	b.n	800ceda <http_check_eof+0x3e>
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ced8:	2301      	movs	r3, #1
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b084      	sub	sp, #16
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
 800ceea:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d803      	bhi.n	800cf04 <http_send_data_nonssi+0x22>
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	e001      	b.n	800cf08 <http_send_data_nonssi+0x26>
 800cf04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf08:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	69d9      	ldr	r1, [r3, #28]
 800cf0e:	f107 020c 	add.w	r2, r7, #12
 800cf12:	2300      	movs	r3, #0
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7ff fe65 	bl	800cbe4 <http_write>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800cf1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10d      	bne.n	800cf42 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800cf26:	2301      	movs	r3, #1
 800cf28:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	69db      	ldr	r3, [r3, #28]
 800cf2e:	89ba      	ldrh	r2, [r7, #12]
 800cf30:	441a      	add	r2, r3
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	61da      	str	r2, [r3, #28]
    hs->left -= len;
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf3a:	89ba      	ldrh	r2, [r7, #12]
 800cf3c:	1a9a      	subs	r2, r3, r2
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  return data_to_send;
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf62:	613b      	str	r3, [r7, #16]
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cf6a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	69db      	ldr	r3, [r3, #28]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	f240 8261 	bls.w	800d43c <http_send_data_ssi+0x4f0>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	69db      	ldr	r3, [r3, #28]
 800cf82:	1ad3      	subs	r3, r2, r3
 800cf84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	dc06      	bgt.n	800cf9a <http_send_data_ssi+0x4e>
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	69db      	ldr	r3, [r3, #28]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	e001      	b.n	800cf9e <http_send_data_ssi+0x52>
 800cf9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf9e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	69d9      	ldr	r1, [r3, #28]
 800cfa4:	f107 020e 	add.w	r2, r7, #14
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7ff fe1a 	bl	800cbe4 <http_write>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800cfb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10d      	bne.n	800cfd8 <http_send_data_ssi+0x8c>
      data_to_send = 1;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	69db      	ldr	r3, [r3, #28]
 800cfc4:	89fa      	ldrh	r2, [r7, #14]
 800cfc6:	441a      	add	r2, r3
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	61da      	str	r2, [r3, #28]
      hs->left -= len;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd0:	89fa      	ldrh	r2, [r7, #14]
 800cfd2:	1a9a      	subs	r2, r3, r2
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f040 822c 	bne.w	800d43c <http_send_data_ssi+0x4f0>
      return data_to_send;
 800cfe4:	7dbb      	ldrb	r3, [r7, #22]
 800cfe6:	e277      	b.n	800d4d8 <http_send_data_ssi+0x58c>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800cfe8:	89fb      	ldrh	r3, [r7, #14]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <http_send_data_ssi+0xa6>
      return data_to_send;
 800cfee:	7dbb      	ldrb	r3, [r7, #22]
 800cff0:	e272      	b.n	800d4d8 <http_send_data_ssi+0x58c>
    }
    switch (ssi->tag_state) {
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cff8:	7f1b      	ldrb	r3, [r3, #28]
 800cffa:	2b04      	cmp	r3, #4
 800cffc:	f200 821d 	bhi.w	800d43a <http_send_data_ssi+0x4ee>
 800d000:	a201      	add	r2, pc, #4	; (adr r2, 800d008 <http_send_data_ssi+0xbc>)
 800d002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d006:	bf00      	nop
 800d008:	0800d01d 	.word	0x0800d01d
 800d00c:	0800d071 	.word	0x0800d071
 800d010:	0800d0e7 	.word	0x0800d0e7
 800d014:	0800d20f 	.word	0x0800d20f
 800d018:	0800d35f 	.word	0x0800d35f
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800d01c:	2300      	movs	r3, #0
 800d01e:	757b      	strb	r3, [r7, #21]
 800d020:	e018      	b.n	800d054 <http_send_data_ssi+0x108>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	781a      	ldrb	r2, [r3, #0]
 800d028:	7d7b      	ldrb	r3, [r7, #21]
 800d02a:	498a      	ldr	r1, [pc, #552]	; (800d254 <http_send_data_ssi+0x308>)
 800d02c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	429a      	cmp	r2, r3
 800d034:	d10b      	bne.n	800d04e <http_send_data_ssi+0x102>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	7d7a      	ldrb	r2, [r7, #21]
 800d03a:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d042:	2201      	movs	r2, #1
 800d044:	771a      	strb	r2, [r3, #28]
            ssi->tag_index = 1;
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	2201      	movs	r2, #1
 800d04a:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800d04c:	e005      	b.n	800d05a <http_send_data_ssi+0x10e>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800d04e:	7d7b      	ldrb	r3, [r7, #21]
 800d050:	3301      	adds	r3, #1
 800d052:	757b      	strb	r3, [r7, #21]
 800d054:	7d7b      	ldrb	r3, [r7, #21]
 800d056:	2b01      	cmp	r3, #1
 800d058:	d9e3      	bls.n	800d022 <http_send_data_ssi+0xd6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	1e5a      	subs	r2, r3, #1
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	1c5a      	adds	r2, r3, #1
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	601a      	str	r2, [r3, #0]
        break;
 800d06e:	e1e5      	b.n	800d43c <http_send_data_ssi+0x4f0>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	7c1b      	ldrb	r3, [r3, #16]
 800d074:	461a      	mov	r2, r3
 800d076:	4b77      	ldr	r3, [pc, #476]	; (800d254 <http_send_data_ssi+0x308>)
 800d078:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800d07c:	693a      	ldr	r2, [r7, #16]
 800d07e:	8992      	ldrh	r2, [r2, #12]
 800d080:	4413      	add	r3, r2
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d108      	bne.n	800d09a <http_send_data_ssi+0x14e>
          ssi->tag_index = 0;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	2200      	movs	r2, #0
 800d08c:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d094:	2202      	movs	r2, #2
 800d096:	771a      	strb	r2, [r3, #28]
 800d098:	e1d0      	b.n	800d43c <http_send_data_ssi+0x4f0>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	781a      	ldrb	r2, [r3, #0]
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	7c1b      	ldrb	r3, [r3, #16]
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	4b6b      	ldr	r3, [pc, #428]	; (800d254 <http_send_data_ssi+0x308>)
 800d0a8:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800d0ac:	6939      	ldr	r1, [r7, #16]
 800d0ae:	8989      	ldrh	r1, [r1, #12]
 800d0b0:	440b      	add	r3, r1
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d106      	bne.n	800d0c6 <http_send_data_ssi+0x17a>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	899b      	ldrh	r3, [r3, #12]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	819a      	strh	r2, [r3, #12]
 800d0c4:	e004      	b.n	800d0d0 <http_send_data_ssi+0x184>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	771a      	strb	r2, [r3, #28]
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	1e5a      	subs	r2, r3, #1
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	601a      	str	r2, [r3, #0]
        }
        break;
 800d0e4:	e1aa      	b.n	800d43c <http_send_data_ssi+0x4f0>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	899b      	ldrh	r3, [r3, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d11e      	bne.n	800d12c <http_send_data_ssi+0x1e0>
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	2b20      	cmp	r3, #32
 800d0f6:	d00e      	beq.n	800d116 <http_send_data_ssi+0x1ca>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800d0fe:	2b09      	cmp	r3, #9
 800d100:	d009      	beq.n	800d116 <http_send_data_ssi+0x1ca>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b0a      	cmp	r3, #10
 800d10a:	d004      	beq.n	800d116 <http_send_data_ssi+0x1ca>
                                      (*ssi->parsed == '\r'))) {
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d112:	2b0d      	cmp	r3, #13
 800d114:	d10a      	bne.n	800d12c <http_send_data_ssi+0x1e0>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	689b      	ldr	r3, [r3, #8]
 800d11a:	1e5a      	subs	r2, r3, #1
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	1c5a      	adds	r2, r3, #1
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	601a      	str	r2, [r3, #0]
          break;
 800d12a:	e187      	b.n	800d43c <http_send_data_ssi+0x4f0>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	781a      	ldrb	r2, [r3, #0]
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	7c1b      	ldrb	r3, [r3, #16]
 800d136:	4947      	ldr	r1, [pc, #284]	; (800d254 <http_send_data_ssi+0x308>)
 800d138:	00db      	lsls	r3, r3, #3
 800d13a:	440b      	add	r3, r1
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	429a      	cmp	r2, r3
 800d142:	d013      	beq.n	800d16c <http_send_data_ssi+0x220>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800d14a:	2b20      	cmp	r3, #32
 800d14c:	d00e      	beq.n	800d16c <http_send_data_ssi+0x220>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	2b09      	cmp	r3, #9
 800d156:	d009      	beq.n	800d16c <http_send_data_ssi+0x220>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800d15e:	2b0a      	cmp	r3, #10
 800d160:	d004      	beq.n	800d16c <http_send_data_ssi+0x220>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	2b0d      	cmp	r3, #13
 800d16a:	d12e      	bne.n	800d1ca <http_send_data_ssi+0x27e>

          if (ssi->tag_index == 0) {
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	899b      	ldrh	r3, [r3, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d105      	bne.n	800d180 <http_send_data_ssi+0x234>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d17a:	2200      	movs	r2, #0
 800d17c:	771a      	strb	r2, [r3, #28]
          if (ssi->tag_index == 0) {
 800d17e:	e03b      	b.n	800d1f8 <http_send_data_ssi+0x2ac>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d186:	2203      	movs	r2, #3
 800d188:	771a      	strb	r2, [r3, #28]
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	899b      	ldrh	r3, [r3, #12]
 800d18e:	b2da      	uxtb	r2, r3
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	899b      	ldrh	r3, [r3, #12]
 800d198:	461a      	mov	r2, r3
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	4413      	add	r3, r2
 800d19e:	2200      	movs	r2, #0
 800d1a0:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	781a      	ldrb	r2, [r3, #0]
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	7c1b      	ldrb	r3, [r3, #16]
 800d1ac:	4929      	ldr	r1, [pc, #164]	; (800d254 <http_send_data_ssi+0x308>)
 800d1ae:	00db      	lsls	r3, r3, #3
 800d1b0:	440b      	add	r3, r1
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d103      	bne.n	800d1c2 <http_send_data_ssi+0x276>
              ssi->tag_index = 1;
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800d1c0:	e01a      	b.n	800d1f8 <http_send_data_ssi+0x2ac>
            } else {
              ssi->tag_index = 0;
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800d1c8:	e016      	b.n	800d1f8 <http_send_data_ssi+0x2ac>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	899b      	ldrh	r3, [r3, #12]
 800d1ce:	2b07      	cmp	r3, #7
 800d1d0:	d80d      	bhi.n	800d1ee <http_send_data_ssi+0x2a2>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	899b      	ldrh	r3, [r3, #12]
 800d1da:	1c59      	adds	r1, r3, #1
 800d1dc:	b288      	uxth	r0, r1
 800d1de:	6939      	ldr	r1, [r7, #16]
 800d1e0:	8188      	strh	r0, [r1, #12]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	7812      	ldrb	r2, [r2, #0]
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	440b      	add	r3, r1
 800d1ea:	749a      	strb	r2, [r3, #18]
 800d1ec:	e004      	b.n	800d1f8 <http_send_data_ssi+0x2ac>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	771a      	strb	r2, [r3, #28]
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	1e5a      	subs	r2, r3, #1
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	1c5a      	adds	r2, r3, #1
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	601a      	str	r2, [r3, #0]

        break;
 800d20c:	e116      	b.n	800d43c <http_send_data_ssi+0x4f0>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	899b      	ldrh	r3, [r3, #12]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d120      	bne.n	800d258 <http_send_data_ssi+0x30c>
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	2b20      	cmp	r3, #32
 800d21e:	d00e      	beq.n	800d23e <http_send_data_ssi+0x2f2>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800d226:	2b09      	cmp	r3, #9
 800d228:	d009      	beq.n	800d23e <http_send_data_ssi+0x2f2>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b0a      	cmp	r3, #10
 800d232:	d004      	beq.n	800d23e <http_send_data_ssi+0x2f2>
                                      (*ssi->parsed == '\r'))) {
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d23a:	2b0d      	cmp	r3, #13
 800d23c:	d10c      	bne.n	800d258 <http_send_data_ssi+0x30c>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	1e5a      	subs	r2, r3, #1
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	601a      	str	r2, [r3, #0]
          break;
 800d252:	e0f3      	b.n	800d43c <http_send_data_ssi+0x4f0>
 800d254:	0801ba64 	.word	0x0801ba64
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	781a      	ldrb	r2, [r3, #0]
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	7c1b      	ldrb	r3, [r3, #16]
 800d262:	498c      	ldr	r1, [pc, #560]	; (800d494 <http_send_data_ssi+0x548>)
 800d264:	00db      	lsls	r3, r3, #3
 800d266:	440b      	add	r3, r1
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	6939      	ldr	r1, [r7, #16]
 800d26c:	8989      	ldrh	r1, [r1, #12]
 800d26e:	440b      	add	r3, r1
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	429a      	cmp	r2, r3
 800d274:	d163      	bne.n	800d33e <http_send_data_ssi+0x3f2>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	1e5a      	subs	r2, r3, #1
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	1c5a      	adds	r2, r3, #1
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	899b      	ldrh	r3, [r3, #12]
 800d28e:	3301      	adds	r3, #1
 800d290:	b29a      	uxth	r2, r3
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	7c1b      	ldrb	r3, [r3, #16]
 800d29a:	4a7e      	ldr	r2, [pc, #504]	; (800d494 <http_send_data_ssi+0x548>)
 800d29c:	00db      	lsls	r3, r3, #3
 800d29e:	4413      	add	r3, r2
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	693a      	ldr	r2, [r7, #16]
 800d2a4:	8992      	ldrh	r2, [r2, #12]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f040 80c6 	bne.w	800d43c <http_send_data_ssi+0x4f0>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800d2b0:	6838      	ldr	r0, [r7, #0]
 800d2b2:	f7ff fd73 	bl	800cd9c <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2c2:	2204      	movs	r2, #4
 800d2c4:	771a      	strb	r2, [r3, #28]
            ssi->tag_end = ssi->parsed;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	685a      	ldr	r2, [r3, #4]
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	69db      	ldr	r3, [r3, #28]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	f240 80b0 	bls.w	800d43c <http_send_data_ssi+0x4f0>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	69db      	ldr	r3, [r3, #28]
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	dc06      	bgt.n	800d2fc <http_send_data_ssi+0x3b0>
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	685a      	ldr	r2, [r3, #4]
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	69db      	ldr	r3, [r3, #28]
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	e001      	b.n	800d300 <http_send_data_ssi+0x3b4>
 800d2fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d300:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	69d9      	ldr	r1, [r3, #28]
 800d306:	f107 020e 	add.w	r2, r7, #14
 800d30a:	2300      	movs	r3, #0
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7ff fc69 	bl	800cbe4 <http_write>
 800d312:	4603      	mov	r3, r0
 800d314:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800d316:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f040 808e 	bne.w	800d43c <http_send_data_ssi+0x4f0>
                data_to_send = 1;
 800d320:	2301      	movs	r3, #1
 800d322:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	89fa      	ldrh	r2, [r7, #14]
 800d32a:	441a      	add	r2, r3
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	61da      	str	r2, [r3, #28]
                hs->left -= len;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d334:	89fa      	ldrh	r2, [r7, #14]
 800d336:	1a9a      	subs	r2, r3, r2
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	629a      	str	r2, [r3, #40]	; 0x28
 800d33c:	e07e      	b.n	800d43c <http_send_data_ssi+0x4f0>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	1e5a      	subs	r2, r3, #1
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	1c5a      	adds	r2, r3, #1
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d358:	2200      	movs	r2, #0
 800d35a:	771a      	strb	r2, [r3, #28]
        }
        break;
 800d35c:	e06e      	b.n	800d43c <http_send_data_ssi+0x4f0>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	685a      	ldr	r2, [r3, #4]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	69db      	ldr	r3, [r3, #28]
 800d366:	429a      	cmp	r2, r3
 800d368:	d935      	bls.n	800d3d6 <http_send_data_ssi+0x48a>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	1ad3      	subs	r3, r2, r3
 800d374:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d378:	4293      	cmp	r3, r2
 800d37a:	dc06      	bgt.n	800d38a <http_send_data_ssi+0x43e>
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	685a      	ldr	r2, [r3, #4]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	69db      	ldr	r3, [r3, #28]
 800d384:	1ad3      	subs	r3, r2, r3
 800d386:	b29b      	uxth	r3, r3
 800d388:	e001      	b.n	800d38e <http_send_data_ssi+0x442>
 800d38a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d38e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800d390:	89fb      	ldrh	r3, [r7, #14]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00a      	beq.n	800d3ac <http_send_data_ssi+0x460>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	69d9      	ldr	r1, [r3, #28]
 800d39a:	f107 020e 	add.w	r2, r7, #14
 800d39e:	2300      	movs	r3, #0
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff fc1f 	bl	800cbe4 <http_write>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	75fb      	strb	r3, [r7, #23]
 800d3aa:	e001      	b.n	800d3b0 <http_send_data_ssi+0x464>
          } else {
            err = ERR_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800d3b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d141      	bne.n	800d43c <http_send_data_ssi+0x4f0>
            data_to_send = 1;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	69db      	ldr	r3, [r3, #28]
 800d3c0:	89fa      	ldrh	r2, [r7, #14]
 800d3c2:	441a      	add	r2, r3
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	61da      	str	r2, [r3, #28]
            hs->left -= len;
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3cc:	89fa      	ldrh	r2, [r7, #14]
 800d3ce:	1a9a      	subs	r2, r3, r2
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	629a      	str	r2, [r3, #40]	; 0x28
 800d3d4:	e032      	b.n	800d43c <http_send_data_ssi+0x4f0>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	899a      	ldrh	r2, [r3, #12]
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	89db      	ldrh	r3, [r3, #14]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d222      	bcs.n	800d428 <http_send_data_ssi+0x4dc>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	89da      	ldrh	r2, [r3, #14]
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	899b      	ldrh	r3, [r3, #12]
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	899b      	ldrh	r3, [r3, #12]
 800d3f4:	3318      	adds	r3, #24
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	1cd9      	adds	r1, r3, #3
 800d3fc:	f107 020e 	add.w	r2, r7, #14
 800d400:	2301      	movs	r3, #1
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f7ff fbee 	bl	800cbe4 <http_write>
 800d408:	4603      	mov	r3, r0
 800d40a:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800d40c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d113      	bne.n	800d43c <http_send_data_ssi+0x4f0>
              data_to_send = 1;
 800d414:	2301      	movs	r3, #1
 800d416:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	899a      	ldrh	r2, [r3, #12]
 800d41c:	89fb      	ldrh	r3, [r7, #14]
 800d41e:	4413      	add	r3, r2
 800d420:	b29a      	uxth	r2, r3
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	819a      	strh	r2, [r3, #12]
 800d426:	e009      	b.n	800d43c <http_send_data_ssi+0x4f0>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	2200      	movs	r2, #0
 800d42c:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d434:	2200      	movs	r2, #0
 800d436:	771a      	strb	r2, [r3, #28]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800d438:	e000      	b.n	800d43c <http_send_data_ssi+0x4f0>
        default:
          break;
 800d43a:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d442:	7f1b      	ldrb	r3, [r3, #28]
 800d444:	2b04      	cmp	r3, #4
 800d446:	d003      	beq.n	800d450 <http_send_data_ssi+0x504>
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	689b      	ldr	r3, [r3, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d004      	beq.n	800d45a <http_send_data_ssi+0x50e>
 800d450:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d454:	2b00      	cmp	r3, #0
 800d456:	f43f adc7 	beq.w	800cfe8 <http_send_data_ssi+0x9c>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d460:	7f1b      	ldrb	r3, [r3, #28]
 800d462:	2b04      	cmp	r3, #4
 800d464:	d037      	beq.n	800d4d6 <http_send_data_ssi+0x58a>
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	69db      	ldr	r3, [r3, #28]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d931      	bls.n	800d4d6 <http_send_data_ssi+0x58a>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	69db      	ldr	r3, [r3, #28]
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d480:	4293      	cmp	r3, r2
 800d482:	dc09      	bgt.n	800d498 <http_send_data_ssi+0x54c>
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	69db      	ldr	r3, [r3, #28]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	b29b      	uxth	r3, r3
 800d490:	e004      	b.n	800d49c <http_send_data_ssi+0x550>
 800d492:	bf00      	nop
 800d494:	0801ba64 	.word	0x0801ba64
 800d498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d49c:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	69d9      	ldr	r1, [r3, #28]
 800d4a2:	f107 020e 	add.w	r2, r7, #14
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7ff fb9b 	bl	800cbe4 <http_write>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800d4b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d10d      	bne.n	800d4d6 <http_send_data_ssi+0x58a>
      data_to_send = 1;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	69db      	ldr	r3, [r3, #28]
 800d4c2:	89fa      	ldrh	r2, [r7, #14]
 800d4c4:	441a      	add	r2, r3
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	61da      	str	r2, [r3, #28]
      hs->left -= len;
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ce:	89fa      	ldrh	r2, [r7, #14]
 800d4d0:	1a9a      	subs	r2, r3, r2
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  return data_to_send;
 800d4d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3718      	adds	r7, #24
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d101      	bne.n	800d4f8 <http_send+0x18>
    return 0;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	e030      	b.n	800d55a <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d108      	bne.n	800d512 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800d500:	6839      	ldr	r1, [r7, #0]
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f7ff fcca 	bl	800ce9c <http_check_eof>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d101      	bne.n	800d512 <http_send+0x32>
      return 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	e023      	b.n	800d55a <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d516:	2b00      	cmp	r3, #0
 800d518:	d006      	beq.n	800d528 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800d51a:	6839      	ldr	r1, [r7, #0]
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7ff fd15 	bl	800cf4c <http_send_data_ssi>
 800d522:	4603      	mov	r3, r0
 800d524:	73fb      	strb	r3, [r7, #15]
 800d526:	e005      	b.n	800d534 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7ff fcd9 	bl	800cee2 <http_send_data_nonssi>
 800d530:	4603      	mov	r3, r0
 800d532:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d10d      	bne.n	800d558 <http_send+0x78>
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fa1f 	bl	800c984 <fs_bytes_left>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	dc05      	bgt.n	800d558 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7ff fbf7 	bl	800cd42 <http_eof>
    return 0;
 800d554:	2300      	movs	r3, #0
 800d556:	e000      	b.n	800d55a <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800d558:	7bfb      	ldrb	r3, [r7, #15]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
	...

0800d564 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	4a1e      	ldr	r2, [pc, #120]	; (800d5ec <http_get_404_file+0x88>)
 800d572:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	1d1a      	adds	r2, r3, #4
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4619      	mov	r1, r3
 800d57e:	4610      	mov	r0, r2
 800d580:	f7ff f9b8 	bl	800c8f4 <fs_open>
 800d584:	4603      	mov	r3, r0
 800d586:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d026      	beq.n	800d5de <http_get_404_file+0x7a>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	4a17      	ldr	r2, [pc, #92]	; (800d5f0 <http_get_404_file+0x8c>)
 800d594:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	1d1a      	adds	r2, r3, #4
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	f7ff f9a7 	bl	800c8f4 <fs_open>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d5aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d015      	beq.n	800d5de <http_get_404_file+0x7a>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	4a0f      	ldr	r2, [pc, #60]	; (800d5f4 <http_get_404_file+0x90>)
 800d5b6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	1d1a      	adds	r2, r3, #4
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	4610      	mov	r0, r2
 800d5c4:	f7ff f996 	bl	800c8f4 <fs_open>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800d5cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d004      	beq.n	800d5de <http_get_404_file+0x7a>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	601a      	str	r2, [r3, #0]
        return NULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	e001      	b.n	800d5e2 <http_get_404_file+0x7e>
      }
    }
  }

  return &hs->file_handle;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	3304      	adds	r3, #4
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	0801a6dc 	.word	0x0801a6dc
 800d5f0:	0801a6e8 	.word	0x0801a6e8
 800d5f4:	0801a6f4 	.word	0x0801a6f4

0800d5f8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b08e      	sub	sp, #56	; 0x38
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
  LWIP_ASSERT("hs != NULL", hs != NULL);

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d103      	bne.n	800d618 <http_parse_request+0x20>
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	69db      	ldr	r3, [r3, #28]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <http_parse_request+0x26>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800d618:	f06f 0307 	mvn.w	r3, #7
 800d61c:	e0c8      	b.n	800d7b0 <http_parse_request+0x1b8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d622:	2b00      	cmp	r3, #0
 800d624:	d103      	bne.n	800d62e <http_parse_request+0x36>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d62a:	625a      	str	r2, [r3, #36]	; 0x24
 800d62c:	e005      	b.n	800d63a <http_parse_request+0x42>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d634:	4618      	mov	r0, r3
 800d636:	f001 fc7e 	bl	800ef36 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800d63a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d63c:	f001 fc68 	bl	800ef10 <pbuf_ref>

  if (hs->req->next != NULL) {
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d012      	beq.n	800d670 <http_parse_request+0x78>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64e:	891b      	ldrh	r3, [r3, #8]
 800d650:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800d654:	4293      	cmp	r3, r2
 800d656:	bf28      	it	cs
 800d658:	4613      	movcs	r3, r2
 800d65a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d660:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d662:	2300      	movs	r3, #0
 800d664:	4954      	ldr	r1, [pc, #336]	; (800d7b8 <http_parse_request+0x1c0>)
 800d666:	f001 fd2f 	bl	800f0c8 <pbuf_copy_partial>
    data = httpd_req_buf;
 800d66a:	4b53      	ldr	r3, [pc, #332]	; (800d7b8 <http_parse_request+0x1c0>)
 800d66c:	637b      	str	r3, [r7, #52]	; 0x34
 800d66e:	e005      	b.n	800d67c <http_parse_request+0x84>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d678:	895b      	ldrh	r3, [r3, #10]
 800d67a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800d67c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d67e:	2b06      	cmp	r3, #6
 800d680:	f240 8081 	bls.w	800d786 <http_parse_request+0x18e>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800d684:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d686:	461a      	mov	r2, r3
 800d688:	494c      	ldr	r1, [pc, #304]	; (800d7bc <http_parse_request+0x1c4>)
 800d68a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d68c:	f000 fc0c 	bl	800dea8 <lwip_strnstr>
 800d690:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d076      	beq.n	800d786 <http_parse_request+0x18e>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800d69c:	2204      	movs	r2, #4
 800d69e:	4948      	ldr	r1, [pc, #288]	; (800d7c0 <http_parse_request+0x1c8>)
 800d6a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d6a2:	f00b ffe8 	bl	8019676 <strncmp>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d116      	bne.n	800d6da <http_parse_request+0xe2>
        sp1 = data + 3;
 800d6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ae:	3303      	adds	r3, #3
 800d6b0:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d6be:	1ad3      	subs	r3, r2, r3
 800d6c0:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	8b7a      	ldrh	r2, [r7, #26]
 800d6c8:	493e      	ldr	r1, [pc, #248]	; (800d7c4 <http_parse_request+0x1cc>)
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f000 fbec 	bl	800dea8 <lwip_strnstr>
 800d6d0:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d111      	bne.n	800d6fc <http_parse_request+0x104>
 800d6d8:	e006      	b.n	800d6e8 <http_parse_request+0xf0>
        data[4] = 0;
 800d6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6dc:	3304      	adds	r3, #4
 800d6de:	2200      	movs	r2, #0
 800d6e0:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800d6e2:	f06f 030f 	mvn.w	r3, #15
 800d6e6:	e063      	b.n	800d7b0 <http_parse_request+0x1b8>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	8b7a      	ldrh	r2, [r7, #26]
 800d6ee:	4933      	ldr	r1, [pc, #204]	; (800d7bc <http_parse_request+0x1c4>)
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f000 fbd9 	bl	800dea8 <lwip_strnstr>
 800d6f6:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	3301      	adds	r3, #1
 800d700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d702:	1ad3      	subs	r3, r2, r3
 800d704:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d03c      	beq.n	800d786 <http_parse_request+0x18e>
 800d70c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	429a      	cmp	r2, r3
 800d712:	d938      	bls.n	800d786 <http_parse_request+0x18e>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800d714:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d716:	461a      	mov	r2, r3
 800d718:	492b      	ldr	r1, [pc, #172]	; (800d7c8 <http_parse_request+0x1d0>)
 800d71a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d71c:	f000 fbc4 	bl	800dea8 <lwip_strnstr>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d02f      	beq.n	800d786 <http_parse_request+0x18e>
          char *uri = sp1 + 1;
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	3301      	adds	r3, #1
 800d72a:	617b      	str	r3, [r7, #20]
#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
          /* This is HTTP/1.0 compatible: for strict 1.1, a connection
             would always be persistent unless "close" was specified. */
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 800d72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d116      	bne.n	800d760 <http_parse_request+0x168>
 800d732:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d734:	461a      	mov	r2, r3
 800d736:	4925      	ldr	r1, [pc, #148]	; (800d7cc <http_parse_request+0x1d4>)
 800d738:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d73a:	f000 fbb5 	bl	800dea8 <lwip_strnstr>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d108      	bne.n	800d756 <http_parse_request+0x15e>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 800d744:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d746:	461a      	mov	r2, r3
 800d748:	4921      	ldr	r1, [pc, #132]	; (800d7d0 <http_parse_request+0x1d8>)
 800d74a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d74c:	f000 fbac 	bl	800dea8 <lwip_strnstr>
 800d750:	4603      	mov	r3, r0
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 800d752:	2b00      	cmp	r3, #0
 800d754:	d004      	beq.n	800d760 <http_parse_request+0x168>
            hs->keepalive = 1;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	2201      	movs	r2, #1
 800d75a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800d75e:	e003      	b.n	800d768 <http_parse_request+0x170>
          } else {
            hs->keepalive = 0;
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	2200      	movs	r2, #0
 800d764:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	2200      	movs	r2, #0
 800d76c:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800d76e:	8b3b      	ldrh	r3, [r7, #24]
 800d770:	697a      	ldr	r2, [r7, #20]
 800d772:	4413      	add	r3, r2
 800d774:	2200      	movs	r2, #0
 800d776:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800d778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d77a:	6979      	ldr	r1, [r7, #20]
 800d77c:	68b8      	ldr	r0, [r7, #8]
 800d77e:	f000 f87b 	bl	800d878 <http_find_file>
 800d782:	4603      	mov	r3, r0
 800d784:	e014      	b.n	800d7b0 <http_parse_request+0x1b8>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78a:	4618      	mov	r0, r3
 800d78c:	f001 fba9 	bl	800eee2 <pbuf_clen>
 800d790:	4603      	mov	r3, r0
 800d792:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d798:	891b      	ldrh	r3, [r3, #8]
 800d79a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d79e:	d205      	bcs.n	800d7ac <http_parse_request+0x1b4>
 800d7a0:	8a7b      	ldrh	r3, [r7, #18]
 800d7a2:	2b05      	cmp	r3, #5
 800d7a4:	d802      	bhi.n	800d7ac <http_parse_request+0x1b4>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800d7a6:	f06f 0304 	mvn.w	r3, #4
 800d7aa:	e001      	b.n	800d7b0 <http_parse_request+0x1b8>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800d7ac:	f06f 030f 	mvn.w	r3, #15
  }
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3738      	adds	r7, #56	; 0x38
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	200072a0 	.word	0x200072a0
 800d7bc:	0801a700 	.word	0x0801a700
 800d7c0:	0801a704 	.word	0x0801a704
 800d7c4:	0801a70c 	.word	0x0801a70c
 800d7c8:	0801a710 	.word	0x0801a710
 800d7cc:	0801a718 	.word	0x0801a718
 800d7d0:	0801a730 	.word	0x0801a730

0800d7d4 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b088      	sub	sp, #32
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d040      	beq.n	800d86a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800d7ec:	213f      	movs	r1, #63	; 0x3f
 800d7ee:	6838      	ldr	r0, [r7, #0]
 800d7f0:	f00b ff34 	bl	801965c <strchr>
 800d7f4:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d002      	beq.n	800d802 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2200      	movs	r2, #0
 800d800:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	613b      	str	r3, [r7, #16]
    ext = uri;
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800d80a:	212e      	movs	r1, #46	; 0x2e
 800d80c:	6938      	ldr	r0, [r7, #16]
 800d80e:	f00b ff25 	bl	801965c <strchr>
 800d812:	6138      	str	r0, [r7, #16]
 800d814:	e009      	b.n	800d82a <http_uri_is_ssi+0x56>
      ext = sub;
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	617b      	str	r3, [r7, #20]
      sub++;
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	3301      	adds	r3, #1
 800d81e:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800d820:	212e      	movs	r1, #46	; 0x2e
 800d822:	6938      	ldr	r0, [r7, #16]
 800d824:	f00b ff1a 	bl	801965c <strchr>
 800d828:	6138      	str	r0, [r7, #16]
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1f2      	bne.n	800d816 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800d830:	2300      	movs	r3, #0
 800d832:	61fb      	str	r3, [r7, #28]
 800d834:	e010      	b.n	800d858 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800d836:	4a0f      	ldr	r2, [pc, #60]	; (800d874 <http_uri_is_ssi+0xa0>)
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d83e:	4619      	mov	r1, r3
 800d840:	6978      	ldr	r0, [r7, #20]
 800d842:	f000 fb67 	bl	800df14 <lwip_stricmp>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d102      	bne.n	800d852 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800d84c:	2301      	movs	r3, #1
 800d84e:	76fb      	strb	r3, [r7, #27]
        break;
 800d850:	e005      	b.n	800d85e <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	3301      	adds	r3, #1
 800d856:	61fb      	str	r3, [r7, #28]
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	2b04      	cmp	r3, #4
 800d85c:	d9eb      	bls.n	800d836 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d002      	beq.n	800d86a <http_uri_is_ssi+0x96>
      *param = '?';
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	223f      	movs	r2, #63	; 0x3f
 800d868:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800d86a:	7efb      	ldrb	r3, [r7, #27]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3720      	adds	r7, #32
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	0801ba18 	.word	0x0801ba18

0800d878 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b092      	sub	sp, #72	; 0x48
 800d87c:	af02      	add	r7, sp, #8
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800d884:	2300      	movs	r3, #0
 800d886:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800d888:	2300      	movs	r3, #0
 800d88a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	4618      	mov	r0, r3
 800d896:	f7f2 fcbd 	bl	8000214 <strlen>
 800d89a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800d89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d074      	beq.n	800d98c <http_find_file+0x114>
 800d8a2:	68ba      	ldr	r2, [r7, #8]
 800d8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	4413      	add	r3, r2
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	2b2f      	cmp	r3, #47	; 0x2f
 800d8ae:	d16d      	bne.n	800d98c <http_find_file+0x114>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800d8b0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800d8b2:	4a63      	ldr	r2, [pc, #396]	; (800da40 <http_find_file+0x1c8>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d102      	bne.n	800d8be <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800d8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d166      	bne.n	800d98c <http_find_file+0x114>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800d8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	2b3f      	cmp	r3, #63	; 0x3f
 800d8c4:	bf28      	it	cs
 800d8c6:	233f      	movcs	r3, #63	; 0x3f
 800d8c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00a      	beq.n	800d8e6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	485a      	ldr	r0, [pc, #360]	; (800da40 <http_find_file+0x1c8>)
 800d8d8:	f00b ff63 	bl	80197a2 <memcpy>
      http_uri_buf[copy_len] = 0;
 800d8dc:	4a58      	ldr	r2, [pc, #352]	; (800da40 <http_find_file+0x1c8>)
 800d8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e0:	4413      	add	r3, r2
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8ea:	e04c      	b.n	800d986 <http_find_file+0x10e>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d028      	beq.n	800d944 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800d8f8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800d8fa:	6a3b      	ldr	r3, [r7, #32]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d01e      	beq.n	800d93e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800d900:	4a50      	ldr	r2, [pc, #320]	; (800da44 <http_find_file+0x1cc>)
 800d902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d904:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f2 fc83 	bl	8000214 <strlen>
 800d90e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800d910:	69fa      	ldr	r2, [r7, #28]
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	4293      	cmp	r3, r2
 800d916:	bf28      	it	cs
 800d918:	4613      	movcs	r3, r2
 800d91a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800d91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91e:	4a48      	ldr	r2, [pc, #288]	; (800da40 <http_find_file+0x1c8>)
 800d920:	1898      	adds	r0, r3, r2
 800d922:	4a48      	ldr	r2, [pc, #288]	; (800da44 <http_find_file+0x1cc>)
 800d924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d926:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d92a:	69ba      	ldr	r2, [r7, #24]
 800d92c:	4619      	mov	r1, r3
 800d92e:	f00b ff38 	bl	80197a2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800d932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	4413      	add	r3, r2
 800d938:	4a41      	ldr	r2, [pc, #260]	; (800da40 <http_find_file+0x1c8>)
 800d93a:	2100      	movs	r1, #0
 800d93c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800d93e:	4b40      	ldr	r3, [pc, #256]	; (800da40 <http_find_file+0x1c8>)
 800d940:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d942:	e004      	b.n	800d94e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800d944:	4a3f      	ldr	r2, [pc, #252]	; (800da44 <http_find_file+0x1cc>)
 800d946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d948:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d94c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	3304      	adds	r3, #4
 800d952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d954:	4618      	mov	r0, r3
 800d956:	f7fe ffcd 	bl	800c8f4 <fs_open>
 800d95a:	4603      	mov	r3, r0
 800d95c:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800d95e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10c      	bne.n	800d980 <http_find_file+0x108>
        uri = file_name;
 800d966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d968:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	3304      	adds	r3, #4
 800d96e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800d970:	4a34      	ldr	r2, [pc, #208]	; (800da44 <http_find_file+0x1cc>)
 800d972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d974:	00db      	lsls	r3, r3, #3
 800d976:	4413      	add	r3, r2
 800d978:	791b      	ldrb	r3, [r3, #4]
 800d97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI */
        break;
 800d97e:	e005      	b.n	800d98c <http_find_file+0x114>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800d980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d982:	3301      	adds	r3, #1
 800d984:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d988:	2b04      	cmp	r3, #4
 800d98a:	d9af      	bls.n	800d8ec <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800d98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d13b      	bne.n	800da0a <http_find_file+0x192>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	213f      	movs	r1, #63	; 0x3f
 800d996:	4618      	mov	r0, r3
 800d998:	f00b fe60 	bl	801965c <strchr>
 800d99c:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800d99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d005      	beq.n	800d9b0 <http_find_file+0x138>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800d9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	701a      	strb	r2, [r3, #0]
      params++;
 800d9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	3304      	adds	r3, #4
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7fe ff9b 	bl	800c8f4 <fs_open>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800d9c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d103      	bne.n	800d9d2 <http_find_file+0x15a>
      file = &hs->file_handle;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9d0:	e006      	b.n	800d9e0 <http_find_file+0x168>
    } else {
      file = http_get_404_file(hs, &uri);
 800d9d2:	f107 0308 	add.w	r3, r7, #8
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f7ff fdc3 	bl	800d564 <http_get_404_file>
 800d9de:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800d9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d011      	beq.n	800da0a <http_find_file+0x192>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800d9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e8:	7c1b      	ldrb	r3, [r3, #16]
 800d9ea:	f003 0308 	and.w	r3, r3, #8
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <http_find_file+0x182>
        tag_check = 1;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9f8:	e007      	b.n	800da0a <http_find_file+0x192>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da00:	f7ff fee8 	bl	800d7d4 <http_uri_is_ssi>
 800da04:	4603      	mov	r3, r0
 800da06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d106      	bne.n	800da1e <http_find_file+0x1a6>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800da10:	f107 0308 	add.w	r3, r7, #8
 800da14:	4619      	mov	r1, r3
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f7ff fda4 	bl	800d564 <http_get_404_file>
 800da1c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da22:	9301      	str	r3, [sp, #4]
 800da24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da28:	9300      	str	r3, [sp, #0]
 800da2a:	4613      	mov	r3, r2
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f000 f809 	bl	800da48 <http_init_file>
 800da36:	4603      	mov	r3, r0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3740      	adds	r7, #64	; 0x40
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	200076a0 	.word	0x200076a0
 800da44:	0801ba2c 	.word	0x0801ba2c

0800da48 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b088      	sub	sp, #32
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
 800da54:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d05a      	beq.n	800db12 <http_init_file+0xca>
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800da5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da60:	2b00      	cmp	r3, #0
 800da62:	d01d      	beq.n	800daa0 <http_init_file+0x58>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800da64:	f7ff f816 	bl	800ca94 <http_ssi_state_alloc>
 800da68:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d017      	beq.n	800daa0 <http_init_file+0x58>
        ssi->tag_index = 0;
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	2200      	movs	r2, #0
 800da74:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da7c:	2200      	movs	r2, #0
 800da7e:	771a      	strb	r2, [r3, #28]
        ssi->parsed = file->data;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	461a      	mov	r2, r3
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	69fb      	ldr	r3, [r7, #28]
 800da98:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	69fa      	ldr	r2, [r7, #28]
 800da9e:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	619a      	str	r2, [r3, #24]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	61da      	str	r2, [r3, #28]
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	461a      	mov	r2, r3
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	629a      	str	r2, [r3, #40]	; 0x28
    }
    hs->retries = 0;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d032      	beq.n	800db2c <http_init_file+0xe4>
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	699b      	ldr	r3, [r3, #24]
 800daca:	7c1b      	ldrb	r3, [r3, #16]
 800dacc:	f003 0301 	and.w	r3, r3, #1
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d02b      	beq.n	800db2c <http_init_file+0xe4>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	69d8      	ldr	r0, [r3, #28]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dadc:	461a      	mov	r2, r3
 800dade:	4924      	ldr	r1, [pc, #144]	; (800db70 <http_init_file+0x128>)
 800dae0:	f000 f9e2 	bl	800dea8 <lwip_strnstr>
 800dae4:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d01f      	beq.n	800db2c <http_init_file+0xe4>
        int diff = file_start + 4 - hs->file;
 800daec:	69bb      	ldr	r3, [r7, #24]
 800daee:	1d1a      	adds	r2, r3, #4
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	69db      	ldr	r3, [r3, #28]
 800daf4:	1ad3      	subs	r3, r2, r3
 800daf6:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	69da      	ldr	r2, [r3, #28]
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	441a      	add	r2, r3
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	61da      	str	r2, [r3, #28]
        hs->left -= (u32_t)diff;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	1ad2      	subs	r2, r2, r3
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	629a      	str	r2, [r3, #40]	; 0x28
 800db10:	e00c      	b.n	800db2c <http_init_file+0xe4>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2200      	movs	r2, #0
 800db16:	619a      	str	r2, [r3, #24]
    hs->file = NULL;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2200      	movs	r2, #0
 800db1c:	61da      	str	r2, [r3, #28]
    hs->left = 0;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2200      	movs	r2, #0
 800db22:	629a      	str	r2, [r3, #40]	; 0x28
    hs->retries = 0;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2200      	movs	r2, #0
 800db28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
#else /* LWIP_HTTPD_DYNAMIC_HEADERS */
  LWIP_UNUSED_ARG(uri);
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  if (hs->keepalive) {
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db32:	2b00      	cmp	r3, #0
 800db34:	d017      	beq.n	800db66 <http_init_file+0x11e>
#if LWIP_HTTPD_SSI
    if (hs->ssi != NULL) {
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d004      	beq.n	800db48 <http_init_file+0x100>
      hs->keepalive = 0;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800db46:	e00e      	b.n	800db66 <http_init_file+0x11e>
    } else
#endif /* LWIP_HTTPD_SSI */
    {
      if ((hs->handle != NULL) &&
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00a      	beq.n	800db66 <http_init_file+0x11e>
          ((hs->handle->flags & (FS_FILE_FLAGS_HEADER_INCLUDED | FS_FILE_FLAGS_HEADER_PERSISTENT)) == FS_FILE_FLAGS_HEADER_INCLUDED)) {
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	7c1b      	ldrb	r3, [r3, #16]
 800db56:	f003 0303 	and.w	r3, r3, #3
      if ((hs->handle != NULL) &&
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d103      	bne.n	800db66 <http_init_file+0x11e>
        hs->keepalive = 0;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2200      	movs	r2, #0
 800db62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3720      	adds	r7, #32
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	0801a710 	.word	0x0801a710

0800db74 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d002      	beq.n	800db90 <http_err+0x1c>
    http_state_free(hs);
 800db8a:	68f8      	ldr	r0, [r7, #12]
 800db8c:	f7ff f812 	bl	800cbb4 <http_state_free>
  }
}
 800db90:	bf00      	nop
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b086      	sub	sp, #24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	4613      	mov	r3, r2
 800dba4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d101      	bne.n	800dbb4 <http_sent+0x1c>
    return ERR_OK;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	e008      	b.n	800dbc6 <http_sent+0x2e>
  }

  hs->retries = 0;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  http_send(pcb, hs);
 800dbbc:	6979      	ldr	r1, [r7, #20]
 800dbbe:	68b8      	ldr	r0, [r7, #8]
 800dbc0:	f7ff fc8e 	bl	800d4e0 <http_send>

  return ERR_OK;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3718      	adds	r7, #24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b084      	sub	sp, #16
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
 800dbd6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d112      	bne.n	800dc08 <http_poll+0x3a>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	6838      	ldr	r0, [r7, #0]
 800dbe6:	f7ff f89d 	bl	800cd24 <http_close_conn>
 800dbea:	4603      	mov	r3, r0
 800dbec:	72fb      	strb	r3, [r7, #11]
    LWIP_UNUSED_ARG(closed);
#if LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR
    if (closed == ERR_MEM) {
 800dbee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dbf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbf6:	d105      	bne.n	800dc04 <http_poll+0x36>
      altcp_abort(pcb);
 800dbf8:	6838      	ldr	r0, [r7, #0]
 800dbfa:	f001 fd43 	bl	800f684 <tcp_abort>
      return ERR_ABRT;
 800dbfe:	f06f 030c 	mvn.w	r3, #12
 800dc02:	e023      	b.n	800dc4c <http_poll+0x7e>
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800dc04:	2300      	movs	r3, #0
 800dc06:	e021      	b.n	800dc4c <http_poll+0x7e>
  } else {
    hs->retries++;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dc0e:	3301      	adds	r3, #1
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dc1e:	2b04      	cmp	r3, #4
 800dc20:	d105      	bne.n	800dc2e <http_poll+0x60>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800dc22:	68f9      	ldr	r1, [r7, #12]
 800dc24:	6838      	ldr	r0, [r7, #0]
 800dc26:	f7ff f87d 	bl	800cd24 <http_close_conn>
      return ERR_OK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e00e      	b.n	800dc4c <http_poll+0x7e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	699b      	ldr	r3, [r3, #24]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d009      	beq.n	800dc4a <http_poll+0x7c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800dc36:	68f9      	ldr	r1, [r7, #12]
 800dc38:	6838      	ldr	r0, [r7, #0]
 800dc3a:	f7ff fc51 	bl	800d4e0 <http_send>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <http_poll+0x7c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800dc44:	6838      	ldr	r0, [r7, #0]
 800dc46:	f005 fdb9 	bl	80137bc <tcp_output>
      }
    }
  }

  return ERR_OK;
 800dc4a:	2300      	movs	r3, #0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
 800dc60:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800dc66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d105      	bne.n	800dc7a <http_recv+0x26>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <http_recv+0x26>
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d111      	bne.n	800dc9e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d008      	beq.n	800dc92 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	891b      	ldrh	r3, [r3, #8]
 800dc84:	4619      	mov	r1, r3
 800dc86:	68b8      	ldr	r0, [r7, #8]
 800dc88:	f001 fe7e 	bl	800f988 <tcp_recved>
      pbuf_free(p);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f001 f8d5 	bl	800ee3c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800dc92:	6979      	ldr	r1, [r7, #20]
 800dc94:	68b8      	ldr	r0, [r7, #8]
 800dc96:	f7ff f845 	bl	800cd24 <http_close_conn>
    return ERR_OK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	e03b      	b.n	800dd16 <http_recv+0xc2>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	891b      	ldrh	r3, [r3, #8]
 800dca2:	4619      	mov	r1, r3
 800dca4:	68b8      	ldr	r0, [r7, #8]
 800dca6:	f001 fe6f 	bl	800f988 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d12d      	bne.n	800dd0e <http_recv+0xba>
      err_t parsed = http_parse_request(p, hs, pcb);
 800dcb2:	68ba      	ldr	r2, [r7, #8]
 800dcb4:	6979      	ldr	r1, [r7, #20]
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7ff fc9e 	bl	800d5f8 <http_parse_request>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800dcc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcc4:	f113 0f05 	cmn.w	r3, #5
 800dcc8:	d00b      	beq.n	800dce2 <http_recv+0x8e>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d007      	beq.n	800dce2 <http_recv+0x8e>
          pbuf_free(hs->req);
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f001 f8b0 	bl	800ee3c <pbuf_free>
          hs->req = NULL;
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	2200      	movs	r2, #0
 800dce0:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f001 f8aa 	bl	800ee3c <pbuf_free>
      if (parsed == ERR_OK) {
 800dce8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d104      	bne.n	800dcfa <http_recv+0xa6>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800dcf0:	6979      	ldr	r1, [r7, #20]
 800dcf2:	68b8      	ldr	r0, [r7, #8]
 800dcf4:	f7ff fbf4 	bl	800d4e0 <http_send>
 800dcf8:	e00c      	b.n	800dd14 <http_recv+0xc0>
        }
      } else if (parsed == ERR_ARG) {
 800dcfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcfe:	f113 0f10 	cmn.w	r3, #16
 800dd02:	d107      	bne.n	800dd14 <http_recv+0xc0>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800dd04:	6979      	ldr	r1, [r7, #20]
 800dd06:	68b8      	ldr	r0, [r7, #8]
 800dd08:	f7ff f80c 	bl	800cd24 <http_close_conn>
 800dd0c:	e002      	b.n	800dd14 <http_recv+0xc0>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f001 f894 	bl	800ee3c <pbuf_free>
    }
  }
  return ERR_OK;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
	...

0800dd20 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b086      	sub	sp, #24
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800dd2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d102      	bne.n	800dd3c <http_accept+0x1c>
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d102      	bne.n	800dd42 <http_accept+0x22>
    return ERR_VAL;
 800dd3c:	f06f 0305 	mvn.w	r3, #5
 800dd40:	e025      	b.n	800dd8e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800dd42:	2101      	movs	r1, #1
 800dd44:	68b8      	ldr	r0, [r7, #8]
 800dd46:	f002 fa47 	bl	80101d8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800dd4a:	f7fe fee5 	bl	800cb18 <http_state_alloc>
 800dd4e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d102      	bne.n	800dd5c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800dd56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd5a:	e018      	b.n	800dd8e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	621a      	str	r2, [r3, #32]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800dd62:	6979      	ldr	r1, [r7, #20]
 800dd64:	68b8      	ldr	r0, [r7, #8]
 800dd66:	f002 fc03 	bl	8010570 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800dd6a:	490b      	ldr	r1, [pc, #44]	; (800dd98 <http_accept+0x78>)
 800dd6c:	68b8      	ldr	r0, [r7, #8]
 800dd6e:	f002 fc10 	bl	8010592 <tcp_recv>
  altcp_err(pcb, http_err);
 800dd72:	490a      	ldr	r1, [pc, #40]	; (800dd9c <http_accept+0x7c>)
 800dd74:	68b8      	ldr	r0, [r7, #8]
 800dd76:	f002 fc30 	bl	80105da <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800dd7a:	2204      	movs	r2, #4
 800dd7c:	4908      	ldr	r1, [pc, #32]	; (800dda0 <http_accept+0x80>)
 800dd7e:	68b8      	ldr	r0, [r7, #8]
 800dd80:	f002 fc54 	bl	801062c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800dd84:	4907      	ldr	r1, [pc, #28]	; (800dda4 <http_accept+0x84>)
 800dd86:	68b8      	ldr	r0, [r7, #8]
 800dd88:	f002 fc15 	bl	80105b6 <tcp_sent>

  return ERR_OK;
 800dd8c:	2300      	movs	r3, #0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	0800dc55 	.word	0x0800dc55
 800dd9c:	0800db75 	.word	0x0800db75
 800dda0:	0800dbcf 	.word	0x0800dbcf
 800dda4:	0800db99 	.word	0x0800db99

0800dda8 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d014      	beq.n	800dde4 <httpd_init_pcb+0x3c>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800ddba:	2101      	movs	r1, #1
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f002 fa0b 	bl	80101d8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800ddc2:	887b      	ldrh	r3, [r7, #2]
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	4909      	ldr	r1, [pc, #36]	; (800ddec <httpd_init_pcb+0x44>)
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f001 fc67 	bl	800f69c <tcp_bind>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
    pcb = altcp_listen(pcb);
 800ddd2:	21ff      	movs	r1, #255	; 0xff
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f001 fcf3 	bl	800f7c0 <tcp_listen_with_backlog>
 800ddda:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
    altcp_accept(pcb, http_accept);
 800dddc:	4904      	ldr	r1, [pc, #16]	; (800ddf0 <httpd_init_pcb+0x48>)
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f002 fc0d 	bl	80105fe <tcp_accept>
  }
}
 800dde4:	bf00      	nop
 800dde6:	3710      	adds	r7, #16
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	0801bb3c 	.word	0x0801bb3c
 800ddf0:	0800dd21 	.word	0x0800dd21

0800ddf4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
  struct altcp_pcb *pcb;

#if HTTPD_USE_MEM_POOL
  LWIP_MEMPOOL_INIT(HTTPD_STATE);
 800ddfa:	4809      	ldr	r0, [pc, #36]	; (800de20 <httpd_init+0x2c>)
 800ddfc:	f000 faba 	bl	800e374 <memp_init_pool>
#if LWIP_HTTPD_SSI
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
 800de00:	4808      	ldr	r0, [pc, #32]	; (800de24 <httpd_init+0x30>)
 800de02:	f000 fab7 	bl	800e374 <memp_init_pool>
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800de06:	202e      	movs	r0, #46	; 0x2e
 800de08:	f002 fba4 	bl	8010554 <tcp_new_ip_type>
 800de0c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800de0e:	2150      	movs	r1, #80	; 0x50
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff ffc9 	bl	800dda8 <httpd_init_pcb>
}
 800de16:	bf00      	nop
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	0801ba54 	.word	0x0801ba54
 800de24:	0801ba5c 	.word	0x0801ba5c

0800de28 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800de28:	b480      	push	{r7}
 800de2a:	b085      	sub	sp, #20
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
  httpd_ssi_handler = ssi_handler;
 800de34:	4a04      	ldr	r2, [pc, #16]	; (800de48 <http_set_ssi_handler+0x20>)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6013      	str	r3, [r2, #0]
  LWIP_ASSERT("invalid number of tags", num_tags > 0);

  httpd_tags = tags;
  httpd_num_tags = num_tags;
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800de3a:	bf00      	nop
 800de3c:	3714      	adds	r7, #20
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	200076e0 	.word	0x200076e0

0800de4c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	4603      	mov	r3, r0
 800de54:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800de56:	88fb      	ldrh	r3, [r7, #6]
 800de58:	021b      	lsls	r3, r3, #8
 800de5a:	b21a      	sxth	r2, r3
 800de5c:	88fb      	ldrh	r3, [r7, #6]
 800de5e:	0a1b      	lsrs	r3, r3, #8
 800de60:	b29b      	uxth	r3, r3
 800de62:	b21b      	sxth	r3, r3
 800de64:	4313      	orrs	r3, r2
 800de66:	b21b      	sxth	r3, r3
 800de68:	b29b      	uxth	r3, r3
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	370c      	adds	r7, #12
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800de76:	b480      	push	{r7}
 800de78:	b083      	sub	sp, #12
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	061a      	lsls	r2, r3, #24
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	021b      	lsls	r3, r3, #8
 800de86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de8a:	431a      	orrs	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	0a1b      	lsrs	r3, r3, #8
 800de90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de94:	431a      	orrs	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	0e1b      	lsrs	r3, r3, #24
 800de9a:	4313      	orrs	r3, r2
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800deb4:	68b8      	ldr	r0, [r7, #8]
 800deb6:	f7f2 f9ad 	bl	8000214 <strlen>
 800deba:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d101      	bne.n	800dec6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	e022      	b.n	800df0c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	617b      	str	r3, [r7, #20]
 800deca:	e012      	b.n	800def2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	781a      	ldrb	r2, [r3, #0]
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d109      	bne.n	800deec <lwip_strnstr+0x44>
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	68b9      	ldr	r1, [r7, #8]
 800dedc:	6978      	ldr	r0, [r7, #20]
 800dede:	f00b fbca 	bl	8019676 <strncmp>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d101      	bne.n	800deec <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	e00f      	b.n	800df0c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	3301      	adds	r3, #1
 800def0:	617b      	str	r3, [r7, #20]
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d007      	beq.n	800df0a <lwip_strnstr+0x62>
 800defa:	697a      	ldr	r2, [r7, #20]
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	441a      	add	r2, r3
 800df00:	68f9      	ldr	r1, [r7, #12]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	440b      	add	r3, r1
 800df06:	429a      	cmp	r2, r3
 800df08:	d9e0      	bls.n	800decc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800df0a:	2300      	movs	r3, #0
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	1c5a      	adds	r2, r3, #1
 800df22:	607a      	str	r2, [r7, #4]
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	603a      	str	r2, [r7, #0]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800df32:	7bfa      	ldrb	r2, [r7, #15]
 800df34:	7bbb      	ldrb	r3, [r7, #14]
 800df36:	429a      	cmp	r2, r3
 800df38:	d016      	beq.n	800df68 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
 800df3c:	f043 0320 	orr.w	r3, r3, #32
 800df40:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800df42:	7b7b      	ldrb	r3, [r7, #13]
 800df44:	2b60      	cmp	r3, #96	; 0x60
 800df46:	d90c      	bls.n	800df62 <lwip_stricmp+0x4e>
 800df48:	7b7b      	ldrb	r3, [r7, #13]
 800df4a:	2b7a      	cmp	r3, #122	; 0x7a
 800df4c:	d809      	bhi.n	800df62 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800df4e:	7bbb      	ldrb	r3, [r7, #14]
 800df50:	f043 0320 	orr.w	r3, r3, #32
 800df54:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800df56:	7b7a      	ldrb	r2, [r7, #13]
 800df58:	7b3b      	ldrb	r3, [r7, #12]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d003      	beq.n	800df66 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800df5e:	2301      	movs	r3, #1
 800df60:	e006      	b.n	800df70 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800df62:	2301      	movs	r3, #1
 800df64:	e004      	b.n	800df70 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800df66:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800df68:	7bfb      	ldrb	r3, [r7, #15]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1d7      	bne.n	800df1e <lwip_stricmp+0xa>
  return 0;
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3714      	adds	r7, #20
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <lwip_standard_chksum>:
 *
 * by Curt McDowell, Broadcom Corp. December 8th, 2005
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b08b      	sub	sp, #44	; 0x2c
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	627b      	str	r3, [r7, #36]	; 0x24
  const u16_t *ps;
  u16_t t = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	81fb      	strh	r3, [r7, #14]
  const u32_t *pl;
  u32_t sum = 0, tmp;
 800df8e:	2300      	movs	r3, #0
 800df90:	61bb      	str	r3, [r7, #24]
  /* starts at odd byte address? */
  int odd = ((mem_ptr_t)pb & 1);
 800df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df94:	f003 0301 	and.w	r3, r3, #1
 800df98:	613b      	str	r3, [r7, #16]

  if (odd && len > 0) {
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00d      	beq.n	800dfbc <lwip_standard_chksum+0x40>
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	dd0a      	ble.n	800dfbc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800dfa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfa8:	1c53      	adds	r3, r2, #1
 800dfaa:	627b      	str	r3, [r7, #36]	; 0x24
 800dfac:	f107 030e 	add.w	r3, r7, #14
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	7812      	ldrb	r2, [r2, #0]
 800dfb4:	701a      	strb	r2, [r3, #0]
    len--;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	3b01      	subs	r3, #1
 800dfba:	603b      	str	r3, [r7, #0]
  }

  ps = (const u16_t *)(const void *)pb;
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	623b      	str	r3, [r7, #32]

  if (((mem_ptr_t)ps & 3) && len > 1) {
 800dfc0:	6a3b      	ldr	r3, [r7, #32]
 800dfc2:	f003 0303 	and.w	r3, r3, #3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00d      	beq.n	800dfe6 <lwip_standard_chksum+0x6a>
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	dd0a      	ble.n	800dfe6 <lwip_standard_chksum+0x6a>
    sum += *ps++;
 800dfd0:	6a3b      	ldr	r3, [r7, #32]
 800dfd2:	1c9a      	adds	r2, r3, #2
 800dfd4:	623a      	str	r2, [r7, #32]
 800dfd6:	881b      	ldrh	r3, [r3, #0]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	4413      	add	r3, r2
 800dfde:	61bb      	str	r3, [r7, #24]
    len -= 2;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	3b02      	subs	r3, #2
 800dfe4:	603b      	str	r3, [r7, #0]
  }

  pl = (const u32_t *)(const void *)ps;
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	61fb      	str	r3, [r7, #28]

  while (len > 7)  {
 800dfea:	e01e      	b.n	800e02a <lwip_standard_chksum+0xae>
    tmp = sum + *pl++;          /* ping */
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	1d1a      	adds	r2, r3, #4
 800dff0:	61fa      	str	r2, [r7, #28]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	69ba      	ldr	r2, [r7, #24]
 800dff6:	4413      	add	r3, r2
 800dff8:	617b      	str	r3, [r7, #20]
    if (tmp < sum) {
 800dffa:	697a      	ldr	r2, [r7, #20]
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d202      	bcs.n	800e008 <lwip_standard_chksum+0x8c>
      tmp++;                    /* add back carry */
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	3301      	adds	r3, #1
 800e006:	617b      	str	r3, [r7, #20]
    }

    sum = tmp + *pl++;          /* pong */
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	1d1a      	adds	r2, r3, #4
 800e00c:	61fa      	str	r2, [r7, #28]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	697a      	ldr	r2, [r7, #20]
 800e012:	4413      	add	r3, r2
 800e014:	61bb      	str	r3, [r7, #24]
    if (sum < tmp) {
 800e016:	69ba      	ldr	r2, [r7, #24]
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d202      	bcs.n	800e024 <lwip_standard_chksum+0xa8>
      sum++;                    /* add back carry */
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	3301      	adds	r3, #1
 800e022:	61bb      	str	r3, [r7, #24]
    }

    len -= 8;
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	3b08      	subs	r3, #8
 800e028:	603b      	str	r3, [r7, #0]
  while (len > 7)  {
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	2b07      	cmp	r3, #7
 800e02e:	dcdd      	bgt.n	800dfec <lwip_standard_chksum+0x70>
  }

  /* make room in upper bits */
  sum = FOLD_U32T(sum);
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	0c1a      	lsrs	r2, r3, #16
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	b29b      	uxth	r3, r3
 800e038:	4413      	add	r3, r2
 800e03a:	61bb      	str	r3, [r7, #24]

  ps = (const u16_t *)pl;
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	623b      	str	r3, [r7, #32]

  /* 16-bit aligned word remaining? */
  while (len > 1) {
 800e040:	e00a      	b.n	800e058 <lwip_standard_chksum+0xdc>
    sum += *ps++;
 800e042:	6a3b      	ldr	r3, [r7, #32]
 800e044:	1c9a      	adds	r2, r3, #2
 800e046:	623a      	str	r2, [r7, #32]
 800e048:	881b      	ldrh	r3, [r3, #0]
 800e04a:	461a      	mov	r2, r3
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	4413      	add	r3, r2
 800e050:	61bb      	str	r3, [r7, #24]
    len -= 2;
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	3b02      	subs	r3, #2
 800e056:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	dcf1      	bgt.n	800e042 <lwip_standard_chksum+0xc6>
  }

  /* dangling tail byte remaining? */
  if (len > 0) {                /* include odd byte */
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	dd04      	ble.n	800e06e <lwip_standard_chksum+0xf2>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800e064:	f107 030e 	add.w	r3, r7, #14
 800e068:	6a3a      	ldr	r2, [r7, #32]
 800e06a:	7812      	ldrb	r2, [r2, #0]
 800e06c:	701a      	strb	r2, [r3, #0]
  }

  sum += t;                     /* add end bytes */
 800e06e:	89fb      	ldrh	r3, [r7, #14]
 800e070:	461a      	mov	r2, r3
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	4413      	add	r3, r2
 800e076:	61bb      	str	r3, [r7, #24]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	0c1a      	lsrs	r2, r3, #16
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	b29b      	uxth	r3, r3
 800e080:	4413      	add	r3, r2
 800e082:	61bb      	str	r3, [r7, #24]
  sum = FOLD_U32T(sum);
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	0c1a      	lsrs	r2, r3, #16
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	4413      	add	r3, r2
 800e08e:	61bb      	str	r3, [r7, #24]

  if (odd) {
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d007      	beq.n	800e0a6 <lwip_standard_chksum+0x12a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800e096:	69bb      	ldr	r3, [r7, #24]
 800e098:	021b      	lsls	r3, r3, #8
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	0a1b      	lsrs	r3, r3, #8
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	61bb      	str	r3, [r7, #24]
  }

  return (u16_t)sum;
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	b29b      	uxth	r3, r3
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	372c      	adds	r7, #44	; 0x2c
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr

0800e0b6 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b086      	sub	sp, #24
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	607b      	str	r3, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	72fb      	strb	r3, [r7, #11]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	617b      	str	r3, [r7, #20]
 800e0d0:	e02b      	b.n	800e12a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	895b      	ldrh	r3, [r3, #10]
 800e0da:	4619      	mov	r1, r3
 800e0dc:	4610      	mov	r0, r2
 800e0de:	f7ff ff4d 	bl	800df7c <lwip_standard_chksum>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	0c1a      	lsrs	r2, r3, #16
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	4413      	add	r3, r2
 800e0f6:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	895b      	ldrh	r3, [r3, #10]
 800e0fc:	f003 0301 	and.w	r3, r3, #1
 800e100:	b29b      	uxth	r3, r3
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00e      	beq.n	800e124 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	bf0c      	ite	eq
 800e10c:	2301      	moveq	r3, #1
 800e10e:	2300      	movne	r3, #0
 800e110:	b2db      	uxtb	r3, r3
 800e112:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	021b      	lsls	r3, r3, #8
 800e118:	b29a      	uxth	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	0a1b      	lsrs	r3, r3, #8
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	4313      	orrs	r3, r2
 800e122:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	617b      	str	r3, [r7, #20]
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d1d0      	bne.n	800e0d2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d007      	beq.n	800e146 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	021b      	lsls	r3, r3, #8
 800e13a:	b29a      	uxth	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	0a1b      	lsrs	r3, r3, #8
 800e140:	b2db      	uxtb	r3, r3
 800e142:	4313      	orrs	r3, r2
 800e144:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800e146:	7afb      	ldrb	r3, [r7, #11]
 800e148:	b29b      	uxth	r3, r3
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7ff fe7e 	bl	800de4c <lwip_htons>
 800e150:	4603      	mov	r3, r0
 800e152:	461a      	mov	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4413      	add	r3, r2
 800e158:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800e15a:	893b      	ldrh	r3, [r7, #8]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7ff fe75 	bl	800de4c <lwip_htons>
 800e162:	4603      	mov	r3, r0
 800e164:	461a      	mov	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4413      	add	r3, r2
 800e16a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	0c1a      	lsrs	r2, r3, #16
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	b29b      	uxth	r3, r3
 800e174:	4413      	add	r3, r2
 800e176:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	0c1a      	lsrs	r2, r3, #16
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	4413      	add	r3, r2
 800e182:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	b29b      	uxth	r3, r3
 800e188:	43db      	mvns	r3, r3
 800e18a:	b29b      	uxth	r3, r3
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3718      	adds	r7, #24
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	607b      	str	r3, [r7, #4]
 800e19e:	460b      	mov	r3, r1
 800e1a0:	72fb      	strb	r3, [r7, #11]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	0c1b      	lsrs	r3, r3, #16
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800e1bc:	6a3b      	ldr	r3, [r7, #32]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	693a      	ldr	r2, [r7, #16]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	0c1b      	lsrs	r3, r3, #16
 800e1d0:	693a      	ldr	r2, [r7, #16]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	0c1a      	lsrs	r2, r3, #16
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	b29b      	uxth	r3, r3
 800e1de:	4413      	add	r3, r2
 800e1e0:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	0c1a      	lsrs	r2, r3, #16
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	4413      	add	r3, r2
 800e1ec:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800e1ee:	893a      	ldrh	r2, [r7, #8]
 800e1f0:	7af9      	ldrb	r1, [r7, #11]
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f7ff ff5e 	bl	800e0b6 <inet_cksum_pseudo_base>
 800e1fa:	4603      	mov	r3, r0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3718      	adds	r7, #24
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b086      	sub	sp, #24
 800e208:	af02      	add	r7, sp, #8
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	607b      	str	r3, [r7, #4]
 800e20e:	460b      	mov	r3, r1
 800e210:	72fb      	strb	r3, [r7, #11]
 800e212:	4613      	mov	r3, r2
 800e214:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800e216:	893a      	ldrh	r2, [r7, #8]
 800e218:	7af9      	ldrb	r1, [r7, #11]
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f7ff ffb7 	bl	800e194 <inet_chksum_pseudo>
 800e226:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3710      	adds	r7, #16
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	460b      	mov	r3, r1
 800e23a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800e23c:	887b      	ldrh	r3, [r7, #2]
 800e23e:	4619      	mov	r1, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7ff fe9b 	bl	800df7c <lwip_standard_chksum>
 800e246:	4603      	mov	r3, r0
 800e248:	43db      	mvns	r3, r3
 800e24a:	b29b      	uxth	r3, r3
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800e25c:	2300      	movs	r3, #0
 800e25e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800e260:	2300      	movs	r3, #0
 800e262:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	613b      	str	r3, [r7, #16]
 800e268:	e02b      	b.n	800e2c2 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	685a      	ldr	r2, [r3, #4]
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	895b      	ldrh	r3, [r3, #10]
 800e272:	4619      	mov	r1, r3
 800e274:	4610      	mov	r0, r2
 800e276:	f7ff fe81 	bl	800df7c <lwip_standard_chksum>
 800e27a:	4603      	mov	r3, r0
 800e27c:	461a      	mov	r2, r3
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	4413      	add	r3, r2
 800e282:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	0c1a      	lsrs	r2, r3, #16
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	4413      	add	r3, r2
 800e28e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	895b      	ldrh	r3, [r3, #10]
 800e294:	f003 0301 	and.w	r3, r3, #1
 800e298:	b29b      	uxth	r3, r3
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00e      	beq.n	800e2bc <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	bf0c      	ite	eq
 800e2a4:	2301      	moveq	r3, #1
 800e2a6:	2300      	movne	r3, #0
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	021b      	lsls	r3, r3, #8
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	0a1b      	lsrs	r3, r3, #8
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	613b      	str	r3, [r7, #16]
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1d0      	bne.n	800e26a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d007      	beq.n	800e2de <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	021b      	lsls	r3, r3, #8
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	0a1b      	lsrs	r3, r3, #8
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	43db      	mvns	r3, r3
 800e2e4:	b29b      	uxth	r3, r3
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3718      	adds	r7, #24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b082      	sub	sp, #8
 800e2f2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 800e2f8:	f000 ff62 	bl	800f1c0 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800e2fc:	f000 f80e 	bl	800e31c <mem_init>
  memp_init();
 800e300:	f000 f842 	bl	800e388 <memp_init>
  pbuf_init();
  netif_init();
 800e304:	f000 f8da 	bl	800e4bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e308:	f006 f9c6 	bl	8014698 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e30c:	f000 ff60 	bl	800f1d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e310:	f006 f948 	bl	80145a4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e314:	bf00      	nop
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <mem_init>:
/** mem_init is not used when using pools instead of a heap or using
 * C library malloc().
 */
void
mem_init(void)
{
 800e31c:	b480      	push	{r7}
 800e31e:	af00      	add	r7, sp, #0
}
 800e320:	bf00      	nop
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr

0800e32a <mem_trim>:
 * C library malloc(): we can't free part of a pool element and the stack
 * support mem_trim() to return a different pointer
 */
void *
mem_trim(void *mem, mem_size_t size)
{
 800e32a:	b480      	push	{r7}
 800e32c:	b083      	sub	sp, #12
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	6039      	str	r1, [r7, #0]
  LWIP_UNUSED_ARG(size);
  return mem;
 800e334:	687b      	ldr	r3, [r7, #4]
}
 800e336:	4618      	mov	r0, r3
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr

0800e342 <mem_malloc>:
 *
 * Note that the returned value must always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b084      	sub	sp, #16
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
  void *ret = mem_clib_malloc(size + MEM_LIBC_STATSHELPER_SIZE);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f00a fea0 	bl	8019090 <malloc>
 800e350:	4603      	mov	r3, r0
 800e352:	60fb      	str	r3, [r7, #12]
    *(mem_size_t *)ret = size;
    ret = (u8_t *)ret + MEM_LIBC_STATSHELPER_SIZE;
    MEM_STATS_INC_USED_LOCKED(used, size);
#endif
  }
  return ret;
 800e354:	68fb      	ldr	r3, [r7, #12]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <mem_free>:
 *
 * @param rmem is the pointer as returned by a previous call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b082      	sub	sp, #8
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("rmem == MEM_ALIGN(rmem)", (rmem == LWIP_MEM_ALIGN(rmem)));
#if LWIP_STATS && MEM_STATS
  rmem = (u8_t *)rmem - MEM_LIBC_STATSHELPER_SIZE;
  MEM_STATS_DEC_USED_LOCKED(used, *(mem_size_t *)rmem);
#endif
  mem_clib_free(rmem);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f00a fe9a 	bl	80190a0 <free>
}
 800e36c:	bf00      	nop
 800e36e:	3708      	adds	r7, #8
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e37c:	bf00      	nop
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e38e:	2300      	movs	r3, #0
 800e390:	80fb      	strh	r3, [r7, #6]
 800e392:	e009      	b.n	800e3a8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e394:	88fb      	ldrh	r3, [r7, #6]
 800e396:	4a08      	ldr	r2, [pc, #32]	; (800e3b8 <memp_init+0x30>)
 800e398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff ffe9 	bl	800e374 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e3a2:	88fb      	ldrh	r3, [r7, #6]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	80fb      	strh	r3, [r7, #6]
 800e3a8:	88fb      	ldrh	r3, [r7, #6]
 800e3aa:	2b09      	cmp	r3, #9
 800e3ac:	d9f2      	bls.n	800e394 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e3ae:	bf00      	nop
 800e3b0:	bf00      	nop
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	0801bac4 	.word	0x0801bac4

0800e3bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	889b      	ldrh	r3, [r3, #4]
 800e3c8:	3303      	adds	r3, #3
 800e3ca:	f023 0303 	bic.w	r3, r3, #3
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7ff ffb7 	bl	800e342 <mem_malloc>
 800e3d4:	60f8      	str	r0, [r7, #12]
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <do_memp_malloc_pool+0x24>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	e000      	b.n	800e3e2 <do_memp_malloc_pool+0x26>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e3e0:	2300      	movs	r3, #0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b082      	sub	sp, #8
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  if (desc == NULL) {
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d101      	bne.n	800e3fc <memp_malloc_pool+0x12>
    return NULL;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	e003      	b.n	800e404 <memp_malloc_pool+0x1a>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7ff ffdd 	bl	800e3bc <do_memp_malloc_pool>
 800e402:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e404:	4618      	mov	r0, r3
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	4603      	mov	r3, r0
 800e414:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e416:	79fb      	ldrb	r3, [r7, #7]
 800e418:	2b09      	cmp	r3, #9
 800e41a:	d901      	bls.n	800e420 <memp_malloc+0x14>
 800e41c:	2300      	movs	r3, #0
 800e41e:	e008      	b.n	800e432 <memp_malloc+0x26>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e420:	79fb      	ldrb	r3, [r7, #7]
 800e422:	4a06      	ldr	r2, [pc, #24]	; (800e43c <memp_malloc+0x30>)
 800e424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e428:	4618      	mov	r0, r3
 800e42a:	f7ff ffc7 	bl	800e3bc <do_memp_malloc_pool>
 800e42e:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e430:	68fb      	ldr	r3, [r7, #12]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	0801bac4 	.word	0x0801bac4

0800e440 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	60fb      	str	r3, [r7, #12]
#endif

#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f7ff ff85 	bl	800e35e <mem_free>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800e454:	bf00      	nop
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  if ((desc == NULL) || (mem == NULL)) {
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d007      	beq.n	800e47c <memp_free_pool+0x20>
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d004      	beq.n	800e47c <memp_free_pool+0x20>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e472:	6839      	ldr	r1, [r7, #0]
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff ffe3 	bl	800e440 <do_memp_free_pool>
 800e47a:	e000      	b.n	800e47e <memp_free_pool+0x22>
    return;
 800e47c:	bf00      	nop
}
 800e47e:	3708      	adds	r7, #8
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
 800e48a:	4603      	mov	r3, r0
 800e48c:	6039      	str	r1, [r7, #0]
 800e48e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e490:	79fb      	ldrb	r3, [r7, #7]
 800e492:	2b09      	cmp	r3, #9
 800e494:	d80c      	bhi.n	800e4b0 <memp_free+0x2c>

  if (mem == NULL) {
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d008      	beq.n	800e4ae <memp_free+0x2a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e49c:	79fb      	ldrb	r3, [r7, #7]
 800e49e:	4a06      	ldr	r2, [pc, #24]	; (800e4b8 <memp_free+0x34>)
 800e4a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4a4:	6839      	ldr	r1, [r7, #0]
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7ff ffca 	bl	800e440 <do_memp_free_pool>
 800e4ac:	e000      	b.n	800e4b0 <memp_free+0x2c>
    return;
 800e4ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	0801bac4 	.word	0x0801bac4

0800e4bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e4c0:	bf00      	nop
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr
	...

0800e4cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b086      	sub	sp, #24
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d101      	bne.n	800e4e4 <netif_add+0x18>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	e08a      	b.n	800e5fa <netif_add+0x12e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d101      	bne.n	800e4ee <netif_add+0x22>
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	e085      	b.n	800e5fa <netif_add+0x12e>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d101      	bne.n	800e4f8 <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e4f4:	4b43      	ldr	r3, [pc, #268]	; (800e604 <netif_add+0x138>)
 800e4f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d101      	bne.n	800e502 <netif_add+0x36>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e4fe:	4b41      	ldr	r3, [pc, #260]	; (800e604 <netif_add+0x138>)
 800e500:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d101      	bne.n	800e50c <netif_add+0x40>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e508:	4b3e      	ldr	r3, [pc, #248]	; (800e604 <netif_add+0x138>)
 800e50a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2200      	movs	r2, #0
 800e516:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2200      	movs	r2, #0
 800e51c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	4a39      	ldr	r2, [pc, #228]	; (800e608 <netif_add+0x13c>)
 800e522:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2200      	movs	r2, #0
 800e528:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2200      	movs	r2, #0
 800e52e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	3320      	adds	r3, #32
 800e536:	2204      	movs	r2, #4
 800e538:	2100      	movs	r1, #0
 800e53a:	4618      	mov	r0, r3
 800e53c:	f00b f886 	bl	801964c <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6a3a      	ldr	r2, [r7, #32]
 800e544:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800e546:	4b31      	ldr	r3, [pc, #196]	; (800e60c <netif_add+0x140>)
 800e548:	781a      	ldrb	r2, [r3, #0]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e554:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	68b9      	ldr	r1, [r7, #8]
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f000 f8d7 	bl	800e710 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e564:	68f8      	ldr	r0, [r7, #12]
 800e566:	4798      	blx	r3
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d001      	beq.n	800e572 <netif_add+0xa6>
    return NULL;
 800e56e:	2300      	movs	r3, #0
 800e570:	e043      	b.n	800e5fa <netif_add+0x12e>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e578:	2bff      	cmp	r3, #255	; 0xff
 800e57a:	d103      	bne.n	800e584 <netif_add+0xb8>
        netif->num = 0;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800e584:	2300      	movs	r3, #0
 800e586:	617b      	str	r3, [r7, #20]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e588:	4b21      	ldr	r3, [pc, #132]	; (800e610 <netif_add+0x144>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	613b      	str	r3, [r7, #16]
 800e58e:	e016      	b.n	800e5be <netif_add+0xf2>
        LWIP_ASSERT("netif already added", netif2 != netif);
        num_netifs++;
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	3301      	adds	r3, #1
 800e594:	617b      	str	r3, [r7, #20]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
        if (netif2->num == netif->num) {
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d108      	bne.n	800e5b8 <netif_add+0xec>
          netif->num++;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800e5b6:	e005      	b.n	800e5c4 <netif_add+0xf8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	613b      	str	r3, [r7, #16]
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1e5      	bne.n	800e590 <netif_add+0xc4>
        }
      }
    } while (netif2 != NULL);
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d1d3      	bne.n	800e572 <netif_add+0xa6>
  }
  if (netif->num == 254) {
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5d0:	2bfe      	cmp	r3, #254	; 0xfe
 800e5d2:	d103      	bne.n	800e5dc <netif_add+0x110>
    netif_num = 0;
 800e5d4:	4b0d      	ldr	r3, [pc, #52]	; (800e60c <netif_add+0x140>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	701a      	strb	r2, [r3, #0]
 800e5da:	e006      	b.n	800e5ea <netif_add+0x11e>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	4b09      	ldr	r3, [pc, #36]	; (800e60c <netif_add+0x140>)
 800e5e8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e5ea:	4b09      	ldr	r3, [pc, #36]	; (800e610 <netif_add+0x144>)
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e5f2:	4a07      	ldr	r2, [pc, #28]	; (800e610 <netif_add+0x144>)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3718      	adds	r7, #24
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	0801bb3c 	.word	0x0801bb3c
 800e608:	0800e8a3 	.word	0x0800e8a3
 800e60c:	20007708 	.word	0x20007708
 800e610:	20007700 	.word	0x20007700

0800e614 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e61e:	6839      	ldr	r1, [r7, #0]
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f002 f90d 	bl	8010840 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e626:	6839      	ldr	r1, [r7, #0]
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f006 fc6d 	bl	8014f08 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e62e:	bf00      	nop
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b086      	sub	sp, #24
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	60f8      	str	r0, [r7, #12]
 800e63e:	60b9      	str	r1, [r7, #8]
 800e640:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
  LWIP_ASSERT("invalid pointer", old_addr != NULL);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	3304      	adds	r3, #4
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d01c      	beq.n	800e68a <netif_do_set_ipaddr+0x54>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	3304      	adds	r3, #4
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e660:	f107 0314 	add.w	r3, r7, #20
 800e664:	4619      	mov	r1, r3
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7ff ffd4 	bl	800e614 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d002      	beq.n	800e678 <netif_do_set_ipaddr+0x42>
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	e000      	b.n	800e67a <netif_do_set_ipaddr+0x44>
 800e678:	2300      	movs	r3, #0
 800e67a:	68fa      	ldr	r2, [r7, #12]
 800e67c:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e67e:	2101      	movs	r1, #1
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f000 f8bd 	bl	800e800 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e686:	2301      	movs	r3, #1
 800e688:	e000      	b.n	800e68c <netif_do_set_ipaddr+0x56>
  }
  return 0; /* address unchanged */
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3718      	adds	r7, #24
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e694:	b480      	push	{r7}
 800e696:	b085      	sub	sp, #20
 800e698:	af00      	add	r7, sp, #0
 800e69a:	60f8      	str	r0, [r7, #12]
 800e69c:	60b9      	str	r1, [r7, #8]
 800e69e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	3308      	adds	r3, #8
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d00a      	beq.n	800e6c4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d002      	beq.n	800e6ba <netif_do_set_netmask+0x26>
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	e000      	b.n	800e6bc <netif_do_set_netmask+0x28>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	e000      	b.n	800e6c6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3714      	adds	r7, #20
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e6d2:	b480      	push	{r7}
 800e6d4:	b085      	sub	sp, #20
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	60f8      	str	r0, [r7, #12]
 800e6da:	60b9      	str	r1, [r7, #8]
 800e6dc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	330c      	adds	r3, #12
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d00a      	beq.n	800e702 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d002      	beq.n	800e6f8 <netif_do_set_gw+0x26>
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	e000      	b.n	800e6fa <netif_do_set_gw+0x28>
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e6fe:	2301      	movs	r3, #1
 800e700:	e000      	b.n	800e704 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e702:	2300      	movs	r3, #0
}
 800e704:	4618      	mov	r0, r3
 800e706:	3714      	adds	r7, #20
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr

0800e710 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b088      	sub	sp, #32
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	607a      	str	r2, [r7, #4]
 800e71c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e71e:	2300      	movs	r3, #0
 800e720:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e722:	2300      	movs	r3, #0
 800e724:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d101      	bne.n	800e730 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e72c:	4b1c      	ldr	r3, [pc, #112]	; (800e7a0 <netif_set_addr+0x90>)
 800e72e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d101      	bne.n	800e73a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e736:	4b1a      	ldr	r3, [pc, #104]	; (800e7a0 <netif_set_addr+0x90>)
 800e738:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d101      	bne.n	800e744 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e740:	4b17      	ldr	r3, [pc, #92]	; (800e7a0 <netif_set_addr+0x90>)
 800e742:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d003      	beq.n	800e752 <netif_set_addr+0x42>
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d101      	bne.n	800e756 <netif_set_addr+0x46>
 800e752:	2301      	movs	r3, #1
 800e754:	e000      	b.n	800e758 <netif_set_addr+0x48>
 800e756:	2300      	movs	r3, #0
 800e758:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d006      	beq.n	800e76e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e760:	f107 0310 	add.w	r3, r7, #16
 800e764:	461a      	mov	r2, r3
 800e766:	68b9      	ldr	r1, [r7, #8]
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f7ff ff64 	bl	800e636 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e76e:	69fa      	ldr	r2, [r7, #28]
 800e770:	6879      	ldr	r1, [r7, #4]
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f7ff ff8e 	bl	800e694 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e778:	69ba      	ldr	r2, [r7, #24]
 800e77a:	6839      	ldr	r1, [r7, #0]
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f7ff ffa8 	bl	800e6d2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d106      	bne.n	800e796 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e788:	f107 0310 	add.w	r3, r7, #16
 800e78c:	461a      	mov	r2, r3
 800e78e:	68b9      	ldr	r1, [r7, #8]
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f7ff ff50 	bl	800e636 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e796:	bf00      	nop
 800e798:	3720      	adds	r7, #32
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	0801bb3c 	.word	0x0801bb3c

0800e7a4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e7ac:	4a04      	ldr	r2, [pc, #16]	; (800e7c0 <netif_set_default+0x1c>)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e7b2:	bf00      	nop
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	20007704 	.word	0x20007704

0800e7c4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d013      	beq.n	800e7fa <netif_set_up+0x36>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e7d8:	f003 0301 	and.w	r3, r3, #1
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10c      	bne.n	800e7fa <netif_set_up+0x36>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e7e6:	f043 0301 	orr.w	r3, r3, #1
 800e7ea:	b2da      	uxtb	r2, r3
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e7f2:	2103      	movs	r1, #3
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 f803 	bl	800e800 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e7fa:	3708      	adds	r7, #8
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	460b      	mov	r3, r1
 800e80a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e812:	f003 0304 	and.w	r3, r3, #4
 800e816:	2b00      	cmp	r3, #0
 800e818:	d01e      	beq.n	800e858 <netif_issue_reports+0x58>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e820:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e824:	2b00      	cmp	r3, #0
 800e826:	d017      	beq.n	800e858 <netif_issue_reports+0x58>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e828:	78fb      	ldrb	r3, [r7, #3]
 800e82a:	f003 0301 	and.w	r3, r3, #1
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d013      	beq.n	800e85a <netif_issue_reports+0x5a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	3304      	adds	r3, #4
 800e836:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00e      	beq.n	800e85a <netif_issue_reports+0x5a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e842:	f003 0308 	and.w	r3, r3, #8
 800e846:	2b00      	cmp	r3, #0
 800e848:	d007      	beq.n	800e85a <netif_issue_reports+0x5a>
      etharp_gratuitous(netif);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	3304      	adds	r3, #4
 800e84e:	4619      	mov	r1, r3
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f008 ffed 	bl	8017830 <etharp_request>
 800e856:	e000      	b.n	800e85a <netif_issue_reports+0x5a>
    return;
 800e858:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e85a:	3708      	adds	r7, #8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d016      	beq.n	800e89c <netif_set_link_up+0x3c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e874:	f003 0304 	and.w	r3, r3, #4
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d10f      	bne.n	800e89c <netif_set_link_up+0x3c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e882:	f043 0304 	orr.w	r3, r3, #4
 800e886:	b2da      	uxtb	r2, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f006 ff20 	bl	80156d4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e894:	2103      	movs	r1, #3
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7ff ffb2 	bl	800e800 <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e8a2:	b480      	push	{r7}
 800e8a4:	b085      	sub	sp, #20
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e8ae:	f06f 030b 	mvn.w	r3, #11
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3714      	adds	r7, #20
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
	...

0800e8c0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b085      	sub	sp, #20
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d013      	beq.n	800e8f8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e8d0:	4b0d      	ldr	r3, [pc, #52]	; (800e908 <netif_get_by_index+0x48>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	60fb      	str	r3, [r7, #12]
 800e8d6:	e00c      	b.n	800e8f2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8de:	3301      	adds	r3, #1
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	79fa      	ldrb	r2, [r7, #7]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d101      	bne.n	800e8ec <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	e006      	b.n	800e8fa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	60fb      	str	r3, [r7, #12]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1ef      	bne.n	800e8d8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e8f8:	2300      	movs	r3, #0
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3714      	adds	r7, #20
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	20007700 	.word	0x20007700

0800e90c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e912:	4b0c      	ldr	r3, [pc, #48]	; (800e944 <pbuf_free_ooseq+0x38>)
 800e914:	2200      	movs	r2, #0
 800e916:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e918:	4b0b      	ldr	r3, [pc, #44]	; (800e948 <pbuf_free_ooseq+0x3c>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	607b      	str	r3, [r7, #4]
 800e91e:	e00a      	b.n	800e936 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e924:	2b00      	cmp	r3, #0
 800e926:	d003      	beq.n	800e930 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f001 ffc7 	bl	80108bc <tcp_free_ooseq>
      return;
 800e92e:	e005      	b.n	800e93c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	607b      	str	r3, [r7, #4]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1f1      	bne.n	800e920 <pbuf_free_ooseq+0x14>
    }
  }
}
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	20007709 	.word	0x20007709
 800e948:	200077c0 	.word	0x200077c0

0800e94c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e94c:	b480      	push	{r7}
 800e94e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800e950:	4b03      	ldr	r3, [pc, #12]	; (800e960 <pbuf_pool_is_empty+0x14>)
 800e952:	2201      	movs	r2, #1
 800e954:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e956:	bf00      	nop
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr
 800e960:	20007709 	.word	0x20007709

0800e964 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	4611      	mov	r1, r2
 800e970:	461a      	mov	r2, r3
 800e972:	460b      	mov	r3, r1
 800e974:	80fb      	strh	r3, [r7, #6]
 800e976:	4613      	mov	r3, r2
 800e978:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2200      	movs	r2, #0
 800e97e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	68ba      	ldr	r2, [r7, #8]
 800e984:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	88fa      	ldrh	r2, [r7, #6]
 800e98a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	88ba      	ldrh	r2, [r7, #4]
 800e990:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e992:	8b3b      	ldrh	r3, [r7, #24]
 800e994:	b2da      	uxtb	r2, r3
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	7f3a      	ldrb	r2, [r7, #28]
 800e99e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	73da      	strb	r2, [r3, #15]
}
 800e9ac:	bf00      	nop
 800e9ae:	3714      	adds	r7, #20
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b08c      	sub	sp, #48	; 0x30
 800e9bc:	af02      	add	r7, sp, #8
 800e9be:	4603      	mov	r3, r0
 800e9c0:	71fb      	strb	r3, [r7, #7]
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	80bb      	strh	r3, [r7, #4]
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e9ca:	79fb      	ldrb	r3, [r7, #7]
 800e9cc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e9ce:	887b      	ldrh	r3, [r7, #2]
 800e9d0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e9d4:	d065      	beq.n	800eaa2 <pbuf_alloc+0xea>
 800e9d6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e9da:	f300 80a0 	bgt.w	800eb1e <pbuf_alloc+0x166>
 800e9de:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e9e2:	d010      	beq.n	800ea06 <pbuf_alloc+0x4e>
 800e9e4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e9e8:	f300 8099 	bgt.w	800eb1e <pbuf_alloc+0x166>
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d002      	beq.n	800e9f6 <pbuf_alloc+0x3e>
 800e9f0:	2b41      	cmp	r3, #65	; 0x41
 800e9f2:	f040 8094 	bne.w	800eb1e <pbuf_alloc+0x166>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e9f6:	887a      	ldrh	r2, [r7, #2]
 800e9f8:	88bb      	ldrh	r3, [r7, #4]
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	f000 f895 	bl	800eb2c <pbuf_alloc_reference>
 800ea02:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ea04:	e08d      	b.n	800eb22 <pbuf_alloc+0x16a>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ea0e:	88bb      	ldrh	r3, [r7, #4]
 800ea10:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ea12:	2009      	movs	r0, #9
 800ea14:	f7ff fcfa 	bl	800e40c <memp_malloc>
 800ea18:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d109      	bne.n	800ea34 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ea20:	f7ff ff94 	bl	800e94c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d002      	beq.n	800ea30 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ea2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea2c:	f000 fa06 	bl	800ee3c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ea30:	2300      	movs	r3, #0
 800ea32:	e077      	b.n	800eb24 <pbuf_alloc+0x16c>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ea34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea36:	3303      	adds	r3, #3
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	f023 0303 	bic.w	r3, r3, #3
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	f5c3 63d4 	rsb	r3, r3, #1696	; 0x6a0
 800ea44:	3304      	adds	r3, #4
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	8b7a      	ldrh	r2, [r7, #26]
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	bf28      	it	cs
 800ea4e:	4613      	movcs	r3, r2
 800ea50:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ea52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea54:	3310      	adds	r3, #16
 800ea56:	693a      	ldr	r2, [r7, #16]
 800ea58:	4413      	add	r3, r2
 800ea5a:	3303      	adds	r3, #3
 800ea5c:	f023 0303 	bic.w	r3, r3, #3
 800ea60:	4618      	mov	r0, r3
 800ea62:	89f9      	ldrh	r1, [r7, #14]
 800ea64:	8b7a      	ldrh	r2, [r7, #26]
 800ea66:	2300      	movs	r3, #0
 800ea68:	9301      	str	r3, [sp, #4]
 800ea6a:	887b      	ldrh	r3, [r7, #2]
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	460b      	mov	r3, r1
 800ea70:	4601      	mov	r1, r0
 800ea72:	6938      	ldr	r0, [r7, #16]
 800ea74:	f7ff ff76 	bl	800e964 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ea78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d102      	bne.n	800ea84 <pbuf_alloc+0xcc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	627b      	str	r3, [r7, #36]	; 0x24
 800ea82:	e002      	b.n	800ea8a <pbuf_alloc+0xd2>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	693a      	ldr	r2, [r7, #16]
 800ea88:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ea8e:	8b7a      	ldrh	r2, [r7, #26]
 800ea90:	89fb      	ldrh	r3, [r7, #14]
 800ea92:	1ad3      	subs	r3, r2, r3
 800ea94:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ea96:	2300      	movs	r3, #0
 800ea98:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ea9a:	8b7b      	ldrh	r3, [r7, #26]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1b8      	bne.n	800ea12 <pbuf_alloc+0x5a>
      break;
 800eaa0:	e03f      	b.n	800eb22 <pbuf_alloc+0x16a>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800eaa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaa4:	3303      	adds	r3, #3
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	f023 0303 	bic.w	r3, r3, #3
 800eaac:	b29a      	uxth	r2, r3
 800eaae:	88bb      	ldrh	r3, [r7, #4]
 800eab0:	3303      	adds	r3, #3
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	f023 0303 	bic.w	r3, r3, #3
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	4413      	add	r3, r2
 800eabc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800eabe:	8b3b      	ldrh	r3, [r7, #24]
 800eac0:	3310      	adds	r3, #16
 800eac2:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800eac4:	8b3a      	ldrh	r2, [r7, #24]
 800eac6:	88bb      	ldrh	r3, [r7, #4]
 800eac8:	3303      	adds	r3, #3
 800eaca:	f023 0303 	bic.w	r3, r3, #3
 800eace:	429a      	cmp	r2, r3
 800ead0:	d306      	bcc.n	800eae0 <pbuf_alloc+0x128>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ead2:	88bb      	ldrh	r3, [r7, #4]
 800ead4:	3303      	adds	r3, #3
 800ead6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800eada:	697a      	ldr	r2, [r7, #20]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d201      	bcs.n	800eae4 <pbuf_alloc+0x12c>
        return NULL;
 800eae0:	2300      	movs	r3, #0
 800eae2:	e01f      	b.n	800eb24 <pbuf_alloc+0x16c>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800eae4:	6978      	ldr	r0, [r7, #20]
 800eae6:	f7ff fc2c 	bl	800e342 <mem_malloc>
 800eaea:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d101      	bne.n	800eaf6 <pbuf_alloc+0x13e>
        return NULL;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	e016      	b.n	800eb24 <pbuf_alloc+0x16c>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800eaf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaf8:	3310      	adds	r3, #16
 800eafa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eafc:	4413      	add	r3, r2
 800eafe:	3303      	adds	r3, #3
 800eb00:	f023 0303 	bic.w	r3, r3, #3
 800eb04:	4618      	mov	r0, r3
 800eb06:	88b9      	ldrh	r1, [r7, #4]
 800eb08:	88ba      	ldrh	r2, [r7, #4]
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	9301      	str	r3, [sp, #4]
 800eb0e:	887b      	ldrh	r3, [r7, #2]
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	460b      	mov	r3, r1
 800eb14:	4601      	mov	r1, r0
 800eb16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb18:	f7ff ff24 	bl	800e964 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800eb1c:	e001      	b.n	800eb22 <pbuf_alloc+0x16a>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
      return NULL;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	e000      	b.n	800eb24 <pbuf_alloc+0x16c>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800eb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3728      	adds	r7, #40	; 0x28
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b086      	sub	sp, #24
 800eb30:	af02      	add	r7, sp, #8
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	460b      	mov	r3, r1
 800eb36:	807b      	strh	r3, [r7, #2]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800eb3c:	2008      	movs	r0, #8
 800eb3e:	f7ff fc65 	bl	800e40c <memp_malloc>
 800eb42:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d101      	bne.n	800eb4e <pbuf_alloc_reference+0x22>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	e00b      	b.n	800eb66 <pbuf_alloc_reference+0x3a>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800eb4e:	8879      	ldrh	r1, [r7, #2]
 800eb50:	887a      	ldrh	r2, [r7, #2]
 800eb52:	2300      	movs	r3, #0
 800eb54:	9301      	str	r3, [sp, #4]
 800eb56:	883b      	ldrh	r3, [r7, #0]
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	6879      	ldr	r1, [r7, #4]
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f7ff ff00 	bl	800e964 <pbuf_init_alloced_pbuf>
  return p;
 800eb64:	68fb      	ldr	r3, [r7, #12]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b088      	sub	sp, #32
 800eb72:	af02      	add	r7, sp, #8
 800eb74:	607b      	str	r3, [r7, #4]
 800eb76:	4603      	mov	r3, r0
 800eb78:	73fb      	strb	r3, [r7, #15]
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	81bb      	strh	r3, [r7, #12]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800eb82:	7bfb      	ldrb	r3, [r7, #15]
 800eb84:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800eb86:	8a7b      	ldrh	r3, [r7, #18]
 800eb88:	3303      	adds	r3, #3
 800eb8a:	f023 0203 	bic.w	r2, r3, #3
 800eb8e:	89bb      	ldrh	r3, [r7, #12]
 800eb90:	441a      	add	r2, r3
 800eb92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d901      	bls.n	800eb9c <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	e018      	b.n	800ebce <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800eb9c:	6a3b      	ldr	r3, [r7, #32]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d007      	beq.n	800ebb2 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800eba2:	8a7b      	ldrh	r3, [r7, #18]
 800eba4:	3303      	adds	r3, #3
 800eba6:	f023 0303 	bic.w	r3, r3, #3
 800ebaa:	6a3a      	ldr	r2, [r7, #32]
 800ebac:	4413      	add	r3, r2
 800ebae:	617b      	str	r3, [r7, #20]
 800ebb0:	e001      	b.n	800ebb6 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	89b9      	ldrh	r1, [r7, #12]
 800ebba:	89ba      	ldrh	r2, [r7, #12]
 800ebbc:	2302      	movs	r3, #2
 800ebbe:	9301      	str	r3, [sp, #4]
 800ebc0:	897b      	ldrh	r3, [r7, #10]
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	6979      	ldr	r1, [r7, #20]
 800ebc8:	f7ff fecc 	bl	800e964 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ebcc:	687b      	ldr	r3, [r7, #4]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3718      	adds	r7, #24
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b084      	sub	sp, #16
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
 800ebde:	460b      	mov	r3, r1
 800ebe0:	807b      	strh	r3, [r7, #2]
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	891b      	ldrh	r3, [r3, #8]
 800ebe6:	887a      	ldrh	r2, [r7, #2]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d24d      	bcs.n	800ec88 <pbuf_realloc+0xb2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	891a      	ldrh	r2, [r3, #8]
 800ebf0:	887b      	ldrh	r3, [r7, #2]
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ebf6:	887b      	ldrh	r3, [r7, #2]
 800ebf8:	817b      	strh	r3, [r7, #10]
  q = p;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ebfe:	e00e      	b.n	800ec1e <pbuf_realloc+0x48>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	895b      	ldrh	r3, [r3, #10]
 800ec04:	897a      	ldrh	r2, [r7, #10]
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	891a      	ldrh	r2, [r3, #8]
 800ec0e:	893b      	ldrh	r3, [r7, #8]
 800ec10:	1ad3      	subs	r3, r2, r3
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	60fb      	str	r3, [r7, #12]
  while (rem_len > q->len) {
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	895b      	ldrh	r3, [r3, #10]
 800ec22:	897a      	ldrh	r2, [r7, #10]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d8eb      	bhi.n	800ec00 <pbuf_realloc+0x2a>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	7b1b      	ldrb	r3, [r3, #12]
 800ec2c:	f003 030f 	and.w	r3, r3, #15
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d115      	bne.n	800ec60 <pbuf_realloc+0x8a>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	895b      	ldrh	r3, [r3, #10]
 800ec38:	897a      	ldrh	r2, [r7, #10]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d010      	beq.n	800ec60 <pbuf_realloc+0x8a>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	7b5b      	ldrb	r3, [r3, #13]
 800ec42:	f003 0302 	and.w	r3, r3, #2
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d10a      	bne.n	800ec60 <pbuf_realloc+0x8a>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	685a      	ldr	r2, [r3, #4]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	1ad2      	subs	r2, r2, r3
 800ec52:	897b      	ldrh	r3, [r7, #10]
 800ec54:	4413      	add	r3, r2
 800ec56:	4619      	mov	r1, r3
 800ec58:	68f8      	ldr	r0, [r7, #12]
 800ec5a:	f7ff fb66 	bl	800e32a <mem_trim>
 800ec5e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	897a      	ldrh	r2, [r7, #10]
 800ec64:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	895a      	ldrh	r2, [r3, #10]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d004      	beq.n	800ec80 <pbuf_realloc+0xaa>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f000 f8de 	bl	800ee3c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2200      	movs	r2, #0
 800ec84:	601a      	str	r2, [r3, #0]
 800ec86:	e000      	b.n	800ec8a <pbuf_realloc+0xb4>
    return;
 800ec88:	bf00      	nop

}
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b087      	sub	sp, #28
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d003      	beq.n	800ecac <pbuf_add_header_impl+0x1c>
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecaa:	d301      	bcc.n	800ecb0 <pbuf_add_header_impl+0x20>
    return 1;
 800ecac:	2301      	movs	r3, #1
 800ecae:	e043      	b.n	800ed38 <pbuf_add_header_impl+0xa8>
  }
  if (header_size_increment == 0) {
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d101      	bne.n	800ecba <pbuf_add_header_impl+0x2a>
    return 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	e03e      	b.n	800ed38 <pbuf_add_header_impl+0xa8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	891a      	ldrh	r2, [r3, #8]
 800ecc2:	8a7b      	ldrh	r3, [r7, #18]
 800ecc4:	4413      	add	r3, r2
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	8a7a      	ldrh	r2, [r7, #18]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d901      	bls.n	800ecd2 <pbuf_add_header_impl+0x42>
    return 1;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e032      	b.n	800ed38 <pbuf_add_header_impl+0xa8>
  }

  type_internal = p->type_internal;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	7b1b      	ldrb	r3, [r3, #12]
 800ecd6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ecd8:	8a3b      	ldrh	r3, [r7, #16]
 800ecda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00c      	beq.n	800ecfc <pbuf_add_header_impl+0x6c>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	425b      	negs	r3, r3
 800ecea:	4413      	add	r3, r2
 800ecec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	3310      	adds	r3, #16
 800ecf2:	697a      	ldr	r2, [r7, #20]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d20d      	bcs.n	800ed14 <pbuf_add_header_impl+0x84>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	e01d      	b.n	800ed38 <pbuf_add_header_impl+0xa8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ecfc:	79fb      	ldrb	r3, [r7, #7]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d006      	beq.n	800ed10 <pbuf_add_header_impl+0x80>
      payload = (u8_t *)p->payload - header_size_increment;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	685a      	ldr	r2, [r3, #4]
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	425b      	negs	r3, r3
 800ed0a:	4413      	add	r3, r2
 800ed0c:	617b      	str	r3, [r7, #20]
 800ed0e:	e001      	b.n	800ed14 <pbuf_add_header_impl+0x84>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ed10:	2301      	movs	r3, #1
 800ed12:	e011      	b.n	800ed38 <pbuf_add_header_impl+0xa8>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	895a      	ldrh	r2, [r3, #10]
 800ed1e:	8a7b      	ldrh	r3, [r7, #18]
 800ed20:	4413      	add	r3, r2
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	891a      	ldrh	r2, [r3, #8]
 800ed2c:	8a7b      	ldrh	r3, [r7, #18]
 800ed2e:	4413      	add	r3, r2
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	811a      	strh	r2, [r3, #8]


  return 0;
 800ed36:	2300      	movs	r3, #0
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	371c      	adds	r7, #28
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ed4e:	2200      	movs	r2, #0
 800ed50:	6839      	ldr	r1, [r7, #0]
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7ff ff9c 	bl	800ec90 <pbuf_add_header_impl>
 800ed58:	4603      	mov	r3, r0
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ed62:	b480      	push	{r7}
 800ed64:	b085      	sub	sp, #20
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
 800ed6a:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d003      	beq.n	800ed7a <pbuf_remove_header+0x18>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed78:	d301      	bcc.n	800ed7e <pbuf_remove_header+0x1c>
    return 1;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e025      	b.n	800edca <pbuf_remove_header+0x68>
  }
  if (header_size_decrement == 0) {
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d101      	bne.n	800ed88 <pbuf_remove_header+0x26>
    return 0;
 800ed84:	2300      	movs	r3, #0
 800ed86:	e020      	b.n	800edca <pbuf_remove_header+0x68>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	895b      	ldrh	r3, [r3, #10]
 800ed90:	89fa      	ldrh	r2, [r7, #14]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d901      	bls.n	800ed9a <pbuf_remove_header+0x38>
 800ed96:	2301      	movs	r3, #1
 800ed98:	e017      	b.n	800edca <pbuf_remove_header+0x68>

  /* remember current payload pointer */
  payload = p->payload;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	685a      	ldr	r2, [r3, #4]
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	441a      	add	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	895a      	ldrh	r2, [r3, #10]
 800edb0:	89fb      	ldrh	r3, [r7, #14]
 800edb2:	1ad3      	subs	r3, r2, r3
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	891a      	ldrh	r2, [r3, #8]
 800edbe:	89fb      	ldrh	r3, [r7, #14]
 800edc0:	1ad3      	subs	r3, r2, r3
 800edc2:	b29a      	uxth	r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800edc8:	2300      	movs	r3, #0
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3714      	adds	r7, #20
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr

0800edd6 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b082      	sub	sp, #8
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	460b      	mov	r3, r1
 800ede0:	807b      	strh	r3, [r7, #2]
 800ede2:	4613      	mov	r3, r2
 800ede4:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ede6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800edea:	2b00      	cmp	r3, #0
 800edec:	da08      	bge.n	800ee00 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800edee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800edf2:	425b      	negs	r3, r3
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7ff ffb3 	bl	800ed62 <pbuf_remove_header>
 800edfc:	4603      	mov	r3, r0
 800edfe:	e007      	b.n	800ee10 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ee00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ee04:	787a      	ldrb	r2, [r7, #1]
 800ee06:	4619      	mov	r1, r3
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7ff ff41 	bl	800ec90 <pbuf_add_header_impl>
 800ee0e:	4603      	mov	r3, r0
  }
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	460b      	mov	r3, r1
 800ee22:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ee24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f7ff ffd2 	bl	800edd6 <pbuf_header_impl>
 800ee32:	4603      	mov	r3, r0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3708      	adds	r7, #8
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b086      	sub	sp, #24
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d101      	bne.n	800ee4e <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	e045      	b.n	800eeda <pbuf_free+0x9e>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ee52:	e03e      	b.n	800eed2 <pbuf_free+0x96>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	7b9b      	ldrb	r3, [r3, #14]
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	739a      	strb	r2, [r3, #14]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	7b9b      	ldrb	r3, [r3, #14]
 800ee64:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ee66:	7dbb      	ldrb	r3, [r7, #22]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d130      	bne.n	800eece <pbuf_free+0x92>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	7b1b      	ldrb	r3, [r3, #12]
 800ee76:	f003 030f 	and.w	r3, r3, #15
 800ee7a:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	7b5b      	ldrb	r3, [r3, #13]
 800ee80:	f003 0302 	and.w	r3, r3, #2
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d006      	beq.n	800ee96 <pbuf_free+0x5a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	691b      	ldr	r3, [r3, #16]
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	4798      	blx	r3
 800ee94:	e015      	b.n	800eec2 <pbuf_free+0x86>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ee96:	7bfb      	ldrb	r3, [r7, #15]
 800ee98:	2b02      	cmp	r3, #2
 800ee9a:	d104      	bne.n	800eea6 <pbuf_free+0x6a>
          memp_free(MEMP_PBUF_POOL, p);
 800ee9c:	6879      	ldr	r1, [r7, #4]
 800ee9e:	2009      	movs	r0, #9
 800eea0:	f7ff faf0 	bl	800e484 <memp_free>
 800eea4:	e00d      	b.n	800eec2 <pbuf_free+0x86>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800eea6:	7bfb      	ldrb	r3, [r7, #15]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d104      	bne.n	800eeb6 <pbuf_free+0x7a>
          memp_free(MEMP_PBUF, p);
 800eeac:	6879      	ldr	r1, [r7, #4]
 800eeae:	2008      	movs	r0, #8
 800eeb0:	f7ff fae8 	bl	800e484 <memp_free>
 800eeb4:	e005      	b.n	800eec2 <pbuf_free+0x86>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d102      	bne.n	800eec2 <pbuf_free+0x86>
          mem_free(p);
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7ff fa4e 	bl	800e35e <mem_free>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 800eec2:	7dfb      	ldrb	r3, [r7, #23]
 800eec4:	3301      	adds	r3, #1
 800eec6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	607b      	str	r3, [r7, #4]
 800eecc:	e001      	b.n	800eed2 <pbuf_free+0x96>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800eece:	2300      	movs	r3, #0
 800eed0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d1bd      	bne.n	800ee54 <pbuf_free+0x18>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800eed8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3718      	adds	r7, #24
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800eee2:	b480      	push	{r7}
 800eee4:	b085      	sub	sp, #20
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800eeea:	2300      	movs	r3, #0
 800eeec:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800eeee:	e005      	b.n	800eefc <pbuf_clen+0x1a>
    ++len;
 800eef0:	89fb      	ldrh	r3, [r7, #14]
 800eef2:	3301      	adds	r3, #1
 800eef4:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1f6      	bne.n	800eef0 <pbuf_clen+0xe>
  }
  return len;
 800ef02:	89fb      	ldrh	r3, [r7, #14]
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3714      	adds	r7, #20
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d005      	beq.n	800ef2a <pbuf_ref+0x1a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	7b9b      	ldrb	r3, [r3, #14]
 800ef22:	3301      	adds	r3, #1
 800ef24:	b2da      	uxtb	r2, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  }
}
 800ef2a:	bf00      	nop
 800ef2c:	370c      	adds	r7, #12
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr

0800ef36 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ef36:	b480      	push	{r7}
 800ef38:	b085      	sub	sp, #20
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
 800ef3e:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d01f      	beq.n	800ef86 <pbuf_cat+0x50>
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d01c      	beq.n	800ef86 <pbuf_cat+0x50>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	60fb      	str	r3, [r7, #12]
 800ef50:	e00a      	b.n	800ef68 <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	891a      	ldrh	r2, [r3, #8]
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	891b      	ldrh	r3, [r3, #8]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	60fb      	str	r3, [r7, #12]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d1f0      	bne.n	800ef52 <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	891a      	ldrh	r2, [r3, #8]
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	891b      	ldrh	r3, [r3, #8]
 800ef78:	4413      	add	r3, r2
 800ef7a:	b29a      	uxth	r2, r3
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	683a      	ldr	r2, [r7, #0]
 800ef84:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ef86:	3714      	adds	r7, #20
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7ff ffca 	bl	800ef36 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800efa2:	6838      	ldr	r0, [r7, #0]
 800efa4:	f7ff ffb4 	bl	800ef10 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800efa8:	bf00      	nop
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b086      	sub	sp, #24
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800efba:	2300      	movs	r3, #0
 800efbc:	617b      	str	r3, [r7, #20]
 800efbe:	2300      	movs	r3, #0
 800efc0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d008      	beq.n	800efda <pbuf_copy+0x2a>
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d005      	beq.n	800efda <pbuf_copy+0x2a>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	891a      	ldrh	r2, [r3, #8]
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	891b      	ldrh	r3, [r3, #8]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d202      	bcs.n	800efe0 <pbuf_copy+0x30>
 800efda:	f06f 030f 	mvn.w	r3, #15
 800efde:	e06f      	b.n	800f0c0 <pbuf_copy+0x110>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	895b      	ldrh	r3, [r3, #10]
 800efe4:	461a      	mov	r2, r3
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	1ad2      	subs	r2, r2, r3
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	895b      	ldrh	r3, [r3, #10]
 800efee:	4619      	mov	r1, r3
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	1acb      	subs	r3, r1, r3
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d306      	bcc.n	800f006 <pbuf_copy+0x56>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	895b      	ldrh	r3, [r3, #10]
 800effc:	461a      	mov	r2, r3
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	e005      	b.n	800f012 <pbuf_copy+0x62>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	895b      	ldrh	r3, [r3, #10]
 800f00a:	461a      	mov	r2, r3
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	685a      	ldr	r2, [r3, #4]
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	18d0      	adds	r0, r2, r3
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	685a      	ldr	r2, [r3, #4]
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	4413      	add	r3, r2
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	4619      	mov	r1, r3
 800f026:	f00a fbbc 	bl	80197a2 <memcpy>
    offset_to += len;
 800f02a:	697a      	ldr	r2, [r7, #20]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	4413      	add	r3, r2
 800f030:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f032:	693a      	ldr	r2, [r7, #16]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4413      	add	r3, r2
 800f038:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	895b      	ldrh	r3, [r3, #10]
 800f03e:	461a      	mov	r2, r3
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	4293      	cmp	r3, r2
 800f044:	d304      	bcc.n	800f050 <pbuf_copy+0xa0>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f046:	2300      	movs	r3, #0
 800f048:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	895b      	ldrh	r3, [r3, #10]
 800f054:	461a      	mov	r2, r3
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	4293      	cmp	r3, r2
 800f05a:	d10d      	bne.n	800f078 <pbuf_copy+0xc8>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f05c:	2300      	movs	r3, #0
 800f05e:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d105      	bne.n	800f078 <pbuf_copy+0xc8>
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d002      	beq.n	800f078 <pbuf_copy+0xc8>
 800f072:	f06f 030f 	mvn.w	r3, #15
 800f076:	e023      	b.n	800f0c0 <pbuf_copy+0x110>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00c      	beq.n	800f098 <pbuf_copy+0xe8>
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	895a      	ldrh	r2, [r3, #10]
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	891b      	ldrh	r3, [r3, #8]
 800f086:	429a      	cmp	r2, r3
 800f088:	d106      	bne.n	800f098 <pbuf_copy+0xe8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d002      	beq.n	800f098 <pbuf_copy+0xe8>
 800f092:	f06f 0305 	mvn.w	r3, #5
 800f096:	e013      	b.n	800f0c0 <pbuf_copy+0x110>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00c      	beq.n	800f0b8 <pbuf_copy+0x108>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	895a      	ldrh	r2, [r3, #10]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	891b      	ldrh	r3, [r3, #8]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d106      	bne.n	800f0b8 <pbuf_copy+0x108>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d002      	beq.n	800f0b8 <pbuf_copy+0x108>
 800f0b2:	f06f 0305 	mvn.w	r3, #5
 800f0b6:	e003      	b.n	800f0c0 <pbuf_copy+0x110>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d190      	bne.n	800efe0 <pbuf_copy+0x30>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3718      	adds	r7, #24
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b088      	sub	sp, #32
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	4611      	mov	r1, r2
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	80fb      	strh	r3, [r7, #6]
 800f0da:	4613      	mov	r3, r2
 800f0dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d101      	bne.n	800f0f0 <pbuf_copy_partial+0x28>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	e043      	b.n	800f178 <pbuf_copy_partial+0xb0>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d101      	bne.n	800f0fa <pbuf_copy_partial+0x32>
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	e03e      	b.n	800f178 <pbuf_copy_partial+0xb0>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	61fb      	str	r3, [r7, #28]
 800f0fe:	e034      	b.n	800f16a <pbuf_copy_partial+0xa2>
    if ((offset != 0) && (offset >= p->len)) {
 800f100:	88bb      	ldrh	r3, [r7, #4]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00a      	beq.n	800f11c <pbuf_copy_partial+0x54>
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	895b      	ldrh	r3, [r3, #10]
 800f10a:	88ba      	ldrh	r2, [r7, #4]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d305      	bcc.n	800f11c <pbuf_copy_partial+0x54>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	895b      	ldrh	r3, [r3, #10]
 800f114:	88ba      	ldrh	r2, [r7, #4]
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	80bb      	strh	r3, [r7, #4]
 800f11a:	e023      	b.n	800f164 <pbuf_copy_partial+0x9c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	895a      	ldrh	r2, [r3, #10]
 800f120:	88bb      	ldrh	r3, [r7, #4]
 800f122:	1ad3      	subs	r3, r2, r3
 800f124:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f126:	8b3a      	ldrh	r2, [r7, #24]
 800f128:	88fb      	ldrh	r3, [r7, #6]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d901      	bls.n	800f132 <pbuf_copy_partial+0x6a>
        buf_copy_len = len;
 800f12e:	88fb      	ldrh	r3, [r7, #6]
 800f130:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f132:	8b7b      	ldrh	r3, [r7, #26]
 800f134:	68ba      	ldr	r2, [r7, #8]
 800f136:	18d0      	adds	r0, r2, r3
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	88bb      	ldrh	r3, [r7, #4]
 800f13e:	4413      	add	r3, r2
 800f140:	8b3a      	ldrh	r2, [r7, #24]
 800f142:	4619      	mov	r1, r3
 800f144:	f00a fb2d 	bl	80197a2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f148:	8afa      	ldrh	r2, [r7, #22]
 800f14a:	8b3b      	ldrh	r3, [r7, #24]
 800f14c:	4413      	add	r3, r2
 800f14e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f150:	8b7a      	ldrh	r2, [r7, #26]
 800f152:	8b3b      	ldrh	r3, [r7, #24]
 800f154:	4413      	add	r3, r2
 800f156:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f158:	88fa      	ldrh	r2, [r7, #6]
 800f15a:	8b3b      	ldrh	r3, [r7, #24]
 800f15c:	1ad3      	subs	r3, r2, r3
 800f15e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f160:	2300      	movs	r3, #0
 800f162:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	61fb      	str	r3, [r7, #28]
 800f16a:	88fb      	ldrh	r3, [r7, #6]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d002      	beq.n	800f176 <pbuf_copy_partial+0xae>
 800f170:	69fb      	ldr	r3, [r7, #28]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d1c4      	bne.n	800f100 <pbuf_copy_partial+0x38>
    }
  }
  return copied_total;
 800f176:	8afb      	ldrh	r3, [r7, #22]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3720      	adds	r7, #32
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	4603      	mov	r3, r0
 800f188:	603a      	str	r2, [r7, #0]
 800f18a:	71fb      	strb	r3, [r7, #7]
 800f18c:	460b      	mov	r3, r1
 800f18e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	8919      	ldrh	r1, [r3, #8]
 800f194:	88ba      	ldrh	r2, [r7, #4]
 800f196:	79fb      	ldrb	r3, [r7, #7]
 800f198:	4618      	mov	r0, r3
 800f19a:	f7ff fc0d 	bl	800e9b8 <pbuf_alloc>
 800f19e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d101      	bne.n	800f1aa <pbuf_clone+0x2a>
    return NULL;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	e006      	b.n	800f1b8 <pbuf_clone+0x38>
  }
  err = pbuf_copy(q, p);
 800f1aa:	6839      	ldr	r1, [r7, #0]
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	f7ff feff 	bl	800efb0 <pbuf_copy>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  return q;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 800f1c4:	bf00      	nop
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
	...

0800f1d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f1d4:	f00a f818 	bl	8019208 <rand>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	4b01      	ldr	r3, [pc, #4]	; (800f1f0 <tcp_init+0x20>)
 800f1ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f1ec:	bf00      	nop
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	20000136 	.word	0x20000136

0800f1f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f1fc:	6879      	ldr	r1, [r7, #4]
 800f1fe:	2001      	movs	r0, #1
 800f200:	f7ff f940 	bl	800e484 <memp_free>
}
 800f204:	bf00      	nop
 800f206:	3708      	adds	r7, #8
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f214:	6879      	ldr	r1, [r7, #4]
 800f216:	2002      	movs	r0, #2
 800f218:	f7ff f934 	bl	800e484 <memp_free>
}
 800f21c:	bf00      	nop
 800f21e:	3708      	adds	r7, #8
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f228:	f000 fed6 	bl	800ffd8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f22c:	4b07      	ldr	r3, [pc, #28]	; (800f24c <tcp_tmr+0x28>)
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	3301      	adds	r3, #1
 800f232:	b2da      	uxtb	r2, r3
 800f234:	4b05      	ldr	r3, [pc, #20]	; (800f24c <tcp_tmr+0x28>)
 800f236:	701a      	strb	r2, [r3, #0]
 800f238:	4b04      	ldr	r3, [pc, #16]	; (800f24c <tcp_tmr+0x28>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	f003 0301 	and.w	r3, r3, #1
 800f240:	2b00      	cmp	r3, #0
 800f242:	d001      	beq.n	800f248 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f244:	f000 fc1a 	bl	800fa7c <tcp_slowtmr>
  }
}
 800f248:	bf00      	nop
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	200077c9 	.word	0x200077c9

0800f250 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f250:	b480      	push	{r7}
 800f252:	b085      	sub	sp, #20
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	60fb      	str	r3, [r7, #12]
 800f25e:	e00a      	b.n	800f276 <tcp_remove_listener+0x26>
    if (pcb->listener == lpcb) {
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f264:	683a      	ldr	r2, [r7, #0]
 800f266:	429a      	cmp	r2, r3
 800f268:	d102      	bne.n	800f270 <tcp_remove_listener+0x20>
      pcb->listener = NULL;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2200      	movs	r2, #0
 800f26e:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	60fb      	str	r3, [r7, #12]
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d1f1      	bne.n	800f260 <tcp_remove_listener+0x10>
    }
  }
}
 800f27c:	bf00      	nop
 800f27e:	bf00      	nop
 800f280:	3714      	adds	r7, #20
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr
	...

0800f28c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f294:	2301      	movs	r3, #1
 800f296:	60fb      	str	r3, [r7, #12]
 800f298:	e00b      	b.n	800f2b2 <tcp_listen_closed+0x26>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f29a:	4a0a      	ldr	r2, [pc, #40]	; (800f2c4 <tcp_listen_closed+0x38>)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	6879      	ldr	r1, [r7, #4]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7ff ffd2 	bl	800f250 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	60fb      	str	r3, [r7, #12]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2b03      	cmp	r3, #3
 800f2b6:	d9f0      	bls.n	800f29a <tcp_listen_closed+0xe>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f2b8:	bf00      	nop
 800f2ba:	bf00      	nop
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	0801bb04 	.word	0x0801bb04

0800f2c8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f2c8:	b5b0      	push	{r4, r5, r7, lr}
 800f2ca:	b088      	sub	sp, #32
 800f2cc:	af04      	add	r7, sp, #16
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f2d4:	78fb      	ldrb	r3, [r7, #3]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d059      	beq.n	800f38e <tcp_close_shutdown+0xc6>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	7d1b      	ldrb	r3, [r3, #20]
 800f2de:	2b04      	cmp	r3, #4
 800f2e0:	d003      	beq.n	800f2ea <tcp_close_shutdown+0x22>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	7d1b      	ldrb	r3, [r3, #20]
 800f2e6:	2b07      	cmp	r3, #7
 800f2e8:	d151      	bne.n	800f38e <tcp_close_shutdown+0xc6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d104      	bne.n	800f2fc <tcp_close_shutdown+0x34>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f2fa:	d048      	beq.n	800f38e <tcp_close_shutdown+0xc6>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f304:	687d      	ldr	r5, [r7, #4]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	3304      	adds	r3, #4
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	8ad2      	ldrh	r2, [r2, #22]
 800f30e:	6879      	ldr	r1, [r7, #4]
 800f310:	8b09      	ldrh	r1, [r1, #24]
 800f312:	9102      	str	r1, [sp, #8]
 800f314:	9201      	str	r2, [sp, #4]
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	462b      	mov	r3, r5
 800f31a:	4622      	mov	r2, r4
 800f31c:	4601      	mov	r1, r0
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f004 ff1c 	bl	801415c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f001 f997 	bl	8010658 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f32a:	4b43      	ldr	r3, [pc, #268]	; (800f438 <tcp_close_shutdown+0x170>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	429a      	cmp	r2, r3
 800f332:	d105      	bne.n	800f340 <tcp_close_shutdown+0x78>
 800f334:	4b40      	ldr	r3, [pc, #256]	; (800f438 <tcp_close_shutdown+0x170>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	4a3f      	ldr	r2, [pc, #252]	; (800f438 <tcp_close_shutdown+0x170>)
 800f33c:	6013      	str	r3, [r2, #0]
 800f33e:	e013      	b.n	800f368 <tcp_close_shutdown+0xa0>
 800f340:	4b3d      	ldr	r3, [pc, #244]	; (800f438 <tcp_close_shutdown+0x170>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	60fb      	str	r3, [r7, #12]
 800f346:	e00c      	b.n	800f362 <tcp_close_shutdown+0x9a>
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d104      	bne.n	800f35c <tcp_close_shutdown+0x94>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	68da      	ldr	r2, [r3, #12]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	60da      	str	r2, [r3, #12]
 800f35a:	e005      	b.n	800f368 <tcp_close_shutdown+0xa0>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	60fb      	str	r3, [r7, #12]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d1ef      	bne.n	800f348 <tcp_close_shutdown+0x80>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2200      	movs	r2, #0
 800f36c:	60da      	str	r2, [r3, #12]
 800f36e:	4b33      	ldr	r3, [pc, #204]	; (800f43c <tcp_close_shutdown+0x174>)
 800f370:	2201      	movs	r2, #1
 800f372:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f374:	4b32      	ldr	r3, [pc, #200]	; (800f440 <tcp_close_shutdown+0x178>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d102      	bne.n	800f384 <tcp_close_shutdown+0xbc>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f37e:	f003 fc09 	bl	8012b94 <tcp_trigger_input_pcb_close>
 800f382:	e002      	b.n	800f38a <tcp_close_shutdown+0xc2>
      } else {
        tcp_free(pcb);
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7ff ff35 	bl	800f1f4 <tcp_free>
      }
      return ERR_OK;
 800f38a:	2300      	movs	r3, #0
 800f38c:	e050      	b.n	800f430 <tcp_close_shutdown+0x168>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	7d1b      	ldrb	r3, [r3, #20]
 800f392:	2b02      	cmp	r3, #2
 800f394:	d03b      	beq.n	800f40e <tcp_close_shutdown+0x146>
 800f396:	2b02      	cmp	r3, #2
 800f398:	dc44      	bgt.n	800f424 <tcp_close_shutdown+0x15c>
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d002      	beq.n	800f3a4 <tcp_close_shutdown+0xdc>
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d02a      	beq.n	800f3f8 <tcp_close_shutdown+0x130>
 800f3a2:	e03f      	b.n	800f424 <tcp_close_shutdown+0x15c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	8adb      	ldrh	r3, [r3, #22]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d021      	beq.n	800f3f0 <tcp_close_shutdown+0x128>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f3ac:	4b25      	ldr	r3, [pc, #148]	; (800f444 <tcp_close_shutdown+0x17c>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d105      	bne.n	800f3c2 <tcp_close_shutdown+0xfa>
 800f3b6:	4b23      	ldr	r3, [pc, #140]	; (800f444 <tcp_close_shutdown+0x17c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	4a21      	ldr	r2, [pc, #132]	; (800f444 <tcp_close_shutdown+0x17c>)
 800f3be:	6013      	str	r3, [r2, #0]
 800f3c0:	e013      	b.n	800f3ea <tcp_close_shutdown+0x122>
 800f3c2:	4b20      	ldr	r3, [pc, #128]	; (800f444 <tcp_close_shutdown+0x17c>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	60bb      	str	r3, [r7, #8]
 800f3c8:	e00c      	b.n	800f3e4 <tcp_close_shutdown+0x11c>
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d104      	bne.n	800f3de <tcp_close_shutdown+0x116>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	68da      	ldr	r2, [r3, #12]
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	60da      	str	r2, [r3, #12]
 800f3dc:	e005      	b.n	800f3ea <tcp_close_shutdown+0x122>
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	60bb      	str	r3, [r7, #8]
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1ef      	bne.n	800f3ca <tcp_close_shutdown+0x102>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f7ff feff 	bl	800f1f4 <tcp_free>
      break;
 800f3f6:	e01a      	b.n	800f42e <tcp_close_shutdown+0x166>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f7ff ff47 	bl	800f28c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f3fe:	6879      	ldr	r1, [r7, #4]
 800f400:	4811      	ldr	r0, [pc, #68]	; (800f448 <tcp_close_shutdown+0x180>)
 800f402:	f001 f96b 	bl	80106dc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f7ff ff00 	bl	800f20c <tcp_free_listen>
      break;
 800f40c:	e00f      	b.n	800f42e <tcp_close_shutdown+0x166>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f40e:	6879      	ldr	r1, [r7, #4]
 800f410:	4809      	ldr	r0, [pc, #36]	; (800f438 <tcp_close_shutdown+0x170>)
 800f412:	f001 f963 	bl	80106dc <tcp_pcb_remove>
 800f416:	4b09      	ldr	r3, [pc, #36]	; (800f43c <tcp_close_shutdown+0x174>)
 800f418:	2201      	movs	r2, #1
 800f41a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f7ff fee9 	bl	800f1f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f422:	e004      	b.n	800f42e <tcp_close_shutdown+0x166>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 f811 	bl	800f44c <tcp_close_shutdown_fin>
 800f42a:	4603      	mov	r3, r0
 800f42c:	e000      	b.n	800f430 <tcp_close_shutdown+0x168>
  }
  return ERR_OK;
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3710      	adds	r7, #16
 800f434:	46bd      	mov	sp, r7
 800f436:	bdb0      	pop	{r4, r5, r7, pc}
 800f438:	200077c0 	.word	0x200077c0
 800f43c:	200077c8 	.word	0x200077c8
 800f440:	20007804 	.word	0x20007804
 800f444:	200077b8 	.word	0x200077b8
 800f448:	200077bc 	.word	0x200077bc

0800f44c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);

  switch (pcb->state) {
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	7d1b      	ldrb	r3, [r3, #20]
 800f458:	2b07      	cmp	r3, #7
 800f45a:	d020      	beq.n	800f49e <tcp_close_shutdown_fin+0x52>
 800f45c:	2b07      	cmp	r3, #7
 800f45e:	dc2b      	bgt.n	800f4b8 <tcp_close_shutdown_fin+0x6c>
 800f460:	2b03      	cmp	r3, #3
 800f462:	d002      	beq.n	800f46a <tcp_close_shutdown_fin+0x1e>
 800f464:	2b04      	cmp	r3, #4
 800f466:	d00d      	beq.n	800f484 <tcp_close_shutdown_fin+0x38>
 800f468:	e026      	b.n	800f4b8 <tcp_close_shutdown_fin+0x6c>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f004 f8c6 	bl	80135fc <tcp_send_fin>
 800f470:	4603      	mov	r3, r0
 800f472:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d11f      	bne.n	800f4bc <tcp_close_shutdown_fin+0x70>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2205      	movs	r2, #5
 800f480:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f482:	e01b      	b.n	800f4bc <tcp_close_shutdown_fin+0x70>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f004 f8b9 	bl	80135fc <tcp_send_fin>
 800f48a:	4603      	mov	r3, r0
 800f48c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d114      	bne.n	800f4c0 <tcp_close_shutdown_fin+0x74>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2205      	movs	r2, #5
 800f49a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f49c:	e010      	b.n	800f4c0 <tcp_close_shutdown_fin+0x74>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f004 f8ac 	bl	80135fc <tcp_send_fin>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d109      	bne.n	800f4c4 <tcp_close_shutdown_fin+0x78>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2209      	movs	r2, #9
 800f4b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f4b6:	e005      	b.n	800f4c4 <tcp_close_shutdown_fin+0x78>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	e01c      	b.n	800f4f6 <tcp_close_shutdown_fin+0xaa>
      break;
 800f4bc:	bf00      	nop
 800f4be:	e002      	b.n	800f4c6 <tcp_close_shutdown_fin+0x7a>
      break;
 800f4c0:	bf00      	nop
 800f4c2:	e000      	b.n	800f4c6 <tcp_close_shutdown_fin+0x7a>
      break;
 800f4c4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d103      	bne.n	800f4d6 <tcp_close_shutdown_fin+0x8a>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f004 f974 	bl	80137bc <tcp_output>
 800f4d4:	e00d      	b.n	800f4f2 <tcp_close_shutdown_fin+0xa6>
  } else if (err == ERR_MEM) {
 800f4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4de:	d108      	bne.n	800f4f2 <tcp_close_shutdown_fin+0xa6>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	8b5b      	ldrh	r3, [r3, #26]
 800f4e4:	f043 0308 	orr.w	r3, r3, #8
 800f4e8:	b29a      	uxth	r2, r3
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e001      	b.n	800f4f6 <tcp_close_shutdown_fin+0xaa>
  }
  return err;
 800f4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b082      	sub	sp, #8
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d102      	bne.n	800f512 <tcp_close+0x14>
 800f50c:	f06f 030f 	mvn.w	r3, #15
 800f510:	e00f      	b.n	800f532 <tcp_close+0x34>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	7d1b      	ldrb	r3, [r3, #20]
 800f516:	2b01      	cmp	r3, #1
 800f518:	d006      	beq.n	800f528 <tcp_close+0x2a>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	8b5b      	ldrh	r3, [r3, #26]
 800f51e:	f043 0310 	orr.w	r3, r3, #16
 800f522:	b29a      	uxth	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f528:	2101      	movs	r1, #1
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7ff fecc 	bl	800f2c8 <tcp_close_shutdown>
 800f530:	4603      	mov	r3, r0
}
 800f532:	4618      	mov	r0, r3
 800f534:	3708      	adds	r7, #8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
	...

0800f53c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b08e      	sub	sp, #56	; 0x38
 800f540:	af04      	add	r7, sp, #16
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f000 808f 	beq.w	800f66c <tcp_abandon+0x130>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	7d1b      	ldrb	r3, [r3, #20]
 800f552:	2b0a      	cmp	r3, #10
 800f554:	d107      	bne.n	800f566 <tcp_abandon+0x2a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f556:	6879      	ldr	r1, [r7, #4]
 800f558:	4846      	ldr	r0, [pc, #280]	; (800f674 <tcp_abandon+0x138>)
 800f55a:	f001 f8bf 	bl	80106dc <tcp_pcb_remove>
    tcp_free(pcb);
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7ff fe48 	bl	800f1f4 <tcp_free>
 800f564:	e082      	b.n	800f66c <tcp_abandon+0x130>
  } else {
    int send_rst = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f56a:	2300      	movs	r3, #0
 800f56c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f572:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f578:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f580:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	691b      	ldr	r3, [r3, #16]
 800f586:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	7d1b      	ldrb	r3, [r3, #20]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d126      	bne.n	800f5de <tcp_abandon+0xa2>
      if (pcb->local_port != 0) {
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	8adb      	ldrh	r3, [r3, #22]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d02e      	beq.n	800f5f6 <tcp_abandon+0xba>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f598:	4b37      	ldr	r3, [pc, #220]	; (800f678 <tcp_abandon+0x13c>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d105      	bne.n	800f5ae <tcp_abandon+0x72>
 800f5a2:	4b35      	ldr	r3, [pc, #212]	; (800f678 <tcp_abandon+0x13c>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	68db      	ldr	r3, [r3, #12]
 800f5a8:	4a33      	ldr	r2, [pc, #204]	; (800f678 <tcp_abandon+0x13c>)
 800f5aa:	6013      	str	r3, [r2, #0]
 800f5ac:	e013      	b.n	800f5d6 <tcp_abandon+0x9a>
 800f5ae:	4b32      	ldr	r3, [pc, #200]	; (800f678 <tcp_abandon+0x13c>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	61fb      	str	r3, [r7, #28]
 800f5b4:	e00c      	b.n	800f5d0 <tcp_abandon+0x94>
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d104      	bne.n	800f5ca <tcp_abandon+0x8e>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	68da      	ldr	r2, [r3, #12]
 800f5c4:	69fb      	ldr	r3, [r7, #28]
 800f5c6:	60da      	str	r2, [r3, #12]
 800f5c8:	e005      	b.n	800f5d6 <tcp_abandon+0x9a>
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	61fb      	str	r3, [r7, #28]
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d1ef      	bne.n	800f5b6 <tcp_abandon+0x7a>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	60da      	str	r2, [r3, #12]
 800f5dc:	e00b      	b.n	800f5f6 <tcp_abandon+0xba>
      }
    } else {
      send_rst = reset;
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	8adb      	ldrh	r3, [r3, #22]
 800f5e6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f5e8:	6879      	ldr	r1, [r7, #4]
 800f5ea:	4824      	ldr	r0, [pc, #144]	; (800f67c <tcp_abandon+0x140>)
 800f5ec:	f001 f876 	bl	80106dc <tcp_pcb_remove>
 800f5f0:	4b23      	ldr	r3, [pc, #140]	; (800f680 <tcp_abandon+0x144>)
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d004      	beq.n	800f608 <tcp_abandon+0xcc>
      tcp_segs_free(pcb->unacked);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f602:	4618      	mov	r0, r3
 800f604:	f000 fdbb 	bl	801017e <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d004      	beq.n	800f61a <tcp_abandon+0xde>
      tcp_segs_free(pcb->unsent);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f614:	4618      	mov	r0, r3
 800f616:	f000 fdb2 	bl	801017e <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d004      	beq.n	800f62c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->ooseq);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f626:	4618      	mov	r0, r3
 800f628:	f000 fda9 	bl	801017e <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00e      	beq.n	800f650 <tcp_abandon+0x114>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f632:	6879      	ldr	r1, [r7, #4]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	3304      	adds	r3, #4
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	8b12      	ldrh	r2, [r2, #24]
 800f63c:	9202      	str	r2, [sp, #8]
 800f63e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f640:	9201      	str	r2, [sp, #4]
 800f642:	9300      	str	r3, [sp, #0]
 800f644:	460b      	mov	r3, r1
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	69b9      	ldr	r1, [r7, #24]
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f004 fd86 	bl	801415c <tcp_rst>
    }
    last_state = pcb->state;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	7d1b      	ldrb	r3, [r3, #20]
 800f654:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f7ff fdcc 	bl	800f1f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d004      	beq.n	800f66c <tcp_abandon+0x130>
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	f06f 010c 	mvn.w	r1, #12
 800f668:	68f8      	ldr	r0, [r7, #12]
 800f66a:	4798      	blx	r3
  }
}
 800f66c:	3728      	adds	r7, #40	; 0x28
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	200077c4 	.word	0x200077c4
 800f678:	200077b8 	.word	0x200077b8
 800f67c:	200077c0 	.word	0x200077c0
 800f680:	200077c8 	.word	0x200077c8

0800f684 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f68c:	2101      	movs	r1, #1
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f7ff ff54 	bl	800f53c <tcp_abandon>
}
 800f694:	bf00      	nop
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b088      	sub	sp, #32
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f6aa:	2304      	movs	r3, #4
 800f6ac:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d101      	bne.n	800f6b8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f6b4:	4b37      	ldr	r3, [pc, #220]	; (800f794 <tcp_bind+0xf8>)
 800f6b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d102      	bne.n	800f6c4 <tcp_bind+0x28>
 800f6be:	f06f 030f 	mvn.w	r3, #15
 800f6c2:	e063      	b.n	800f78c <tcp_bind+0xf0>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	7d1b      	ldrb	r3, [r3, #20]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d002      	beq.n	800f6d2 <tcp_bind+0x36>
 800f6cc:	f06f 0305 	mvn.w	r3, #5
 800f6d0:	e05c      	b.n	800f78c <tcp_bind+0xf0>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f6d2:	88fb      	ldrh	r3, [r7, #6]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d109      	bne.n	800f6ec <tcp_bind+0x50>
    port = tcp_new_port();
 800f6d8:	f000 f98a 	bl	800f9f0 <tcp_new_port>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f6e0:	88fb      	ldrh	r3, [r7, #6]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d135      	bne.n	800f752 <tcp_bind+0xb6>
      return ERR_BUF;
 800f6e6:	f06f 0301 	mvn.w	r3, #1
 800f6ea:	e04f      	b.n	800f78c <tcp_bind+0xf0>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	61fb      	str	r3, [r7, #28]
 800f6f0:	e02b      	b.n	800f74a <tcp_bind+0xae>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f6f2:	4a29      	ldr	r2, [pc, #164]	; (800f798 <tcp_bind+0xfc>)
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	61bb      	str	r3, [r7, #24]
 800f6fe:	e01e      	b.n	800f73e <tcp_bind+0xa2>
        if (cpcb->local_port == port) {
 800f700:	69bb      	ldr	r3, [r7, #24]
 800f702:	8adb      	ldrh	r3, [r3, #22]
 800f704:	88fa      	ldrh	r2, [r7, #6]
 800f706:	429a      	cmp	r2, r3
 800f708:	d116      	bne.n	800f738 <tcp_bind+0x9c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f70a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d010      	beq.n	800f732 <tcp_bind+0x96>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d00c      	beq.n	800f732 <tcp_bind+0x96>
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d009      	beq.n	800f732 <tcp_bind+0x96>
                 ip_addr_isany(ipaddr) ||
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d005      	beq.n	800f732 <tcp_bind+0x96>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f726:	69bb      	ldr	r3, [r7, #24]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f72e:	429a      	cmp	r2, r3
 800f730:	d102      	bne.n	800f738 <tcp_bind+0x9c>
              return ERR_USE;
 800f732:	f06f 0307 	mvn.w	r3, #7
 800f736:	e029      	b.n	800f78c <tcp_bind+0xf0>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	61bb      	str	r3, [r7, #24]
 800f73e:	69bb      	ldr	r3, [r7, #24]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d1dd      	bne.n	800f700 <tcp_bind+0x64>
    for (i = 0; i < max_pcb_list; i++) {
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	3301      	adds	r3, #1
 800f748:	61fb      	str	r3, [r7, #28]
 800f74a:	69fa      	ldr	r2, [r7, #28]
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	429a      	cmp	r2, r3
 800f750:	dbcf      	blt.n	800f6f2 <tcp_bind+0x56>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d00c      	beq.n	800f772 <tcp_bind+0xd6>
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d008      	beq.n	800f772 <tcp_bind+0xd6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d002      	beq.n	800f76c <tcp_bind+0xd0>
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	e000      	b.n	800f76e <tcp_bind+0xd2>
 800f76c:	2300      	movs	r3, #0
 800f76e:	68fa      	ldr	r2, [r7, #12]
 800f770:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	88fa      	ldrh	r2, [r7, #6]
 800f776:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f778:	4b08      	ldr	r3, [pc, #32]	; (800f79c <tcp_bind+0x100>)
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	60da      	str	r2, [r3, #12]
 800f780:	4a06      	ldr	r2, [pc, #24]	; (800f79c <tcp_bind+0x100>)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6013      	str	r3, [r2, #0]
 800f786:	f004 fe5d 	bl	8014444 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3720      	adds	r7, #32
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	0801bb3c 	.word	0x0801bb3c
 800f798:	0801bb04 	.word	0x0801bb04
 800f79c:	200077b8 	.word	0x200077b8

0800f7a0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	60f8      	str	r0, [r7, #12]
 800f7a8:	60b9      	str	r1, [r7, #8]
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);

  tcp_abort(pcb);
 800f7ae:	68b8      	ldr	r0, [r7, #8]
 800f7b0:	f7ff ff68 	bl	800f684 <tcp_abort>

  return ERR_ABRT;
 800f7b4:	f06f 030c 	mvn.w	r3, #12
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800f7cc:	78fb      	ldrb	r3, [r7, #3]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 f806 	bl	800f7e4 <tcp_listen_with_backlog_and_err>
 800f7d8:	4603      	mov	r3, r0
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
	...

0800f7e4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b088      	sub	sp, #32
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	607a      	str	r2, [r7, #4]
 800f7f0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d102      	bne.n	800f802 <tcp_listen_with_backlog_and_err+0x1e>
 800f7fc:	23f0      	movs	r3, #240	; 0xf0
 800f7fe:	76fb      	strb	r3, [r7, #27]
 800f800:	e072      	b.n	800f8e8 <tcp_listen_with_backlog_and_err+0x104>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	7d1b      	ldrb	r3, [r3, #20]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d002      	beq.n	800f810 <tcp_listen_with_backlog_and_err+0x2c>
 800f80a:	23f1      	movs	r3, #241	; 0xf1
 800f80c:	76fb      	strb	r3, [r7, #27]
 800f80e:	e06b      	b.n	800f8e8 <tcp_listen_with_backlog_and_err+0x104>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	7d1b      	ldrb	r3, [r3, #20]
 800f814:	2b01      	cmp	r3, #1
 800f816:	d104      	bne.n	800f822 <tcp_listen_with_backlog_and_err+0x3e>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f81c:	23f7      	movs	r3, #247	; 0xf7
 800f81e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f820:	e062      	b.n	800f8e8 <tcp_listen_with_backlog_and_err+0x104>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f822:	2002      	movs	r0, #2
 800f824:	f7fe fdf2 	bl	800e40c <memp_malloc>
 800f828:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d102      	bne.n	800f836 <tcp_listen_with_backlog_and_err+0x52>
    res = ERR_MEM;
 800f830:	23ff      	movs	r3, #255	; 0xff
 800f832:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f834:	e058      	b.n	800f8e8 <tcp_listen_with_backlog_and_err+0x104>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	691a      	ldr	r2, [r3, #16]
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	8ada      	ldrh	r2, [r3, #22]
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	2201      	movs	r2, #1
 800f84a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	7d5a      	ldrb	r2, [r3, #21]
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	7a5a      	ldrb	r2, [r3, #9]
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	2200      	movs	r2, #0
 800f860:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	7ada      	ldrb	r2, [r3, #11]
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	7a9a      	ldrb	r2, [r3, #10]
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	8adb      	ldrh	r3, [r3, #22]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d021      	beq.n	800f8c6 <tcp_listen_with_backlog_and_err+0xe2>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f882:	4b1f      	ldr	r3, [pc, #124]	; (800f900 <tcp_listen_with_backlog_and_err+0x11c>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	68fa      	ldr	r2, [r7, #12]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d105      	bne.n	800f898 <tcp_listen_with_backlog_and_err+0xb4>
 800f88c:	4b1c      	ldr	r3, [pc, #112]	; (800f900 <tcp_listen_with_backlog_and_err+0x11c>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	4a1b      	ldr	r2, [pc, #108]	; (800f900 <tcp_listen_with_backlog_and_err+0x11c>)
 800f894:	6013      	str	r3, [r2, #0]
 800f896:	e013      	b.n	800f8c0 <tcp_listen_with_backlog_and_err+0xdc>
 800f898:	4b19      	ldr	r3, [pc, #100]	; (800f900 <tcp_listen_with_backlog_and_err+0x11c>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	617b      	str	r3, [r7, #20]
 800f89e:	e00c      	b.n	800f8ba <tcp_listen_with_backlog_and_err+0xd6>
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	68fa      	ldr	r2, [r7, #12]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d104      	bne.n	800f8b4 <tcp_listen_with_backlog_and_err+0xd0>
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	68da      	ldr	r2, [r3, #12]
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	60da      	str	r2, [r3, #12]
 800f8b2:	e005      	b.n	800f8c0 <tcp_listen_with_backlog_and_err+0xdc>
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	617b      	str	r3, [r7, #20]
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1ef      	bne.n	800f8a0 <tcp_listen_with_backlog_and_err+0xbc>
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	f7ff fc94 	bl	800f1f4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	4a0d      	ldr	r2, [pc, #52]	; (800f904 <tcp_listen_with_backlog_and_err+0x120>)
 800f8d0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f8d2:	4b0d      	ldr	r3, [pc, #52]	; (800f908 <tcp_listen_with_backlog_and_err+0x124>)
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	60da      	str	r2, [r3, #12]
 800f8da:	4a0b      	ldr	r2, [pc, #44]	; (800f908 <tcp_listen_with_backlog_and_err+0x124>)
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	6013      	str	r3, [r2, #0]
 800f8e0:	f004 fdb0 	bl	8014444 <tcp_timer_needed>
  res = ERR_OK;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d002      	beq.n	800f8f4 <tcp_listen_with_backlog_and_err+0x110>
    *err = res;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	7efa      	ldrb	r2, [r7, #27]
 800f8f2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f8f4:	69fb      	ldr	r3, [r7, #28]
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3720      	adds	r7, #32
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	200077b8 	.word	0x200077b8
 800f904:	0800f7a1 	.word	0x0800f7a1
 800f908:	200077bc 	.word	0x200077bc

0800f90c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f91c:	4413      	add	r3, r2
 800f91e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f928:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f92c:	bf28      	it	cs
 800f92e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f932:	b292      	uxth	r2, r2
 800f934:	4413      	add	r3, r2
 800f936:	68fa      	ldr	r2, [r7, #12]
 800f938:	1ad3      	subs	r3, r2, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	db08      	blt.n	800f950 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f94a:	68fa      	ldr	r2, [r7, #12]
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	e015      	b.n	800f97c <tcp_update_rcv_ann_wnd+0x70>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f958:	1ad3      	subs	r3, r2, r3
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	dd03      	ble.n	800f966 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f964:	e009      	b.n	800f97a <tcp_update_rcv_ann_wnd+0x6e>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96e:	1ad3      	subs	r3, r2, r3
 800f970:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	b29a      	uxth	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f97a:	2300      	movs	r3, #0
  }
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3714      	adds	r7, #20
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	460b      	mov	r3, r1
 800f992:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d027      	beq.n	800f9ea <tcp_recved+0x62>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f99e:	887b      	ldrh	r3, [r7, #2]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f9a4:	89fb      	ldrh	r3, [r7, #14]
 800f9a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f9aa:	d804      	bhi.n	800f9b6 <tcp_recved+0x2e>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9b0:	89fa      	ldrh	r2, [r7, #14]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d204      	bcs.n	800f9c0 <tcp_recved+0x38>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f9bc:	851a      	strh	r2, [r3, #40]	; 0x28
 800f9be:	e002      	b.n	800f9c6 <tcp_recved+0x3e>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	89fa      	ldrh	r2, [r7, #14]
 800f9c4:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f7ff ffa0 	bl	800f90c <tcp_update_rcv_ann_wnd>
 800f9cc:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f9d4:	d309      	bcc.n	800f9ea <tcp_recved+0x62>
    tcp_ack_now(pcb);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	8b5b      	ldrh	r3, [r3, #26]
 800f9da:	f043 0302 	orr.w	r3, r3, #2
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f003 fee9 	bl	80137bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f9fa:	4b1e      	ldr	r3, [pc, #120]	; (800fa74 <tcp_new_port+0x84>)
 800f9fc:	881b      	ldrh	r3, [r3, #0]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	4b1c      	ldr	r3, [pc, #112]	; (800fa74 <tcp_new_port+0x84>)
 800fa04:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800fa06:	4b1b      	ldr	r3, [pc, #108]	; (800fa74 <tcp_new_port+0x84>)
 800fa08:	881b      	ldrh	r3, [r3, #0]
 800fa0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d103      	bne.n	800fa1a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800fa12:	4b18      	ldr	r3, [pc, #96]	; (800fa74 <tcp_new_port+0x84>)
 800fa14:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fa18:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	71fb      	strb	r3, [r7, #7]
 800fa1e:	e01e      	b.n	800fa5e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fa20:	79fb      	ldrb	r3, [r7, #7]
 800fa22:	4a15      	ldr	r2, [pc, #84]	; (800fa78 <tcp_new_port+0x88>)
 800fa24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	603b      	str	r3, [r7, #0]
 800fa2c:	e011      	b.n	800fa52 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	8ada      	ldrh	r2, [r3, #22]
 800fa32:	4b10      	ldr	r3, [pc, #64]	; (800fa74 <tcp_new_port+0x84>)
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d108      	bne.n	800fa4c <tcp_new_port+0x5c>
        n++;
 800fa3a:	88bb      	ldrh	r3, [r7, #4]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fa40:	88bb      	ldrh	r3, [r7, #4]
 800fa42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa46:	d3d8      	bcc.n	800f9fa <tcp_new_port+0xa>
          return 0;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	e00d      	b.n	800fa68 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	603b      	str	r3, [r7, #0]
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d1ea      	bne.n	800fa2e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fa58:	79fb      	ldrb	r3, [r7, #7]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	71fb      	strb	r3, [r7, #7]
 800fa5e:	79fb      	ldrb	r3, [r7, #7]
 800fa60:	2b03      	cmp	r3, #3
 800fa62:	d9dd      	bls.n	800fa20 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800fa64:	4b03      	ldr	r3, [pc, #12]	; (800fa74 <tcp_new_port+0x84>)
 800fa66:	881b      	ldrh	r3, [r3, #0]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	20000136 	.word	0x20000136
 800fa78:	0801bb04 	.word	0x0801bb04

0800fa7c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fa7c:	b5b0      	push	{r4, r5, r7, lr}
 800fa7e:	b090      	sub	sp, #64	; 0x40
 800fa80:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fa82:	2300      	movs	r3, #0
 800fa84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fa88:	4b79      	ldr	r3, [pc, #484]	; (800fc70 <tcp_slowtmr+0x1f4>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	4a78      	ldr	r2, [pc, #480]	; (800fc70 <tcp_slowtmr+0x1f4>)
 800fa90:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fa92:	4b78      	ldr	r3, [pc, #480]	; (800fc74 <tcp_slowtmr+0x1f8>)
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	3301      	adds	r3, #1
 800fa98:	b2da      	uxtb	r2, r3
 800fa9a:	4b76      	ldr	r3, [pc, #472]	; (800fc74 <tcp_slowtmr+0x1f8>)
 800fa9c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800faa2:	4b75      	ldr	r3, [pc, #468]	; (800fc78 <tcp_slowtmr+0x1fc>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800faa8:	e243      	b.n	800ff32 <tcp_slowtmr+0x4b6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 800faaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faac:	7f9a      	ldrb	r2, [r3, #30]
 800faae:	4b71      	ldr	r3, [pc, #452]	; (800fc74 <tcp_slowtmr+0x1f8>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d105      	bne.n	800fac2 <tcp_slowtmr+0x46>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab8:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800faba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fac0:	e237      	b.n	800ff32 <tcp_slowtmr+0x4b6>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fac2:	4b6c      	ldr	r3, [pc, #432]	; (800fc74 <tcp_slowtmr+0x1f8>)
 800fac4:	781a      	ldrb	r2, [r3, #0]
 800fac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac8:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800faca:	2300      	movs	r3, #0
 800facc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fad0:	2300      	movs	r3, #0
 800fad2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad8:	7d1b      	ldrb	r3, [r3, #20]
 800fada:	2b02      	cmp	r3, #2
 800fadc:	d10a      	bne.n	800faf4 <tcp_slowtmr+0x78>
 800fade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fae4:	2b05      	cmp	r3, #5
 800fae6:	d905      	bls.n	800faf4 <tcp_slowtmr+0x78>
      ++pcb_remove;
 800fae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800faec:	3301      	adds	r3, #1
 800faee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800faf2:	e0fb      	b.n	800fcec <tcp_slowtmr+0x270>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800faf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fafa:	2b0b      	cmp	r3, #11
 800fafc:	d905      	bls.n	800fb0a <tcp_slowtmr+0x8e>
      ++pcb_remove;
 800fafe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb02:	3301      	adds	r3, #1
 800fb04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb08:	e0f0      	b.n	800fcec <tcp_slowtmr+0x270>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d05f      	beq.n	800fbd4 <tcp_slowtmr+0x158>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb16:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fb1a:	2b0b      	cmp	r3, #11
 800fb1c:	d905      	bls.n	800fb2a <tcp_slowtmr+0xae>
          ++pcb_remove; /* max probes reached */
 800fb1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb22:	3301      	adds	r3, #1
 800fb24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb28:	e0e0      	b.n	800fcec <tcp_slowtmr+0x270>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb30:	3b01      	subs	r3, #1
 800fb32:	4a52      	ldr	r2, [pc, #328]	; (800fc7c <tcp_slowtmr+0x200>)
 800fb34:	5cd3      	ldrb	r3, [r2, r3]
 800fb36:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fb3e:	7c7a      	ldrb	r2, [r7, #17]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d907      	bls.n	800fb54 <tcp_slowtmr+0xd8>
            pcb->persist_cnt++;
 800fb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb46:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	b2da      	uxtb	r2, r3
 800fb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fb5a:	7c7a      	ldrb	r2, [r7, #17]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	f200 80c5 	bhi.w	800fcec <tcp_slowtmr+0x270>
            int next_slot = 1; /* increment timer to next slot */
 800fb62:	2301      	movs	r3, #1
 800fb64:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d108      	bne.n	800fb82 <tcp_slowtmr+0x106>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fb70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb72:	f004 fba9 	bl	80142c8 <tcp_zero_window_probe>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d014      	beq.n	800fba6 <tcp_slowtmr+0x12a>
                next_slot = 0; /* try probe again with current slot */
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	623b      	str	r3, [r7, #32]
 800fb80:	e011      	b.n	800fba6 <tcp_slowtmr+0x12a>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb88:	4619      	mov	r1, r3
 800fb8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb8c:	f003 fc20 	bl	80133d0 <tcp_split_unsent_seg>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d107      	bne.n	800fba6 <tcp_slowtmr+0x12a>
                if (tcp_output(pcb) == ERR_OK) {
 800fb96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb98:	f003 fe10 	bl	80137bc <tcp_output>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d101      	bne.n	800fba6 <tcp_slowtmr+0x12a>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fba2:	2300      	movs	r3, #0
 800fba4:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fba6:	6a3b      	ldr	r3, [r7, #32]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f000 809f 	beq.w	800fcec <tcp_slowtmr+0x270>
              pcb->persist_cnt = 0;
 800fbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fbbc:	2b06      	cmp	r3, #6
 800fbbe:	f200 8095 	bhi.w	800fcec <tcp_slowtmr+0x270>
                pcb->persist_backoff++;
 800fbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fbc8:	3301      	adds	r3, #1
 800fbca:	b2da      	uxtb	r2, r3
 800fbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fbd2:	e08b      	b.n	800fcec <tcp_slowtmr+0x270>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	db0f      	blt.n	800fbfe <tcp_slowtmr+0x182>
 800fbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fbe4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	d008      	beq.n	800fbfe <tcp_slowtmr+0x182>
          ++pcb->rtime;
 800fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	b21a      	sxth	r2, r3
 800fbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfc:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc00:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc06:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	db6e      	blt.n	800fcec <tcp_slowtmr+0x270>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fc0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc10:	f004 f86c 	bl	8013cec <tcp_rexmit_rto_prepare>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d007      	beq.n	800fc2a <tcp_slowtmr+0x1ae>
 800fc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d164      	bne.n	800fcec <tcp_slowtmr+0x270>
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d060      	beq.n	800fcec <tcp_slowtmr+0x270>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2c:	7d1b      	ldrb	r3, [r3, #20]
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	d02d      	beq.n	800fc8e <tcp_slowtmr+0x212>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc38:	2b0c      	cmp	r3, #12
 800fc3a:	bf28      	it	cs
 800fc3c:	230c      	movcs	r3, #12
 800fc3e:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc42:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc46:	10db      	asrs	r3, r3, #3
 800fc48:	b21b      	sxth	r3, r3
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fc52:	4413      	add	r3, r2
 800fc54:	7efa      	ldrb	r2, [r7, #27]
 800fc56:	490a      	ldr	r1, [pc, #40]	; (800fc80 <tcp_slowtmr+0x204>)
 800fc58:	5c8a      	ldrb	r2, [r1, r2]
 800fc5a:	4093      	lsls	r3, r2
 800fc5c:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fc64:	4293      	cmp	r3, r2
 800fc66:	dc0d      	bgt.n	800fc84 <tcp_slowtmr+0x208>
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	b21a      	sxth	r2, r3
 800fc6c:	e00c      	b.n	800fc88 <tcp_slowtmr+0x20c>
 800fc6e:	bf00      	nop
 800fc70:	200077b4 	.word	0x200077b4
 800fc74:	200077ca 	.word	0x200077ca
 800fc78:	200077c0 	.word	0x200077c0
 800fc7c:	0801bafc 	.word	0x0801bafc
 800fc80:	0801baec 	.word	0x0801baec
 800fc84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc90:	2200      	movs	r2, #0
 800fc92:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fca0:	4293      	cmp	r3, r2
 800fca2:	bf28      	it	cs
 800fca4:	4613      	movcs	r3, r2
 800fca6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fca8:	8a7b      	ldrh	r3, [r7, #18]
 800fcaa:	085b      	lsrs	r3, r3, #1
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcbe:	005b      	lsls	r3, r3, #1
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d206      	bcs.n	800fcd4 <tcp_slowtmr+0x258>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcca:	005b      	lsls	r3, r3, #1
 800fccc:	b29a      	uxth	r2, r3
 800fcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce0:	2200      	movs	r2, #0
 800fce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fce8:	f004 f869 	bl	8013dbe <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcee:	7d1b      	ldrb	r3, [r3, #20]
 800fcf0:	2b06      	cmp	r3, #6
 800fcf2:	d111      	bne.n	800fd18 <tcp_slowtmr+0x29c>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf6:	8b5b      	ldrh	r3, [r3, #26]
 800fcf8:	f003 0310 	and.w	r3, r3, #16
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d00b      	beq.n	800fd18 <tcp_slowtmr+0x29c>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd00:	4b91      	ldr	r3, [pc, #580]	; (800ff48 <tcp_slowtmr+0x4cc>)
 800fd02:	681a      	ldr	r2, [r3, #0]
 800fd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd06:	6a1b      	ldr	r3, [r3, #32]
 800fd08:	1ad3      	subs	r3, r2, r3
 800fd0a:	2b28      	cmp	r3, #40	; 0x28
 800fd0c:	d904      	bls.n	800fd18 <tcp_slowtmr+0x29c>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fd0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd12:	3301      	adds	r3, #1
 800fd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1a:	7a5b      	ldrb	r3, [r3, #9]
 800fd1c:	f003 0308 	and.w	r3, r3, #8
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d04c      	beq.n	800fdbe <tcp_slowtmr+0x342>
        ((pcb->state == ESTABLISHED) ||
 800fd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd26:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fd28:	2b04      	cmp	r3, #4
 800fd2a:	d003      	beq.n	800fd34 <tcp_slowtmr+0x2b8>
         (pcb->state == CLOSE_WAIT))) {
 800fd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fd30:	2b07      	cmp	r3, #7
 800fd32:	d144      	bne.n	800fdbe <tcp_slowtmr+0x342>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd34:	4b84      	ldr	r3, [pc, #528]	; (800ff48 <tcp_slowtmr+0x4cc>)
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3a:	6a1b      	ldr	r3, [r3, #32]
 800fd3c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd44:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800fd48:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800fd4c:	497f      	ldr	r1, [pc, #508]	; (800ff4c <tcp_slowtmr+0x4d0>)
 800fd4e:	fba1 1303 	umull	r1, r3, r1, r3
 800fd52:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d90a      	bls.n	800fd6e <tcp_slowtmr+0x2f2>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fd58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fd62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd66:	3301      	adds	r3, #1
 800fd68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd6c:	e027      	b.n	800fdbe <tcp_slowtmr+0x342>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd6e:	4b76      	ldr	r3, [pc, #472]	; (800ff48 <tcp_slowtmr+0x4cc>)
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd74:	6a1b      	ldr	r3, [r3, #32]
 800fd76:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd80:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fd84:	4618      	mov	r0, r3
 800fd86:	4b72      	ldr	r3, [pc, #456]	; (800ff50 <tcp_slowtmr+0x4d4>)
 800fd88:	fb00 f303 	mul.w	r3, r0, r3
 800fd8c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fd8e:	496f      	ldr	r1, [pc, #444]	; (800ff4c <tcp_slowtmr+0x4d0>)
 800fd90:	fba1 1303 	umull	r1, r3, r1, r3
 800fd94:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d911      	bls.n	800fdbe <tcp_slowtmr+0x342>
        err = tcp_keepalive(pcb);
 800fd9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd9c:	f004 fa64 	bl	8014268 <tcp_keepalive>
 800fda0:	4603      	mov	r3, r0
 800fda2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fda6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d107      	bne.n	800fdbe <tcp_slowtmr+0x342>
          pcb->keep_cnt_sent++;
 800fdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdba:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d011      	beq.n	800fdea <tcp_slowtmr+0x36e>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fdc6:	4b60      	ldr	r3, [pc, #384]	; (800ff48 <tcp_slowtmr+0x4cc>)
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdcc:	6a1b      	ldr	r3, [r3, #32]
 800fdce:	1ad2      	subs	r2, r2, r3
 800fdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	460b      	mov	r3, r1
 800fdda:	005b      	lsls	r3, r3, #1
 800fddc:	440b      	add	r3, r1
 800fdde:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d302      	bcc.n	800fdea <tcp_slowtmr+0x36e>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fde4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fde6:	f000 fd69 	bl	80108bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdec:	7d1b      	ldrb	r3, [r3, #20]
 800fdee:	2b03      	cmp	r3, #3
 800fdf0:	d10b      	bne.n	800fe0a <tcp_slowtmr+0x38e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fdf2:	4b55      	ldr	r3, [pc, #340]	; (800ff48 <tcp_slowtmr+0x4cc>)
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf8:	6a1b      	ldr	r3, [r3, #32]
 800fdfa:	1ad3      	subs	r3, r2, r3
 800fdfc:	2b28      	cmp	r3, #40	; 0x28
 800fdfe:	d904      	bls.n	800fe0a <tcp_slowtmr+0x38e>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fe00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe04:	3301      	adds	r3, #1
 800fe06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fe0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0c:	7d1b      	ldrb	r3, [r3, #20]
 800fe0e:	2b09      	cmp	r3, #9
 800fe10:	d10b      	bne.n	800fe2a <tcp_slowtmr+0x3ae>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fe12:	4b4d      	ldr	r3, [pc, #308]	; (800ff48 <tcp_slowtmr+0x4cc>)
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe18:	6a1b      	ldr	r3, [r3, #32]
 800fe1a:	1ad3      	subs	r3, r2, r3
 800fe1c:	2bf0      	cmp	r3, #240	; 0xf0
 800fe1e:	d904      	bls.n	800fe2a <tcp_slowtmr+0x3ae>
        ++pcb_remove;
 800fe20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe24:	3301      	adds	r3, #1
 800fe26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fe2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d048      	beq.n	800fec4 <tcp_slowtmr+0x448>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fe32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe38:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fe3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe3c:	f000 fc0c 	bl	8010658 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d004      	beq.n	800fe50 <tcp_slowtmr+0x3d4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 800fe46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe48:	68da      	ldr	r2, [r3, #12]
 800fe4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4c:	60da      	str	r2, [r3, #12]
 800fe4e:	e003      	b.n	800fe58 <tcp_slowtmr+0x3dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 800fe50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	4a3f      	ldr	r2, [pc, #252]	; (800ff54 <tcp_slowtmr+0x4d8>)
 800fe56:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fe58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d013      	beq.n	800fe88 <tcp_slowtmr+0x40c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fe60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe62:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fe64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe66:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fe68:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fe6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6c:	3304      	adds	r3, #4
 800fe6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe70:	8ad2      	ldrh	r2, [r2, #22]
 800fe72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe74:	8b09      	ldrh	r1, [r1, #24]
 800fe76:	9102      	str	r1, [sp, #8]
 800fe78:	9201      	str	r2, [sp, #4]
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	462b      	mov	r3, r5
 800fe7e:	4622      	mov	r2, r4
 800fe80:	4601      	mov	r1, r0
 800fe82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe84:	f004 f96a 	bl	801415c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fe88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8a:	691b      	ldr	r3, [r3, #16]
 800fe8c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fe8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe90:	7d1b      	ldrb	r3, [r3, #20]
 800fe92:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fe94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe96:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fe98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fe9e:	6838      	ldr	r0, [r7, #0]
 800fea0:	f7ff f9a8 	bl	800f1f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fea4:	4b2c      	ldr	r3, [pc, #176]	; (800ff58 <tcp_slowtmr+0x4dc>)
 800fea6:	2200      	movs	r2, #0
 800fea8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d004      	beq.n	800feba <tcp_slowtmr+0x43e>
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f06f 010c 	mvn.w	r1, #12
 800feb6:	68b8      	ldr	r0, [r7, #8]
 800feb8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800feba:	4b27      	ldr	r3, [pc, #156]	; (800ff58 <tcp_slowtmr+0x4dc>)
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d037      	beq.n	800ff32 <tcp_slowtmr+0x4b6>
        goto tcp_slowtmr_start;
 800fec2:	e5ec      	b.n	800fa9e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed0:	7f1b      	ldrb	r3, [r3, #28]
 800fed2:	3301      	adds	r3, #1
 800fed4:	b2da      	uxtb	r2, r3
 800fed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800feda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fedc:	7f1a      	ldrb	r2, [r3, #28]
 800fede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee0:	7f5b      	ldrb	r3, [r3, #29]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d325      	bcc.n	800ff32 <tcp_slowtmr+0x4b6>
        prev->polltmr = 0;
 800fee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee8:	2200      	movs	r2, #0
 800feea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800feec:	4b1a      	ldr	r3, [pc, #104]	; (800ff58 <tcp_slowtmr+0x4dc>)
 800feee:	2200      	movs	r2, #0
 800fef0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d00b      	beq.n	800ff14 <tcp_slowtmr+0x498>
 800fefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff04:	6912      	ldr	r2, [r2, #16]
 800ff06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ff08:	4610      	mov	r0, r2
 800ff0a:	4798      	blx	r3
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ff12:	e002      	b.n	800ff1a <tcp_slowtmr+0x49e>
 800ff14:	2300      	movs	r3, #0
 800ff16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ff1a:	4b0f      	ldr	r3, [pc, #60]	; (800ff58 <tcp_slowtmr+0x4dc>)
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d000      	beq.n	800ff24 <tcp_slowtmr+0x4a8>
          goto tcp_slowtmr_start;
 800ff22:	e5bc      	b.n	800fa9e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ff24:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d102      	bne.n	800ff32 <tcp_slowtmr+0x4b6>
          tcp_output(prev);
 800ff2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff2e:	f003 fc45 	bl	80137bc <tcp_output>
  while (pcb != NULL) {
 800ff32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f47f adb8 	bne.w	800faaa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ff3e:	4b07      	ldr	r3, [pc, #28]	; (800ff5c <tcp_slowtmr+0x4e0>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ff44:	e03c      	b.n	800ffc0 <tcp_slowtmr+0x544>
 800ff46:	bf00      	nop
 800ff48:	200077b4 	.word	0x200077b4
 800ff4c:	10624dd3 	.word	0x10624dd3
 800ff50:	000124f8 	.word	0x000124f8
 800ff54:	200077c0 	.word	0x200077c0
 800ff58:	200077c8 	.word	0x200077c8
 800ff5c:	200077c4 	.word	0x200077c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 800ff60:	2300      	movs	r3, #0
 800ff62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ff66:	4b1a      	ldr	r3, [pc, #104]	; (800ffd0 <tcp_slowtmr+0x554>)
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6c:	6a1b      	ldr	r3, [r3, #32]
 800ff6e:	1ad3      	subs	r3, r2, r3
 800ff70:	2bf0      	cmp	r3, #240	; 0xf0
 800ff72:	d904      	bls.n	800ff7e <tcp_slowtmr+0x502>
      ++pcb_remove;
 800ff74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff78:	3301      	adds	r3, #1
 800ff7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ff7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d017      	beq.n	800ffb6 <tcp_slowtmr+0x53a>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ff86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff88:	f000 fb66 	bl	8010658 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ff8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d004      	beq.n	800ff9c <tcp_slowtmr+0x520>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 800ff92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff94:	68da      	ldr	r2, [r3, #12]
 800ff96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff98:	60da      	str	r2, [r3, #12]
 800ff9a:	e003      	b.n	800ffa4 <tcp_slowtmr+0x528>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 800ff9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9e:	68db      	ldr	r3, [r3, #12]
 800ffa0:	4a0c      	ldr	r2, [pc, #48]	; (800ffd4 <tcp_slowtmr+0x558>)
 800ffa2:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ffa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa6:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ffa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ffae:	69f8      	ldr	r0, [r7, #28]
 800ffb0:	f7ff f920 	bl	800f1f4 <tcp_free>
 800ffb4:	e004      	b.n	800ffc0 <tcp_slowtmr+0x544>
    } else {
      prev = pcb;
 800ffb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb8:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ffba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ffc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d1cc      	bne.n	800ff60 <tcp_slowtmr+0x4e4>
    }
  }
}
 800ffc6:	bf00      	nop
 800ffc8:	bf00      	nop
 800ffca:	3730      	adds	r7, #48	; 0x30
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bdb0      	pop	{r4, r5, r7, pc}
 800ffd0:	200077b4 	.word	0x200077b4
 800ffd4:	200077c4 	.word	0x200077c4

0800ffd8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ffde:	4b2d      	ldr	r3, [pc, #180]	; (8010094 <tcp_fasttmr+0xbc>)
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	b2da      	uxtb	r2, r3
 800ffe6:	4b2b      	ldr	r3, [pc, #172]	; (8010094 <tcp_fasttmr+0xbc>)
 800ffe8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ffea:	4b2b      	ldr	r3, [pc, #172]	; (8010098 <tcp_fasttmr+0xc0>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fff0:	e048      	b.n	8010084 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	7f9a      	ldrb	r2, [r3, #30]
 800fff6:	4b27      	ldr	r3, [pc, #156]	; (8010094 <tcp_fasttmr+0xbc>)
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d03f      	beq.n	801007e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fffe:	4b25      	ldr	r3, [pc, #148]	; (8010094 <tcp_fasttmr+0xbc>)
 8010000:	781a      	ldrb	r2, [r3, #0]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	8b5b      	ldrh	r3, [r3, #26]
 801000a:	f003 0301 	and.w	r3, r3, #1
 801000e:	2b00      	cmp	r3, #0
 8010010:	d010      	beq.n	8010034 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	8b5b      	ldrh	r3, [r3, #26]
 8010016:	f043 0302 	orr.w	r3, r3, #2
 801001a:	b29a      	uxth	r2, r3
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f003 fbcb 	bl	80137bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	8b5b      	ldrh	r3, [r3, #26]
 801002a:	f023 0303 	bic.w	r3, r3, #3
 801002e:	b29a      	uxth	r2, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	8b5b      	ldrh	r3, [r3, #26]
 8010038:	f003 0308 	and.w	r3, r3, #8
 801003c:	2b00      	cmp	r3, #0
 801003e:	d009      	beq.n	8010054 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	8b5b      	ldrh	r3, [r3, #26]
 8010044:	f023 0308 	bic.w	r3, r3, #8
 8010048:	b29a      	uxth	r2, r3
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f7ff f9fc 	bl	800f44c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00a      	beq.n	8010078 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010062:	4b0e      	ldr	r3, [pc, #56]	; (801009c <tcp_fasttmr+0xc4>)
 8010064:	2200      	movs	r2, #0
 8010066:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 f819 	bl	80100a0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801006e:	4b0b      	ldr	r3, [pc, #44]	; (801009c <tcp_fasttmr+0xc4>)
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d000      	beq.n	8010078 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010076:	e7b8      	b.n	800ffea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	607b      	str	r3, [r7, #4]
 801007c:	e002      	b.n	8010084 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d1b3      	bne.n	800fff2 <tcp_fasttmr+0x1a>
    }
  }
}
 801008a:	bf00      	nop
 801008c:	bf00      	nop
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	200077ca 	.word	0x200077ca
 8010098:	200077c0 	.word	0x200077c0
 801009c:	200077c8 	.word	0x200077c8

080100a0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80100a0:	b590      	push	{r4, r7, lr}
 80100a2:	b085      	sub	sp, #20
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d102      	bne.n	80100b4 <tcp_process_refused_data+0x14>
 80100ae:	f06f 030f 	mvn.w	r3, #15
 80100b2:	e060      	b.n	8010176 <tcp_process_refused_data+0xd6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100b8:	7b5b      	ldrb	r3, [r3, #13]
 80100ba:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100c0:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00b      	beq.n	80100ea <tcp_process_refused_data+0x4a>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6918      	ldr	r0, [r3, #16]
 80100dc:	2300      	movs	r3, #0
 80100de:	68ba      	ldr	r2, [r7, #8]
 80100e0:	6879      	ldr	r1, [r7, #4]
 80100e2:	47a0      	blx	r4
 80100e4:	4603      	mov	r3, r0
 80100e6:	73fb      	strb	r3, [r7, #15]
 80100e8:	e007      	b.n	80100fa <tcp_process_refused_data+0x5a>
 80100ea:	2300      	movs	r3, #0
 80100ec:	68ba      	ldr	r2, [r7, #8]
 80100ee:	6879      	ldr	r1, [r7, #4]
 80100f0:	2000      	movs	r0, #0
 80100f2:	f000 f89e 	bl	8010232 <tcp_recv_null>
 80100f6:	4603      	mov	r3, r0
 80100f8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80100fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d12a      	bne.n	8010158 <tcp_process_refused_data+0xb8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010102:	7bbb      	ldrb	r3, [r7, #14]
 8010104:	f003 0320 	and.w	r3, r3, #32
 8010108:	2b00      	cmp	r3, #0
 801010a:	d033      	beq.n	8010174 <tcp_process_refused_data+0xd4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010110:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010114:	d005      	beq.n	8010122 <tcp_process_refused_data+0x82>
          pcb->rcv_wnd++;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801011a:	3301      	adds	r3, #1
 801011c:	b29a      	uxth	r2, r3
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010128:	2b00      	cmp	r3, #0
 801012a:	d00b      	beq.n	8010144 <tcp_process_refused_data+0xa4>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6918      	ldr	r0, [r3, #16]
 8010136:	2300      	movs	r3, #0
 8010138:	2200      	movs	r2, #0
 801013a:	6879      	ldr	r1, [r7, #4]
 801013c:	47a0      	blx	r4
 801013e:	4603      	mov	r3, r0
 8010140:	73fb      	strb	r3, [r7, #15]
 8010142:	e001      	b.n	8010148 <tcp_process_refused_data+0xa8>
 8010144:	2300      	movs	r3, #0
 8010146:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801014c:	f113 0f0d 	cmn.w	r3, #13
 8010150:	d110      	bne.n	8010174 <tcp_process_refused_data+0xd4>
          return ERR_ABRT;
 8010152:	f06f 030c 	mvn.w	r3, #12
 8010156:	e00e      	b.n	8010176 <tcp_process_refused_data+0xd6>
        }
      }
    } else if (err == ERR_ABRT) {
 8010158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801015c:	f113 0f0d 	cmn.w	r3, #13
 8010160:	d102      	bne.n	8010168 <tcp_process_refused_data+0xc8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010162:	f06f 030c 	mvn.w	r3, #12
 8010166:	e006      	b.n	8010176 <tcp_process_refused_data+0xd6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	68ba      	ldr	r2, [r7, #8]
 801016c:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801016e:	f06f 0304 	mvn.w	r3, #4
 8010172:	e000      	b.n	8010176 <tcp_process_refused_data+0xd6>
    }
  }
  return ERR_OK;
 8010174:	2300      	movs	r3, #0
}
 8010176:	4618      	mov	r0, r3
 8010178:	3714      	adds	r7, #20
 801017a:	46bd      	mov	sp, r7
 801017c:	bd90      	pop	{r4, r7, pc}

0801017e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b084      	sub	sp, #16
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010186:	e007      	b.n	8010198 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 f80a 	bl	80101a8 <tcp_seg_free>
    seg = next;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d1f4      	bne.n	8010188 <tcp_segs_free+0xa>
  }
}
 801019e:	bf00      	nop
 80101a0:	bf00      	nop
 80101a2:	3710      	adds	r7, #16
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d00c      	beq.n	80101d0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d004      	beq.n	80101c8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7fe fe3a 	bl	800ee3c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80101c8:	6879      	ldr	r1, [r7, #4]
 80101ca:	2003      	movs	r0, #3
 80101cc:	f7fe f95a 	bl	800e484 <memp_free>
  }
}
 80101d0:	bf00      	nop
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	460b      	mov	r3, r1
 80101e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d002      	beq.n	80101f0 <tcp_setprio+0x18>

  pcb->prio = prio;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	78fa      	ldrb	r2, [r7, #3]
 80101ee:	755a      	strb	r2, [r3, #21]
}
 80101f0:	370c      	adds	r7, #12
 80101f2:	46bd      	mov	sp, r7
 80101f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f8:	4770      	bx	lr

080101fa <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b084      	sub	sp, #16
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010202:	2003      	movs	r0, #3
 8010204:	f7fe f902 	bl	800e40c <memp_malloc>
 8010208:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d101      	bne.n	8010214 <tcp_seg_copy+0x1a>
    return NULL;
 8010210:	2300      	movs	r3, #0
 8010212:	e00a      	b.n	801022a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010214:	2214      	movs	r2, #20
 8010216:	6879      	ldr	r1, [r7, #4]
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f009 fac2 	bl	80197a2 <memcpy>
  pbuf_ref(cseg->p);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	4618      	mov	r0, r3
 8010224:	f7fe fe74 	bl	800ef10 <pbuf_ref>
  return cseg;
 8010228:	68fb      	ldr	r3, [r7, #12]
}
 801022a:	4618      	mov	r0, r3
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}

08010232 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010232:	b580      	push	{r7, lr}
 8010234:	b084      	sub	sp, #16
 8010236:	af00      	add	r7, sp, #0
 8010238:	60f8      	str	r0, [r7, #12]
 801023a:	60b9      	str	r1, [r7, #8]
 801023c:	607a      	str	r2, [r7, #4]
 801023e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d102      	bne.n	801024c <tcp_recv_null+0x1a>
 8010246:	f06f 030f 	mvn.w	r3, #15
 801024a:	e016      	b.n	801027a <tcp_recv_null+0x48>

  if (p != NULL) {
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d009      	beq.n	8010266 <tcp_recv_null+0x34>
    tcp_recved(pcb, p->tot_len);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	891b      	ldrh	r3, [r3, #8]
 8010256:	4619      	mov	r1, r3
 8010258:	68b8      	ldr	r0, [r7, #8]
 801025a:	f7ff fb95 	bl	800f988 <tcp_recved>
    pbuf_free(p);
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f7fe fdec 	bl	800ee3c <pbuf_free>
 8010264:	e008      	b.n	8010278 <tcp_recv_null+0x46>
  } else if (err == ERR_OK) {
 8010266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d104      	bne.n	8010278 <tcp_recv_null+0x46>
    return tcp_close(pcb);
 801026e:	68b8      	ldr	r0, [r7, #8]
 8010270:	f7ff f945 	bl	800f4fe <tcp_close>
 8010274:	4603      	mov	r3, r0
 8010276:	e000      	b.n	801027a <tcp_recv_null+0x48>
  }
  return ERR_OK;
 8010278:	2300      	movs	r3, #0
}
 801027a:	4618      	mov	r0, r3
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
	...

08010284 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b086      	sub	sp, #24
 8010288:	af00      	add	r7, sp, #0
 801028a:	4603      	mov	r3, r0
 801028c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010292:	2b00      	cmp	r3, #0
 8010294:	db01      	blt.n	801029a <tcp_kill_prio+0x16>
 8010296:	79fb      	ldrb	r3, [r7, #7]
 8010298:	e000      	b.n	801029c <tcp_kill_prio+0x18>
 801029a:	237f      	movs	r3, #127	; 0x7f
 801029c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801029e:	7afb      	ldrb	r3, [r7, #11]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d034      	beq.n	801030e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80102a4:	7afb      	ldrb	r3, [r7, #11]
 80102a6:	3b01      	subs	r3, #1
 80102a8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80102aa:	2300      	movs	r3, #0
 80102ac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80102ae:	2300      	movs	r3, #0
 80102b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102b2:	4b19      	ldr	r3, [pc, #100]	; (8010318 <tcp_kill_prio+0x94>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	617b      	str	r3, [r7, #20]
 80102b8:	e01f      	b.n	80102fa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	7d5b      	ldrb	r3, [r3, #21]
 80102be:	7afa      	ldrb	r2, [r7, #11]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d80c      	bhi.n	80102de <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80102c8:	7afa      	ldrb	r2, [r7, #11]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d112      	bne.n	80102f4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80102ce:	4b13      	ldr	r3, [pc, #76]	; (801031c <tcp_kill_prio+0x98>)
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	6a1b      	ldr	r3, [r3, #32]
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d80a      	bhi.n	80102f4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80102de:	4b0f      	ldr	r3, [pc, #60]	; (801031c <tcp_kill_prio+0x98>)
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	6a1b      	ldr	r3, [r3, #32]
 80102e6:	1ad3      	subs	r3, r2, r3
 80102e8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	7d5b      	ldrb	r3, [r3, #21]
 80102f2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	617b      	str	r3, [r7, #20]
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d1dc      	bne.n	80102ba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d004      	beq.n	8010310 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010306:	6938      	ldr	r0, [r7, #16]
 8010308:	f7ff f9bc 	bl	800f684 <tcp_abort>
 801030c:	e000      	b.n	8010310 <tcp_kill_prio+0x8c>
    return;
 801030e:	bf00      	nop
  }
}
 8010310:	3718      	adds	r7, #24
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	200077c0 	.word	0x200077c0
 801031c:	200077b4 	.word	0x200077b4

08010320 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b086      	sub	sp, #24
 8010324:	af00      	add	r7, sp, #0
 8010326:	4603      	mov	r3, r0
 8010328:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));

  inactivity = 0;
 801032a:	2300      	movs	r3, #0
 801032c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801032e:	2300      	movs	r3, #0
 8010330:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010332:	4b15      	ldr	r3, [pc, #84]	; (8010388 <tcp_kill_state+0x68>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	617b      	str	r3, [r7, #20]
 8010338:	e017      	b.n	801036a <tcp_kill_state+0x4a>
    if (pcb->state == state) {
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	7d1b      	ldrb	r3, [r3, #20]
 801033e:	79fa      	ldrb	r2, [r7, #7]
 8010340:	429a      	cmp	r2, r3
 8010342:	d10f      	bne.n	8010364 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010344:	4b11      	ldr	r3, [pc, #68]	; (801038c <tcp_kill_state+0x6c>)
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	6a1b      	ldr	r3, [r3, #32]
 801034c:	1ad3      	subs	r3, r2, r3
 801034e:	68fa      	ldr	r2, [r7, #12]
 8010350:	429a      	cmp	r2, r3
 8010352:	d807      	bhi.n	8010364 <tcp_kill_state+0x44>
        inactivity = tcp_ticks - pcb->tmr;
 8010354:	4b0d      	ldr	r3, [pc, #52]	; (801038c <tcp_kill_state+0x6c>)
 8010356:	681a      	ldr	r2, [r3, #0]
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	6a1b      	ldr	r3, [r3, #32]
 801035c:	1ad3      	subs	r3, r2, r3
 801035e:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	68db      	ldr	r3, [r3, #12]
 8010368:	617b      	str	r3, [r7, #20]
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d1e4      	bne.n	801033a <tcp_kill_state+0x1a>
      }
    }
  }
  if (inactive != NULL) {
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d003      	beq.n	801037e <tcp_kill_state+0x5e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010376:	2100      	movs	r1, #0
 8010378:	6938      	ldr	r0, [r7, #16]
 801037a:	f7ff f8df 	bl	800f53c <tcp_abandon>
  }
}
 801037e:	bf00      	nop
 8010380:	3718      	adds	r7, #24
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	200077c0 	.word	0x200077c0
 801038c:	200077b4 	.word	0x200077b4

08010390 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010396:	2300      	movs	r3, #0
 8010398:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801039a:	2300      	movs	r3, #0
 801039c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801039e:	4b12      	ldr	r3, [pc, #72]	; (80103e8 <tcp_kill_timewait+0x58>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	60fb      	str	r3, [r7, #12]
 80103a4:	e012      	b.n	80103cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80103a6:	4b11      	ldr	r3, [pc, #68]	; (80103ec <tcp_kill_timewait+0x5c>)
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	6a1b      	ldr	r3, [r3, #32]
 80103ae:	1ad3      	subs	r3, r2, r3
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d807      	bhi.n	80103c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80103b6:	4b0d      	ldr	r3, [pc, #52]	; (80103ec <tcp_kill_timewait+0x5c>)
 80103b8:	681a      	ldr	r2, [r3, #0]
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	6a1b      	ldr	r3, [r3, #32]
 80103be:	1ad3      	subs	r3, r2, r3
 80103c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	68db      	ldr	r3, [r3, #12]
 80103ca:	60fb      	str	r3, [r7, #12]
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d1e9      	bne.n	80103a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d002      	beq.n	80103de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80103d8:	68b8      	ldr	r0, [r7, #8]
 80103da:	f7ff f953 	bl	800f684 <tcp_abort>
  }
}
 80103de:	bf00      	nop
 80103e0:	3710      	adds	r7, #16
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	200077c4 	.word	0x200077c4
 80103ec:	200077b4 	.word	0x200077b4

080103f0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80103f6:	4b10      	ldr	r3, [pc, #64]	; (8010438 <tcp_handle_closepend+0x48>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80103fc:	e014      	b.n	8010428 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	8b5b      	ldrh	r3, [r3, #26]
 8010408:	f003 0308 	and.w	r3, r3, #8
 801040c:	2b00      	cmp	r3, #0
 801040e:	d009      	beq.n	8010424 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	8b5b      	ldrh	r3, [r3, #26]
 8010414:	f023 0308 	bic.w	r3, r3, #8
 8010418:	b29a      	uxth	r2, r3
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7ff f814 	bl	800f44c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1e7      	bne.n	80103fe <tcp_handle_closepend+0xe>
  }
}
 801042e:	bf00      	nop
 8010430:	bf00      	nop
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	200077c0 	.word	0x200077c0

0801043c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	4603      	mov	r3, r0
 8010444:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010446:	2001      	movs	r0, #1
 8010448:	f7fd ffe0 	bl	800e40c <memp_malloc>
 801044c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d126      	bne.n	80104a2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010454:	f7ff ffcc 	bl	80103f0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010458:	f7ff ff9a 	bl	8010390 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801045c:	2001      	movs	r0, #1
 801045e:	f7fd ffd5 	bl	800e40c <memp_malloc>
 8010462:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d11b      	bne.n	80104a2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801046a:	2009      	movs	r0, #9
 801046c:	f7ff ff58 	bl	8010320 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010470:	2001      	movs	r0, #1
 8010472:	f7fd ffcb 	bl	800e40c <memp_malloc>
 8010476:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d111      	bne.n	80104a2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801047e:	2008      	movs	r0, #8
 8010480:	f7ff ff4e 	bl	8010320 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010484:	2001      	movs	r0, #1
 8010486:	f7fd ffc1 	bl	800e40c <memp_malloc>
 801048a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d107      	bne.n	80104a2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010492:	79fb      	ldrb	r3, [r7, #7]
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff fef5 	bl	8010284 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801049a:	2001      	movs	r0, #1
 801049c:	f7fd ffb6 	bl	800e40c <memp_malloc>
 80104a0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d03f      	beq.n	8010528 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80104a8:	229c      	movs	r2, #156	; 0x9c
 80104aa:	2100      	movs	r1, #0
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f009 f8cd 	bl	801964c <memset>
    pcb->prio = prio;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	79fa      	ldrb	r2, [r7, #7]
 80104b6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80104be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80104c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	22ff      	movs	r2, #255	; 0xff
 80104d6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f44f 7206 	mov.w	r2, #536	; 0x218
 80104de:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	2206      	movs	r2, #6
 80104e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	2206      	movs	r2, #6
 80104ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104f4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2201      	movs	r2, #1
 80104fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80104fe:	4b0d      	ldr	r3, [pc, #52]	; (8010534 <tcp_alloc+0xf8>)
 8010500:	681a      	ldr	r2, [r3, #0]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010506:	4b0c      	ldr	r3, [pc, #48]	; (8010538 <tcp_alloc+0xfc>)
 8010508:	781a      	ldrb	r2, [r3, #0]
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010514:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	4a08      	ldr	r2, [pc, #32]	; (801053c <tcp_alloc+0x100>)
 801051c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	4a07      	ldr	r2, [pc, #28]	; (8010540 <tcp_alloc+0x104>)
 8010524:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010528:	68fb      	ldr	r3, [r7, #12]
}
 801052a:	4618      	mov	r0, r3
 801052c:	3710      	adds	r7, #16
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	200077b4 	.word	0x200077b4
 8010538:	200077ca 	.word	0x200077ca
 801053c:	08010233 	.word	0x08010233
 8010540:	006ddd00 	.word	0x006ddd00

08010544 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8010548:	2040      	movs	r0, #64	; 0x40
 801054a:	f7ff ff77 	bl	801043c <tcp_alloc>
 801054e:	4603      	mov	r3, r0
}
 8010550:	4618      	mov	r0, r3
 8010552:	bd80      	pop	{r7, pc}

08010554 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	4603      	mov	r3, r0
 801055c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801055e:	2040      	movs	r0, #64	; 0x40
 8010560:	f7ff ff6c 	bl	801043c <tcp_alloc>
 8010564:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010566:	68fb      	ldr	r3, [r7, #12]
}
 8010568:	4618      	mov	r0, r3
 801056a:	3710      	adds	r7, #16
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	683a      	ldr	r2, [r7, #0]
 8010584:	611a      	str	r2, [r3, #16]
  }
}
 8010586:	bf00      	nop
 8010588:	370c      	adds	r7, #12
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr

08010592 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010592:	b480      	push	{r7}
 8010594:	b083      	sub	sp, #12
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
 801059a:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d003      	beq.n	80105aa <tcp_recv+0x18>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
    pcb->recv = recv;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	683a      	ldr	r2, [r7, #0]
 80105a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80105aa:	bf00      	nop
 80105ac:	370c      	adds	r7, #12
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr

080105b6 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80105b6:	b480      	push	{r7}
 80105b8:	b083      	sub	sp, #12
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
 80105be:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d003      	beq.n	80105ce <tcp_sent+0x18>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
    pcb->sent = sent;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	683a      	ldr	r2, [r7, #0]
 80105ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80105ce:	bf00      	nop
 80105d0:	370c      	adds	r7, #12
 80105d2:	46bd      	mov	sp, r7
 80105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d8:	4770      	bx	lr

080105da <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80105da:	b480      	push	{r7}
 80105dc:	b083      	sub	sp, #12
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
 80105e2:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d003      	beq.n	80105f2 <tcp_err+0x18>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
    pcb->errf = err;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	683a      	ldr	r2, [r7, #0]
 80105ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80105f2:	bf00      	nop
 80105f4:	370c      	adds	r7, #12
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr

080105fe <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80105fe:	b480      	push	{r7}
 8010600:	b085      	sub	sp, #20
 8010602:	af00      	add	r7, sp, #0
 8010604:	6078      	str	r0, [r7, #4]
 8010606:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d008      	beq.n	8010620 <tcp_accept+0x22>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	7d1b      	ldrb	r3, [r3, #20]
 8010612:	2b01      	cmp	r3, #1
 8010614:	d104      	bne.n	8010620 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	683a      	ldr	r2, [r7, #0]
 801061e:	619a      	str	r2, [r3, #24]
  }
}
 8010620:	bf00      	nop
 8010622:	3714      	adds	r7, #20
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801062c:	b480      	push	{r7}
 801062e:	b085      	sub	sp, #20
 8010630:	af00      	add	r7, sp, #0
 8010632:	60f8      	str	r0, [r7, #12]
 8010634:	60b9      	str	r1, [r7, #8]
 8010636:	4613      	mov	r3, r2
 8010638:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d006      	beq.n	801064e <tcp_poll+0x22>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	68ba      	ldr	r2, [r7, #8]
 8010644:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	79fa      	ldrb	r2, [r7, #7]
 801064c:	775a      	strb	r2, [r3, #29]
}
 801064e:	3714      	adds	r7, #20
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr

08010658 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d037      	beq.n	80106d6 <tcp_pcb_purge+0x7e>

  if (pcb->state != CLOSED &&
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	7d1b      	ldrb	r3, [r3, #20]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d033      	beq.n	80106d6 <tcp_pcb_purge+0x7e>
      pcb->state != TIME_WAIT &&
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010672:	2b0a      	cmp	r3, #10
 8010674:	d02f      	beq.n	80106d6 <tcp_pcb_purge+0x7e>
      pcb->state != LISTEN) {
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801067a:	2b01      	cmp	r3, #1
 801067c:	d02b      	beq.n	80106d6 <tcp_pcb_purge+0x7e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010682:	2b00      	cmp	r3, #0
 8010684:	d007      	beq.n	8010696 <tcp_pcb_purge+0x3e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801068a:	4618      	mov	r0, r3
 801068c:	f7fe fbd6 	bl	800ee3c <pbuf_free>
      pcb->refused_data = NULL;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2200      	movs	r2, #0
 8010694:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801069a:	2b00      	cmp	r3, #0
 801069c:	d002      	beq.n	80106a4 <tcp_pcb_purge+0x4c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f000 f90c 	bl	80108bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7ff fd64 	bl	801017e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7ff fd5f 	bl	801017e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2200      	movs	r2, #0
 80106c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);

  TCP_RMV(pcblist, pcb);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	683a      	ldr	r2, [r7, #0]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d105      	bne.n	80106fc <tcp_pcb_remove+0x20>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	68da      	ldr	r2, [r3, #12]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	601a      	str	r2, [r3, #0]
 80106fa:	e013      	b.n	8010724 <tcp_pcb_remove+0x48>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	60fb      	str	r3, [r7, #12]
 8010702:	e00c      	b.n	801071e <tcp_pcb_remove+0x42>
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	683a      	ldr	r2, [r7, #0]
 801070a:	429a      	cmp	r2, r3
 801070c:	d104      	bne.n	8010718 <tcp_pcb_remove+0x3c>
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	68da      	ldr	r2, [r3, #12]
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	60da      	str	r2, [r3, #12]
 8010716:	e005      	b.n	8010724 <tcp_pcb_remove+0x48>
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	60fb      	str	r3, [r7, #12]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1ef      	bne.n	8010704 <tcp_pcb_remove+0x28>
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	2200      	movs	r2, #0
 8010728:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801072a:	6838      	ldr	r0, [r7, #0]
 801072c:	f7ff ff94 	bl	8010658 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	7d1b      	ldrb	r3, [r3, #20]
 8010734:	2b0a      	cmp	r3, #10
 8010736:	d013      	beq.n	8010760 <tcp_pcb_remove+0x84>
      (pcb->state != LISTEN) &&
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801073c:	2b01      	cmp	r3, #1
 801073e:	d00f      	beq.n	8010760 <tcp_pcb_remove+0x84>
      (pcb->flags & TF_ACK_DELAY)) {
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	8b5b      	ldrh	r3, [r3, #26]
 8010744:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010748:	2b00      	cmp	r3, #0
 801074a:	d009      	beq.n	8010760 <tcp_pcb_remove+0x84>
    tcp_ack_now(pcb);
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	8b5b      	ldrh	r3, [r3, #26]
 8010750:	f043 0302 	orr.w	r3, r3, #2
 8010754:	b29a      	uxth	r2, r3
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801075a:	6838      	ldr	r0, [r7, #0]
 801075c:	f003 f82e 	bl	80137bc <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	2200      	movs	r2, #0
 8010764:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	2200      	movs	r2, #0
 801076a:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801076c:	bf00      	nop
 801076e:	3710      	adds	r7, #16
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010774:	b480      	push	{r7}
 8010776:	b083      	sub	sp, #12
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801077c:	4b07      	ldr	r3, [pc, #28]	; (801079c <tcp_next_iss+0x28>)
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	4b07      	ldr	r3, [pc, #28]	; (80107a0 <tcp_next_iss+0x2c>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4413      	add	r3, r2
 8010786:	4a05      	ldr	r2, [pc, #20]	; (801079c <tcp_next_iss+0x28>)
 8010788:	6013      	str	r3, [r2, #0]
  return iss;
 801078a:	4b04      	ldr	r3, [pc, #16]	; (801079c <tcp_next_iss+0x28>)
 801078c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801078e:	4618      	mov	r0, r3
 8010790:	370c      	adds	r7, #12
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	20000138 	.word	0x20000138
 80107a0:	200077b4 	.word	0x200077b4

080107a4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b087      	sub	sp, #28
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	4603      	mov	r3, r0
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	607a      	str	r2, [r7, #4]
 80107b0:	81fb      	strh	r3, [r7, #14]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d101      	bne.n	80107bc <tcp_eff_send_mss_netif+0x18>
      return sendmss;
 80107b8:	89fb      	ldrh	r3, [r7, #14]
 80107ba:	e019      	b.n	80107f0 <tcp_eff_send_mss_netif+0x4c>
    }
    mtu = outif->mtu;
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80107c2:	8afb      	ldrh	r3, [r7, #22]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d012      	beq.n	80107ee <tcp_eff_send_mss_netif+0x4a>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80107c8:	2328      	movs	r3, #40	; 0x28
 80107ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80107cc:	8afa      	ldrh	r2, [r7, #22]
 80107ce:	8abb      	ldrh	r3, [r7, #20]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	d904      	bls.n	80107de <tcp_eff_send_mss_netif+0x3a>
 80107d4:	8afa      	ldrh	r2, [r7, #22]
 80107d6:	8abb      	ldrh	r3, [r7, #20]
 80107d8:	1ad3      	subs	r3, r2, r3
 80107da:	b29b      	uxth	r3, r3
 80107dc:	e000      	b.n	80107e0 <tcp_eff_send_mss_netif+0x3c>
 80107de:	2300      	movs	r3, #0
 80107e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80107e2:	8a7a      	ldrh	r2, [r7, #18]
 80107e4:	89fb      	ldrh	r3, [r7, #14]
 80107e6:	4293      	cmp	r3, r2
 80107e8:	bf28      	it	cs
 80107ea:	4613      	movcs	r3, r2
 80107ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80107ee:	89fb      	ldrh	r3, [r7, #14]
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	371c      	adds	r7, #28
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr

080107fc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);

  while (pcb != NULL) {
 801080a:	e011      	b.n	8010830 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	429a      	cmp	r2, r3
 8010816:	d108      	bne.n	801082a <tcp_netif_ip_addr_changed_pcblist+0x2e>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	f7fe ff30 	bl	800f684 <tcp_abort>
      pcb = next;
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	60fb      	str	r3, [r7, #12]
 8010828:	e002      	b.n	8010830 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d1ea      	bne.n	801080c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8010836:	bf00      	nop
 8010838:	bf00      	nop
 801083a:	3710      	adds	r7, #16
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d02a      	beq.n	80108a6 <tcp_netif_ip_addr_changed+0x66>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d026      	beq.n	80108a6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010858:	4b15      	ldr	r3, [pc, #84]	; (80108b0 <tcp_netif_ip_addr_changed+0x70>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4619      	mov	r1, r3
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7ff ffcc 	bl	80107fc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010864:	4b13      	ldr	r3, [pc, #76]	; (80108b4 <tcp_netif_ip_addr_changed+0x74>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4619      	mov	r1, r3
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f7ff ffc6 	bl	80107fc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d017      	beq.n	80108a6 <tcp_netif_ip_addr_changed+0x66>
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d013      	beq.n	80108a6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801087e:	4b0e      	ldr	r3, [pc, #56]	; (80108b8 <tcp_netif_ip_addr_changed+0x78>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	60fb      	str	r3, [r7, #12]
 8010884:	e00c      	b.n	80108a0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	429a      	cmp	r2, r3
 8010890:	d103      	bne.n	801089a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	681a      	ldr	r2, [r3, #0]
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	68db      	ldr	r3, [r3, #12]
 801089e:	60fb      	str	r3, [r7, #12]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d1ef      	bne.n	8010886 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80108a6:	bf00      	nop
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	200077c0 	.word	0x200077c0
 80108b4:	200077b8 	.word	0x200077b8
 80108b8:	200077bc 	.word	0x200077bc

080108bc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d007      	beq.n	80108dc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7ff fc54 	bl	801017e <tcp_segs_free>
    pcb->ooseq = NULL;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80108dc:	bf00      	nop
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80108e4:	b590      	push	{r4, r7, lr}
 80108e6:	b08d      	sub	sp, #52	; 0x34
 80108e8:	af04      	add	r7, sp, #16
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 80108ee:	4b9b      	ldr	r3, [pc, #620]	; (8010b5c <tcp_input+0x278>)
 80108f0:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 80108f4:	3301      	adds	r3, #1
 80108f6:	b29a      	uxth	r2, r3
 80108f8:	4b98      	ldr	r3, [pc, #608]	; (8010b5c <tcp_input+0x278>)
 80108fa:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	4a97      	ldr	r2, [pc, #604]	; (8010b60 <tcp_input+0x27c>)
 8010904:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	895b      	ldrh	r3, [r3, #10]
 801090a:	2b13      	cmp	r3, #19
 801090c:	d808      	bhi.n	8010920 <tcp_input+0x3c>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 801090e:	4b93      	ldr	r3, [pc, #588]	; (8010b5c <tcp_input+0x278>)
 8010910:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010914:	3301      	adds	r3, #1
 8010916:	b29a      	uxth	r2, r3
 8010918:	4b90      	ldr	r3, [pc, #576]	; (8010b5c <tcp_input+0x278>)
 801091a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 801091e:	e3a3      	b.n	8011068 <tcp_input+0x784>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010920:	4b90      	ldr	r3, [pc, #576]	; (8010b64 <tcp_input+0x280>)
 8010922:	695b      	ldr	r3, [r3, #20]
 8010924:	4a8f      	ldr	r2, [pc, #572]	; (8010b64 <tcp_input+0x280>)
 8010926:	6812      	ldr	r2, [r2, #0]
 8010928:	4611      	mov	r1, r2
 801092a:	4618      	mov	r0, r3
 801092c:	f007 fd16 	bl	801835c <ip4_addr_isbroadcast_u32>
 8010930:	4603      	mov	r3, r0
 8010932:	2b00      	cmp	r3, #0
 8010934:	d105      	bne.n	8010942 <tcp_input+0x5e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010936:	4b8b      	ldr	r3, [pc, #556]	; (8010b64 <tcp_input+0x280>)
 8010938:	695b      	ldr	r3, [r3, #20]
 801093a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801093e:	2be0      	cmp	r3, #224	; 0xe0
 8010940:	d108      	bne.n	8010954 <tcp_input+0x70>
    TCP_STATS_INC(tcp.proterr);
 8010942:	4b86      	ldr	r3, [pc, #536]	; (8010b5c <tcp_input+0x278>)
 8010944:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8010948:	3301      	adds	r3, #1
 801094a:	b29a      	uxth	r2, r3
 801094c:	4b83      	ldr	r3, [pc, #524]	; (8010b5c <tcp_input+0x278>)
 801094e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 8010952:	e389      	b.n	8011068 <tcp_input+0x784>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	891a      	ldrh	r2, [r3, #8]
 8010958:	4b83      	ldr	r3, [pc, #524]	; (8010b68 <tcp_input+0x284>)
 801095a:	9300      	str	r3, [sp, #0]
 801095c:	4b83      	ldr	r3, [pc, #524]	; (8010b6c <tcp_input+0x288>)
 801095e:	2106      	movs	r1, #6
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7fd fc4f 	bl	800e204 <ip_chksum_pseudo>
 8010966:	4603      	mov	r3, r0
 8010968:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 801096a:	8a3b      	ldrh	r3, [r7, #16]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d008      	beq.n	8010982 <tcp_input+0x9e>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 8010970:	4b7a      	ldr	r3, [pc, #488]	; (8010b5c <tcp_input+0x278>)
 8010972:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8010976:	3301      	adds	r3, #1
 8010978:	b29a      	uxth	r2, r3
 801097a:	4b78      	ldr	r3, [pc, #480]	; (8010b5c <tcp_input+0x278>)
 801097c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
      goto dropped;
 8010980:	e372      	b.n	8011068 <tcp_input+0x784>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010982:	4b77      	ldr	r3, [pc, #476]	; (8010b60 <tcp_input+0x27c>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	899b      	ldrh	r3, [r3, #12]
 8010988:	b29b      	uxth	r3, r3
 801098a:	4618      	mov	r0, r3
 801098c:	f7fd fa5e 	bl	800de4c <lwip_htons>
 8010990:	4603      	mov	r3, r0
 8010992:	0b1b      	lsrs	r3, r3, #12
 8010994:	b29b      	uxth	r3, r3
 8010996:	b2db      	uxtb	r3, r3
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801099c:	7bfb      	ldrb	r3, [r7, #15]
 801099e:	2b13      	cmp	r3, #19
 80109a0:	d905      	bls.n	80109ae <tcp_input+0xca>
 80109a2:	7bfb      	ldrb	r3, [r7, #15]
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	891b      	ldrh	r3, [r3, #8]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d908      	bls.n	80109c0 <tcp_input+0xdc>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 80109ae:	4b6b      	ldr	r3, [pc, #428]	; (8010b5c <tcp_input+0x278>)
 80109b0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80109b4:	3301      	adds	r3, #1
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	4b68      	ldr	r3, [pc, #416]	; (8010b5c <tcp_input+0x278>)
 80109ba:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 80109be:	e353      	b.n	8011068 <tcp_input+0x784>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80109c0:	7bfb      	ldrb	r3, [r7, #15]
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	3b14      	subs	r3, #20
 80109c6:	b29a      	uxth	r2, r3
 80109c8:	4b69      	ldr	r3, [pc, #420]	; (8010b70 <tcp_input+0x28c>)
 80109ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80109cc:	4b69      	ldr	r3, [pc, #420]	; (8010b74 <tcp_input+0x290>)
 80109ce:	2200      	movs	r2, #0
 80109d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	895a      	ldrh	r2, [r3, #10]
 80109d6:	7bfb      	ldrb	r3, [r7, #15]
 80109d8:	b29b      	uxth	r3, r3
 80109da:	429a      	cmp	r2, r3
 80109dc:	d309      	bcc.n	80109f2 <tcp_input+0x10e>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80109de:	4b64      	ldr	r3, [pc, #400]	; (8010b70 <tcp_input+0x28c>)
 80109e0:	881a      	ldrh	r2, [r3, #0]
 80109e2:	4b65      	ldr	r3, [pc, #404]	; (8010b78 <tcp_input+0x294>)
 80109e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80109e6:	7bfb      	ldrb	r3, [r7, #15]
 80109e8:	4619      	mov	r1, r3
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f7fe f9b9 	bl	800ed62 <pbuf_remove_header>
 80109f0:	e035      	b.n	8010a5e <tcp_input+0x17a>
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80109f2:	2114      	movs	r1, #20
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7fe f9b4 	bl	800ed62 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	895a      	ldrh	r2, [r3, #10]
 80109fe:	4b5e      	ldr	r3, [pc, #376]	; (8010b78 <tcp_input+0x294>)
 8010a00:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010a02:	4b5b      	ldr	r3, [pc, #364]	; (8010b70 <tcp_input+0x28c>)
 8010a04:	881a      	ldrh	r2, [r3, #0]
 8010a06:	4b5c      	ldr	r3, [pc, #368]	; (8010b78 <tcp_input+0x294>)
 8010a08:	881b      	ldrh	r3, [r3, #0]
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010a0e:	4b5a      	ldr	r3, [pc, #360]	; (8010b78 <tcp_input+0x294>)
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	4619      	mov	r1, r3
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f7fe f9a4 	bl	800ed62 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	895b      	ldrh	r3, [r3, #10]
 8010a20:	89ba      	ldrh	r2, [r7, #12]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d908      	bls.n	8010a38 <tcp_input+0x154>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8010a26:	4b4d      	ldr	r3, [pc, #308]	; (8010b5c <tcp_input+0x278>)
 8010a28:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	4b4a      	ldr	r3, [pc, #296]	; (8010b5c <tcp_input+0x278>)
 8010a32:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8010a36:	e317      	b.n	8011068 <tcp_input+0x784>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	4a4d      	ldr	r2, [pc, #308]	; (8010b74 <tcp_input+0x290>)
 8010a40:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	89ba      	ldrh	r2, [r7, #12]
 8010a48:	4611      	mov	r1, r2
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fe f989 	bl	800ed62 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	891a      	ldrh	r2, [r3, #8]
 8010a54:	89bb      	ldrh	r3, [r7, #12]
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010a5e:	4b40      	ldr	r3, [pc, #256]	; (8010b60 <tcp_input+0x27c>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	881b      	ldrh	r3, [r3, #0]
 8010a64:	b29b      	uxth	r3, r3
 8010a66:	4a3e      	ldr	r2, [pc, #248]	; (8010b60 <tcp_input+0x27c>)
 8010a68:	6814      	ldr	r4, [r2, #0]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fd f9ee 	bl	800de4c <lwip_htons>
 8010a70:	4603      	mov	r3, r0
 8010a72:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010a74:	4b3a      	ldr	r3, [pc, #232]	; (8010b60 <tcp_input+0x27c>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	885b      	ldrh	r3, [r3, #2]
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	4a38      	ldr	r2, [pc, #224]	; (8010b60 <tcp_input+0x27c>)
 8010a7e:	6814      	ldr	r4, [r2, #0]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7fd f9e3 	bl	800de4c <lwip_htons>
 8010a86:	4603      	mov	r3, r0
 8010a88:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010a8a:	4b35      	ldr	r3, [pc, #212]	; (8010b60 <tcp_input+0x27c>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	4a33      	ldr	r2, [pc, #204]	; (8010b60 <tcp_input+0x27c>)
 8010a92:	6814      	ldr	r4, [r2, #0]
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fd f9ee 	bl	800de76 <lwip_htonl>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	6063      	str	r3, [r4, #4]
 8010a9e:	6863      	ldr	r3, [r4, #4]
 8010aa0:	4a36      	ldr	r2, [pc, #216]	; (8010b7c <tcp_input+0x298>)
 8010aa2:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010aa4:	4b2e      	ldr	r3, [pc, #184]	; (8010b60 <tcp_input+0x27c>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	4a2d      	ldr	r2, [pc, #180]	; (8010b60 <tcp_input+0x27c>)
 8010aac:	6814      	ldr	r4, [r2, #0]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7fd f9e1 	bl	800de76 <lwip_htonl>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	60a3      	str	r3, [r4, #8]
 8010ab8:	68a3      	ldr	r3, [r4, #8]
 8010aba:	4a31      	ldr	r2, [pc, #196]	; (8010b80 <tcp_input+0x29c>)
 8010abc:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010abe:	4b28      	ldr	r3, [pc, #160]	; (8010b60 <tcp_input+0x27c>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	89db      	ldrh	r3, [r3, #14]
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	4a26      	ldr	r2, [pc, #152]	; (8010b60 <tcp_input+0x27c>)
 8010ac8:	6814      	ldr	r4, [r2, #0]
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fd f9be 	bl	800de4c <lwip_htons>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010ad4:	4b22      	ldr	r3, [pc, #136]	; (8010b60 <tcp_input+0x27c>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	899b      	ldrh	r3, [r3, #12]
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fd f9b5 	bl	800de4c <lwip_htons>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010aea:	b2da      	uxtb	r2, r3
 8010aec:	4b25      	ldr	r3, [pc, #148]	; (8010b84 <tcp_input+0x2a0>)
 8010aee:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	891a      	ldrh	r2, [r3, #8]
 8010af4:	4b24      	ldr	r3, [pc, #144]	; (8010b88 <tcp_input+0x2a4>)
 8010af6:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010af8:	4b22      	ldr	r3, [pc, #136]	; (8010b84 <tcp_input+0x2a0>)
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	f003 0303 	and.w	r3, r3, #3
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d014      	beq.n	8010b2e <tcp_input+0x24a>
    tcplen++;
 8010b04:	4b20      	ldr	r3, [pc, #128]	; (8010b88 <tcp_input+0x2a4>)
 8010b06:	881b      	ldrh	r3, [r3, #0]
 8010b08:	3301      	adds	r3, #1
 8010b0a:	b29a      	uxth	r2, r3
 8010b0c:	4b1e      	ldr	r3, [pc, #120]	; (8010b88 <tcp_input+0x2a4>)
 8010b0e:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	891a      	ldrh	r2, [r3, #8]
 8010b14:	4b1c      	ldr	r3, [pc, #112]	; (8010b88 <tcp_input+0x2a4>)
 8010b16:	881b      	ldrh	r3, [r3, #0]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d908      	bls.n	8010b2e <tcp_input+0x24a>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8010b1c:	4b0f      	ldr	r3, [pc, #60]	; (8010b5c <tcp_input+0x278>)
 8010b1e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8010b22:	3301      	adds	r3, #1
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	4b0d      	ldr	r3, [pc, #52]	; (8010b5c <tcp_input+0x278>)
 8010b28:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8010b2c:	e29c      	b.n	8011068 <tcp_input+0x784>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b32:	4b16      	ldr	r3, [pc, #88]	; (8010b8c <tcp_input+0x2a8>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	61bb      	str	r3, [r7, #24]
 8010b38:	e063      	b.n	8010c02 <tcp_input+0x31e>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b3a:	69bb      	ldr	r3, [r7, #24]
 8010b3c:	7a1b      	ldrb	r3, [r3, #8]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d026      	beq.n	8010b90 <tcp_input+0x2ac>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	7a1a      	ldrb	r2, [r3, #8]
 8010b46:	4b07      	ldr	r3, [pc, #28]	; (8010b64 <tcp_input+0x280>)
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010b4e:	3301      	adds	r3, #1
 8010b50:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d01c      	beq.n	8010b90 <tcp_input+0x2ac>
      prev = pcb;
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	61fb      	str	r3, [r7, #28]
      continue;
 8010b5a:	e04f      	b.n	8010bfc <tcp_input+0x318>
 8010b5c:	2000770c 	.word	0x2000770c
 8010b60:	200077e0 	.word	0x200077e0
 8010b64:	200076e8 	.word	0x200076e8
 8010b68:	200076fc 	.word	0x200076fc
 8010b6c:	200076f8 	.word	0x200076f8
 8010b70:	200077e4 	.word	0x200077e4
 8010b74:	200077e8 	.word	0x200077e8
 8010b78:	200077e6 	.word	0x200077e6
 8010b7c:	200077f0 	.word	0x200077f0
 8010b80:	200077f4 	.word	0x200077f4
 8010b84:	200077fc 	.word	0x200077fc
 8010b88:	200077fa 	.word	0x200077fa
 8010b8c:	200077c0 	.word	0x200077c0
    }

    if (pcb->remote_port == tcphdr->src &&
 8010b90:	69bb      	ldr	r3, [r7, #24]
 8010b92:	8b1a      	ldrh	r2, [r3, #24]
 8010b94:	4b68      	ldr	r3, [pc, #416]	; (8010d38 <tcp_input+0x454>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	881b      	ldrh	r3, [r3, #0]
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	d12b      	bne.n	8010bf8 <tcp_input+0x314>
        pcb->local_port == tcphdr->dest &&
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	8ada      	ldrh	r2, [r3, #22]
 8010ba4:	4b64      	ldr	r3, [pc, #400]	; (8010d38 <tcp_input+0x454>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	885b      	ldrh	r3, [r3, #2]
 8010baa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d123      	bne.n	8010bf8 <tcp_input+0x314>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	685a      	ldr	r2, [r3, #4]
 8010bb4:	4b61      	ldr	r3, [pc, #388]	; (8010d3c <tcp_input+0x458>)
 8010bb6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d11d      	bne.n	8010bf8 <tcp_input+0x314>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010bbc:	69bb      	ldr	r3, [r7, #24]
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	4b5e      	ldr	r3, [pc, #376]	; (8010d3c <tcp_input+0x458>)
 8010bc2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d117      	bne.n	8010bf8 <tcp_input+0x314>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 8010bc8:	69fb      	ldr	r3, [r7, #28]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00b      	beq.n	8010be6 <tcp_input+0x302>
        prev->next = pcb->next;
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	68da      	ldr	r2, [r3, #12]
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010bd6:	4b5a      	ldr	r3, [pc, #360]	; (8010d40 <tcp_input+0x45c>)
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010bde:	4a58      	ldr	r2, [pc, #352]	; (8010d40 <tcp_input+0x45c>)
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 8010be4:	e010      	b.n	8010c08 <tcp_input+0x324>
        TCP_STATS_INC(tcp.cachehit);
 8010be6:	4b57      	ldr	r3, [pc, #348]	; (8010d44 <tcp_input+0x460>)
 8010be8:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8010bec:	3301      	adds	r3, #1
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	4b54      	ldr	r3, [pc, #336]	; (8010d44 <tcp_input+0x460>)
 8010bf2:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      break;
 8010bf6:	e007      	b.n	8010c08 <tcp_input+0x324>
    }
    prev = pcb;
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	61bb      	str	r3, [r7, #24]
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d198      	bne.n	8010b3a <tcp_input+0x256>
  }

  if (pcb == NULL) {
 8010c08:	69bb      	ldr	r3, [r7, #24]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	f040 80a0 	bne.w	8010d50 <tcp_input+0x46c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c10:	4b4d      	ldr	r3, [pc, #308]	; (8010d48 <tcp_input+0x464>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	61bb      	str	r3, [r7, #24]
 8010c16:	e034      	b.n	8010c82 <tcp_input+0x39e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	7a1b      	ldrb	r3, [r3, #8]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d009      	beq.n	8010c34 <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	7a1a      	ldrb	r2, [r3, #8]
 8010c24:	4b45      	ldr	r3, [pc, #276]	; (8010d3c <tcp_input+0x458>)
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d122      	bne.n	8010c7a <tcp_input+0x396>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010c34:	69bb      	ldr	r3, [r7, #24]
 8010c36:	8b1a      	ldrh	r2, [r3, #24]
 8010c38:	4b3f      	ldr	r3, [pc, #252]	; (8010d38 <tcp_input+0x454>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	881b      	ldrh	r3, [r3, #0]
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d11b      	bne.n	8010c7c <tcp_input+0x398>
          pcb->local_port == tcphdr->dest &&
 8010c44:	69bb      	ldr	r3, [r7, #24]
 8010c46:	8ada      	ldrh	r2, [r3, #22]
 8010c48:	4b3b      	ldr	r3, [pc, #236]	; (8010d38 <tcp_input+0x454>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	885b      	ldrh	r3, [r3, #2]
 8010c4e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d113      	bne.n	8010c7c <tcp_input+0x398>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c54:	69bb      	ldr	r3, [r7, #24]
 8010c56:	685a      	ldr	r2, [r3, #4]
 8010c58:	4b38      	ldr	r3, [pc, #224]	; (8010d3c <tcp_input+0x458>)
 8010c5a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d10d      	bne.n	8010c7c <tcp_input+0x398>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010c60:	69bb      	ldr	r3, [r7, #24]
 8010c62:	681a      	ldr	r2, [r3, #0]
 8010c64:	4b35      	ldr	r3, [pc, #212]	; (8010d3c <tcp_input+0x458>)
 8010c66:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d107      	bne.n	8010c7c <tcp_input+0x398>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010c6c:	69b8      	ldr	r0, [r7, #24]
 8010c6e:	f000 fb41 	bl	80112f4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7fe f8e2 	bl	800ee3c <pbuf_free>
        return;
 8010c78:	e203      	b.n	8011082 <tcp_input+0x79e>
        continue;
 8010c7a:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c7c:	69bb      	ldr	r3, [r7, #24]
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	61bb      	str	r3, [r7, #24]
 8010c82:	69bb      	ldr	r3, [r7, #24]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d1c7      	bne.n	8010c18 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c8c:	4b2f      	ldr	r3, [pc, #188]	; (8010d4c <tcp_input+0x468>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	617b      	str	r3, [r7, #20]
 8010c92:	e02a      	b.n	8010cea <tcp_input+0x406>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	7a1b      	ldrb	r3, [r3, #8]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d00c      	beq.n	8010cb6 <tcp_input+0x3d2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	7a1a      	ldrb	r2, [r3, #8]
 8010ca0:	4b26      	ldr	r3, [pc, #152]	; (8010d3c <tcp_input+0x458>)
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010ca8:	3301      	adds	r3, #1
 8010caa:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d002      	beq.n	8010cb6 <tcp_input+0x3d2>
        prev = (struct tcp_pcb *)lpcb;
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	61fb      	str	r3, [r7, #28]
        continue;
 8010cb4:	e016      	b.n	8010ce4 <tcp_input+0x400>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	8ada      	ldrh	r2, [r3, #22]
 8010cba:	4b1f      	ldr	r3, [pc, #124]	; (8010d38 <tcp_input+0x454>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	885b      	ldrh	r3, [r3, #2]
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d10c      	bne.n	8010ce0 <tcp_input+0x3fc>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	4b1c      	ldr	r3, [pc, #112]	; (8010d3c <tcp_input+0x458>)
 8010ccc:	695b      	ldr	r3, [r3, #20]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d00f      	beq.n	8010cf2 <tcp_input+0x40e>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00d      	beq.n	8010cf4 <tcp_input+0x410>
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d009      	beq.n	8010cf4 <tcp_input+0x410>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	617b      	str	r3, [r7, #20]
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d1d1      	bne.n	8010c94 <tcp_input+0x3b0>
 8010cf0:	e000      	b.n	8010cf4 <tcp_input+0x410>
            break;
 8010cf2:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d02a      	beq.n	8010d50 <tcp_input+0x46c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010cfa:	69fb      	ldr	r3, [r7, #28]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00b      	beq.n	8010d18 <tcp_input+0x434>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	68da      	ldr	r2, [r3, #12]
 8010d04:	69fb      	ldr	r3, [r7, #28]
 8010d06:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010d08:	4b10      	ldr	r3, [pc, #64]	; (8010d4c <tcp_input+0x468>)
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010d10:	4a0e      	ldr	r2, [pc, #56]	; (8010d4c <tcp_input+0x468>)
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	6013      	str	r3, [r2, #0]
 8010d16:	e007      	b.n	8010d28 <tcp_input+0x444>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8010d18:	4b0a      	ldr	r3, [pc, #40]	; (8010d44 <tcp_input+0x460>)
 8010d1a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8010d1e:	3301      	adds	r3, #1
 8010d20:	b29a      	uxth	r2, r3
 8010d22:	4b08      	ldr	r3, [pc, #32]	; (8010d44 <tcp_input+0x460>)
 8010d24:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010d28:	6978      	ldr	r0, [r7, #20]
 8010d2a:	f000 f9eb 	bl	8011104 <tcp_listen_input>
      }
      pbuf_free(p);
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f7fe f884 	bl	800ee3c <pbuf_free>
      return;
 8010d34:	e1a5      	b.n	8011082 <tcp_input+0x79e>
 8010d36:	bf00      	nop
 8010d38:	200077e0 	.word	0x200077e0
 8010d3c:	200076e8 	.word	0x200076e8
 8010d40:	200077c0 	.word	0x200077c0
 8010d44:	2000770c 	.word	0x2000770c
 8010d48:	200077c4 	.word	0x200077c4
 8010d4c:	200077bc 	.word	0x200077bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010d50:	69bb      	ldr	r3, [r7, #24]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f000 814e 	beq.w	8010ff4 <tcp_input+0x710>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010d58:	4b9c      	ldr	r3, [pc, #624]	; (8010fcc <tcp_input+0x6e8>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	891a      	ldrh	r2, [r3, #8]
 8010d62:	4b9a      	ldr	r3, [pc, #616]	; (8010fcc <tcp_input+0x6e8>)
 8010d64:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010d66:	4a99      	ldr	r2, [pc, #612]	; (8010fcc <tcp_input+0x6e8>)
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010d6c:	4b98      	ldr	r3, [pc, #608]	; (8010fd0 <tcp_input+0x6ec>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a96      	ldr	r2, [pc, #600]	; (8010fcc <tcp_input+0x6e8>)
 8010d72:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8010d74:	4b97      	ldr	r3, [pc, #604]	; (8010fd4 <tcp_input+0x6f0>)
 8010d76:	2200      	movs	r2, #0
 8010d78:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010d7a:	4b97      	ldr	r3, [pc, #604]	; (8010fd8 <tcp_input+0x6f4>)
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010d80:	4b96      	ldr	r3, [pc, #600]	; (8010fdc <tcp_input+0x6f8>)
 8010d82:	2200      	movs	r2, #0
 8010d84:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010d86:	4b96      	ldr	r3, [pc, #600]	; (8010fe0 <tcp_input+0x6fc>)
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	f003 0308 	and.w	r3, r3, #8
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d006      	beq.n	8010da0 <tcp_input+0x4bc>
      p->flags |= PBUF_FLAG_PUSH;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	7b5b      	ldrb	r3, [r3, #13]
 8010d96:	f043 0301 	orr.w	r3, r3, #1
 8010d9a:	b2da      	uxtb	r2, r3
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010da0:	69bb      	ldr	r3, [r7, #24]
 8010da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d01e      	beq.n	8010de6 <tcp_input+0x502>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010da8:	69b8      	ldr	r0, [r7, #24]
 8010daa:	f7ff f979 	bl	80100a0 <tcp_process_refused_data>
 8010dae:	4603      	mov	r3, r0
 8010db0:	f113 0f0d 	cmn.w	r3, #13
 8010db4:	d007      	beq.n	8010dc6 <tcp_input+0x4e2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d013      	beq.n	8010de6 <tcp_input+0x502>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010dbe:	4b89      	ldr	r3, [pc, #548]	; (8010fe4 <tcp_input+0x700>)
 8010dc0:	881b      	ldrh	r3, [r3, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d00f      	beq.n	8010de6 <tcp_input+0x502>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d102      	bne.n	8010dd4 <tcp_input+0x4f0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010dce:	69b8      	ldr	r0, [r7, #24]
 8010dd0:	f003 f9f9 	bl	80141c6 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8010dd4:	4b84      	ldr	r3, [pc, #528]	; (8010fe8 <tcp_input+0x704>)
 8010dd6:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8010dda:	3301      	adds	r3, #1
 8010ddc:	b29a      	uxth	r2, r3
 8010dde:	4b82      	ldr	r3, [pc, #520]	; (8010fe8 <tcp_input+0x704>)
 8010de0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010de4:	e0de      	b.n	8010fa4 <tcp_input+0x6c0>
      }
    }
    tcp_input_pcb = pcb;
 8010de6:	4a81      	ldr	r2, [pc, #516]	; (8010fec <tcp_input+0x708>)
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010dec:	69b8      	ldr	r0, [r7, #24]
 8010dee:	f000 faeb 	bl	80113c8 <tcp_process>
 8010df2:	4603      	mov	r3, r0
 8010df4:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010df6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010dfa:	f113 0f0d 	cmn.w	r3, #13
 8010dfe:	f000 80c6 	beq.w	8010f8e <tcp_input+0x6aa>
      if (recv_flags & TF_RESET) {
 8010e02:	4b75      	ldr	r3, [pc, #468]	; (8010fd8 <tcp_input+0x6f4>)
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	f003 0308 	and.w	r3, r3, #8
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d015      	beq.n	8010e3a <tcp_input+0x556>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010e0e:	69bb      	ldr	r3, [r7, #24]
 8010e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d008      	beq.n	8010e2a <tcp_input+0x546>
 8010e18:	69bb      	ldr	r3, [r7, #24]
 8010e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e1e:	69ba      	ldr	r2, [r7, #24]
 8010e20:	6912      	ldr	r2, [r2, #16]
 8010e22:	f06f 010d 	mvn.w	r1, #13
 8010e26:	4610      	mov	r0, r2
 8010e28:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010e2a:	69b9      	ldr	r1, [r7, #24]
 8010e2c:	4870      	ldr	r0, [pc, #448]	; (8010ff0 <tcp_input+0x70c>)
 8010e2e:	f7ff fc55 	bl	80106dc <tcp_pcb_remove>
        tcp_free(pcb);
 8010e32:	69b8      	ldr	r0, [r7, #24]
 8010e34:	f7fe f9de 	bl	800f1f4 <tcp_free>
 8010e38:	e0b4      	b.n	8010fa4 <tcp_input+0x6c0>
      } else {
        err = ERR_OK;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010e3e:	4b67      	ldr	r3, [pc, #412]	; (8010fdc <tcp_input+0x6f8>)
 8010e40:	881b      	ldrh	r3, [r3, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d01d      	beq.n	8010e82 <tcp_input+0x59e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010e46:	4b65      	ldr	r3, [pc, #404]	; (8010fdc <tcp_input+0x6f8>)
 8010e48:	881b      	ldrh	r3, [r3, #0]
 8010e4a:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010e4c:	69bb      	ldr	r3, [r7, #24]
 8010e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d00a      	beq.n	8010e6c <tcp_input+0x588>
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e5c:	69ba      	ldr	r2, [r7, #24]
 8010e5e:	6910      	ldr	r0, [r2, #16]
 8010e60:	897a      	ldrh	r2, [r7, #10]
 8010e62:	69b9      	ldr	r1, [r7, #24]
 8010e64:	4798      	blx	r3
 8010e66:	4603      	mov	r3, r0
 8010e68:	74fb      	strb	r3, [r7, #19]
 8010e6a:	e001      	b.n	8010e70 <tcp_input+0x58c>
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010e70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e74:	f113 0f0d 	cmn.w	r3, #13
 8010e78:	f000 808b 	beq.w	8010f92 <tcp_input+0x6ae>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010e7c:	4b57      	ldr	r3, [pc, #348]	; (8010fdc <tcp_input+0x6f8>)
 8010e7e:	2200      	movs	r2, #0
 8010e80:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010e82:	69b8      	ldr	r0, [r7, #24]
 8010e84:	f000 f90e 	bl	80110a4 <tcp_input_delayed_close>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f040 8083 	bne.w	8010f96 <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010e90:	4b50      	ldr	r3, [pc, #320]	; (8010fd4 <tcp_input+0x6f0>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d036      	beq.n	8010f06 <tcp_input+0x622>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 8010e98:	69bb      	ldr	r3, [r7, #24]
 8010e9a:	8b5b      	ldrh	r3, [r3, #26]
 8010e9c:	f003 0310 	and.w	r3, r3, #16
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d008      	beq.n	8010eb6 <tcp_input+0x5d2>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010ea4:	4b4b      	ldr	r3, [pc, #300]	; (8010fd4 <tcp_input+0x6f0>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fd ffc7 	bl	800ee3c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010eae:	69b8      	ldr	r0, [r7, #24]
 8010eb0:	f7fe fbe8 	bl	800f684 <tcp_abort>
            goto aborted;
 8010eb4:	e076      	b.n	8010fa4 <tcp_input+0x6c0>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d00c      	beq.n	8010eda <tcp_input+0x5f6>
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	6918      	ldr	r0, [r3, #16]
 8010eca:	4b42      	ldr	r3, [pc, #264]	; (8010fd4 <tcp_input+0x6f0>)
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	2300      	movs	r3, #0
 8010ed0:	69b9      	ldr	r1, [r7, #24]
 8010ed2:	47a0      	blx	r4
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	74fb      	strb	r3, [r7, #19]
 8010ed8:	e008      	b.n	8010eec <tcp_input+0x608>
 8010eda:	4b3e      	ldr	r3, [pc, #248]	; (8010fd4 <tcp_input+0x6f0>)
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	2300      	movs	r3, #0
 8010ee0:	69b9      	ldr	r1, [r7, #24]
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	f7ff f9a5 	bl	8010232 <tcp_recv_null>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010eec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ef0:	f113 0f0d 	cmn.w	r3, #13
 8010ef4:	d051      	beq.n	8010f9a <tcp_input+0x6b6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010ef6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d003      	beq.n	8010f06 <tcp_input+0x622>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010efe:	4b35      	ldr	r3, [pc, #212]	; (8010fd4 <tcp_input+0x6f0>)
 8010f00:	681a      	ldr	r2, [r3, #0]
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010f06:	4b34      	ldr	r3, [pc, #208]	; (8010fd8 <tcp_input+0x6f4>)
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	f003 0320 	and.w	r3, r3, #32
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d030      	beq.n	8010f74 <tcp_input+0x690>
          if (pcb->refused_data != NULL) {
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d009      	beq.n	8010f2e <tcp_input+0x64a>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f1e:	7b5a      	ldrb	r2, [r3, #13]
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f24:	f042 0220 	orr.w	r2, r2, #32
 8010f28:	b2d2      	uxtb	r2, r2
 8010f2a:	735a      	strb	r2, [r3, #13]
 8010f2c:	e022      	b.n	8010f74 <tcp_input+0x690>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010f2e:	69bb      	ldr	r3, [r7, #24]
 8010f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010f36:	d005      	beq.n	8010f44 <tcp_input+0x660>
              pcb->rcv_wnd++;
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	b29a      	uxth	r2, r3
 8010f40:	69bb      	ldr	r3, [r7, #24]
 8010f42:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010f44:	69bb      	ldr	r3, [r7, #24]
 8010f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d00b      	beq.n	8010f66 <tcp_input+0x682>
 8010f4e:	69bb      	ldr	r3, [r7, #24]
 8010f50:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	6918      	ldr	r0, [r3, #16]
 8010f58:	2300      	movs	r3, #0
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	69b9      	ldr	r1, [r7, #24]
 8010f5e:	47a0      	blx	r4
 8010f60:	4603      	mov	r3, r0
 8010f62:	74fb      	strb	r3, [r7, #19]
 8010f64:	e001      	b.n	8010f6a <tcp_input+0x686>
 8010f66:	2300      	movs	r3, #0
 8010f68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010f6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f6e:	f113 0f0d 	cmn.w	r3, #13
 8010f72:	d014      	beq.n	8010f9e <tcp_input+0x6ba>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010f74:	4b1d      	ldr	r3, [pc, #116]	; (8010fec <tcp_input+0x708>)
 8010f76:	2200      	movs	r2, #0
 8010f78:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010f7a:	69b8      	ldr	r0, [r7, #24]
 8010f7c:	f000 f892 	bl	80110a4 <tcp_input_delayed_close>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d10d      	bne.n	8010fa2 <tcp_input+0x6be>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010f86:	69b8      	ldr	r0, [r7, #24]
 8010f88:	f002 fc18 	bl	80137bc <tcp_output>
 8010f8c:	e00a      	b.n	8010fa4 <tcp_input+0x6c0>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010f8e:	bf00      	nop
 8010f90:	e008      	b.n	8010fa4 <tcp_input+0x6c0>
              goto aborted;
 8010f92:	bf00      	nop
 8010f94:	e006      	b.n	8010fa4 <tcp_input+0x6c0>
          goto aborted;
 8010f96:	bf00      	nop
 8010f98:	e004      	b.n	8010fa4 <tcp_input+0x6c0>
            goto aborted;
 8010f9a:	bf00      	nop
 8010f9c:	e002      	b.n	8010fa4 <tcp_input+0x6c0>
              goto aborted;
 8010f9e:	bf00      	nop
 8010fa0:	e000      	b.n	8010fa4 <tcp_input+0x6c0>
          goto aborted;
 8010fa2:	bf00      	nop
    tcp_input_pcb = NULL;
 8010fa4:	4b11      	ldr	r3, [pc, #68]	; (8010fec <tcp_input+0x708>)
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010faa:	4b0a      	ldr	r3, [pc, #40]	; (8010fd4 <tcp_input+0x6f0>)
 8010fac:	2200      	movs	r2, #0
 8010fae:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010fb0:	4b06      	ldr	r3, [pc, #24]	; (8010fcc <tcp_input+0x6e8>)
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d063      	beq.n	8011080 <tcp_input+0x79c>
      pbuf_free(inseg.p);
 8010fb8:	4b04      	ldr	r3, [pc, #16]	; (8010fcc <tcp_input+0x6e8>)
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7fd ff3d 	bl	800ee3c <pbuf_free>
      inseg.p = NULL;
 8010fc2:	4b02      	ldr	r3, [pc, #8]	; (8010fcc <tcp_input+0x6e8>)
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010fc8:	e05a      	b.n	8011080 <tcp_input+0x79c>
 8010fca:	bf00      	nop
 8010fcc:	200077cc 	.word	0x200077cc
 8010fd0:	200077e0 	.word	0x200077e0
 8010fd4:	20007800 	.word	0x20007800
 8010fd8:	200077fd 	.word	0x200077fd
 8010fdc:	200077f8 	.word	0x200077f8
 8010fe0:	200077fc 	.word	0x200077fc
 8010fe4:	200077fa 	.word	0x200077fa
 8010fe8:	2000770c 	.word	0x2000770c
 8010fec:	20007804 	.word	0x20007804
 8010ff0:	200077c0 	.word	0x200077c0
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010ff4:	4b24      	ldr	r3, [pc, #144]	; (8011088 <tcp_input+0x7a4>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	899b      	ldrh	r3, [r3, #12]
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fc ff25 	bl	800de4c <lwip_htons>
 8011002:	4603      	mov	r3, r0
 8011004:	b2db      	uxtb	r3, r3
 8011006:	f003 0304 	and.w	r3, r3, #4
 801100a:	2b00      	cmp	r3, #0
 801100c:	d128      	bne.n	8011060 <tcp_input+0x77c>
      TCP_STATS_INC(tcp.proterr);
 801100e:	4b1f      	ldr	r3, [pc, #124]	; (801108c <tcp_input+0x7a8>)
 8011010:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8011014:	3301      	adds	r3, #1
 8011016:	b29a      	uxth	r2, r3
 8011018:	4b1c      	ldr	r3, [pc, #112]	; (801108c <tcp_input+0x7a8>)
 801101a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 801101e:	4b1b      	ldr	r3, [pc, #108]	; (801108c <tcp_input+0x7a8>)
 8011020:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8011024:	3301      	adds	r3, #1
 8011026:	b29a      	uxth	r2, r3
 8011028:	4b18      	ldr	r3, [pc, #96]	; (801108c <tcp_input+0x7a8>)
 801102a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801102e:	4b18      	ldr	r3, [pc, #96]	; (8011090 <tcp_input+0x7ac>)
 8011030:	6819      	ldr	r1, [r3, #0]
 8011032:	4b18      	ldr	r3, [pc, #96]	; (8011094 <tcp_input+0x7b0>)
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	461a      	mov	r2, r3
 8011038:	4b17      	ldr	r3, [pc, #92]	; (8011098 <tcp_input+0x7b4>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801103e:	4b12      	ldr	r3, [pc, #72]	; (8011088 <tcp_input+0x7a4>)
 8011040:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011042:	885b      	ldrh	r3, [r3, #2]
 8011044:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011046:	4a10      	ldr	r2, [pc, #64]	; (8011088 <tcp_input+0x7a4>)
 8011048:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801104a:	8812      	ldrh	r2, [r2, #0]
 801104c:	b292      	uxth	r2, r2
 801104e:	9202      	str	r2, [sp, #8]
 8011050:	9301      	str	r3, [sp, #4]
 8011052:	4b12      	ldr	r3, [pc, #72]	; (801109c <tcp_input+0x7b8>)
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	4b12      	ldr	r3, [pc, #72]	; (80110a0 <tcp_input+0x7bc>)
 8011058:	4602      	mov	r2, r0
 801105a:	2000      	movs	r0, #0
 801105c:	f003 f87e 	bl	801415c <tcp_rst>
    pbuf_free(p);
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f7fd feeb 	bl	800ee3c <pbuf_free>
  return;
 8011066:	e00b      	b.n	8011080 <tcp_input+0x79c>
dropped:
  TCP_STATS_INC(tcp.drop);
 8011068:	4b08      	ldr	r3, [pc, #32]	; (801108c <tcp_input+0x7a8>)
 801106a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 801106e:	3301      	adds	r3, #1
 8011070:	b29a      	uxth	r2, r3
 8011072:	4b06      	ldr	r3, [pc, #24]	; (801108c <tcp_input+0x7a8>)
 8011074:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f7fd fedf 	bl	800ee3c <pbuf_free>
 801107e:	e000      	b.n	8011082 <tcp_input+0x79e>
  return;
 8011080:	bf00      	nop
}
 8011082:	3724      	adds	r7, #36	; 0x24
 8011084:	46bd      	mov	sp, r7
 8011086:	bd90      	pop	{r4, r7, pc}
 8011088:	200077e0 	.word	0x200077e0
 801108c:	2000770c 	.word	0x2000770c
 8011090:	200077f4 	.word	0x200077f4
 8011094:	200077fa 	.word	0x200077fa
 8011098:	200077f0 	.word	0x200077f0
 801109c:	200076f8 	.word	0x200076f8
 80110a0:	200076fc 	.word	0x200076fc

080110a4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);

  if (recv_flags & TF_CLOSED) {
 80110ac:	4b13      	ldr	r3, [pc, #76]	; (80110fc <tcp_input_delayed_close+0x58>)
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	f003 0310 	and.w	r3, r3, #16
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d01c      	beq.n	80110f2 <tcp_input_delayed_close+0x4e>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	8b5b      	ldrh	r3, [r3, #26]
 80110bc:	f003 0310 	and.w	r3, r3, #16
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d10d      	bne.n	80110e0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d008      	beq.n	80110e0 <tcp_input_delayed_close+0x3c>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110d4:	687a      	ldr	r2, [r7, #4]
 80110d6:	6912      	ldr	r2, [r2, #16]
 80110d8:	f06f 010e 	mvn.w	r1, #14
 80110dc:	4610      	mov	r0, r2
 80110de:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80110e0:	6879      	ldr	r1, [r7, #4]
 80110e2:	4807      	ldr	r0, [pc, #28]	; (8011100 <tcp_input_delayed_close+0x5c>)
 80110e4:	f7ff fafa 	bl	80106dc <tcp_pcb_remove>
    tcp_free(pcb);
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7fe f883 	bl	800f1f4 <tcp_free>
    return 1;
 80110ee:	2301      	movs	r3, #1
 80110f0:	e000      	b.n	80110f4 <tcp_input_delayed_close+0x50>
  }
  return 0;
 80110f2:	2300      	movs	r3, #0
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	200077fd 	.word	0x200077fd
 8011100:	200077c0 	.word	0x200077c0

08011104 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011104:	b590      	push	{r4, r7, lr}
 8011106:	b08b      	sub	sp, #44	; 0x2c
 8011108:	af04      	add	r7, sp, #16
 801110a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801110c:	4b6e      	ldr	r3, [pc, #440]	; (80112c8 <tcp_listen_input+0x1c4>)
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	f003 0304 	and.w	r3, r3, #4
 8011114:	2b00      	cmp	r3, #0
 8011116:	f040 80d0 	bne.w	80112ba <tcp_listen_input+0x1b6>

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801111a:	4b6b      	ldr	r3, [pc, #428]	; (80112c8 <tcp_listen_input+0x1c4>)
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	f003 0310 	and.w	r3, r3, #16
 8011122:	2b00      	cmp	r3, #0
 8011124:	d019      	beq.n	801115a <tcp_listen_input+0x56>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011126:	4b69      	ldr	r3, [pc, #420]	; (80112cc <tcp_listen_input+0x1c8>)
 8011128:	6819      	ldr	r1, [r3, #0]
 801112a:	4b69      	ldr	r3, [pc, #420]	; (80112d0 <tcp_listen_input+0x1cc>)
 801112c:	881b      	ldrh	r3, [r3, #0]
 801112e:	461a      	mov	r2, r3
 8011130:	4b68      	ldr	r3, [pc, #416]	; (80112d4 <tcp_listen_input+0x1d0>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011136:	4b68      	ldr	r3, [pc, #416]	; (80112d8 <tcp_listen_input+0x1d4>)
 8011138:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801113a:	885b      	ldrh	r3, [r3, #2]
 801113c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801113e:	4a66      	ldr	r2, [pc, #408]	; (80112d8 <tcp_listen_input+0x1d4>)
 8011140:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011142:	8812      	ldrh	r2, [r2, #0]
 8011144:	b292      	uxth	r2, r2
 8011146:	9202      	str	r2, [sp, #8]
 8011148:	9301      	str	r3, [sp, #4]
 801114a:	4b64      	ldr	r3, [pc, #400]	; (80112dc <tcp_listen_input+0x1d8>)
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	4b64      	ldr	r3, [pc, #400]	; (80112e0 <tcp_listen_input+0x1dc>)
 8011150:	4602      	mov	r2, r0
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f003 f802 	bl	801415c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011158:	e0b1      	b.n	80112be <tcp_listen_input+0x1ba>
  } else if (flags & TCP_SYN) {
 801115a:	4b5b      	ldr	r3, [pc, #364]	; (80112c8 <tcp_listen_input+0x1c4>)
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	f003 0302 	and.w	r3, r3, #2
 8011162:	2b00      	cmp	r3, #0
 8011164:	f000 80ab 	beq.w	80112be <tcp_listen_input+0x1ba>
    npcb = tcp_alloc(pcb->prio);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	7d5b      	ldrb	r3, [r3, #21]
 801116c:	4618      	mov	r0, r3
 801116e:	f7ff f965 	bl	801043c <tcp_alloc>
 8011172:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d119      	bne.n	80111ae <tcp_listen_input+0xaa>
      TCP_STATS_INC(tcp.memerr);
 801117a:	4b5a      	ldr	r3, [pc, #360]	; (80112e4 <tcp_listen_input+0x1e0>)
 801117c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8011180:	3301      	adds	r3, #1
 8011182:	b29a      	uxth	r2, r3
 8011184:	4b57      	ldr	r3, [pc, #348]	; (80112e4 <tcp_listen_input+0x1e0>)
 8011186:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	699b      	ldr	r3, [r3, #24]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d00a      	beq.n	80111a8 <tcp_listen_input+0xa4>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	699b      	ldr	r3, [r3, #24]
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	6910      	ldr	r0, [r2, #16]
 801119a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801119e:	2100      	movs	r1, #0
 80111a0:	4798      	blx	r3
 80111a2:	4603      	mov	r3, r0
 80111a4:	73bb      	strb	r3, [r7, #14]
      return;
 80111a6:	e08b      	b.n	80112c0 <tcp_listen_input+0x1bc>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80111a8:	23f0      	movs	r3, #240	; 0xf0
 80111aa:	73bb      	strb	r3, [r7, #14]
      return;
 80111ac:	e088      	b.n	80112c0 <tcp_listen_input+0x1bc>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80111ae:	4b4e      	ldr	r3, [pc, #312]	; (80112e8 <tcp_listen_input+0x1e4>)
 80111b0:	695a      	ldr	r2, [r3, #20]
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80111b6:	4b4c      	ldr	r3, [pc, #304]	; (80112e8 <tcp_listen_input+0x1e4>)
 80111b8:	691a      	ldr	r2, [r3, #16]
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	8ada      	ldrh	r2, [r3, #22]
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80111c6:	4b44      	ldr	r3, [pc, #272]	; (80112d8 <tcp_listen_input+0x1d4>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	881b      	ldrh	r3, [r3, #0]
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	2203      	movs	r2, #3
 80111d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80111d8:	4b3e      	ldr	r3, [pc, #248]	; (80112d4 <tcp_listen_input+0x1d0>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	1c5a      	adds	r2, r3, #1
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80111ea:	6978      	ldr	r0, [r7, #20]
 80111ec:	f7ff fac2 	bl	8010774 <tcp_next_iss>
 80111f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	693a      	ldr	r2, [r7, #16]
 80111f6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	693a      	ldr	r2, [r7, #16]
 80111fc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	693a      	ldr	r2, [r7, #16]
 8011202:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	693a      	ldr	r2, [r7, #16]
 8011208:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801120a:	4b32      	ldr	r3, [pc, #200]	; (80112d4 <tcp_listen_input+0x1d0>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	1e5a      	subs	r2, r3, #1
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	691a      	ldr	r2, [r3, #16]
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	7a5b      	ldrb	r3, [r3, #9]
 8011226:	f003 030c 	and.w	r3, r3, #12
 801122a:	b2da      	uxtb	r2, r3
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	7a1a      	ldrb	r2, [r3, #8]
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011238:	4b2c      	ldr	r3, [pc, #176]	; (80112ec <tcp_listen_input+0x1e8>)
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	60da      	str	r2, [r3, #12]
 8011240:	4a2a      	ldr	r2, [pc, #168]	; (80112ec <tcp_listen_input+0x1e8>)
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	6013      	str	r3, [r2, #0]
 8011246:	f003 f8fd 	bl	8014444 <tcp_timer_needed>
 801124a:	4b29      	ldr	r3, [pc, #164]	; (80112f0 <tcp_listen_input+0x1ec>)
 801124c:	2201      	movs	r2, #1
 801124e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011250:	6978      	ldr	r0, [r7, #20]
 8011252:	f001 fc39 	bl	8012ac8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011256:	4b20      	ldr	r3, [pc, #128]	; (80112d8 <tcp_listen_input+0x1d4>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	89db      	ldrh	r3, [r3, #14]
 801125c:	b29a      	uxth	r2, r3
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	3304      	adds	r3, #4
 8011278:	4618      	mov	r0, r3
 801127a:	f006 fccd 	bl	8017c18 <ip4_route>
 801127e:	4601      	mov	r1, r0
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	3304      	adds	r3, #4
 8011284:	461a      	mov	r2, r3
 8011286:	4620      	mov	r0, r4
 8011288:	f7ff fa8c 	bl	80107a4 <tcp_eff_send_mss_netif>
 801128c:	4603      	mov	r3, r0
 801128e:	461a      	mov	r2, r3
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011294:	2112      	movs	r1, #18
 8011296:	6978      	ldr	r0, [r7, #20]
 8011298:	f002 f9f0 	bl	801367c <tcp_enqueue_flags>
 801129c:	4603      	mov	r3, r0
 801129e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80112a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d004      	beq.n	80112b2 <tcp_listen_input+0x1ae>
      tcp_abandon(npcb, 0);
 80112a8:	2100      	movs	r1, #0
 80112aa:	6978      	ldr	r0, [r7, #20]
 80112ac:	f7fe f946 	bl	800f53c <tcp_abandon>
      return;
 80112b0:	e006      	b.n	80112c0 <tcp_listen_input+0x1bc>
    tcp_output(npcb);
 80112b2:	6978      	ldr	r0, [r7, #20]
 80112b4:	f002 fa82 	bl	80137bc <tcp_output>
  return;
 80112b8:	e001      	b.n	80112be <tcp_listen_input+0x1ba>
    return;
 80112ba:	bf00      	nop
 80112bc:	e000      	b.n	80112c0 <tcp_listen_input+0x1bc>
  return;
 80112be:	bf00      	nop
}
 80112c0:	371c      	adds	r7, #28
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd90      	pop	{r4, r7, pc}
 80112c6:	bf00      	nop
 80112c8:	200077fc 	.word	0x200077fc
 80112cc:	200077f4 	.word	0x200077f4
 80112d0:	200077fa 	.word	0x200077fa
 80112d4:	200077f0 	.word	0x200077f0
 80112d8:	200077e0 	.word	0x200077e0
 80112dc:	200076f8 	.word	0x200076f8
 80112e0:	200076fc 	.word	0x200076fc
 80112e4:	2000770c 	.word	0x2000770c
 80112e8:	200076e8 	.word	0x200076e8
 80112ec:	200077c0 	.word	0x200077c0
 80112f0:	200077c8 	.word	0x200077c8

080112f4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b086      	sub	sp, #24
 80112f8:	af04      	add	r7, sp, #16
 80112fa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80112fc:	4b2a      	ldr	r3, [pc, #168]	; (80113a8 <tcp_timewait_input+0xb4>)
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	f003 0304 	and.w	r3, r3, #4
 8011304:	2b00      	cmp	r3, #0
 8011306:	d149      	bne.n	801139c <tcp_timewait_input+0xa8>
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011308:	4b27      	ldr	r3, [pc, #156]	; (80113a8 <tcp_timewait_input+0xb4>)
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	f003 0302 	and.w	r3, r3, #2
 8011310:	2b00      	cmp	r3, #0
 8011312:	d02a      	beq.n	801136a <tcp_timewait_input+0x76>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011314:	4b25      	ldr	r3, [pc, #148]	; (80113ac <tcp_timewait_input+0xb8>)
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	2b00      	cmp	r3, #0
 8011320:	db2d      	blt.n	801137e <tcp_timewait_input+0x8a>
 8011322:	4b22      	ldr	r3, [pc, #136]	; (80113ac <tcp_timewait_input+0xb8>)
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801132a:	6879      	ldr	r1, [r7, #4]
 801132c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801132e:	440b      	add	r3, r1
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	2b00      	cmp	r3, #0
 8011334:	dc23      	bgt.n	801137e <tcp_timewait_input+0x8a>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011336:	4b1e      	ldr	r3, [pc, #120]	; (80113b0 <tcp_timewait_input+0xbc>)
 8011338:	6819      	ldr	r1, [r3, #0]
 801133a:	4b1e      	ldr	r3, [pc, #120]	; (80113b4 <tcp_timewait_input+0xc0>)
 801133c:	881b      	ldrh	r3, [r3, #0]
 801133e:	461a      	mov	r2, r3
 8011340:	4b1a      	ldr	r3, [pc, #104]	; (80113ac <tcp_timewait_input+0xb8>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011346:	4b1c      	ldr	r3, [pc, #112]	; (80113b8 <tcp_timewait_input+0xc4>)
 8011348:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801134a:	885b      	ldrh	r3, [r3, #2]
 801134c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801134e:	4a1a      	ldr	r2, [pc, #104]	; (80113b8 <tcp_timewait_input+0xc4>)
 8011350:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011352:	8812      	ldrh	r2, [r2, #0]
 8011354:	b292      	uxth	r2, r2
 8011356:	9202      	str	r2, [sp, #8]
 8011358:	9301      	str	r3, [sp, #4]
 801135a:	4b18      	ldr	r3, [pc, #96]	; (80113bc <tcp_timewait_input+0xc8>)
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	4b18      	ldr	r3, [pc, #96]	; (80113c0 <tcp_timewait_input+0xcc>)
 8011360:	4602      	mov	r2, r0
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f002 fefa 	bl	801415c <tcp_rst>
      return;
 8011368:	e01b      	b.n	80113a2 <tcp_timewait_input+0xae>
    }
  } else if (flags & TCP_FIN) {
 801136a:	4b0f      	ldr	r3, [pc, #60]	; (80113a8 <tcp_timewait_input+0xb4>)
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	f003 0301 	and.w	r3, r3, #1
 8011372:	2b00      	cmp	r3, #0
 8011374:	d003      	beq.n	801137e <tcp_timewait_input+0x8a>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011376:	4b13      	ldr	r3, [pc, #76]	; (80113c4 <tcp_timewait_input+0xd0>)
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801137e:	4b0d      	ldr	r3, [pc, #52]	; (80113b4 <tcp_timewait_input+0xc0>)
 8011380:	881b      	ldrh	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00c      	beq.n	80113a0 <tcp_timewait_input+0xac>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	8b5b      	ldrh	r3, [r3, #26]
 801138a:	f043 0302 	orr.w	r3, r3, #2
 801138e:	b29a      	uxth	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f002 fa11 	bl	80137bc <tcp_output>
  }
  return;
 801139a:	e001      	b.n	80113a0 <tcp_timewait_input+0xac>
    return;
 801139c:	bf00      	nop
 801139e:	e000      	b.n	80113a2 <tcp_timewait_input+0xae>
  return;
 80113a0:	bf00      	nop
}
 80113a2:	3708      	adds	r7, #8
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	200077fc 	.word	0x200077fc
 80113ac:	200077f0 	.word	0x200077f0
 80113b0:	200077f4 	.word	0x200077f4
 80113b4:	200077fa 	.word	0x200077fa
 80113b8:	200077e0 	.word	0x200077e0
 80113bc:	200076f8 	.word	0x200076f8
 80113c0:	200076fc 	.word	0x200076fc
 80113c4:	200077b4 	.word	0x200077b4

080113c8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80113c8:	b590      	push	{r4, r7, lr}
 80113ca:	b08d      	sub	sp, #52	; 0x34
 80113cc:	af04      	add	r7, sp, #16
 80113ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80113d0:	2300      	movs	r3, #0
 80113d2:	76bb      	strb	r3, [r7, #26]
  err_t err;

  err = ERR_OK;
 80113d4:	2300      	movs	r3, #0
 80113d6:	76fb      	strb	r3, [r7, #27]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80113d8:	4b9c      	ldr	r3, [pc, #624]	; (801164c <tcp_process+0x284>)
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	f003 0304 	and.w	r3, r3, #4
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d043      	beq.n	801146c <tcp_process+0xa4>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	7d1b      	ldrb	r3, [r3, #20]
 80113e8:	2b02      	cmp	r3, #2
 80113ea:	d108      	bne.n	80113fe <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80113f0:	4b97      	ldr	r3, [pc, #604]	; (8011650 <tcp_process+0x288>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d123      	bne.n	8011440 <tcp_process+0x78>
        acceptable = 1;
 80113f8:	2301      	movs	r3, #1
 80113fa:	76bb      	strb	r3, [r7, #26]
 80113fc:	e020      	b.n	8011440 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011402:	4b94      	ldr	r3, [pc, #592]	; (8011654 <tcp_process+0x28c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	429a      	cmp	r2, r3
 8011408:	d102      	bne.n	8011410 <tcp_process+0x48>
        acceptable = 1;
 801140a:	2301      	movs	r3, #1
 801140c:	76bb      	strb	r3, [r7, #26]
 801140e:	e017      	b.n	8011440 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011410:	4b90      	ldr	r3, [pc, #576]	; (8011654 <tcp_process+0x28c>)
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	2b00      	cmp	r3, #0
 801141c:	db10      	blt.n	8011440 <tcp_process+0x78>
 801141e:	4b8d      	ldr	r3, [pc, #564]	; (8011654 <tcp_process+0x28c>)
 8011420:	681a      	ldr	r2, [r3, #0]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011426:	6879      	ldr	r1, [r7, #4]
 8011428:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801142a:	440b      	add	r3, r1
 801142c:	1ad3      	subs	r3, r2, r3
 801142e:	2b00      	cmp	r3, #0
 8011430:	dc06      	bgt.n	8011440 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	8b5b      	ldrh	r3, [r3, #26]
 8011436:	f043 0302 	orr.w	r3, r3, #2
 801143a:	b29a      	uxth	r2, r3
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011440:	7ebb      	ldrb	r3, [r7, #26]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d010      	beq.n	8011468 <tcp_process+0xa0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 8011446:	4b84      	ldr	r3, [pc, #528]	; (8011658 <tcp_process+0x290>)
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	f043 0308 	orr.w	r3, r3, #8
 801144e:	b2da      	uxtb	r2, r3
 8011450:	4b81      	ldr	r3, [pc, #516]	; (8011658 <tcp_process+0x290>)
 8011452:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	8b5b      	ldrh	r3, [r3, #26]
 8011458:	f023 0301 	bic.w	r3, r3, #1
 801145c:	b29a      	uxth	r2, r3
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011462:	f06f 030d 	mvn.w	r3, #13
 8011466:	e345      	b.n	8011af4 <tcp_process+0x72c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011468:	2300      	movs	r3, #0
 801146a:	e343      	b.n	8011af4 <tcp_process+0x72c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801146c:	4b77      	ldr	r3, [pc, #476]	; (801164c <tcp_process+0x284>)
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	f003 0302 	and.w	r3, r3, #2
 8011474:	2b00      	cmp	r3, #0
 8011476:	d010      	beq.n	801149a <tcp_process+0xd2>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	7d1b      	ldrb	r3, [r3, #20]
 801147c:	2b02      	cmp	r3, #2
 801147e:	d00c      	beq.n	801149a <tcp_process+0xd2>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	7d1b      	ldrb	r3, [r3, #20]
 8011484:	2b03      	cmp	r3, #3
 8011486:	d008      	beq.n	801149a <tcp_process+0xd2>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	8b5b      	ldrh	r3, [r3, #26]
 801148c:	f043 0302 	orr.w	r3, r3, #2
 8011490:	b29a      	uxth	r2, r3
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011496:	2300      	movs	r3, #0
 8011498:	e32c      	b.n	8011af4 <tcp_process+0x72c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	8b5b      	ldrh	r3, [r3, #26]
 801149e:	f003 0310 	and.w	r3, r3, #16
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d103      	bne.n	80114ae <tcp_process+0xe6>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80114a6:	4b6d      	ldr	r3, [pc, #436]	; (801165c <tcp_process+0x294>)
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2200      	movs	r2, #0
 80114b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2200      	movs	r2, #0
 80114ba:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f001 fb02 	bl	8012ac8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	7d1b      	ldrb	r3, [r3, #20]
 80114c8:	3b02      	subs	r3, #2
 80114ca:	2b07      	cmp	r3, #7
 80114cc:	f200 8302 	bhi.w	8011ad4 <tcp_process+0x70c>
 80114d0:	a201      	add	r2, pc, #4	; (adr r2, 80114d8 <tcp_process+0x110>)
 80114d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d6:	bf00      	nop
 80114d8:	080114f9 	.word	0x080114f9
 80114dc:	080116e3 	.word	0x080116e3
 80114e0:	08011843 	.word	0x08011843
 80114e4:	0801186d 	.word	0x0801186d
 80114e8:	08011983 	.word	0x08011983
 80114ec:	08011843 	.word	0x08011843
 80114f0:	08011a0f 	.word	0x08011a0f
 80114f4:	08011a9f 	.word	0x08011a9f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80114f8:	4b54      	ldr	r3, [pc, #336]	; (801164c <tcp_process+0x284>)
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	f003 0310 	and.w	r3, r3, #16
 8011500:	2b00      	cmp	r3, #0
 8011502:	f000 80c1 	beq.w	8011688 <tcp_process+0x2c0>
 8011506:	4b51      	ldr	r3, [pc, #324]	; (801164c <tcp_process+0x284>)
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	f003 0302 	and.w	r3, r3, #2
 801150e:	2b00      	cmp	r3, #0
 8011510:	f000 80ba 	beq.w	8011688 <tcp_process+0x2c0>
          && (ackno == pcb->lastack + 1)) {
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011518:	1c5a      	adds	r2, r3, #1
 801151a:	4b4d      	ldr	r3, [pc, #308]	; (8011650 <tcp_process+0x288>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	429a      	cmp	r2, r3
 8011520:	f040 80b2 	bne.w	8011688 <tcp_process+0x2c0>
        pcb->rcv_nxt = seqno + 1;
 8011524:	4b4b      	ldr	r3, [pc, #300]	; (8011654 <tcp_process+0x28c>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	1c5a      	adds	r2, r3, #1
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011536:	4b46      	ldr	r3, [pc, #280]	; (8011650 <tcp_process+0x288>)
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801153e:	4b48      	ldr	r3, [pc, #288]	; (8011660 <tcp_process+0x298>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	89db      	ldrh	r3, [r3, #14]
 8011544:	b29a      	uxth	r2, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011558:	4b3e      	ldr	r3, [pc, #248]	; (8011654 <tcp_process+0x28c>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	1e5a      	subs	r2, r3, #1
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	2204      	movs	r2, #4
 8011566:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	3304      	adds	r3, #4
 8011570:	4618      	mov	r0, r3
 8011572:	f006 fb51 	bl	8017c18 <ip4_route>
 8011576:	4601      	mov	r1, r0
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	3304      	adds	r3, #4
 801157c:	461a      	mov	r2, r3
 801157e:	4620      	mov	r0, r4
 8011580:	f7ff f910 	bl	80107a4 <tcp_eff_send_mss_netif>
 8011584:	4603      	mov	r3, r0
 8011586:	461a      	mov	r2, r3
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011590:	009a      	lsls	r2, r3, #2
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011596:	005b      	lsls	r3, r3, #1
 8011598:	f241 111c 	movw	r1, #4380	; 0x111c
 801159c:	428b      	cmp	r3, r1
 801159e:	bf38      	it	cc
 80115a0:	460b      	movcc	r3, r1
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d204      	bcs.n	80115b0 <tcp_process+0x1e8>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	e00d      	b.n	80115cc <tcp_process+0x204>
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115b4:	005b      	lsls	r3, r3, #1
 80115b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d904      	bls.n	80115c8 <tcp_process+0x200>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115c2:	005b      	lsls	r3, r3, #1
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	e001      	b.n	80115cc <tcp_process+0x204>
 80115c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
        --pcb->snd_queuelen;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115d8:	3b01      	subs	r3, #1
 80115da:	b29a      	uxth	r2, r3
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115e6:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d107      	bne.n	80115fe <tcp_process+0x236>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115f2:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
          pcb->unsent = rseg->next;
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80115fc:	e003      	b.n	8011606 <tcp_process+0x23e>
        } else {
          pcb->unacked = rseg->next;
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	681a      	ldr	r2, [r3, #0]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011606:	6978      	ldr	r0, [r7, #20]
 8011608:	f7fe fdce 	bl	80101a8 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011610:	2b00      	cmp	r3, #0
 8011612:	d104      	bne.n	801161e <tcp_process+0x256>
          pcb->rtime = -1;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801161a:	861a      	strh	r2, [r3, #48]	; 0x30
 801161c:	e006      	b.n	801162c <tcp_process+0x264>
        } else {
          pcb->rtime = 0;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2200      	movs	r2, #0
 8011622:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2200      	movs	r2, #0
 8011628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011632:	2b00      	cmp	r3, #0
 8011634:	d016      	beq.n	8011664 <tcp_process+0x29c>
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	6910      	ldr	r0, [r2, #16]
 8011640:	2200      	movs	r2, #0
 8011642:	6879      	ldr	r1, [r7, #4]
 8011644:	4798      	blx	r3
 8011646:	4603      	mov	r3, r0
 8011648:	76fb      	strb	r3, [r7, #27]
 801164a:	e00d      	b.n	8011668 <tcp_process+0x2a0>
 801164c:	200077fc 	.word	0x200077fc
 8011650:	200077f4 	.word	0x200077f4
 8011654:	200077f0 	.word	0x200077f0
 8011658:	200077fd 	.word	0x200077fd
 801165c:	200077b4 	.word	0x200077b4
 8011660:	200077e0 	.word	0x200077e0
 8011664:	2300      	movs	r3, #0
 8011666:	76fb      	strb	r3, [r7, #27]
        if (err == ERR_ABRT) {
 8011668:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801166c:	f113 0f0d 	cmn.w	r3, #13
 8011670:	d102      	bne.n	8011678 <tcp_process+0x2b0>
          return ERR_ABRT;
 8011672:	f06f 030c 	mvn.w	r3, #12
 8011676:	e23d      	b.n	8011af4 <tcp_process+0x72c>
        }
        tcp_ack_now(pcb);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	8b5b      	ldrh	r3, [r3, #26]
 801167c:	f043 0302 	orr.w	r3, r3, #2
 8011680:	b29a      	uxth	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011686:	e227      	b.n	8011ad8 <tcp_process+0x710>
      else if (flags & TCP_ACK) {
 8011688:	4b96      	ldr	r3, [pc, #600]	; (80118e4 <tcp_process+0x51c>)
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	f003 0310 	and.w	r3, r3, #16
 8011690:	2b00      	cmp	r3, #0
 8011692:	f000 8221 	beq.w	8011ad8 <tcp_process+0x710>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011696:	4b94      	ldr	r3, [pc, #592]	; (80118e8 <tcp_process+0x520>)
 8011698:	6819      	ldr	r1, [r3, #0]
 801169a:	4b94      	ldr	r3, [pc, #592]	; (80118ec <tcp_process+0x524>)
 801169c:	881b      	ldrh	r3, [r3, #0]
 801169e:	461a      	mov	r2, r3
 80116a0:	4b93      	ldr	r3, [pc, #588]	; (80118f0 <tcp_process+0x528>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116a6:	4b93      	ldr	r3, [pc, #588]	; (80118f4 <tcp_process+0x52c>)
 80116a8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116aa:	885b      	ldrh	r3, [r3, #2]
 80116ac:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116ae:	4a91      	ldr	r2, [pc, #580]	; (80118f4 <tcp_process+0x52c>)
 80116b0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116b2:	8812      	ldrh	r2, [r2, #0]
 80116b4:	b292      	uxth	r2, r2
 80116b6:	9202      	str	r2, [sp, #8]
 80116b8:	9301      	str	r3, [sp, #4]
 80116ba:	4b8f      	ldr	r3, [pc, #572]	; (80118f8 <tcp_process+0x530>)
 80116bc:	9300      	str	r3, [sp, #0]
 80116be:	4b8f      	ldr	r3, [pc, #572]	; (80118fc <tcp_process+0x534>)
 80116c0:	4602      	mov	r2, r0
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f002 fd4a 	bl	801415c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116ce:	2b05      	cmp	r3, #5
 80116d0:	f200 8202 	bhi.w	8011ad8 <tcp_process+0x710>
          pcb->rtime = 0;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2200      	movs	r2, #0
 80116d8:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f002 fb87 	bl	8013dee <tcp_rexmit_rto>
      break;
 80116e0:	e1fa      	b.n	8011ad8 <tcp_process+0x710>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80116e2:	4b80      	ldr	r3, [pc, #512]	; (80118e4 <tcp_process+0x51c>)
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	f003 0310 	and.w	r3, r3, #16
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f000 8095 	beq.w	801181a <tcp_process+0x452>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116f0:	4b7d      	ldr	r3, [pc, #500]	; (80118e8 <tcp_process+0x520>)
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116f8:	1ad3      	subs	r3, r2, r3
 80116fa:	3b01      	subs	r3, #1
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	db72      	blt.n	80117e6 <tcp_process+0x41e>
 8011700:	4b79      	ldr	r3, [pc, #484]	; (80118e8 <tcp_process+0x520>)
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011708:	1ad3      	subs	r3, r2, r3
 801170a:	2b00      	cmp	r3, #0
 801170c:	dc6b      	bgt.n	80117e6 <tcp_process+0x41e>
          pcb->state = ESTABLISHED;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	2204      	movs	r2, #4
 8011712:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011718:	2b00      	cmp	r3, #0
 801171a:	d102      	bne.n	8011722 <tcp_process+0x35a>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801171c:	23fa      	movs	r3, #250	; 0xfa
 801171e:	76fb      	strb	r3, [r7, #27]
 8011720:	e011      	b.n	8011746 <tcp_process+0x37e>
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011726:	699b      	ldr	r3, [r3, #24]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d00a      	beq.n	8011742 <tcp_process+0x37a>
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011730:	699b      	ldr	r3, [r3, #24]
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	6910      	ldr	r0, [r2, #16]
 8011736:	2200      	movs	r2, #0
 8011738:	6879      	ldr	r1, [r7, #4]
 801173a:	4798      	blx	r3
 801173c:	4603      	mov	r3, r0
 801173e:	76fb      	strb	r3, [r7, #27]
 8011740:	e001      	b.n	8011746 <tcp_process+0x37e>
 8011742:	23f0      	movs	r3, #240	; 0xf0
 8011744:	76fb      	strb	r3, [r7, #27]
          }
          if (err != ERR_OK) {
 8011746:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d00a      	beq.n	8011764 <tcp_process+0x39c>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801174e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011752:	f113 0f0d 	cmn.w	r3, #13
 8011756:	d002      	beq.n	801175e <tcp_process+0x396>
              tcp_abort(pcb);
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f7fd ff93 	bl	800f684 <tcp_abort>
            }
            return ERR_ABRT;
 801175e:	f06f 030c 	mvn.w	r3, #12
 8011762:	e1c7      	b.n	8011af4 <tcp_process+0x72c>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f000 faa3 	bl	8011cb0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801176a:	4b65      	ldr	r3, [pc, #404]	; (8011900 <tcp_process+0x538>)
 801176c:	881b      	ldrh	r3, [r3, #0]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d005      	beq.n	801177e <tcp_process+0x3b6>
            recv_acked--;
 8011772:	4b63      	ldr	r3, [pc, #396]	; (8011900 <tcp_process+0x538>)
 8011774:	881b      	ldrh	r3, [r3, #0]
 8011776:	3b01      	subs	r3, #1
 8011778:	b29a      	uxth	r2, r3
 801177a:	4b61      	ldr	r3, [pc, #388]	; (8011900 <tcp_process+0x538>)
 801177c:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011782:	009a      	lsls	r2, r3, #2
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	f241 111c 	movw	r1, #4380	; 0x111c
 801178e:	428b      	cmp	r3, r1
 8011790:	bf38      	it	cc
 8011792:	460b      	movcc	r3, r1
 8011794:	429a      	cmp	r2, r3
 8011796:	d204      	bcs.n	80117a2 <tcp_process+0x3da>
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	b29b      	uxth	r3, r3
 80117a0:	e00d      	b.n	80117be <tcp_process+0x3f6>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	f241 121c 	movw	r2, #4380	; 0x111c
 80117ac:	4293      	cmp	r3, r2
 80117ae:	d904      	bls.n	80117ba <tcp_process+0x3f2>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117b4:	005b      	lsls	r3, r3, #1
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	e001      	b.n	80117be <tcp_process+0x3f6>
 80117ba:	f241 131c 	movw	r3, #4380	; 0x111c
 80117be:	687a      	ldr	r2, [r7, #4]
 80117c0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80117c4:	4b4f      	ldr	r3, [pc, #316]	; (8011904 <tcp_process+0x53c>)
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	f003 0320 	and.w	r3, r3, #32
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d037      	beq.n	8011840 <tcp_process+0x478>
            tcp_ack_now(pcb);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	8b5b      	ldrh	r3, [r3, #26]
 80117d4:	f043 0302 	orr.w	r3, r3, #2
 80117d8:	b29a      	uxth	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2207      	movs	r2, #7
 80117e2:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80117e4:	e02c      	b.n	8011840 <tcp_process+0x478>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117e6:	4b40      	ldr	r3, [pc, #256]	; (80118e8 <tcp_process+0x520>)
 80117e8:	6819      	ldr	r1, [r3, #0]
 80117ea:	4b40      	ldr	r3, [pc, #256]	; (80118ec <tcp_process+0x524>)
 80117ec:	881b      	ldrh	r3, [r3, #0]
 80117ee:	461a      	mov	r2, r3
 80117f0:	4b3f      	ldr	r3, [pc, #252]	; (80118f0 <tcp_process+0x528>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117f6:	4b3f      	ldr	r3, [pc, #252]	; (80118f4 <tcp_process+0x52c>)
 80117f8:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117fa:	885b      	ldrh	r3, [r3, #2]
 80117fc:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117fe:	4a3d      	ldr	r2, [pc, #244]	; (80118f4 <tcp_process+0x52c>)
 8011800:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011802:	8812      	ldrh	r2, [r2, #0]
 8011804:	b292      	uxth	r2, r2
 8011806:	9202      	str	r2, [sp, #8]
 8011808:	9301      	str	r3, [sp, #4]
 801180a:	4b3b      	ldr	r3, [pc, #236]	; (80118f8 <tcp_process+0x530>)
 801180c:	9300      	str	r3, [sp, #0]
 801180e:	4b3b      	ldr	r3, [pc, #236]	; (80118fc <tcp_process+0x534>)
 8011810:	4602      	mov	r2, r0
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f002 fca2 	bl	801415c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011818:	e160      	b.n	8011adc <tcp_process+0x714>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801181a:	4b32      	ldr	r3, [pc, #200]	; (80118e4 <tcp_process+0x51c>)
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	f003 0302 	and.w	r3, r3, #2
 8011822:	2b00      	cmp	r3, #0
 8011824:	f000 815a 	beq.w	8011adc <tcp_process+0x714>
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801182c:	1e5a      	subs	r2, r3, #1
 801182e:	4b30      	ldr	r3, [pc, #192]	; (80118f0 <tcp_process+0x528>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	429a      	cmp	r2, r3
 8011834:	f040 8152 	bne.w	8011adc <tcp_process+0x714>
        tcp_rexmit(pcb);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f002 fae9 	bl	8013e10 <tcp_rexmit>
      break;
 801183e:	e14d      	b.n	8011adc <tcp_process+0x714>
 8011840:	e14c      	b.n	8011adc <tcp_process+0x714>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 fa34 	bl	8011cb0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011848:	4b2e      	ldr	r3, [pc, #184]	; (8011904 <tcp_process+0x53c>)
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	f003 0320 	and.w	r3, r3, #32
 8011850:	2b00      	cmp	r3, #0
 8011852:	f000 8145 	beq.w	8011ae0 <tcp_process+0x718>
        tcp_ack_now(pcb);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	8b5b      	ldrh	r3, [r3, #26]
 801185a:	f043 0302 	orr.w	r3, r3, #2
 801185e:	b29a      	uxth	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2207      	movs	r2, #7
 8011868:	751a      	strb	r2, [r3, #20]
      }
      break;
 801186a:	e139      	b.n	8011ae0 <tcp_process+0x718>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 fa1f 	bl	8011cb0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011872:	4b24      	ldr	r3, [pc, #144]	; (8011904 <tcp_process+0x53c>)
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	f003 0320 	and.w	r3, r3, #32
 801187a:	2b00      	cmp	r3, #0
 801187c:	d06a      	beq.n	8011954 <tcp_process+0x58c>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801187e:	4b19      	ldr	r3, [pc, #100]	; (80118e4 <tcp_process+0x51c>)
 8011880:	781b      	ldrb	r3, [r3, #0]
 8011882:	f003 0310 	and.w	r3, r3, #16
 8011886:	2b00      	cmp	r3, #0
 8011888:	d059      	beq.n	801193e <tcp_process+0x576>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801188e:	4b16      	ldr	r3, [pc, #88]	; (80118e8 <tcp_process+0x520>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	429a      	cmp	r2, r3
 8011894:	d153      	bne.n	801193e <tcp_process+0x576>
            pcb->unsent == NULL) {
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801189a:	2b00      	cmp	r3, #0
 801189c:	d14f      	bne.n	801193e <tcp_process+0x576>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	8b5b      	ldrh	r3, [r3, #26]
 80118a2:	f043 0302 	orr.w	r3, r3, #2
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f7fe fed3 	bl	8010658 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80118b2:	4b15      	ldr	r3, [pc, #84]	; (8011908 <tcp_process+0x540>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d105      	bne.n	80118c8 <tcp_process+0x500>
 80118bc:	4b12      	ldr	r3, [pc, #72]	; (8011908 <tcp_process+0x540>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	4a11      	ldr	r2, [pc, #68]	; (8011908 <tcp_process+0x540>)
 80118c4:	6013      	str	r3, [r2, #0]
 80118c6:	e027      	b.n	8011918 <tcp_process+0x550>
 80118c8:	4b0f      	ldr	r3, [pc, #60]	; (8011908 <tcp_process+0x540>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	613b      	str	r3, [r7, #16]
 80118ce:	e020      	b.n	8011912 <tcp_process+0x54a>
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d118      	bne.n	801190c <tcp_process+0x544>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	68da      	ldr	r2, [r3, #12]
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	60da      	str	r2, [r3, #12]
 80118e2:	e019      	b.n	8011918 <tcp_process+0x550>
 80118e4:	200077fc 	.word	0x200077fc
 80118e8:	200077f4 	.word	0x200077f4
 80118ec:	200077fa 	.word	0x200077fa
 80118f0:	200077f0 	.word	0x200077f0
 80118f4:	200077e0 	.word	0x200077e0
 80118f8:	200076f8 	.word	0x200076f8
 80118fc:	200076fc 	.word	0x200076fc
 8011900:	200077f8 	.word	0x200077f8
 8011904:	200077fd 	.word	0x200077fd
 8011908:	200077c0 	.word	0x200077c0
 801190c:	693b      	ldr	r3, [r7, #16]
 801190e:	68db      	ldr	r3, [r3, #12]
 8011910:	613b      	str	r3, [r7, #16]
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1db      	bne.n	80118d0 <tcp_process+0x508>
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2200      	movs	r2, #0
 801191c:	60da      	str	r2, [r3, #12]
 801191e:	4b77      	ldr	r3, [pc, #476]	; (8011afc <tcp_process+0x734>)
 8011920:	2201      	movs	r2, #1
 8011922:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	220a      	movs	r2, #10
 8011928:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801192a:	4b75      	ldr	r3, [pc, #468]	; (8011b00 <tcp_process+0x738>)
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	60da      	str	r2, [r3, #12]
 8011932:	4a73      	ldr	r2, [pc, #460]	; (8011b00 <tcp_process+0x738>)
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6013      	str	r3, [r2, #0]
 8011938:	f002 fd84 	bl	8014444 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801193c:	e0d2      	b.n	8011ae4 <tcp_process+0x71c>
          tcp_ack_now(pcb);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	8b5b      	ldrh	r3, [r3, #26]
 8011942:	f043 0302 	orr.w	r3, r3, #2
 8011946:	b29a      	uxth	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2208      	movs	r2, #8
 8011950:	751a      	strb	r2, [r3, #20]
      break;
 8011952:	e0c7      	b.n	8011ae4 <tcp_process+0x71c>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011954:	4b6b      	ldr	r3, [pc, #428]	; (8011b04 <tcp_process+0x73c>)
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	f003 0310 	and.w	r3, r3, #16
 801195c:	2b00      	cmp	r3, #0
 801195e:	f000 80c1 	beq.w	8011ae4 <tcp_process+0x71c>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011966:	4b68      	ldr	r3, [pc, #416]	; (8011b08 <tcp_process+0x740>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	429a      	cmp	r2, r3
 801196c:	f040 80ba 	bne.w	8011ae4 <tcp_process+0x71c>
                 pcb->unsent == NULL) {
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011974:	2b00      	cmp	r3, #0
 8011976:	f040 80b5 	bne.w	8011ae4 <tcp_process+0x71c>
        pcb->state = FIN_WAIT_2;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2206      	movs	r2, #6
 801197e:	751a      	strb	r2, [r3, #20]
      break;
 8011980:	e0b0      	b.n	8011ae4 <tcp_process+0x71c>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f000 f994 	bl	8011cb0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011988:	4b60      	ldr	r3, [pc, #384]	; (8011b0c <tcp_process+0x744>)
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	f003 0320 	and.w	r3, r3, #32
 8011990:	2b00      	cmp	r3, #0
 8011992:	f000 80a9 	beq.w	8011ae8 <tcp_process+0x720>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	8b5b      	ldrh	r3, [r3, #26]
 801199a:	f043 0302 	orr.w	r3, r3, #2
 801199e:	b29a      	uxth	r2, r3
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f7fe fe57 	bl	8010658 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80119aa:	4b59      	ldr	r3, [pc, #356]	; (8011b10 <tcp_process+0x748>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	687a      	ldr	r2, [r7, #4]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d105      	bne.n	80119c0 <tcp_process+0x5f8>
 80119b4:	4b56      	ldr	r3, [pc, #344]	; (8011b10 <tcp_process+0x748>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	68db      	ldr	r3, [r3, #12]
 80119ba:	4a55      	ldr	r2, [pc, #340]	; (8011b10 <tcp_process+0x748>)
 80119bc:	6013      	str	r3, [r2, #0]
 80119be:	e013      	b.n	80119e8 <tcp_process+0x620>
 80119c0:	4b53      	ldr	r3, [pc, #332]	; (8011b10 <tcp_process+0x748>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	60fb      	str	r3, [r7, #12]
 80119c6:	e00c      	b.n	80119e2 <tcp_process+0x61a>
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	68db      	ldr	r3, [r3, #12]
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d104      	bne.n	80119dc <tcp_process+0x614>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	68da      	ldr	r2, [r3, #12]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	60da      	str	r2, [r3, #12]
 80119da:	e005      	b.n	80119e8 <tcp_process+0x620>
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	60fb      	str	r3, [r7, #12]
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d1ef      	bne.n	80119c8 <tcp_process+0x600>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2200      	movs	r2, #0
 80119ec:	60da      	str	r2, [r3, #12]
 80119ee:	4b43      	ldr	r3, [pc, #268]	; (8011afc <tcp_process+0x734>)
 80119f0:	2201      	movs	r2, #1
 80119f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	220a      	movs	r2, #10
 80119f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80119fa:	4b41      	ldr	r3, [pc, #260]	; (8011b00 <tcp_process+0x738>)
 80119fc:	681a      	ldr	r2, [r3, #0]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	60da      	str	r2, [r3, #12]
 8011a02:	4a3f      	ldr	r2, [pc, #252]	; (8011b00 <tcp_process+0x738>)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6013      	str	r3, [r2, #0]
 8011a08:	f002 fd1c 	bl	8014444 <tcp_timer_needed>
      }
      break;
 8011a0c:	e06c      	b.n	8011ae8 <tcp_process+0x720>
    case CLOSING:
      tcp_receive(pcb);
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f000 f94e 	bl	8011cb0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011a14:	4b3b      	ldr	r3, [pc, #236]	; (8011b04 <tcp_process+0x73c>)
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	f003 0310 	and.w	r3, r3, #16
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d065      	beq.n	8011aec <tcp_process+0x724>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a24:	4b38      	ldr	r3, [pc, #224]	; (8011b08 <tcp_process+0x740>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d15f      	bne.n	8011aec <tcp_process+0x724>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d15b      	bne.n	8011aec <tcp_process+0x724>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f7fe fe0f 	bl	8010658 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011a3a:	4b35      	ldr	r3, [pc, #212]	; (8011b10 <tcp_process+0x748>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d105      	bne.n	8011a50 <tcp_process+0x688>
 8011a44:	4b32      	ldr	r3, [pc, #200]	; (8011b10 <tcp_process+0x748>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	4a31      	ldr	r2, [pc, #196]	; (8011b10 <tcp_process+0x748>)
 8011a4c:	6013      	str	r3, [r2, #0]
 8011a4e:	e013      	b.n	8011a78 <tcp_process+0x6b0>
 8011a50:	4b2f      	ldr	r3, [pc, #188]	; (8011b10 <tcp_process+0x748>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	61fb      	str	r3, [r7, #28]
 8011a56:	e00c      	b.n	8011a72 <tcp_process+0x6aa>
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	687a      	ldr	r2, [r7, #4]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d104      	bne.n	8011a6c <tcp_process+0x6a4>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	68da      	ldr	r2, [r3, #12]
 8011a66:	69fb      	ldr	r3, [r7, #28]
 8011a68:	60da      	str	r2, [r3, #12]
 8011a6a:	e005      	b.n	8011a78 <tcp_process+0x6b0>
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	61fb      	str	r3, [r7, #28]
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1ef      	bne.n	8011a58 <tcp_process+0x690>
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	60da      	str	r2, [r3, #12]
 8011a7e:	4b1f      	ldr	r3, [pc, #124]	; (8011afc <tcp_process+0x734>)
 8011a80:	2201      	movs	r2, #1
 8011a82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	220a      	movs	r2, #10
 8011a88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011a8a:	4b1d      	ldr	r3, [pc, #116]	; (8011b00 <tcp_process+0x738>)
 8011a8c:	681a      	ldr	r2, [r3, #0]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	60da      	str	r2, [r3, #12]
 8011a92:	4a1b      	ldr	r2, [pc, #108]	; (8011b00 <tcp_process+0x738>)
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6013      	str	r3, [r2, #0]
 8011a98:	f002 fcd4 	bl	8014444 <tcp_timer_needed>
      }
      break;
 8011a9c:	e026      	b.n	8011aec <tcp_process+0x724>
    case LAST_ACK:
      tcp_receive(pcb);
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f000 f906 	bl	8011cb0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011aa4:	4b17      	ldr	r3, [pc, #92]	; (8011b04 <tcp_process+0x73c>)
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	f003 0310 	and.w	r3, r3, #16
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d01f      	beq.n	8011af0 <tcp_process+0x728>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ab4:	4b14      	ldr	r3, [pc, #80]	; (8011b08 <tcp_process+0x740>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d119      	bne.n	8011af0 <tcp_process+0x728>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d115      	bne.n	8011af0 <tcp_process+0x728>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011ac4:	4b11      	ldr	r3, [pc, #68]	; (8011b0c <tcp_process+0x744>)
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	f043 0310 	orr.w	r3, r3, #16
 8011acc:	b2da      	uxtb	r2, r3
 8011ace:	4b0f      	ldr	r3, [pc, #60]	; (8011b0c <tcp_process+0x744>)
 8011ad0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011ad2:	e00d      	b.n	8011af0 <tcp_process+0x728>
    default:
      break;
 8011ad4:	bf00      	nop
 8011ad6:	e00c      	b.n	8011af2 <tcp_process+0x72a>
      break;
 8011ad8:	bf00      	nop
 8011ada:	e00a      	b.n	8011af2 <tcp_process+0x72a>
      break;
 8011adc:	bf00      	nop
 8011ade:	e008      	b.n	8011af2 <tcp_process+0x72a>
      break;
 8011ae0:	bf00      	nop
 8011ae2:	e006      	b.n	8011af2 <tcp_process+0x72a>
      break;
 8011ae4:	bf00      	nop
 8011ae6:	e004      	b.n	8011af2 <tcp_process+0x72a>
      break;
 8011ae8:	bf00      	nop
 8011aea:	e002      	b.n	8011af2 <tcp_process+0x72a>
      break;
 8011aec:	bf00      	nop
 8011aee:	e000      	b.n	8011af2 <tcp_process+0x72a>
      break;
 8011af0:	bf00      	nop
  }
  return ERR_OK;
 8011af2:	2300      	movs	r3, #0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3724      	adds	r7, #36	; 0x24
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd90      	pop	{r4, r7, pc}
 8011afc:	200077c8 	.word	0x200077c8
 8011b00:	200077c4 	.word	0x200077c4
 8011b04:	200077fc 	.word	0x200077fc
 8011b08:	200077f4 	.word	0x200077f4
 8011b0c:	200077fd 	.word	0x200077fd
 8011b10:	200077c0 	.word	0x200077c0

08011b14 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011b14:	b590      	push	{r4, r7, lr}
 8011b16:	b085      	sub	sp, #20
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	691b      	ldr	r3, [r3, #16]
 8011b22:	899b      	ldrh	r3, [r3, #12]
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fc f990 	bl	800de4c <lwip_htons>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	f003 0301 	and.w	r3, r3, #1
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d028      	beq.n	8011b8a <tcp_oos_insert_segment+0x76>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011b38:	6838      	ldr	r0, [r7, #0]
 8011b3a:	f7fe fb20 	bl	801017e <tcp_segs_free>
    next = NULL;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	603b      	str	r3, [r7, #0]
 8011b42:	e056      	b.n	8011bf2 <tcp_oos_insert_segment+0xde>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	691b      	ldr	r3, [r3, #16]
 8011b48:	899b      	ldrh	r3, [r3, #12]
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7fc f97d 	bl	800de4c <lwip_htons>
 8011b52:	4603      	mov	r3, r0
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	f003 0301 	and.w	r3, r3, #1
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d00d      	beq.n	8011b7a <tcp_oos_insert_segment+0x66>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	691b      	ldr	r3, [r3, #16]
 8011b62:	899b      	ldrh	r3, [r3, #12]
 8011b64:	b29c      	uxth	r4, r3
 8011b66:	2001      	movs	r0, #1
 8011b68:	f7fc f970 	bl	800de4c <lwip_htons>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	461a      	mov	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	691b      	ldr	r3, [r3, #16]
 8011b74:	4322      	orrs	r2, r4
 8011b76:	b292      	uxth	r2, r2
 8011b78:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011b84:	68f8      	ldr	r0, [r7, #12]
 8011b86:	f7fe fb0f 	bl	80101a8 <tcp_seg_free>
    while (next &&
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d00e      	beq.n	8011bae <tcp_oos_insert_segment+0x9a>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	891b      	ldrh	r3, [r3, #8]
 8011b94:	461a      	mov	r2, r3
 8011b96:	4b1a      	ldr	r3, [pc, #104]	; (8011c00 <tcp_oos_insert_segment+0xec>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	441a      	add	r2, r3
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	691b      	ldr	r3, [r3, #16]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	6839      	ldr	r1, [r7, #0]
 8011ba4:	8909      	ldrh	r1, [r1, #8]
 8011ba6:	440b      	add	r3, r1
 8011ba8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	daca      	bge.n	8011b44 <tcp_oos_insert_segment+0x30>
    }
    if (next &&
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d01e      	beq.n	8011bf2 <tcp_oos_insert_segment+0xde>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	891b      	ldrh	r3, [r3, #8]
 8011bb8:	461a      	mov	r2, r3
 8011bba:	4b11      	ldr	r3, [pc, #68]	; (8011c00 <tcp_oos_insert_segment+0xec>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	441a      	add	r2, r3
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	691b      	ldr	r3, [r3, #16]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	dd12      	ble.n	8011bf2 <tcp_oos_insert_segment+0xde>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	691b      	ldr	r3, [r3, #16]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	b29a      	uxth	r2, r3
 8011bd4:	4b0a      	ldr	r3, [pc, #40]	; (8011c00 <tcp_oos_insert_segment+0xec>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	1ad3      	subs	r3, r2, r3
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	685a      	ldr	r2, [r3, #4]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	891b      	ldrh	r3, [r3, #8]
 8011bea:	4619      	mov	r1, r3
 8011bec:	4610      	mov	r0, r2
 8011bee:	f7fc fff2 	bl	800ebd6 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	683a      	ldr	r2, [r7, #0]
 8011bf6:	601a      	str	r2, [r3, #0]
}
 8011bf8:	bf00      	nop
 8011bfa:	3714      	adds	r7, #20
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd90      	pop	{r4, r7, pc}
 8011c00:	200077f0 	.word	0x200077f0

08011c04 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011c04:	b5b0      	push	{r4, r5, r7, lr}
 8011c06:	b086      	sub	sp, #24
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	607a      	str	r2, [r7, #4]
 8011c10:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011c12:	e01f      	b.n	8011c54 <tcp_free_acked_segments+0x50>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7fd f95d 	bl	800eee2 <pbuf_clen>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011c32:	8a7b      	ldrh	r3, [r7, #18]
 8011c34:	1ad3      	subs	r3, r2, r3
 8011c36:	b29a      	uxth	r2, r3
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	891a      	ldrh	r2, [r3, #8]
 8011c42:	4b19      	ldr	r3, [pc, #100]	; (8011ca8 <tcp_free_acked_segments+0xa4>)
 8011c44:	881b      	ldrh	r3, [r3, #0]
 8011c46:	4413      	add	r3, r2
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	4b17      	ldr	r3, [pc, #92]	; (8011ca8 <tcp_free_acked_segments+0xa4>)
 8011c4c:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011c4e:	6978      	ldr	r0, [r7, #20]
 8011c50:	f7fe faaa 	bl	80101a8 <tcp_seg_free>
  while (seg_list != NULL &&
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d020      	beq.n	8011c9c <tcp_free_acked_segments+0x98>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	691b      	ldr	r3, [r3, #16]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7fc f908 	bl	800de76 <lwip_htonl>
 8011c66:	4604      	mov	r4, r0
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	891b      	ldrh	r3, [r3, #8]
 8011c6c:	461d      	mov	r5, r3
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	691b      	ldr	r3, [r3, #16]
 8011c72:	899b      	ldrh	r3, [r3, #12]
 8011c74:	b29b      	uxth	r3, r3
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7fc f8e8 	bl	800de4c <lwip_htons>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	f003 0303 	and.w	r3, r3, #3
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d001      	beq.n	8011c8c <tcp_free_acked_segments+0x88>
 8011c88:	2301      	movs	r3, #1
 8011c8a:	e000      	b.n	8011c8e <tcp_free_acked_segments+0x8a>
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	442b      	add	r3, r5
 8011c90:	18e2      	adds	r2, r4, r3
 8011c92:	4b06      	ldr	r3, [pc, #24]	; (8011cac <tcp_free_acked_segments+0xa8>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	ddbb      	ble.n	8011c14 <tcp_free_acked_segments+0x10>
    if (pcb->snd_queuelen != 0) {
      LWIP_ASSERT("tcp_receive: valid queue length",
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011c9c:	68bb      	ldr	r3, [r7, #8]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3718      	adds	r7, #24
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	200077f8 	.word	0x200077f8
 8011cac:	200077f4 	.word	0x200077f4

08011cb0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011cb0:	b590      	push	{r4, r7, lr}
 8011cb2:	b095      	sub	sp, #84	; 0x54
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 8011cbc:	4b9d      	ldr	r3, [pc, #628]	; (8011f34 <tcp_receive+0x284>)
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	f003 0310 	and.w	r3, r3, #16
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	f000 825c 	beq.w	8012182 <tcp_receive+0x4d2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cd6:	4413      	add	r3, r2
 8011cd8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011cde:	4b96      	ldr	r3, [pc, #600]	; (8011f38 <tcp_receive+0x288>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	1ad3      	subs	r3, r2, r3
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	db1b      	blt.n	8011d20 <tcp_receive+0x70>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011cec:	4b92      	ldr	r3, [pc, #584]	; (8011f38 <tcp_receive+0x288>)
 8011cee:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d106      	bne.n	8011d02 <tcp_receive+0x52>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011cf8:	4b90      	ldr	r3, [pc, #576]	; (8011f3c <tcp_receive+0x28c>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	db0e      	blt.n	8011d20 <tcp_receive+0x70>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d06:	4b8d      	ldr	r3, [pc, #564]	; (8011f3c <tcp_receive+0x28c>)
 8011d08:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d125      	bne.n	8011d5a <tcp_receive+0xaa>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011d0e:	4b8c      	ldr	r3, [pc, #560]	; (8011f40 <tcp_receive+0x290>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	89db      	ldrh	r3, [r3, #14]
 8011d14:	b29a      	uxth	r2, r3
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d91c      	bls.n	8011d5a <tcp_receive+0xaa>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011d20:	4b87      	ldr	r3, [pc, #540]	; (8011f40 <tcp_receive+0x290>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	89db      	ldrh	r3, [r3, #14]
 8011d26:	b29a      	uxth	r2, r3
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d205      	bcs.n	8011d4a <tcp_receive+0x9a>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011d4a:	4b7b      	ldr	r3, [pc, #492]	; (8011f38 <tcp_receive+0x288>)
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011d52:	4b7a      	ldr	r3, [pc, #488]	; (8011f3c <tcp_receive+0x28c>)
 8011d54:	681a      	ldr	r2, [r3, #0]
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011d5a:	4b78      	ldr	r3, [pc, #480]	; (8011f3c <tcp_receive+0x28c>)
 8011d5c:	681a      	ldr	r2, [r3, #0]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d62:	1ad3      	subs	r3, r2, r3
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	dc58      	bgt.n	8011e1a <tcp_receive+0x16a>
      /* Clause 2 */
      if (tcplen == 0) {
 8011d68:	4b76      	ldr	r3, [pc, #472]	; (8011f44 <tcp_receive+0x294>)
 8011d6a:	881b      	ldrh	r3, [r3, #0]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d14b      	bne.n	8011e08 <tcp_receive+0x158>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011d7a:	4413      	add	r3, r2
 8011d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d142      	bne.n	8011e08 <tcp_receive+0x158>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	db3d      	blt.n	8011e08 <tcp_receive+0x158>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d90:	4b6a      	ldr	r3, [pc, #424]	; (8011f3c <tcp_receive+0x28c>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d137      	bne.n	8011e08 <tcp_receive+0x158>
              found_dupack = 1;
 8011d98:	2301      	movs	r3, #1
 8011d9a:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011da2:	2bff      	cmp	r3, #255	; 0xff
 8011da4:	d007      	beq.n	8011db6 <tcp_receive+0x106>
                ++pcb->dupacks;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dac:	3301      	adds	r3, #1
 8011dae:	b2da      	uxtb	r2, r3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dbc:	2b03      	cmp	r3, #3
 8011dbe:	d91b      	bls.n	8011df8 <tcp_receive+0x148>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011dca:	4413      	add	r3, r2
 8011dcc:	b29a      	uxth	r2, r3
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d30a      	bcc.n	8011dee <tcp_receive+0x13e>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011de2:	4413      	add	r3, r2
 8011de4:	b29a      	uxth	r2, r3
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011dec:	e004      	b.n	8011df8 <tcp_receive+0x148>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011df4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dfe:	2b02      	cmp	r3, #2
 8011e00:	d902      	bls.n	8011e08 <tcp_receive+0x158>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f002 f860 	bl	8013ec8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	f040 8159 	bne.w	80120c2 <tcp_receive+0x412>
        pcb->dupacks = 0;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011e18:	e153      	b.n	80120c2 <tcp_receive+0x412>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e1a:	4b48      	ldr	r3, [pc, #288]	; (8011f3c <tcp_receive+0x28c>)
 8011e1c:	681a      	ldr	r2, [r3, #0]
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e22:	1ad3      	subs	r3, r2, r3
 8011e24:	3b01      	subs	r3, #1
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f2c0 8146 	blt.w	80120b8 <tcp_receive+0x408>
 8011e2c:	4b43      	ldr	r3, [pc, #268]	; (8011f3c <tcp_receive+0x28c>)
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e34:	1ad3      	subs	r3, r2, r3
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	f300 813e 	bgt.w	80120b8 <tcp_receive+0x408>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	8b5b      	ldrh	r3, [r3, #26]
 8011e40:	f003 0304 	and.w	r3, r3, #4
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d010      	beq.n	8011e6a <tcp_receive+0x1ba>
        tcp_clear_flags(pcb, TF_INFR);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	8b5b      	ldrh	r3, [r3, #26]
 8011e4c:	f023 0304 	bic.w	r3, r3, #4
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2200      	movs	r2, #0
 8011e66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011e78:	10db      	asrs	r3, r3, #3
 8011e7a:	b21b      	sxth	r3, r3
 8011e7c:	b29a      	uxth	r2, r3
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	4413      	add	r3, r2
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	b21a      	sxth	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011e92:	4b2a      	ldr	r3, [pc, #168]	; (8011f3c <tcp_receive+0x28c>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	1ad3      	subs	r3, r2, r3
 8011ea0:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011eaa:	4b24      	ldr	r3, [pc, #144]	; (8011f3c <tcp_receive+0x28c>)
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	7d1b      	ldrb	r3, [r3, #20]
 8011eb6:	2b03      	cmp	r3, #3
 8011eb8:	f240 808f 	bls.w	8011fda <tcp_receive+0x32a>
        if (pcb->cwnd < pcb->ssthresh) {
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d23d      	bcs.n	8011f48 <tcp_receive+0x298>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	8b5b      	ldrh	r3, [r3, #26]
 8011ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d001      	beq.n	8011edc <tcp_receive+0x22c>
 8011ed8:	2301      	movs	r3, #1
 8011eda:	e000      	b.n	8011ede <tcp_receive+0x22e>
 8011edc:	2302      	movs	r3, #2
 8011ede:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011ee2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011ee6:	b29a      	uxth	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eec:	fb12 f303 	smulbb	r3, r2, r3
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	bf28      	it	cs
 8011ef8:	4613      	movcs	r3, r2
 8011efa:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f04:	4413      	add	r3, r2
 8011f06:	b29a      	uxth	r2, r3
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d309      	bcc.n	8011f26 <tcp_receive+0x276>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f1a:	4413      	add	r3, r2
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f24:	e059      	b.n	8011fda <tcp_receive+0x32a>
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f30:	e053      	b.n	8011fda <tcp_receive+0x32a>
 8011f32:	bf00      	nop
 8011f34:	200077fc 	.word	0x200077fc
 8011f38:	200077f0 	.word	0x200077f0
 8011f3c:	200077f4 	.word	0x200077f4
 8011f40:	200077e0 	.word	0x200077e0
 8011f44:	200077fa 	.word	0x200077fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011f4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011f50:	4413      	add	r3, r2
 8011f52:	b29a      	uxth	r2, r3
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d309      	bcc.n	8011f72 <tcp_receive+0x2c2>
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011f64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011f66:	4413      	add	r3, r2
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011f70:	e004      	b.n	8011f7c <tcp_receive+0x2cc>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d326      	bcc.n	8011fda <tcp_receive+0x32a>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f98:	1ad3      	subs	r3, r2, r3
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fac:	4413      	add	r3, r2
 8011fae:	b29a      	uxth	r2, r3
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d30a      	bcc.n	8011fd0 <tcp_receive+0x320>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fc4:	4413      	add	r3, r2
 8011fc6:	b29a      	uxth	r2, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011fce:	e004      	b.n	8011fda <tcp_receive+0x32a>
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fe2:	4a98      	ldr	r2, [pc, #608]	; (8012244 <tcp_receive+0x594>)
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f7ff fe0d 	bl	8011c04 <tcp_free_acked_segments>
 8011fea:	4602      	mov	r2, r0
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff8:	4a93      	ldr	r2, [pc, #588]	; (8012248 <tcp_receive+0x598>)
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f7ff fe02 	bl	8011c04 <tcp_free_acked_segments>
 8012000:	4602      	mov	r2, r0
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801200a:	2b00      	cmp	r3, #0
 801200c:	d104      	bne.n	8012018 <tcp_receive+0x368>
        pcb->rtime = -1;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012014:	861a      	strh	r2, [r3, #48]	; 0x30
 8012016:	e002      	b.n	801201e <tcp_receive+0x36e>
      } else {
        pcb->rtime = 0;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2200      	movs	r2, #0
 801201c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2200      	movs	r2, #0
 8012022:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012028:	2b00      	cmp	r3, #0
 801202a:	d103      	bne.n	8012034 <tcp_receive+0x384>
        pcb->unsent_oversize = 0;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2200      	movs	r2, #0
 8012030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801203a:	4b84      	ldr	r3, [pc, #528]	; (801224c <tcp_receive+0x59c>)
 801203c:	881b      	ldrh	r3, [r3, #0]
 801203e:	4413      	add	r3, r2
 8012040:	b29a      	uxth	r2, r3
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	8b5b      	ldrh	r3, [r3, #26]
 801204c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012050:	2b00      	cmp	r3, #0
 8012052:	d035      	beq.n	80120c0 <tcp_receive+0x410>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012058:	2b00      	cmp	r3, #0
 801205a:	d118      	bne.n	801208e <tcp_receive+0x3de>
          if ((pcb->unsent == NULL) ||
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012060:	2b00      	cmp	r3, #0
 8012062:	d00c      	beq.n	801207e <tcp_receive+0x3ce>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801206c:	691b      	ldr	r3, [r3, #16]
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	4618      	mov	r0, r3
 8012072:	f7fb ff00 	bl	800de76 <lwip_htonl>
 8012076:	4603      	mov	r3, r0
 8012078:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801207a:	2b00      	cmp	r3, #0
 801207c:	dc20      	bgt.n	80120c0 <tcp_receive+0x410>
            tcp_clear_flags(pcb, TF_RTO);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	8b5b      	ldrh	r3, [r3, #26]
 8012082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012086:	b29a      	uxth	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801208c:	e018      	b.n	80120c0 <tcp_receive+0x410>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	4618      	mov	r0, r3
 801209c:	f7fb feeb 	bl	800de76 <lwip_htonl>
 80120a0:	4603      	mov	r3, r0
 80120a2:	1ae3      	subs	r3, r4, r3
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	dc0b      	bgt.n	80120c0 <tcp_receive+0x410>
          tcp_clear_flags(pcb, TF_RTO);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	8b5b      	ldrh	r3, [r3, #26]
 80120ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80120b0:	b29a      	uxth	r2, r3
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120b6:	e003      	b.n	80120c0 <tcp_receive+0x410>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f002 f884 	bl	80141c6 <tcp_send_empty_ack>
 80120be:	e000      	b.n	80120c2 <tcp_receive+0x412>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120c0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d05b      	beq.n	8012182 <tcp_receive+0x4d2>
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120ce:	4b60      	ldr	r3, [pc, #384]	; (8012250 <tcp_receive+0x5a0>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	1ad3      	subs	r3, r2, r3
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	da54      	bge.n	8012182 <tcp_receive+0x4d2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80120d8:	4b5e      	ldr	r3, [pc, #376]	; (8012254 <tcp_receive+0x5a4>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	b29a      	uxth	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120e2:	b29b      	uxth	r3, r3
 80120e4:	1ad3      	subs	r3, r2, r3
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80120ec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80120f6:	10db      	asrs	r3, r3, #3
 80120f8:	b21b      	sxth	r3, r3
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	1ad3      	subs	r3, r2, r3
 80120fe:	b29b      	uxth	r3, r3
 8012100:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801210a:	b29a      	uxth	r2, r3
 801210c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012110:	4413      	add	r3, r2
 8012112:	b29b      	uxth	r3, r3
 8012114:	b21a      	sxth	r2, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801211a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801211e:	2b00      	cmp	r3, #0
 8012120:	da05      	bge.n	801212e <tcp_receive+0x47e>
        m = (s16_t) - m;
 8012122:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012126:	425b      	negs	r3, r3
 8012128:	b29b      	uxth	r3, r3
 801212a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801212e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012138:	109b      	asrs	r3, r3, #2
 801213a:	b21b      	sxth	r3, r3
 801213c:	b29b      	uxth	r3, r3
 801213e:	1ad3      	subs	r3, r2, r3
 8012140:	b29b      	uxth	r3, r3
 8012142:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801214c:	b29a      	uxth	r2, r3
 801214e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012152:	4413      	add	r3, r2
 8012154:	b29b      	uxth	r3, r3
 8012156:	b21a      	sxth	r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012162:	10db      	asrs	r3, r3, #3
 8012164:	b21b      	sxth	r3, r3
 8012166:	b29a      	uxth	r2, r3
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801216e:	b29b      	uxth	r3, r3
 8012170:	4413      	add	r3, r2
 8012172:	b29b      	uxth	r3, r3
 8012174:	b21a      	sxth	r2, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012182:	4b35      	ldr	r3, [pc, #212]	; (8012258 <tcp_receive+0x5a8>)
 8012184:	881b      	ldrh	r3, [r3, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	f000 8444 	beq.w	8012a14 <tcp_receive+0xd64>
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	7d1b      	ldrb	r3, [r3, #20]
 8012190:	2b06      	cmp	r3, #6
 8012192:	f200 843f 	bhi.w	8012a14 <tcp_receive+0xd64>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801219a:	4b30      	ldr	r3, [pc, #192]	; (801225c <tcp_receive+0x5ac>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	3b01      	subs	r3, #1
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	db5e      	blt.n	8012264 <tcp_receive+0x5b4>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121aa:	4b2b      	ldr	r3, [pc, #172]	; (8012258 <tcp_receive+0x5a8>)
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	4619      	mov	r1, r3
 80121b0:	4b2a      	ldr	r3, [pc, #168]	; (801225c <tcp_receive+0x5ac>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	440b      	add	r3, r1
 80121b6:	1ad3      	subs	r3, r2, r3
 80121b8:	3301      	adds	r3, #1
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	dc52      	bgt.n	8012264 <tcp_receive+0x5b4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80121be:	4b28      	ldr	r3, [pc, #160]	; (8012260 <tcp_receive+0x5b0>)
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121c8:	4b24      	ldr	r3, [pc, #144]	; (801225c <tcp_receive+0x5ac>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	1ad3      	subs	r3, r2, r3
 80121ce:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
      off = (u16_t)off32;
 80121d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
      inseg.len -= off;
 80121d6:	4b22      	ldr	r3, [pc, #136]	; (8012260 <tcp_receive+0x5b0>)
 80121d8:	891a      	ldrh	r2, [r3, #8]
 80121da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121de:	1ad3      	subs	r3, r2, r3
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	4b1f      	ldr	r3, [pc, #124]	; (8012260 <tcp_receive+0x5b0>)
 80121e4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80121e6:	4b1e      	ldr	r3, [pc, #120]	; (8012260 <tcp_receive+0x5b0>)
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	891a      	ldrh	r2, [r3, #8]
 80121ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121f0:	1ad3      	subs	r3, r2, r3
 80121f2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80121f4:	e00f      	b.n	8012216 <tcp_receive+0x566>
        off -= p->len;
 80121f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121f8:	895b      	ldrh	r3, [r3, #10]
 80121fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121fe:	1ad3      	subs	r3, r2, r3
 8012200:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012206:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012208:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801220a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801220c:	2200      	movs	r2, #0
 801220e:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012218:	895b      	ldrh	r3, [r3, #10]
 801221a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801221e:	429a      	cmp	r2, r3
 8012220:	d8e9      	bhi.n	80121f6 <tcp_receive+0x546>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012222:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012226:	4619      	mov	r1, r3
 8012228:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801222a:	f7fc fd9a 	bl	800ed62 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012232:	4a0a      	ldr	r2, [pc, #40]	; (801225c <tcp_receive+0x5ac>)
 8012234:	6013      	str	r3, [r2, #0]
 8012236:	4b0a      	ldr	r3, [pc, #40]	; (8012260 <tcp_receive+0x5b0>)
 8012238:	691b      	ldr	r3, [r3, #16]
 801223a:	4a08      	ldr	r2, [pc, #32]	; (801225c <tcp_receive+0x5ac>)
 801223c:	6812      	ldr	r2, [r2, #0]
 801223e:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012240:	e01e      	b.n	8012280 <tcp_receive+0x5d0>
 8012242:	bf00      	nop
 8012244:	0801a7bc 	.word	0x0801a7bc
 8012248:	0801a7c4 	.word	0x0801a7c4
 801224c:	200077f8 	.word	0x200077f8
 8012250:	200077f4 	.word	0x200077f4
 8012254:	200077b4 	.word	0x200077b4
 8012258:	200077fa 	.word	0x200077fa
 801225c:	200077f0 	.word	0x200077f0
 8012260:	200077cc 	.word	0x200077cc
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012264:	4b83      	ldr	r3, [pc, #524]	; (8012474 <tcp_receive+0x7c4>)
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801226c:	1ad3      	subs	r3, r2, r3
 801226e:	2b00      	cmp	r3, #0
 8012270:	da06      	bge.n	8012280 <tcp_receive+0x5d0>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	8b5b      	ldrh	r3, [r3, #26]
 8012276:	f043 0302 	orr.w	r3, r3, #2
 801227a:	b29a      	uxth	r2, r3
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012280:	4b7c      	ldr	r3, [pc, #496]	; (8012474 <tcp_receive+0x7c4>)
 8012282:	681a      	ldr	r2, [r3, #0]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012288:	1ad3      	subs	r3, r2, r3
 801228a:	2b00      	cmp	r3, #0
 801228c:	f2c0 83bd 	blt.w	8012a0a <tcp_receive+0xd5a>
 8012290:	4b78      	ldr	r3, [pc, #480]	; (8012474 <tcp_receive+0x7c4>)
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012298:	6879      	ldr	r1, [r7, #4]
 801229a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801229c:	440b      	add	r3, r1
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	3301      	adds	r3, #1
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	f300 83b1 	bgt.w	8012a0a <tcp_receive+0xd5a>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122ac:	4b71      	ldr	r3, [pc, #452]	; (8012474 <tcp_receive+0x7c4>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	f040 8242 	bne.w	801273a <tcp_receive+0xa8a>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80122b6:	4b70      	ldr	r3, [pc, #448]	; (8012478 <tcp_receive+0x7c8>)
 80122b8:	891c      	ldrh	r4, [r3, #8]
 80122ba:	4b6f      	ldr	r3, [pc, #444]	; (8012478 <tcp_receive+0x7c8>)
 80122bc:	691b      	ldr	r3, [r3, #16]
 80122be:	899b      	ldrh	r3, [r3, #12]
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fb fdc2 	bl	800de4c <lwip_htons>
 80122c8:	4603      	mov	r3, r0
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	f003 0303 	and.w	r3, r3, #3
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d001      	beq.n	80122d8 <tcp_receive+0x628>
 80122d4:	2301      	movs	r3, #1
 80122d6:	e000      	b.n	80122da <tcp_receive+0x62a>
 80122d8:	2300      	movs	r3, #0
 80122da:	4423      	add	r3, r4
 80122dc:	b29a      	uxth	r2, r3
 80122de:	4b67      	ldr	r3, [pc, #412]	; (801247c <tcp_receive+0x7cc>)
 80122e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80122e6:	4b65      	ldr	r3, [pc, #404]	; (801247c <tcp_receive+0x7cc>)
 80122e8:	881b      	ldrh	r3, [r3, #0]
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d261      	bcs.n	80123b2 <tcp_receive+0x702>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80122ee:	4b62      	ldr	r3, [pc, #392]	; (8012478 <tcp_receive+0x7c8>)
 80122f0:	691b      	ldr	r3, [r3, #16]
 80122f2:	899b      	ldrh	r3, [r3, #12]
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fb fda8 	bl	800de4c <lwip_htons>
 80122fc:	4603      	mov	r3, r0
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	f003 0301 	and.w	r3, r3, #1
 8012304:	2b00      	cmp	r3, #0
 8012306:	d01f      	beq.n	8012348 <tcp_receive+0x698>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012308:	4b5b      	ldr	r3, [pc, #364]	; (8012478 <tcp_receive+0x7c8>)
 801230a:	691b      	ldr	r3, [r3, #16]
 801230c:	899b      	ldrh	r3, [r3, #12]
 801230e:	b29b      	uxth	r3, r3
 8012310:	b21b      	sxth	r3, r3
 8012312:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012316:	b21c      	sxth	r4, r3
 8012318:	4b57      	ldr	r3, [pc, #348]	; (8012478 <tcp_receive+0x7c8>)
 801231a:	691b      	ldr	r3, [r3, #16]
 801231c:	899b      	ldrh	r3, [r3, #12]
 801231e:	b29b      	uxth	r3, r3
 8012320:	4618      	mov	r0, r3
 8012322:	f7fb fd93 	bl	800de4c <lwip_htons>
 8012326:	4603      	mov	r3, r0
 8012328:	b2db      	uxtb	r3, r3
 801232a:	b29b      	uxth	r3, r3
 801232c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012330:	b29b      	uxth	r3, r3
 8012332:	4618      	mov	r0, r3
 8012334:	f7fb fd8a 	bl	800de4c <lwip_htons>
 8012338:	4603      	mov	r3, r0
 801233a:	b21b      	sxth	r3, r3
 801233c:	4323      	orrs	r3, r4
 801233e:	b21a      	sxth	r2, r3
 8012340:	4b4d      	ldr	r3, [pc, #308]	; (8012478 <tcp_receive+0x7c8>)
 8012342:	691b      	ldr	r3, [r3, #16]
 8012344:	b292      	uxth	r2, r2
 8012346:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801234c:	4b4a      	ldr	r3, [pc, #296]	; (8012478 <tcp_receive+0x7c8>)
 801234e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012350:	4b49      	ldr	r3, [pc, #292]	; (8012478 <tcp_receive+0x7c8>)
 8012352:	691b      	ldr	r3, [r3, #16]
 8012354:	899b      	ldrh	r3, [r3, #12]
 8012356:	b29b      	uxth	r3, r3
 8012358:	4618      	mov	r0, r3
 801235a:	f7fb fd77 	bl	800de4c <lwip_htons>
 801235e:	4603      	mov	r3, r0
 8012360:	b2db      	uxtb	r3, r3
 8012362:	f003 0302 	and.w	r3, r3, #2
 8012366:	2b00      	cmp	r3, #0
 8012368:	d005      	beq.n	8012376 <tcp_receive+0x6c6>
            inseg.len -= 1;
 801236a:	4b43      	ldr	r3, [pc, #268]	; (8012478 <tcp_receive+0x7c8>)
 801236c:	891b      	ldrh	r3, [r3, #8]
 801236e:	3b01      	subs	r3, #1
 8012370:	b29a      	uxth	r2, r3
 8012372:	4b41      	ldr	r3, [pc, #260]	; (8012478 <tcp_receive+0x7c8>)
 8012374:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012376:	4b40      	ldr	r3, [pc, #256]	; (8012478 <tcp_receive+0x7c8>)
 8012378:	685b      	ldr	r3, [r3, #4]
 801237a:	4a3f      	ldr	r2, [pc, #252]	; (8012478 <tcp_receive+0x7c8>)
 801237c:	8912      	ldrh	r2, [r2, #8]
 801237e:	4611      	mov	r1, r2
 8012380:	4618      	mov	r0, r3
 8012382:	f7fc fc28 	bl	800ebd6 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012386:	4b3c      	ldr	r3, [pc, #240]	; (8012478 <tcp_receive+0x7c8>)
 8012388:	891c      	ldrh	r4, [r3, #8]
 801238a:	4b3b      	ldr	r3, [pc, #236]	; (8012478 <tcp_receive+0x7c8>)
 801238c:	691b      	ldr	r3, [r3, #16]
 801238e:	899b      	ldrh	r3, [r3, #12]
 8012390:	b29b      	uxth	r3, r3
 8012392:	4618      	mov	r0, r3
 8012394:	f7fb fd5a 	bl	800de4c <lwip_htons>
 8012398:	4603      	mov	r3, r0
 801239a:	b2db      	uxtb	r3, r3
 801239c:	f003 0303 	and.w	r3, r3, #3
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <tcp_receive+0x6f8>
 80123a4:	2301      	movs	r3, #1
 80123a6:	e000      	b.n	80123aa <tcp_receive+0x6fa>
 80123a8:	2300      	movs	r3, #0
 80123aa:	4423      	add	r3, r4
 80123ac:	b29a      	uxth	r2, r3
 80123ae:	4b33      	ldr	r3, [pc, #204]	; (801247c <tcp_receive+0x7cc>)
 80123b0:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f000 80cf 	beq.w	801255a <tcp_receive+0x8aa>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80123bc:	4b2e      	ldr	r3, [pc, #184]	; (8012478 <tcp_receive+0x7c8>)
 80123be:	691b      	ldr	r3, [r3, #16]
 80123c0:	899b      	ldrh	r3, [r3, #12]
 80123c2:	b29b      	uxth	r3, r3
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7fb fd41 	bl	800de4c <lwip_htons>
 80123ca:	4603      	mov	r3, r0
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	f003 0301 	and.w	r3, r3, #1
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d010      	beq.n	80123f8 <tcp_receive+0x748>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80123d6:	e00a      	b.n	80123ee <tcp_receive+0x73e>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123dc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80123e8:	68f8      	ldr	r0, [r7, #12]
 80123ea:	f7fd fedd 	bl	80101a8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d1f0      	bne.n	80123d8 <tcp_receive+0x728>
 80123f6:	e0b0      	b.n	801255a <tcp_receive+0x8aa>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80123fe:	e04c      	b.n	801249a <tcp_receive+0x7ea>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012402:	691b      	ldr	r3, [r3, #16]
 8012404:	899b      	ldrh	r3, [r3, #12]
 8012406:	b29b      	uxth	r3, r3
 8012408:	4618      	mov	r0, r3
 801240a:	f7fb fd1f 	bl	800de4c <lwip_htons>
 801240e:	4603      	mov	r3, r0
 8012410:	b2db      	uxtb	r3, r3
 8012412:	f003 0301 	and.w	r3, r3, #1
 8012416:	2b00      	cmp	r3, #0
 8012418:	d037      	beq.n	801248a <tcp_receive+0x7da>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801241a:	4b17      	ldr	r3, [pc, #92]	; (8012478 <tcp_receive+0x7c8>)
 801241c:	691b      	ldr	r3, [r3, #16]
 801241e:	899b      	ldrh	r3, [r3, #12]
 8012420:	b29b      	uxth	r3, r3
 8012422:	4618      	mov	r0, r3
 8012424:	f7fb fd12 	bl	800de4c <lwip_htons>
 8012428:	4603      	mov	r3, r0
 801242a:	b2db      	uxtb	r3, r3
 801242c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012430:	2b00      	cmp	r3, #0
 8012432:	d12a      	bne.n	801248a <tcp_receive+0x7da>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012434:	4b10      	ldr	r3, [pc, #64]	; (8012478 <tcp_receive+0x7c8>)
 8012436:	691b      	ldr	r3, [r3, #16]
 8012438:	899b      	ldrh	r3, [r3, #12]
 801243a:	b29c      	uxth	r4, r3
 801243c:	2001      	movs	r0, #1
 801243e:	f7fb fd05 	bl	800de4c <lwip_htons>
 8012442:	4603      	mov	r3, r0
 8012444:	461a      	mov	r2, r3
 8012446:	4b0c      	ldr	r3, [pc, #48]	; (8012478 <tcp_receive+0x7c8>)
 8012448:	691b      	ldr	r3, [r3, #16]
 801244a:	4322      	orrs	r2, r4
 801244c:	b292      	uxth	r2, r2
 801244e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012450:	4b09      	ldr	r3, [pc, #36]	; (8012478 <tcp_receive+0x7c8>)
 8012452:	891c      	ldrh	r4, [r3, #8]
 8012454:	4b08      	ldr	r3, [pc, #32]	; (8012478 <tcp_receive+0x7c8>)
 8012456:	691b      	ldr	r3, [r3, #16]
 8012458:	899b      	ldrh	r3, [r3, #12]
 801245a:	b29b      	uxth	r3, r3
 801245c:	4618      	mov	r0, r3
 801245e:	f7fb fcf5 	bl	800de4c <lwip_htons>
 8012462:	4603      	mov	r3, r0
 8012464:	b2db      	uxtb	r3, r3
 8012466:	f003 0303 	and.w	r3, r3, #3
 801246a:	2b00      	cmp	r3, #0
 801246c:	d008      	beq.n	8012480 <tcp_receive+0x7d0>
 801246e:	2301      	movs	r3, #1
 8012470:	e007      	b.n	8012482 <tcp_receive+0x7d2>
 8012472:	bf00      	nop
 8012474:	200077f0 	.word	0x200077f0
 8012478:	200077cc 	.word	0x200077cc
 801247c:	200077fa 	.word	0x200077fa
 8012480:	2300      	movs	r3, #0
 8012482:	4423      	add	r3, r4
 8012484:	b29a      	uxth	r2, r3
 8012486:	4b7e      	ldr	r3, [pc, #504]	; (8012680 <tcp_receive+0x9d0>)
 8012488:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801248a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801248c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801248e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012494:	6938      	ldr	r0, [r7, #16]
 8012496:	f7fd fe87 	bl	80101a8 <tcp_seg_free>
            while (next &&
 801249a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00e      	beq.n	80124be <tcp_receive+0x80e>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80124a0:	4b77      	ldr	r3, [pc, #476]	; (8012680 <tcp_receive+0x9d0>)
 80124a2:	881b      	ldrh	r3, [r3, #0]
 80124a4:	461a      	mov	r2, r3
 80124a6:	4b77      	ldr	r3, [pc, #476]	; (8012684 <tcp_receive+0x9d4>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	441a      	add	r2, r3
 80124ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ae:	691b      	ldr	r3, [r3, #16]
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80124b4:	8909      	ldrh	r1, [r1, #8]
 80124b6:	440b      	add	r3, r1
 80124b8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	daa0      	bge.n	8012400 <tcp_receive+0x750>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80124be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d047      	beq.n	8012554 <tcp_receive+0x8a4>
                TCP_SEQ_GT(seqno + tcplen,
 80124c4:	4b6e      	ldr	r3, [pc, #440]	; (8012680 <tcp_receive+0x9d0>)
 80124c6:	881b      	ldrh	r3, [r3, #0]
 80124c8:	461a      	mov	r2, r3
 80124ca:	4b6e      	ldr	r3, [pc, #440]	; (8012684 <tcp_receive+0x9d4>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	441a      	add	r2, r3
 80124d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124d2:	691b      	ldr	r3, [r3, #16]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80124d8:	2b00      	cmp	r3, #0
 80124da:	dd3b      	ble.n	8012554 <tcp_receive+0x8a4>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80124dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124de:	691b      	ldr	r3, [r3, #16]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	4b67      	ldr	r3, [pc, #412]	; (8012684 <tcp_receive+0x9d4>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	1ad3      	subs	r3, r2, r3
 80124ec:	b29a      	uxth	r2, r3
 80124ee:	4b66      	ldr	r3, [pc, #408]	; (8012688 <tcp_receive+0x9d8>)
 80124f0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80124f2:	4b65      	ldr	r3, [pc, #404]	; (8012688 <tcp_receive+0x9d8>)
 80124f4:	691b      	ldr	r3, [r3, #16]
 80124f6:	899b      	ldrh	r3, [r3, #12]
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fb fca6 	bl	800de4c <lwip_htons>
 8012500:	4603      	mov	r3, r0
 8012502:	b2db      	uxtb	r3, r3
 8012504:	f003 0302 	and.w	r3, r3, #2
 8012508:	2b00      	cmp	r3, #0
 801250a:	d005      	beq.n	8012518 <tcp_receive+0x868>
                inseg.len -= 1;
 801250c:	4b5e      	ldr	r3, [pc, #376]	; (8012688 <tcp_receive+0x9d8>)
 801250e:	891b      	ldrh	r3, [r3, #8]
 8012510:	3b01      	subs	r3, #1
 8012512:	b29a      	uxth	r2, r3
 8012514:	4b5c      	ldr	r3, [pc, #368]	; (8012688 <tcp_receive+0x9d8>)
 8012516:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012518:	4b5b      	ldr	r3, [pc, #364]	; (8012688 <tcp_receive+0x9d8>)
 801251a:	685b      	ldr	r3, [r3, #4]
 801251c:	4a5a      	ldr	r2, [pc, #360]	; (8012688 <tcp_receive+0x9d8>)
 801251e:	8912      	ldrh	r2, [r2, #8]
 8012520:	4611      	mov	r1, r2
 8012522:	4618      	mov	r0, r3
 8012524:	f7fc fb57 	bl	800ebd6 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012528:	4b57      	ldr	r3, [pc, #348]	; (8012688 <tcp_receive+0x9d8>)
 801252a:	891c      	ldrh	r4, [r3, #8]
 801252c:	4b56      	ldr	r3, [pc, #344]	; (8012688 <tcp_receive+0x9d8>)
 801252e:	691b      	ldr	r3, [r3, #16]
 8012530:	899b      	ldrh	r3, [r3, #12]
 8012532:	b29b      	uxth	r3, r3
 8012534:	4618      	mov	r0, r3
 8012536:	f7fb fc89 	bl	800de4c <lwip_htons>
 801253a:	4603      	mov	r3, r0
 801253c:	b2db      	uxtb	r3, r3
 801253e:	f003 0303 	and.w	r3, r3, #3
 8012542:	2b00      	cmp	r3, #0
 8012544:	d001      	beq.n	801254a <tcp_receive+0x89a>
 8012546:	2301      	movs	r3, #1
 8012548:	e000      	b.n	801254c <tcp_receive+0x89c>
 801254a:	2300      	movs	r3, #0
 801254c:	4423      	add	r3, r4
 801254e:	b29a      	uxth	r2, r3
 8012550:	4b4b      	ldr	r3, [pc, #300]	; (8012680 <tcp_receive+0x9d0>)
 8012552:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012558:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801255a:	4b49      	ldr	r3, [pc, #292]	; (8012680 <tcp_receive+0x9d0>)
 801255c:	881b      	ldrh	r3, [r3, #0]
 801255e:	461a      	mov	r2, r3
 8012560:	4b48      	ldr	r3, [pc, #288]	; (8012684 <tcp_receive+0x9d4>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	441a      	add	r2, r3
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801256e:	4b44      	ldr	r3, [pc, #272]	; (8012680 <tcp_receive+0x9d0>)
 8012570:	881b      	ldrh	r3, [r3, #0]
 8012572:	1ad3      	subs	r3, r2, r3
 8012574:	b29a      	uxth	r2, r3
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f7fd f9c6 	bl	800f90c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012580:	4b41      	ldr	r3, [pc, #260]	; (8012688 <tcp_receive+0x9d8>)
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	891b      	ldrh	r3, [r3, #8]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d006      	beq.n	8012598 <tcp_receive+0x8e8>
          recv_data = inseg.p;
 801258a:	4b3f      	ldr	r3, [pc, #252]	; (8012688 <tcp_receive+0x9d8>)
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	4a3f      	ldr	r2, [pc, #252]	; (801268c <tcp_receive+0x9dc>)
 8012590:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012592:	4b3d      	ldr	r3, [pc, #244]	; (8012688 <tcp_receive+0x9d8>)
 8012594:	2200      	movs	r2, #0
 8012596:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012598:	4b3b      	ldr	r3, [pc, #236]	; (8012688 <tcp_receive+0x9d8>)
 801259a:	691b      	ldr	r3, [r3, #16]
 801259c:	899b      	ldrh	r3, [r3, #12]
 801259e:	b29b      	uxth	r3, r3
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fb fc53 	bl	800de4c <lwip_htons>
 80125a6:	4603      	mov	r3, r0
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	f003 0301 	and.w	r3, r3, #1
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	f000 8099 	beq.w	80126e6 <tcp_receive+0xa36>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80125b4:	4b36      	ldr	r3, [pc, #216]	; (8012690 <tcp_receive+0x9e0>)
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	f043 0320 	orr.w	r3, r3, #32
 80125bc:	b2da      	uxtb	r2, r3
 80125be:	4b34      	ldr	r3, [pc, #208]	; (8012690 <tcp_receive+0x9e0>)
 80125c0:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80125c2:	e090      	b.n	80126e6 <tcp_receive+0xa36>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125c8:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80125ce:	691b      	ldr	r3, [r3, #16]
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	4a2c      	ldr	r2, [pc, #176]	; (8012684 <tcp_receive+0x9d4>)
 80125d4:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	891b      	ldrh	r3, [r3, #8]
 80125da:	461c      	mov	r4, r3
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	691b      	ldr	r3, [r3, #16]
 80125e0:	899b      	ldrh	r3, [r3, #12]
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7fb fc31 	bl	800de4c <lwip_htons>
 80125ea:	4603      	mov	r3, r0
 80125ec:	b2db      	uxtb	r3, r3
 80125ee:	f003 0303 	and.w	r3, r3, #3
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d001      	beq.n	80125fa <tcp_receive+0x94a>
 80125f6:	2301      	movs	r3, #1
 80125f8:	e000      	b.n	80125fc <tcp_receive+0x94c>
 80125fa:	2300      	movs	r3, #0
 80125fc:	191a      	adds	r2, r3, r4
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012602:	441a      	add	r2, r3
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	691b      	ldr	r3, [r3, #16]
 801260c:	899b      	ldrh	r3, [r3, #12]
 801260e:	b29b      	uxth	r3, r3
 8012610:	4618      	mov	r0, r3
 8012612:	f7fb fc1b 	bl	800de4c <lwip_htons>
 8012616:	4603      	mov	r3, r0
 8012618:	b2db      	uxtb	r3, r3
 801261a:	f003 0303 	and.w	r3, r3, #3
 801261e:	2b00      	cmp	r3, #0
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	891b      	ldrh	r3, [r3, #8]
 8012624:	461c      	mov	r4, r3
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	691b      	ldr	r3, [r3, #16]
 801262a:	899b      	ldrh	r3, [r3, #12]
 801262c:	b29b      	uxth	r3, r3
 801262e:	4618      	mov	r0, r3
 8012630:	f7fb fc0c 	bl	800de4c <lwip_htons>
 8012634:	4603      	mov	r3, r0
 8012636:	b2db      	uxtb	r3, r3
 8012638:	f003 0303 	and.w	r3, r3, #3
 801263c:	2b00      	cmp	r3, #0
 801263e:	d001      	beq.n	8012644 <tcp_receive+0x994>
 8012640:	2301      	movs	r3, #1
 8012642:	e000      	b.n	8012646 <tcp_receive+0x996>
 8012644:	2300      	movs	r3, #0
 8012646:	1919      	adds	r1, r3, r4
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801264c:	b28b      	uxth	r3, r1
 801264e:	1ad3      	subs	r3, r2, r3
 8012650:	b29a      	uxth	r2, r3
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f7fd f958 	bl	800f90c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	891b      	ldrh	r3, [r3, #8]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d01d      	beq.n	80126a2 <tcp_receive+0x9f2>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012666:	4b09      	ldr	r3, [pc, #36]	; (801268c <tcp_receive+0x9dc>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d012      	beq.n	8012694 <tcp_receive+0x9e4>
              pbuf_cat(recv_data, cseg->p);
 801266e:	4b07      	ldr	r3, [pc, #28]	; (801268c <tcp_receive+0x9dc>)
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	4619      	mov	r1, r3
 8012678:	4610      	mov	r0, r2
 801267a:	f7fc fc5c 	bl	800ef36 <pbuf_cat>
 801267e:	e00d      	b.n	801269c <tcp_receive+0x9ec>
 8012680:	200077fa 	.word	0x200077fa
 8012684:	200077f0 	.word	0x200077f0
 8012688:	200077cc 	.word	0x200077cc
 801268c:	20007800 	.word	0x20007800
 8012690:	200077fd 	.word	0x200077fd
            } else {
              recv_data = cseg->p;
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	4a70      	ldr	r2, [pc, #448]	; (801285c <tcp_receive+0xbac>)
 801269a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	2200      	movs	r2, #0
 80126a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	691b      	ldr	r3, [r3, #16]
 80126a6:	899b      	ldrh	r3, [r3, #12]
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	4618      	mov	r0, r3
 80126ac:	f7fb fbce 	bl	800de4c <lwip_htons>
 80126b0:	4603      	mov	r3, r0
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	f003 0301 	and.w	r3, r3, #1
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d00d      	beq.n	80126d8 <tcp_receive+0xa28>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80126bc:	4b68      	ldr	r3, [pc, #416]	; (8012860 <tcp_receive+0xbb0>)
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	f043 0320 	orr.w	r3, r3, #32
 80126c4:	b2da      	uxtb	r2, r3
 80126c6:	4b66      	ldr	r3, [pc, #408]	; (8012860 <tcp_receive+0xbb0>)
 80126c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	7d1b      	ldrb	r3, [r3, #20]
 80126ce:	2b04      	cmp	r3, #4
 80126d0:	d102      	bne.n	80126d8 <tcp_receive+0xa28>
              pcb->state = CLOSE_WAIT;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2207      	movs	r2, #7
 80126d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	681a      	ldr	r2, [r3, #0]
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80126e0:	68b8      	ldr	r0, [r7, #8]
 80126e2:	f7fd fd61 	bl	80101a8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d008      	beq.n	8012700 <tcp_receive+0xa50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126f2:	691b      	ldr	r3, [r3, #16]
 80126f4:	685a      	ldr	r2, [r3, #4]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80126fa:	429a      	cmp	r2, r3
 80126fc:	f43f af62 	beq.w	80125c4 <tcp_receive+0x914>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	8b5b      	ldrh	r3, [r3, #26]
 8012704:	f003 0301 	and.w	r3, r3, #1
 8012708:	2b00      	cmp	r3, #0
 801270a:	d00e      	beq.n	801272a <tcp_receive+0xa7a>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	8b5b      	ldrh	r3, [r3, #26]
 8012710:	f023 0301 	bic.w	r3, r3, #1
 8012714:	b29a      	uxth	r2, r3
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	835a      	strh	r2, [r3, #26]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	8b5b      	ldrh	r3, [r3, #26]
 801271e:	f043 0302 	orr.w	r3, r3, #2
 8012722:	b29a      	uxth	r2, r3
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012728:	e173      	b.n	8012a12 <tcp_receive+0xd62>
        tcp_ack(pcb);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	8b5b      	ldrh	r3, [r3, #26]
 801272e:	f043 0301 	orr.w	r3, r3, #1
 8012732:	b29a      	uxth	r2, r3
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012738:	e16b      	b.n	8012a12 <tcp_receive+0xd62>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801273e:	2b00      	cmp	r3, #0
 8012740:	d106      	bne.n	8012750 <tcp_receive+0xaa0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012742:	4848      	ldr	r0, [pc, #288]	; (8012864 <tcp_receive+0xbb4>)
 8012744:	f7fd fd59 	bl	80101fa <tcp_seg_copy>
 8012748:	4602      	mov	r2, r0
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	675a      	str	r2, [r3, #116]	; 0x74
 801274e:	e158      	b.n	8012a02 <tcp_receive+0xd52>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012750:	2300      	movs	r3, #0
 8012752:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012758:	63bb      	str	r3, [r7, #56]	; 0x38
 801275a:	e142      	b.n	80129e2 <tcp_receive+0xd32>
            if (seqno == next->tcphdr->seqno) {
 801275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801275e:	691b      	ldr	r3, [r3, #16]
 8012760:	685a      	ldr	r2, [r3, #4]
 8012762:	4b41      	ldr	r3, [pc, #260]	; (8012868 <tcp_receive+0xbb8>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	429a      	cmp	r2, r3
 8012768:	d11d      	bne.n	80127a6 <tcp_receive+0xaf6>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801276a:	4b3e      	ldr	r3, [pc, #248]	; (8012864 <tcp_receive+0xbb4>)
 801276c:	891a      	ldrh	r2, [r3, #8]
 801276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012770:	891b      	ldrh	r3, [r3, #8]
 8012772:	429a      	cmp	r2, r3
 8012774:	f240 813a 	bls.w	80129ec <tcp_receive+0xd3c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012778:	483a      	ldr	r0, [pc, #232]	; (8012864 <tcp_receive+0xbb4>)
 801277a:	f7fd fd3e 	bl	80101fa <tcp_seg_copy>
 801277e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	2b00      	cmp	r3, #0
 8012784:	f000 8134 	beq.w	80129f0 <tcp_receive+0xd40>
                  if (prev != NULL) {
 8012788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801278a:	2b00      	cmp	r3, #0
 801278c:	d003      	beq.n	8012796 <tcp_receive+0xae6>
                    prev->next = cseg;
 801278e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012790:	697a      	ldr	r2, [r7, #20]
 8012792:	601a      	str	r2, [r3, #0]
 8012794:	e002      	b.n	801279c <tcp_receive+0xaec>
                  } else {
                    pcb->ooseq = cseg;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	697a      	ldr	r2, [r7, #20]
 801279a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801279c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801279e:	6978      	ldr	r0, [r7, #20]
 80127a0:	f7ff f9b8 	bl	8011b14 <tcp_oos_insert_segment>
                }
                break;
 80127a4:	e124      	b.n	80129f0 <tcp_receive+0xd40>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80127a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d117      	bne.n	80127dc <tcp_receive+0xb2c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80127ac:	4b2e      	ldr	r3, [pc, #184]	; (8012868 <tcp_receive+0xbb8>)
 80127ae:	681a      	ldr	r2, [r3, #0]
 80127b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b2:	691b      	ldr	r3, [r3, #16]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	1ad3      	subs	r3, r2, r3
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	da57      	bge.n	801286c <tcp_receive+0xbbc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80127bc:	4829      	ldr	r0, [pc, #164]	; (8012864 <tcp_receive+0xbb4>)
 80127be:	f7fd fd1c 	bl	80101fa <tcp_seg_copy>
 80127c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80127c4:	69bb      	ldr	r3, [r7, #24]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	f000 8114 	beq.w	80129f4 <tcp_receive+0xd44>
                    pcb->ooseq = cseg;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	69ba      	ldr	r2, [r7, #24]
 80127d0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80127d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80127d4:	69b8      	ldr	r0, [r7, #24]
 80127d6:	f7ff f99d 	bl	8011b14 <tcp_oos_insert_segment>
                  }
                  break;
 80127da:	e10b      	b.n	80129f4 <tcp_receive+0xd44>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80127dc:	4b22      	ldr	r3, [pc, #136]	; (8012868 <tcp_receive+0xbb8>)
 80127de:	681a      	ldr	r2, [r3, #0]
 80127e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127e2:	691b      	ldr	r3, [r3, #16]
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	1ad3      	subs	r3, r2, r3
 80127e8:	3b01      	subs	r3, #1
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	db3e      	blt.n	801286c <tcp_receive+0xbbc>
 80127ee:	4b1e      	ldr	r3, [pc, #120]	; (8012868 <tcp_receive+0xbb8>)
 80127f0:	681a      	ldr	r2, [r3, #0]
 80127f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f4:	691b      	ldr	r3, [r3, #16]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	1ad3      	subs	r3, r2, r3
 80127fa:	3301      	adds	r3, #1
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	dc35      	bgt.n	801286c <tcp_receive+0xbbc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012800:	4818      	ldr	r0, [pc, #96]	; (8012864 <tcp_receive+0xbb4>)
 8012802:	f7fd fcfa 	bl	80101fa <tcp_seg_copy>
 8012806:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	2b00      	cmp	r3, #0
 801280c:	f000 80f4 	beq.w	80129f8 <tcp_receive+0xd48>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012818:	8912      	ldrh	r2, [r2, #8]
 801281a:	441a      	add	r2, r3
 801281c:	4b12      	ldr	r3, [pc, #72]	; (8012868 <tcp_receive+0xbb8>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	1ad3      	subs	r3, r2, r3
 8012822:	2b00      	cmp	r3, #0
 8012824:	dd12      	ble.n	801284c <tcp_receive+0xb9c>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012826:	4b10      	ldr	r3, [pc, #64]	; (8012868 <tcp_receive+0xbb8>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	b29a      	uxth	r2, r3
 801282c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801282e:	691b      	ldr	r3, [r3, #16]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	b29b      	uxth	r3, r3
 8012834:	1ad3      	subs	r3, r2, r3
 8012836:	b29a      	uxth	r2, r3
 8012838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801283a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801283c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801283e:	685a      	ldr	r2, [r3, #4]
 8012840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012842:	891b      	ldrh	r3, [r3, #8]
 8012844:	4619      	mov	r1, r3
 8012846:	4610      	mov	r0, r2
 8012848:	f7fc f9c5 	bl	800ebd6 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801284e:	69fa      	ldr	r2, [r7, #28]
 8012850:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012854:	69f8      	ldr	r0, [r7, #28]
 8012856:	f7ff f95d 	bl	8011b14 <tcp_oos_insert_segment>
                  }
                  break;
 801285a:	e0cd      	b.n	80129f8 <tcp_receive+0xd48>
 801285c:	20007800 	.word	0x20007800
 8012860:	200077fd 	.word	0x200077fd
 8012864:	200077cc 	.word	0x200077cc
 8012868:	200077f0 	.word	0x200077f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	2b00      	cmp	r3, #0
 8012876:	f040 80b1 	bne.w	80129dc <tcp_receive+0xd2c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801287a:	4b75      	ldr	r3, [pc, #468]	; (8012a50 <tcp_receive+0xda0>)
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012880:	691b      	ldr	r3, [r3, #16]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012886:	2b00      	cmp	r3, #0
 8012888:	f340 80a8 	ble.w	80129dc <tcp_receive+0xd2c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801288e:	691b      	ldr	r3, [r3, #16]
 8012890:	899b      	ldrh	r3, [r3, #12]
 8012892:	b29b      	uxth	r3, r3
 8012894:	4618      	mov	r0, r3
 8012896:	f7fb fad9 	bl	800de4c <lwip_htons>
 801289a:	4603      	mov	r3, r0
 801289c:	b2db      	uxtb	r3, r3
 801289e:	f003 0301 	and.w	r3, r3, #1
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	f040 80aa 	bne.w	80129fc <tcp_receive+0xd4c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80128a8:	486a      	ldr	r0, [pc, #424]	; (8012a54 <tcp_receive+0xda4>)
 80128aa:	f7fd fca6 	bl	80101fa <tcp_seg_copy>
 80128ae:	4602      	mov	r2, r0
 80128b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80128b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	f000 80a1 	beq.w	8012a00 <tcp_receive+0xd50>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80128be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c0:	691b      	ldr	r3, [r3, #16]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128c6:	8912      	ldrh	r2, [r2, #8]
 80128c8:	441a      	add	r2, r3
 80128ca:	4b61      	ldr	r3, [pc, #388]	; (8012a50 <tcp_receive+0xda0>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	1ad3      	subs	r3, r2, r3
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	dd12      	ble.n	80128fa <tcp_receive+0xc4a>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80128d4:	4b5e      	ldr	r3, [pc, #376]	; (8012a50 <tcp_receive+0xda0>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	b29a      	uxth	r2, r3
 80128da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128dc:	691b      	ldr	r3, [r3, #16]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	1ad3      	subs	r3, r2, r3
 80128e4:	b29a      	uxth	r2, r3
 80128e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80128ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ec:	685a      	ldr	r2, [r3, #4]
 80128ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f0:	891b      	ldrh	r3, [r3, #8]
 80128f2:	4619      	mov	r1, r3
 80128f4:	4610      	mov	r0, r2
 80128f6:	f7fc f96e 	bl	800ebd6 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80128fa:	4b57      	ldr	r3, [pc, #348]	; (8012a58 <tcp_receive+0xda8>)
 80128fc:	881b      	ldrh	r3, [r3, #0]
 80128fe:	461a      	mov	r2, r3
 8012900:	4b53      	ldr	r3, [pc, #332]	; (8012a50 <tcp_receive+0xda0>)
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	441a      	add	r2, r3
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801290a:	6879      	ldr	r1, [r7, #4]
 801290c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801290e:	440b      	add	r3, r1
 8012910:	1ad3      	subs	r3, r2, r3
 8012912:	2b00      	cmp	r3, #0
 8012914:	dd74      	ble.n	8012a00 <tcp_receive+0xd50>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	691b      	ldr	r3, [r3, #16]
 801291c:	899b      	ldrh	r3, [r3, #12]
 801291e:	b29b      	uxth	r3, r3
 8012920:	4618      	mov	r0, r3
 8012922:	f7fb fa93 	bl	800de4c <lwip_htons>
 8012926:	4603      	mov	r3, r0
 8012928:	b2db      	uxtb	r3, r3
 801292a:	f003 0301 	and.w	r3, r3, #1
 801292e:	2b00      	cmp	r3, #0
 8012930:	d022      	beq.n	8012978 <tcp_receive+0xcc8>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	691b      	ldr	r3, [r3, #16]
 8012938:	899b      	ldrh	r3, [r3, #12]
 801293a:	b29b      	uxth	r3, r3
 801293c:	b21b      	sxth	r3, r3
 801293e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012942:	b21c      	sxth	r4, r3
 8012944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	691b      	ldr	r3, [r3, #16]
 801294a:	899b      	ldrh	r3, [r3, #12]
 801294c:	b29b      	uxth	r3, r3
 801294e:	4618      	mov	r0, r3
 8012950:	f7fb fa7c 	bl	800de4c <lwip_htons>
 8012954:	4603      	mov	r3, r0
 8012956:	b2db      	uxtb	r3, r3
 8012958:	b29b      	uxth	r3, r3
 801295a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801295e:	b29b      	uxth	r3, r3
 8012960:	4618      	mov	r0, r3
 8012962:	f7fb fa73 	bl	800de4c <lwip_htons>
 8012966:	4603      	mov	r3, r0
 8012968:	b21b      	sxth	r3, r3
 801296a:	4323      	orrs	r3, r4
 801296c:	b21a      	sxth	r2, r3
 801296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	691b      	ldr	r3, [r3, #16]
 8012974:	b292      	uxth	r2, r2
 8012976:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801297c:	b29a      	uxth	r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012982:	4413      	add	r3, r2
 8012984:	b299      	uxth	r1, r3
 8012986:	4b32      	ldr	r3, [pc, #200]	; (8012a50 <tcp_receive+0xda0>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	b29a      	uxth	r2, r3
 801298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	1a8a      	subs	r2, r1, r2
 8012992:	b292      	uxth	r2, r2
 8012994:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	685a      	ldr	r2, [r3, #4]
 801299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	891b      	ldrh	r3, [r3, #8]
 80129a2:	4619      	mov	r1, r3
 80129a4:	4610      	mov	r0, r2
 80129a6:	f7fc f916 	bl	800ebd6 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80129aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	891c      	ldrh	r4, [r3, #8]
 80129b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	691b      	ldr	r3, [r3, #16]
 80129b6:	899b      	ldrh	r3, [r3, #12]
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fb fa46 	bl	800de4c <lwip_htons>
 80129c0:	4603      	mov	r3, r0
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	f003 0303 	and.w	r3, r3, #3
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d001      	beq.n	80129d0 <tcp_receive+0xd20>
 80129cc:	2301      	movs	r3, #1
 80129ce:	e000      	b.n	80129d2 <tcp_receive+0xd22>
 80129d0:	2300      	movs	r3, #0
 80129d2:	4423      	add	r3, r4
 80129d4:	b29a      	uxth	r2, r3
 80129d6:	4b20      	ldr	r3, [pc, #128]	; (8012a58 <tcp_receive+0xda8>)
 80129d8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80129da:	e011      	b.n	8012a00 <tcp_receive+0xd50>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80129dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80129e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f47f aeb9 	bne.w	801275c <tcp_receive+0xaac>
 80129ea:	e00a      	b.n	8012a02 <tcp_receive+0xd52>
                break;
 80129ec:	bf00      	nop
 80129ee:	e008      	b.n	8012a02 <tcp_receive+0xd52>
                break;
 80129f0:	bf00      	nop
 80129f2:	e006      	b.n	8012a02 <tcp_receive+0xd52>
                  break;
 80129f4:	bf00      	nop
 80129f6:	e004      	b.n	8012a02 <tcp_receive+0xd52>
                  break;
 80129f8:	bf00      	nop
 80129fa:	e002      	b.n	8012a02 <tcp_receive+0xd52>
                  break;
 80129fc:	bf00      	nop
 80129fe:	e000      	b.n	8012a02 <tcp_receive+0xd52>
                break;
 8012a00:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f001 fbdf 	bl	80141c6 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012a08:	e003      	b.n	8012a12 <tcp_receive+0xd62>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f001 fbdb 	bl	80141c6 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012a10:	e01a      	b.n	8012a48 <tcp_receive+0xd98>
 8012a12:	e019      	b.n	8012a48 <tcp_receive+0xd98>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012a14:	4b0e      	ldr	r3, [pc, #56]	; (8012a50 <tcp_receive+0xda0>)
 8012a16:	681a      	ldr	r2, [r3, #0]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a1c:	1ad3      	subs	r3, r2, r3
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	db0a      	blt.n	8012a38 <tcp_receive+0xd88>
 8012a22:	4b0b      	ldr	r3, [pc, #44]	; (8012a50 <tcp_receive+0xda0>)
 8012a24:	681a      	ldr	r2, [r3, #0]
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a2a:	6879      	ldr	r1, [r7, #4]
 8012a2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a2e:	440b      	add	r3, r1
 8012a30:	1ad3      	subs	r3, r2, r3
 8012a32:	3301      	adds	r3, #1
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	dd07      	ble.n	8012a48 <tcp_receive+0xd98>
      tcp_ack_now(pcb);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	8b5b      	ldrh	r3, [r3, #26]
 8012a3c:	f043 0302 	orr.w	r3, r3, #2
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012a46:	e7ff      	b.n	8012a48 <tcp_receive+0xd98>
 8012a48:	bf00      	nop
 8012a4a:	3754      	adds	r7, #84	; 0x54
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd90      	pop	{r4, r7, pc}
 8012a50:	200077f0 	.word	0x200077f0
 8012a54:	200077cc 	.word	0x200077cc
 8012a58:	200077fa 	.word	0x200077fa

08012a5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012a5c:	b480      	push	{r7}
 8012a5e:	b083      	sub	sp, #12
 8012a60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012a62:	4b15      	ldr	r3, [pc, #84]	; (8012ab8 <tcp_get_next_optbyte+0x5c>)
 8012a64:	881b      	ldrh	r3, [r3, #0]
 8012a66:	1c5a      	adds	r2, r3, #1
 8012a68:	b291      	uxth	r1, r2
 8012a6a:	4a13      	ldr	r2, [pc, #76]	; (8012ab8 <tcp_get_next_optbyte+0x5c>)
 8012a6c:	8011      	strh	r1, [r2, #0]
 8012a6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012a70:	4b12      	ldr	r3, [pc, #72]	; (8012abc <tcp_get_next_optbyte+0x60>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d004      	beq.n	8012a82 <tcp_get_next_optbyte+0x26>
 8012a78:	4b11      	ldr	r3, [pc, #68]	; (8012ac0 <tcp_get_next_optbyte+0x64>)
 8012a7a:	881b      	ldrh	r3, [r3, #0]
 8012a7c:	88fa      	ldrh	r2, [r7, #6]
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d208      	bcs.n	8012a94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012a82:	4b10      	ldr	r3, [pc, #64]	; (8012ac4 <tcp_get_next_optbyte+0x68>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	3314      	adds	r3, #20
 8012a88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012a8a:	88fb      	ldrh	r3, [r7, #6]
 8012a8c:	683a      	ldr	r2, [r7, #0]
 8012a8e:	4413      	add	r3, r2
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	e00b      	b.n	8012aac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012a94:	88fb      	ldrh	r3, [r7, #6]
 8012a96:	b2da      	uxtb	r2, r3
 8012a98:	4b09      	ldr	r3, [pc, #36]	; (8012ac0 <tcp_get_next_optbyte+0x64>)
 8012a9a:	881b      	ldrh	r3, [r3, #0]
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	1ad3      	subs	r3, r2, r3
 8012aa0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012aa2:	4b06      	ldr	r3, [pc, #24]	; (8012abc <tcp_get_next_optbyte+0x60>)
 8012aa4:	681a      	ldr	r2, [r3, #0]
 8012aa6:	797b      	ldrb	r3, [r7, #5]
 8012aa8:	4413      	add	r3, r2
 8012aaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	370c      	adds	r7, #12
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab6:	4770      	bx	lr
 8012ab8:	200077ec 	.word	0x200077ec
 8012abc:	200077e8 	.word	0x200077e8
 8012ac0:	200077e6 	.word	0x200077e6
 8012ac4:	200077e0 	.word	0x200077e0

08012ac8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012ad0:	4b2e      	ldr	r3, [pc, #184]	; (8012b8c <tcp_parseopt+0xc4>)
 8012ad2:	881b      	ldrh	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d055      	beq.n	8012b84 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012ad8:	4b2d      	ldr	r3, [pc, #180]	; (8012b90 <tcp_parseopt+0xc8>)
 8012ada:	2200      	movs	r2, #0
 8012adc:	801a      	strh	r2, [r3, #0]
 8012ade:	e045      	b.n	8012b6c <tcp_parseopt+0xa4>
      u8_t opt = tcp_get_next_optbyte();
 8012ae0:	f7ff ffbc 	bl	8012a5c <tcp_get_next_optbyte>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012ae8:	7bfb      	ldrb	r3, [r7, #15]
 8012aea:	2b02      	cmp	r3, #2
 8012aec:	d006      	beq.n	8012afc <tcp_parseopt+0x34>
 8012aee:	2b02      	cmp	r3, #2
 8012af0:	dc2b      	bgt.n	8012b4a <tcp_parseopt+0x82>
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d041      	beq.n	8012b7a <tcp_parseopt+0xb2>
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d127      	bne.n	8012b4a <tcp_parseopt+0x82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012afa:	e037      	b.n	8012b6c <tcp_parseopt+0xa4>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012afc:	f7ff ffae 	bl	8012a5c <tcp_get_next_optbyte>
 8012b00:	4603      	mov	r3, r0
 8012b02:	2b04      	cmp	r3, #4
 8012b04:	d13b      	bne.n	8012b7e <tcp_parseopt+0xb6>
 8012b06:	4b22      	ldr	r3, [pc, #136]	; (8012b90 <tcp_parseopt+0xc8>)
 8012b08:	881b      	ldrh	r3, [r3, #0]
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	4a1f      	ldr	r2, [pc, #124]	; (8012b8c <tcp_parseopt+0xc4>)
 8012b0e:	8812      	ldrh	r2, [r2, #0]
 8012b10:	4293      	cmp	r3, r2
 8012b12:	da34      	bge.n	8012b7e <tcp_parseopt+0xb6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012b14:	f7ff ffa2 	bl	8012a5c <tcp_get_next_optbyte>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	b29b      	uxth	r3, r3
 8012b1c:	021b      	lsls	r3, r3, #8
 8012b1e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012b20:	f7ff ff9c 	bl	8012a5c <tcp_get_next_optbyte>
 8012b24:	4603      	mov	r3, r0
 8012b26:	b29a      	uxth	r2, r3
 8012b28:	89bb      	ldrh	r3, [r7, #12]
 8012b2a:	4313      	orrs	r3, r2
 8012b2c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012b2e:	89bb      	ldrh	r3, [r7, #12]
 8012b30:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012b34:	d804      	bhi.n	8012b40 <tcp_parseopt+0x78>
 8012b36:	89bb      	ldrh	r3, [r7, #12]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d001      	beq.n	8012b40 <tcp_parseopt+0x78>
 8012b3c:	89ba      	ldrh	r2, [r7, #12]
 8012b3e:	e001      	b.n	8012b44 <tcp_parseopt+0x7c>
 8012b40:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012b48:	e010      	b.n	8012b6c <tcp_parseopt+0xa4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012b4a:	f7ff ff87 	bl	8012a5c <tcp_get_next_optbyte>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012b52:	7afb      	ldrb	r3, [r7, #11]
 8012b54:	2b01      	cmp	r3, #1
 8012b56:	d914      	bls.n	8012b82 <tcp_parseopt+0xba>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012b58:	7afb      	ldrb	r3, [r7, #11]
 8012b5a:	b29a      	uxth	r2, r3
 8012b5c:	4b0c      	ldr	r3, [pc, #48]	; (8012b90 <tcp_parseopt+0xc8>)
 8012b5e:	881b      	ldrh	r3, [r3, #0]
 8012b60:	4413      	add	r3, r2
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	3b02      	subs	r3, #2
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	4b09      	ldr	r3, [pc, #36]	; (8012b90 <tcp_parseopt+0xc8>)
 8012b6a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012b6c:	4b08      	ldr	r3, [pc, #32]	; (8012b90 <tcp_parseopt+0xc8>)
 8012b6e:	881a      	ldrh	r2, [r3, #0]
 8012b70:	4b06      	ldr	r3, [pc, #24]	; (8012b8c <tcp_parseopt+0xc4>)
 8012b72:	881b      	ldrh	r3, [r3, #0]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d3b3      	bcc.n	8012ae0 <tcp_parseopt+0x18>
 8012b78:	e004      	b.n	8012b84 <tcp_parseopt+0xbc>
          return;
 8012b7a:	bf00      	nop
 8012b7c:	e002      	b.n	8012b84 <tcp_parseopt+0xbc>
            return;
 8012b7e:	bf00      	nop
 8012b80:	e000      	b.n	8012b84 <tcp_parseopt+0xbc>
            return;
 8012b82:	bf00      	nop
      }
    }
  }
}
 8012b84:	3710      	adds	r7, #16
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
 8012b8a:	bf00      	nop
 8012b8c:	200077e4 	.word	0x200077e4
 8012b90:	200077ec 	.word	0x200077ec

08012b94 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012b94:	b480      	push	{r7}
 8012b96:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012b98:	4b05      	ldr	r3, [pc, #20]	; (8012bb0 <tcp_trigger_input_pcb_close+0x1c>)
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	f043 0310 	orr.w	r3, r3, #16
 8012ba0:	b2da      	uxtb	r2, r3
 8012ba2:	4b03      	ldr	r3, [pc, #12]	; (8012bb0 <tcp_trigger_input_pcb_close+0x1c>)
 8012ba4:	701a      	strb	r2, [r3, #0]
}
 8012ba6:	bf00      	nop
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bae:	4770      	bx	lr
 8012bb0:	200077fd 	.word	0x200077fd

08012bb4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	60f8      	str	r0, [r7, #12]
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d00a      	beq.n	8012bdc <tcp_route+0x28>
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	7a1b      	ldrb	r3, [r3, #8]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d006      	beq.n	8012bdc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	7a1b      	ldrb	r3, [r3, #8]
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7fb fe74 	bl	800e8c0 <netif_get_by_index>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	e003      	b.n	8012be4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f005 f81b 	bl	8017c18 <ip4_route>
 8012be2:	4603      	mov	r3, r0
  }
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3710      	adds	r7, #16
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012bec:	b590      	push	{r4, r7, lr}
 8012bee:	b087      	sub	sp, #28
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	60f8      	str	r0, [r7, #12]
 8012bf4:	60b9      	str	r1, [r7, #8]
 8012bf6:	603b      	str	r3, [r7, #0]
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	71fb      	strb	r3, [r7, #7]
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012bfc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	b2db      	uxtb	r3, r3
 8012c04:	f003 0304 	and.w	r3, r3, #4
 8012c08:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012c0a:	2003      	movs	r0, #3
 8012c0c:	f7fb fbfe 	bl	800e40c <memp_malloc>
 8012c10:	6138      	str	r0, [r7, #16]
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d104      	bne.n	8012c22 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012c18:	68b8      	ldr	r0, [r7, #8]
 8012c1a:	f7fc f90f 	bl	800ee3c <pbuf_free>
    return NULL;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	e060      	b.n	8012ce4 <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012c28:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8012c2a:	693b      	ldr	r3, [r7, #16]
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	68ba      	ldr	r2, [r7, #8]
 8012c34:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	891a      	ldrh	r2, [r3, #8]
 8012c3a:	7dfb      	ldrb	r3, [r7, #23]
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	1ad3      	subs	r3, r2, r3
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012c4c:	2114      	movs	r1, #20
 8012c4e:	68b8      	ldr	r0, [r7, #8]
 8012c50:	f7fc f878 	bl	800ed44 <pbuf_add_header>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d00c      	beq.n	8012c74 <tcp_create_segment+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8012c5a:	4b24      	ldr	r3, [pc, #144]	; (8012cec <tcp_create_segment+0x100>)
 8012c5c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8012c60:	3301      	adds	r3, #1
 8012c62:	b29a      	uxth	r2, r3
 8012c64:	4b21      	ldr	r3, [pc, #132]	; (8012cec <tcp_create_segment+0x100>)
 8012c66:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 8012c6a:	6938      	ldr	r0, [r7, #16]
 8012c6c:	f7fd fa9c 	bl	80101a8 <tcp_seg_free>
    return NULL;
 8012c70:	2300      	movs	r3, #0
 8012c72:	e037      	b.n	8012ce4 <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	685a      	ldr	r2, [r3, #4]
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	8ada      	ldrh	r2, [r3, #22]
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	691c      	ldr	r4, [r3, #16]
 8012c86:	4610      	mov	r0, r2
 8012c88:	f7fb f8e0 	bl	800de4c <lwip_htons>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	8b1a      	ldrh	r2, [r3, #24]
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	691c      	ldr	r4, [r3, #16]
 8012c98:	4610      	mov	r0, r2
 8012c9a:	f7fb f8d7 	bl	800de4c <lwip_htons>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	691c      	ldr	r4, [r3, #16]
 8012ca6:	6838      	ldr	r0, [r7, #0]
 8012ca8:	f7fb f8e5 	bl	800de76 <lwip_htonl>
 8012cac:	4603      	mov	r3, r0
 8012cae:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012cb0:	7dfb      	ldrb	r3, [r7, #23]
 8012cb2:	089b      	lsrs	r3, r3, #2
 8012cb4:	b2db      	uxtb	r3, r3
 8012cb6:	b29b      	uxth	r3, r3
 8012cb8:	3305      	adds	r3, #5
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	031b      	lsls	r3, r3, #12
 8012cbe:	b29a      	uxth	r2, r3
 8012cc0:	79fb      	ldrb	r3, [r7, #7]
 8012cc2:	b29b      	uxth	r3, r3
 8012cc4:	4313      	orrs	r3, r2
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	691c      	ldr	r4, [r3, #16]
 8012ccc:	4610      	mov	r0, r2
 8012cce:	f7fb f8bd 	bl	800de4c <lwip_htons>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012cd6:	693b      	ldr	r3, [r7, #16]
 8012cd8:	691b      	ldr	r3, [r3, #16]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	749a      	strb	r2, [r3, #18]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	74da      	strb	r2, [r3, #19]
  return seg;
 8012ce2:	693b      	ldr	r3, [r7, #16]
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	371c      	adds	r7, #28
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd90      	pop	{r4, r7, pc}
 8012cec:	2000770c 	.word	0x2000770c

08012cf0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b086      	sub	sp, #24
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	607b      	str	r3, [r7, #4]
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	73fb      	strb	r3, [r7, #15]
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	81bb      	strh	r3, [r7, #12]
 8012d00:	4613      	mov	r3, r2
 8012d02:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012d04:	89bb      	ldrh	r3, [r7, #12]
 8012d06:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012d08:	89ba      	ldrh	r2, [r7, #12]
 8012d0a:	897b      	ldrh	r3, [r7, #10]
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d221      	bcs.n	8012d54 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012d10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012d14:	f003 0302 	and.w	r3, r3, #2
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d111      	bne.n	8012d40 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8012d1c:	6a3b      	ldr	r3, [r7, #32]
 8012d1e:	8b5b      	ldrh	r3, [r3, #26]
 8012d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d115      	bne.n	8012d54 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8012d28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d007      	beq.n	8012d40 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012d30:	6a3b      	ldr	r3, [r7, #32]
 8012d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d103      	bne.n	8012d40 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8012d38:	6a3b      	ldr	r3, [r7, #32]
 8012d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d009      	beq.n	8012d54 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012d40:	89bb      	ldrh	r3, [r7, #12]
 8012d42:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012d46:	f023 0203 	bic.w	r2, r3, #3
 8012d4a:	897b      	ldrh	r3, [r7, #10]
 8012d4c:	4293      	cmp	r3, r2
 8012d4e:	bf28      	it	cs
 8012d50:	4613      	movcs	r3, r2
 8012d52:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012d54:	8af9      	ldrh	r1, [r7, #22]
 8012d56:	7bfb      	ldrb	r3, [r7, #15]
 8012d58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7fb fe2b 	bl	800e9b8 <pbuf_alloc>
 8012d62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d101      	bne.n	8012d6e <tcp_pbuf_prealloc+0x7e>
    return NULL;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	e00e      	b.n	8012d8c <tcp_pbuf_prealloc+0x9c>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	895a      	ldrh	r2, [r3, #10]
 8012d72:	89bb      	ldrh	r3, [r7, #12]
 8012d74:	1ad3      	subs	r3, r2, r3
 8012d76:	b29a      	uxth	r2, r3
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	89ba      	ldrh	r2, [r7, #12]
 8012d80:	811a      	strh	r2, [r3, #8]
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	891a      	ldrh	r2, [r3, #8]
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	815a      	strh	r2, [r3, #10]
  return p;
 8012d8a:	693b      	ldr	r3, [r7, #16]
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3718      	adds	r7, #24
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}

08012d94 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012d94:	b480      	push	{r7}
 8012d96:	b083      	sub	sp, #12
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	7d1b      	ldrb	r3, [r3, #20]
 8012da4:	2b04      	cmp	r3, #4
 8012da6:	d00e      	beq.n	8012dc6 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012dac:	2b07      	cmp	r3, #7
 8012dae:	d00a      	beq.n	8012dc6 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012db4:	2b02      	cmp	r3, #2
 8012db6:	d006      	beq.n	8012dc6 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012dbc:	2b03      	cmp	r3, #3
 8012dbe:	d002      	beq.n	8012dc6 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012dc0:	f06f 030a 	mvn.w	r3, #10
 8012dc4:	e02c      	b.n	8012e20 <tcp_write_checks+0x8c>
  } else if (len == 0) {
 8012dc6:	887b      	ldrh	r3, [r7, #2]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d101      	bne.n	8012dd0 <tcp_write_checks+0x3c>
    return ERR_OK;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	e027      	b.n	8012e20 <tcp_write_checks+0x8c>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012dd6:	887a      	ldrh	r2, [r7, #2]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d909      	bls.n	8012df0 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	8b5b      	ldrh	r3, [r3, #26]
 8012de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012de4:	b29a      	uxth	r2, r3
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dee:	e017      	b.n	8012e20 <tcp_write_checks+0x8c>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012df6:	2b0b      	cmp	r3, #11
 8012df8:	d911      	bls.n	8012e1e <tcp_write_checks+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8012dfa:	4b0c      	ldr	r3, [pc, #48]	; (8012e2c <tcp_write_checks+0x98>)
 8012dfc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8012e00:	3301      	adds	r3, #1
 8012e02:	b29a      	uxth	r2, r3
 8012e04:	4b09      	ldr	r3, [pc, #36]	; (8012e2c <tcp_write_checks+0x98>)
 8012e06:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	8b5b      	ldrh	r3, [r3, #26]
 8012e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e12:	b29a      	uxth	r2, r3
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e1c:	e000      	b.n	8012e20 <tcp_write_checks+0x8c>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012e1e:	2300      	movs	r3, #0
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	370c      	adds	r7, #12
 8012e24:	46bd      	mov	sp, r7
 8012e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2a:	4770      	bx	lr
 8012e2c:	2000770c 	.word	0x2000770c

08012e30 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012e30:	b590      	push	{r4, r7, lr}
 8012e32:	b09d      	sub	sp, #116	; 0x74
 8012e34:	af04      	add	r7, sp, #16
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	60b9      	str	r1, [r7, #8]
 8012e3a:	4611      	mov	r1, r2
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	460b      	mov	r3, r1
 8012e40:	80fb      	strh	r3, [r7, #6]
 8012e42:	4613      	mov	r3, r2
 8012e44:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012e46:	2300      	movs	r3, #0
 8012e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8012e4e:	2300      	movs	r3, #0
 8012e50:	657b      	str	r3, [r7, #84]	; 0x54
 8012e52:	2300      	movs	r3, #0
 8012e54:	653b      	str	r3, [r7, #80]	; 0x50
 8012e56:	2300      	movs	r3, #0
 8012e58:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012e60:	2300      	movs	r3, #0
 8012e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012e66:	2300      	movs	r3, #0
 8012e68:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8012e70:	2300      	movs	r3, #0
 8012e72:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012e76:	2300      	movs	r3, #0
 8012e78:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d102      	bne.n	8012e88 <tcp_write+0x58>
 8012e82:	f06f 030f 	mvn.w	r3, #15
 8012e86:	e29c      	b.n	80133c2 <tcp_write+0x592>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012e8e:	085b      	lsrs	r3, r3, #1
 8012e90:	b29a      	uxth	r2, r3
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e96:	4293      	cmp	r3, r2
 8012e98:	bf28      	it	cs
 8012e9a:	4613      	movcs	r3, r2
 8012e9c:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8012e9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d102      	bne.n	8012eaa <tcp_write+0x7a>
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ea8:	e000      	b.n	8012eac <tcp_write+0x7c>
 8012eaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012eac:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d102      	bne.n	8012eba <tcp_write+0x8a>
 8012eb4:	f06f 030f 	mvn.w	r3, #15
 8012eb8:	e283      	b.n	80133c2 <tcp_write+0x592>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012eba:	88fb      	ldrh	r3, [r7, #6]
 8012ebc:	4619      	mov	r1, r3
 8012ebe:	68f8      	ldr	r0, [r7, #12]
 8012ec0:	f7ff ff68 	bl	8012d94 <tcp_write_checks>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8012eca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d002      	beq.n	8012ed8 <tcp_write+0xa8>
    return err;
 8012ed2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ed6:	e274      	b.n	80133c2 <tcp_write+0x592>
  }
  queuelen = pcb->snd_queuelen;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ede:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	f000 8171 	beq.w	80131d4 <tcp_write+0x3a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8012ef8:	e002      	b.n	8012f00 <tcp_write+0xd0>
         last_unsent = last_unsent->next);
 8012efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d1f8      	bne.n	8012efa <tcp_write+0xca>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f0a:	7b1b      	ldrb	r3, [r3, #12]
 8012f0c:	009b      	lsls	r3, r3, #2
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	f003 0304 	and.w	r3, r3, #4
 8012f14:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f18:	891a      	ldrh	r2, [r3, #8]
 8012f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f1c:	4413      	add	r3, r2
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012f22:	1ad3      	subs	r3, r2, r3
 8012f24:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012f2e:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8012f30:	8afb      	ldrh	r3, [r7, #22]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d022      	beq.n	8012f7c <tcp_write+0x14c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
      seg = last_unsent;
 8012f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f38:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012f3a:	8afb      	ldrh	r3, [r7, #22]
 8012f3c:	88fa      	ldrh	r2, [r7, #6]
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	bf28      	it	cs
 8012f42:	4613      	movcs	r3, r2
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8012f4a:	4293      	cmp	r3, r2
 8012f4c:	bf28      	it	cs
 8012f4e:	4613      	movcs	r3, r2
 8012f50:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 8012f54:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8012f58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012f5c:	4413      	add	r3, r2
 8012f5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 8012f62:	8afa      	ldrh	r2, [r7, #22]
 8012f64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012f68:	1ad3      	subs	r3, r2, r3
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8012f6e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8012f72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012f7c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8012f80:	88fb      	ldrh	r3, [r7, #6]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	f080 8126 	bcs.w	80131d4 <tcp_write+0x3a4>
 8012f88:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	f000 8121 	beq.w	80131d4 <tcp_write+0x3a4>
 8012f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f94:	891b      	ldrh	r3, [r3, #8]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	f000 811c 	beq.w	80131d4 <tcp_write+0x3a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012f9c:	88fa      	ldrh	r2, [r7, #6]
 8012f9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8012fa2:	1ad2      	subs	r2, r2, r3
 8012fa4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	bfa8      	it	ge
 8012fac:	4613      	movge	r3, r2
 8012fae:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 8012fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fb2:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012fb4:	797b      	ldrb	r3, [r7, #5]
 8012fb6:	f003 0301 	and.w	r3, r3, #1
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d02b      	beq.n	8013016 <tcp_write+0x1e6>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012fbe:	f107 0016 	add.w	r0, r7, #22
 8012fc2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8012fc6:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8012fc8:	2301      	movs	r3, #1
 8012fca:	9302      	str	r3, [sp, #8]
 8012fcc:	797b      	ldrb	r3, [r7, #5]
 8012fce:	9301      	str	r3, [sp, #4]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	9300      	str	r3, [sp, #0]
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	2000      	movs	r0, #0
 8012fd8:	f7ff fe8a 	bl	8012cf0 <tcp_pbuf_prealloc>
 8012fdc:	63f8      	str	r0, [r7, #60]	; 0x3c
 8012fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	f000 81c8 	beq.w	8013376 <tcp_write+0x546>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8012fe6:	8afb      	ldrh	r3, [r7, #22]
 8012fe8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fee:	6858      	ldr	r0, [r3, #4]
 8012ff0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8012ff4:	68ba      	ldr	r2, [r7, #8]
 8012ff6:	4413      	add	r3, r2
 8012ff8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ffa:	4619      	mov	r1, r3
 8012ffc:	f006 fbd1 	bl	80197a2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013000:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013002:	f7fb ff6e 	bl	800eee2 <pbuf_clen>
 8013006:	4603      	mov	r3, r0
 8013008:	461a      	mov	r2, r3
 801300a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801300e:	4413      	add	r3, r2
 8013010:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8013014:	e037      	b.n	8013086 <tcp_write+0x256>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	63bb      	str	r3, [r7, #56]	; 0x38
 801301c:	e002      	b.n	8013024 <tcp_write+0x1f4>
 801301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	63bb      	str	r3, [r7, #56]	; 0x38
 8013024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d1f8      	bne.n	801301e <tcp_write+0x1ee>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302e:	7b1b      	ldrb	r3, [r3, #12]
 8013030:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d10b      	bne.n	8013050 <tcp_write+0x220>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303a:	685b      	ldr	r3, [r3, #4]
 801303c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801303e:	8952      	ldrh	r2, [r2, #10]
 8013040:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013042:	68ba      	ldr	r2, [r7, #8]
 8013044:	429a      	cmp	r2, r3
 8013046:	d103      	bne.n	8013050 <tcp_write+0x220>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
          extendlen = seglen;
 8013048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801304a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801304e:	e01a      	b.n	8013086 <tcp_write+0x256>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013050:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013052:	2201      	movs	r2, #1
 8013054:	4619      	mov	r1, r3
 8013056:	2000      	movs	r0, #0
 8013058:	f7fb fcae 	bl	800e9b8 <pbuf_alloc>
 801305c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013060:	2b00      	cmp	r3, #0
 8013062:	f000 818a 	beq.w	801337a <tcp_write+0x54a>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013066:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801306a:	68ba      	ldr	r2, [r7, #8]
 801306c:	441a      	add	r2, r3
 801306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013070:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013072:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013074:	f7fb ff35 	bl	800eee2 <pbuf_clen>
 8013078:	4603      	mov	r3, r0
 801307a:	461a      	mov	r2, r3
 801307c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8013080:	4413      	add	r3, r2
 8013082:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013086:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 801308a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801308c:	4413      	add	r3, r2
 801308e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013092:	e09f      	b.n	80131d4 <tcp_write+0x3a4>
    struct pbuf *p;
    u16_t left = len - pos;
 8013094:	88fa      	ldrh	r2, [r7, #6]
 8013096:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801309a:	1ad3      	subs	r3, r2, r3
 801309c:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 801309e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80130a6:	1ad3      	subs	r3, r2, r3
 80130a8:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 80130aa:	8bfa      	ldrh	r2, [r7, #30]
 80130ac:	8c3b      	ldrh	r3, [r7, #32]
 80130ae:	4293      	cmp	r3, r2
 80130b0:	bf28      	it	cs
 80130b2:	4613      	movcs	r3, r2
 80130b4:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80130b6:	797b      	ldrb	r3, [r7, #5]
 80130b8:	f003 0301 	and.w	r3, r3, #1
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d02a      	beq.n	8013116 <tcp_write+0x2e6>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80130c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80130c4:	b29a      	uxth	r2, r3
 80130c6:	8bbb      	ldrh	r3, [r7, #28]
 80130c8:	4413      	add	r3, r2
 80130ca:	b299      	uxth	r1, r3
 80130cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	bf0c      	ite	eq
 80130d2:	2301      	moveq	r3, #1
 80130d4:	2300      	movne	r3, #0
 80130d6:	b2db      	uxtb	r3, r3
 80130d8:	f107 0016 	add.w	r0, r7, #22
 80130dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80130de:	9302      	str	r3, [sp, #8]
 80130e0:	797b      	ldrb	r3, [r7, #5]
 80130e2:	9301      	str	r3, [sp, #4]
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	9300      	str	r3, [sp, #0]
 80130e8:	4603      	mov	r3, r0
 80130ea:	2038      	movs	r0, #56	; 0x38
 80130ec:	f7ff fe00 	bl	8012cf0 <tcp_pbuf_prealloc>
 80130f0:	6378      	str	r0, [r7, #52]	; 0x34
 80130f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f000 8142 	beq.w	801337e <tcp_write+0x54e>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80130fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130fc:	685a      	ldr	r2, [r3, #4]
 80130fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013102:	18d0      	adds	r0, r2, r3
 8013104:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013108:	68ba      	ldr	r2, [r7, #8]
 801310a:	4413      	add	r3, r2
 801310c:	8bba      	ldrh	r2, [r7, #28]
 801310e:	4619      	mov	r1, r3
 8013110:	f006 fb47 	bl	80197a2 <memcpy>
 8013114:	e025      	b.n	8013162 <tcp_write+0x332>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013116:	8bbb      	ldrh	r3, [r7, #28]
 8013118:	2201      	movs	r2, #1
 801311a:	4619      	mov	r1, r3
 801311c:	2038      	movs	r0, #56	; 0x38
 801311e:	f7fb fc4b 	bl	800e9b8 <pbuf_alloc>
 8013122:	61b8      	str	r0, [r7, #24]
 8013124:	69bb      	ldr	r3, [r7, #24]
 8013126:	2b00      	cmp	r3, #0
 8013128:	f000 812b 	beq.w	8013382 <tcp_write+0x552>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801312c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013130:	68ba      	ldr	r2, [r7, #8]
 8013132:	441a      	add	r2, r3
 8013134:	69bb      	ldr	r3, [r7, #24]
 8013136:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801313c:	b29b      	uxth	r3, r3
 801313e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013142:	4619      	mov	r1, r3
 8013144:	2038      	movs	r0, #56	; 0x38
 8013146:	f7fb fc37 	bl	800e9b8 <pbuf_alloc>
 801314a:	6378      	str	r0, [r7, #52]	; 0x34
 801314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801314e:	2b00      	cmp	r3, #0
 8013150:	d103      	bne.n	801315a <tcp_write+0x32a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013152:	69b8      	ldr	r0, [r7, #24]
 8013154:	f7fb fe72 	bl	800ee3c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013158:	e116      	b.n	8013388 <tcp_write+0x558>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801315a:	69b9      	ldr	r1, [r7, #24]
 801315c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801315e:	f7fb feea 	bl	800ef36 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013162:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013164:	f7fb febd 	bl	800eee2 <pbuf_clen>
 8013168:	4603      	mov	r3, r0
 801316a:	461a      	mov	r2, r3
 801316c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8013170:	4413      	add	r3, r2
 8013172:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013176:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801317a:	2b0c      	cmp	r3, #12
 801317c:	d903      	bls.n	8013186 <tcp_write+0x356>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801317e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013180:	f7fb fe5c 	bl	800ee3c <pbuf_free>
      goto memerr;
 8013184:	e100      	b.n	8013388 <tcp_write+0x558>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801318a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801318e:	441a      	add	r2, r3
 8013190:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013194:	9300      	str	r3, [sp, #0]
 8013196:	4613      	mov	r3, r2
 8013198:	2200      	movs	r2, #0
 801319a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801319c:	68f8      	ldr	r0, [r7, #12]
 801319e:	f7ff fd25 	bl	8012bec <tcp_create_segment>
 80131a2:	6578      	str	r0, [r7, #84]	; 0x54
 80131a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	f000 80ed 	beq.w	8013386 <tcp_write+0x556>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 80131ac:	8afa      	ldrh	r2, [r7, #22]
 80131ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131b0:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80131b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d102      	bne.n	80131be <tcp_write+0x38e>
      queue = seg;
 80131b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80131bc:	e002      	b.n	80131c4 <tcp_write+0x394>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 80131be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131c2:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80131c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131c6:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80131c8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80131cc:	8bbb      	ldrh	r3, [r7, #28]
 80131ce:	4413      	add	r3, r2
 80131d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 80131d4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80131d8:	88fb      	ldrh	r3, [r7, #6]
 80131da:	429a      	cmp	r2, r3
 80131dc:	f4ff af5a 	bcc.w	8013094 <tcp_write+0x264>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 80131e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d00b      	beq.n	80131fe <tcp_write+0x3ce>
 80131e6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d007      	beq.n	80131fe <tcp_write+0x3ce>
    last_unsent->oversize_left += oversize_add;
 80131ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131f0:	895a      	ldrh	r2, [r3, #10]
 80131f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80131f6:	4413      	add	r3, r2
 80131f8:	b29a      	uxth	r2, r3
 80131fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131fc:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80131fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013202:	2b00      	cmp	r3, #0
 8013204:	d038      	beq.n	8013278 <tcp_write+0x448>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	633b      	str	r3, [r7, #48]	; 0x30
 801320c:	e021      	b.n	8013252 <tcp_write+0x422>
      p->tot_len += oversize_used;
 801320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013210:	891a      	ldrh	r2, [r3, #8]
 8013212:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013216:	4413      	add	r3, r2
 8013218:	b29a      	uxth	r2, r3
 801321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801321c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d112      	bne.n	801324c <tcp_write+0x41c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801322c:	8952      	ldrh	r2, [r2, #10]
 801322e:	4413      	add	r3, r2
 8013230:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013234:	68b9      	ldr	r1, [r7, #8]
 8013236:	4618      	mov	r0, r3
 8013238:	f006 fab3 	bl	80197a2 <memcpy>
        p->len += oversize_used;
 801323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801323e:	895a      	ldrh	r2, [r3, #10]
 8013240:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013244:	4413      	add	r3, r2
 8013246:	b29a      	uxth	r2, r3
 8013248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801324a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	633b      	str	r3, [r7, #48]	; 0x30
 8013252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013254:	2b00      	cmp	r3, #0
 8013256:	d1da      	bne.n	801320e <tcp_write+0x3de>
      }
    }
    last_unsent->len += oversize_used;
 8013258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801325a:	891a      	ldrh	r2, [r3, #8]
 801325c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013260:	4413      	add	r3, r2
 8013262:	b29a      	uxth	r2, r3
 8013264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013266:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8013268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801326a:	895a      	ldrh	r2, [r3, #10]
 801326c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	b29a      	uxth	r2, r3
 8013274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013276:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013278:	8afa      	ldrh	r2, [r7, #22]
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013282:	2b00      	cmp	r3, #0
 8013284:	d00e      	beq.n	80132a4 <tcp_write+0x474>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013288:	685b      	ldr	r3, [r3, #4]
 801328a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801328c:	4618      	mov	r0, r3
 801328e:	f7fb fe52 	bl	800ef36 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013294:	891a      	ldrh	r2, [r3, #8]
 8013296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013298:	891b      	ldrh	r3, [r3, #8]
 801329a:	4413      	add	r3, r2
 801329c:	b29a      	uxth	r2, r3
 801329e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132a0:	811a      	strh	r2, [r3, #8]
 80132a2:	e02e      	b.n	8013302 <tcp_write+0x4d2>
  } else if (extendlen > 0) {
 80132a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d02a      	beq.n	8013302 <tcp_write+0x4d2>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80132ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80132b2:	e00a      	b.n	80132ca <tcp_write+0x49a>
      p->tot_len += extendlen;
 80132b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b6:	891a      	ldrh	r2, [r3, #8]
 80132b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80132bc:	4413      	add	r3, r2
 80132be:	b29a      	uxth	r2, r3
 80132c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80132c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80132ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1f0      	bne.n	80132b4 <tcp_write+0x484>
    }
    p->tot_len += extendlen;
 80132d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d4:	891a      	ldrh	r2, [r3, #8]
 80132d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80132da:	4413      	add	r3, r2
 80132dc:	b29a      	uxth	r2, r3
 80132de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80132e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e4:	895a      	ldrh	r2, [r3, #10]
 80132e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80132ea:	4413      	add	r3, r2
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f0:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80132f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132f4:	891a      	ldrh	r2, [r3, #8]
 80132f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80132fa:	4413      	add	r3, r2
 80132fc:	b29a      	uxth	r2, r3
 80132fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013300:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013304:	2b00      	cmp	r3, #0
 8013306:	d103      	bne.n	8013310 <tcp_write+0x4e0>
    pcb->unsent = queue;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801330c:	66da      	str	r2, [r3, #108]	; 0x6c
 801330e:	e002      	b.n	8013316 <tcp_write+0x4e6>
  } else {
    last_unsent->next = queue;
 8013310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013312:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013314:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801331a:	88fb      	ldrh	r3, [r7, #6]
 801331c:	441a      	add	r2, r3
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013328:	88fb      	ldrh	r3, [r7, #6]
 801332a:	1ad3      	subs	r3, r2, r3
 801332c:	b29a      	uxth	r2, r3
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 801333a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801333e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013340:	2b00      	cmp	r3, #0
 8013342:	d016      	beq.n	8013372 <tcp_write+0x542>
 8013344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013346:	691b      	ldr	r3, [r3, #16]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d012      	beq.n	8013372 <tcp_write+0x542>
 801334c:	797b      	ldrb	r3, [r7, #5]
 801334e:	f003 0302 	and.w	r3, r3, #2
 8013352:	2b00      	cmp	r3, #0
 8013354:	d10d      	bne.n	8013372 <tcp_write+0x542>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013358:	691b      	ldr	r3, [r3, #16]
 801335a:	899b      	ldrh	r3, [r3, #12]
 801335c:	b29c      	uxth	r4, r3
 801335e:	2008      	movs	r0, #8
 8013360:	f7fa fd74 	bl	800de4c <lwip_htons>
 8013364:	4603      	mov	r3, r0
 8013366:	461a      	mov	r2, r3
 8013368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801336a:	691b      	ldr	r3, [r3, #16]
 801336c:	4322      	orrs	r2, r4
 801336e:	b292      	uxth	r2, r2
 8013370:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013372:	2300      	movs	r3, #0
 8013374:	e025      	b.n	80133c2 <tcp_write+0x592>
          goto memerr;
 8013376:	bf00      	nop
 8013378:	e006      	b.n	8013388 <tcp_write+0x558>
            goto memerr;
 801337a:	bf00      	nop
 801337c:	e004      	b.n	8013388 <tcp_write+0x558>
        goto memerr;
 801337e:	bf00      	nop
 8013380:	e002      	b.n	8013388 <tcp_write+0x558>
        goto memerr;
 8013382:	bf00      	nop
 8013384:	e000      	b.n	8013388 <tcp_write+0x558>
      goto memerr;
 8013386:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	8b5b      	ldrh	r3, [r3, #26]
 801338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013390:	b29a      	uxth	r2, r3
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 8013396:	4b0d      	ldr	r3, [pc, #52]	; (80133cc <tcp_write+0x59c>)
 8013398:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801339c:	3301      	adds	r3, #1
 801339e:	b29a      	uxth	r2, r3
 80133a0:	4b0a      	ldr	r3, [pc, #40]	; (80133cc <tcp_write+0x59c>)
 80133a2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  if (concat_p != NULL) {
 80133a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d002      	beq.n	80133b2 <tcp_write+0x582>
    pbuf_free(concat_p);
 80133ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80133ae:	f7fb fd45 	bl	800ee3c <pbuf_free>
  }
  if (queue != NULL) {
 80133b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d002      	beq.n	80133be <tcp_write+0x58e>
    tcp_segs_free(queue);
 80133b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80133ba:	f7fc fee0 	bl	801017e <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80133be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3764      	adds	r7, #100	; 0x64
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd90      	pop	{r4, r7, pc}
 80133ca:	bf00      	nop
 80133cc:	2000770c 	.word	0x2000770c

080133d0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80133d0:	b590      	push	{r4, r7, lr}
 80133d2:	b08b      	sub	sp, #44	; 0x2c
 80133d4:	af02      	add	r7, sp, #8
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	460b      	mov	r3, r1
 80133da:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80133dc:	2300      	movs	r3, #0
 80133de:	61bb      	str	r3, [r7, #24]
 80133e0:	2300      	movs	r3, #0
 80133e2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80133e4:	2300      	movs	r3, #0
 80133e6:	613b      	str	r3, [r7, #16]
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);

  useg = pcb->unsent;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d102      	bne.n	80133fa <tcp_split_unsent_seg+0x2a>
    return ERR_MEM;
 80133f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133f8:	e0f9      	b.n	80135ee <tcp_split_unsent_seg+0x21e>
  }

  if (split == 0) {
 80133fa:	887b      	ldrh	r3, [r7, #2]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d102      	bne.n	8013406 <tcp_split_unsent_seg+0x36>
    LWIP_ASSERT("Can't split segment into length 0", 0);
    return ERR_VAL;
 8013400:	f06f 0305 	mvn.w	r3, #5
 8013404:	e0f3      	b.n	80135ee <tcp_split_unsent_seg+0x21e>
  }

  if (useg->len <= split) {
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	891b      	ldrh	r3, [r3, #8]
 801340a:	887a      	ldrh	r2, [r7, #2]
 801340c:	429a      	cmp	r2, r3
 801340e:	d301      	bcc.n	8013414 <tcp_split_unsent_seg+0x44>
    return ERR_OK;
 8013410:	2300      	movs	r3, #0
 8013412:	e0ec      	b.n	80135ee <tcp_split_unsent_seg+0x21e>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	7b1b      	ldrb	r3, [r3, #12]
 8013418:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801341a:	7bfb      	ldrb	r3, [r7, #15]
 801341c:	009b      	lsls	r3, r3, #2
 801341e:	b2db      	uxtb	r3, r3
 8013420:	f003 0304 	and.w	r3, r3, #4
 8013424:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	891a      	ldrh	r2, [r3, #8]
 801342a:	887b      	ldrh	r3, [r7, #2]
 801342c:	1ad3      	subs	r3, r2, r3
 801342e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013430:	7bbb      	ldrb	r3, [r7, #14]
 8013432:	b29a      	uxth	r2, r3
 8013434:	89bb      	ldrh	r3, [r7, #12]
 8013436:	4413      	add	r3, r2
 8013438:	b29b      	uxth	r3, r3
 801343a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801343e:	4619      	mov	r1, r3
 8013440:	2038      	movs	r0, #56	; 0x38
 8013442:	f7fb fab9 	bl	800e9b8 <pbuf_alloc>
 8013446:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	2b00      	cmp	r3, #0
 801344c:	f000 80ba 	beq.w	80135c4 <tcp_split_unsent_seg+0x1f4>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	891a      	ldrh	r2, [r3, #8]
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	891b      	ldrh	r3, [r3, #8]
 801345a:	1ad3      	subs	r3, r2, r3
 801345c:	b29a      	uxth	r2, r3
 801345e:	887b      	ldrh	r3, [r7, #2]
 8013460:	4413      	add	r3, r2
 8013462:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	6858      	ldr	r0, [r3, #4]
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	685a      	ldr	r2, [r3, #4]
 801346c:	7bbb      	ldrb	r3, [r7, #14]
 801346e:	18d1      	adds	r1, r2, r3
 8013470:	897b      	ldrh	r3, [r7, #10]
 8013472:	89ba      	ldrh	r2, [r7, #12]
 8013474:	f7fb fe28 	bl	800f0c8 <pbuf_copy_partial>
 8013478:	4603      	mov	r3, r0
 801347a:	461a      	mov	r2, r3
 801347c:	89bb      	ldrh	r3, [r7, #12]
 801347e:	4293      	cmp	r3, r2
 8013480:	f040 80a2 	bne.w	80135c8 <tcp_split_unsent_seg+0x1f8>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	691b      	ldr	r3, [r3, #16]
 8013488:	899b      	ldrh	r3, [r3, #12]
 801348a:	b29b      	uxth	r3, r3
 801348c:	4618      	mov	r0, r3
 801348e:	f7fa fcdd 	bl	800de4c <lwip_htons>
 8013492:	4603      	mov	r3, r0
 8013494:	b2db      	uxtb	r3, r3
 8013496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801349a:	77bb      	strb	r3, [r7, #30]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801349c:	2300      	movs	r3, #0
 801349e:	77fb      	strb	r3, [r7, #31]

  if (split_flags & TCP_PSH) {
 80134a0:	7fbb      	ldrb	r3, [r7, #30]
 80134a2:	f003 0308 	and.w	r3, r3, #8
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d007      	beq.n	80134ba <tcp_split_unsent_seg+0xea>
    split_flags &= ~TCP_PSH;
 80134aa:	7fbb      	ldrb	r3, [r7, #30]
 80134ac:	f023 0308 	bic.w	r3, r3, #8
 80134b0:	77bb      	strb	r3, [r7, #30]
    remainder_flags |= TCP_PSH;
 80134b2:	7ffb      	ldrb	r3, [r7, #31]
 80134b4:	f043 0308 	orr.w	r3, r3, #8
 80134b8:	77fb      	strb	r3, [r7, #31]
  }
  if (split_flags & TCP_FIN) {
 80134ba:	7fbb      	ldrb	r3, [r7, #30]
 80134bc:	f003 0301 	and.w	r3, r3, #1
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d007      	beq.n	80134d4 <tcp_split_unsent_seg+0x104>
    split_flags &= ~TCP_FIN;
 80134c4:	7fbb      	ldrb	r3, [r7, #30]
 80134c6:	f023 0301 	bic.w	r3, r3, #1
 80134ca:	77bb      	strb	r3, [r7, #30]
    remainder_flags |= TCP_FIN;
 80134cc:	7ffb      	ldrb	r3, [r7, #31]
 80134ce:	f043 0301 	orr.w	r3, r3, #1
 80134d2:	77fb      	strb	r3, [r7, #31]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80134d4:	697b      	ldr	r3, [r7, #20]
 80134d6:	691b      	ldr	r3, [r3, #16]
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fa fccb 	bl	800de76 <lwip_htonl>
 80134e0:	4602      	mov	r2, r0
 80134e2:	887b      	ldrh	r3, [r7, #2]
 80134e4:	18d1      	adds	r1, r2, r3
 80134e6:	7ffa      	ldrb	r2, [r7, #31]
 80134e8:	7bfb      	ldrb	r3, [r7, #15]
 80134ea:	9300      	str	r3, [sp, #0]
 80134ec:	460b      	mov	r3, r1
 80134ee:	6939      	ldr	r1, [r7, #16]
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f7ff fb7b 	bl	8012bec <tcp_create_segment>
 80134f6:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d066      	beq.n	80135cc <tcp_split_unsent_seg+0x1fc>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	685b      	ldr	r3, [r3, #4]
 8013502:	4618      	mov	r0, r3
 8013504:	f7fb fced 	bl	800eee2 <pbuf_clen>
 8013508:	4603      	mov	r3, r0
 801350a:	461a      	mov	r2, r3
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013512:	1a9b      	subs	r3, r3, r2
 8013514:	b29a      	uxth	r2, r3
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	6858      	ldr	r0, [r3, #4]
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	891a      	ldrh	r2, [r3, #8]
 8013526:	89bb      	ldrh	r3, [r7, #12]
 8013528:	1ad3      	subs	r3, r2, r3
 801352a:	b29b      	uxth	r3, r3
 801352c:	4619      	mov	r1, r3
 801352e:	f7fb fb52 	bl	800ebd6 <pbuf_realloc>
  useg->len -= remainder;
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	891a      	ldrh	r2, [r3, #8]
 8013536:	89bb      	ldrh	r3, [r7, #12]
 8013538:	1ad3      	subs	r3, r2, r3
 801353a:	b29a      	uxth	r2, r3
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	899b      	ldrh	r3, [r3, #12]
 8013546:	b29c      	uxth	r4, r3
 8013548:	7fbb      	ldrb	r3, [r7, #30]
 801354a:	b29b      	uxth	r3, r3
 801354c:	4618      	mov	r0, r3
 801354e:	f7fa fc7d 	bl	800de4c <lwip_htons>
 8013552:	4603      	mov	r3, r0
 8013554:	461a      	mov	r2, r3
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	691b      	ldr	r3, [r3, #16]
 801355a:	4322      	orrs	r2, r4
 801355c:	b292      	uxth	r2, r2
 801355e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	2200      	movs	r2, #0
 8013564:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	685b      	ldr	r3, [r3, #4]
 801356a:	4618      	mov	r0, r3
 801356c:	f7fb fcb9 	bl	800eee2 <pbuf_clen>
 8013570:	4603      	mov	r3, r0
 8013572:	461a      	mov	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801357a:	4413      	add	r3, r2
 801357c:	b29a      	uxth	r2, r3
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	685b      	ldr	r3, [r3, #4]
 8013588:	4618      	mov	r0, r3
 801358a:	f7fb fcaa 	bl	800eee2 <pbuf_clen>
 801358e:	4603      	mov	r3, r0
 8013590:	461a      	mov	r2, r3
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013598:	4413      	add	r3, r2
 801359a:	b29a      	uxth	r2, r3
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	69bb      	ldr	r3, [r7, #24]
 80135a8:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	69ba      	ldr	r2, [r7, #24]
 80135ae:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80135b0:	69bb      	ldr	r3, [r7, #24]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d103      	bne.n	80135c0 <tcp_split_unsent_seg+0x1f0>
    pcb->unsent_oversize = 0;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	2200      	movs	r2, #0
 80135bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80135c0:	2300      	movs	r3, #0
 80135c2:	e014      	b.n	80135ee <tcp_split_unsent_seg+0x21e>
    goto memerr;
 80135c4:	bf00      	nop
 80135c6:	e002      	b.n	80135ce <tcp_split_unsent_seg+0x1fe>
    goto memerr;
 80135c8:	bf00      	nop
 80135ca:	e000      	b.n	80135ce <tcp_split_unsent_seg+0x1fe>
    goto memerr;
 80135cc:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 80135ce:	4b0a      	ldr	r3, [pc, #40]	; (80135f8 <tcp_split_unsent_seg+0x228>)
 80135d0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80135d4:	3301      	adds	r3, #1
 80135d6:	b29a      	uxth	r2, r3
 80135d8:	4b07      	ldr	r3, [pc, #28]	; (80135f8 <tcp_split_unsent_seg+0x228>)
 80135da:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
  if (p != NULL) {
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d002      	beq.n	80135ea <tcp_split_unsent_seg+0x21a>
    pbuf_free(p);
 80135e4:	6938      	ldr	r0, [r7, #16]
 80135e6:	f7fb fc29 	bl	800ee3c <pbuf_free>
  }

  return ERR_MEM;
 80135ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3724      	adds	r7, #36	; 0x24
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd90      	pop	{r4, r7, pc}
 80135f6:	bf00      	nop
 80135f8:	2000770c 	.word	0x2000770c

080135fc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80135fc:	b590      	push	{r4, r7, lr}
 80135fe:	b085      	sub	sp, #20
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013608:	2b00      	cmp	r3, #0
 801360a:	d02e      	beq.n	801366a <tcp_send_fin+0x6e>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013610:	60fb      	str	r3, [r7, #12]
 8013612:	e002      	b.n	801361a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d1f8      	bne.n	8013614 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	691b      	ldr	r3, [r3, #16]
 8013626:	899b      	ldrh	r3, [r3, #12]
 8013628:	b29b      	uxth	r3, r3
 801362a:	4618      	mov	r0, r3
 801362c:	f7fa fc0e 	bl	800de4c <lwip_htons>
 8013630:	4603      	mov	r3, r0
 8013632:	b2db      	uxtb	r3, r3
 8013634:	f003 0307 	and.w	r3, r3, #7
 8013638:	2b00      	cmp	r3, #0
 801363a:	d116      	bne.n	801366a <tcp_send_fin+0x6e>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	691b      	ldr	r3, [r3, #16]
 8013640:	899b      	ldrh	r3, [r3, #12]
 8013642:	b29c      	uxth	r4, r3
 8013644:	2001      	movs	r0, #1
 8013646:	f7fa fc01 	bl	800de4c <lwip_htons>
 801364a:	4603      	mov	r3, r0
 801364c:	461a      	mov	r2, r3
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	691b      	ldr	r3, [r3, #16]
 8013652:	4322      	orrs	r2, r4
 8013654:	b292      	uxth	r2, r2
 8013656:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	8b5b      	ldrh	r3, [r3, #26]
 801365c:	f043 0320 	orr.w	r3, r3, #32
 8013660:	b29a      	uxth	r2, r3
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013666:	2300      	movs	r3, #0
 8013668:	e004      	b.n	8013674 <tcp_send_fin+0x78>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801366a:	2101      	movs	r1, #1
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f000 f805 	bl	801367c <tcp_enqueue_flags>
 8013672:	4603      	mov	r3, r0
}
 8013674:	4618      	mov	r0, r3
 8013676:	3714      	adds	r7, #20
 8013678:	46bd      	mov	sp, r7
 801367a:	bd90      	pop	{r4, r7, pc}

0801367c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b088      	sub	sp, #32
 8013680:	af02      	add	r7, sp, #8
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	460b      	mov	r3, r1
 8013686:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	74fb      	strb	r3, [r7, #19]
  u8_t optlen = 0;
 801368c:	2300      	movs	r3, #0
 801368e:	74bb      	strb	r3, [r7, #18]

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013690:	78fb      	ldrb	r3, [r7, #3]
 8013692:	f003 0302 	and.w	r3, r3, #2
 8013696:	2b00      	cmp	r3, #0
 8013698:	d001      	beq.n	801369e <tcp_enqueue_flags+0x22>
    optflags = TF_SEG_OPTS_MSS;
 801369a:	2301      	movs	r3, #1
 801369c:	74fb      	strb	r3, [r7, #19]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801369e:	7cfb      	ldrb	r3, [r7, #19]
 80136a0:	009b      	lsls	r3, r3, #2
 80136a2:	b2db      	uxtb	r3, r3
 80136a4:	f003 0304 	and.w	r3, r3, #4
 80136a8:	74bb      	strb	r3, [r7, #18]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80136aa:	7cbb      	ldrb	r3, [r7, #18]
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136b2:	4619      	mov	r1, r3
 80136b4:	2038      	movs	r0, #56	; 0x38
 80136b6:	f7fb f97f 	bl	800e9b8 <pbuf_alloc>
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d111      	bne.n	80136e6 <tcp_enqueue_flags+0x6a>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	8b5b      	ldrh	r3, [r3, #26]
 80136c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136ca:	b29a      	uxth	r2, r3
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 80136d0:	4b39      	ldr	r3, [pc, #228]	; (80137b8 <tcp_enqueue_flags+0x13c>)
 80136d2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80136d6:	3301      	adds	r3, #1
 80136d8:	b29a      	uxth	r2, r3
 80136da:	4b37      	ldr	r3, [pc, #220]	; (80137b8 <tcp_enqueue_flags+0x13c>)
 80136dc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 80136e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136e4:	e064      	b.n	80137b0 <tcp_enqueue_flags+0x134>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80136ea:	78fa      	ldrb	r2, [r7, #3]
 80136ec:	7cfb      	ldrb	r3, [r7, #19]
 80136ee:	9300      	str	r3, [sp, #0]
 80136f0:	460b      	mov	r3, r1
 80136f2:	68f9      	ldr	r1, [r7, #12]
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f7ff fa79 	bl	8012bec <tcp_create_segment>
 80136fa:	60b8      	str	r0, [r7, #8]
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d111      	bne.n	8013726 <tcp_enqueue_flags+0xaa>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	8b5b      	ldrh	r3, [r3, #26]
 8013706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801370a:	b29a      	uxth	r2, r3
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8013710:	4b29      	ldr	r3, [pc, #164]	; (80137b8 <tcp_enqueue_flags+0x13c>)
 8013712:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8013716:	3301      	adds	r3, #1
 8013718:	b29a      	uxth	r2, r3
 801371a:	4b27      	ldr	r3, [pc, #156]	; (80137b8 <tcp_enqueue_flags+0x13c>)
 801371c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 8013720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013724:	e044      	b.n	80137b0 <tcp_enqueue_flags+0x134>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801372a:	2b00      	cmp	r3, #0
 801372c:	d103      	bne.n	8013736 <tcp_enqueue_flags+0xba>
    pcb->unsent = seg;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	68ba      	ldr	r2, [r7, #8]
 8013732:	66da      	str	r2, [r3, #108]	; 0x6c
 8013734:	e00d      	b.n	8013752 <tcp_enqueue_flags+0xd6>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801373a:	617b      	str	r3, [r7, #20]
 801373c:	e002      	b.n	8013744 <tcp_enqueue_flags+0xc8>
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	617b      	str	r3, [r7, #20]
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d1f8      	bne.n	801373e <tcp_enqueue_flags+0xc2>
    useg->next = seg;
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	68ba      	ldr	r2, [r7, #8]
 8013750:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2200      	movs	r2, #0
 8013756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801375a:	78fb      	ldrb	r3, [r7, #3]
 801375c:	f003 0302 	and.w	r3, r3, #2
 8013760:	2b00      	cmp	r3, #0
 8013762:	d104      	bne.n	801376e <tcp_enqueue_flags+0xf2>
 8013764:	78fb      	ldrb	r3, [r7, #3]
 8013766:	f003 0301 	and.w	r3, r3, #1
 801376a:	2b00      	cmp	r3, #0
 801376c:	d004      	beq.n	8013778 <tcp_enqueue_flags+0xfc>
    pcb->snd_lbb++;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013772:	1c5a      	adds	r2, r3, #1
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013778:	78fb      	ldrb	r3, [r7, #3]
 801377a:	f003 0301 	and.w	r3, r3, #1
 801377e:	2b00      	cmp	r3, #0
 8013780:	d006      	beq.n	8013790 <tcp_enqueue_flags+0x114>
    tcp_set_flags(pcb, TF_FIN);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	8b5b      	ldrh	r3, [r3, #26]
 8013786:	f043 0320 	orr.w	r3, r3, #32
 801378a:	b29a      	uxth	r2, r3
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	4618      	mov	r0, r3
 8013796:	f7fb fba4 	bl	800eee2 <pbuf_clen>
 801379a:	4603      	mov	r3, r0
 801379c:	461a      	mov	r2, r3
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137a4:	4413      	add	r3, r2
 80137a6:	b29a      	uxth	r2, r3
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80137ae:	2300      	movs	r3, #0
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3718      	adds	r7, #24
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	2000770c 	.word	0x2000770c

080137bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80137bc:	b5b0      	push	{r4, r5, r7, lr}
 80137be:	b08a      	sub	sp, #40	; 0x28
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80137c4:	4b8f      	ldr	r3, [pc, #572]	; (8013a04 <tcp_output+0x248>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d101      	bne.n	80137d2 <tcp_output+0x16>
    return ERR_OK;
 80137ce:	2300      	movs	r3, #0
 80137d0:	e1b9      	b.n	8013b46 <tcp_output+0x38a>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80137de:	4293      	cmp	r3, r2
 80137e0:	bf28      	it	cs
 80137e2:	4613      	movcs	r3, r2
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80137ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d10b      	bne.n	801380c <tcp_output+0x50>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	8b5b      	ldrh	r3, [r3, #26]
 80137f8:	f003 0302 	and.w	r3, r3, #2
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	f000 8195 	beq.w	8013b2c <tcp_output+0x370>
      return tcp_send_empty_ack(pcb);
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f000 fcdf 	bl	80141c6 <tcp_send_empty_ack>
 8013808:	4603      	mov	r3, r0
 801380a:	e19c      	b.n	8013b46 <tcp_output+0x38a>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801380c:	6879      	ldr	r1, [r7, #4]
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	3304      	adds	r3, #4
 8013812:	461a      	mov	r2, r3
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f7ff f9cd 	bl	8012bb4 <tcp_route>
 801381a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801381c:	697b      	ldr	r3, [r7, #20]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d102      	bne.n	8013828 <tcp_output+0x6c>
    return ERR_RTE;
 8013822:	f06f 0303 	mvn.w	r3, #3
 8013826:	e18e      	b.n	8013b46 <tcp_output+0x38a>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d003      	beq.n	8013836 <tcp_output+0x7a>
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d111      	bne.n	801385a <tcp_output+0x9e>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d002      	beq.n	8013842 <tcp_output+0x86>
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	3304      	adds	r3, #4
 8013840:	e000      	b.n	8013844 <tcp_output+0x88>
 8013842:	2300      	movs	r3, #0
 8013844:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d102      	bne.n	8013852 <tcp_output+0x96>
      return ERR_RTE;
 801384c:	f06f 0303 	mvn.w	r3, #3
 8013850:	e179      	b.n	8013b46 <tcp_output+0x38a>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385c:	691b      	ldr	r3, [r3, #16]
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	4618      	mov	r0, r3
 8013862:	f7fa fb08 	bl	800de76 <lwip_htonl>
 8013866:	4602      	mov	r2, r0
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801386c:	1ad3      	subs	r3, r2, r3
 801386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013870:	8912      	ldrh	r2, [r2, #8]
 8013872:	4413      	add	r3, r2
 8013874:	69ba      	ldr	r2, [r7, #24]
 8013876:	429a      	cmp	r2, r3
 8013878:	d227      	bcs.n	80138ca <tcp_output+0x10e>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013880:	461a      	mov	r2, r3
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	4293      	cmp	r3, r2
 8013886:	d114      	bne.n	80138b2 <tcp_output+0xf6>
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801388c:	2b00      	cmp	r3, #0
 801388e:	d110      	bne.n	80138b2 <tcp_output+0xf6>
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013896:	2b00      	cmp	r3, #0
 8013898:	d10b      	bne.n	80138b2 <tcp_output+0xf6>
      pcb->persist_cnt = 0;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2200      	movs	r2, #0
 801389e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2201      	movs	r2, #1
 80138a6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2200      	movs	r2, #0
 80138ae:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	8b5b      	ldrh	r3, [r3, #26]
 80138b6:	f003 0302 	and.w	r3, r3, #2
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	f000 8138 	beq.w	8013b30 <tcp_output+0x374>
      return tcp_send_empty_ack(pcb);
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f000 fc80 	bl	80141c6 <tcp_send_empty_ack>
 80138c6:	4603      	mov	r3, r0
 80138c8:	e13d      	b.n	8013b46 <tcp_output+0x38a>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	2200      	movs	r2, #0
 80138ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138d6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80138d8:	6a3b      	ldr	r3, [r7, #32]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	f000 8107 	beq.w	8013aee <tcp_output+0x332>
    for (; useg->next != NULL; useg = useg->next);
 80138e0:	e002      	b.n	80138e8 <tcp_output+0x12c>
 80138e2:	6a3b      	ldr	r3, [r7, #32]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	623b      	str	r3, [r7, #32]
 80138e8:	6a3b      	ldr	r3, [r7, #32]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d1f8      	bne.n	80138e2 <tcp_output+0x126>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80138f0:	e0fd      	b.n	8013aee <tcp_output+0x332>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80138f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f4:	691b      	ldr	r3, [r3, #16]
 80138f6:	899b      	ldrh	r3, [r3, #12]
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7fa faa6 	bl	800de4c <lwip_htons>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013904:	2b00      	cmp	r3, #0
 8013906:	d01f      	beq.n	8013948 <tcp_output+0x18c>
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	8b5b      	ldrh	r3, [r3, #26]
 801390c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013910:	2b00      	cmp	r3, #0
 8013912:	d119      	bne.n	8013948 <tcp_output+0x18c>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013918:	2b00      	cmp	r3, #0
 801391a:	d00b      	beq.n	8013934 <tcp_output+0x178>
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d110      	bne.n	8013948 <tcp_output+0x18c>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801392a:	891a      	ldrh	r2, [r3, #8]
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013930:	429a      	cmp	r2, r3
 8013932:	d209      	bcs.n	8013948 <tcp_output+0x18c>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801393a:	2b00      	cmp	r3, #0
 801393c:	d004      	beq.n	8013948 <tcp_output+0x18c>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013944:	2b0b      	cmp	r3, #11
 8013946:	d901      	bls.n	801394c <tcp_output+0x190>
 8013948:	2301      	movs	r3, #1
 801394a:	e000      	b.n	801394e <tcp_output+0x192>
 801394c:	2300      	movs	r3, #0
 801394e:	2b00      	cmp	r3, #0
 8013950:	d106      	bne.n	8013960 <tcp_output+0x1a4>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	8b5b      	ldrh	r3, [r3, #26]
 8013956:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801395a:	2b00      	cmp	r3, #0
 801395c:	f000 80dc 	beq.w	8013b18 <tcp_output+0x35c>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	7d1b      	ldrb	r3, [r3, #20]
 8013964:	2b02      	cmp	r3, #2
 8013966:	d00d      	beq.n	8013984 <tcp_output+0x1c8>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396a:	691b      	ldr	r3, [r3, #16]
 801396c:	899b      	ldrh	r3, [r3, #12]
 801396e:	b29c      	uxth	r4, r3
 8013970:	2010      	movs	r0, #16
 8013972:	f7fa fa6b 	bl	800de4c <lwip_htons>
 8013976:	4603      	mov	r3, r0
 8013978:	461a      	mov	r2, r3
 801397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397c:	691b      	ldr	r3, [r3, #16]
 801397e:	4322      	orrs	r2, r4
 8013980:	b292      	uxth	r2, r2
 8013982:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013984:	697a      	ldr	r2, [r7, #20]
 8013986:	6879      	ldr	r1, [r7, #4]
 8013988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801398a:	f000 f8f3 	bl	8013b74 <tcp_output_segment>
 801398e:	4603      	mov	r3, r0
 8013990:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d009      	beq.n	80139ae <tcp_output+0x1f2>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	8b5b      	ldrh	r3, [r3, #26]
 801399e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139a2:	b29a      	uxth	r2, r3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	835a      	strh	r2, [r3, #26]
      return err;
 80139a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139ac:	e0cb      	b.n	8013b46 <tcp_output+0x38a>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80139ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b0:	2200      	movs	r2, #0
 80139b2:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80139b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b6:	681a      	ldr	r2, [r3, #0]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	7d1b      	ldrb	r3, [r3, #20]
 80139c0:	2b02      	cmp	r3, #2
 80139c2:	d006      	beq.n	80139d2 <tcp_output+0x216>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	8b5b      	ldrh	r3, [r3, #26]
 80139c8:	f023 0303 	bic.w	r3, r3, #3
 80139cc:	b29a      	uxth	r2, r3
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80139d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d4:	691b      	ldr	r3, [r3, #16]
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	4618      	mov	r0, r3
 80139da:	f7fa fa4c 	bl	800de76 <lwip_htonl>
 80139de:	4604      	mov	r4, r0
 80139e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e2:	891b      	ldrh	r3, [r3, #8]
 80139e4:	461d      	mov	r5, r3
 80139e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e8:	691b      	ldr	r3, [r3, #16]
 80139ea:	899b      	ldrh	r3, [r3, #12]
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7fa fa2c 	bl	800de4c <lwip_htons>
 80139f4:	4603      	mov	r3, r0
 80139f6:	b2db      	uxtb	r3, r3
 80139f8:	f003 0303 	and.w	r3, r3, #3
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d003      	beq.n	8013a08 <tcp_output+0x24c>
 8013a00:	2301      	movs	r3, #1
 8013a02:	e002      	b.n	8013a0a <tcp_output+0x24e>
 8013a04:	20007804 	.word	0x20007804
 8013a08:	2300      	movs	r3, #0
 8013a0a:	442b      	add	r3, r5
 8013a0c:	4423      	add	r3, r4
 8013a0e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	1ad3      	subs	r3, r2, r3
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	da02      	bge.n	8013a22 <tcp_output+0x266>
      pcb->snd_nxt = snd_nxt;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	68ba      	ldr	r2, [r7, #8]
 8013a20:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a24:	891b      	ldrh	r3, [r3, #8]
 8013a26:	461c      	mov	r4, r3
 8013a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2a:	691b      	ldr	r3, [r3, #16]
 8013a2c:	899b      	ldrh	r3, [r3, #12]
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fa fa0b 	bl	800de4c <lwip_htons>
 8013a36:	4603      	mov	r3, r0
 8013a38:	b2db      	uxtb	r3, r3
 8013a3a:	f003 0303 	and.w	r3, r3, #3
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d001      	beq.n	8013a46 <tcp_output+0x28a>
 8013a42:	2301      	movs	r3, #1
 8013a44:	e000      	b.n	8013a48 <tcp_output+0x28c>
 8013a46:	2300      	movs	r3, #0
 8013a48:	4423      	add	r3, r4
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d049      	beq.n	8013ae2 <tcp_output+0x326>
      seg->next = NULL;
 8013a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a50:	2200      	movs	r2, #0
 8013a52:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d105      	bne.n	8013a68 <tcp_output+0x2ac>
        pcb->unacked = seg;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a60:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a64:	623b      	str	r3, [r7, #32]
 8013a66:	e03f      	b.n	8013ae8 <tcp_output+0x32c>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6a:	691b      	ldr	r3, [r3, #16]
 8013a6c:	685b      	ldr	r3, [r3, #4]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7fa fa01 	bl	800de76 <lwip_htonl>
 8013a74:	4604      	mov	r4, r0
 8013a76:	6a3b      	ldr	r3, [r7, #32]
 8013a78:	691b      	ldr	r3, [r3, #16]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7fa f9fa 	bl	800de76 <lwip_htonl>
 8013a82:	4603      	mov	r3, r0
 8013a84:	1ae3      	subs	r3, r4, r3
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	da24      	bge.n	8013ad4 <tcp_output+0x318>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	3370      	adds	r3, #112	; 0x70
 8013a8e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013a90:	e002      	b.n	8013a98 <tcp_output+0x2dc>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013a98:	69fb      	ldr	r3, [r7, #28]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d011      	beq.n	8013ac4 <tcp_output+0x308>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	691b      	ldr	r3, [r3, #16]
 8013aa6:	685b      	ldr	r3, [r3, #4]
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7fa f9e4 	bl	800de76 <lwip_htonl>
 8013aae:	4604      	mov	r4, r0
 8013ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab2:	691b      	ldr	r3, [r3, #16]
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7fa f9dd 	bl	800de76 <lwip_htonl>
 8013abc:	4603      	mov	r3, r0
 8013abe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	dbe6      	blt.n	8013a92 <tcp_output+0x2d6>
          }
          seg->next = (*cur_seg);
 8013ac4:	69fb      	ldr	r3, [r7, #28]
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aca:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013acc:	69fb      	ldr	r3, [r7, #28]
 8013ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ad0:	601a      	str	r2, [r3, #0]
 8013ad2:	e009      	b.n	8013ae8 <tcp_output+0x32c>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013ad4:	6a3b      	ldr	r3, [r7, #32]
 8013ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ad8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013ada:	6a3b      	ldr	r3, [r7, #32]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	623b      	str	r3, [r7, #32]
 8013ae0:	e002      	b.n	8013ae8 <tcp_output+0x32c>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013ae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ae4:	f7fc fb60 	bl	80101a8 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013aec:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d012      	beq.n	8013b1a <tcp_output+0x35e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af6:	691b      	ldr	r3, [r3, #16]
 8013af8:	685b      	ldr	r3, [r3, #4]
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7fa f9bb 	bl	800de76 <lwip_htonl>
 8013b00:	4602      	mov	r2, r0
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b06:	1ad3      	subs	r3, r2, r3
 8013b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b0a:	8912      	ldrh	r2, [r2, #8]
 8013b0c:	4413      	add	r3, r2
  while (seg != NULL &&
 8013b0e:	69ba      	ldr	r2, [r7, #24]
 8013b10:	429a      	cmp	r2, r3
 8013b12:	f4bf aeee 	bcs.w	80138f2 <tcp_output+0x136>
 8013b16:	e000      	b.n	8013b1a <tcp_output+0x35e>
      break;
 8013b18:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d108      	bne.n	8013b34 <tcp_output+0x378>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2200      	movs	r2, #0
 8013b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013b2a:	e004      	b.n	8013b36 <tcp_output+0x37a>
    goto output_done;
 8013b2c:	bf00      	nop
 8013b2e:	e002      	b.n	8013b36 <tcp_output+0x37a>
    goto output_done;
 8013b30:	bf00      	nop
 8013b32:	e000      	b.n	8013b36 <tcp_output+0x37a>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013b34:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	8b5b      	ldrh	r3, [r3, #26]
 8013b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013b3e:	b29a      	uxth	r2, r3
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013b44:	2300      	movs	r3, #0
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3728      	adds	r7, #40	; 0x28
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8013b4e:	bf00      	nop

08013b50 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013b50:	b480      	push	{r7}
 8013b52:	b083      	sub	sp, #12
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	685b      	ldr	r3, [r3, #4]
 8013b5c:	7b9b      	ldrb	r3, [r3, #14]
 8013b5e:	2b01      	cmp	r3, #1
 8013b60:	d001      	beq.n	8013b66 <tcp_output_segment_busy+0x16>
    /* other reference found */
    return 1;
 8013b62:	2301      	movs	r3, #1
 8013b64:	e000      	b.n	8013b68 <tcp_output_segment_busy+0x18>
  }
  /* no other references found */
  return 0;
 8013b66:	2300      	movs	r3, #0
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	370c      	adds	r7, #12
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b72:	4770      	bx	lr

08013b74 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013b74:	b5b0      	push	{r4, r5, r7, lr}
 8013b76:	b08c      	sub	sp, #48	; 0x30
 8013b78:	af04      	add	r7, sp, #16
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	60b9      	str	r1, [r7, #8]
 8013b7e:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);

  if (tcp_output_segment_busy(seg)) {
 8013b80:	68f8      	ldr	r0, [r7, #12]
 8013b82:	f7ff ffe5 	bl	8013b50 <tcp_output_segment_busy>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d001      	beq.n	8013b90 <tcp_output_segment+0x1c>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	e0a5      	b.n	8013cdc <tcp_output_segment+0x168>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	691c      	ldr	r4, [r3, #16]
 8013b98:	4610      	mov	r0, r2
 8013b9a:	f7fa f96c 	bl	800de76 <lwip_htonl>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	691c      	ldr	r4, [r3, #16]
 8013baa:	4610      	mov	r0, r2
 8013bac:	f7fa f94e 	bl	800de4c <lwip_htons>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bb8:	68ba      	ldr	r2, [r7, #8]
 8013bba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013bbc:	441a      	add	r2, r3
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	691b      	ldr	r3, [r3, #16]
 8013bc6:	3314      	adds	r3, #20
 8013bc8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	7b1b      	ldrb	r3, [r3, #12]
 8013bce:	f003 0301 	and.w	r3, r3, #1
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d015      	beq.n	8013c02 <tcp_output_segment+0x8e>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	3304      	adds	r3, #4
 8013bda:	461a      	mov	r2, r3
 8013bdc:	6879      	ldr	r1, [r7, #4]
 8013bde:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013be2:	f7fc fddf 	bl	80107a4 <tcp_eff_send_mss_netif>
 8013be6:	4603      	mov	r3, r0
 8013be8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013bea:	8b7b      	ldrh	r3, [r7, #26]
 8013bec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7fa f940 	bl	800de76 <lwip_htonl>
 8013bf6:	4602      	mov	r2, r0
 8013bf8:	69fb      	ldr	r3, [r7, #28]
 8013bfa:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013bfc:	69fb      	ldr	r3, [r7, #28]
 8013bfe:	3304      	adds	r3, #4
 8013c00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	da02      	bge.n	8013c12 <tcp_output_segment+0x9e>
    pcb->rtime = 0;
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d10c      	bne.n	8013c34 <tcp_output_segment+0xc0>
    pcb->rttest = tcp_ticks;
 8013c1a:	4b32      	ldr	r3, [pc, #200]	; (8013ce4 <tcp_output_segment+0x170>)
 8013c1c:	681a      	ldr	r2, [r3, #0]
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	691b      	ldr	r3, [r3, #16]
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7fa f924 	bl	800de76 <lwip_htonl>
 8013c2e:	4602      	mov	r2, r0
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	691a      	ldr	r2, [r3, #16]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	1ad3      	subs	r3, r2, r3
 8013c40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	8959      	ldrh	r1, [r3, #10]
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	8b3a      	ldrh	r2, [r7, #24]
 8013c4e:	1a8a      	subs	r2, r1, r2
 8013c50:	b292      	uxth	r2, r2
 8013c52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	685b      	ldr	r3, [r3, #4]
 8013c58:	8919      	ldrh	r1, [r3, #8]
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	8b3a      	ldrh	r2, [r7, #24]
 8013c60:	1a8a      	subs	r2, r1, r2
 8013c62:	b292      	uxth	r2, r2
 8013c64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	68fa      	ldr	r2, [r7, #12]
 8013c6c:	6912      	ldr	r2, [r2, #16]
 8013c6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	691b      	ldr	r3, [r3, #16]
 8013c74:	2200      	movs	r2, #0
 8013c76:	741a      	strb	r2, [r3, #16]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	745a      	strb	r2, [r3, #17]
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013c84:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8013c86:	68bd      	ldr	r5, [r7, #8]
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8013c8c:	68fa      	ldr	r2, [r7, #12]
 8013c8e:	6914      	ldr	r4, [r2, #16]
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	462b      	mov	r3, r5
 8013c94:	460a      	mov	r2, r1
 8013c96:	2106      	movs	r1, #6
 8013c98:	f7fa fab4 	bl	800e204 <ip_chksum_pseudo>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8013ca0:	4b11      	ldr	r3, [pc, #68]	; (8013ce8 <tcp_output_segment+0x174>)
 8013ca2:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8013ca6:	3301      	adds	r3, #1
 8013ca8:	b29a      	uxth	r2, r3
 8013caa:	4b0f      	ldr	r3, [pc, #60]	; (8013ce8 <tcp_output_segment+0x174>)
 8013cac:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	6858      	ldr	r0, [r3, #4]
 8013cb4:	68b9      	ldr	r1, [r7, #8]
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	1d1c      	adds	r4, r3, #4
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	7add      	ldrb	r5, [r3, #11]
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	7a9b      	ldrb	r3, [r3, #10]
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	9202      	str	r2, [sp, #8]
 8013cc6:	2206      	movs	r2, #6
 8013cc8:	9201      	str	r2, [sp, #4]
 8013cca:	9300      	str	r3, [sp, #0]
 8013ccc:	462b      	mov	r3, r5
 8013cce:	4622      	mov	r2, r4
 8013cd0:	f004 fa0a 	bl	80180e8 <ip4_output_if>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3720      	adds	r7, #32
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8013ce4:	200077b4 	.word	0x200077b4
 8013ce8:	2000770c 	.word	0x2000770c

08013cec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013cec:	b5b0      	push	{r4, r5, r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d102      	bne.n	8013d02 <tcp_rexmit_rto_prepare+0x16>
    return ERR_VAL;
 8013cfc:	f06f 0305 	mvn.w	r3, #5
 8013d00:	e059      	b.n	8013db6 <tcp_rexmit_rto_prepare+0xca>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d06:	60fb      	str	r3, [r7, #12]
 8013d08:	e00b      	b.n	8013d22 <tcp_rexmit_rto_prepare+0x36>
    if (tcp_output_segment_busy(seg)) {
 8013d0a:	68f8      	ldr	r0, [r7, #12]
 8013d0c:	f7ff ff20 	bl	8013b50 <tcp_output_segment_busy>
 8013d10:	4603      	mov	r3, r0
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d002      	beq.n	8013d1c <tcp_rexmit_rto_prepare+0x30>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013d16:	f06f 0305 	mvn.w	r3, #5
 8013d1a:	e04c      	b.n	8013db6 <tcp_rexmit_rto_prepare+0xca>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	60fb      	str	r3, [r7, #12]
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d1ef      	bne.n	8013d0a <tcp_rexmit_rto_prepare+0x1e>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	f7ff ff10 	bl	8013b50 <tcp_output_segment_busy>
 8013d30:	4603      	mov	r3, r0
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d002      	beq.n	8013d3c <tcp_rexmit_rto_prepare+0x50>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013d36:	f06f 0305 	mvn.w	r3, #5
 8013d3a:	e03c      	b.n	8013db6 <tcp_rexmit_rto_prepare+0xca>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d104      	bne.n	8013d56 <tcp_rexmit_rto_prepare+0x6a>
    pcb->unsent_oversize = seg->oversize_left;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	895a      	ldrh	r2, [r3, #10]
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2200      	movs	r2, #0
 8013d62:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	8b5b      	ldrh	r3, [r3, #26]
 8013d68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013d6c:	b29a      	uxth	r2, r3
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	691b      	ldr	r3, [r3, #16]
 8013d76:	685b      	ldr	r3, [r3, #4]
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f7fa f87c 	bl	800de76 <lwip_htonl>
 8013d7e:	4604      	mov	r4, r0
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	891b      	ldrh	r3, [r3, #8]
 8013d84:	461d      	mov	r5, r3
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	691b      	ldr	r3, [r3, #16]
 8013d8a:	899b      	ldrh	r3, [r3, #12]
 8013d8c:	b29b      	uxth	r3, r3
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fa f85c 	bl	800de4c <lwip_htons>
 8013d94:	4603      	mov	r3, r0
 8013d96:	b2db      	uxtb	r3, r3
 8013d98:	f003 0303 	and.w	r3, r3, #3
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d001      	beq.n	8013da4 <tcp_rexmit_rto_prepare+0xb8>
 8013da0:	2301      	movs	r3, #1
 8013da2:	e000      	b.n	8013da6 <tcp_rexmit_rto_prepare+0xba>
 8013da4:	2300      	movs	r3, #0
 8013da6:	442b      	add	r3, r5
 8013da8:	18e2      	adds	r2, r4, r3
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2200      	movs	r2, #0
 8013db2:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013db4:	2300      	movs	r3, #0
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3710      	adds	r7, #16
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bdb0      	pop	{r4, r5, r7, pc}

08013dbe <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013dbe:	b580      	push	{r7, lr}
 8013dc0:	b082      	sub	sp, #8
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013dcc:	2bff      	cmp	r3, #255	; 0xff
 8013dce:	d007      	beq.n	8013de0 <tcp_rexmit_rto_commit+0x22>
    ++pcb->nrtx;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013dd6:	3301      	adds	r3, #1
 8013dd8:	b2da      	uxtb	r2, r3
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f7ff fceb 	bl	80137bc <tcp_output>
}
 8013de6:	bf00      	nop
 8013de8:	3708      	adds	r7, #8
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}

08013dee <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013dee:	b580      	push	{r7, lr}
 8013df0:	b082      	sub	sp, #8
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f7ff ff78 	bl	8013cec <tcp_rexmit_rto_prepare>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d102      	bne.n	8013e08 <tcp_rexmit_rto+0x1a>
    tcp_rexmit_rto_commit(pcb);
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f7ff ffdb 	bl	8013dbe <tcp_rexmit_rto_commit>
  }
}
 8013e08:	bf00      	nop
 8013e0a:	3708      	adds	r7, #8
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013e10:	b590      	push	{r4, r7, lr}
 8013e12:	b085      	sub	sp, #20
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);

  if (pcb->unacked == NULL) {
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d102      	bne.n	8013e26 <tcp_rexmit+0x16>
    return ERR_VAL;
 8013e20:	f06f 0305 	mvn.w	r3, #5
 8013e24:	e04c      	b.n	8013ec0 <tcp_rexmit+0xb0>
  }

  seg = pcb->unacked;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e2a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013e2c:	68b8      	ldr	r0, [r7, #8]
 8013e2e:	f7ff fe8f 	bl	8013b50 <tcp_output_segment_busy>
 8013e32:	4603      	mov	r3, r0
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d002      	beq.n	8013e3e <tcp_rexmit+0x2e>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013e38:	f06f 0305 	mvn.w	r3, #5
 8013e3c:	e040      	b.n	8013ec0 <tcp_rexmit+0xb0>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	681a      	ldr	r2, [r3, #0]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	336c      	adds	r3, #108	; 0x6c
 8013e4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013e4c:	e002      	b.n	8013e54 <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d011      	beq.n	8013e80 <tcp_rexmit+0x70>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	691b      	ldr	r3, [r3, #16]
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7fa f806 	bl	800de76 <lwip_htonl>
 8013e6a:	4604      	mov	r4, r0
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	691b      	ldr	r3, [r3, #16]
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7f9 ffff 	bl	800de76 <lwip_htonl>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	dbe6      	blt.n	8013e4e <tcp_rexmit+0x3e>
  }
  seg->next = *cur_seg;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	681a      	ldr	r2, [r3, #0]
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	68ba      	ldr	r2, [r7, #8]
 8013e8c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d103      	bne.n	8013e9e <tcp_rexmit+0x8e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	2200      	movs	r2, #0
 8013e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ea4:	2bff      	cmp	r3, #255	; 0xff
 8013ea6:	d007      	beq.n	8013eb8 <tcp_rexmit+0xa8>
    ++pcb->nrtx;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013eae:	3301      	adds	r3, #1
 8013eb0:	b2da      	uxtb	r2, r3
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013ebe:	2300      	movs	r3, #0
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3714      	adds	r7, #20
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd90      	pop	{r4, r7, pc}

08013ec8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d044      	beq.n	8013f62 <tcp_rexmit_fast+0x9a>
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	8b5b      	ldrh	r3, [r3, #26]
 8013edc:	f003 0304 	and.w	r3, r3, #4
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d13e      	bne.n	8013f62 <tcp_rexmit_fast+0x9a>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7ff ff93 	bl	8013e10 <tcp_rexmit>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d138      	bne.n	8013f62 <tcp_rexmit_fast+0x9a>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013efc:	4293      	cmp	r3, r2
 8013efe:	bf28      	it	cs
 8013f00:	4613      	movcs	r3, r2
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	0fda      	lsrs	r2, r3, #31
 8013f06:	4413      	add	r3, r2
 8013f08:	105b      	asrs	r3, r3, #1
 8013f0a:	b29a      	uxth	r2, r3
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013f18:	461a      	mov	r2, r3
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f1e:	005b      	lsls	r3, r3, #1
 8013f20:	429a      	cmp	r2, r3
 8013f22:	d206      	bcs.n	8013f32 <tcp_rexmit_fast+0x6a>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f28:	005b      	lsls	r3, r3, #1
 8013f2a:	b29a      	uxth	r2, r3
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	0049      	lsls	r1, r1, #1
 8013f40:	440b      	add	r3, r1
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	4413      	add	r3, r2
 8013f46:	b29a      	uxth	r2, r3
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	8b5b      	ldrh	r3, [r3, #26]
 8013f52:	f043 0304 	orr.w	r3, r3, #4
 8013f56:	b29a      	uxth	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2200      	movs	r2, #0
 8013f60:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013f62:	bf00      	nop
 8013f64:	3708      	adds	r7, #8
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}

08013f6a <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013f6a:	b580      	push	{r7, lr}
 8013f6c:	b086      	sub	sp, #24
 8013f6e:	af00      	add	r7, sp, #0
 8013f70:	60f8      	str	r0, [r7, #12]
 8013f72:	607b      	str	r3, [r7, #4]
 8013f74:	460b      	mov	r3, r1
 8013f76:	817b      	strh	r3, [r7, #10]
 8013f78:	4613      	mov	r3, r2
 8013f7a:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013f7c:	897a      	ldrh	r2, [r7, #10]
 8013f7e:	893b      	ldrh	r3, [r7, #8]
 8013f80:	4413      	add	r3, r2
 8013f82:	b29b      	uxth	r3, r3
 8013f84:	3314      	adds	r3, #20
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	2024      	movs	r0, #36	; 0x24
 8013f90:	f7fa fd12 	bl	800e9b8 <pbuf_alloc>
 8013f94:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d040      	beq.n	801401e <tcp_output_alloc_header_common+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013fa2:	8c3b      	ldrh	r3, [r7, #32]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7f9 ff51 	bl	800de4c <lwip_htons>
 8013faa:	4603      	mov	r3, r0
 8013fac:	461a      	mov	r2, r3
 8013fae:	693b      	ldr	r3, [r7, #16]
 8013fb0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7f9 ff49 	bl	800de4c <lwip_htons>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013fc2:	693b      	ldr	r3, [r7, #16]
 8013fc4:	687a      	ldr	r2, [r7, #4]
 8013fc6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013fc8:	68f8      	ldr	r0, [r7, #12]
 8013fca:	f7f9 ff54 	bl	800de76 <lwip_htonl>
 8013fce:	4602      	mov	r2, r0
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013fd4:	897b      	ldrh	r3, [r7, #10]
 8013fd6:	089b      	lsrs	r3, r3, #2
 8013fd8:	b29b      	uxth	r3, r3
 8013fda:	3305      	adds	r3, #5
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	031b      	lsls	r3, r3, #12
 8013fe0:	b29a      	uxth	r2, r3
 8013fe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013fe6:	b29b      	uxth	r3, r3
 8013fe8:	4313      	orrs	r3, r2
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7f9 ff2d 	bl	800de4c <lwip_htons>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	693b      	ldr	r3, [r7, #16]
 8013ff8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013ffa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7f9 ff25 	bl	800de4c <lwip_htons>
 8014002:	4603      	mov	r3, r0
 8014004:	461a      	mov	r2, r3
 8014006:	693b      	ldr	r3, [r7, #16]
 8014008:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	2200      	movs	r2, #0
 801400e:	741a      	strb	r2, [r3, #16]
 8014010:	2200      	movs	r2, #0
 8014012:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014014:	693b      	ldr	r3, [r7, #16]
 8014016:	2200      	movs	r2, #0
 8014018:	749a      	strb	r2, [r3, #18]
 801401a:	2200      	movs	r2, #0
 801401c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801401e:	697b      	ldr	r3, [r7, #20]
}
 8014020:	4618      	mov	r0, r3
 8014022:	3718      	adds	r7, #24
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}

08014028 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014028:	b5b0      	push	{r4, r5, r7, lr}
 801402a:	b08a      	sub	sp, #40	; 0x28
 801402c:	af04      	add	r7, sp, #16
 801402e:	60f8      	str	r0, [r7, #12]
 8014030:	607b      	str	r3, [r7, #4]
 8014032:	460b      	mov	r3, r1
 8014034:	817b      	strh	r3, [r7, #10]
 8014036:	4613      	mov	r3, r2
 8014038:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	8adb      	ldrh	r3, [r3, #22]
 8014042:	68fa      	ldr	r2, [r7, #12]
 8014044:	8b12      	ldrh	r2, [r2, #24]
 8014046:	68f9      	ldr	r1, [r7, #12]
 8014048:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801404a:	893d      	ldrh	r5, [r7, #8]
 801404c:	897c      	ldrh	r4, [r7, #10]
 801404e:	9103      	str	r1, [sp, #12]
 8014050:	2110      	movs	r1, #16
 8014052:	9102      	str	r1, [sp, #8]
 8014054:	9201      	str	r2, [sp, #4]
 8014056:	9300      	str	r3, [sp, #0]
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	462a      	mov	r2, r5
 801405c:	4621      	mov	r1, r4
 801405e:	f7ff ff84 	bl	8013f6a <tcp_output_alloc_header_common>
 8014062:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d006      	beq.n	8014078 <tcp_output_alloc_header+0x50>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801406e:	68fa      	ldr	r2, [r7, #12]
 8014070:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014072:	441a      	add	r2, r3
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014078:	697b      	ldr	r3, [r7, #20]
}
 801407a:	4618      	mov	r0, r3
 801407c:	3718      	adds	r7, #24
 801407e:	46bd      	mov	sp, r7
 8014080:	bdb0      	pop	{r4, r5, r7, pc}

08014082 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014082:	b480      	push	{r7}
 8014084:	b089      	sub	sp, #36	; 0x24
 8014086:	af00      	add	r7, sp, #0
 8014088:	60f8      	str	r0, [r7, #12]
 801408a:	60b9      	str	r1, [r7, #8]
 801408c:	4611      	mov	r1, r2
 801408e:	461a      	mov	r2, r3
 8014090:	460b      	mov	r3, r1
 8014092:	71fb      	strb	r3, [r7, #7]
 8014094:	4613      	mov	r3, r2
 8014096:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014098:	2300      	movs	r3, #0
 801409a:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);

  tcphdr = (struct tcp_hdr *)p->payload;
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80140a2:	69bb      	ldr	r3, [r7, #24]
 80140a4:	3314      	adds	r3, #20
 80140a6:	617b      	str	r3, [r7, #20]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80140a8:	bf00      	nop
 80140aa:	3724      	adds	r7, #36	; 0x24
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr

080140b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b08c      	sub	sp, #48	; 0x30
 80140b8:	af04      	add	r7, sp, #16
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	60b9      	str	r1, [r7, #8]
 80140be:	607a      	str	r2, [r7, #4]
 80140c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);

  netif = tcp_route(pcb, src, dst);
 80140c2:	683a      	ldr	r2, [r7, #0]
 80140c4:	6879      	ldr	r1, [r7, #4]
 80140c6:	68f8      	ldr	r0, [r7, #12]
 80140c8:	f7fe fd74 	bl	8012bb4 <tcp_route>
 80140cc:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 80140ce:	69bb      	ldr	r3, [r7, #24]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d102      	bne.n	80140da <tcp_output_control_segment+0x26>
    err = ERR_RTE;
 80140d4:	23fc      	movs	r3, #252	; 0xfc
 80140d6:	77fb      	strb	r3, [r7, #31]
 80140d8:	e034      	b.n	8014144 <tcp_output_control_segment+0x90>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	685b      	ldr	r3, [r3, #4]
 80140de:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	891a      	ldrh	r2, [r3, #8]
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	9300      	str	r3, [sp, #0]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2106      	movs	r1, #6
 80140ec:	68b8      	ldr	r0, [r7, #8]
 80140ee:	f7fa f889 	bl	800e204 <ip_chksum_pseudo>
 80140f2:	4603      	mov	r3, r0
 80140f4:	461a      	mov	r2, r3
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d006      	beq.n	801410e <tcp_output_control_segment+0x5a>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	7adb      	ldrb	r3, [r3, #11]
 8014104:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	7a9b      	ldrb	r3, [r3, #10]
 801410a:	777b      	strb	r3, [r7, #29]
 801410c:	e003      	b.n	8014116 <tcp_output_control_segment+0x62>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801410e:	23ff      	movs	r3, #255	; 0xff
 8014110:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8014112:	2300      	movs	r3, #0
 8014114:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
 8014116:	4b10      	ldr	r3, [pc, #64]	; (8014158 <tcp_output_control_segment+0xa4>)
 8014118:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 801411c:	3301      	adds	r3, #1
 801411e:	b29a      	uxth	r2, r3
 8014120:	4b0d      	ldr	r3, [pc, #52]	; (8014158 <tcp_output_control_segment+0xa4>)
 8014122:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014126:	7fba      	ldrb	r2, [r7, #30]
 8014128:	69bb      	ldr	r3, [r7, #24]
 801412a:	9302      	str	r3, [sp, #8]
 801412c:	2306      	movs	r3, #6
 801412e:	9301      	str	r3, [sp, #4]
 8014130:	7f7b      	ldrb	r3, [r7, #29]
 8014132:	9300      	str	r3, [sp, #0]
 8014134:	4613      	mov	r3, r2
 8014136:	683a      	ldr	r2, [r7, #0]
 8014138:	6879      	ldr	r1, [r7, #4]
 801413a:	68b8      	ldr	r0, [r7, #8]
 801413c:	f003 ffd4 	bl	80180e8 <ip4_output_if>
 8014140:	4603      	mov	r3, r0
 8014142:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014144:	68b8      	ldr	r0, [r7, #8]
 8014146:	f7fa fe79 	bl	800ee3c <pbuf_free>
  return err;
 801414a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801414e:	4618      	mov	r0, r3
 8014150:	3720      	adds	r7, #32
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
 8014156:	bf00      	nop
 8014158:	2000770c 	.word	0x2000770c

0801415c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801415c:	b590      	push	{r4, r7, lr}
 801415e:	b08b      	sub	sp, #44	; 0x2c
 8014160:	af04      	add	r7, sp, #16
 8014162:	60f8      	str	r0, [r7, #12]
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	607a      	str	r2, [r7, #4]
 8014168:	603b      	str	r3, [r7, #0]
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801416a:	2300      	movs	r3, #0
 801416c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801416e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014172:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014174:	7dfb      	ldrb	r3, [r7, #23]
 8014176:	b29c      	uxth	r4, r3
 8014178:	68b8      	ldr	r0, [r7, #8]
 801417a:	f7f9 fe7c 	bl	800de76 <lwip_htonl>
 801417e:	4602      	mov	r2, r0
 8014180:	8abb      	ldrh	r3, [r7, #20]
 8014182:	9303      	str	r3, [sp, #12]
 8014184:	2314      	movs	r3, #20
 8014186:	9302      	str	r3, [sp, #8]
 8014188:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801418a:	9301      	str	r3, [sp, #4]
 801418c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	4613      	mov	r3, r2
 8014192:	2200      	movs	r2, #0
 8014194:	4621      	mov	r1, r4
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f7ff fee7 	bl	8013f6a <tcp_output_alloc_header_common>
 801419c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801419e:	693b      	ldr	r3, [r7, #16]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d00c      	beq.n	80141be <tcp_rst+0x62>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80141a4:	7dfb      	ldrb	r3, [r7, #23]
 80141a6:	2200      	movs	r2, #0
 80141a8:	6939      	ldr	r1, [r7, #16]
 80141aa:	68f8      	ldr	r0, [r7, #12]
 80141ac:	f7ff ff69 	bl	8014082 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80141b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141b2:	683a      	ldr	r2, [r7, #0]
 80141b4:	6939      	ldr	r1, [r7, #16]
 80141b6:	68f8      	ldr	r0, [r7, #12]
 80141b8:	f7ff ff7c 	bl	80140b4 <tcp_output_control_segment>
 80141bc:	e000      	b.n	80141c0 <tcp_rst+0x64>
    return;
 80141be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80141c0:	371c      	adds	r7, #28
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd90      	pop	{r4, r7, pc}

080141c6 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80141c6:	b590      	push	{r4, r7, lr}
 80141c8:	b087      	sub	sp, #28
 80141ca:	af00      	add	r7, sp, #0
 80141cc:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80141ce:	2300      	movs	r3, #0
 80141d0:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80141d2:	2300      	movs	r3, #0
 80141d4:	75bb      	strb	r3, [r7, #22]
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80141d6:	7dfb      	ldrb	r3, [r7, #23]
 80141d8:	009b      	lsls	r3, r3, #2
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	f003 0304 	and.w	r3, r3, #4
 80141e0:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80141e2:	7d7b      	ldrb	r3, [r7, #21]
 80141e4:	b29c      	uxth	r4, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7f9 fe43 	bl	800de76 <lwip_htonl>
 80141f0:	4603      	mov	r3, r0
 80141f2:	2200      	movs	r2, #0
 80141f4:	4621      	mov	r1, r4
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7ff ff16 	bl	8014028 <tcp_output_alloc_header>
 80141fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80141fe:	693b      	ldr	r3, [r7, #16]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d109      	bne.n	8014218 <tcp_send_empty_ack+0x52>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	8b5b      	ldrh	r3, [r3, #26]
 8014208:	f043 0303 	orr.w	r3, r3, #3
 801420c:	b29a      	uxth	r2, r3
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014212:	f06f 0301 	mvn.w	r3, #1
 8014216:	e023      	b.n	8014260 <tcp_send_empty_ack+0x9a>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014218:	7dbb      	ldrb	r3, [r7, #22]
 801421a:	7dfa      	ldrb	r2, [r7, #23]
 801421c:	6939      	ldr	r1, [r7, #16]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f7ff ff2f 	bl	8014082 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014224:	687a      	ldr	r2, [r7, #4]
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	3304      	adds	r3, #4
 801422a:	6939      	ldr	r1, [r7, #16]
 801422c:	6878      	ldr	r0, [r7, #4]
 801422e:	f7ff ff41 	bl	80140b4 <tcp_output_control_segment>
 8014232:	4603      	mov	r3, r0
 8014234:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d007      	beq.n	801424e <tcp_send_empty_ack+0x88>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	8b5b      	ldrh	r3, [r3, #26]
 8014242:	f043 0303 	orr.w	r3, r3, #3
 8014246:	b29a      	uxth	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	835a      	strh	r2, [r3, #26]
 801424c:	e006      	b.n	801425c <tcp_send_empty_ack+0x96>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	8b5b      	ldrh	r3, [r3, #26]
 8014252:	f023 0303 	bic.w	r3, r3, #3
 8014256:	b29a      	uxth	r2, r3
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801425c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014260:	4618      	mov	r0, r3
 8014262:	371c      	adds	r7, #28
 8014264:	46bd      	mov	sp, r7
 8014266:	bd90      	pop	{r4, r7, pc}

08014268 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014268:	b590      	push	{r4, r7, lr}
 801426a:	b087      	sub	sp, #28
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014270:	2300      	movs	r3, #0
 8014272:	73fb      	strb	r3, [r7, #15]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014274:	7bfb      	ldrb	r3, [r7, #15]
 8014276:	b29c      	uxth	r4, r3
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801427c:	3b01      	subs	r3, #1
 801427e:	4618      	mov	r0, r3
 8014280:	f7f9 fdf9 	bl	800de76 <lwip_htonl>
 8014284:	4603      	mov	r3, r0
 8014286:	2200      	movs	r2, #0
 8014288:	4621      	mov	r1, r4
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f7ff fecc 	bl	8014028 <tcp_output_alloc_header>
 8014290:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d102      	bne.n	801429e <tcp_keepalive+0x36>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801429c:	e010      	b.n	80142c0 <tcp_keepalive+0x58>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801429e:	7bfb      	ldrb	r3, [r7, #15]
 80142a0:	2200      	movs	r2, #0
 80142a2:	6939      	ldr	r1, [r7, #16]
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f7ff feec 	bl	8014082 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	3304      	adds	r3, #4
 80142b0:	6939      	ldr	r1, [r7, #16]
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f7ff fefe 	bl	80140b4 <tcp_output_control_segment>
 80142b8:	4603      	mov	r3, r0
 80142ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80142bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	371c      	adds	r7, #28
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd90      	pop	{r4, r7, pc}

080142c8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80142c8:	b590      	push	{r4, r7, lr}
 80142ca:	b08b      	sub	sp, #44	; 0x2c
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80142d0:	2300      	movs	r3, #0
 80142d2:	74fb      	strb	r3, [r7, #19]
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 80142da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d101      	bne.n	80142e4 <tcp_zero_window_probe+0x1c>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80142e0:	2300      	movs	r3, #0
 80142e2:	e087      	b.n	80143f4 <tcp_zero_window_probe+0x12c>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142ea:	2bff      	cmp	r3, #255	; 0xff
 80142ec:	d007      	beq.n	80142fe <tcp_zero_window_probe+0x36>
    ++pcb->persist_probe;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142f4:	3301      	adds	r3, #1
 80142f6:	b2da      	uxtb	r2, r3
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80142fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014300:	691b      	ldr	r3, [r3, #16]
 8014302:	899b      	ldrh	r3, [r3, #12]
 8014304:	b29b      	uxth	r3, r3
 8014306:	4618      	mov	r0, r3
 8014308:	f7f9 fda0 	bl	800de4c <lwip_htons>
 801430c:	4603      	mov	r3, r0
 801430e:	b2db      	uxtb	r3, r3
 8014310:	f003 0301 	and.w	r3, r3, #1
 8014314:	2b00      	cmp	r3, #0
 8014316:	d005      	beq.n	8014324 <tcp_zero_window_probe+0x5c>
 8014318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431a:	891b      	ldrh	r3, [r3, #8]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d101      	bne.n	8014324 <tcp_zero_window_probe+0x5c>
 8014320:	2301      	movs	r3, #1
 8014322:	e000      	b.n	8014326 <tcp_zero_window_probe+0x5e>
 8014324:	2300      	movs	r3, #0
 8014326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801432a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801432e:	2b00      	cmp	r3, #0
 8014330:	bf0c      	ite	eq
 8014332:	2301      	moveq	r3, #1
 8014334:	2300      	movne	r3, #0
 8014336:	b2db      	uxtb	r3, r3
 8014338:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801433a:	7cfb      	ldrb	r3, [r7, #19]
 801433c:	b299      	uxth	r1, r3
 801433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014340:	691b      	ldr	r3, [r3, #16]
 8014342:	685b      	ldr	r3, [r3, #4]
 8014344:	8c3a      	ldrh	r2, [r7, #32]
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f7ff fe6e 	bl	8014028 <tcp_output_alloc_header>
 801434c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d102      	bne.n	801435a <tcp_zero_window_probe+0x92>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014358:	e04c      	b.n	80143f4 <tcp_zero_window_probe+0x12c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801435a:	69fb      	ldr	r3, [r7, #28]
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8014360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014364:	2b00      	cmp	r3, #0
 8014366:	d011      	beq.n	801438c <tcp_zero_window_probe+0xc4>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	899b      	ldrh	r3, [r3, #12]
 801436c:	b29b      	uxth	r3, r3
 801436e:	b21b      	sxth	r3, r3
 8014370:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014374:	b21c      	sxth	r4, r3
 8014376:	2011      	movs	r0, #17
 8014378:	f7f9 fd68 	bl	800de4c <lwip_htons>
 801437c:	4603      	mov	r3, r0
 801437e:	b21b      	sxth	r3, r3
 8014380:	4323      	orrs	r3, r4
 8014382:	b21b      	sxth	r3, r3
 8014384:	b29a      	uxth	r2, r3
 8014386:	69bb      	ldr	r3, [r7, #24]
 8014388:	819a      	strh	r2, [r3, #12]
 801438a:	e010      	b.n	80143ae <tcp_zero_window_probe+0xe6>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801438c:	69fb      	ldr	r3, [r7, #28]
 801438e:	685b      	ldr	r3, [r3, #4]
 8014390:	3314      	adds	r3, #20
 8014392:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014396:	6858      	ldr	r0, [r3, #4]
 8014398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439a:	685b      	ldr	r3, [r3, #4]
 801439c:	891a      	ldrh	r2, [r3, #8]
 801439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a0:	891b      	ldrh	r3, [r3, #8]
 80143a2:	1ad3      	subs	r3, r2, r3
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	2201      	movs	r2, #1
 80143a8:	6979      	ldr	r1, [r7, #20]
 80143aa:	f7fa fe8d 	bl	800f0c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80143ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b0:	691b      	ldr	r3, [r3, #16]
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7f9 fd5e 	bl	800de76 <lwip_htonl>
 80143ba:	4603      	mov	r3, r0
 80143bc:	3301      	adds	r3, #1
 80143be:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	1ad3      	subs	r3, r2, r3
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	da02      	bge.n	80143d2 <tcp_zero_window_probe+0x10a>
    pcb->snd_nxt = snd_nxt;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	68fa      	ldr	r2, [r7, #12]
 80143d0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80143d2:	7cfb      	ldrb	r3, [r7, #19]
 80143d4:	2200      	movs	r2, #0
 80143d6:	69f9      	ldr	r1, [r7, #28]
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f7ff fe52 	bl	8014082 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	3304      	adds	r3, #4
 80143e4:	69f9      	ldr	r1, [r7, #28]
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f7ff fe64 	bl	80140b4 <tcp_output_control_segment>
 80143ec:	4603      	mov	r3, r0
 80143ee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80143f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	372c      	adds	r7, #44	; 0x2c
 80143f8:	46bd      	mov	sp, r7
 80143fa:	bd90      	pop	{r4, r7, pc}

080143fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014404:	f7fa ff0e 	bl	800f224 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014408:	4b0a      	ldr	r3, [pc, #40]	; (8014434 <tcpip_tcp_timer+0x38>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d103      	bne.n	8014418 <tcpip_tcp_timer+0x1c>
 8014410:	4b09      	ldr	r3, [pc, #36]	; (8014438 <tcpip_tcp_timer+0x3c>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d005      	beq.n	8014424 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014418:	2200      	movs	r2, #0
 801441a:	4908      	ldr	r1, [pc, #32]	; (801443c <tcpip_tcp_timer+0x40>)
 801441c:	20fa      	movs	r0, #250	; 0xfa
 801441e:	f000 f8e3 	bl	80145e8 <sys_timeout>
 8014422:	e003      	b.n	801442c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014424:	4b06      	ldr	r3, [pc, #24]	; (8014440 <tcpip_tcp_timer+0x44>)
 8014426:	2200      	movs	r2, #0
 8014428:	601a      	str	r2, [r3, #0]
  }
}
 801442a:	bf00      	nop
 801442c:	bf00      	nop
 801442e:	3708      	adds	r7, #8
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}
 8014434:	200077c0 	.word	0x200077c0
 8014438:	200077c4 	.word	0x200077c4
 801443c:	080143fd 	.word	0x080143fd
 8014440:	20007810 	.word	0x20007810

08014444 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014448:	4b0a      	ldr	r3, [pc, #40]	; (8014474 <tcp_timer_needed+0x30>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d10f      	bne.n	8014470 <tcp_timer_needed+0x2c>
 8014450:	4b09      	ldr	r3, [pc, #36]	; (8014478 <tcp_timer_needed+0x34>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d103      	bne.n	8014460 <tcp_timer_needed+0x1c>
 8014458:	4b08      	ldr	r3, [pc, #32]	; (801447c <tcp_timer_needed+0x38>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d007      	beq.n	8014470 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014460:	4b04      	ldr	r3, [pc, #16]	; (8014474 <tcp_timer_needed+0x30>)
 8014462:	2201      	movs	r2, #1
 8014464:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014466:	2200      	movs	r2, #0
 8014468:	4905      	ldr	r1, [pc, #20]	; (8014480 <tcp_timer_needed+0x3c>)
 801446a:	20fa      	movs	r0, #250	; 0xfa
 801446c:	f000 f8bc 	bl	80145e8 <sys_timeout>
  }
}
 8014470:	bf00      	nop
 8014472:	bd80      	pop	{r7, pc}
 8014474:	20007810 	.word	0x20007810
 8014478:	200077c0 	.word	0x200077c0
 801447c:	200077c4 	.word	0x200077c4
 8014480:	080143fd 	.word	0x080143fd

08014484 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b086      	sub	sp, #24
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	60b9      	str	r1, [r7, #8]
 801448e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014490:	2007      	movs	r0, #7
 8014492:	f7f9 ffbb 	bl	800e40c <memp_malloc>
 8014496:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014498:	693b      	ldr	r3, [r7, #16]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d04a      	beq.n	8014534 <sys_timeout_abs+0xb0>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 801449e:	693b      	ldr	r3, [r7, #16]
 80144a0:	2200      	movs	r2, #0
 80144a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80144a4:	693b      	ldr	r3, [r7, #16]
 80144a6:	68ba      	ldr	r2, [r7, #8]
 80144a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80144aa:	693b      	ldr	r3, [r7, #16]
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80144b0:	693b      	ldr	r3, [r7, #16]
 80144b2:	68fa      	ldr	r2, [r7, #12]
 80144b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80144b6:	4b21      	ldr	r3, [pc, #132]	; (801453c <sys_timeout_abs+0xb8>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d103      	bne.n	80144c6 <sys_timeout_abs+0x42>
    next_timeout = timeout;
 80144be:	4a1f      	ldr	r2, [pc, #124]	; (801453c <sys_timeout_abs+0xb8>)
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	6013      	str	r3, [r2, #0]
    return;
 80144c4:	e037      	b.n	8014536 <sys_timeout_abs+0xb2>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	685a      	ldr	r2, [r3, #4]
 80144ca:	4b1c      	ldr	r3, [pc, #112]	; (801453c <sys_timeout_abs+0xb8>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	1ad3      	subs	r3, r2, r3
 80144d2:	0fdb      	lsrs	r3, r3, #31
 80144d4:	f003 0301 	and.w	r3, r3, #1
 80144d8:	b2db      	uxtb	r3, r3
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d007      	beq.n	80144ee <sys_timeout_abs+0x6a>
    timeout->next = next_timeout;
 80144de:	4b17      	ldr	r3, [pc, #92]	; (801453c <sys_timeout_abs+0xb8>)
 80144e0:	681a      	ldr	r2, [r3, #0]
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80144e6:	4a15      	ldr	r2, [pc, #84]	; (801453c <sys_timeout_abs+0xb8>)
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	6013      	str	r3, [r2, #0]
 80144ec:	e023      	b.n	8014536 <sys_timeout_abs+0xb2>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80144ee:	4b13      	ldr	r3, [pc, #76]	; (801453c <sys_timeout_abs+0xb8>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	617b      	str	r3, [r7, #20]
 80144f4:	e01a      	b.n	801452c <sys_timeout_abs+0xa8>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d00b      	beq.n	8014516 <sys_timeout_abs+0x92>
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	685a      	ldr	r2, [r3, #4]
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	685b      	ldr	r3, [r3, #4]
 8014508:	1ad3      	subs	r3, r2, r3
 801450a:	0fdb      	lsrs	r3, r3, #31
 801450c:	f003 0301 	and.w	r3, r3, #1
 8014510:	b2db      	uxtb	r3, r3
 8014512:	2b00      	cmp	r3, #0
 8014514:	d007      	beq.n	8014526 <sys_timeout_abs+0xa2>
        timeout->next = t->next;
 8014516:	697b      	ldr	r3, [r7, #20]
 8014518:	681a      	ldr	r2, [r3, #0]
 801451a:	693b      	ldr	r3, [r7, #16]
 801451c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	693a      	ldr	r2, [r7, #16]
 8014522:	601a      	str	r2, [r3, #0]
        break;
 8014524:	e007      	b.n	8014536 <sys_timeout_abs+0xb2>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	617b      	str	r3, [r7, #20]
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d1e1      	bne.n	80144f6 <sys_timeout_abs+0x72>
 8014532:	e000      	b.n	8014536 <sys_timeout_abs+0xb2>
    return;
 8014534:	bf00      	nop
      }
    }
  }
}
 8014536:	3718      	adds	r7, #24
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}
 801453c:	20007808 	.word	0x20007808

08014540 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b086      	sub	sp, #24
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	685b      	ldr	r3, [r3, #4]
 8014550:	4798      	blx	r3

  now = sys_now();
 8014552:	f7f2 f919 	bl	8006788 <sys_now>
 8014556:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	4b0f      	ldr	r3, [pc, #60]	; (801459c <lwip_cyclic_timer+0x5c>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	4413      	add	r3, r2
 8014562:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014564:	68fa      	ldr	r2, [r7, #12]
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	1ad3      	subs	r3, r2, r3
 801456a:	0fdb      	lsrs	r3, r3, #31
 801456c:	f003 0301 	and.w	r3, r3, #1
 8014570:	b2db      	uxtb	r3, r3
 8014572:	2b00      	cmp	r3, #0
 8014574:	d009      	beq.n	801458a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	681a      	ldr	r2, [r3, #0]
 801457a:	693b      	ldr	r3, [r7, #16]
 801457c:	4413      	add	r3, r2
 801457e:	687a      	ldr	r2, [r7, #4]
 8014580:	4907      	ldr	r1, [pc, #28]	; (80145a0 <lwip_cyclic_timer+0x60>)
 8014582:	4618      	mov	r0, r3
 8014584:	f7ff ff7e 	bl	8014484 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014588:	e004      	b.n	8014594 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801458a:	687a      	ldr	r2, [r7, #4]
 801458c:	4904      	ldr	r1, [pc, #16]	; (80145a0 <lwip_cyclic_timer+0x60>)
 801458e:	68f8      	ldr	r0, [r7, #12]
 8014590:	f7ff ff78 	bl	8014484 <sys_timeout_abs>
}
 8014594:	bf00      	nop
 8014596:	3718      	adds	r7, #24
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	2000780c 	.word	0x2000780c
 80145a0:	08014541 	.word	0x08014541

080145a4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145aa:	2301      	movs	r3, #1
 80145ac:	607b      	str	r3, [r7, #4]
 80145ae:	e00e      	b.n	80145ce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80145b0:	4a0b      	ldr	r2, [pc, #44]	; (80145e0 <sys_timeouts_init+0x3c>)
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	00db      	lsls	r3, r3, #3
 80145bc:	4a08      	ldr	r2, [pc, #32]	; (80145e0 <sys_timeouts_init+0x3c>)
 80145be:	4413      	add	r3, r2
 80145c0:	461a      	mov	r2, r3
 80145c2:	4908      	ldr	r1, [pc, #32]	; (80145e4 <sys_timeouts_init+0x40>)
 80145c4:	f000 f810 	bl	80145e8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	3301      	adds	r3, #1
 80145cc:	607b      	str	r3, [r7, #4]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2b04      	cmp	r3, #4
 80145d2:	d9ed      	bls.n	80145b0 <sys_timeouts_init+0xc>
  }
}
 80145d4:	bf00      	nop
 80145d6:	bf00      	nop
 80145d8:	3708      	adds	r7, #8
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	0801bb14 	.word	0x0801bb14
 80145e4:	08014541 	.word	0x08014541

080145e8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b086      	sub	sp, #24
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	60f8      	str	r0, [r7, #12]
 80145f0:	60b9      	str	r1, [r7, #8]
 80145f2:	607a      	str	r2, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80145f4:	f7f2 f8c8 	bl	8006788 <sys_now>
 80145f8:	4602      	mov	r2, r0
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	4413      	add	r3, r2
 80145fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	68b9      	ldr	r1, [r7, #8]
 8014604:	6978      	ldr	r0, [r7, #20]
 8014606:	f7ff ff3d 	bl	8014484 <sys_timeout_abs>
#endif
}
 801460a:	bf00      	nop
 801460c:	3718      	adds	r7, #24
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
	...

08014614 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b084      	sub	sp, #16
 8014618:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801461a:	f7f2 f8b5 	bl	8006788 <sys_now>
 801461e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8014620:	4b1a      	ldr	r3, [pc, #104]	; (801468c <sys_check_timeouts+0x78>)
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	b2db      	uxtb	r3, r3
 8014626:	2b00      	cmp	r3, #0
 8014628:	d001      	beq.n	801462e <sys_check_timeouts+0x1a>
 801462a:	f7fa f96f 	bl	800e90c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801462e:	4b18      	ldr	r3, [pc, #96]	; (8014690 <sys_check_timeouts+0x7c>)
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d022      	beq.n	8014680 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	68fa      	ldr	r2, [r7, #12]
 8014640:	1ad3      	subs	r3, r2, r3
 8014642:	0fdb      	lsrs	r3, r3, #31
 8014644:	f003 0301 	and.w	r3, r3, #1
 8014648:	b2db      	uxtb	r3, r3
 801464a:	2b00      	cmp	r3, #0
 801464c:	d11a      	bne.n	8014684 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	4a0f      	ldr	r2, [pc, #60]	; (8014690 <sys_check_timeouts+0x7c>)
 8014654:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	689b      	ldr	r3, [r3, #8]
 801465a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	68db      	ldr	r3, [r3, #12]
 8014660:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	685b      	ldr	r3, [r3, #4]
 8014666:	4a0b      	ldr	r2, [pc, #44]	; (8014694 <sys_check_timeouts+0x80>)
 8014668:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801466a:	68b9      	ldr	r1, [r7, #8]
 801466c:	2007      	movs	r0, #7
 801466e:	f7f9 ff09 	bl	800e484 <memp_free>
    if (handler != NULL) {
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d0d3      	beq.n	8014620 <sys_check_timeouts+0xc>
      handler(arg);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	6838      	ldr	r0, [r7, #0]
 801467c:	4798      	blx	r3
  do {
 801467e:	e7cf      	b.n	8014620 <sys_check_timeouts+0xc>
      return;
 8014680:	bf00      	nop
 8014682:	e000      	b.n	8014686 <sys_check_timeouts+0x72>
      return;
 8014684:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}
 801468c:	20007709 	.word	0x20007709
 8014690:	20007808 	.word	0x20007808
 8014694:	2000780c 	.word	0x2000780c

08014698 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801469c:	f004 fdb4 	bl	8019208 <rand>
 80146a0:	4603      	mov	r3, r0
 80146a2:	b29b      	uxth	r3, r3
 80146a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80146a8:	b29b      	uxth	r3, r3
 80146aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80146ae:	b29a      	uxth	r2, r3
 80146b0:	4b01      	ldr	r3, [pc, #4]	; (80146b8 <udp_init+0x20>)
 80146b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80146b4:	bf00      	nop
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	2000013c 	.word	0x2000013c

080146bc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80146bc:	b480      	push	{r7}
 80146be:	b083      	sub	sp, #12
 80146c0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80146c2:	2300      	movs	r3, #0
 80146c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80146c6:	4b17      	ldr	r3, [pc, #92]	; (8014724 <udp_new_port+0x68>)
 80146c8:	881b      	ldrh	r3, [r3, #0]
 80146ca:	1c5a      	adds	r2, r3, #1
 80146cc:	b291      	uxth	r1, r2
 80146ce:	4a15      	ldr	r2, [pc, #84]	; (8014724 <udp_new_port+0x68>)
 80146d0:	8011      	strh	r1, [r2, #0]
 80146d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146d6:	4293      	cmp	r3, r2
 80146d8:	d103      	bne.n	80146e2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80146da:	4b12      	ldr	r3, [pc, #72]	; (8014724 <udp_new_port+0x68>)
 80146dc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80146e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80146e2:	4b11      	ldr	r3, [pc, #68]	; (8014728 <udp_new_port+0x6c>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	603b      	str	r3, [r7, #0]
 80146e8:	e011      	b.n	801470e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	8a5a      	ldrh	r2, [r3, #18]
 80146ee:	4b0d      	ldr	r3, [pc, #52]	; (8014724 <udp_new_port+0x68>)
 80146f0:	881b      	ldrh	r3, [r3, #0]
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d108      	bne.n	8014708 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80146f6:	88fb      	ldrh	r3, [r7, #6]
 80146f8:	3301      	adds	r3, #1
 80146fa:	80fb      	strh	r3, [r7, #6]
 80146fc:	88fb      	ldrh	r3, [r7, #6]
 80146fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014702:	d3e0      	bcc.n	80146c6 <udp_new_port+0xa>
        return 0;
 8014704:	2300      	movs	r3, #0
 8014706:	e007      	b.n	8014718 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	68db      	ldr	r3, [r3, #12]
 801470c:	603b      	str	r3, [r7, #0]
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d1ea      	bne.n	80146ea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014714:	4b03      	ldr	r3, [pc, #12]	; (8014724 <udp_new_port+0x68>)
 8014716:	881b      	ldrh	r3, [r3, #0]
}
 8014718:	4618      	mov	r0, r3
 801471a:	370c      	adds	r7, #12
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr
 8014724:	2000013c 	.word	0x2000013c
 8014728:	20007814 	.word	0x20007814

0801472c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801472c:	b480      	push	{r7}
 801472e:	b085      	sub	sp, #20
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	4613      	mov	r3, r2
 8014738:	71fb      	strb	r3, [r7, #7]

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	7a1b      	ldrb	r3, [r3, #8]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d00b      	beq.n	801475a <udp_input_local_match+0x2e>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	7a1a      	ldrb	r2, [r3, #8]
 8014746:	4b1e      	ldr	r3, [pc, #120]	; (80147c0 <udp_input_local_match+0x94>)
 8014748:	685b      	ldr	r3, [r3, #4]
 801474a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801474e:	3301      	adds	r3, #1
 8014750:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014752:	429a      	cmp	r2, r3
 8014754:	d001      	beq.n	801475a <udp_input_local_match+0x2e>
    return 0;
 8014756:	2300      	movs	r3, #0
 8014758:	e02b      	b.n	80147b2 <udp_input_local_match+0x86>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801475a:	79fb      	ldrb	r3, [r7, #7]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d018      	beq.n	8014792 <udp_input_local_match+0x66>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d013      	beq.n	801478e <udp_input_local_match+0x62>
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d00f      	beq.n	801478e <udp_input_local_match+0x62>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801476e:	4b14      	ldr	r3, [pc, #80]	; (80147c0 <udp_input_local_match+0x94>)
 8014770:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014776:	d00a      	beq.n	801478e <udp_input_local_match+0x62>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681a      	ldr	r2, [r3, #0]
 801477c:	4b10      	ldr	r3, [pc, #64]	; (80147c0 <udp_input_local_match+0x94>)
 801477e:	695b      	ldr	r3, [r3, #20]
 8014780:	405a      	eors	r2, r3
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	3308      	adds	r3, #8
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801478a:	2b00      	cmp	r3, #0
 801478c:	d110      	bne.n	80147b0 <udp_input_local_match+0x84>
          return 1;
 801478e:	2301      	movs	r3, #1
 8014790:	e00f      	b.n	80147b2 <udp_input_local_match+0x86>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d009      	beq.n	80147ac <udp_input_local_match+0x80>
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d005      	beq.n	80147ac <udp_input_local_match+0x80>
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	681a      	ldr	r2, [r3, #0]
 80147a4:	4b06      	ldr	r3, [pc, #24]	; (80147c0 <udp_input_local_match+0x94>)
 80147a6:	695b      	ldr	r3, [r3, #20]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d101      	bne.n	80147b0 <udp_input_local_match+0x84>
        return 1;
 80147ac:	2301      	movs	r3, #1
 80147ae:	e000      	b.n	80147b2 <udp_input_local_match+0x86>
      }
  }

  return 0;
 80147b0:	2300      	movs	r3, #0
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	3714      	adds	r7, #20
 80147b6:	46bd      	mov	sp, r7
 80147b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147bc:	4770      	bx	lr
 80147be:	bf00      	nop
 80147c0:	200076e8 	.word	0x200076e8

080147c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80147c4:	b590      	push	{r4, r7, lr}
 80147c6:	b08d      	sub	sp, #52	; 0x34
 80147c8:	af02      	add	r7, sp, #8
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80147ce:	2300      	movs	r3, #0
 80147d0:	77fb      	strb	r3, [r7, #31]
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 80147d2:	4b95      	ldr	r3, [pc, #596]	; (8014a28 <udp_input+0x264>)
 80147d4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80147d8:	3301      	adds	r3, #1
 80147da:	b29a      	uxth	r2, r3
 80147dc:	4b92      	ldr	r3, [pc, #584]	; (8014a28 <udp_input+0x264>)
 80147de:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	895b      	ldrh	r3, [r3, #10]
 80147e6:	2b07      	cmp	r3, #7
 80147e8:	d813      	bhi.n	8014812 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 80147ea:	4b8f      	ldr	r3, [pc, #572]	; (8014a28 <udp_input+0x264>)
 80147ec:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80147f0:	3301      	adds	r3, #1
 80147f2:	b29a      	uxth	r2, r3
 80147f4:	4b8c      	ldr	r3, [pc, #560]	; (8014a28 <udp_input+0x264>)
 80147f6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 80147fa:	4b8b      	ldr	r3, [pc, #556]	; (8014a28 <udp_input+0x264>)
 80147fc:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8014800:	3301      	adds	r3, #1
 8014802:	b29a      	uxth	r2, r3
 8014804:	4b88      	ldr	r3, [pc, #544]	; (8014a28 <udp_input+0x264>)
 8014806:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f7fa fb16 	bl	800ee3c <pbuf_free>
    goto end;
 8014810:	e108      	b.n	8014a24 <udp_input+0x260>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014818:	4b84      	ldr	r3, [pc, #528]	; (8014a2c <udp_input+0x268>)
 801481a:	695b      	ldr	r3, [r3, #20]
 801481c:	4a83      	ldr	r2, [pc, #524]	; (8014a2c <udp_input+0x268>)
 801481e:	6812      	ldr	r2, [r2, #0]
 8014820:	4611      	mov	r1, r2
 8014822:	4618      	mov	r0, r3
 8014824:	f003 fd9a 	bl	801835c <ip4_addr_isbroadcast_u32>
 8014828:	4603      	mov	r3, r0
 801482a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	881b      	ldrh	r3, [r3, #0]
 8014830:	b29b      	uxth	r3, r3
 8014832:	4618      	mov	r0, r3
 8014834:	f7f9 fb0a 	bl	800de4c <lwip_htons>
 8014838:	4603      	mov	r3, r0
 801483a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	885b      	ldrh	r3, [r3, #2]
 8014840:	b29b      	uxth	r3, r3
 8014842:	4618      	mov	r0, r3
 8014844:	f7f9 fb02 	bl	800de4c <lwip_htons>
 8014848:	4603      	mov	r3, r0
 801484a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801484c:	2300      	movs	r3, #0
 801484e:	623b      	str	r3, [r7, #32]
  prev = NULL;
 8014850:	2300      	movs	r3, #0
 8014852:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 8014854:	2300      	movs	r3, #0
 8014856:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014858:	4b75      	ldr	r3, [pc, #468]	; (8014a30 <udp_input+0x26c>)
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	623b      	str	r3, [r7, #32]
 801485e:	e05d      	b.n	801491c <udp_input+0x158>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014860:	6a3b      	ldr	r3, [r7, #32]
 8014862:	8a5b      	ldrh	r3, [r3, #18]
 8014864:	89fa      	ldrh	r2, [r7, #14]
 8014866:	429a      	cmp	r2, r3
 8014868:	d153      	bne.n	8014912 <udp_input+0x14e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801486a:	7cfb      	ldrb	r3, [r7, #19]
 801486c:	461a      	mov	r2, r3
 801486e:	6839      	ldr	r1, [r7, #0]
 8014870:	6a38      	ldr	r0, [r7, #32]
 8014872:	f7ff ff5b 	bl	801472c <udp_input_local_match>
 8014876:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014878:	2b00      	cmp	r3, #0
 801487a:	d04a      	beq.n	8014912 <udp_input+0x14e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801487c:	6a3b      	ldr	r3, [r7, #32]
 801487e:	7c1b      	ldrb	r3, [r3, #16]
 8014880:	f003 0304 	and.w	r3, r3, #4
 8014884:	2b00      	cmp	r3, #0
 8014886:	d11d      	bne.n	80148c4 <udp_input+0x100>
        if (uncon_pcb == NULL) {
 8014888:	69bb      	ldr	r3, [r7, #24]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d102      	bne.n	8014894 <udp_input+0xd0>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801488e:	6a3b      	ldr	r3, [r7, #32]
 8014890:	61bb      	str	r3, [r7, #24]
 8014892:	e017      	b.n	80148c4 <udp_input+0x100>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014894:	7cfb      	ldrb	r3, [r7, #19]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d014      	beq.n	80148c4 <udp_input+0x100>
 801489a:	4b64      	ldr	r3, [pc, #400]	; (8014a2c <udp_input+0x268>)
 801489c:	695b      	ldr	r3, [r3, #20]
 801489e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148a2:	d10f      	bne.n	80148c4 <udp_input+0x100>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80148a4:	69bb      	ldr	r3, [r7, #24]
 80148a6:	681a      	ldr	r2, [r3, #0]
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	3304      	adds	r3, #4
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	429a      	cmp	r2, r3
 80148b0:	d008      	beq.n	80148c4 <udp_input+0x100>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80148b2:	6a3b      	ldr	r3, [r7, #32]
 80148b4:	681a      	ldr	r2, [r3, #0]
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	3304      	adds	r3, #4
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	429a      	cmp	r2, r3
 80148be:	d101      	bne.n	80148c4 <udp_input+0x100>
              /* better match */
              uncon_pcb = pcb;
 80148c0:	6a3b      	ldr	r3, [r7, #32]
 80148c2:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80148c4:	6a3b      	ldr	r3, [r7, #32]
 80148c6:	8a9b      	ldrh	r3, [r3, #20]
 80148c8:	8a3a      	ldrh	r2, [r7, #16]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d121      	bne.n	8014912 <udp_input+0x14e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80148ce:	6a3b      	ldr	r3, [r7, #32]
 80148d0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d005      	beq.n	80148e2 <udp_input+0x11e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80148d6:	6a3b      	ldr	r3, [r7, #32]
 80148d8:	685a      	ldr	r2, [r3, #4]
 80148da:	4b54      	ldr	r3, [pc, #336]	; (8014a2c <udp_input+0x268>)
 80148dc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80148de:	429a      	cmp	r2, r3
 80148e0:	d117      	bne.n	8014912 <udp_input+0x14e>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80148e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d00b      	beq.n	8014900 <udp_input+0x13c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80148e8:	6a3b      	ldr	r3, [r7, #32]
 80148ea:	68da      	ldr	r2, [r3, #12]
 80148ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80148f0:	4b4f      	ldr	r3, [pc, #316]	; (8014a30 <udp_input+0x26c>)
 80148f2:	681a      	ldr	r2, [r3, #0]
 80148f4:	6a3b      	ldr	r3, [r7, #32]
 80148f6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80148f8:	4a4d      	ldr	r2, [pc, #308]	; (8014a30 <udp_input+0x26c>)
 80148fa:	6a3b      	ldr	r3, [r7, #32]
 80148fc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80148fe:	e010      	b.n	8014922 <udp_input+0x15e>
          UDP_STATS_INC(udp.cachehit);
 8014900:	4b49      	ldr	r3, [pc, #292]	; (8014a28 <udp_input+0x264>)
 8014902:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8014906:	3301      	adds	r3, #1
 8014908:	b29a      	uxth	r2, r3
 801490a:	4b47      	ldr	r3, [pc, #284]	; (8014a28 <udp_input+0x264>)
 801490c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 8014910:	e007      	b.n	8014922 <udp_input+0x15e>
      }
    }

    prev = pcb;
 8014912:	6a3b      	ldr	r3, [r7, #32]
 8014914:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014916:	6a3b      	ldr	r3, [r7, #32]
 8014918:	68db      	ldr	r3, [r3, #12]
 801491a:	623b      	str	r3, [r7, #32]
 801491c:	6a3b      	ldr	r3, [r7, #32]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d19e      	bne.n	8014860 <udp_input+0x9c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014922:	6a3b      	ldr	r3, [r7, #32]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d101      	bne.n	801492c <udp_input+0x168>
    pcb = uncon_pcb;
 8014928:	69bb      	ldr	r3, [r7, #24]
 801492a:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801492c:	6a3b      	ldr	r3, [r7, #32]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d002      	beq.n	8014938 <udp_input+0x174>
    for_us = 1;
 8014932:	2301      	movs	r3, #1
 8014934:	77fb      	strb	r3, [r7, #31]
 8014936:	e00a      	b.n	801494e <udp_input+0x18a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	3304      	adds	r3, #4
 801493c:	681a      	ldr	r2, [r3, #0]
 801493e:	4b3b      	ldr	r3, [pc, #236]	; (8014a2c <udp_input+0x268>)
 8014940:	695b      	ldr	r3, [r3, #20]
 8014942:	429a      	cmp	r2, r3
 8014944:	bf0c      	ite	eq
 8014946:	2301      	moveq	r3, #1
 8014948:	2300      	movne	r3, #0
 801494a:	b2db      	uxtb	r3, r3
 801494c:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801494e:	7ffb      	ldrb	r3, [r7, #31]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d063      	beq.n	8014a1c <udp_input+0x258>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	88db      	ldrh	r3, [r3, #6]
 8014958:	b29b      	uxth	r3, r3
 801495a:	2b00      	cmp	r3, #0
 801495c:	d00b      	beq.n	8014976 <udp_input+0x1b2>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	891a      	ldrh	r2, [r3, #8]
 8014962:	4b34      	ldr	r3, [pc, #208]	; (8014a34 <udp_input+0x270>)
 8014964:	9300      	str	r3, [sp, #0]
 8014966:	4b34      	ldr	r3, [pc, #208]	; (8014a38 <udp_input+0x274>)
 8014968:	2111      	movs	r1, #17
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f7f9 fc4a 	bl	800e204 <ip_chksum_pseudo>
 8014970:	4603      	mov	r3, r0
 8014972:	2b00      	cmp	r3, #0
 8014974:	d162      	bne.n	8014a3c <udp_input+0x278>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014976:	2108      	movs	r1, #8
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f7fa f9f2 	bl	800ed62 <pbuf_remove_header>
 801497e:	4603      	mov	r3, r0
 8014980:	2b00      	cmp	r3, #0
 8014982:	d00b      	beq.n	801499c <udp_input+0x1d8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
 8014984:	4b28      	ldr	r3, [pc, #160]	; (8014a28 <udp_input+0x264>)
 8014986:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801498a:	3301      	adds	r3, #1
 801498c:	b29a      	uxth	r2, r3
 801498e:	4b26      	ldr	r3, [pc, #152]	; (8014a28 <udp_input+0x264>)
 8014990:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f7fa fa51 	bl	800ee3c <pbuf_free>
      goto end;
 801499a:	e043      	b.n	8014a24 <udp_input+0x260>
    }

    if (pcb != NULL) {
 801499c:	6a3b      	ldr	r3, [r7, #32]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d012      	beq.n	80149c8 <udp_input+0x204>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80149a2:	6a3b      	ldr	r3, [r7, #32]
 80149a4:	699b      	ldr	r3, [r3, #24]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d00a      	beq.n	80149c0 <udp_input+0x1fc>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80149aa:	6a3b      	ldr	r3, [r7, #32]
 80149ac:	699c      	ldr	r4, [r3, #24]
 80149ae:	6a3b      	ldr	r3, [r7, #32]
 80149b0:	69d8      	ldr	r0, [r3, #28]
 80149b2:	8a3b      	ldrh	r3, [r7, #16]
 80149b4:	9300      	str	r3, [sp, #0]
 80149b6:	4b20      	ldr	r3, [pc, #128]	; (8014a38 <udp_input+0x274>)
 80149b8:	687a      	ldr	r2, [r7, #4]
 80149ba:	6a39      	ldr	r1, [r7, #32]
 80149bc:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80149be:	e051      	b.n	8014a64 <udp_input+0x2a0>
        pbuf_free(p);
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f7fa fa3b 	bl	800ee3c <pbuf_free>
        goto end;
 80149c6:	e02d      	b.n	8014a24 <udp_input+0x260>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80149c8:	7cfb      	ldrb	r3, [r7, #19]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d112      	bne.n	80149f4 <udp_input+0x230>
 80149ce:	4b17      	ldr	r3, [pc, #92]	; (8014a2c <udp_input+0x268>)
 80149d0:	695b      	ldr	r3, [r3, #20]
 80149d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149d6:	2be0      	cmp	r3, #224	; 0xe0
 80149d8:	d00c      	beq.n	80149f4 <udp_input+0x230>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80149da:	4b14      	ldr	r3, [pc, #80]	; (8014a2c <udp_input+0x268>)
 80149dc:	899b      	ldrh	r3, [r3, #12]
 80149de:	3308      	adds	r3, #8
 80149e0:	b29b      	uxth	r3, r3
 80149e2:	b21b      	sxth	r3, r3
 80149e4:	4619      	mov	r1, r3
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f7fa fa16 	bl	800ee18 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80149ec:	2103      	movs	r1, #3
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f003 f886 	bl	8017b00 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 80149f4:	4b0c      	ldr	r3, [pc, #48]	; (8014a28 <udp_input+0x264>)
 80149f6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80149fa:	3301      	adds	r3, #1
 80149fc:	b29a      	uxth	r2, r3
 80149fe:	4b0a      	ldr	r3, [pc, #40]	; (8014a28 <udp_input+0x264>)
 8014a00:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 8014a04:	4b08      	ldr	r3, [pc, #32]	; (8014a28 <udp_input+0x264>)
 8014a06:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	b29a      	uxth	r2, r3
 8014a0e:	4b06      	ldr	r3, [pc, #24]	; (8014a28 <udp_input+0x264>)
 8014a10:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f7fa fa11 	bl	800ee3c <pbuf_free>
  return;
 8014a1a:	e023      	b.n	8014a64 <udp_input+0x2a0>
    pbuf_free(p);
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f7fa fa0d 	bl	800ee3c <pbuf_free>
  return;
 8014a22:	e01f      	b.n	8014a64 <udp_input+0x2a0>
 8014a24:	e01e      	b.n	8014a64 <udp_input+0x2a0>
 8014a26:	bf00      	nop
 8014a28:	2000770c 	.word	0x2000770c
 8014a2c:	200076e8 	.word	0x200076e8
 8014a30:	20007814 	.word	0x20007814
 8014a34:	200076fc 	.word	0x200076fc
 8014a38:	200076f8 	.word	0x200076f8
            goto chkerr;
 8014a3c:	bf00      	nop
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
 8014a3e:	4b0b      	ldr	r3, [pc, #44]	; (8014a6c <udp_input+0x2a8>)
 8014a40:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8014a44:	3301      	adds	r3, #1
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	4b08      	ldr	r3, [pc, #32]	; (8014a6c <udp_input+0x2a8>)
 8014a4a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
  UDP_STATS_INC(udp.drop);
 8014a4e:	4b07      	ldr	r3, [pc, #28]	; (8014a6c <udp_input+0x2a8>)
 8014a50:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8014a54:	3301      	adds	r3, #1
 8014a56:	b29a      	uxth	r2, r3
 8014a58:	4b04      	ldr	r3, [pc, #16]	; (8014a6c <udp_input+0x2a8>)
 8014a5a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7fa f9ec 	bl	800ee3c <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014a64:	372c      	adds	r7, #44	; 0x2c
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd90      	pop	{r4, r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	2000770c 	.word	0x2000770c

08014a70 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b088      	sub	sp, #32
 8014a74:	af02      	add	r7, sp, #8
 8014a76:	60f8      	str	r0, [r7, #12]
 8014a78:	60b9      	str	r1, [r7, #8]
 8014a7a:	607a      	str	r2, [r7, #4]
 8014a7c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d102      	bne.n	8014a8a <udp_sendto_if+0x1a>
 8014a84:	f06f 030f 	mvn.w	r3, #15
 8014a88:	e03a      	b.n	8014b00 <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014a8a:	68bb      	ldr	r3, [r7, #8]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d102      	bne.n	8014a96 <udp_sendto_if+0x26>
 8014a90:	f06f 030f 	mvn.w	r3, #15
 8014a94:	e034      	b.n	8014b00 <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d102      	bne.n	8014aa2 <udp_sendto_if+0x32>
 8014a9c:	f06f 030f 	mvn.w	r3, #15
 8014aa0:	e02e      	b.n	8014b00 <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014aa2:	6a3b      	ldr	r3, [r7, #32]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d102      	bne.n	8014aae <udp_sendto_if+0x3e>
 8014aa8:	f06f 030f 	mvn.w	r3, #15
 8014aac:	e028      	b.n	8014b00 <udp_sendto_if+0x90>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d009      	beq.n	8014ac8 <udp_sendto_if+0x58>
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d005      	beq.n	8014ac8 <udp_sendto_if+0x58>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014ac4:	2be0      	cmp	r3, #224	; 0xe0
 8014ac6:	d103      	bne.n	8014ad0 <udp_sendto_if+0x60>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014ac8:	6a3b      	ldr	r3, [r7, #32]
 8014aca:	3304      	adds	r3, #4
 8014acc:	617b      	str	r3, [r7, #20]
 8014ace:	e00b      	b.n	8014ae8 <udp_sendto_if+0x78>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	6a3b      	ldr	r3, [r7, #32]
 8014ad6:	3304      	adds	r3, #4
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d002      	beq.n	8014ae4 <udp_sendto_if+0x74>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014ade:	f06f 0303 	mvn.w	r3, #3
 8014ae2:	e00d      	b.n	8014b00 <udp_sendto_if+0x90>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014ae8:	887a      	ldrh	r2, [r7, #2]
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	9301      	str	r3, [sp, #4]
 8014aee:	6a3b      	ldr	r3, [r7, #32]
 8014af0:	9300      	str	r3, [sp, #0]
 8014af2:	4613      	mov	r3, r2
 8014af4:	687a      	ldr	r2, [r7, #4]
 8014af6:	68b9      	ldr	r1, [r7, #8]
 8014af8:	68f8      	ldr	r0, [r7, #12]
 8014afa:	f000 f805 	bl	8014b08 <udp_sendto_if_src>
 8014afe:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3718      	adds	r7, #24
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b08e      	sub	sp, #56	; 0x38
 8014b0c:	af04      	add	r7, sp, #16
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	60b9      	str	r1, [r7, #8]
 8014b12:	607a      	str	r2, [r7, #4]
 8014b14:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d102      	bne.n	8014b22 <udp_sendto_if_src+0x1a>
 8014b1c:	f06f 030f 	mvn.w	r3, #15
 8014b20:	e0b7      	b.n	8014c92 <udp_sendto_if_src+0x18a>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d102      	bne.n	8014b2e <udp_sendto_if_src+0x26>
 8014b28:	f06f 030f 	mvn.w	r3, #15
 8014b2c:	e0b1      	b.n	8014c92 <udp_sendto_if_src+0x18a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d102      	bne.n	8014b3a <udp_sendto_if_src+0x32>
 8014b34:	f06f 030f 	mvn.w	r3, #15
 8014b38:	e0ab      	b.n	8014c92 <udp_sendto_if_src+0x18a>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d102      	bne.n	8014b46 <udp_sendto_if_src+0x3e>
 8014b40:	f06f 030f 	mvn.w	r3, #15
 8014b44:	e0a5      	b.n	8014c92 <udp_sendto_if_src+0x18a>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d102      	bne.n	8014b52 <udp_sendto_if_src+0x4a>
 8014b4c:	f06f 030f 	mvn.w	r3, #15
 8014b50:	e09f      	b.n	8014c92 <udp_sendto_if_src+0x18a>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	8a5b      	ldrh	r3, [r3, #18]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d10f      	bne.n	8014b7a <udp_sendto_if_src+0x72>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014b5a:	68f9      	ldr	r1, [r7, #12]
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	8a5b      	ldrh	r3, [r3, #18]
 8014b60:	461a      	mov	r2, r3
 8014b62:	68f8      	ldr	r0, [r7, #12]
 8014b64:	f000 f89c 	bl	8014ca0 <udp_bind>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 8014b6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d002      	beq.n	8014b7a <udp_sendto_if_src+0x72>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014b74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014b78:	e08b      	b.n	8014c92 <udp_sendto_if_src+0x18a>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	891b      	ldrh	r3, [r3, #8]
 8014b7e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014b82:	4293      	cmp	r3, r2
 8014b84:	d902      	bls.n	8014b8c <udp_sendto_if_src+0x84>
    return ERR_MEM;
 8014b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b8a:	e082      	b.n	8014c92 <udp_sendto_if_src+0x18a>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014b8c:	2108      	movs	r1, #8
 8014b8e:	68b8      	ldr	r0, [r7, #8]
 8014b90:	f7fa f8d8 	bl	800ed44 <pbuf_add_header>
 8014b94:	4603      	mov	r3, r0
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d015      	beq.n	8014bc6 <udp_sendto_if_src+0xbe>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014b9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b9e:	2108      	movs	r1, #8
 8014ba0:	2024      	movs	r0, #36	; 0x24
 8014ba2:	f7f9 ff09 	bl	800e9b8 <pbuf_alloc>
 8014ba6:	6238      	str	r0, [r7, #32]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014ba8:	6a3b      	ldr	r3, [r7, #32]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d102      	bne.n	8014bb4 <udp_sendto_if_src+0xac>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bb2:	e06e      	b.n	8014c92 <udp_sendto_if_src+0x18a>
    }
    if (p->tot_len != 0) {
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	891b      	ldrh	r3, [r3, #8]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d006      	beq.n	8014bca <udp_sendto_if_src+0xc2>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014bbc:	68b9      	ldr	r1, [r7, #8]
 8014bbe:	6a38      	ldr	r0, [r7, #32]
 8014bc0:	f7fa f9e6 	bl	800ef90 <pbuf_chain>
 8014bc4:	e001      	b.n	8014bca <udp_sendto_if_src+0xc2>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	623b      	str	r3, [r7, #32]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014bca:	6a3b      	ldr	r3, [r7, #32]
 8014bcc:	685b      	ldr	r3, [r3, #4]
 8014bce:	61bb      	str	r3, [r7, #24]
  udphdr->src = lwip_htons(pcb->local_port);
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	8a5b      	ldrh	r3, [r3, #18]
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7f9 f939 	bl	800de4c <lwip_htons>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	461a      	mov	r2, r3
 8014bde:	69bb      	ldr	r3, [r7, #24]
 8014be0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014be2:	887b      	ldrh	r3, [r7, #2]
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7f9 f931 	bl	800de4c <lwip_htons>
 8014bea:	4603      	mov	r3, r0
 8014bec:	461a      	mov	r2, r3
 8014bee:	69bb      	ldr	r3, [r7, #24]
 8014bf0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	719a      	strb	r2, [r3, #6]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014bfc:	6a3b      	ldr	r3, [r7, #32]
 8014bfe:	891b      	ldrh	r3, [r3, #8]
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7f9 f923 	bl	800de4c <lwip_htons>
 8014c06:	4603      	mov	r3, r0
 8014c08:	461a      	mov	r2, r3
 8014c0a:	69bb      	ldr	r3, [r7, #24]
 8014c0c:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	7c1b      	ldrb	r3, [r3, #16]
 8014c12:	f003 0301 	and.w	r3, r3, #1
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d113      	bne.n	8014c42 <udp_sendto_if_src+0x13a>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 8014c1a:	6a3b      	ldr	r3, [r7, #32]
 8014c1c:	891a      	ldrh	r2, [r3, #8]
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	9300      	str	r3, [sp, #0]
 8014c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c24:	2111      	movs	r1, #17
 8014c26:	6a38      	ldr	r0, [r7, #32]
 8014c28:	f7f9 faec 	bl	800e204 <ip_chksum_pseudo>
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	84fb      	strh	r3, [r7, #38]	; 0x26
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 8014c30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d102      	bne.n	8014c3c <udp_sendto_if_src+0x134>
          udpchksum = 0xffff;
 8014c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c3a:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        udphdr->chksum = udpchksum;
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014c40:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014c42:	2311      	movs	r3, #17
 8014c44:	75fb      	strb	r3, [r7, #23]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	7adb      	ldrb	r3, [r3, #11]
 8014c4a:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	7a9b      	ldrb	r3, [r3, #10]
 8014c50:	7db9      	ldrb	r1, [r7, #22]
 8014c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c54:	9202      	str	r2, [sp, #8]
 8014c56:	7dfa      	ldrb	r2, [r7, #23]
 8014c58:	9201      	str	r2, [sp, #4]
 8014c5a:	9300      	str	r3, [sp, #0]
 8014c5c:	460b      	mov	r3, r1
 8014c5e:	687a      	ldr	r2, [r7, #4]
 8014c60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014c62:	6a38      	ldr	r0, [r7, #32]
 8014c64:	f003 fa6a 	bl	801813c <ip4_output_if_src>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	77fb      	strb	r3, [r7, #31]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014c6c:	6a3a      	ldr	r2, [r7, #32]
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d004      	beq.n	8014c7e <udp_sendto_if_src+0x176>
    /* free the header pbuf */
    pbuf_free(q);
 8014c74:	6a38      	ldr	r0, [r7, #32]
 8014c76:	f7fa f8e1 	bl	800ee3c <pbuf_free>
    q = NULL;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	623b      	str	r3, [r7, #32]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 8014c7e:	4b07      	ldr	r3, [pc, #28]	; (8014c9c <udp_sendto_if_src+0x194>)
 8014c80:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8014c84:	3301      	adds	r3, #1
 8014c86:	b29a      	uxth	r2, r3
 8014c88:	4b04      	ldr	r3, [pc, #16]	; (8014c9c <udp_sendto_if_src+0x194>)
 8014c8a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 8014c8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	3728      	adds	r7, #40	; 0x28
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd80      	pop	{r7, pc}
 8014c9a:	bf00      	nop
 8014c9c:	2000770c 	.word	0x2000770c

08014ca0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b086      	sub	sp, #24
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	60f8      	str	r0, [r7, #12]
 8014ca8:	60b9      	str	r1, [r7, #8]
 8014caa:	4613      	mov	r3, r2
 8014cac:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d101      	bne.n	8014cb8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014cb4:	4b36      	ldr	r3, [pc, #216]	; (8014d90 <udp_bind+0xf0>)
 8014cb6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d102      	bne.n	8014cc4 <udp_bind+0x24>
 8014cbe:	f06f 030f 	mvn.w	r3, #15
 8014cc2:	e060      	b.n	8014d86 <udp_bind+0xe6>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014cc8:	4b32      	ldr	r3, [pc, #200]	; (8014d94 <udp_bind+0xf4>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	617b      	str	r3, [r7, #20]
 8014cce:	e009      	b.n	8014ce4 <udp_bind+0x44>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014cd0:	68fa      	ldr	r2, [r7, #12]
 8014cd2:	697b      	ldr	r3, [r7, #20]
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d102      	bne.n	8014cde <udp_bind+0x3e>
      rebind = 1;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	74fb      	strb	r3, [r7, #19]
      break;
 8014cdc:	e005      	b.n	8014cea <udp_bind+0x4a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	68db      	ldr	r3, [r3, #12]
 8014ce2:	617b      	str	r3, [r7, #20]
 8014ce4:	697b      	ldr	r3, [r7, #20]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d1f2      	bne.n	8014cd0 <udp_bind+0x30>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014cea:	88fb      	ldrh	r3, [r7, #6]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d109      	bne.n	8014d04 <udp_bind+0x64>
    port = udp_new_port();
 8014cf0:	f7ff fce4 	bl	80146bc <udp_new_port>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014cf8:	88fb      	ldrh	r3, [r7, #6]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d12c      	bne.n	8014d58 <udp_bind+0xb8>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014cfe:	f06f 0307 	mvn.w	r3, #7
 8014d02:	e040      	b.n	8014d86 <udp_bind+0xe6>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014d04:	4b23      	ldr	r3, [pc, #140]	; (8014d94 <udp_bind+0xf4>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	617b      	str	r3, [r7, #20]
 8014d0a:	e022      	b.n	8014d52 <udp_bind+0xb2>
      if (pcb != ipcb) {
 8014d0c:	68fa      	ldr	r2, [r7, #12]
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d01b      	beq.n	8014d4c <udp_bind+0xac>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	8a5b      	ldrh	r3, [r3, #18]
 8014d18:	88fa      	ldrh	r2, [r7, #6]
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d116      	bne.n	8014d4c <udp_bind+0xac>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014d1e:	697b      	ldr	r3, [r7, #20]
 8014d20:	681a      	ldr	r2, [r3, #0]
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d00d      	beq.n	8014d46 <udp_bind+0xa6>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d00a      	beq.n	8014d46 <udp_bind+0xa6>
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d006      	beq.n	8014d46 <udp_bind+0xa6>
              ip_addr_isany(&ipcb->local_ip))) {
 8014d38:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d003      	beq.n	8014d46 <udp_bind+0xa6>
              ip_addr_isany(&ipcb->local_ip))) {
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d102      	bne.n	8014d4c <udp_bind+0xac>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014d46:	f06f 0307 	mvn.w	r3, #7
 8014d4a:	e01c      	b.n	8014d86 <udp_bind+0xe6>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	68db      	ldr	r3, [r3, #12]
 8014d50:	617b      	str	r3, [r7, #20]
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d1d9      	bne.n	8014d0c <udp_bind+0x6c>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d002      	beq.n	8014d64 <udp_bind+0xc4>
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	e000      	b.n	8014d66 <udp_bind+0xc6>
 8014d64:	2300      	movs	r3, #0
 8014d66:	68fa      	ldr	r2, [r7, #12]
 8014d68:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	88fa      	ldrh	r2, [r7, #6]
 8014d6e:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014d70:	7cfb      	ldrb	r3, [r7, #19]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d106      	bne.n	8014d84 <udp_bind+0xe4>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014d76:	4b07      	ldr	r3, [pc, #28]	; (8014d94 <udp_bind+0xf4>)
 8014d78:	681a      	ldr	r2, [r3, #0]
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014d7e:	4a05      	ldr	r2, [pc, #20]	; (8014d94 <udp_bind+0xf4>)
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014d84:	2300      	movs	r3, #0
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3718      	adds	r7, #24
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	0801bb3c 	.word	0x0801bb3c
 8014d94:	20007814 	.word	0x20007814

08014d98 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b086      	sub	sp, #24
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	60f8      	str	r0, [r7, #12]
 8014da0:	60b9      	str	r1, [r7, #8]
 8014da2:	4613      	mov	r3, r2
 8014da4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d102      	bne.n	8014db2 <udp_connect+0x1a>
 8014dac:	f06f 030f 	mvn.w	r3, #15
 8014db0:	e044      	b.n	8014e3c <udp_connect+0xa4>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d102      	bne.n	8014dbe <udp_connect+0x26>
 8014db8:	f06f 030f 	mvn.w	r3, #15
 8014dbc:	e03e      	b.n	8014e3c <udp_connect+0xa4>

  if (pcb->local_port == 0) {
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	8a5b      	ldrh	r3, [r3, #18]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d10f      	bne.n	8014de6 <udp_connect+0x4e>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014dc6:	68f9      	ldr	r1, [r7, #12]
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	8a5b      	ldrh	r3, [r3, #18]
 8014dcc:	461a      	mov	r2, r3
 8014dce:	68f8      	ldr	r0, [r7, #12]
 8014dd0:	f7ff ff66 	bl	8014ca0 <udp_bind>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8014dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d002      	beq.n	8014de6 <udp_connect+0x4e>
      return err;
 8014de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014de4:	e02a      	b.n	8014e3c <udp_connect+0xa4>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014de6:	68bb      	ldr	r3, [r7, #8]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d002      	beq.n	8014df2 <udp_connect+0x5a>
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	e000      	b.n	8014df4 <udp_connect+0x5c>
 8014df2:	2300      	movs	r3, #0
 8014df4:	68fa      	ldr	r2, [r7, #12]
 8014df6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	88fa      	ldrh	r2, [r7, #6]
 8014dfc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	7c1b      	ldrb	r3, [r3, #16]
 8014e02:	f043 0304 	orr.w	r3, r3, #4
 8014e06:	b2da      	uxtb	r2, r3
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e0c:	4b0d      	ldr	r3, [pc, #52]	; (8014e44 <udp_connect+0xac>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	613b      	str	r3, [r7, #16]
 8014e12:	e008      	b.n	8014e26 <udp_connect+0x8e>
    if (pcb == ipcb) {
 8014e14:	68fa      	ldr	r2, [r7, #12]
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d101      	bne.n	8014e20 <udp_connect+0x88>
      /* already on the list, just return */
      return ERR_OK;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	e00d      	b.n	8014e3c <udp_connect+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	68db      	ldr	r3, [r3, #12]
 8014e24:	613b      	str	r3, [r7, #16]
 8014e26:	693b      	ldr	r3, [r7, #16]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d1f3      	bne.n	8014e14 <udp_connect+0x7c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014e2c:	4b05      	ldr	r3, [pc, #20]	; (8014e44 <udp_connect+0xac>)
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014e34:	4a03      	ldr	r2, [pc, #12]	; (8014e44 <udp_connect+0xac>)
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014e3a:	2300      	movs	r3, #0
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	3718      	adds	r7, #24
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}
 8014e44:	20007814 	.word	0x20007814

08014e48 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014e48:	b480      	push	{r7}
 8014e4a:	b085      	sub	sp, #20
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	60f8      	str	r0, [r7, #12]
 8014e50:	60b9      	str	r1, [r7, #8]
 8014e52:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d005      	beq.n	8014e66 <udp_recv+0x1e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	68ba      	ldr	r2, [r7, #8]
 8014e5e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	687a      	ldr	r2, [r7, #4]
 8014e64:	61da      	str	r2, [r3, #28]
}
 8014e66:	3714      	adds	r7, #20
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr

08014e70 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b084      	sub	sp, #16
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d026      	beq.n	8014ecc <udp_remove+0x5c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014e7e:	4b15      	ldr	r3, [pc, #84]	; (8014ed4 <udp_remove+0x64>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	429a      	cmp	r2, r3
 8014e86:	d105      	bne.n	8014e94 <udp_remove+0x24>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014e88:	4b12      	ldr	r3, [pc, #72]	; (8014ed4 <udp_remove+0x64>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	68db      	ldr	r3, [r3, #12]
 8014e8e:	4a11      	ldr	r2, [pc, #68]	; (8014ed4 <udp_remove+0x64>)
 8014e90:	6013      	str	r3, [r2, #0]
 8014e92:	e017      	b.n	8014ec4 <udp_remove+0x54>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014e94:	4b0f      	ldr	r3, [pc, #60]	; (8014ed4 <udp_remove+0x64>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	60fb      	str	r3, [r7, #12]
 8014e9a:	e010      	b.n	8014ebe <udp_remove+0x4e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	68db      	ldr	r3, [r3, #12]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d009      	beq.n	8014eb8 <udp_remove+0x48>
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	68db      	ldr	r3, [r3, #12]
 8014ea8:	687a      	ldr	r2, [r7, #4]
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d104      	bne.n	8014eb8 <udp_remove+0x48>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	68da      	ldr	r2, [r3, #12]
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	60da      	str	r2, [r3, #12]
        break;
 8014eb6:	e005      	b.n	8014ec4 <udp_remove+0x54>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	60fb      	str	r3, [r7, #12]
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d1eb      	bne.n	8014e9c <udp_remove+0x2c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014ec4:	6879      	ldr	r1, [r7, #4]
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	f7f9 fadc 	bl	800e484 <memp_free>
}
 8014ecc:	3710      	adds	r7, #16
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
 8014ed2:	bf00      	nop
 8014ed4:	20007814 	.word	0x20007814

08014ed8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b082      	sub	sp, #8
 8014edc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014ede:	2000      	movs	r0, #0
 8014ee0:	f7f9 fa94 	bl	800e40c <memp_malloc>
 8014ee4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d007      	beq.n	8014efc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014eec:	2220      	movs	r2, #32
 8014eee:	2100      	movs	r1, #0
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	f004 fbab 	bl	801964c <memset>
    pcb->ttl = UDP_TTL;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	22ff      	movs	r2, #255	; 0xff
 8014efa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014efc:	687b      	ldr	r3, [r7, #4]
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3708      	adds	r7, #8
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}
	...

08014f08 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014f08:	b480      	push	{r7}
 8014f0a:	b085      	sub	sp, #20
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d01e      	beq.n	8014f56 <udp_netif_ip_addr_changed+0x4e>
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d01a      	beq.n	8014f56 <udp_netif_ip_addr_changed+0x4e>
 8014f20:	683b      	ldr	r3, [r7, #0]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d017      	beq.n	8014f56 <udp_netif_ip_addr_changed+0x4e>
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d013      	beq.n	8014f56 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014f2e:	4b0d      	ldr	r3, [pc, #52]	; (8014f64 <udp_netif_ip_addr_changed+0x5c>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	60fb      	str	r3, [r7, #12]
 8014f34:	e00c      	b.n	8014f50 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	681a      	ldr	r2, [r3, #0]
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d103      	bne.n	8014f4a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	681a      	ldr	r2, [r3, #0]
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	68db      	ldr	r3, [r3, #12]
 8014f4e:	60fb      	str	r3, [r7, #12]
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d1ef      	bne.n	8014f36 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014f56:	bf00      	nop
 8014f58:	3714      	adds	r7, #20
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f60:	4770      	bx	lr
 8014f62:	bf00      	nop
 8014f64:	20007814 	.word	0x20007814

08014f68 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014f6c:	4b1b      	ldr	r3, [pc, #108]	; (8014fdc <dhcp_inc_pcb_refcount+0x74>)
 8014f6e:	781b      	ldrb	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d129      	bne.n	8014fc8 <dhcp_inc_pcb_refcount+0x60>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014f74:	f7ff ffb0 	bl	8014ed8 <udp_new>
 8014f78:	4603      	mov	r3, r0
 8014f7a:	4a19      	ldr	r2, [pc, #100]	; (8014fe0 <dhcp_inc_pcb_refcount+0x78>)
 8014f7c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014f7e:	4b18      	ldr	r3, [pc, #96]	; (8014fe0 <dhcp_inc_pcb_refcount+0x78>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d102      	bne.n	8014f8c <dhcp_inc_pcb_refcount+0x24>
      return ERR_MEM;
 8014f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f8a:	e024      	b.n	8014fd6 <dhcp_inc_pcb_refcount+0x6e>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014f8c:	4b14      	ldr	r3, [pc, #80]	; (8014fe0 <dhcp_inc_pcb_refcount+0x78>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	7a5a      	ldrb	r2, [r3, #9]
 8014f92:	4b13      	ldr	r3, [pc, #76]	; (8014fe0 <dhcp_inc_pcb_refcount+0x78>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	f042 0220 	orr.w	r2, r2, #32
 8014f9a:	b2d2      	uxtb	r2, r2
 8014f9c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014f9e:	4b10      	ldr	r3, [pc, #64]	; (8014fe0 <dhcp_inc_pcb_refcount+0x78>)
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	2244      	movs	r2, #68	; 0x44
 8014fa4:	490f      	ldr	r1, [pc, #60]	; (8014fe4 <dhcp_inc_pcb_refcount+0x7c>)
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7ff fe7a 	bl	8014ca0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014fac:	4b0c      	ldr	r3, [pc, #48]	; (8014fe0 <dhcp_inc_pcb_refcount+0x78>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	2243      	movs	r2, #67	; 0x43
 8014fb2:	490c      	ldr	r1, [pc, #48]	; (8014fe4 <dhcp_inc_pcb_refcount+0x7c>)
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7ff feef 	bl	8014d98 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014fba:	4b09      	ldr	r3, [pc, #36]	; (8014fe0 <dhcp_inc_pcb_refcount+0x78>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	4909      	ldr	r1, [pc, #36]	; (8014fe8 <dhcp_inc_pcb_refcount+0x80>)
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7ff ff40 	bl	8014e48 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014fc8:	4b04      	ldr	r3, [pc, #16]	; (8014fdc <dhcp_inc_pcb_refcount+0x74>)
 8014fca:	781b      	ldrb	r3, [r3, #0]
 8014fcc:	3301      	adds	r3, #1
 8014fce:	b2da      	uxtb	r2, r3
 8014fd0:	4b02      	ldr	r3, [pc, #8]	; (8014fdc <dhcp_inc_pcb_refcount+0x74>)
 8014fd2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014fd4:	2300      	movs	r3, #0
}
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	20007844 	.word	0x20007844
 8014fe0:	20007840 	.word	0x20007840
 8014fe4:	0801bb3c 	.word	0x0801bb3c
 8014fe8:	08016709 	.word	0x08016709

08014fec <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  dhcp_pcb_refcount--;
 8014ff0:	4b09      	ldr	r3, [pc, #36]	; (8015018 <dhcp_dec_pcb_refcount+0x2c>)
 8014ff2:	781b      	ldrb	r3, [r3, #0]
 8014ff4:	3b01      	subs	r3, #1
 8014ff6:	b2da      	uxtb	r2, r3
 8014ff8:	4b07      	ldr	r3, [pc, #28]	; (8015018 <dhcp_dec_pcb_refcount+0x2c>)
 8014ffa:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014ffc:	4b06      	ldr	r3, [pc, #24]	; (8015018 <dhcp_dec_pcb_refcount+0x2c>)
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d107      	bne.n	8015014 <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 8015004:	4b05      	ldr	r3, [pc, #20]	; (801501c <dhcp_dec_pcb_refcount+0x30>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	4618      	mov	r0, r3
 801500a:	f7ff ff31 	bl	8014e70 <udp_remove>
    dhcp_pcb = NULL;
 801500e:	4b03      	ldr	r3, [pc, #12]	; (801501c <dhcp_dec_pcb_refcount+0x30>)
 8015010:	2200      	movs	r2, #0
 8015012:	601a      	str	r2, [r3, #0]
  }
}
 8015014:	bf00      	nop
 8015016:	bd80      	pop	{r7, pc}
 8015018:	20007844 	.word	0x20007844
 801501c:	20007840 	.word	0x20007840

08015020 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b084      	sub	sp, #16
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6a1b      	ldr	r3, [r3, #32]
 801502c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801502e:	210c      	movs	r1, #12
 8015030:	68f8      	ldr	r0, [r7, #12]
 8015032:	f001 f815 	bl	8016060 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015036:	4b06      	ldr	r3, [pc, #24]	; (8015050 <dhcp_handle_nak+0x30>)
 8015038:	4a05      	ldr	r2, [pc, #20]	; (8015050 <dhcp_handle_nak+0x30>)
 801503a:	4905      	ldr	r1, [pc, #20]	; (8015050 <dhcp_handle_nak+0x30>)
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f7f9 fb67 	bl	800e710 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f000 fc06 	bl	8015854 <dhcp_discover>
}
 8015048:	bf00      	nop
 801504a:	3710      	adds	r7, #16
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	0801bb3c 	.word	0x0801bb3c

08015054 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6a1b      	ldr	r3, [r3, #32]
 8015060:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015062:	2108      	movs	r1, #8
 8015064:	68f8      	ldr	r0, [r7, #12]
 8015066:	f000 fffb 	bl	8016060 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	331c      	adds	r3, #28
 801506e:	2200      	movs	r2, #0
 8015070:	4619      	mov	r1, r3
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f002 f9fc 	bl	8017470 <etharp_query>
 8015078:	4603      	mov	r3, r0
 801507a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	799b      	ldrb	r3, [r3, #6]
 8015080:	2bff      	cmp	r3, #255	; 0xff
 8015082:	d005      	beq.n	8015090 <dhcp_check+0x3c>
    dhcp->tries++;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	799b      	ldrb	r3, [r3, #6]
 8015088:	3301      	adds	r3, #1
 801508a:	b2da      	uxtb	r2, r3
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015090:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015094:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015096:	893b      	ldrh	r3, [r7, #8]
 8015098:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801509c:	4a06      	ldr	r2, [pc, #24]	; (80150b8 <dhcp_check+0x64>)
 801509e:	fb82 1203 	smull	r1, r2, r2, r3
 80150a2:	1152      	asrs	r2, r2, #5
 80150a4:	17db      	asrs	r3, r3, #31
 80150a6:	1ad3      	subs	r3, r2, r3
 80150a8:	b29a      	uxth	r2, r3
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80150ae:	bf00      	nop
 80150b0:	3710      	adds	r7, #16
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	10624dd3 	.word	0x10624dd3

080150bc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b084      	sub	sp, #16
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6a1b      	ldr	r3, [r3, #32]
 80150ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80150cc:	4b0c      	ldr	r3, [pc, #48]	; (8015100 <dhcp_handle_offer+0x44>)
 80150ce:	789b      	ldrb	r3, [r3, #2]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d011      	beq.n	80150f8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	2200      	movs	r2, #0
 80150d8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80150da:	4b0a      	ldr	r3, [pc, #40]	; (8015104 <dhcp_handle_offer+0x48>)
 80150dc:	689b      	ldr	r3, [r3, #8]
 80150de:	4618      	mov	r0, r3
 80150e0:	f7f8 fec9 	bl	800de76 <lwip_htonl>
 80150e4:	4602      	mov	r2, r0
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	691a      	ldr	r2, [r3, #16]
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80150f2:	6878      	ldr	r0, [r7, #4]
 80150f4:	f000 f808 	bl	8015108 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80150f8:	bf00      	nop
 80150fa:	3710      	adds	r7, #16
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}
 8015100:	20007838 	.word	0x20007838
 8015104:	20007818 	.word	0x20007818

08015108 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015108:	b5b0      	push	{r4, r5, r7, lr}
 801510a:	b08a      	sub	sp, #40	; 0x28
 801510c:	af02      	add	r7, sp, #8
 801510e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d102      	bne.n	801511c <dhcp_select+0x14>
 8015116:	f06f 030f 	mvn.w	r3, #15
 801511a:	e0d5      	b.n	80152c8 <dhcp_select+0x1c0>
  dhcp = netif_dhcp_data(netif);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	6a1b      	ldr	r3, [r3, #32]
 8015120:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015122:	69bb      	ldr	r3, [r7, #24]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d102      	bne.n	801512e <dhcp_select+0x26>
 8015128:	f06f 0305 	mvn.w	r3, #5
 801512c:	e0cc      	b.n	80152c8 <dhcp_select+0x1c0>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801512e:	2101      	movs	r1, #1
 8015130:	69b8      	ldr	r0, [r7, #24]
 8015132:	f000 ff95 	bl	8016060 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015136:	f107 030c 	add.w	r3, r7, #12
 801513a:	2203      	movs	r2, #3
 801513c:	69b9      	ldr	r1, [r7, #24]
 801513e:	6878      	ldr	r0, [r7, #4]
 8015140:	f001 fbac 	bl	801689c <dhcp_create_msg>
 8015144:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	2b00      	cmp	r3, #0
 801514a:	f000 808e 	beq.w	801526a <dhcp_select+0x162>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015154:	89b8      	ldrh	r0, [r7, #12]
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801515c:	2302      	movs	r3, #2
 801515e:	2239      	movs	r2, #57	; 0x39
 8015160:	f000 ff98 	bl	8016094 <dhcp_option>
 8015164:	4603      	mov	r3, r0
 8015166:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015168:	89b8      	ldrh	r0, [r7, #12]
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015174:	461a      	mov	r2, r3
 8015176:	f000 ffc7 	bl	8016108 <dhcp_option_short>
 801517a:	4603      	mov	r3, r0
 801517c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801517e:	89b8      	ldrh	r0, [r7, #12]
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015186:	2304      	movs	r3, #4
 8015188:	2232      	movs	r2, #50	; 0x32
 801518a:	f000 ff83 	bl	8016094 <dhcp_option>
 801518e:	4603      	mov	r3, r0
 8015190:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015192:	89bc      	ldrh	r4, [r7, #12]
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801519a:	69bb      	ldr	r3, [r7, #24]
 801519c:	69db      	ldr	r3, [r3, #28]
 801519e:	4618      	mov	r0, r3
 80151a0:	f7f8 fe69 	bl	800de76 <lwip_htonl>
 80151a4:	4603      	mov	r3, r0
 80151a6:	461a      	mov	r2, r3
 80151a8:	4629      	mov	r1, r5
 80151aa:	4620      	mov	r0, r4
 80151ac:	f000 ffcf 	bl	801614e <dhcp_option_long>
 80151b0:	4603      	mov	r3, r0
 80151b2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80151b4:	89b8      	ldrh	r0, [r7, #12]
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151bc:	2304      	movs	r3, #4
 80151be:	2236      	movs	r2, #54	; 0x36
 80151c0:	f000 ff68 	bl	8016094 <dhcp_option>
 80151c4:	4603      	mov	r3, r0
 80151c6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80151c8:	89bc      	ldrh	r4, [r7, #12]
 80151ca:	693b      	ldr	r3, [r7, #16]
 80151cc:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80151d0:	69bb      	ldr	r3, [r7, #24]
 80151d2:	699b      	ldr	r3, [r3, #24]
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7f8 fe4e 	bl	800de76 <lwip_htonl>
 80151da:	4603      	mov	r3, r0
 80151dc:	461a      	mov	r2, r3
 80151de:	4629      	mov	r1, r5
 80151e0:	4620      	mov	r0, r4
 80151e2:	f000 ffb4 	bl	801614e <dhcp_option_long>
 80151e6:	4603      	mov	r3, r0
 80151e8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80151ea:	89b8      	ldrh	r0, [r7, #12]
 80151ec:	693b      	ldr	r3, [r7, #16]
 80151ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151f2:	2303      	movs	r3, #3
 80151f4:	2237      	movs	r2, #55	; 0x37
 80151f6:	f000 ff4d 	bl	8016094 <dhcp_option>
 80151fa:	4603      	mov	r3, r0
 80151fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80151fe:	2300      	movs	r3, #0
 8015200:	77fb      	strb	r3, [r7, #31]
 8015202:	e00e      	b.n	8015222 <dhcp_select+0x11a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015204:	89b8      	ldrh	r0, [r7, #12]
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801520c:	7ffb      	ldrb	r3, [r7, #31]
 801520e:	4a30      	ldr	r2, [pc, #192]	; (80152d0 <dhcp_select+0x1c8>)
 8015210:	5cd3      	ldrb	r3, [r2, r3]
 8015212:	461a      	mov	r2, r3
 8015214:	f000 ff61 	bl	80160da <dhcp_option_byte>
 8015218:	4603      	mov	r3, r0
 801521a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801521c:	7ffb      	ldrb	r3, [r7, #31]
 801521e:	3301      	adds	r3, #1
 8015220:	77fb      	strb	r3, [r7, #31]
 8015222:	7ffb      	ldrb	r3, [r7, #31]
 8015224:	2b02      	cmp	r3, #2
 8015226:	d9ed      	bls.n	8015204 <dhcp_select+0xfc>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8015228:	89b8      	ldrh	r0, [r7, #12]
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	33f0      	adds	r3, #240	; 0xf0
 801522e:	687a      	ldr	r2, [r7, #4]
 8015230:	4619      	mov	r1, r3
 8015232:	f000 ffc1 	bl	80161b8 <dhcp_option_hostname>
 8015236:	4603      	mov	r3, r0
 8015238:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801523a:	89b8      	ldrh	r0, [r7, #12]
 801523c:	693b      	ldr	r3, [r7, #16]
 801523e:	33f0      	adds	r3, #240	; 0xf0
 8015240:	697a      	ldr	r2, [r7, #20]
 8015242:	4619      	mov	r1, r3
 8015244:	f001 fbdc 	bl	8016a00 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015248:	4b22      	ldr	r3, [pc, #136]	; (80152d4 <dhcp_select+0x1cc>)
 801524a:	6818      	ldr	r0, [r3, #0]
 801524c:	4b22      	ldr	r3, [pc, #136]	; (80152d8 <dhcp_select+0x1d0>)
 801524e:	9301      	str	r3, [sp, #4]
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	9300      	str	r3, [sp, #0]
 8015254:	2343      	movs	r3, #67	; 0x43
 8015256:	4a21      	ldr	r2, [pc, #132]	; (80152dc <dhcp_select+0x1d4>)
 8015258:	6979      	ldr	r1, [r7, #20]
 801525a:	f7ff fc55 	bl	8014b08 <udp_sendto_if_src>
 801525e:	4603      	mov	r3, r0
 8015260:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 8015262:	6978      	ldr	r0, [r7, #20]
 8015264:	f7f9 fdea 	bl	800ee3c <pbuf_free>
 8015268:	e001      	b.n	801526e <dhcp_select+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801526a:	23ff      	movs	r3, #255	; 0xff
 801526c:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	799b      	ldrb	r3, [r3, #6]
 8015272:	2bff      	cmp	r3, #255	; 0xff
 8015274:	d005      	beq.n	8015282 <dhcp_select+0x17a>
    dhcp->tries++;
 8015276:	69bb      	ldr	r3, [r7, #24]
 8015278:	799b      	ldrb	r3, [r3, #6]
 801527a:	3301      	adds	r3, #1
 801527c:	b2da      	uxtb	r2, r3
 801527e:	69bb      	ldr	r3, [r7, #24]
 8015280:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015282:	69bb      	ldr	r3, [r7, #24]
 8015284:	799b      	ldrb	r3, [r3, #6]
 8015286:	2b05      	cmp	r3, #5
 8015288:	d80d      	bhi.n	80152a6 <dhcp_select+0x19e>
 801528a:	69bb      	ldr	r3, [r7, #24]
 801528c:	799b      	ldrb	r3, [r3, #6]
 801528e:	461a      	mov	r2, r3
 8015290:	2301      	movs	r3, #1
 8015292:	4093      	lsls	r3, r2
 8015294:	b29b      	uxth	r3, r3
 8015296:	461a      	mov	r2, r3
 8015298:	0152      	lsls	r2, r2, #5
 801529a:	1ad2      	subs	r2, r2, r3
 801529c:	0092      	lsls	r2, r2, #2
 801529e:	4413      	add	r3, r2
 80152a0:	00db      	lsls	r3, r3, #3
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	e001      	b.n	80152aa <dhcp_select+0x1a2>
 80152a6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80152aa:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80152ac:	89fb      	ldrh	r3, [r7, #14]
 80152ae:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80152b2:	4a0b      	ldr	r2, [pc, #44]	; (80152e0 <dhcp_select+0x1d8>)
 80152b4:	fb82 1203 	smull	r1, r2, r2, r3
 80152b8:	1152      	asrs	r2, r2, #5
 80152ba:	17db      	asrs	r3, r3, #31
 80152bc:	1ad3      	subs	r3, r2, r3
 80152be:	b29a      	uxth	r2, r3
 80152c0:	69bb      	ldr	r3, [r7, #24]
 80152c2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80152c4:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	3720      	adds	r7, #32
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bdb0      	pop	{r4, r5, r7, pc}
 80152d0:	20000140 	.word	0x20000140
 80152d4:	20007840 	.word	0x20007840
 80152d8:	0801bb3c 	.word	0x0801bb3c
 80152dc:	0801bb40 	.word	0x0801bb40
 80152e0:	10624dd3 	.word	0x10624dd3

080152e4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80152ea:	4b27      	ldr	r3, [pc, #156]	; (8015388 <dhcp_coarse_tmr+0xa4>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	607b      	str	r3, [r7, #4]
 80152f0:	e042      	b.n	8015378 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	6a1b      	ldr	r3, [r3, #32]
 80152f6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d039      	beq.n	8015372 <dhcp_coarse_tmr+0x8e>
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	795b      	ldrb	r3, [r3, #5]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d035      	beq.n	8015372 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	8a9b      	ldrh	r3, [r3, #20]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d012      	beq.n	8015334 <dhcp_coarse_tmr+0x50>
 801530e:	683b      	ldr	r3, [r7, #0]
 8015310:	8a5b      	ldrh	r3, [r3, #18]
 8015312:	3301      	adds	r3, #1
 8015314:	b29a      	uxth	r2, r3
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	825a      	strh	r2, [r3, #18]
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	8a5a      	ldrh	r2, [r3, #18]
 801531e:	683b      	ldr	r3, [r7, #0]
 8015320:	8a9b      	ldrh	r3, [r3, #20]
 8015322:	429a      	cmp	r2, r3
 8015324:	d106      	bne.n	8015334 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f000 fe00 	bl	8015f2c <dhcp_release_and_stop>
        dhcp_start(netif);
 801532c:	6878      	ldr	r0, [r7, #4]
 801532e:	f000 f969 	bl	8015604 <dhcp_start>
 8015332:	e01e      	b.n	8015372 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	8a1b      	ldrh	r3, [r3, #16]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d00b      	beq.n	8015354 <dhcp_coarse_tmr+0x70>
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	8a1b      	ldrh	r3, [r3, #16]
 8015340:	1e5a      	subs	r2, r3, #1
 8015342:	b291      	uxth	r1, r2
 8015344:	683a      	ldr	r2, [r7, #0]
 8015346:	8211      	strh	r1, [r2, #16]
 8015348:	2b01      	cmp	r3, #1
 801534a:	d103      	bne.n	8015354 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f000 f8c6 	bl	80154de <dhcp_t2_timeout>
 8015352:	e00e      	b.n	8015372 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	89db      	ldrh	r3, [r3, #14]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d00a      	beq.n	8015372 <dhcp_coarse_tmr+0x8e>
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	89db      	ldrh	r3, [r3, #14]
 8015360:	1e5a      	subs	r2, r3, #1
 8015362:	b291      	uxth	r1, r2
 8015364:	683a      	ldr	r2, [r7, #0]
 8015366:	81d1      	strh	r1, [r2, #14]
 8015368:	2b01      	cmp	r3, #1
 801536a:	d102      	bne.n	8015372 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	f000 f888 	bl	8015482 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	607b      	str	r3, [r7, #4]
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d1b9      	bne.n	80152f2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801537e:	bf00      	nop
 8015380:	bf00      	nop
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	20007700 	.word	0x20007700

0801538c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015392:	4b16      	ldr	r3, [pc, #88]	; (80153ec <dhcp_fine_tmr+0x60>)
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	607b      	str	r3, [r7, #4]
 8015398:	e020      	b.n	80153dc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6a1b      	ldr	r3, [r3, #32]
 801539e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d017      	beq.n	80153d6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	891b      	ldrh	r3, [r3, #8]
 80153aa:	2b01      	cmp	r3, #1
 80153ac:	d906      	bls.n	80153bc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	891b      	ldrh	r3, [r3, #8]
 80153b2:	3b01      	subs	r3, #1
 80153b4:	b29a      	uxth	r2, r3
 80153b6:	683b      	ldr	r3, [r7, #0]
 80153b8:	811a      	strh	r2, [r3, #8]
 80153ba:	e00c      	b.n	80153d6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	891b      	ldrh	r3, [r3, #8]
 80153c0:	2b01      	cmp	r3, #1
 80153c2:	d108      	bne.n	80153d6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	891b      	ldrh	r3, [r3, #8]
 80153c8:	3b01      	subs	r3, #1
 80153ca:	b29a      	uxth	r2, r3
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	f000 f80d 	bl	80153f0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	607b      	str	r3, [r7, #4]
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d1db      	bne.n	801539a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80153e2:	bf00      	nop
 80153e4:	bf00      	nop
 80153e6:	3708      	adds	r7, #8
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	20007700 	.word	0x20007700

080153f0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b084      	sub	sp, #16
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	6a1b      	ldr	r3, [r3, #32]
 80153fc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	795b      	ldrb	r3, [r3, #5]
 8015402:	2b0c      	cmp	r3, #12
 8015404:	d003      	beq.n	801540e <dhcp_timeout+0x1e>
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	795b      	ldrb	r3, [r3, #5]
 801540a:	2b06      	cmp	r3, #6
 801540c:	d103      	bne.n	8015416 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f000 fa20 	bl	8015854 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015414:	e031      	b.n	801547a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	795b      	ldrb	r3, [r3, #5]
 801541a:	2b01      	cmp	r3, #1
 801541c:	d10e      	bne.n	801543c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	799b      	ldrb	r3, [r3, #6]
 8015422:	2b05      	cmp	r3, #5
 8015424:	d803      	bhi.n	801542e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f7ff fe6e 	bl	8015108 <dhcp_select>
}
 801542c:	e025      	b.n	801547a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	f000 fd7c 	bl	8015f2c <dhcp_release_and_stop>
      dhcp_start(netif);
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f000 f8e5 	bl	8015604 <dhcp_start>
}
 801543a:	e01e      	b.n	801547a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	795b      	ldrb	r3, [r3, #5]
 8015440:	2b08      	cmp	r3, #8
 8015442:	d10b      	bne.n	801545c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	799b      	ldrb	r3, [r3, #6]
 8015448:	2b01      	cmp	r3, #1
 801544a:	d803      	bhi.n	8015454 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801544c:	6878      	ldr	r0, [r7, #4]
 801544e:	f7ff fe01 	bl	8015054 <dhcp_check>
}
 8015452:	e012      	b.n	801547a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	f000 fa9f 	bl	8015998 <dhcp_bind>
}
 801545a:	e00e      	b.n	801547a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	795b      	ldrb	r3, [r3, #5]
 8015460:	2b03      	cmp	r3, #3
 8015462:	d10a      	bne.n	801547a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	799b      	ldrb	r3, [r3, #6]
 8015468:	2b01      	cmp	r3, #1
 801546a:	d803      	bhi.n	8015474 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f000 fc9f 	bl	8015db0 <dhcp_reboot>
}
 8015472:	e002      	b.n	801547a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f000 f9ed 	bl	8015854 <dhcp_discover>
}
 801547a:	bf00      	nop
 801547c:	3710      	adds	r7, #16
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}

08015482 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015482:	b580      	push	{r7, lr}
 8015484:	b084      	sub	sp, #16
 8015486:	af00      	add	r7, sp, #0
 8015488:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	6a1b      	ldr	r3, [r3, #32]
 801548e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	795b      	ldrb	r3, [r3, #5]
 8015494:	2b01      	cmp	r3, #1
 8015496:	d007      	beq.n	80154a8 <dhcp_t1_timeout+0x26>
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	795b      	ldrb	r3, [r3, #5]
 801549c:	2b0a      	cmp	r3, #10
 801549e:	d003      	beq.n	80154a8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80154a4:	2b05      	cmp	r3, #5
 80154a6:	d116      	bne.n	80154d6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f000 fb39 	bl	8015b20 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	899b      	ldrh	r3, [r3, #12]
 80154b2:	461a      	mov	r2, r3
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	8a5b      	ldrh	r3, [r3, #18]
 80154b8:	1ad3      	subs	r3, r2, r3
 80154ba:	2b01      	cmp	r3, #1
 80154bc:	dd0b      	ble.n	80154d6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	899b      	ldrh	r3, [r3, #12]
 80154c2:	461a      	mov	r2, r3
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	8a5b      	ldrh	r3, [r3, #18]
 80154c8:	1ad3      	subs	r3, r2, r3
 80154ca:	0fda      	lsrs	r2, r3, #31
 80154cc:	4413      	add	r3, r2
 80154ce:	105b      	asrs	r3, r3, #1
 80154d0:	b29a      	uxth	r2, r3
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80154d6:	bf00      	nop
 80154d8:	3710      	adds	r7, #16
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}

080154de <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80154de:	b580      	push	{r7, lr}
 80154e0:	b084      	sub	sp, #16
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	6a1b      	ldr	r3, [r3, #32]
 80154ea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	795b      	ldrb	r3, [r3, #5]
 80154f0:	2b01      	cmp	r3, #1
 80154f2:	d00b      	beq.n	801550c <dhcp_t2_timeout+0x2e>
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	795b      	ldrb	r3, [r3, #5]
 80154f8:	2b0a      	cmp	r3, #10
 80154fa:	d007      	beq.n	801550c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015500:	2b05      	cmp	r3, #5
 8015502:	d003      	beq.n	801550c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	795b      	ldrb	r3, [r3, #5]
 8015508:	2b04      	cmp	r3, #4
 801550a:	d116      	bne.n	801553a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f000 fbab 	bl	8015c68 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	8a9b      	ldrh	r3, [r3, #20]
 8015516:	461a      	mov	r2, r3
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	8a5b      	ldrh	r3, [r3, #18]
 801551c:	1ad3      	subs	r3, r2, r3
 801551e:	2b01      	cmp	r3, #1
 8015520:	dd0b      	ble.n	801553a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	8a9b      	ldrh	r3, [r3, #20]
 8015526:	461a      	mov	r2, r3
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	8a5b      	ldrh	r3, [r3, #18]
 801552c:	1ad3      	subs	r3, r2, r3
 801552e:	0fda      	lsrs	r2, r3, #31
 8015530:	4413      	add	r3, r2
 8015532:	105b      	asrs	r3, r3, #1
 8015534:	b29a      	uxth	r2, r3
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801553a:	bf00      	nop
 801553c:	3710      	adds	r7, #16
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
	...

08015544 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b084      	sub	sp, #16
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
 801554c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	6a1b      	ldr	r3, [r3, #32]
 8015552:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	2200      	movs	r2, #0
 8015558:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	2200      	movs	r2, #0
 801555e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015560:	4b26      	ldr	r3, [pc, #152]	; (80155fc <dhcp_handle_ack+0xb8>)
 8015562:	78db      	ldrb	r3, [r3, #3]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d003      	beq.n	8015570 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015568:	4b25      	ldr	r3, [pc, #148]	; (8015600 <dhcp_handle_ack+0xbc>)
 801556a:	68da      	ldr	r2, [r3, #12]
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015570:	4b22      	ldr	r3, [pc, #136]	; (80155fc <dhcp_handle_ack+0xb8>)
 8015572:	791b      	ldrb	r3, [r3, #4]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d004      	beq.n	8015582 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015578:	4b21      	ldr	r3, [pc, #132]	; (8015600 <dhcp_handle_ack+0xbc>)
 801557a:	691a      	ldr	r2, [r3, #16]
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015580:	e004      	b.n	801558c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015586:	085a      	lsrs	r2, r3, #1
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801558c:	4b1b      	ldr	r3, [pc, #108]	; (80155fc <dhcp_handle_ack+0xb8>)
 801558e:	795b      	ldrb	r3, [r3, #5]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d004      	beq.n	801559e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015594:	4b1a      	ldr	r3, [pc, #104]	; (8015600 <dhcp_handle_ack+0xbc>)
 8015596:	695a      	ldr	r2, [r3, #20]
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	631a      	str	r2, [r3, #48]	; 0x30
 801559c:	e007      	b.n	80155ae <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80155a2:	4613      	mov	r3, r2
 80155a4:	00db      	lsls	r3, r3, #3
 80155a6:	1a9b      	subs	r3, r3, r2
 80155a8:	08da      	lsrs	r2, r3, #3
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	691a      	ldr	r2, [r3, #16]
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80155b6:	4b11      	ldr	r3, [pc, #68]	; (80155fc <dhcp_handle_ack+0xb8>)
 80155b8:	799b      	ldrb	r3, [r3, #6]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d00b      	beq.n	80155d6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80155be:	4b10      	ldr	r3, [pc, #64]	; (8015600 <dhcp_handle_ack+0xbc>)
 80155c0:	699b      	ldr	r3, [r3, #24]
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7f8 fc57 	bl	800de76 <lwip_htonl>
 80155c8:	4602      	mov	r2, r0
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	2201      	movs	r2, #1
 80155d2:	71da      	strb	r2, [r3, #7]
 80155d4:	e002      	b.n	80155dc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	2200      	movs	r2, #0
 80155da:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80155dc:	4b07      	ldr	r3, [pc, #28]	; (80155fc <dhcp_handle_ack+0xb8>)
 80155de:	79db      	ldrb	r3, [r3, #7]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d007      	beq.n	80155f4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80155e4:	4b06      	ldr	r3, [pc, #24]	; (8015600 <dhcp_handle_ack+0xbc>)
 80155e6:	69db      	ldr	r3, [r3, #28]
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7f8 fc44 	bl	800de76 <lwip_htonl>
 80155ee:	4602      	mov	r2, r0
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80155f4:	bf00      	nop
 80155f6:	3710      	adds	r7, #16
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd80      	pop	{r7, pc}
 80155fc:	20007838 	.word	0x20007838
 8015600:	20007818 	.word	0x20007818

08015604 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b084      	sub	sp, #16
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d102      	bne.n	8015618 <dhcp_start+0x14>
 8015612:	f06f 030f 	mvn.w	r3, #15
 8015616:	e059      	b.n	80156cc <dhcp_start+0xc8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801561e:	f003 0301 	and.w	r3, r3, #1
 8015622:	2b00      	cmp	r3, #0
 8015624:	d102      	bne.n	801562c <dhcp_start+0x28>
 8015626:	f06f 030f 	mvn.w	r3, #15
 801562a:	e04f      	b.n	80156cc <dhcp_start+0xc8>
  dhcp = netif_dhcp_data(netif);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6a1b      	ldr	r3, [r3, #32]
 8015630:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015636:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801563a:	d202      	bcs.n	8015642 <dhcp_start+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801563c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015640:	e044      	b.n	80156cc <dhcp_start+0xc8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d10d      	bne.n	8015664 <dhcp_start+0x60>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8015648:	2034      	movs	r0, #52	; 0x34
 801564a:	f7f8 fe7a 	bl	800e342 <mem_malloc>
 801564e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d102      	bne.n	801565c <dhcp_start+0x58>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8015656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801565a:	e037      	b.n	80156cc <dhcp_start+0xc8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	68fa      	ldr	r2, [r7, #12]
 8015660:	621a      	str	r2, [r3, #32]
 8015662:	e005      	b.n	8015670 <dhcp_start+0x6c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	791b      	ldrb	r3, [r3, #4]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d001      	beq.n	8015670 <dhcp_start+0x6c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801566c:	f7ff fcbe 	bl	8014fec <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015670:	2234      	movs	r2, #52	; 0x34
 8015672:	2100      	movs	r1, #0
 8015674:	68f8      	ldr	r0, [r7, #12]
 8015676:	f003 ffe9 	bl	801964c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801567a:	f7ff fc75 	bl	8014f68 <dhcp_inc_pcb_refcount>
 801567e:	4603      	mov	r3, r0
 8015680:	2b00      	cmp	r3, #0
 8015682:	d002      	beq.n	801568a <dhcp_start+0x86>
    return ERR_MEM;
 8015684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015688:	e020      	b.n	80156cc <dhcp_start+0xc8>
  }
  dhcp->pcb_allocated = 1;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	2201      	movs	r2, #1
 801568e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015696:	f003 0304 	and.w	r3, r3, #4
 801569a:	2b00      	cmp	r3, #0
 801569c:	d105      	bne.n	80156aa <dhcp_start+0xa6>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801569e:	2102      	movs	r1, #2
 80156a0:	68f8      	ldr	r0, [r7, #12]
 80156a2:	f000 fcdd 	bl	8016060 <dhcp_set_state>
    return ERR_OK;
 80156a6:	2300      	movs	r3, #0
 80156a8:	e010      	b.n	80156cc <dhcp_start+0xc8>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f000 f8d2 	bl	8015854 <dhcp_discover>
 80156b0:	4603      	mov	r3, r0
 80156b2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80156b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d005      	beq.n	80156c8 <dhcp_start+0xc4>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f000 fc35 	bl	8015f2c <dhcp_release_and_stop>
    return ERR_MEM;
 80156c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156c6:	e001      	b.n	80156cc <dhcp_start+0xc8>
  }
  return result;
 80156c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3710      	adds	r7, #16
 80156d0:	46bd      	mov	sp, r7
 80156d2:	bd80      	pop	{r7, pc}

080156d4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b084      	sub	sp, #16
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	6a1b      	ldr	r3, [r3, #32]
 80156e0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d01a      	beq.n	801571e <dhcp_network_changed+0x4a>
    return;
  }
  switch (dhcp->state) {
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	795b      	ldrb	r3, [r3, #5]
 80156ec:	2b0a      	cmp	r3, #10
 80156ee:	d008      	beq.n	8015702 <dhcp_network_changed+0x2e>
 80156f0:	2b0a      	cmp	r3, #10
 80156f2:	dc0d      	bgt.n	8015710 <dhcp_network_changed+0x3c>
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d014      	beq.n	8015722 <dhcp_network_changed+0x4e>
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	db09      	blt.n	8015710 <dhcp_network_changed+0x3c>
 80156fc:	3b03      	subs	r3, #3
 80156fe:	2b02      	cmp	r3, #2
 8015700:	d806      	bhi.n	8015710 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	2200      	movs	r2, #0
 8015706:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f000 fb51 	bl	8015db0 <dhcp_reboot>
      break;
 801570e:	e009      	b.n	8015724 <dhcp_network_changed+0x50>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	2200      	movs	r2, #0
 8015714:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f000 f89c 	bl	8015854 <dhcp_discover>
      break;
 801571c:	e002      	b.n	8015724 <dhcp_network_changed+0x50>
    return;
 801571e:	bf00      	nop
 8015720:	e000      	b.n	8015724 <dhcp_network_changed+0x50>
      break;
 8015722:	bf00      	nop
  }
}
 8015724:	3710      	adds	r7, #16
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}

0801572a <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801572a:	b580      	push	{r7, lr}
 801572c:	b084      	sub	sp, #16
 801572e:	af00      	add	r7, sp, #0
 8015730:	6078      	str	r0, [r7, #4]
 8015732:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d012      	beq.n	8015760 <dhcp_arp_reply+0x36>
  dhcp = netif_dhcp_data(netif);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	6a1b      	ldr	r3, [r3, #32]
 801573e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d00c      	beq.n	8015760 <dhcp_arp_reply+0x36>
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	795b      	ldrb	r3, [r3, #5]
 801574a:	2b08      	cmp	r3, #8
 801574c:	d108      	bne.n	8015760 <dhcp_arp_reply+0x36>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	681a      	ldr	r2, [r3, #0]
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	69db      	ldr	r3, [r3, #28]
 8015756:	429a      	cmp	r2, r3
 8015758:	d102      	bne.n	8015760 <dhcp_arp_reply+0x36>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f000 f804 	bl	8015768 <dhcp_decline>
    }
  }
}
 8015760:	3710      	adds	r7, #16
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}
	...

08015768 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015768:	b5b0      	push	{r4, r5, r7, lr}
 801576a:	b08a      	sub	sp, #40	; 0x28
 801576c:	af02      	add	r7, sp, #8
 801576e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	6a1b      	ldr	r3, [r3, #32]
 8015774:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015776:	210c      	movs	r1, #12
 8015778:	69b8      	ldr	r0, [r7, #24]
 801577a:	f000 fc71 	bl	8016060 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801577e:	f107 030c 	add.w	r3, r7, #12
 8015782:	2204      	movs	r2, #4
 8015784:	69b9      	ldr	r1, [r7, #24]
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f001 f888 	bl	801689c <dhcp_create_msg>
 801578c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801578e:	697b      	ldr	r3, [r7, #20]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d035      	beq.n	8015800 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	685b      	ldr	r3, [r3, #4]
 8015798:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801579a:	89b8      	ldrh	r0, [r7, #12]
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157a2:	2304      	movs	r3, #4
 80157a4:	2232      	movs	r2, #50	; 0x32
 80157a6:	f000 fc75 	bl	8016094 <dhcp_option>
 80157aa:	4603      	mov	r3, r0
 80157ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80157ae:	89bc      	ldrh	r4, [r7, #12]
 80157b0:	693b      	ldr	r3, [r7, #16]
 80157b2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80157b6:	69bb      	ldr	r3, [r7, #24]
 80157b8:	69db      	ldr	r3, [r3, #28]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7f8 fb5b 	bl	800de76 <lwip_htonl>
 80157c0:	4603      	mov	r3, r0
 80157c2:	461a      	mov	r2, r3
 80157c4:	4629      	mov	r1, r5
 80157c6:	4620      	mov	r0, r4
 80157c8:	f000 fcc1 	bl	801614e <dhcp_option_long>
 80157cc:	4603      	mov	r3, r0
 80157ce:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80157d0:	89b8      	ldrh	r0, [r7, #12]
 80157d2:	693b      	ldr	r3, [r7, #16]
 80157d4:	33f0      	adds	r3, #240	; 0xf0
 80157d6:	697a      	ldr	r2, [r7, #20]
 80157d8:	4619      	mov	r1, r3
 80157da:	f001 f911 	bl	8016a00 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80157de:	4b19      	ldr	r3, [pc, #100]	; (8015844 <dhcp_decline+0xdc>)
 80157e0:	6818      	ldr	r0, [r3, #0]
 80157e2:	4b19      	ldr	r3, [pc, #100]	; (8015848 <dhcp_decline+0xe0>)
 80157e4:	9301      	str	r3, [sp, #4]
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	9300      	str	r3, [sp, #0]
 80157ea:	2343      	movs	r3, #67	; 0x43
 80157ec:	4a17      	ldr	r2, [pc, #92]	; (801584c <dhcp_decline+0xe4>)
 80157ee:	6979      	ldr	r1, [r7, #20]
 80157f0:	f7ff f98a 	bl	8014b08 <udp_sendto_if_src>
 80157f4:	4603      	mov	r3, r0
 80157f6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80157f8:	6978      	ldr	r0, [r7, #20]
 80157fa:	f7f9 fb1f 	bl	800ee3c <pbuf_free>
 80157fe:	e001      	b.n	8015804 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015800:	23ff      	movs	r3, #255	; 0xff
 8015802:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015804:	69bb      	ldr	r3, [r7, #24]
 8015806:	799b      	ldrb	r3, [r3, #6]
 8015808:	2bff      	cmp	r3, #255	; 0xff
 801580a:	d005      	beq.n	8015818 <dhcp_decline+0xb0>
    dhcp->tries++;
 801580c:	69bb      	ldr	r3, [r7, #24]
 801580e:	799b      	ldrb	r3, [r3, #6]
 8015810:	3301      	adds	r3, #1
 8015812:	b2da      	uxtb	r2, r3
 8015814:	69bb      	ldr	r3, [r7, #24]
 8015816:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015818:	f242 7310 	movw	r3, #10000	; 0x2710
 801581c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801581e:	89fb      	ldrh	r3, [r7, #14]
 8015820:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015824:	4a0a      	ldr	r2, [pc, #40]	; (8015850 <dhcp_decline+0xe8>)
 8015826:	fb82 1203 	smull	r1, r2, r2, r3
 801582a:	1152      	asrs	r2, r2, #5
 801582c:	17db      	asrs	r3, r3, #31
 801582e:	1ad3      	subs	r3, r2, r3
 8015830:	b29a      	uxth	r2, r3
 8015832:	69bb      	ldr	r3, [r7, #24]
 8015834:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015836:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801583a:	4618      	mov	r0, r3
 801583c:	3720      	adds	r7, #32
 801583e:	46bd      	mov	sp, r7
 8015840:	bdb0      	pop	{r4, r5, r7, pc}
 8015842:	bf00      	nop
 8015844:	20007840 	.word	0x20007840
 8015848:	0801bb3c 	.word	0x0801bb3c
 801584c:	0801bb40 	.word	0x0801bb40
 8015850:	10624dd3 	.word	0x10624dd3

08015854 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b08a      	sub	sp, #40	; 0x28
 8015858:	af02      	add	r7, sp, #8
 801585a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6a1b      	ldr	r3, [r3, #32]
 8015860:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8015862:	2300      	movs	r3, #0
 8015864:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015866:	69bb      	ldr	r3, [r7, #24]
 8015868:	2200      	movs	r2, #0
 801586a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801586c:	2106      	movs	r1, #6
 801586e:	69b8      	ldr	r0, [r7, #24]
 8015870:	f000 fbf6 	bl	8016060 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015874:	f107 0308 	add.w	r3, r7, #8
 8015878:	2201      	movs	r2, #1
 801587a:	69b9      	ldr	r1, [r7, #24]
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f001 f80d 	bl	801689c <dhcp_create_msg>
 8015882:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d04b      	beq.n	8015922 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801588a:	693b      	ldr	r3, [r7, #16]
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015890:	8938      	ldrh	r0, [r7, #8]
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015898:	2302      	movs	r3, #2
 801589a:	2239      	movs	r2, #57	; 0x39
 801589c:	f000 fbfa 	bl	8016094 <dhcp_option>
 80158a0:	4603      	mov	r3, r0
 80158a2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80158a4:	8938      	ldrh	r0, [r7, #8]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80158b0:	461a      	mov	r2, r3
 80158b2:	f000 fc29 	bl	8016108 <dhcp_option_short>
 80158b6:	4603      	mov	r3, r0
 80158b8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80158ba:	8938      	ldrh	r0, [r7, #8]
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158c2:	2303      	movs	r3, #3
 80158c4:	2237      	movs	r2, #55	; 0x37
 80158c6:	f000 fbe5 	bl	8016094 <dhcp_option>
 80158ca:	4603      	mov	r3, r0
 80158cc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80158ce:	2300      	movs	r3, #0
 80158d0:	77fb      	strb	r3, [r7, #31]
 80158d2:	e00e      	b.n	80158f2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80158d4:	8938      	ldrh	r0, [r7, #8]
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158dc:	7ffb      	ldrb	r3, [r7, #31]
 80158de:	4a29      	ldr	r2, [pc, #164]	; (8015984 <dhcp_discover+0x130>)
 80158e0:	5cd3      	ldrb	r3, [r2, r3]
 80158e2:	461a      	mov	r2, r3
 80158e4:	f000 fbf9 	bl	80160da <dhcp_option_byte>
 80158e8:	4603      	mov	r3, r0
 80158ea:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80158ec:	7ffb      	ldrb	r3, [r7, #31]
 80158ee:	3301      	adds	r3, #1
 80158f0:	77fb      	strb	r3, [r7, #31]
 80158f2:	7ffb      	ldrb	r3, [r7, #31]
 80158f4:	2b02      	cmp	r3, #2
 80158f6:	d9ed      	bls.n	80158d4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80158f8:	8938      	ldrh	r0, [r7, #8]
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	33f0      	adds	r3, #240	; 0xf0
 80158fe:	693a      	ldr	r2, [r7, #16]
 8015900:	4619      	mov	r1, r3
 8015902:	f001 f87d 	bl	8016a00 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015906:	4b20      	ldr	r3, [pc, #128]	; (8015988 <dhcp_discover+0x134>)
 8015908:	6818      	ldr	r0, [r3, #0]
 801590a:	4b20      	ldr	r3, [pc, #128]	; (801598c <dhcp_discover+0x138>)
 801590c:	9301      	str	r3, [sp, #4]
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	9300      	str	r3, [sp, #0]
 8015912:	2343      	movs	r3, #67	; 0x43
 8015914:	4a1e      	ldr	r2, [pc, #120]	; (8015990 <dhcp_discover+0x13c>)
 8015916:	6939      	ldr	r1, [r7, #16]
 8015918:	f7ff f8f6 	bl	8014b08 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801591c:	6938      	ldr	r0, [r7, #16]
 801591e:	f7f9 fa8d 	bl	800ee3c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	799b      	ldrb	r3, [r3, #6]
 8015926:	2bff      	cmp	r3, #255	; 0xff
 8015928:	d005      	beq.n	8015936 <dhcp_discover+0xe2>
    dhcp->tries++;
 801592a:	69bb      	ldr	r3, [r7, #24]
 801592c:	799b      	ldrb	r3, [r3, #6]
 801592e:	3301      	adds	r3, #1
 8015930:	b2da      	uxtb	r2, r3
 8015932:	69bb      	ldr	r3, [r7, #24]
 8015934:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	799b      	ldrb	r3, [r3, #6]
 801593a:	2b05      	cmp	r3, #5
 801593c:	d80d      	bhi.n	801595a <dhcp_discover+0x106>
 801593e:	69bb      	ldr	r3, [r7, #24]
 8015940:	799b      	ldrb	r3, [r3, #6]
 8015942:	461a      	mov	r2, r3
 8015944:	2301      	movs	r3, #1
 8015946:	4093      	lsls	r3, r2
 8015948:	b29b      	uxth	r3, r3
 801594a:	461a      	mov	r2, r3
 801594c:	0152      	lsls	r2, r2, #5
 801594e:	1ad2      	subs	r2, r2, r3
 8015950:	0092      	lsls	r2, r2, #2
 8015952:	4413      	add	r3, r2
 8015954:	00db      	lsls	r3, r3, #3
 8015956:	b29b      	uxth	r3, r3
 8015958:	e001      	b.n	801595e <dhcp_discover+0x10a>
 801595a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801595e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015960:	897b      	ldrh	r3, [r7, #10]
 8015962:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015966:	4a0b      	ldr	r2, [pc, #44]	; (8015994 <dhcp_discover+0x140>)
 8015968:	fb82 1203 	smull	r1, r2, r2, r3
 801596c:	1152      	asrs	r2, r2, #5
 801596e:	17db      	asrs	r3, r3, #31
 8015970:	1ad3      	subs	r3, r2, r3
 8015972:	b29a      	uxth	r2, r3
 8015974:	69bb      	ldr	r3, [r7, #24]
 8015976:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015978:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801597c:	4618      	mov	r0, r3
 801597e:	3720      	adds	r7, #32
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}
 8015984:	20000140 	.word	0x20000140
 8015988:	20007840 	.word	0x20007840
 801598c:	0801bb3c 	.word	0x0801bb3c
 8015990:	0801bb40 	.word	0x0801bb40
 8015994:	10624dd3 	.word	0x10624dd3

08015998 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b088      	sub	sp, #32
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	f000 80b6 	beq.w	8015b14 <dhcp_bind+0x17c>
  dhcp = netif_dhcp_data(netif);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6a1b      	ldr	r3, [r3, #32]
 80159ac:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80159ae:	69fb      	ldr	r3, [r7, #28]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	f000 80af 	beq.w	8015b14 <dhcp_bind+0x17c>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	2200      	movs	r2, #0
 80159ba:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80159bc:	69fb      	ldr	r3, [r7, #28]
 80159be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80159c4:	d019      	beq.n	80159fa <dhcp_bind+0x62>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80159c6:	69fb      	ldr	r3, [r7, #28]
 80159c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159ca:	331e      	adds	r3, #30
 80159cc:	4a53      	ldr	r2, [pc, #332]	; (8015b1c <dhcp_bind+0x184>)
 80159ce:	fba2 2303 	umull	r2, r3, r2, r3
 80159d2:	095b      	lsrs	r3, r3, #5
 80159d4:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80159d6:	69bb      	ldr	r3, [r7, #24]
 80159d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159dc:	d302      	bcc.n	80159e4 <dhcp_bind+0x4c>
      timeout = 0xffff;
 80159de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159e2:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80159e4:	69bb      	ldr	r3, [r7, #24]
 80159e6:	b29a      	uxth	r2, r3
 80159e8:	69fb      	ldr	r3, [r7, #28]
 80159ea:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	8a9b      	ldrh	r3, [r3, #20]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d102      	bne.n	80159fa <dhcp_bind+0x62>
      dhcp->t0_timeout = 1;
 80159f4:	69fb      	ldr	r3, [r7, #28]
 80159f6:	2201      	movs	r2, #1
 80159f8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80159fa:	69fb      	ldr	r3, [r7, #28]
 80159fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a02:	d01d      	beq.n	8015a40 <dhcp_bind+0xa8>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015a04:	69fb      	ldr	r3, [r7, #28]
 8015a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a08:	331e      	adds	r3, #30
 8015a0a:	4a44      	ldr	r2, [pc, #272]	; (8015b1c <dhcp_bind+0x184>)
 8015a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8015a10:	095b      	lsrs	r3, r3, #5
 8015a12:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8015a14:	69bb      	ldr	r3, [r7, #24]
 8015a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a1a:	d302      	bcc.n	8015a22 <dhcp_bind+0x8a>
      timeout = 0xffff;
 8015a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a20:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015a22:	69bb      	ldr	r3, [r7, #24]
 8015a24:	b29a      	uxth	r2, r3
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015a2a:	69fb      	ldr	r3, [r7, #28]
 8015a2c:	895b      	ldrh	r3, [r3, #10]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d102      	bne.n	8015a38 <dhcp_bind+0xa0>
      dhcp->t1_timeout = 1;
 8015a32:	69fb      	ldr	r3, [r7, #28]
 8015a34:	2201      	movs	r2, #1
 8015a36:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015a38:	69fb      	ldr	r3, [r7, #28]
 8015a3a:	895a      	ldrh	r2, [r3, #10]
 8015a3c:	69fb      	ldr	r3, [r7, #28]
 8015a3e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015a40:	69fb      	ldr	r3, [r7, #28]
 8015a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a48:	d01d      	beq.n	8015a86 <dhcp_bind+0xee>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015a4a:	69fb      	ldr	r3, [r7, #28]
 8015a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a4e:	331e      	adds	r3, #30
 8015a50:	4a32      	ldr	r2, [pc, #200]	; (8015b1c <dhcp_bind+0x184>)
 8015a52:	fba2 2303 	umull	r2, r3, r2, r3
 8015a56:	095b      	lsrs	r3, r3, #5
 8015a58:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8015a5a:	69bb      	ldr	r3, [r7, #24]
 8015a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a60:	d302      	bcc.n	8015a68 <dhcp_bind+0xd0>
      timeout = 0xffff;
 8015a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a66:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015a68:	69bb      	ldr	r3, [r7, #24]
 8015a6a:	b29a      	uxth	r2, r3
 8015a6c:	69fb      	ldr	r3, [r7, #28]
 8015a6e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015a70:	69fb      	ldr	r3, [r7, #28]
 8015a72:	899b      	ldrh	r3, [r3, #12]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d102      	bne.n	8015a7e <dhcp_bind+0xe6>
      dhcp->t2_timeout = 1;
 8015a78:	69fb      	ldr	r3, [r7, #28]
 8015a7a:	2201      	movs	r2, #1
 8015a7c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	899a      	ldrh	r2, [r3, #12]
 8015a82:	69fb      	ldr	r3, [r7, #28]
 8015a84:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015a86:	69fb      	ldr	r3, [r7, #28]
 8015a88:	895a      	ldrh	r2, [r3, #10]
 8015a8a:	69fb      	ldr	r3, [r7, #28]
 8015a8c:	899b      	ldrh	r3, [r3, #12]
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d306      	bcc.n	8015aa0 <dhcp_bind+0x108>
 8015a92:	69fb      	ldr	r3, [r7, #28]
 8015a94:	899b      	ldrh	r3, [r3, #12]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d002      	beq.n	8015aa0 <dhcp_bind+0x108>
    dhcp->t1_timeout = 0;
 8015a9a:	69fb      	ldr	r3, [r7, #28]
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015aa0:	69fb      	ldr	r3, [r7, #28]
 8015aa2:	79db      	ldrb	r3, [r3, #7]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d003      	beq.n	8015ab0 <dhcp_bind+0x118>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015aa8:	69fb      	ldr	r3, [r7, #28]
 8015aaa:	6a1b      	ldr	r3, [r3, #32]
 8015aac:	613b      	str	r3, [r7, #16]
 8015aae:	e014      	b.n	8015ada <dhcp_bind+0x142>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015ab0:	69fb      	ldr	r3, [r7, #28]
 8015ab2:	331c      	adds	r3, #28
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	db02      	blt.n	8015ac6 <dhcp_bind+0x12e>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015ac0:	23ff      	movs	r3, #255	; 0xff
 8015ac2:	613b      	str	r3, [r7, #16]
 8015ac4:	e009      	b.n	8015ada <dhcp_bind+0x142>
    } else if (first_octet >= 192) {
 8015ac6:	7dfb      	ldrb	r3, [r7, #23]
 8015ac8:	2bbf      	cmp	r3, #191	; 0xbf
 8015aca:	d903      	bls.n	8015ad4 <dhcp_bind+0x13c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015acc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015ad0:	613b      	str	r3, [r7, #16]
 8015ad2:	e002      	b.n	8015ada <dhcp_bind+0x142>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ad8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015ada:	69fb      	ldr	r3, [r7, #28]
 8015adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ade:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d108      	bne.n	8015af8 <dhcp_bind+0x160>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015ae6:	69fb      	ldr	r3, [r7, #28]
 8015ae8:	69da      	ldr	r2, [r3, #28]
 8015aea:	693b      	ldr	r3, [r7, #16]
 8015aec:	4013      	ands	r3, r2
 8015aee:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015af6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015af8:	210a      	movs	r1, #10
 8015afa:	69f8      	ldr	r0, [r7, #28]
 8015afc:	f000 fab0 	bl	8016060 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015b00:	69fb      	ldr	r3, [r7, #28]
 8015b02:	f103 011c 	add.w	r1, r3, #28
 8015b06:	f107 030c 	add.w	r3, r7, #12
 8015b0a:	f107 0210 	add.w	r2, r7, #16
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f7f8 fdfe 	bl	800e710 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015b14:	3720      	adds	r7, #32
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd80      	pop	{r7, pc}
 8015b1a:	bf00      	nop
 8015b1c:	88888889 	.word	0x88888889

08015b20 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b08a      	sub	sp, #40	; 0x28
 8015b24:	af02      	add	r7, sp, #8
 8015b26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6a1b      	ldr	r3, [r3, #32]
 8015b2c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015b2e:	2105      	movs	r1, #5
 8015b30:	69b8      	ldr	r0, [r7, #24]
 8015b32:	f000 fa95 	bl	8016060 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015b36:	f107 030c 	add.w	r3, r7, #12
 8015b3a:	2203      	movs	r2, #3
 8015b3c:	69b9      	ldr	r1, [r7, #24]
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f000 feac 	bl	801689c <dhcp_create_msg>
 8015b44:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015b46:	697b      	ldr	r3, [r7, #20]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d057      	beq.n	8015bfc <dhcp_renew+0xdc>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	685b      	ldr	r3, [r3, #4]
 8015b50:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015b52:	89b8      	ldrh	r0, [r7, #12]
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b5a:	2302      	movs	r3, #2
 8015b5c:	2239      	movs	r2, #57	; 0x39
 8015b5e:	f000 fa99 	bl	8016094 <dhcp_option>
 8015b62:	4603      	mov	r3, r0
 8015b64:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015b66:	89b8      	ldrh	r0, [r7, #12]
 8015b68:	693b      	ldr	r3, [r7, #16]
 8015b6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b72:	461a      	mov	r2, r3
 8015b74:	f000 fac8 	bl	8016108 <dhcp_option_short>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015b7c:	89b8      	ldrh	r0, [r7, #12]
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b84:	2303      	movs	r3, #3
 8015b86:	2237      	movs	r2, #55	; 0x37
 8015b88:	f000 fa84 	bl	8016094 <dhcp_option>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015b90:	2300      	movs	r3, #0
 8015b92:	77bb      	strb	r3, [r7, #30]
 8015b94:	e00e      	b.n	8015bb4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015b96:	89b8      	ldrh	r0, [r7, #12]
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b9e:	7fbb      	ldrb	r3, [r7, #30]
 8015ba0:	4a2e      	ldr	r2, [pc, #184]	; (8015c5c <dhcp_renew+0x13c>)
 8015ba2:	5cd3      	ldrb	r3, [r2, r3]
 8015ba4:	461a      	mov	r2, r3
 8015ba6:	f000 fa98 	bl	80160da <dhcp_option_byte>
 8015baa:	4603      	mov	r3, r0
 8015bac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015bae:	7fbb      	ldrb	r3, [r7, #30]
 8015bb0:	3301      	adds	r3, #1
 8015bb2:	77bb      	strb	r3, [r7, #30]
 8015bb4:	7fbb      	ldrb	r3, [r7, #30]
 8015bb6:	2b02      	cmp	r3, #2
 8015bb8:	d9ed      	bls.n	8015b96 <dhcp_renew+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8015bba:	89b8      	ldrh	r0, [r7, #12]
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	33f0      	adds	r3, #240	; 0xf0
 8015bc0:	687a      	ldr	r2, [r7, #4]
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	f000 faf8 	bl	80161b8 <dhcp_option_hostname>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015bcc:	89b8      	ldrh	r0, [r7, #12]
 8015bce:	693b      	ldr	r3, [r7, #16]
 8015bd0:	33f0      	adds	r3, #240	; 0xf0
 8015bd2:	697a      	ldr	r2, [r7, #20]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	f000 ff13 	bl	8016a00 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015bda:	4b21      	ldr	r3, [pc, #132]	; (8015c60 <dhcp_renew+0x140>)
 8015bdc:	6818      	ldr	r0, [r3, #0]
 8015bde:	69bb      	ldr	r3, [r7, #24]
 8015be0:	f103 0218 	add.w	r2, r3, #24
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	9300      	str	r3, [sp, #0]
 8015be8:	2343      	movs	r3, #67	; 0x43
 8015bea:	6979      	ldr	r1, [r7, #20]
 8015bec:	f7fe ff40 	bl	8014a70 <udp_sendto_if>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015bf4:	6978      	ldr	r0, [r7, #20]
 8015bf6:	f7f9 f921 	bl	800ee3c <pbuf_free>
 8015bfa:	e001      	b.n	8015c00 <dhcp_renew+0xe0>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015bfc:	23ff      	movs	r3, #255	; 0xff
 8015bfe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015c00:	69bb      	ldr	r3, [r7, #24]
 8015c02:	799b      	ldrb	r3, [r3, #6]
 8015c04:	2bff      	cmp	r3, #255	; 0xff
 8015c06:	d005      	beq.n	8015c14 <dhcp_renew+0xf4>
    dhcp->tries++;
 8015c08:	69bb      	ldr	r3, [r7, #24]
 8015c0a:	799b      	ldrb	r3, [r3, #6]
 8015c0c:	3301      	adds	r3, #1
 8015c0e:	b2da      	uxtb	r2, r3
 8015c10:	69bb      	ldr	r3, [r7, #24]
 8015c12:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015c14:	69bb      	ldr	r3, [r7, #24]
 8015c16:	799b      	ldrb	r3, [r3, #6]
 8015c18:	2b09      	cmp	r3, #9
 8015c1a:	d80a      	bhi.n	8015c32 <dhcp_renew+0x112>
 8015c1c:	69bb      	ldr	r3, [r7, #24]
 8015c1e:	799b      	ldrb	r3, [r3, #6]
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	461a      	mov	r2, r3
 8015c24:	0152      	lsls	r2, r2, #5
 8015c26:	1ad2      	subs	r2, r2, r3
 8015c28:	0092      	lsls	r2, r2, #2
 8015c2a:	4413      	add	r3, r2
 8015c2c:	011b      	lsls	r3, r3, #4
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	e001      	b.n	8015c36 <dhcp_renew+0x116>
 8015c32:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015c36:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015c38:	89fb      	ldrh	r3, [r7, #14]
 8015c3a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015c3e:	4a09      	ldr	r2, [pc, #36]	; (8015c64 <dhcp_renew+0x144>)
 8015c40:	fb82 1203 	smull	r1, r2, r2, r3
 8015c44:	1152      	asrs	r2, r2, #5
 8015c46:	17db      	asrs	r3, r3, #31
 8015c48:	1ad3      	subs	r3, r2, r3
 8015c4a:	b29a      	uxth	r2, r3
 8015c4c:	69bb      	ldr	r3, [r7, #24]
 8015c4e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015c50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015c54:	4618      	mov	r0, r3
 8015c56:	3720      	adds	r7, #32
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}
 8015c5c:	20000140 	.word	0x20000140
 8015c60:	20007840 	.word	0x20007840
 8015c64:	10624dd3 	.word	0x10624dd3

08015c68 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b08a      	sub	sp, #40	; 0x28
 8015c6c:	af02      	add	r7, sp, #8
 8015c6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6a1b      	ldr	r3, [r3, #32]
 8015c74:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015c76:	2104      	movs	r1, #4
 8015c78:	69b8      	ldr	r0, [r7, #24]
 8015c7a:	f000 f9f1 	bl	8016060 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015c7e:	f107 030c 	add.w	r3, r7, #12
 8015c82:	2203      	movs	r2, #3
 8015c84:	69b9      	ldr	r1, [r7, #24]
 8015c86:	6878      	ldr	r0, [r7, #4]
 8015c88:	f000 fe08 	bl	801689c <dhcp_create_msg>
 8015c8c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d055      	beq.n	8015d40 <dhcp_rebind+0xd8>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015c9a:	89b8      	ldrh	r0, [r7, #12]
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ca2:	2302      	movs	r3, #2
 8015ca4:	2239      	movs	r2, #57	; 0x39
 8015ca6:	f000 f9f5 	bl	8016094 <dhcp_option>
 8015caa:	4603      	mov	r3, r0
 8015cac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015cae:	89b8      	ldrh	r0, [r7, #12]
 8015cb0:	693b      	ldr	r3, [r7, #16]
 8015cb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cba:	461a      	mov	r2, r3
 8015cbc:	f000 fa24 	bl	8016108 <dhcp_option_short>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015cc4:	89b8      	ldrh	r0, [r7, #12]
 8015cc6:	693b      	ldr	r3, [r7, #16]
 8015cc8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ccc:	2303      	movs	r3, #3
 8015cce:	2237      	movs	r2, #55	; 0x37
 8015cd0:	f000 f9e0 	bl	8016094 <dhcp_option>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015cd8:	2300      	movs	r3, #0
 8015cda:	77bb      	strb	r3, [r7, #30]
 8015cdc:	e00e      	b.n	8015cfc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015cde:	89b8      	ldrh	r0, [r7, #12]
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ce6:	7fbb      	ldrb	r3, [r7, #30]
 8015ce8:	4a2d      	ldr	r2, [pc, #180]	; (8015da0 <dhcp_rebind+0x138>)
 8015cea:	5cd3      	ldrb	r3, [r2, r3]
 8015cec:	461a      	mov	r2, r3
 8015cee:	f000 f9f4 	bl	80160da <dhcp_option_byte>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015cf6:	7fbb      	ldrb	r3, [r7, #30]
 8015cf8:	3301      	adds	r3, #1
 8015cfa:	77bb      	strb	r3, [r7, #30]
 8015cfc:	7fbb      	ldrb	r3, [r7, #30]
 8015cfe:	2b02      	cmp	r3, #2
 8015d00:	d9ed      	bls.n	8015cde <dhcp_rebind+0x76>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8015d02:	89b8      	ldrh	r0, [r7, #12]
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	33f0      	adds	r3, #240	; 0xf0
 8015d08:	687a      	ldr	r2, [r7, #4]
 8015d0a:	4619      	mov	r1, r3
 8015d0c:	f000 fa54 	bl	80161b8 <dhcp_option_hostname>
 8015d10:	4603      	mov	r3, r0
 8015d12:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015d14:	89b8      	ldrh	r0, [r7, #12]
 8015d16:	693b      	ldr	r3, [r7, #16]
 8015d18:	33f0      	adds	r3, #240	; 0xf0
 8015d1a:	697a      	ldr	r2, [r7, #20]
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	f000 fe6f 	bl	8016a00 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015d22:	4b20      	ldr	r3, [pc, #128]	; (8015da4 <dhcp_rebind+0x13c>)
 8015d24:	6818      	ldr	r0, [r3, #0]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	9300      	str	r3, [sp, #0]
 8015d2a:	2343      	movs	r3, #67	; 0x43
 8015d2c:	4a1e      	ldr	r2, [pc, #120]	; (8015da8 <dhcp_rebind+0x140>)
 8015d2e:	6979      	ldr	r1, [r7, #20]
 8015d30:	f7fe fe9e 	bl	8014a70 <udp_sendto_if>
 8015d34:	4603      	mov	r3, r0
 8015d36:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015d38:	6978      	ldr	r0, [r7, #20]
 8015d3a:	f7f9 f87f 	bl	800ee3c <pbuf_free>
 8015d3e:	e001      	b.n	8015d44 <dhcp_rebind+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015d40:	23ff      	movs	r3, #255	; 0xff
 8015d42:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015d44:	69bb      	ldr	r3, [r7, #24]
 8015d46:	799b      	ldrb	r3, [r3, #6]
 8015d48:	2bff      	cmp	r3, #255	; 0xff
 8015d4a:	d005      	beq.n	8015d58 <dhcp_rebind+0xf0>
    dhcp->tries++;
 8015d4c:	69bb      	ldr	r3, [r7, #24]
 8015d4e:	799b      	ldrb	r3, [r3, #6]
 8015d50:	3301      	adds	r3, #1
 8015d52:	b2da      	uxtb	r2, r3
 8015d54:	69bb      	ldr	r3, [r7, #24]
 8015d56:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015d58:	69bb      	ldr	r3, [r7, #24]
 8015d5a:	799b      	ldrb	r3, [r3, #6]
 8015d5c:	2b09      	cmp	r3, #9
 8015d5e:	d80a      	bhi.n	8015d76 <dhcp_rebind+0x10e>
 8015d60:	69bb      	ldr	r3, [r7, #24]
 8015d62:	799b      	ldrb	r3, [r3, #6]
 8015d64:	b29b      	uxth	r3, r3
 8015d66:	461a      	mov	r2, r3
 8015d68:	0152      	lsls	r2, r2, #5
 8015d6a:	1ad2      	subs	r2, r2, r3
 8015d6c:	0092      	lsls	r2, r2, #2
 8015d6e:	4413      	add	r3, r2
 8015d70:	00db      	lsls	r3, r3, #3
 8015d72:	b29b      	uxth	r3, r3
 8015d74:	e001      	b.n	8015d7a <dhcp_rebind+0x112>
 8015d76:	f242 7310 	movw	r3, #10000	; 0x2710
 8015d7a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015d7c:	89fb      	ldrh	r3, [r7, #14]
 8015d7e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015d82:	4a0a      	ldr	r2, [pc, #40]	; (8015dac <dhcp_rebind+0x144>)
 8015d84:	fb82 1203 	smull	r1, r2, r2, r3
 8015d88:	1152      	asrs	r2, r2, #5
 8015d8a:	17db      	asrs	r3, r3, #31
 8015d8c:	1ad3      	subs	r3, r2, r3
 8015d8e:	b29a      	uxth	r2, r3
 8015d90:	69bb      	ldr	r3, [r7, #24]
 8015d92:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015d94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3720      	adds	r7, #32
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	20000140 	.word	0x20000140
 8015da4:	20007840 	.word	0x20007840
 8015da8:	0801bb40 	.word	0x0801bb40
 8015dac:	10624dd3 	.word	0x10624dd3

08015db0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015db0:	b5b0      	push	{r4, r5, r7, lr}
 8015db2:	b08a      	sub	sp, #40	; 0x28
 8015db4:	af02      	add	r7, sp, #8
 8015db6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	6a1b      	ldr	r3, [r3, #32]
 8015dbc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015dbe:	2103      	movs	r1, #3
 8015dc0:	69b8      	ldr	r0, [r7, #24]
 8015dc2:	f000 f94d 	bl	8016060 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015dc6:	f107 030c 	add.w	r3, r7, #12
 8015dca:	2203      	movs	r2, #3
 8015dcc:	69b9      	ldr	r1, [r7, #24]
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f000 fd64 	bl	801689c <dhcp_create_msg>
 8015dd4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015dd6:	697b      	ldr	r3, [r7, #20]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d06f      	beq.n	8015ebc <dhcp_reboot+0x10c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015ddc:	697b      	ldr	r3, [r7, #20]
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015de2:	89b8      	ldrh	r0, [r7, #12]
 8015de4:	693b      	ldr	r3, [r7, #16]
 8015de6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015dea:	2302      	movs	r3, #2
 8015dec:	2239      	movs	r2, #57	; 0x39
 8015dee:	f000 f951 	bl	8016094 <dhcp_option>
 8015df2:	4603      	mov	r3, r0
 8015df4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015df6:	89b8      	ldrh	r0, [r7, #12]
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	33f0      	adds	r3, #240	; 0xf0
 8015dfc:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015e00:	4619      	mov	r1, r3
 8015e02:	f000 f981 	bl	8016108 <dhcp_option_short>
 8015e06:	4603      	mov	r3, r0
 8015e08:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015e0a:	89b8      	ldrh	r0, [r7, #12]
 8015e0c:	693b      	ldr	r3, [r7, #16]
 8015e0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015e12:	2304      	movs	r3, #4
 8015e14:	2232      	movs	r2, #50	; 0x32
 8015e16:	f000 f93d 	bl	8016094 <dhcp_option>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015e1e:	89bc      	ldrh	r4, [r7, #12]
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015e26:	69bb      	ldr	r3, [r7, #24]
 8015e28:	69db      	ldr	r3, [r3, #28]
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7f8 f823 	bl	800de76 <lwip_htonl>
 8015e30:	4603      	mov	r3, r0
 8015e32:	461a      	mov	r2, r3
 8015e34:	4629      	mov	r1, r5
 8015e36:	4620      	mov	r0, r4
 8015e38:	f000 f989 	bl	801614e <dhcp_option_long>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015e40:	89b8      	ldrh	r0, [r7, #12]
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015e48:	2303      	movs	r3, #3
 8015e4a:	2237      	movs	r2, #55	; 0x37
 8015e4c:	f000 f922 	bl	8016094 <dhcp_option>
 8015e50:	4603      	mov	r3, r0
 8015e52:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015e54:	2300      	movs	r3, #0
 8015e56:	77bb      	strb	r3, [r7, #30]
 8015e58:	e00e      	b.n	8015e78 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015e5a:	89b8      	ldrh	r0, [r7, #12]
 8015e5c:	693b      	ldr	r3, [r7, #16]
 8015e5e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015e62:	7fbb      	ldrb	r3, [r7, #30]
 8015e64:	4a2d      	ldr	r2, [pc, #180]	; (8015f1c <dhcp_reboot+0x16c>)
 8015e66:	5cd3      	ldrb	r3, [r2, r3]
 8015e68:	461a      	mov	r2, r3
 8015e6a:	f000 f936 	bl	80160da <dhcp_option_byte>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015e72:	7fbb      	ldrb	r3, [r7, #30]
 8015e74:	3301      	adds	r3, #1
 8015e76:	77bb      	strb	r3, [r7, #30]
 8015e78:	7fbb      	ldrb	r3, [r7, #30]
 8015e7a:	2b02      	cmp	r3, #2
 8015e7c:	d9ed      	bls.n	8015e5a <dhcp_reboot+0xaa>
    }

#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
 8015e7e:	89b8      	ldrh	r0, [r7, #12]
 8015e80:	693b      	ldr	r3, [r7, #16]
 8015e82:	33f0      	adds	r3, #240	; 0xf0
 8015e84:	687a      	ldr	r2, [r7, #4]
 8015e86:	4619      	mov	r1, r3
 8015e88:	f000 f996 	bl	80161b8 <dhcp_option_hostname>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	81bb      	strh	r3, [r7, #12]
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015e90:	89b8      	ldrh	r0, [r7, #12]
 8015e92:	693b      	ldr	r3, [r7, #16]
 8015e94:	33f0      	adds	r3, #240	; 0xf0
 8015e96:	697a      	ldr	r2, [r7, #20]
 8015e98:	4619      	mov	r1, r3
 8015e9a:	f000 fdb1 	bl	8016a00 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015e9e:	4b20      	ldr	r3, [pc, #128]	; (8015f20 <dhcp_reboot+0x170>)
 8015ea0:	6818      	ldr	r0, [r3, #0]
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	9300      	str	r3, [sp, #0]
 8015ea6:	2343      	movs	r3, #67	; 0x43
 8015ea8:	4a1e      	ldr	r2, [pc, #120]	; (8015f24 <dhcp_reboot+0x174>)
 8015eaa:	6979      	ldr	r1, [r7, #20]
 8015eac:	f7fe fde0 	bl	8014a70 <udp_sendto_if>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015eb4:	6978      	ldr	r0, [r7, #20]
 8015eb6:	f7f8 ffc1 	bl	800ee3c <pbuf_free>
 8015eba:	e001      	b.n	8015ec0 <dhcp_reboot+0x110>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015ebc:	23ff      	movs	r3, #255	; 0xff
 8015ebe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015ec0:	69bb      	ldr	r3, [r7, #24]
 8015ec2:	799b      	ldrb	r3, [r3, #6]
 8015ec4:	2bff      	cmp	r3, #255	; 0xff
 8015ec6:	d005      	beq.n	8015ed4 <dhcp_reboot+0x124>
    dhcp->tries++;
 8015ec8:	69bb      	ldr	r3, [r7, #24]
 8015eca:	799b      	ldrb	r3, [r3, #6]
 8015ecc:	3301      	adds	r3, #1
 8015ece:	b2da      	uxtb	r2, r3
 8015ed0:	69bb      	ldr	r3, [r7, #24]
 8015ed2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015ed4:	69bb      	ldr	r3, [r7, #24]
 8015ed6:	799b      	ldrb	r3, [r3, #6]
 8015ed8:	2b09      	cmp	r3, #9
 8015eda:	d80a      	bhi.n	8015ef2 <dhcp_reboot+0x142>
 8015edc:	69bb      	ldr	r3, [r7, #24]
 8015ede:	799b      	ldrb	r3, [r3, #6]
 8015ee0:	b29b      	uxth	r3, r3
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	0152      	lsls	r2, r2, #5
 8015ee6:	1ad2      	subs	r2, r2, r3
 8015ee8:	0092      	lsls	r2, r2, #2
 8015eea:	4413      	add	r3, r2
 8015eec:	00db      	lsls	r3, r3, #3
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	e001      	b.n	8015ef6 <dhcp_reboot+0x146>
 8015ef2:	f242 7310 	movw	r3, #10000	; 0x2710
 8015ef6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015ef8:	89fb      	ldrh	r3, [r7, #14]
 8015efa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015efe:	4a0a      	ldr	r2, [pc, #40]	; (8015f28 <dhcp_reboot+0x178>)
 8015f00:	fb82 1203 	smull	r1, r2, r2, r3
 8015f04:	1152      	asrs	r2, r2, #5
 8015f06:	17db      	asrs	r3, r3, #31
 8015f08:	1ad3      	subs	r3, r2, r3
 8015f0a:	b29a      	uxth	r2, r3
 8015f0c:	69bb      	ldr	r3, [r7, #24]
 8015f0e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015f10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3720      	adds	r7, #32
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8015f1c:	20000140 	.word	0x20000140
 8015f20:	20007840 	.word	0x20007840
 8015f24:	0801bb40 	.word	0x0801bb40
 8015f28:	10624dd3 	.word	0x10624dd3

08015f2c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015f2c:	b5b0      	push	{r4, r5, r7, lr}
 8015f2e:	b08a      	sub	sp, #40	; 0x28
 8015f30:	af02      	add	r7, sp, #8
 8015f32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6a1b      	ldr	r3, [r3, #32]
 8015f38:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015f3a:	69fb      	ldr	r3, [r7, #28]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	f000 8084 	beq.w	801604a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015f42:	69fb      	ldr	r3, [r7, #28]
 8015f44:	795b      	ldrb	r3, [r3, #5]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	f000 8081 	beq.w	801604e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015f4c:	69fb      	ldr	r3, [r7, #28]
 8015f4e:	699b      	ldr	r3, [r3, #24]
 8015f50:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015f52:	69fb      	ldr	r3, [r7, #28]
 8015f54:	2200      	movs	r2, #0
 8015f56:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015f58:	69fb      	ldr	r3, [r7, #28]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015f5e:	69fb      	ldr	r3, [r7, #28]
 8015f60:	2200      	movs	r2, #0
 8015f62:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015f64:	69fb      	ldr	r3, [r7, #28]
 8015f66:	2200      	movs	r2, #0
 8015f68:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015f6a:	69fb      	ldr	r3, [r7, #28]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8015f70:	69fb      	ldr	r3, [r7, #28]
 8015f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015f74:	69fb      	ldr	r3, [r7, #28]
 8015f76:	62da      	str	r2, [r3, #44]	; 0x2c
 8015f78:	69fb      	ldr	r3, [r7, #28]
 8015f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f7c:	69fb      	ldr	r3, [r7, #28]
 8015f7e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015f80:	69fb      	ldr	r3, [r7, #28]
 8015f82:	2200      	movs	r2, #0
 8015f84:	829a      	strh	r2, [r3, #20]
 8015f86:	69fb      	ldr	r3, [r7, #28]
 8015f88:	8a9a      	ldrh	r2, [r3, #20]
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	825a      	strh	r2, [r3, #18]
 8015f8e:	69fb      	ldr	r3, [r7, #28]
 8015f90:	8a5a      	ldrh	r2, [r3, #18]
 8015f92:	69fb      	ldr	r3, [r7, #28]
 8015f94:	821a      	strh	r2, [r3, #16]
 8015f96:	69fb      	ldr	r3, [r7, #28]
 8015f98:	8a1a      	ldrh	r2, [r3, #16]
 8015f9a:	69fb      	ldr	r3, [r7, #28]
 8015f9c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	f000 fd5c 	bl	8016a5c <dhcp_supplied_address>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d03b      	beq.n	8016022 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015faa:	f107 030e 	add.w	r3, r7, #14
 8015fae:	2207      	movs	r2, #7
 8015fb0:	69f9      	ldr	r1, [r7, #28]
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f000 fc72 	bl	801689c <dhcp_create_msg>
 8015fb8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015fba:	69bb      	ldr	r3, [r7, #24]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d030      	beq.n	8016022 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015fc0:	69bb      	ldr	r3, [r7, #24]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015fc6:	89f8      	ldrh	r0, [r7, #14]
 8015fc8:	697b      	ldr	r3, [r7, #20]
 8015fca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015fce:	2304      	movs	r3, #4
 8015fd0:	2236      	movs	r2, #54	; 0x36
 8015fd2:	f000 f85f 	bl	8016094 <dhcp_option>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015fda:	89fc      	ldrh	r4, [r7, #14]
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015fe2:	693b      	ldr	r3, [r7, #16]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f7f7 ff46 	bl	800de76 <lwip_htonl>
 8015fea:	4603      	mov	r3, r0
 8015fec:	461a      	mov	r2, r3
 8015fee:	4629      	mov	r1, r5
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	f000 f8ac 	bl	801614e <dhcp_option_long>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015ffa:	89f8      	ldrh	r0, [r7, #14]
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	33f0      	adds	r3, #240	; 0xf0
 8016000:	69ba      	ldr	r2, [r7, #24]
 8016002:	4619      	mov	r1, r3
 8016004:	f000 fcfc 	bl	8016a00 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016008:	4b13      	ldr	r3, [pc, #76]	; (8016058 <dhcp_release_and_stop+0x12c>)
 801600a:	6818      	ldr	r0, [r3, #0]
 801600c:	f107 0210 	add.w	r2, r7, #16
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	9300      	str	r3, [sp, #0]
 8016014:	2343      	movs	r3, #67	; 0x43
 8016016:	69b9      	ldr	r1, [r7, #24]
 8016018:	f7fe fd2a 	bl	8014a70 <udp_sendto_if>
      pbuf_free(p_out);
 801601c:	69b8      	ldr	r0, [r7, #24]
 801601e:	f7f8 ff0d 	bl	800ee3c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016022:	4b0e      	ldr	r3, [pc, #56]	; (801605c <dhcp_release_and_stop+0x130>)
 8016024:	4a0d      	ldr	r2, [pc, #52]	; (801605c <dhcp_release_and_stop+0x130>)
 8016026:	490d      	ldr	r1, [pc, #52]	; (801605c <dhcp_release_and_stop+0x130>)
 8016028:	6878      	ldr	r0, [r7, #4]
 801602a:	f7f8 fb71 	bl	800e710 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801602e:	2100      	movs	r1, #0
 8016030:	69f8      	ldr	r0, [r7, #28]
 8016032:	f000 f815 	bl	8016060 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8016036:	69fb      	ldr	r3, [r7, #28]
 8016038:	791b      	ldrb	r3, [r3, #4]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d008      	beq.n	8016050 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801603e:	f7fe ffd5 	bl	8014fec <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8016042:	69fb      	ldr	r3, [r7, #28]
 8016044:	2200      	movs	r2, #0
 8016046:	711a      	strb	r2, [r3, #4]
 8016048:	e002      	b.n	8016050 <dhcp_release_and_stop+0x124>
    return;
 801604a:	bf00      	nop
 801604c:	e000      	b.n	8016050 <dhcp_release_and_stop+0x124>
    return;
 801604e:	bf00      	nop
  }
}
 8016050:	3720      	adds	r7, #32
 8016052:	46bd      	mov	sp, r7
 8016054:	bdb0      	pop	{r4, r5, r7, pc}
 8016056:	bf00      	nop
 8016058:	20007840 	.word	0x20007840
 801605c:	0801bb3c 	.word	0x0801bb3c

08016060 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016060:	b480      	push	{r7}
 8016062:	b083      	sub	sp, #12
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
 8016068:	460b      	mov	r3, r1
 801606a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	795b      	ldrb	r3, [r3, #5]
 8016070:	78fa      	ldrb	r2, [r7, #3]
 8016072:	429a      	cmp	r2, r3
 8016074:	d008      	beq.n	8016088 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	78fa      	ldrb	r2, [r7, #3]
 801607a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	2200      	movs	r2, #0
 8016080:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2200      	movs	r2, #0
 8016086:	811a      	strh	r2, [r3, #8]
  }
}
 8016088:	bf00      	nop
 801608a:	370c      	adds	r7, #12
 801608c:	46bd      	mov	sp, r7
 801608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016092:	4770      	bx	lr

08016094 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016094:	b480      	push	{r7}
 8016096:	b083      	sub	sp, #12
 8016098:	af00      	add	r7, sp, #0
 801609a:	6039      	str	r1, [r7, #0]
 801609c:	4611      	mov	r1, r2
 801609e:	461a      	mov	r2, r3
 80160a0:	4603      	mov	r3, r0
 80160a2:	80fb      	strh	r3, [r7, #6]
 80160a4:	460b      	mov	r3, r1
 80160a6:	717b      	strb	r3, [r7, #5]
 80160a8:	4613      	mov	r3, r2
 80160aa:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  options[options_out_len++] = option_type;
 80160ac:	88fb      	ldrh	r3, [r7, #6]
 80160ae:	1c5a      	adds	r2, r3, #1
 80160b0:	80fa      	strh	r2, [r7, #6]
 80160b2:	461a      	mov	r2, r3
 80160b4:	683b      	ldr	r3, [r7, #0]
 80160b6:	4413      	add	r3, r2
 80160b8:	797a      	ldrb	r2, [r7, #5]
 80160ba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80160bc:	88fb      	ldrh	r3, [r7, #6]
 80160be:	1c5a      	adds	r2, r3, #1
 80160c0:	80fa      	strh	r2, [r7, #6]
 80160c2:	461a      	mov	r2, r3
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	4413      	add	r3, r2
 80160c8:	793a      	ldrb	r2, [r7, #4]
 80160ca:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80160cc:	88fb      	ldrh	r3, [r7, #6]
}
 80160ce:	4618      	mov	r0, r3
 80160d0:	370c      	adds	r7, #12
 80160d2:	46bd      	mov	sp, r7
 80160d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d8:	4770      	bx	lr

080160da <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80160da:	b480      	push	{r7}
 80160dc:	b083      	sub	sp, #12
 80160de:	af00      	add	r7, sp, #0
 80160e0:	4603      	mov	r3, r0
 80160e2:	6039      	str	r1, [r7, #0]
 80160e4:	80fb      	strh	r3, [r7, #6]
 80160e6:	4613      	mov	r3, r2
 80160e8:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
  options[options_out_len++] = value;
 80160ea:	88fb      	ldrh	r3, [r7, #6]
 80160ec:	1c5a      	adds	r2, r3, #1
 80160ee:	80fa      	strh	r2, [r7, #6]
 80160f0:	461a      	mov	r2, r3
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	4413      	add	r3, r2
 80160f6:	797a      	ldrb	r2, [r7, #5]
 80160f8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80160fa:	88fb      	ldrh	r3, [r7, #6]
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr

08016108 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016108:	b480      	push	{r7}
 801610a:	b083      	sub	sp, #12
 801610c:	af00      	add	r7, sp, #0
 801610e:	4603      	mov	r3, r0
 8016110:	6039      	str	r1, [r7, #0]
 8016112:	80fb      	strh	r3, [r7, #6]
 8016114:	4613      	mov	r3, r2
 8016116:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016118:	88bb      	ldrh	r3, [r7, #4]
 801611a:	0a1b      	lsrs	r3, r3, #8
 801611c:	b29a      	uxth	r2, r3
 801611e:	88fb      	ldrh	r3, [r7, #6]
 8016120:	1c59      	adds	r1, r3, #1
 8016122:	80f9      	strh	r1, [r7, #6]
 8016124:	4619      	mov	r1, r3
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	440b      	add	r3, r1
 801612a:	b2d2      	uxtb	r2, r2
 801612c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801612e:	88fb      	ldrh	r3, [r7, #6]
 8016130:	1c5a      	adds	r2, r3, #1
 8016132:	80fa      	strh	r2, [r7, #6]
 8016134:	461a      	mov	r2, r3
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	4413      	add	r3, r2
 801613a:	88ba      	ldrh	r2, [r7, #4]
 801613c:	b2d2      	uxtb	r2, r2
 801613e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016140:	88fb      	ldrh	r3, [r7, #6]
}
 8016142:	4618      	mov	r0, r3
 8016144:	370c      	adds	r7, #12
 8016146:	46bd      	mov	sp, r7
 8016148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614c:	4770      	bx	lr

0801614e <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801614e:	b480      	push	{r7}
 8016150:	b085      	sub	sp, #20
 8016152:	af00      	add	r7, sp, #0
 8016154:	4603      	mov	r3, r0
 8016156:	60b9      	str	r1, [r7, #8]
 8016158:	607a      	str	r2, [r7, #4]
 801615a:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	0e1a      	lsrs	r2, r3, #24
 8016160:	89fb      	ldrh	r3, [r7, #14]
 8016162:	1c59      	adds	r1, r3, #1
 8016164:	81f9      	strh	r1, [r7, #14]
 8016166:	4619      	mov	r1, r3
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	440b      	add	r3, r1
 801616c:	b2d2      	uxtb	r2, r2
 801616e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	0c1a      	lsrs	r2, r3, #16
 8016174:	89fb      	ldrh	r3, [r7, #14]
 8016176:	1c59      	adds	r1, r3, #1
 8016178:	81f9      	strh	r1, [r7, #14]
 801617a:	4619      	mov	r1, r3
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	440b      	add	r3, r1
 8016180:	b2d2      	uxtb	r2, r2
 8016182:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	0a1a      	lsrs	r2, r3, #8
 8016188:	89fb      	ldrh	r3, [r7, #14]
 801618a:	1c59      	adds	r1, r3, #1
 801618c:	81f9      	strh	r1, [r7, #14]
 801618e:	4619      	mov	r1, r3
 8016190:	68bb      	ldr	r3, [r7, #8]
 8016192:	440b      	add	r3, r1
 8016194:	b2d2      	uxtb	r2, r2
 8016196:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016198:	89fb      	ldrh	r3, [r7, #14]
 801619a:	1c5a      	adds	r2, r3, #1
 801619c:	81fa      	strh	r2, [r7, #14]
 801619e:	461a      	mov	r2, r3
 80161a0:	68bb      	ldr	r3, [r7, #8]
 80161a2:	4413      	add	r3, r2
 80161a4:	687a      	ldr	r2, [r7, #4]
 80161a6:	b2d2      	uxtb	r2, r2
 80161a8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80161aa:	89fb      	ldrh	r3, [r7, #14]
}
 80161ac:	4618      	mov	r0, r3
 80161ae:	3714      	adds	r7, #20
 80161b0:	46bd      	mov	sp, r7
 80161b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b6:	4770      	bx	lr

080161b8 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static u16_t
dhcp_option_hostname(u16_t options_out_len, u8_t *options, struct netif *netif)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b088      	sub	sp, #32
 80161bc:	af00      	add	r7, sp, #0
 80161be:	4603      	mov	r3, r0
 80161c0:	60b9      	str	r1, [r7, #8]
 80161c2:	607a      	str	r2, [r7, #4]
 80161c4:	81fb      	strh	r3, [r7, #14]
  if (netif->hostname != NULL) {
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d02f      	beq.n	801622e <dhcp_option_hostname+0x76>
    size_t namelen = strlen(netif->hostname);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161d2:	4618      	mov	r0, r3
 80161d4:	f7ea f81e 	bl	8000214 <strlen>
 80161d8:	6178      	str	r0, [r7, #20]
    if (namelen > 0) {
 80161da:	697b      	ldr	r3, [r7, #20]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d026      	beq.n	801622e <dhcp_option_hostname+0x76>
      size_t len;
      const char *p = netif->hostname;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161e4:	61bb      	str	r3, [r7, #24]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - options_out_len - 3;
 80161e6:	89fb      	ldrh	r3, [r7, #14]
 80161e8:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 80161ec:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
      len = LWIP_MIN(namelen, available);
 80161ee:	693a      	ldr	r2, [r7, #16]
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	4293      	cmp	r3, r2
 80161f4:	bf28      	it	cs
 80161f6:	4613      	movcs	r3, r2
 80161f8:	61fb      	str	r3, [r7, #28]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
      options_out_len = dhcp_option(options_out_len, options, DHCP_OPTION_HOSTNAME, (u8_t)len);
 80161fa:	69fb      	ldr	r3, [r7, #28]
 80161fc:	b2db      	uxtb	r3, r3
 80161fe:	89f8      	ldrh	r0, [r7, #14]
 8016200:	220c      	movs	r2, #12
 8016202:	68b9      	ldr	r1, [r7, #8]
 8016204:	f7ff ff46 	bl	8016094 <dhcp_option>
 8016208:	4603      	mov	r3, r0
 801620a:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 801620c:	e00a      	b.n	8016224 <dhcp_option_hostname+0x6c>
        options_out_len = dhcp_option_byte(options_out_len, options, *p++);
 801620e:	69bb      	ldr	r3, [r7, #24]
 8016210:	1c5a      	adds	r2, r3, #1
 8016212:	61ba      	str	r2, [r7, #24]
 8016214:	781a      	ldrb	r2, [r3, #0]
 8016216:	89fb      	ldrh	r3, [r7, #14]
 8016218:	68b9      	ldr	r1, [r7, #8]
 801621a:	4618      	mov	r0, r3
 801621c:	f7ff ff5d 	bl	80160da <dhcp_option_byte>
 8016220:	4603      	mov	r3, r0
 8016222:	81fb      	strh	r3, [r7, #14]
      while (len--) {
 8016224:	69fb      	ldr	r3, [r7, #28]
 8016226:	1e5a      	subs	r2, r3, #1
 8016228:	61fa      	str	r2, [r7, #28]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d1ef      	bne.n	801620e <dhcp_option_hostname+0x56>
      }
    }
  }
  return options_out_len;
 801622e:	89fb      	ldrh	r3, [r7, #14]
}
 8016230:	4618      	mov	r0, r3
 8016232:	3720      	adds	r7, #32
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}

08016238 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b092      	sub	sp, #72	; 0x48
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
 8016240:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016242:	2300      	movs	r3, #0
 8016244:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 8016246:	2300      	movs	r3, #0
 8016248:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801624a:	2208      	movs	r2, #8
 801624c:	2100      	movs	r1, #0
 801624e:	48b6      	ldr	r0, [pc, #728]	; (8016528 <dhcp_parse_reply+0x2f0>)
 8016250:	f003 f9fc 	bl	801964c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	895b      	ldrh	r3, [r3, #10]
 8016258:	2b2b      	cmp	r3, #43	; 0x2b
 801625a:	d802      	bhi.n	8016262 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801625c:	f06f 0301 	mvn.w	r3, #1
 8016260:	e24a      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	685b      	ldr	r3, [r3, #4]
 8016266:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016268:	23f0      	movs	r3, #240	; 0xf0
 801626a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	891b      	ldrh	r3, [r3, #8]
 8016270:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016276:	e00c      	b.n	8016292 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801627a:	895b      	ldrh	r3, [r3, #10]
 801627c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801627e:	1ad3      	subs	r3, r2, r3
 8016280:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016284:	895b      	ldrh	r3, [r3, #10]
 8016286:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016288:	1ad3      	subs	r3, r2, r3
 801628a:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 801628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016294:	2b00      	cmp	r3, #0
 8016296:	d004      	beq.n	80162a2 <dhcp_parse_reply+0x6a>
 8016298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801629a:	895b      	ldrh	r3, [r3, #10]
 801629c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801629e:	429a      	cmp	r2, r3
 80162a0:	d2ea      	bcs.n	8016278 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80162a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d102      	bne.n	80162ae <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80162a8:	f06f 0301 	mvn.w	r3, #1
 80162ac:	e224      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
  }
  offset = options_idx;
 80162ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 80162b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 80162b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162ba:	685b      	ldr	r3, [r3, #4]
 80162bc:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80162be:	e1d9      	b.n	8016674 <dhcp_parse_reply+0x43c>
    u8_t op = options[offset];
 80162c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80162c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80162c6:	4413      	add	r3, r2
 80162c8:	781b      	ldrb	r3, [r3, #0]
 80162ca:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 80162cc:	2300      	movs	r3, #0
 80162ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 80162d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162d6:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 80162d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80162dc:	3302      	adds	r3, #2
 80162de:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 80162e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80162e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d202      	bcs.n	80162f0 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 80162ea:	f06f 0301 	mvn.w	r3, #1
 80162ee:	e203      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80162f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80162f4:	3301      	adds	r3, #1
 80162f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80162f8:	8952      	ldrh	r2, [r2, #10]
 80162fa:	4293      	cmp	r3, r2
 80162fc:	da08      	bge.n	8016310 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 80162fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016302:	3301      	adds	r3, #1
 8016304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016306:	4413      	add	r3, r2
 8016308:	781b      	ldrb	r3, [r3, #0]
 801630a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801630e:	e00b      	b.n	8016328 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d004      	beq.n	8016322 <dhcp_parse_reply+0xea>
 8016318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	685b      	ldr	r3, [r3, #4]
 801631e:	781b      	ldrb	r3, [r3, #0]
 8016320:	e000      	b.n	8016324 <dhcp_parse_reply+0xec>
 8016322:	2300      	movs	r3, #0
 8016324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801632c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 8016330:	7efb      	ldrb	r3, [r7, #27]
 8016332:	2b3b      	cmp	r3, #59	; 0x3b
 8016334:	f200 80df 	bhi.w	80164f6 <dhcp_parse_reply+0x2be>
 8016338:	a201      	add	r2, pc, #4	; (adr r2, 8016340 <dhcp_parse_reply+0x108>)
 801633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801633e:	bf00      	nop
 8016340:	08016431 	.word	0x08016431
 8016344:	08016441 	.word	0x08016441
 8016348:	080164f7 	.word	0x080164f7
 801634c:	08016455 	.word	0x08016455
 8016350:	080164f7 	.word	0x080164f7
 8016354:	080164f7 	.word	0x080164f7
 8016358:	080164f7 	.word	0x080164f7
 801635c:	080164f7 	.word	0x080164f7
 8016360:	080164f7 	.word	0x080164f7
 8016364:	080164f7 	.word	0x080164f7
 8016368:	080164f7 	.word	0x080164f7
 801636c:	080164f7 	.word	0x080164f7
 8016370:	080164f7 	.word	0x080164f7
 8016374:	080164f7 	.word	0x080164f7
 8016378:	080164f7 	.word	0x080164f7
 801637c:	080164f7 	.word	0x080164f7
 8016380:	080164f7 	.word	0x080164f7
 8016384:	080164f7 	.word	0x080164f7
 8016388:	080164f7 	.word	0x080164f7
 801638c:	080164f7 	.word	0x080164f7
 8016390:	080164f7 	.word	0x080164f7
 8016394:	080164f7 	.word	0x080164f7
 8016398:	080164f7 	.word	0x080164f7
 801639c:	080164f7 	.word	0x080164f7
 80163a0:	080164f7 	.word	0x080164f7
 80163a4:	080164f7 	.word	0x080164f7
 80163a8:	080164f7 	.word	0x080164f7
 80163ac:	080164f7 	.word	0x080164f7
 80163b0:	080164f7 	.word	0x080164f7
 80163b4:	080164f7 	.word	0x080164f7
 80163b8:	080164f7 	.word	0x080164f7
 80163bc:	080164f7 	.word	0x080164f7
 80163c0:	080164f7 	.word	0x080164f7
 80163c4:	080164f7 	.word	0x080164f7
 80163c8:	080164f7 	.word	0x080164f7
 80163cc:	080164f7 	.word	0x080164f7
 80163d0:	080164f7 	.word	0x080164f7
 80163d4:	080164f7 	.word	0x080164f7
 80163d8:	080164f7 	.word	0x080164f7
 80163dc:	080164f7 	.word	0x080164f7
 80163e0:	080164f7 	.word	0x080164f7
 80163e4:	080164f7 	.word	0x080164f7
 80163e8:	080164f7 	.word	0x080164f7
 80163ec:	080164f7 	.word	0x080164f7
 80163f0:	080164f7 	.word	0x080164f7
 80163f4:	080164f7 	.word	0x080164f7
 80163f8:	080164f7 	.word	0x080164f7
 80163fc:	080164f7 	.word	0x080164f7
 8016400:	080164f7 	.word	0x080164f7
 8016404:	080164f7 	.word	0x080164f7
 8016408:	080164f7 	.word	0x080164f7
 801640c:	08016473 	.word	0x08016473
 8016410:	08016487 	.word	0x08016487
 8016414:	080164a7 	.word	0x080164a7
 8016418:	080164bb 	.word	0x080164bb
 801641c:	080164f7 	.word	0x080164f7
 8016420:	080164f7 	.word	0x080164f7
 8016424:	080164f7 	.word	0x080164f7
 8016428:	080164cf 	.word	0x080164cf
 801642c:	080164e3 	.word	0x080164e3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016430:	2300      	movs	r3, #0
 8016432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801643a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 801643e:	e05e      	b.n	80164fe <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016440:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016444:	2b04      	cmp	r3, #4
 8016446:	d002      	beq.n	801644e <dhcp_parse_reply+0x216>
 8016448:	f06f 0305 	mvn.w	r3, #5
 801644c:	e154      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801644e:	2306      	movs	r3, #6
 8016450:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016452:	e054      	b.n	80164fe <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8016454:	2304      	movs	r3, #4
 8016456:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801645a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801645e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016462:	429a      	cmp	r2, r3
 8016464:	d202      	bcs.n	801646c <dhcp_parse_reply+0x234>
 8016466:	f06f 0305 	mvn.w	r3, #5
 801646a:	e145      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801646c:	2307      	movs	r3, #7
 801646e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016470:	e045      	b.n	80164fe <dhcp_parse_reply+0x2c6>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016476:	2b04      	cmp	r3, #4
 8016478:	d002      	beq.n	8016480 <dhcp_parse_reply+0x248>
 801647a:	f06f 0305 	mvn.w	r3, #5
 801647e:	e13b      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016480:	2303      	movs	r3, #3
 8016482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016484:	e03b      	b.n	80164fe <dhcp_parse_reply+0x2c6>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801648a:	2b01      	cmp	r3, #1
 801648c:	d002      	beq.n	8016494 <dhcp_parse_reply+0x25c>
 801648e:	f06f 0305 	mvn.w	r3, #5
 8016492:	e131      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016494:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016496:	2bf0      	cmp	r3, #240	; 0xf0
 8016498:	d002      	beq.n	80164a0 <dhcp_parse_reply+0x268>
 801649a:	f06f 0305 	mvn.w	r3, #5
 801649e:	e12b      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80164a0:	2300      	movs	r3, #0
 80164a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80164a4:	e02b      	b.n	80164fe <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80164a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80164aa:	2b01      	cmp	r3, #1
 80164ac:	d002      	beq.n	80164b4 <dhcp_parse_reply+0x27c>
 80164ae:	f06f 0305 	mvn.w	r3, #5
 80164b2:	e121      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80164b4:	2301      	movs	r3, #1
 80164b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80164b8:	e021      	b.n	80164fe <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80164ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80164be:	2b04      	cmp	r3, #4
 80164c0:	d002      	beq.n	80164c8 <dhcp_parse_reply+0x290>
 80164c2:	f06f 0305 	mvn.w	r3, #5
 80164c6:	e117      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80164c8:	2302      	movs	r3, #2
 80164ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80164cc:	e017      	b.n	80164fe <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80164ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80164d2:	2b04      	cmp	r3, #4
 80164d4:	d002      	beq.n	80164dc <dhcp_parse_reply+0x2a4>
 80164d6:	f06f 0305 	mvn.w	r3, #5
 80164da:	e10d      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_T1;
 80164dc:	2304      	movs	r3, #4
 80164de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80164e0:	e00d      	b.n	80164fe <dhcp_parse_reply+0x2c6>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80164e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80164e6:	2b04      	cmp	r3, #4
 80164e8:	d002      	beq.n	80164f0 <dhcp_parse_reply+0x2b8>
 80164ea:	f06f 0305 	mvn.w	r3, #5
 80164ee:	e103      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
        decode_idx = DHCP_OPTION_IDX_T2;
 80164f0:	2305      	movs	r3, #5
 80164f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80164f4:	e003      	b.n	80164fe <dhcp_parse_reply+0x2c6>
      default:
        decode_len = 0;
 80164f6:	2300      	movs	r3, #0
 80164f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80164fc:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80164fe:	7efb      	ldrb	r3, [r7, #27]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d105      	bne.n	8016510 <dhcp_parse_reply+0x2d8>
      offset++;
 8016504:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016508:	3301      	adds	r3, #1
 801650a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801650e:	e08a      	b.n	8016626 <dhcp_parse_reply+0x3ee>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8016510:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016514:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016518:	4413      	add	r3, r2
 801651a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801651e:	4293      	cmp	r3, r2
 8016520:	dd04      	ble.n	801652c <dhcp_parse_reply+0x2f4>
        /* overflow */
        return ERR_BUF;
 8016522:	f06f 0301 	mvn.w	r3, #1
 8016526:	e0e7      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
 8016528:	20007838 	.word	0x20007838
      }
      offset = (u16_t)(offset + len + 2);
 801652c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016530:	b29a      	uxth	r2, r3
 8016532:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016536:	4413      	add	r3, r2
 8016538:	b29b      	uxth	r3, r3
 801653a:	3302      	adds	r3, #2
 801653c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 8016540:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016544:	2b00      	cmp	r3, #0
 8016546:	d06e      	beq.n	8016626 <dhcp_parse_reply+0x3ee>
        u32_t value = 0;
 8016548:	2300      	movs	r3, #0
 801654a:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801654c:	4a6c      	ldr	r2, [pc, #432]	; (8016700 <dhcp_parse_reply+0x4c8>)
 801654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016550:	4413      	add	r3, r2
 8016552:	781b      	ldrb	r3, [r3, #0]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d166      	bne.n	8016626 <dhcp_parse_reply+0x3ee>
          copy_len = LWIP_MIN(decode_len, 4);
 8016558:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801655c:	2b04      	cmp	r3, #4
 801655e:	bf28      	it	cs
 8016560:	2304      	movcs	r3, #4
 8016562:	b2db      	uxtb	r3, r3
 8016564:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016568:	8b3a      	ldrh	r2, [r7, #24]
 801656a:	f107 010c 	add.w	r1, r7, #12
 801656e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016570:	f7f8 fdaa 	bl	800f0c8 <pbuf_copy_partial>
 8016574:	4603      	mov	r3, r0
 8016576:	461a      	mov	r2, r3
 8016578:	8b3b      	ldrh	r3, [r7, #24]
 801657a:	4293      	cmp	r3, r2
 801657c:	d002      	beq.n	8016584 <dhcp_parse_reply+0x34c>
            return ERR_BUF;
 801657e:	f06f 0301 	mvn.w	r3, #1
 8016582:	e0b9      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
          }
          if (decode_len > 4) {
 8016584:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016588:	2b04      	cmp	r3, #4
 801658a:	d92c      	bls.n	80165e6 <dhcp_parse_reply+0x3ae>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801658c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016590:	f003 0303 	and.w	r3, r3, #3
 8016594:	b2db      	uxtb	r3, r3
 8016596:	2b00      	cmp	r3, #0
 8016598:	d002      	beq.n	80165a0 <dhcp_parse_reply+0x368>
 801659a:	f06f 0305 	mvn.w	r3, #5
 801659e:	e0ab      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
            dhcp_got_option(dhcp, decode_idx);
 80165a0:	4a57      	ldr	r2, [pc, #348]	; (8016700 <dhcp_parse_reply+0x4c8>)
 80165a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a4:	4413      	add	r3, r2
 80165a6:	2201      	movs	r2, #1
 80165a8:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	4618      	mov	r0, r3
 80165ae:	f7f7 fc62 	bl	800de76 <lwip_htonl>
 80165b2:	4602      	mov	r2, r0
 80165b4:	4953      	ldr	r1, [pc, #332]	; (8016704 <dhcp_parse_reply+0x4cc>)
 80165b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80165bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80165c0:	3b04      	subs	r3, #4
 80165c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 80165c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165c8:	3304      	adds	r3, #4
 80165ca:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 80165cc:	8afa      	ldrh	r2, [r7, #22]
 80165ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d202      	bcs.n	80165da <dhcp_parse_reply+0x3a2>
              /* overflow */
              return ERR_BUF;
 80165d4:	f06f 0301 	mvn.w	r3, #1
 80165d8:	e08e      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
            }
            val_offset = next_val_offset;
 80165da:	8afb      	ldrh	r3, [r7, #22]
 80165dc:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 80165de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e0:	3301      	adds	r3, #1
 80165e2:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 80165e4:	e7b2      	b.n	801654c <dhcp_parse_reply+0x314>
          } else if (decode_len == 4) {
 80165e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80165ea:	2b04      	cmp	r3, #4
 80165ec:	d106      	bne.n	80165fc <dhcp_parse_reply+0x3c4>
            value = lwip_ntohl(value);
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7f7 fc40 	bl	800de76 <lwip_htonl>
 80165f6:	4603      	mov	r3, r0
 80165f8:	60fb      	str	r3, [r7, #12]
 80165fa:	e00a      	b.n	8016612 <dhcp_parse_reply+0x3da>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80165fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8016600:	2b01      	cmp	r3, #1
 8016602:	d002      	beq.n	801660a <dhcp_parse_reply+0x3d2>
 8016604:	f06f 0305 	mvn.w	r3, #5
 8016608:	e076      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
            value = ((u8_t *)&value)[0];
 801660a:	f107 030c 	add.w	r3, r7, #12
 801660e:	781b      	ldrb	r3, [r3, #0]
 8016610:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 8016612:	4a3b      	ldr	r2, [pc, #236]	; (8016700 <dhcp_parse_reply+0x4c8>)
 8016614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016616:	4413      	add	r3, r2
 8016618:	2201      	movs	r2, #1
 801661a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801661c:	68fa      	ldr	r2, [r7, #12]
 801661e:	4939      	ldr	r1, [pc, #228]	; (8016704 <dhcp_parse_reply+0x4cc>)
 8016620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016628:	895b      	ldrh	r3, [r3, #10]
 801662a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801662e:	429a      	cmp	r2, r3
 8016630:	d320      	bcc.n	8016674 <dhcp_parse_reply+0x43c>
      offset = (u16_t)(offset - q->len);
 8016632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016634:	895b      	ldrh	r3, [r3, #10]
 8016636:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801663a:	1ad3      	subs	r3, r2, r3
 801663c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 8016640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016642:	895b      	ldrh	r3, [r3, #10]
 8016644:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016646:	1ad3      	subs	r3, r2, r3
 8016648:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 801664a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801664e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016650:	429a      	cmp	r2, r3
 8016652:	d20c      	bcs.n	801666e <dhcp_parse_reply+0x436>
        q = q->next;
 8016654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801665c:	2b00      	cmp	r3, #0
 801665e:	d102      	bne.n	8016666 <dhcp_parse_reply+0x42e>
 8016660:	f06f 0305 	mvn.w	r3, #5
 8016664:	e048      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
        options = (u8_t *)q->payload;
 8016666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016668:	685b      	ldr	r3, [r3, #4]
 801666a:	643b      	str	r3, [r7, #64]	; 0x40
 801666c:	e002      	b.n	8016674 <dhcp_parse_reply+0x43c>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801666e:	f06f 0301 	mvn.w	r3, #1
 8016672:	e041      	b.n	80166f8 <dhcp_parse_reply+0x4c0>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016676:	2b00      	cmp	r3, #0
 8016678:	d00c      	beq.n	8016694 <dhcp_parse_reply+0x45c>
 801667a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801667e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016680:	429a      	cmp	r2, r3
 8016682:	d207      	bcs.n	8016694 <dhcp_parse_reply+0x45c>
 8016684:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801668a:	4413      	add	r3, r2
 801668c:	781b      	ldrb	r3, [r3, #0]
 801668e:	2bff      	cmp	r3, #255	; 0xff
 8016690:	f47f ae16 	bne.w	80162c0 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016694:	4b1a      	ldr	r3, [pc, #104]	; (8016700 <dhcp_parse_reply+0x4c8>)
 8016696:	781b      	ldrb	r3, [r3, #0]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d018      	beq.n	80166ce <dhcp_parse_reply+0x496>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801669c:	4b19      	ldr	r3, [pc, #100]	; (8016704 <dhcp_parse_reply+0x4cc>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80166a2:	4b17      	ldr	r3, [pc, #92]	; (8016700 <dhcp_parse_reply+0x4c8>)
 80166a4:	2200      	movs	r2, #0
 80166a6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80166a8:	693b      	ldr	r3, [r7, #16]
 80166aa:	2b01      	cmp	r3, #1
 80166ac:	d102      	bne.n	80166b4 <dhcp_parse_reply+0x47c>
      parse_file_as_options = 1;
 80166ae:	2301      	movs	r3, #1
 80166b0:	633b      	str	r3, [r7, #48]	; 0x30
 80166b2:	e00c      	b.n	80166ce <dhcp_parse_reply+0x496>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80166b4:	693b      	ldr	r3, [r7, #16]
 80166b6:	2b02      	cmp	r3, #2
 80166b8:	d102      	bne.n	80166c0 <dhcp_parse_reply+0x488>
      parse_sname_as_options = 1;
 80166ba:	2301      	movs	r3, #1
 80166bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80166be:	e006      	b.n	80166ce <dhcp_parse_reply+0x496>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	2b03      	cmp	r3, #3
 80166c4:	d103      	bne.n	80166ce <dhcp_parse_reply+0x496>
      parse_sname_as_options = 1;
 80166c6:	2301      	movs	r3, #1
 80166c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 80166ca:	2301      	movs	r3, #1
 80166cc:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80166ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d006      	beq.n	80166e2 <dhcp_parse_reply+0x4aa>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80166d4:	2300      	movs	r3, #0
 80166d6:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 80166d8:	236c      	movs	r3, #108	; 0x6c
 80166da:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80166dc:	23ec      	movs	r3, #236	; 0xec
 80166de:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80166e0:	e5c7      	b.n	8016272 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80166e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d006      	beq.n	80166f6 <dhcp_parse_reply+0x4be>
    parse_sname_as_options = 0;
 80166e8:	2300      	movs	r3, #0
 80166ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 80166ec:	232c      	movs	r3, #44	; 0x2c
 80166ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80166f0:	236c      	movs	r3, #108	; 0x6c
 80166f2:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 80166f4:	e5bd      	b.n	8016272 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80166f6:	2300      	movs	r3, #0
}
 80166f8:	4618      	mov	r0, r3
 80166fa:	3748      	adds	r7, #72	; 0x48
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}
 8016700:	20007838 	.word	0x20007838
 8016704:	20007818 	.word	0x20007818

08016708 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b08a      	sub	sp, #40	; 0x28
 801670c:	af00      	add	r7, sp, #0
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	607a      	str	r2, [r7, #4]
 8016714:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8016716:	4b5e      	ldr	r3, [pc, #376]	; (8016890 <dhcp_recv+0x188>)
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801671c:	69fb      	ldr	r3, [r7, #28]
 801671e:	6a1b      	ldr	r3, [r3, #32]
 8016720:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	685b      	ldr	r3, [r3, #4]
 8016726:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016728:	69bb      	ldr	r3, [r7, #24]
 801672a:	2b00      	cmp	r3, #0
 801672c:	f000 809a 	beq.w	8016864 <dhcp_recv+0x15c>
 8016730:	69bb      	ldr	r3, [r7, #24]
 8016732:	791b      	ldrb	r3, [r3, #4]
 8016734:	2b00      	cmp	r3, #0
 8016736:	f000 8095 	beq.w	8016864 <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	895b      	ldrh	r3, [r3, #10]
 801673e:	2b2b      	cmp	r3, #43	; 0x2b
 8016740:	f240 8092 	bls.w	8016868 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016744:	697b      	ldr	r3, [r7, #20]
 8016746:	781b      	ldrb	r3, [r3, #0]
 8016748:	2b02      	cmp	r3, #2
 801674a:	f040 808f 	bne.w	801686c <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801674e:	2300      	movs	r3, #0
 8016750:	74fb      	strb	r3, [r7, #19]
 8016752:	e00e      	b.n	8016772 <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016754:	7cfb      	ldrb	r3, [r7, #19]
 8016756:	69fa      	ldr	r2, [r7, #28]
 8016758:	4413      	add	r3, r2
 801675a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801675e:	7cfb      	ldrb	r3, [r7, #19]
 8016760:	6979      	ldr	r1, [r7, #20]
 8016762:	440b      	add	r3, r1
 8016764:	7f1b      	ldrb	r3, [r3, #28]
 8016766:	429a      	cmp	r2, r3
 8016768:	f040 8082 	bne.w	8016870 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801676c:	7cfb      	ldrb	r3, [r7, #19]
 801676e:	3301      	adds	r3, #1
 8016770:	74fb      	strb	r3, [r7, #19]
 8016772:	69fb      	ldr	r3, [r7, #28]
 8016774:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016778:	7cfa      	ldrb	r2, [r7, #19]
 801677a:	429a      	cmp	r2, r3
 801677c:	d202      	bcs.n	8016784 <dhcp_recv+0x7c>
 801677e:	7cfb      	ldrb	r3, [r7, #19]
 8016780:	2b05      	cmp	r3, #5
 8016782:	d9e7      	bls.n	8016754 <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8016784:	697b      	ldr	r3, [r7, #20]
 8016786:	685b      	ldr	r3, [r3, #4]
 8016788:	4618      	mov	r0, r3
 801678a:	f7f7 fb74 	bl	800de76 <lwip_htonl>
 801678e:	4602      	mov	r2, r0
 8016790:	69bb      	ldr	r3, [r7, #24]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	429a      	cmp	r2, r3
 8016796:	d16d      	bne.n	8016874 <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016798:	69b9      	ldr	r1, [r7, #24]
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f7ff fd4c 	bl	8016238 <dhcp_parse_reply>
 80167a0:	4603      	mov	r3, r0
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d168      	bne.n	8016878 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80167a6:	4b3b      	ldr	r3, [pc, #236]	; (8016894 <dhcp_recv+0x18c>)
 80167a8:	785b      	ldrb	r3, [r3, #1]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d066      	beq.n	801687c <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	685b      	ldr	r3, [r3, #4]
 80167b2:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80167b4:	4b38      	ldr	r3, [pc, #224]	; (8016898 <dhcp_recv+0x190>)
 80167b6:	685b      	ldr	r3, [r3, #4]
 80167b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80167bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80167c0:	2b05      	cmp	r3, #5
 80167c2:	d12a      	bne.n	801681a <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80167c4:	69bb      	ldr	r3, [r7, #24]
 80167c6:	795b      	ldrb	r3, [r3, #5]
 80167c8:	2b01      	cmp	r3, #1
 80167ca:	d112      	bne.n	80167f2 <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 80167cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167ce:	69f8      	ldr	r0, [r7, #28]
 80167d0:	f7fe feb8 	bl	8015544 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80167d4:	69fb      	ldr	r3, [r7, #28]
 80167d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80167da:	f003 0308 	and.w	r3, r3, #8
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d003      	beq.n	80167ea <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80167e2:	69f8      	ldr	r0, [r7, #28]
 80167e4:	f7fe fc36 	bl	8015054 <dhcp_check>
 80167e8:	e04b      	b.n	8016882 <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80167ea:	69f8      	ldr	r0, [r7, #28]
 80167ec:	f7ff f8d4 	bl	8015998 <dhcp_bind>
 80167f0:	e047      	b.n	8016882 <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80167f2:	69bb      	ldr	r3, [r7, #24]
 80167f4:	795b      	ldrb	r3, [r3, #5]
 80167f6:	2b03      	cmp	r3, #3
 80167f8:	d007      	beq.n	801680a <dhcp_recv+0x102>
 80167fa:	69bb      	ldr	r3, [r7, #24]
 80167fc:	795b      	ldrb	r3, [r3, #5]
 80167fe:	2b04      	cmp	r3, #4
 8016800:	d003      	beq.n	801680a <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016802:	69bb      	ldr	r3, [r7, #24]
 8016804:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016806:	2b05      	cmp	r3, #5
 8016808:	d13b      	bne.n	8016882 <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 801680a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801680c:	69f8      	ldr	r0, [r7, #28]
 801680e:	f7fe fe99 	bl	8015544 <dhcp_handle_ack>
      dhcp_bind(netif);
 8016812:	69f8      	ldr	r0, [r7, #28]
 8016814:	f7ff f8c0 	bl	8015998 <dhcp_bind>
 8016818:	e033      	b.n	8016882 <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801681a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801681e:	2b06      	cmp	r3, #6
 8016820:	d113      	bne.n	801684a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016822:	69bb      	ldr	r3, [r7, #24]
 8016824:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016826:	2b03      	cmp	r3, #3
 8016828:	d00b      	beq.n	8016842 <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801682a:	69bb      	ldr	r3, [r7, #24]
 801682c:	795b      	ldrb	r3, [r3, #5]
 801682e:	2b01      	cmp	r3, #1
 8016830:	d007      	beq.n	8016842 <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016832:	69bb      	ldr	r3, [r7, #24]
 8016834:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016836:	2b04      	cmp	r3, #4
 8016838:	d003      	beq.n	8016842 <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801683a:	69bb      	ldr	r3, [r7, #24]
 801683c:	795b      	ldrb	r3, [r3, #5]
 801683e:	2b05      	cmp	r3, #5
 8016840:	d103      	bne.n	801684a <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016842:	69f8      	ldr	r0, [r7, #28]
 8016844:	f7fe fbec 	bl	8015020 <dhcp_handle_nak>
 8016848:	e01b      	b.n	8016882 <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801684a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801684e:	2b02      	cmp	r3, #2
 8016850:	d116      	bne.n	8016880 <dhcp_recv+0x178>
 8016852:	69bb      	ldr	r3, [r7, #24]
 8016854:	795b      	ldrb	r3, [r3, #5]
 8016856:	2b06      	cmp	r3, #6
 8016858:	d112      	bne.n	8016880 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801685a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801685c:	69f8      	ldr	r0, [r7, #28]
 801685e:	f7fe fc2d 	bl	80150bc <dhcp_handle_offer>
 8016862:	e00e      	b.n	8016882 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8016864:	bf00      	nop
 8016866:	e00c      	b.n	8016882 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8016868:	bf00      	nop
 801686a:	e00a      	b.n	8016882 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801686c:	bf00      	nop
 801686e:	e008      	b.n	8016882 <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8016870:	bf00      	nop
 8016872:	e006      	b.n	8016882 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8016874:	bf00      	nop
 8016876:	e004      	b.n	8016882 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8016878:	bf00      	nop
 801687a:	e002      	b.n	8016882 <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801687c:	bf00      	nop
 801687e:	e000      	b.n	8016882 <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8016880:	bf00      	nop
  pbuf_free(p);
 8016882:	6878      	ldr	r0, [r7, #4]
 8016884:	f7f8 fada 	bl	800ee3c <pbuf_free>
}
 8016888:	bf00      	nop
 801688a:	3728      	adds	r7, #40	; 0x28
 801688c:	46bd      	mov	sp, r7
 801688e:	bd80      	pop	{r7, pc}
 8016890:	200076e8 	.word	0x200076e8
 8016894:	20007838 	.word	0x20007838
 8016898:	20007818 	.word	0x20007818

0801689c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b088      	sub	sp, #32
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	60f8      	str	r0, [r7, #12]
 80168a4:	60b9      	str	r1, [r7, #8]
 80168a6:	603b      	str	r3, [r7, #0]
 80168a8:	4613      	mov	r3, r2
 80168aa:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d101      	bne.n	80168b6 <dhcp_create_msg+0x1a>
 80168b2:	2300      	movs	r3, #0
 80168b4:	e09e      	b.n	80169f4 <dhcp_create_msg+0x158>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d101      	bne.n	80168c0 <dhcp_create_msg+0x24>
 80168bc:	2300      	movs	r3, #0
 80168be:	e099      	b.n	80169f4 <dhcp_create_msg+0x158>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80168c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80168c4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80168c8:	2038      	movs	r0, #56	; 0x38
 80168ca:	f7f8 f875 	bl	800e9b8 <pbuf_alloc>
 80168ce:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80168d0:	69bb      	ldr	r3, [r7, #24]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d101      	bne.n	80168da <dhcp_create_msg+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80168d6:	2300      	movs	r3, #0
 80168d8:	e08c      	b.n	80169f4 <dhcp_create_msg+0x158>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80168da:	79fb      	ldrb	r3, [r7, #7]
 80168dc:	2b03      	cmp	r3, #3
 80168de:	d103      	bne.n	80168e8 <dhcp_create_msg+0x4c>
 80168e0:	68bb      	ldr	r3, [r7, #8]
 80168e2:	795b      	ldrb	r3, [r3, #5]
 80168e4:	2b03      	cmp	r3, #3
 80168e6:	d10d      	bne.n	8016904 <dhcp_create_msg+0x68>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80168e8:	68bb      	ldr	r3, [r7, #8]
 80168ea:	799b      	ldrb	r3, [r3, #6]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d105      	bne.n	80168fc <dhcp_create_msg+0x60>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80168f0:	f002 fc8a 	bl	8019208 <rand>
 80168f4:	4603      	mov	r3, r0
 80168f6:	461a      	mov	r2, r3
 80168f8:	4b40      	ldr	r3, [pc, #256]	; (80169fc <dhcp_create_msg+0x160>)
 80168fa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80168fc:	4b3f      	ldr	r3, [pc, #252]	; (80169fc <dhcp_create_msg+0x160>)
 80168fe:	681a      	ldr	r2, [r3, #0]
 8016900:	68bb      	ldr	r3, [r7, #8]
 8016902:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016904:	69bb      	ldr	r3, [r7, #24]
 8016906:	685b      	ldr	r3, [r3, #4]
 8016908:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801690a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801690e:	2100      	movs	r1, #0
 8016910:	6978      	ldr	r0, [r7, #20]
 8016912:	f002 fe9b 	bl	801964c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016916:	697b      	ldr	r3, [r7, #20]
 8016918:	2201      	movs	r2, #1
 801691a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	2201      	movs	r2, #1
 8016920:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016928:	697b      	ldr	r3, [r7, #20]
 801692a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	4618      	mov	r0, r3
 8016932:	f7f7 faa0 	bl	800de76 <lwip_htonl>
 8016936:	4602      	mov	r2, r0
 8016938:	697b      	ldr	r3, [r7, #20]
 801693a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801693c:	79fb      	ldrb	r3, [r7, #7]
 801693e:	2b08      	cmp	r3, #8
 8016940:	d010      	beq.n	8016964 <dhcp_create_msg+0xc8>
 8016942:	79fb      	ldrb	r3, [r7, #7]
 8016944:	2b04      	cmp	r3, #4
 8016946:	d00d      	beq.n	8016964 <dhcp_create_msg+0xc8>
 8016948:	79fb      	ldrb	r3, [r7, #7]
 801694a:	2b07      	cmp	r3, #7
 801694c:	d00a      	beq.n	8016964 <dhcp_create_msg+0xc8>
 801694e:	79fb      	ldrb	r3, [r7, #7]
 8016950:	2b03      	cmp	r3, #3
 8016952:	d10c      	bne.n	801696e <dhcp_create_msg+0xd2>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016958:	2b05      	cmp	r3, #5
 801695a:	d003      	beq.n	8016964 <dhcp_create_msg+0xc8>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801695c:	68bb      	ldr	r3, [r7, #8]
 801695e:	795b      	ldrb	r3, [r3, #5]
 8016960:	2b04      	cmp	r3, #4
 8016962:	d104      	bne.n	801696e <dhcp_create_msg+0xd2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	3304      	adds	r3, #4
 8016968:	681a      	ldr	r2, [r3, #0]
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801696e:	2300      	movs	r3, #0
 8016970:	83fb      	strh	r3, [r7, #30]
 8016972:	e00c      	b.n	801698e <dhcp_create_msg+0xf2>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016974:	8bfa      	ldrh	r2, [r7, #30]
 8016976:	8bfb      	ldrh	r3, [r7, #30]
 8016978:	68f9      	ldr	r1, [r7, #12]
 801697a:	440a      	add	r2, r1
 801697c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016980:	697a      	ldr	r2, [r7, #20]
 8016982:	4413      	add	r3, r2
 8016984:	460a      	mov	r2, r1
 8016986:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016988:	8bfb      	ldrh	r3, [r7, #30]
 801698a:	3301      	adds	r3, #1
 801698c:	83fb      	strh	r3, [r7, #30]
 801698e:	8bfb      	ldrh	r3, [r7, #30]
 8016990:	2b05      	cmp	r3, #5
 8016992:	d9ef      	bls.n	8016974 <dhcp_create_msg+0xd8>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016994:	697b      	ldr	r3, [r7, #20]
 8016996:	2200      	movs	r2, #0
 8016998:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801699c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80169a0:	2200      	movs	r2, #0
 80169a2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80169a6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80169aa:	2200      	movs	r2, #0
 80169ac:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80169b0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80169b4:	2200      	movs	r2, #0
 80169b6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80169ba:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80169be:	697b      	ldr	r3, [r7, #20]
 80169c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169c4:	2301      	movs	r3, #1
 80169c6:	2235      	movs	r2, #53	; 0x35
 80169c8:	2000      	movs	r0, #0
 80169ca:	f7ff fb63 	bl	8016094 <dhcp_option>
 80169ce:	4603      	mov	r3, r0
 80169d0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80169d2:	697b      	ldr	r3, [r7, #20]
 80169d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169d8:	79fa      	ldrb	r2, [r7, #7]
 80169da:	8a7b      	ldrh	r3, [r7, #18]
 80169dc:	4618      	mov	r0, r3
 80169de:	f7ff fb7c 	bl	80160da <dhcp_option_byte>
 80169e2:	4603      	mov	r3, r0
 80169e4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d002      	beq.n	80169f2 <dhcp_create_msg+0x156>
    *options_out_len = options_out_len_loc;
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	8a7a      	ldrh	r2, [r7, #18]
 80169f0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80169f2:	69bb      	ldr	r3, [r7, #24]
}
 80169f4:	4618      	mov	r0, r3
 80169f6:	3720      	adds	r7, #32
 80169f8:	46bd      	mov	sp, r7
 80169fa:	bd80      	pop	{r7, pc}
 80169fc:	20007848 	.word	0x20007848

08016a00 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b084      	sub	sp, #16
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	4603      	mov	r3, r0
 8016a08:	60b9      	str	r1, [r7, #8]
 8016a0a:	607a      	str	r2, [r7, #4]
 8016a0c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016a0e:	89fb      	ldrh	r3, [r7, #14]
 8016a10:	1c5a      	adds	r2, r3, #1
 8016a12:	81fa      	strh	r2, [r7, #14]
 8016a14:	461a      	mov	r2, r3
 8016a16:	68bb      	ldr	r3, [r7, #8]
 8016a18:	4413      	add	r3, r2
 8016a1a:	22ff      	movs	r2, #255	; 0xff
 8016a1c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016a1e:	e007      	b.n	8016a30 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016a20:	89fb      	ldrh	r3, [r7, #14]
 8016a22:	1c5a      	adds	r2, r3, #1
 8016a24:	81fa      	strh	r2, [r7, #14]
 8016a26:	461a      	mov	r2, r3
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	4413      	add	r3, r2
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016a30:	89fb      	ldrh	r3, [r7, #14]
 8016a32:	2b43      	cmp	r3, #67	; 0x43
 8016a34:	d904      	bls.n	8016a40 <dhcp_option_trailer+0x40>
 8016a36:	89fb      	ldrh	r3, [r7, #14]
 8016a38:	f003 0303 	and.w	r3, r3, #3
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d002      	beq.n	8016a46 <dhcp_option_trailer+0x46>
 8016a40:	89fb      	ldrh	r3, [r7, #14]
 8016a42:	2b43      	cmp	r3, #67	; 0x43
 8016a44:	d9ec      	bls.n	8016a20 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016a46:	89fb      	ldrh	r3, [r7, #14]
 8016a48:	33f0      	adds	r3, #240	; 0xf0
 8016a4a:	b29b      	uxth	r3, r3
 8016a4c:	4619      	mov	r1, r3
 8016a4e:	6878      	ldr	r0, [r7, #4]
 8016a50:	f7f8 f8c1 	bl	800ebd6 <pbuf_realloc>
}
 8016a54:	bf00      	nop
 8016a56:	3710      	adds	r7, #16
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}

08016a5c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b085      	sub	sp, #20
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d017      	beq.n	8016a9a <dhcp_supplied_address+0x3e>
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	6a1b      	ldr	r3, [r3, #32]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d013      	beq.n	8016a9a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	6a1b      	ldr	r3, [r3, #32]
 8016a76:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	795b      	ldrb	r3, [r3, #5]
 8016a7c:	2b0a      	cmp	r3, #10
 8016a7e:	d007      	beq.n	8016a90 <dhcp_supplied_address+0x34>
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	795b      	ldrb	r3, [r3, #5]
 8016a84:	2b05      	cmp	r3, #5
 8016a86:	d003      	beq.n	8016a90 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016a8c:	2b04      	cmp	r3, #4
 8016a8e:	d101      	bne.n	8016a94 <dhcp_supplied_address+0x38>
 8016a90:	2301      	movs	r3, #1
 8016a92:	e000      	b.n	8016a96 <dhcp_supplied_address+0x3a>
 8016a94:	2300      	movs	r3, #0
 8016a96:	b2db      	uxtb	r3, r3
 8016a98:	e000      	b.n	8016a9c <dhcp_supplied_address+0x40>
  }
  return 0;
 8016a9a:	2300      	movs	r3, #0
}
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	3714      	adds	r7, #20
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa6:	4770      	bx	lr

08016aa8 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b084      	sub	sp, #16
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  while (q) {
 8016ab0:	e00d      	b.n	8016ace <free_etharp_q+0x26>
    r = q;
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	60fb      	str	r3, [r7, #12]
    q = q->next;
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	685b      	ldr	r3, [r3, #4]
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f7f8 f9bb 	bl	800ee3c <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8016ac6:	68f9      	ldr	r1, [r7, #12]
 8016ac8:	2006      	movs	r0, #6
 8016aca:	f7f7 fcdb 	bl	800e484 <memp_free>
  while (q) {
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d1ee      	bne.n	8016ab2 <free_etharp_q+0xa>
  }
}
 8016ad4:	bf00      	nop
 8016ad6:	bf00      	nop
 8016ad8:	3710      	adds	r7, #16
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
	...

08016ae0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b082      	sub	sp, #8
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016ae8:	492b      	ldr	r1, [pc, #172]	; (8016b98 <etharp_free_entry+0xb8>)
 8016aea:	687a      	ldr	r2, [r7, #4]
 8016aec:	4613      	mov	r3, r2
 8016aee:	005b      	lsls	r3, r3, #1
 8016af0:	4413      	add	r3, r2
 8016af2:	00db      	lsls	r3, r3, #3
 8016af4:	440b      	add	r3, r1
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d013      	beq.n	8016b24 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016afc:	4926      	ldr	r1, [pc, #152]	; (8016b98 <etharp_free_entry+0xb8>)
 8016afe:	687a      	ldr	r2, [r7, #4]
 8016b00:	4613      	mov	r3, r2
 8016b02:	005b      	lsls	r3, r3, #1
 8016b04:	4413      	add	r3, r2
 8016b06:	00db      	lsls	r3, r3, #3
 8016b08:	440b      	add	r3, r1
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7ff ffcb 	bl	8016aa8 <free_etharp_q>
    arp_table[i].q = NULL;
 8016b12:	4921      	ldr	r1, [pc, #132]	; (8016b98 <etharp_free_entry+0xb8>)
 8016b14:	687a      	ldr	r2, [r7, #4]
 8016b16:	4613      	mov	r3, r2
 8016b18:	005b      	lsls	r3, r3, #1
 8016b1a:	4413      	add	r3, r2
 8016b1c:	00db      	lsls	r3, r3, #3
 8016b1e:	440b      	add	r3, r1
 8016b20:	2200      	movs	r2, #0
 8016b22:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016b24:	491c      	ldr	r1, [pc, #112]	; (8016b98 <etharp_free_entry+0xb8>)
 8016b26:	687a      	ldr	r2, [r7, #4]
 8016b28:	4613      	mov	r3, r2
 8016b2a:	005b      	lsls	r3, r3, #1
 8016b2c:	4413      	add	r3, r2
 8016b2e:	00db      	lsls	r3, r3, #3
 8016b30:	440b      	add	r3, r1
 8016b32:	3314      	adds	r3, #20
 8016b34:	2200      	movs	r2, #0
 8016b36:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8016b38:	4917      	ldr	r1, [pc, #92]	; (8016b98 <etharp_free_entry+0xb8>)
 8016b3a:	687a      	ldr	r2, [r7, #4]
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	005b      	lsls	r3, r3, #1
 8016b40:	4413      	add	r3, r2
 8016b42:	00db      	lsls	r3, r3, #3
 8016b44:	440b      	add	r3, r1
 8016b46:	3312      	adds	r3, #18
 8016b48:	2200      	movs	r2, #0
 8016b4a:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8016b4c:	4912      	ldr	r1, [pc, #72]	; (8016b98 <etharp_free_entry+0xb8>)
 8016b4e:	687a      	ldr	r2, [r7, #4]
 8016b50:	4613      	mov	r3, r2
 8016b52:	005b      	lsls	r3, r3, #1
 8016b54:	4413      	add	r3, r2
 8016b56:	00db      	lsls	r3, r3, #3
 8016b58:	440b      	add	r3, r1
 8016b5a:	3308      	adds	r3, #8
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8016b60:	490d      	ldr	r1, [pc, #52]	; (8016b98 <etharp_free_entry+0xb8>)
 8016b62:	687a      	ldr	r2, [r7, #4]
 8016b64:	4613      	mov	r3, r2
 8016b66:	005b      	lsls	r3, r3, #1
 8016b68:	4413      	add	r3, r2
 8016b6a:	00db      	lsls	r3, r3, #3
 8016b6c:	440b      	add	r3, r1
 8016b6e:	3304      	adds	r3, #4
 8016b70:	2200      	movs	r2, #0
 8016b72:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8016b74:	4908      	ldr	r1, [pc, #32]	; (8016b98 <etharp_free_entry+0xb8>)
 8016b76:	687a      	ldr	r2, [r7, #4]
 8016b78:	4613      	mov	r3, r2
 8016b7a:	005b      	lsls	r3, r3, #1
 8016b7c:	4413      	add	r3, r2
 8016b7e:	00db      	lsls	r3, r3, #3
 8016b80:	440b      	add	r3, r1
 8016b82:	3308      	adds	r3, #8
 8016b84:	4a05      	ldr	r2, [pc, #20]	; (8016b9c <etharp_free_entry+0xbc>)
 8016b86:	3304      	adds	r3, #4
 8016b88:	6810      	ldr	r0, [r2, #0]
 8016b8a:	6018      	str	r0, [r3, #0]
 8016b8c:	8892      	ldrh	r2, [r2, #4]
 8016b8e:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8016b90:	bf00      	nop
 8016b92:	3708      	adds	r7, #8
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}
 8016b98:	2000784c 	.word	0x2000784c
 8016b9c:	0801bb4c 	.word	0x0801bb4c

08016ba0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b082      	sub	sp, #8
 8016ba4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	607b      	str	r3, [r7, #4]
 8016baa:	e096      	b.n	8016cda <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016bac:	494f      	ldr	r1, [pc, #316]	; (8016cec <etharp_tmr+0x14c>)
 8016bae:	687a      	ldr	r2, [r7, #4]
 8016bb0:	4613      	mov	r3, r2
 8016bb2:	005b      	lsls	r3, r3, #1
 8016bb4:	4413      	add	r3, r2
 8016bb6:	00db      	lsls	r3, r3, #3
 8016bb8:	440b      	add	r3, r1
 8016bba:	3314      	adds	r3, #20
 8016bbc:	781b      	ldrb	r3, [r3, #0]
 8016bbe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016bc0:	78fb      	ldrb	r3, [r7, #3]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	f000 8086 	beq.w	8016cd4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016bc8:	4948      	ldr	r1, [pc, #288]	; (8016cec <etharp_tmr+0x14c>)
 8016bca:	687a      	ldr	r2, [r7, #4]
 8016bcc:	4613      	mov	r3, r2
 8016bce:	005b      	lsls	r3, r3, #1
 8016bd0:	4413      	add	r3, r2
 8016bd2:	00db      	lsls	r3, r3, #3
 8016bd4:	440b      	add	r3, r1
 8016bd6:	3312      	adds	r3, #18
 8016bd8:	881b      	ldrh	r3, [r3, #0]
 8016bda:	3301      	adds	r3, #1
 8016bdc:	b298      	uxth	r0, r3
 8016bde:	4943      	ldr	r1, [pc, #268]	; (8016cec <etharp_tmr+0x14c>)
 8016be0:	687a      	ldr	r2, [r7, #4]
 8016be2:	4613      	mov	r3, r2
 8016be4:	005b      	lsls	r3, r3, #1
 8016be6:	4413      	add	r3, r2
 8016be8:	00db      	lsls	r3, r3, #3
 8016bea:	440b      	add	r3, r1
 8016bec:	3312      	adds	r3, #18
 8016bee:	4602      	mov	r2, r0
 8016bf0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016bf2:	493e      	ldr	r1, [pc, #248]	; (8016cec <etharp_tmr+0x14c>)
 8016bf4:	687a      	ldr	r2, [r7, #4]
 8016bf6:	4613      	mov	r3, r2
 8016bf8:	005b      	lsls	r3, r3, #1
 8016bfa:	4413      	add	r3, r2
 8016bfc:	00db      	lsls	r3, r3, #3
 8016bfe:	440b      	add	r3, r1
 8016c00:	3312      	adds	r3, #18
 8016c02:	881b      	ldrh	r3, [r3, #0]
 8016c04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016c08:	d215      	bcs.n	8016c36 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016c0a:	4938      	ldr	r1, [pc, #224]	; (8016cec <etharp_tmr+0x14c>)
 8016c0c:	687a      	ldr	r2, [r7, #4]
 8016c0e:	4613      	mov	r3, r2
 8016c10:	005b      	lsls	r3, r3, #1
 8016c12:	4413      	add	r3, r2
 8016c14:	00db      	lsls	r3, r3, #3
 8016c16:	440b      	add	r3, r1
 8016c18:	3314      	adds	r3, #20
 8016c1a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016c1c:	2b01      	cmp	r3, #1
 8016c1e:	d10e      	bne.n	8016c3e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016c20:	4932      	ldr	r1, [pc, #200]	; (8016cec <etharp_tmr+0x14c>)
 8016c22:	687a      	ldr	r2, [r7, #4]
 8016c24:	4613      	mov	r3, r2
 8016c26:	005b      	lsls	r3, r3, #1
 8016c28:	4413      	add	r3, r2
 8016c2a:	00db      	lsls	r3, r3, #3
 8016c2c:	440b      	add	r3, r1
 8016c2e:	3312      	adds	r3, #18
 8016c30:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016c32:	2b04      	cmp	r3, #4
 8016c34:	d903      	bls.n	8016c3e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016c36:	6878      	ldr	r0, [r7, #4]
 8016c38:	f7ff ff52 	bl	8016ae0 <etharp_free_entry>
 8016c3c:	e04a      	b.n	8016cd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016c3e:	492b      	ldr	r1, [pc, #172]	; (8016cec <etharp_tmr+0x14c>)
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	4613      	mov	r3, r2
 8016c44:	005b      	lsls	r3, r3, #1
 8016c46:	4413      	add	r3, r2
 8016c48:	00db      	lsls	r3, r3, #3
 8016c4a:	440b      	add	r3, r1
 8016c4c:	3314      	adds	r3, #20
 8016c4e:	781b      	ldrb	r3, [r3, #0]
 8016c50:	2b03      	cmp	r3, #3
 8016c52:	d10a      	bne.n	8016c6a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016c54:	4925      	ldr	r1, [pc, #148]	; (8016cec <etharp_tmr+0x14c>)
 8016c56:	687a      	ldr	r2, [r7, #4]
 8016c58:	4613      	mov	r3, r2
 8016c5a:	005b      	lsls	r3, r3, #1
 8016c5c:	4413      	add	r3, r2
 8016c5e:	00db      	lsls	r3, r3, #3
 8016c60:	440b      	add	r3, r1
 8016c62:	3314      	adds	r3, #20
 8016c64:	2204      	movs	r2, #4
 8016c66:	701a      	strb	r2, [r3, #0]
 8016c68:	e034      	b.n	8016cd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016c6a:	4920      	ldr	r1, [pc, #128]	; (8016cec <etharp_tmr+0x14c>)
 8016c6c:	687a      	ldr	r2, [r7, #4]
 8016c6e:	4613      	mov	r3, r2
 8016c70:	005b      	lsls	r3, r3, #1
 8016c72:	4413      	add	r3, r2
 8016c74:	00db      	lsls	r3, r3, #3
 8016c76:	440b      	add	r3, r1
 8016c78:	3314      	adds	r3, #20
 8016c7a:	781b      	ldrb	r3, [r3, #0]
 8016c7c:	2b04      	cmp	r3, #4
 8016c7e:	d10a      	bne.n	8016c96 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016c80:	491a      	ldr	r1, [pc, #104]	; (8016cec <etharp_tmr+0x14c>)
 8016c82:	687a      	ldr	r2, [r7, #4]
 8016c84:	4613      	mov	r3, r2
 8016c86:	005b      	lsls	r3, r3, #1
 8016c88:	4413      	add	r3, r2
 8016c8a:	00db      	lsls	r3, r3, #3
 8016c8c:	440b      	add	r3, r1
 8016c8e:	3314      	adds	r3, #20
 8016c90:	2202      	movs	r2, #2
 8016c92:	701a      	strb	r2, [r3, #0]
 8016c94:	e01e      	b.n	8016cd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016c96:	4915      	ldr	r1, [pc, #84]	; (8016cec <etharp_tmr+0x14c>)
 8016c98:	687a      	ldr	r2, [r7, #4]
 8016c9a:	4613      	mov	r3, r2
 8016c9c:	005b      	lsls	r3, r3, #1
 8016c9e:	4413      	add	r3, r2
 8016ca0:	00db      	lsls	r3, r3, #3
 8016ca2:	440b      	add	r3, r1
 8016ca4:	3314      	adds	r3, #20
 8016ca6:	781b      	ldrb	r3, [r3, #0]
 8016ca8:	2b01      	cmp	r3, #1
 8016caa:	d113      	bne.n	8016cd4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016cac:	490f      	ldr	r1, [pc, #60]	; (8016cec <etharp_tmr+0x14c>)
 8016cae:	687a      	ldr	r2, [r7, #4]
 8016cb0:	4613      	mov	r3, r2
 8016cb2:	005b      	lsls	r3, r3, #1
 8016cb4:	4413      	add	r3, r2
 8016cb6:	00db      	lsls	r3, r3, #3
 8016cb8:	440b      	add	r3, r1
 8016cba:	3308      	adds	r3, #8
 8016cbc:	6818      	ldr	r0, [r3, #0]
 8016cbe:	687a      	ldr	r2, [r7, #4]
 8016cc0:	4613      	mov	r3, r2
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	4413      	add	r3, r2
 8016cc6:	00db      	lsls	r3, r3, #3
 8016cc8:	4a08      	ldr	r2, [pc, #32]	; (8016cec <etharp_tmr+0x14c>)
 8016cca:	4413      	add	r3, r2
 8016ccc:	3304      	adds	r3, #4
 8016cce:	4619      	mov	r1, r3
 8016cd0:	f000 fdae 	bl	8017830 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	3301      	adds	r3, #1
 8016cd8:	607b      	str	r3, [r7, #4]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	2b09      	cmp	r3, #9
 8016cde:	f77f af65 	ble.w	8016bac <etharp_tmr+0xc>
      }
    }
  }
}
 8016ce2:	bf00      	nop
 8016ce4:	bf00      	nop
 8016ce6:	3708      	adds	r7, #8
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}
 8016cec:	2000784c 	.word	0x2000784c

08016cf0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b08a      	sub	sp, #40	; 0x28
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	60f8      	str	r0, [r7, #12]
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	607a      	str	r2, [r7, #4]
 8016cfc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016cfe:	230a      	movs	r3, #10
 8016d00:	843b      	strh	r3, [r7, #32]
 8016d02:	230a      	movs	r3, #10
 8016d04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8016d06:	230a      	movs	r3, #10
 8016d08:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016d0e:	230a      	movs	r3, #10
 8016d10:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016d12:	2300      	movs	r3, #0
 8016d14:	83bb      	strh	r3, [r7, #28]
 8016d16:	2300      	movs	r3, #0
 8016d18:	837b      	strh	r3, [r7, #26]
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d1e:	2300      	movs	r3, #0
 8016d20:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016d22:	e0a1      	b.n	8016e68 <etharp_find_entry+0x178>
    u8_t state = arp_table[i].state;
 8016d24:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016d28:	4982      	ldr	r1, [pc, #520]	; (8016f34 <etharp_find_entry+0x244>)
 8016d2a:	4613      	mov	r3, r2
 8016d2c:	005b      	lsls	r3, r3, #1
 8016d2e:	4413      	add	r3, r2
 8016d30:	00db      	lsls	r3, r3, #3
 8016d32:	440b      	add	r3, r1
 8016d34:	3314      	adds	r3, #20
 8016d36:	781b      	ldrb	r3, [r3, #0]
 8016d38:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016d3a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016d3e:	2b0a      	cmp	r3, #10
 8016d40:	d105      	bne.n	8016d4e <etharp_find_entry+0x5e>
 8016d42:	7dfb      	ldrb	r3, [r7, #23]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d102      	bne.n	8016d4e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016d48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016d4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016d4c:	e088      	b.n	8016e60 <etharp_find_entry+0x170>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016d4e:	7dfb      	ldrb	r3, [r7, #23]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	f000 8085 	beq.w	8016e60 <etharp_find_entry+0x170>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d020      	beq.n	8016d9e <etharp_find_entry+0xae>
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	6819      	ldr	r1, [r3, #0]
 8016d60:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016d64:	4873      	ldr	r0, [pc, #460]	; (8016f34 <etharp_find_entry+0x244>)
 8016d66:	4613      	mov	r3, r2
 8016d68:	005b      	lsls	r3, r3, #1
 8016d6a:	4413      	add	r3, r2
 8016d6c:	00db      	lsls	r3, r3, #3
 8016d6e:	4403      	add	r3, r0
 8016d70:	3304      	adds	r3, #4
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	4299      	cmp	r1, r3
 8016d76:	d112      	bne.n	8016d9e <etharp_find_entry+0xae>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d00c      	beq.n	8016d98 <etharp_find_entry+0xa8>
 8016d7e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016d82:	496c      	ldr	r1, [pc, #432]	; (8016f34 <etharp_find_entry+0x244>)
 8016d84:	4613      	mov	r3, r2
 8016d86:	005b      	lsls	r3, r3, #1
 8016d88:	4413      	add	r3, r2
 8016d8a:	00db      	lsls	r3, r3, #3
 8016d8c:	440b      	add	r3, r1
 8016d8e:	3308      	adds	r3, #8
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	687a      	ldr	r2, [r7, #4]
 8016d94:	429a      	cmp	r2, r3
 8016d96:	d102      	bne.n	8016d9e <etharp_find_entry+0xae>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016d98:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016d9c:	e0c5      	b.n	8016f2a <etharp_find_entry+0x23a>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016d9e:	7dfb      	ldrb	r3, [r7, #23]
 8016da0:	2b01      	cmp	r3, #1
 8016da2:	d140      	bne.n	8016e26 <etharp_find_entry+0x136>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016da4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016da8:	4962      	ldr	r1, [pc, #392]	; (8016f34 <etharp_find_entry+0x244>)
 8016daa:	4613      	mov	r3, r2
 8016dac:	005b      	lsls	r3, r3, #1
 8016dae:	4413      	add	r3, r2
 8016db0:	00db      	lsls	r3, r3, #3
 8016db2:	440b      	add	r3, r1
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d01a      	beq.n	8016df0 <etharp_find_entry+0x100>
          if (arp_table[i].ctime >= age_queue) {
 8016dba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016dbe:	495d      	ldr	r1, [pc, #372]	; (8016f34 <etharp_find_entry+0x244>)
 8016dc0:	4613      	mov	r3, r2
 8016dc2:	005b      	lsls	r3, r3, #1
 8016dc4:	4413      	add	r3, r2
 8016dc6:	00db      	lsls	r3, r3, #3
 8016dc8:	440b      	add	r3, r1
 8016dca:	3312      	adds	r3, #18
 8016dcc:	881b      	ldrh	r3, [r3, #0]
 8016dce:	8bba      	ldrh	r2, [r7, #28]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d845      	bhi.n	8016e60 <etharp_find_entry+0x170>
            old_queue = i;
 8016dd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016dd6:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016dd8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016ddc:	4955      	ldr	r1, [pc, #340]	; (8016f34 <etharp_find_entry+0x244>)
 8016dde:	4613      	mov	r3, r2
 8016de0:	005b      	lsls	r3, r3, #1
 8016de2:	4413      	add	r3, r2
 8016de4:	00db      	lsls	r3, r3, #3
 8016de6:	440b      	add	r3, r1
 8016de8:	3312      	adds	r3, #18
 8016dea:	881b      	ldrh	r3, [r3, #0]
 8016dec:	83bb      	strh	r3, [r7, #28]
 8016dee:	e037      	b.n	8016e60 <etharp_find_entry+0x170>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016df0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016df4:	494f      	ldr	r1, [pc, #316]	; (8016f34 <etharp_find_entry+0x244>)
 8016df6:	4613      	mov	r3, r2
 8016df8:	005b      	lsls	r3, r3, #1
 8016dfa:	4413      	add	r3, r2
 8016dfc:	00db      	lsls	r3, r3, #3
 8016dfe:	440b      	add	r3, r1
 8016e00:	3312      	adds	r3, #18
 8016e02:	881b      	ldrh	r3, [r3, #0]
 8016e04:	8b7a      	ldrh	r2, [r7, #26]
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d82a      	bhi.n	8016e60 <etharp_find_entry+0x170>
            old_pending = i;
 8016e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016e0c:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8016e0e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016e12:	4948      	ldr	r1, [pc, #288]	; (8016f34 <etharp_find_entry+0x244>)
 8016e14:	4613      	mov	r3, r2
 8016e16:	005b      	lsls	r3, r3, #1
 8016e18:	4413      	add	r3, r2
 8016e1a:	00db      	lsls	r3, r3, #3
 8016e1c:	440b      	add	r3, r1
 8016e1e:	3312      	adds	r3, #18
 8016e20:	881b      	ldrh	r3, [r3, #0]
 8016e22:	837b      	strh	r3, [r7, #26]
 8016e24:	e01c      	b.n	8016e60 <etharp_find_entry+0x170>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016e26:	7dfb      	ldrb	r3, [r7, #23]
 8016e28:	2b01      	cmp	r3, #1
 8016e2a:	d919      	bls.n	8016e60 <etharp_find_entry+0x170>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016e2c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016e30:	4940      	ldr	r1, [pc, #256]	; (8016f34 <etharp_find_entry+0x244>)
 8016e32:	4613      	mov	r3, r2
 8016e34:	005b      	lsls	r3, r3, #1
 8016e36:	4413      	add	r3, r2
 8016e38:	00db      	lsls	r3, r3, #3
 8016e3a:	440b      	add	r3, r1
 8016e3c:	3312      	adds	r3, #18
 8016e3e:	881b      	ldrh	r3, [r3, #0]
 8016e40:	8b3a      	ldrh	r2, [r7, #24]
 8016e42:	429a      	cmp	r2, r3
 8016e44:	d80c      	bhi.n	8016e60 <etharp_find_entry+0x170>
            old_stable = i;
 8016e46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016e48:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 8016e4a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016e4e:	4939      	ldr	r1, [pc, #228]	; (8016f34 <etharp_find_entry+0x244>)
 8016e50:	4613      	mov	r3, r2
 8016e52:	005b      	lsls	r3, r3, #1
 8016e54:	4413      	add	r3, r2
 8016e56:	00db      	lsls	r3, r3, #3
 8016e58:	440b      	add	r3, r1
 8016e5a:	3312      	adds	r3, #18
 8016e5c:	881b      	ldrh	r3, [r3, #0]
 8016e5e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016e62:	3301      	adds	r3, #1
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016e68:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016e6c:	2b09      	cmp	r3, #9
 8016e6e:	f77f af59 	ble.w	8016d24 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016e72:	7afb      	ldrb	r3, [r7, #11]
 8016e74:	f003 0302 	and.w	r3, r3, #2
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d108      	bne.n	8016e8e <etharp_find_entry+0x19e>
 8016e7c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016e80:	2b0a      	cmp	r3, #10
 8016e82:	d107      	bne.n	8016e94 <etharp_find_entry+0x1a4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016e84:	7afb      	ldrb	r3, [r7, #11]
 8016e86:	f003 0301 	and.w	r3, r3, #1
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d102      	bne.n	8016e94 <etharp_find_entry+0x1a4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e92:	e04a      	b.n	8016f2a <etharp_find_entry+0x23a>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016e94:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016e98:	2b09      	cmp	r3, #9
 8016e9a:	dc02      	bgt.n	8016ea2 <etharp_find_entry+0x1b2>
    i = empty;
 8016e9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016e9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016ea0:	e01c      	b.n	8016edc <etharp_find_entry+0x1ec>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016ea2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016ea6:	2b09      	cmp	r3, #9
 8016ea8:	dc02      	bgt.n	8016eb0 <etharp_find_entry+0x1c0>
      /* recycle oldest stable*/
      i = old_stable;
 8016eaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016eac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016eae:	e010      	b.n	8016ed2 <etharp_find_entry+0x1e2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016eb0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016eb4:	2b09      	cmp	r3, #9
 8016eb6:	dc02      	bgt.n	8016ebe <etharp_find_entry+0x1ce>
      /* recycle oldest pending */
      i = old_pending;
 8016eb8:	8c3b      	ldrh	r3, [r7, #32]
 8016eba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016ebc:	e009      	b.n	8016ed2 <etharp_find_entry+0x1e2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016ebe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016ec2:	2b09      	cmp	r3, #9
 8016ec4:	dc02      	bgt.n	8016ecc <etharp_find_entry+0x1dc>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016ec6:	8bfb      	ldrh	r3, [r7, #30]
 8016ec8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016eca:	e002      	b.n	8016ed2 <etharp_find_entry+0x1e2>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ed0:	e02b      	b.n	8016f2a <etharp_find_entry+0x23a>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8016ed2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7ff fe02 	bl	8016ae0 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d00b      	beq.n	8016efa <etharp_find_entry+0x20a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016ee2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	6819      	ldr	r1, [r3, #0]
 8016eea:	4812      	ldr	r0, [pc, #72]	; (8016f34 <etharp_find_entry+0x244>)
 8016eec:	4613      	mov	r3, r2
 8016eee:	005b      	lsls	r3, r3, #1
 8016ef0:	4413      	add	r3, r2
 8016ef2:	00db      	lsls	r3, r3, #3
 8016ef4:	4403      	add	r3, r0
 8016ef6:	3304      	adds	r3, #4
 8016ef8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016efa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016efe:	490d      	ldr	r1, [pc, #52]	; (8016f34 <etharp_find_entry+0x244>)
 8016f00:	4613      	mov	r3, r2
 8016f02:	005b      	lsls	r3, r3, #1
 8016f04:	4413      	add	r3, r2
 8016f06:	00db      	lsls	r3, r3, #3
 8016f08:	440b      	add	r3, r1
 8016f0a:	3312      	adds	r3, #18
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016f10:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016f14:	4907      	ldr	r1, [pc, #28]	; (8016f34 <etharp_find_entry+0x244>)
 8016f16:	4613      	mov	r3, r2
 8016f18:	005b      	lsls	r3, r3, #1
 8016f1a:	4413      	add	r3, r2
 8016f1c:	00db      	lsls	r3, r3, #3
 8016f1e:	440b      	add	r3, r1
 8016f20:	3308      	adds	r3, #8
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016f26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	3728      	adds	r7, #40	; 0x28
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	bd80      	pop	{r7, pc}
 8016f32:	bf00      	nop
 8016f34:	2000784c 	.word	0x2000784c

08016f38 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b08a      	sub	sp, #40	; 0x28
 8016f3c:	af02      	add	r7, sp, #8
 8016f3e:	60f8      	str	r0, [r7, #12]
 8016f40:	60b9      	str	r1, [r7, #8]
 8016f42:	607a      	str	r2, [r7, #4]
 8016f44:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d012      	beq.n	8016f72 <etharp_update_arp_entry+0x3a>
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d00e      	beq.n	8016f72 <etharp_update_arp_entry+0x3a>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f54:	68bb      	ldr	r3, [r7, #8]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	68f9      	ldr	r1, [r7, #12]
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f001 f9fe 	bl	801835c <ip4_addr_isbroadcast_u32>
 8016f60:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d105      	bne.n	8016f72 <etharp_update_arp_entry+0x3a>
      ip4_addr_ismulticast(ipaddr)) {
 8016f66:	68bb      	ldr	r3, [r7, #8]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f6e:	2be0      	cmp	r3, #224	; 0xe0
 8016f70:	d102      	bne.n	8016f78 <etharp_update_arp_entry+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016f72:	f06f 030f 	mvn.w	r3, #15
 8016f76:	e075      	b.n	8017064 <etharp_update_arp_entry+0x12c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016f78:	78fb      	ldrb	r3, [r7, #3]
 8016f7a:	68fa      	ldr	r2, [r7, #12]
 8016f7c:	4619      	mov	r1, r3
 8016f7e:	68b8      	ldr	r0, [r7, #8]
 8016f80:	f7ff feb6 	bl	8016cf0 <etharp_find_entry>
 8016f84:	4603      	mov	r3, r0
 8016f86:	83fb      	strh	r3, [r7, #30]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016f88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	da02      	bge.n	8016f96 <etharp_update_arp_entry+0x5e>
    return (err_t)i;
 8016f90:	8bfb      	ldrh	r3, [r7, #30]
 8016f92:	b25b      	sxtb	r3, r3
 8016f94:	e066      	b.n	8017064 <etharp_update_arp_entry+0x12c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016f96:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8016f9a:	4934      	ldr	r1, [pc, #208]	; (801706c <etharp_update_arp_entry+0x134>)
 8016f9c:	4613      	mov	r3, r2
 8016f9e:	005b      	lsls	r3, r3, #1
 8016fa0:	4413      	add	r3, r2
 8016fa2:	00db      	lsls	r3, r3, #3
 8016fa4:	440b      	add	r3, r1
 8016fa6:	3314      	adds	r3, #20
 8016fa8:	2202      	movs	r2, #2
 8016faa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016fac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8016fb0:	492e      	ldr	r1, [pc, #184]	; (801706c <etharp_update_arp_entry+0x134>)
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	005b      	lsls	r3, r3, #1
 8016fb6:	4413      	add	r3, r2
 8016fb8:	00db      	lsls	r3, r3, #3
 8016fba:	440b      	add	r3, r1
 8016fbc:	3308      	adds	r3, #8
 8016fbe:	68fa      	ldr	r2, [r7, #12]
 8016fc0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016fc2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8016fc6:	4613      	mov	r3, r2
 8016fc8:	005b      	lsls	r3, r3, #1
 8016fca:	4413      	add	r3, r2
 8016fcc:	00db      	lsls	r3, r3, #3
 8016fce:	3308      	adds	r3, #8
 8016fd0:	4a26      	ldr	r2, [pc, #152]	; (801706c <etharp_update_arp_entry+0x134>)
 8016fd2:	4413      	add	r3, r2
 8016fd4:	3304      	adds	r3, #4
 8016fd6:	2206      	movs	r2, #6
 8016fd8:	6879      	ldr	r1, [r7, #4]
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f002 fbe1 	bl	80197a2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016fe0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8016fe4:	4921      	ldr	r1, [pc, #132]	; (801706c <etharp_update_arp_entry+0x134>)
 8016fe6:	4613      	mov	r3, r2
 8016fe8:	005b      	lsls	r3, r3, #1
 8016fea:	4413      	add	r3, r2
 8016fec:	00db      	lsls	r3, r3, #3
 8016fee:	440b      	add	r3, r1
 8016ff0:	3312      	adds	r3, #18
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 8016ff6:	e029      	b.n	801704c <etharp_update_arp_entry+0x114>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 8016ff8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8016ffc:	491b      	ldr	r1, [pc, #108]	; (801706c <etharp_update_arp_entry+0x134>)
 8016ffe:	4613      	mov	r3, r2
 8017000:	005b      	lsls	r3, r3, #1
 8017002:	4413      	add	r3, r2
 8017004:	00db      	lsls	r3, r3, #3
 8017006:	440b      	add	r3, r1
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 801700c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8017010:	69bb      	ldr	r3, [r7, #24]
 8017012:	6819      	ldr	r1, [r3, #0]
 8017014:	4815      	ldr	r0, [pc, #84]	; (801706c <etharp_update_arp_entry+0x134>)
 8017016:	4613      	mov	r3, r2
 8017018:	005b      	lsls	r3, r3, #1
 801701a:	4413      	add	r3, r2
 801701c:	00db      	lsls	r3, r3, #3
 801701e:	4403      	add	r3, r0
 8017020:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 8017022:	69bb      	ldr	r3, [r7, #24]
 8017024:	685b      	ldr	r3, [r3, #4]
 8017026:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 8017028:	69b9      	ldr	r1, [r7, #24]
 801702a:	2006      	movs	r0, #6
 801702c:	f7f7 fa2a 	bl	800e484 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017036:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	6979      	ldr	r1, [r7, #20]
 8017040:	68f8      	ldr	r0, [r7, #12]
 8017042:	f001 ffd5 	bl	8018ff0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017046:	6978      	ldr	r0, [r7, #20]
 8017048:	f7f7 fef8 	bl	800ee3c <pbuf_free>
  while (arp_table[i].q != NULL) {
 801704c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8017050:	4906      	ldr	r1, [pc, #24]	; (801706c <etharp_update_arp_entry+0x134>)
 8017052:	4613      	mov	r3, r2
 8017054:	005b      	lsls	r3, r3, #1
 8017056:	4413      	add	r3, r2
 8017058:	00db      	lsls	r3, r3, #3
 801705a:	440b      	add	r3, r1
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d1ca      	bne.n	8016ff8 <etharp_update_arp_entry+0xc0>
  }
  return ERR_OK;
 8017062:	2300      	movs	r3, #0
}
 8017064:	4618      	mov	r0, r3
 8017066:	3720      	adds	r7, #32
 8017068:	46bd      	mov	sp, r7
 801706a:	bd80      	pop	{r7, pc}
 801706c:	2000784c 	.word	0x2000784c

08017070 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017070:	b5b0      	push	{r4, r5, r7, lr}
 8017072:	b08a      	sub	sp, #40	; 0x28
 8017074:	af04      	add	r7, sp, #16
 8017076:	6078      	str	r0, [r7, #4]
 8017078:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801707a:	683b      	ldr	r3, [r7, #0]
 801707c:	2b00      	cmp	r3, #0
 801707e:	f000 808e 	beq.w	801719e <etharp_input+0x12e>

  hdr = (struct etharp_hdr *)p->payload;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017088:	697b      	ldr	r3, [r7, #20]
 801708a:	881b      	ldrh	r3, [r3, #0]
 801708c:	b29b      	uxth	r3, r3
 801708e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017092:	d10c      	bne.n	80170ae <etharp_input+0x3e>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017094:	697b      	ldr	r3, [r7, #20]
 8017096:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017098:	2b06      	cmp	r3, #6
 801709a:	d108      	bne.n	80170ae <etharp_input+0x3e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801709c:	697b      	ldr	r3, [r7, #20]
 801709e:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80170a0:	2b04      	cmp	r3, #4
 80170a2:	d104      	bne.n	80170ae <etharp_input+0x3e>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	885b      	ldrh	r3, [r3, #2]
 80170a8:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80170aa:	2b08      	cmp	r3, #8
 80170ac:	d00f      	beq.n	80170ce <etharp_input+0x5e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 80170ae:	4b3d      	ldr	r3, [pc, #244]	; (80171a4 <etharp_input+0x134>)
 80170b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170b2:	3301      	adds	r3, #1
 80170b4:	b29a      	uxth	r2, r3
 80170b6:	4b3b      	ldr	r3, [pc, #236]	; (80171a4 <etharp_input+0x134>)
 80170b8:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80170ba:	4b3a      	ldr	r3, [pc, #232]	; (80171a4 <etharp_input+0x134>)
 80170bc:	8bdb      	ldrh	r3, [r3, #30]
 80170be:	3301      	adds	r3, #1
 80170c0:	b29a      	uxth	r2, r3
 80170c2:	4b38      	ldr	r3, [pc, #224]	; (80171a4 <etharp_input+0x134>)
 80170c4:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 80170c6:	6878      	ldr	r0, [r7, #4]
 80170c8:	f7f7 feb8 	bl	800ee3c <pbuf_free>
    return;
 80170cc:	e067      	b.n	801719e <etharp_input+0x12e>
  }
  ETHARP_STATS_INC(etharp.recv);
 80170ce:	4b35      	ldr	r3, [pc, #212]	; (80171a4 <etharp_input+0x134>)
 80170d0:	8b5b      	ldrh	r3, [r3, #26]
 80170d2:	3301      	adds	r3, #1
 80170d4:	b29a      	uxth	r2, r3
 80170d6:	4b33      	ldr	r3, [pc, #204]	; (80171a4 <etharp_input+0x134>)
 80170d8:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80170da:	697b      	ldr	r3, [r7, #20]
 80170dc:	330e      	adds	r3, #14
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80170e2:	697b      	ldr	r3, [r7, #20]
 80170e4:	3318      	adds	r3, #24
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80170ea:	683b      	ldr	r3, [r7, #0]
 80170ec:	3304      	adds	r3, #4
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d102      	bne.n	80170fa <etharp_input+0x8a>
    for_us = 0;
 80170f4:	2300      	movs	r3, #0
 80170f6:	74fb      	strb	r3, [r7, #19]
 80170f8:	e009      	b.n	801710e <etharp_input+0x9e>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80170fa:	68ba      	ldr	r2, [r7, #8]
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	3304      	adds	r3, #4
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	429a      	cmp	r2, r3
 8017104:	bf0c      	ite	eq
 8017106:	2301      	moveq	r3, #1
 8017108:	2300      	movne	r3, #0
 801710a:	b2db      	uxtb	r3, r3
 801710c:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	f103 0208 	add.w	r2, r3, #8
 8017114:	7cfb      	ldrb	r3, [r7, #19]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d001      	beq.n	801711e <etharp_input+0xae>
 801711a:	2301      	movs	r3, #1
 801711c:	e000      	b.n	8017120 <etharp_input+0xb0>
 801711e:	2302      	movs	r3, #2
 8017120:	f107 010c 	add.w	r1, r7, #12
 8017124:	6838      	ldr	r0, [r7, #0]
 8017126:	f7ff ff07 	bl	8016f38 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	88db      	ldrh	r3, [r3, #6]
 801712e:	b29b      	uxth	r3, r3
 8017130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017134:	d003      	beq.n	801713e <etharp_input+0xce>
 8017136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801713a:	d01e      	beq.n	801717a <etharp_input+0x10a>
 801713c:	e024      	b.n	8017188 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801713e:	7cfb      	ldrb	r3, [r7, #19]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d028      	beq.n	8017196 <etharp_input+0x126>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017144:	683b      	ldr	r3, [r7, #0]
 8017146:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017150:	683b      	ldr	r3, [r7, #0]
 8017152:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017156:	683b      	ldr	r3, [r7, #0]
 8017158:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801715a:	697a      	ldr	r2, [r7, #20]
 801715c:	3208      	adds	r2, #8
        etharp_raw(netif,
 801715e:	2102      	movs	r1, #2
 8017160:	9103      	str	r1, [sp, #12]
 8017162:	f107 010c 	add.w	r1, r7, #12
 8017166:	9102      	str	r1, [sp, #8]
 8017168:	9201      	str	r2, [sp, #4]
 801716a:	9300      	str	r3, [sp, #0]
 801716c:	462b      	mov	r3, r5
 801716e:	4622      	mov	r2, r4
 8017170:	4601      	mov	r1, r0
 8017172:	6838      	ldr	r0, [r7, #0]
 8017174:	f000 faca 	bl	801770c <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8017178:	e00d      	b.n	8017196 <etharp_input+0x126>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 801717a:	f107 030c 	add.w	r3, r7, #12
 801717e:	4619      	mov	r1, r3
 8017180:	6838      	ldr	r0, [r7, #0]
 8017182:	f7fe fad2 	bl	801572a <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8017186:	e007      	b.n	8017198 <etharp_input+0x128>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8017188:	4b06      	ldr	r3, [pc, #24]	; (80171a4 <etharp_input+0x134>)
 801718a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801718c:	3301      	adds	r3, #1
 801718e:	b29a      	uxth	r2, r3
 8017190:	4b04      	ldr	r3, [pc, #16]	; (80171a4 <etharp_input+0x134>)
 8017192:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 8017194:	e000      	b.n	8017198 <etharp_input+0x128>
      break;
 8017196:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f7f7 fe4f 	bl	800ee3c <pbuf_free>
}
 801719e:	3718      	adds	r7, #24
 80171a0:	46bd      	mov	sp, r7
 80171a2:	bdb0      	pop	{r4, r5, r7, pc}
 80171a4:	2000770c 	.word	0x2000770c

080171a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b086      	sub	sp, #24
 80171ac:	af02      	add	r7, sp, #8
 80171ae:	60f8      	str	r0, [r7, #12]
 80171b0:	60b9      	str	r1, [r7, #8]
 80171b2:	4613      	mov	r3, r2
 80171b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80171b6:	79fa      	ldrb	r2, [r7, #7]
 80171b8:	493b      	ldr	r1, [pc, #236]	; (80172a8 <etharp_output_to_arp_index+0x100>)
 80171ba:	4613      	mov	r3, r2
 80171bc:	005b      	lsls	r3, r3, #1
 80171be:	4413      	add	r3, r2
 80171c0:	00db      	lsls	r3, r3, #3
 80171c2:	440b      	add	r3, r1
 80171c4:	3314      	adds	r3, #20
 80171c6:	781b      	ldrb	r3, [r3, #0]
 80171c8:	2b02      	cmp	r3, #2
 80171ca:	d153      	bne.n	8017274 <etharp_output_to_arp_index+0xcc>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80171cc:	79fa      	ldrb	r2, [r7, #7]
 80171ce:	4936      	ldr	r1, [pc, #216]	; (80172a8 <etharp_output_to_arp_index+0x100>)
 80171d0:	4613      	mov	r3, r2
 80171d2:	005b      	lsls	r3, r3, #1
 80171d4:	4413      	add	r3, r2
 80171d6:	00db      	lsls	r3, r3, #3
 80171d8:	440b      	add	r3, r1
 80171da:	3312      	adds	r3, #18
 80171dc:	881b      	ldrh	r3, [r3, #0]
 80171de:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80171e2:	d919      	bls.n	8017218 <etharp_output_to_arp_index+0x70>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80171e4:	79fa      	ldrb	r2, [r7, #7]
 80171e6:	4613      	mov	r3, r2
 80171e8:	005b      	lsls	r3, r3, #1
 80171ea:	4413      	add	r3, r2
 80171ec:	00db      	lsls	r3, r3, #3
 80171ee:	4a2e      	ldr	r2, [pc, #184]	; (80172a8 <etharp_output_to_arp_index+0x100>)
 80171f0:	4413      	add	r3, r2
 80171f2:	3304      	adds	r3, #4
 80171f4:	4619      	mov	r1, r3
 80171f6:	68f8      	ldr	r0, [r7, #12]
 80171f8:	f000 fb1a 	bl	8017830 <etharp_request>
 80171fc:	4603      	mov	r3, r0
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d138      	bne.n	8017274 <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017202:	79fa      	ldrb	r2, [r7, #7]
 8017204:	4928      	ldr	r1, [pc, #160]	; (80172a8 <etharp_output_to_arp_index+0x100>)
 8017206:	4613      	mov	r3, r2
 8017208:	005b      	lsls	r3, r3, #1
 801720a:	4413      	add	r3, r2
 801720c:	00db      	lsls	r3, r3, #3
 801720e:	440b      	add	r3, r1
 8017210:	3314      	adds	r3, #20
 8017212:	2203      	movs	r2, #3
 8017214:	701a      	strb	r2, [r3, #0]
 8017216:	e02d      	b.n	8017274 <etharp_output_to_arp_index+0xcc>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017218:	79fa      	ldrb	r2, [r7, #7]
 801721a:	4923      	ldr	r1, [pc, #140]	; (80172a8 <etharp_output_to_arp_index+0x100>)
 801721c:	4613      	mov	r3, r2
 801721e:	005b      	lsls	r3, r3, #1
 8017220:	4413      	add	r3, r2
 8017222:	00db      	lsls	r3, r3, #3
 8017224:	440b      	add	r3, r1
 8017226:	3312      	adds	r3, #18
 8017228:	881b      	ldrh	r3, [r3, #0]
 801722a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801722e:	d321      	bcc.n	8017274 <etharp_output_to_arp_index+0xcc>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017230:	79fa      	ldrb	r2, [r7, #7]
 8017232:	4613      	mov	r3, r2
 8017234:	005b      	lsls	r3, r3, #1
 8017236:	4413      	add	r3, r2
 8017238:	00db      	lsls	r3, r3, #3
 801723a:	4a1b      	ldr	r2, [pc, #108]	; (80172a8 <etharp_output_to_arp_index+0x100>)
 801723c:	4413      	add	r3, r2
 801723e:	1d19      	adds	r1, r3, #4
 8017240:	79fa      	ldrb	r2, [r7, #7]
 8017242:	4613      	mov	r3, r2
 8017244:	005b      	lsls	r3, r3, #1
 8017246:	4413      	add	r3, r2
 8017248:	00db      	lsls	r3, r3, #3
 801724a:	3308      	adds	r3, #8
 801724c:	4a16      	ldr	r2, [pc, #88]	; (80172a8 <etharp_output_to_arp_index+0x100>)
 801724e:	4413      	add	r3, r2
 8017250:	3304      	adds	r3, #4
 8017252:	461a      	mov	r2, r3
 8017254:	68f8      	ldr	r0, [r7, #12]
 8017256:	f000 fac9 	bl	80177ec <etharp_request_dst>
 801725a:	4603      	mov	r3, r0
 801725c:	2b00      	cmp	r3, #0
 801725e:	d109      	bne.n	8017274 <etharp_output_to_arp_index+0xcc>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017260:	79fa      	ldrb	r2, [r7, #7]
 8017262:	4911      	ldr	r1, [pc, #68]	; (80172a8 <etharp_output_to_arp_index+0x100>)
 8017264:	4613      	mov	r3, r2
 8017266:	005b      	lsls	r3, r3, #1
 8017268:	4413      	add	r3, r2
 801726a:	00db      	lsls	r3, r3, #3
 801726c:	440b      	add	r3, r1
 801726e:	3314      	adds	r3, #20
 8017270:	2203      	movs	r2, #3
 8017272:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801727a:	79fa      	ldrb	r2, [r7, #7]
 801727c:	4613      	mov	r3, r2
 801727e:	005b      	lsls	r3, r3, #1
 8017280:	4413      	add	r3, r2
 8017282:	00db      	lsls	r3, r3, #3
 8017284:	3308      	adds	r3, #8
 8017286:	4a08      	ldr	r2, [pc, #32]	; (80172a8 <etharp_output_to_arp_index+0x100>)
 8017288:	4413      	add	r3, r2
 801728a:	3304      	adds	r3, #4
 801728c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017290:	9200      	str	r2, [sp, #0]
 8017292:	460a      	mov	r2, r1
 8017294:	68b9      	ldr	r1, [r7, #8]
 8017296:	68f8      	ldr	r0, [r7, #12]
 8017298:	f001 feaa 	bl	8018ff0 <ethernet_output>
 801729c:	4603      	mov	r3, r0
}
 801729e:	4618      	mov	r0, r3
 80172a0:	3710      	adds	r7, #16
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}
 80172a6:	bf00      	nop
 80172a8:	2000784c 	.word	0x2000784c

080172ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b08a      	sub	sp, #40	; 0x28
 80172b0:	af02      	add	r7, sp, #8
 80172b2:	60f8      	str	r0, [r7, #12]
 80172b4:	60b9      	str	r1, [r7, #8]
 80172b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	61bb      	str	r3, [r7, #24]

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	68f9      	ldr	r1, [r7, #12]
 80172c2:	4618      	mov	r0, r3
 80172c4:	f001 f84a 	bl	801835c <ip4_addr_isbroadcast_u32>
 80172c8:	4603      	mov	r3, r0
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d002      	beq.n	80172d4 <etharp_output+0x28>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80172ce:	4b64      	ldr	r3, [pc, #400]	; (8017460 <etharp_output+0x1b4>)
 80172d0:	61fb      	str	r3, [r7, #28]
 80172d2:	e0b5      	b.n	8017440 <etharp_output+0x194>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80172dc:	2be0      	cmp	r3, #224	; 0xe0
 80172de:	d118      	bne.n	8017312 <etharp_output+0x66>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80172e0:	2301      	movs	r3, #1
 80172e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80172e4:	2300      	movs	r3, #0
 80172e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80172e8:	235e      	movs	r3, #94	; 0x5e
 80172ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	3301      	adds	r3, #1
 80172f0:	781b      	ldrb	r3, [r3, #0]
 80172f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80172f6:	b2db      	uxtb	r3, r3
 80172f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	3302      	adds	r3, #2
 80172fe:	781b      	ldrb	r3, [r3, #0]
 8017300:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	3303      	adds	r3, #3
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801730a:	f107 0310 	add.w	r3, r7, #16
 801730e:	61fb      	str	r3, [r7, #28]
 8017310:	e096      	b.n	8017440 <etharp_output+0x194>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	3304      	adds	r3, #4
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	405a      	eors	r2, r3
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	3308      	adds	r3, #8
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	4013      	ands	r3, r2
 8017326:	2b00      	cmp	r3, #0
 8017328:	d012      	beq.n	8017350 <etharp_output+0xa4>
        !ip4_addr_islinklocal(ipaddr)) {
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017330:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017334:	4293      	cmp	r3, r2
 8017336:	d00b      	beq.n	8017350 <etharp_output+0xa4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	330c      	adds	r3, #12
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d003      	beq.n	801734a <etharp_output+0x9e>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	330c      	adds	r3, #12
 8017346:	61bb      	str	r3, [r7, #24]
 8017348:	e002      	b.n	8017350 <etharp_output+0xa4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801734a:	f06f 0303 	mvn.w	r3, #3
 801734e:	e083      	b.n	8017458 <etharp_output+0x1ac>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017350:	4b44      	ldr	r3, [pc, #272]	; (8017464 <etharp_output+0x1b8>)
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	4619      	mov	r1, r3
 8017356:	4a44      	ldr	r2, [pc, #272]	; (8017468 <etharp_output+0x1bc>)
 8017358:	460b      	mov	r3, r1
 801735a:	005b      	lsls	r3, r3, #1
 801735c:	440b      	add	r3, r1
 801735e:	00db      	lsls	r3, r3, #3
 8017360:	4413      	add	r3, r2
 8017362:	3314      	adds	r3, #20
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	2b01      	cmp	r3, #1
 8017368:	d92b      	bls.n	80173c2 <etharp_output+0x116>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801736a:	4b3e      	ldr	r3, [pc, #248]	; (8017464 <etharp_output+0x1b8>)
 801736c:	781b      	ldrb	r3, [r3, #0]
 801736e:	4619      	mov	r1, r3
 8017370:	4a3d      	ldr	r2, [pc, #244]	; (8017468 <etharp_output+0x1bc>)
 8017372:	460b      	mov	r3, r1
 8017374:	005b      	lsls	r3, r3, #1
 8017376:	440b      	add	r3, r1
 8017378:	00db      	lsls	r3, r3, #3
 801737a:	4413      	add	r3, r2
 801737c:	3308      	adds	r3, #8
 801737e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017380:	68fa      	ldr	r2, [r7, #12]
 8017382:	429a      	cmp	r2, r3
 8017384:	d11d      	bne.n	80173c2 <etharp_output+0x116>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017386:	69bb      	ldr	r3, [r7, #24]
 8017388:	681a      	ldr	r2, [r3, #0]
 801738a:	4b36      	ldr	r3, [pc, #216]	; (8017464 <etharp_output+0x1b8>)
 801738c:	781b      	ldrb	r3, [r3, #0]
 801738e:	4618      	mov	r0, r3
 8017390:	4935      	ldr	r1, [pc, #212]	; (8017468 <etharp_output+0x1bc>)
 8017392:	4603      	mov	r3, r0
 8017394:	005b      	lsls	r3, r3, #1
 8017396:	4403      	add	r3, r0
 8017398:	00db      	lsls	r3, r3, #3
 801739a:	440b      	add	r3, r1
 801739c:	3304      	adds	r3, #4
 801739e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d10e      	bne.n	80173c2 <etharp_output+0x116>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 80173a4:	4b31      	ldr	r3, [pc, #196]	; (801746c <etharp_output+0x1c0>)
 80173a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80173a8:	3301      	adds	r3, #1
 80173aa:	b29a      	uxth	r2, r3
 80173ac:	4b2f      	ldr	r3, [pc, #188]	; (801746c <etharp_output+0x1c0>)
 80173ae:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80173b0:	4b2c      	ldr	r3, [pc, #176]	; (8017464 <etharp_output+0x1b8>)
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	461a      	mov	r2, r3
 80173b6:	68b9      	ldr	r1, [r7, #8]
 80173b8:	68f8      	ldr	r0, [r7, #12]
 80173ba:	f7ff fef5 	bl	80171a8 <etharp_output_to_arp_index>
 80173be:	4603      	mov	r3, r0
 80173c0:	e04a      	b.n	8017458 <etharp_output+0x1ac>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80173c2:	2300      	movs	r3, #0
 80173c4:	75fb      	strb	r3, [r7, #23]
 80173c6:	e031      	b.n	801742c <etharp_output+0x180>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80173c8:	7dfa      	ldrb	r2, [r7, #23]
 80173ca:	4927      	ldr	r1, [pc, #156]	; (8017468 <etharp_output+0x1bc>)
 80173cc:	4613      	mov	r3, r2
 80173ce:	005b      	lsls	r3, r3, #1
 80173d0:	4413      	add	r3, r2
 80173d2:	00db      	lsls	r3, r3, #3
 80173d4:	440b      	add	r3, r1
 80173d6:	3314      	adds	r3, #20
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	2b01      	cmp	r3, #1
 80173dc:	d923      	bls.n	8017426 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80173de:	7dfa      	ldrb	r2, [r7, #23]
 80173e0:	4921      	ldr	r1, [pc, #132]	; (8017468 <etharp_output+0x1bc>)
 80173e2:	4613      	mov	r3, r2
 80173e4:	005b      	lsls	r3, r3, #1
 80173e6:	4413      	add	r3, r2
 80173e8:	00db      	lsls	r3, r3, #3
 80173ea:	440b      	add	r3, r1
 80173ec:	3308      	adds	r3, #8
 80173ee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80173f0:	68fa      	ldr	r2, [r7, #12]
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d117      	bne.n	8017426 <etharp_output+0x17a>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80173f6:	69bb      	ldr	r3, [r7, #24]
 80173f8:	6819      	ldr	r1, [r3, #0]
 80173fa:	7dfa      	ldrb	r2, [r7, #23]
 80173fc:	481a      	ldr	r0, [pc, #104]	; (8017468 <etharp_output+0x1bc>)
 80173fe:	4613      	mov	r3, r2
 8017400:	005b      	lsls	r3, r3, #1
 8017402:	4413      	add	r3, r2
 8017404:	00db      	lsls	r3, r3, #3
 8017406:	4403      	add	r3, r0
 8017408:	3304      	adds	r3, #4
 801740a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801740c:	4299      	cmp	r1, r3
 801740e:	d10a      	bne.n	8017426 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017410:	4a14      	ldr	r2, [pc, #80]	; (8017464 <etharp_output+0x1b8>)
 8017412:	7dfb      	ldrb	r3, [r7, #23]
 8017414:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017416:	7dfb      	ldrb	r3, [r7, #23]
 8017418:	461a      	mov	r2, r3
 801741a:	68b9      	ldr	r1, [r7, #8]
 801741c:	68f8      	ldr	r0, [r7, #12]
 801741e:	f7ff fec3 	bl	80171a8 <etharp_output_to_arp_index>
 8017422:	4603      	mov	r3, r0
 8017424:	e018      	b.n	8017458 <etharp_output+0x1ac>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017426:	7dfb      	ldrb	r3, [r7, #23]
 8017428:	3301      	adds	r3, #1
 801742a:	75fb      	strb	r3, [r7, #23]
 801742c:	7dfb      	ldrb	r3, [r7, #23]
 801742e:	2b09      	cmp	r3, #9
 8017430:	d9ca      	bls.n	80173c8 <etharp_output+0x11c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017432:	68ba      	ldr	r2, [r7, #8]
 8017434:	69b9      	ldr	r1, [r7, #24]
 8017436:	68f8      	ldr	r0, [r7, #12]
 8017438:	f000 f81a 	bl	8017470 <etharp_query>
 801743c:	4603      	mov	r3, r0
 801743e:	e00b      	b.n	8017458 <etharp_output+0x1ac>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017446:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801744a:	9300      	str	r3, [sp, #0]
 801744c:	69fb      	ldr	r3, [r7, #28]
 801744e:	68b9      	ldr	r1, [r7, #8]
 8017450:	68f8      	ldr	r0, [r7, #12]
 8017452:	f001 fdcd 	bl	8018ff0 <ethernet_output>
 8017456:	4603      	mov	r3, r0
}
 8017458:	4618      	mov	r0, r3
 801745a:	3720      	adds	r7, #32
 801745c:	46bd      	mov	sp, r7
 801745e:	bd80      	pop	{r7, pc}
 8017460:	0801bb44 	.word	0x0801bb44
 8017464:	2000793c 	.word	0x2000793c
 8017468:	2000784c 	.word	0x2000784c
 801746c:	2000770c 	.word	0x2000770c

08017470 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b090      	sub	sp, #64	; 0x40
 8017474:	af02      	add	r7, sp, #8
 8017476:	60f8      	str	r0, [r7, #12]
 8017478:	60b9      	str	r1, [r7, #8]
 801747a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	332a      	adds	r3, #42	; 0x2a
 8017480:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 8017482:	23ff      	movs	r3, #255	; 0xff
 8017484:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int is_new_entry = 0;
 8017488:	2300      	movs	r3, #0
 801748a:	633b      	str	r3, [r7, #48]	; 0x30
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	68f9      	ldr	r1, [r7, #12]
 8017492:	4618      	mov	r0, r3
 8017494:	f000 ff62 	bl	801835c <ip4_addr_isbroadcast_u32>
 8017498:	4603      	mov	r3, r0
 801749a:	2b00      	cmp	r3, #0
 801749c:	d10c      	bne.n	80174b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80174a6:	2be0      	cmp	r3, #224	; 0xe0
 80174a8:	d006      	beq.n	80174b8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80174aa:	68bb      	ldr	r3, [r7, #8]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d003      	beq.n	80174b8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80174b0:	68bb      	ldr	r3, [r7, #8]
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d102      	bne.n	80174be <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80174b8:	f06f 030f 	mvn.w	r3, #15
 80174bc:	e11b      	b.n	80176f6 <etharp_query+0x286>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80174be:	68fa      	ldr	r2, [r7, #12]
 80174c0:	2101      	movs	r1, #1
 80174c2:	68b8      	ldr	r0, [r7, #8]
 80174c4:	f7ff fc14 	bl	8016cf0 <etharp_find_entry>
 80174c8:	4603      	mov	r3, r0
 80174ca:	837b      	strh	r3, [r7, #26]

  /* could not find or create entry? */
  if (i_err < 0) {
 80174cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	da0b      	bge.n	80174ec <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d005      	beq.n	80174e6 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 80174da:	4b89      	ldr	r3, [pc, #548]	; (8017700 <etharp_query+0x290>)
 80174dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80174de:	3301      	adds	r3, #1
 80174e0:	b29a      	uxth	r2, r3
 80174e2:	4b87      	ldr	r3, [pc, #540]	; (8017700 <etharp_query+0x290>)
 80174e4:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 80174e6:	8b7b      	ldrh	r3, [r7, #26]
 80174e8:	b25b      	sxtb	r3, r3
 80174ea:	e104      	b.n	80176f6 <etharp_query+0x286>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
  i = (netif_addr_idx_t)i_err;
 80174ec:	8b7b      	ldrh	r3, [r7, #26]
 80174ee:	767b      	strb	r3, [r7, #25]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80174f0:	7e7a      	ldrb	r2, [r7, #25]
 80174f2:	4984      	ldr	r1, [pc, #528]	; (8017704 <etharp_query+0x294>)
 80174f4:	4613      	mov	r3, r2
 80174f6:	005b      	lsls	r3, r3, #1
 80174f8:	4413      	add	r3, r2
 80174fa:	00db      	lsls	r3, r3, #3
 80174fc:	440b      	add	r3, r1
 80174fe:	3314      	adds	r3, #20
 8017500:	781b      	ldrb	r3, [r3, #0]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d115      	bne.n	8017532 <etharp_query+0xc2>
    is_new_entry = 1;
 8017506:	2301      	movs	r3, #1
 8017508:	633b      	str	r3, [r7, #48]	; 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 801750a:	7e7a      	ldrb	r2, [r7, #25]
 801750c:	497d      	ldr	r1, [pc, #500]	; (8017704 <etharp_query+0x294>)
 801750e:	4613      	mov	r3, r2
 8017510:	005b      	lsls	r3, r3, #1
 8017512:	4413      	add	r3, r2
 8017514:	00db      	lsls	r3, r3, #3
 8017516:	440b      	add	r3, r1
 8017518:	3314      	adds	r3, #20
 801751a:	2201      	movs	r2, #1
 801751c:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801751e:	7e7a      	ldrb	r2, [r7, #25]
 8017520:	4978      	ldr	r1, [pc, #480]	; (8017704 <etharp_query+0x294>)
 8017522:	4613      	mov	r3, r2
 8017524:	005b      	lsls	r3, r3, #1
 8017526:	4413      	add	r3, r2
 8017528:	00db      	lsls	r3, r3, #3
 801752a:	440b      	add	r3, r1
 801752c:	3308      	adds	r3, #8
 801752e:	68fa      	ldr	r2, [r7, #12]
 8017530:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017534:	2b00      	cmp	r3, #0
 8017536:	d102      	bne.n	801753e <etharp_query+0xce>
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d10c      	bne.n	8017558 <etharp_query+0xe8>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801753e:	68b9      	ldr	r1, [r7, #8]
 8017540:	68f8      	ldr	r0, [r7, #12]
 8017542:	f000 f975 	bl	8017830 <etharp_request>
 8017546:	4603      	mov	r3, r0
 8017548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d102      	bne.n	8017558 <etharp_query+0xe8>
      return result;
 8017552:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8017556:	e0ce      	b.n	80176f6 <etharp_query+0x286>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017558:	7e7a      	ldrb	r2, [r7, #25]
 801755a:	496a      	ldr	r1, [pc, #424]	; (8017704 <etharp_query+0x294>)
 801755c:	4613      	mov	r3, r2
 801755e:	005b      	lsls	r3, r3, #1
 8017560:	4413      	add	r3, r2
 8017562:	00db      	lsls	r3, r3, #3
 8017564:	440b      	add	r3, r1
 8017566:	3314      	adds	r3, #20
 8017568:	781b      	ldrb	r3, [r3, #0]
 801756a:	2b01      	cmp	r3, #1
 801756c:	d917      	bls.n	801759e <etharp_query+0x12e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801756e:	4a66      	ldr	r2, [pc, #408]	; (8017708 <etharp_query+0x298>)
 8017570:	7e7b      	ldrb	r3, [r7, #25]
 8017572:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017574:	7e7a      	ldrb	r2, [r7, #25]
 8017576:	4613      	mov	r3, r2
 8017578:	005b      	lsls	r3, r3, #1
 801757a:	4413      	add	r3, r2
 801757c:	00db      	lsls	r3, r3, #3
 801757e:	3308      	adds	r3, #8
 8017580:	4a60      	ldr	r2, [pc, #384]	; (8017704 <etharp_query+0x294>)
 8017582:	4413      	add	r3, r2
 8017584:	3304      	adds	r3, #4
 8017586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801758a:	9200      	str	r2, [sp, #0]
 801758c:	69fa      	ldr	r2, [r7, #28]
 801758e:	6879      	ldr	r1, [r7, #4]
 8017590:	68f8      	ldr	r0, [r7, #12]
 8017592:	f001 fd2d 	bl	8018ff0 <ethernet_output>
 8017596:	4603      	mov	r3, r0
 8017598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801759c:	e0a9      	b.n	80176f2 <etharp_query+0x282>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801759e:	7e7a      	ldrb	r2, [r7, #25]
 80175a0:	4958      	ldr	r1, [pc, #352]	; (8017704 <etharp_query+0x294>)
 80175a2:	4613      	mov	r3, r2
 80175a4:	005b      	lsls	r3, r3, #1
 80175a6:	4413      	add	r3, r2
 80175a8:	00db      	lsls	r3, r3, #3
 80175aa:	440b      	add	r3, r1
 80175ac:	3314      	adds	r3, #20
 80175ae:	781b      	ldrb	r3, [r3, #0]
 80175b0:	2b01      	cmp	r3, #1
 80175b2:	f040 809e 	bne.w	80176f2 <etharp_query+0x282>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80175b6:	2300      	movs	r3, #0
 80175b8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 80175be:	e00b      	b.n	80175d8 <etharp_query+0x168>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if (PBUF_NEEDS_COPY(p)) {
 80175c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c2:	7b1b      	ldrb	r3, [r3, #12]
 80175c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d002      	beq.n	80175d2 <etharp_query+0x162>
        copy_needed = 1;
 80175cc:	2301      	movs	r3, #1
 80175ce:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80175d0:	e005      	b.n	80175de <etharp_query+0x16e>
      }
      p = p->next;
 80175d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 80175d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d1f0      	bne.n	80175c0 <etharp_query+0x150>
    }
    if (copy_needed) {
 80175de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d007      	beq.n	80175f4 <etharp_query+0x184>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80175e4:	687a      	ldr	r2, [r7, #4]
 80175e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80175ea:	2010      	movs	r0, #16
 80175ec:	f7f7 fdc8 	bl	800f180 <pbuf_clone>
 80175f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80175f2:	e004      	b.n	80175fe <etharp_query+0x18e>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pbuf_ref(p);
 80175f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175fa:	f7f7 fc89 	bl	800ef10 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80175fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017600:	2b00      	cmp	r3, #0
 8017602:	d06d      	beq.n	80176e0 <etharp_query+0x270>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 8017604:	2006      	movs	r0, #6
 8017606:	f7f6 ff01 	bl	800e40c <memp_malloc>
 801760a:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 801760c:	697b      	ldr	r3, [r7, #20]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d05f      	beq.n	80176d2 <etharp_query+0x262>
        unsigned int qlen = 0;
 8017612:	2300      	movs	r3, #0
 8017614:	627b      	str	r3, [r7, #36]	; 0x24
        new_entry->next = 0;
 8017616:	697b      	ldr	r3, [r7, #20]
 8017618:	2200      	movs	r2, #0
 801761a:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017620:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 8017622:	7e7a      	ldrb	r2, [r7, #25]
 8017624:	4937      	ldr	r1, [pc, #220]	; (8017704 <etharp_query+0x294>)
 8017626:	4613      	mov	r3, r2
 8017628:	005b      	lsls	r3, r3, #1
 801762a:	4413      	add	r3, r2
 801762c:	00db      	lsls	r3, r3, #3
 801762e:	440b      	add	r3, r1
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d01a      	beq.n	801766c <etharp_query+0x1fc>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 8017636:	7e7a      	ldrb	r2, [r7, #25]
 8017638:	4932      	ldr	r1, [pc, #200]	; (8017704 <etharp_query+0x294>)
 801763a:	4613      	mov	r3, r2
 801763c:	005b      	lsls	r3, r3, #1
 801763e:	4413      	add	r3, r2
 8017640:	00db      	lsls	r3, r3, #3
 8017642:	440b      	add	r3, r1
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	623b      	str	r3, [r7, #32]
          qlen++;
 8017648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801764a:	3301      	adds	r3, #1
 801764c:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 801764e:	e005      	b.n	801765c <etharp_query+0x1ec>
            r = r->next;
 8017650:	6a3b      	ldr	r3, [r7, #32]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	623b      	str	r3, [r7, #32]
            qlen++;
 8017656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017658:	3301      	adds	r3, #1
 801765a:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 801765c:	6a3b      	ldr	r3, [r7, #32]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d1f5      	bne.n	8017650 <etharp_query+0x1e0>
          }
          r->next = new_entry;
 8017664:	6a3b      	ldr	r3, [r7, #32]
 8017666:	697a      	ldr	r2, [r7, #20]
 8017668:	601a      	str	r2, [r3, #0]
 801766a:	e008      	b.n	801767e <etharp_query+0x20e>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 801766c:	7e7a      	ldrb	r2, [r7, #25]
 801766e:	4925      	ldr	r1, [pc, #148]	; (8017704 <etharp_query+0x294>)
 8017670:	4613      	mov	r3, r2
 8017672:	005b      	lsls	r3, r3, #1
 8017674:	4413      	add	r3, r2
 8017676:	00db      	lsls	r3, r3, #3
 8017678:	440b      	add	r3, r1
 801767a:	697a      	ldr	r2, [r7, #20]
 801767c:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 801767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017680:	2b02      	cmp	r3, #2
 8017682:	d922      	bls.n	80176ca <etharp_query+0x25a>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 8017684:	7e7a      	ldrb	r2, [r7, #25]
 8017686:	491f      	ldr	r1, [pc, #124]	; (8017704 <etharp_query+0x294>)
 8017688:	4613      	mov	r3, r2
 801768a:	005b      	lsls	r3, r3, #1
 801768c:	4413      	add	r3, r2
 801768e:	00db      	lsls	r3, r3, #3
 8017690:	440b      	add	r3, r1
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 8017696:	7e7a      	ldrb	r2, [r7, #25]
 8017698:	491a      	ldr	r1, [pc, #104]	; (8017704 <etharp_query+0x294>)
 801769a:	4613      	mov	r3, r2
 801769c:	005b      	lsls	r3, r3, #1
 801769e:	4413      	add	r3, r2
 80176a0:	00db      	lsls	r3, r3, #3
 80176a2:	440b      	add	r3, r1
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	7e7a      	ldrb	r2, [r7, #25]
 80176a8:	6819      	ldr	r1, [r3, #0]
 80176aa:	4816      	ldr	r0, [pc, #88]	; (8017704 <etharp_query+0x294>)
 80176ac:	4613      	mov	r3, r2
 80176ae:	005b      	lsls	r3, r3, #1
 80176b0:	4413      	add	r3, r2
 80176b2:	00db      	lsls	r3, r3, #3
 80176b4:	4403      	add	r3, r0
 80176b6:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 80176b8:	693b      	ldr	r3, [r7, #16]
 80176ba:	685b      	ldr	r3, [r3, #4]
 80176bc:	4618      	mov	r0, r3
 80176be:	f7f7 fbbd 	bl	800ee3c <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 80176c2:	6939      	ldr	r1, [r7, #16]
 80176c4:	2006      	movs	r0, #6
 80176c6:	f7f6 fedd 	bl	800e484 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, i));
        result = ERR_OK;
 80176ca:	2300      	movs	r3, #0
 80176cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80176d0:	e00f      	b.n	80176f2 <etharp_query+0x282>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 80176d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80176d4:	f7f7 fbb2 	bl	800ee3c <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 80176d8:	23ff      	movs	r3, #255	; 0xff
 80176da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80176de:	e008      	b.n	80176f2 <etharp_query+0x282>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 80176e0:	4b07      	ldr	r3, [pc, #28]	; (8017700 <etharp_query+0x290>)
 80176e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80176e4:	3301      	adds	r3, #1
 80176e6:	b29a      	uxth	r2, r3
 80176e8:	4b05      	ldr	r3, [pc, #20]	; (8017700 <etharp_query+0x290>)
 80176ea:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80176ec:	23ff      	movs	r3, #255	; 0xff
 80176ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
  }
  return result;
 80176f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3738      	adds	r7, #56	; 0x38
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	2000770c 	.word	0x2000770c
 8017704:	2000784c 	.word	0x2000784c
 8017708:	2000793c 	.word	0x2000793c

0801770c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b08a      	sub	sp, #40	; 0x28
 8017710:	af02      	add	r7, sp, #8
 8017712:	60f8      	str	r0, [r7, #12]
 8017714:	60b9      	str	r1, [r7, #8]
 8017716:	607a      	str	r2, [r7, #4]
 8017718:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801771a:	2300      	movs	r3, #0
 801771c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801771e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017722:	211c      	movs	r1, #28
 8017724:	2010      	movs	r0, #16
 8017726:	f7f7 f947 	bl	800e9b8 <pbuf_alloc>
 801772a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801772c:	69bb      	ldr	r3, [r7, #24]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d108      	bne.n	8017744 <etharp_raw+0x38>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 8017732:	4b2d      	ldr	r3, [pc, #180]	; (80177e8 <etharp_raw+0xdc>)
 8017734:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017736:	3301      	adds	r3, #1
 8017738:	b29a      	uxth	r2, r3
 801773a:	4b2b      	ldr	r3, [pc, #172]	; (80177e8 <etharp_raw+0xdc>)
 801773c:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 801773e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017742:	e04c      	b.n	80177de <etharp_raw+0xd2>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017744:	69bb      	ldr	r3, [r7, #24]
 8017746:	685b      	ldr	r3, [r3, #4]
 8017748:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801774a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801774c:	4618      	mov	r0, r3
 801774e:	f7f6 fb7d 	bl	800de4c <lwip_htons>
 8017752:	4603      	mov	r3, r0
 8017754:	461a      	mov	r2, r3
 8017756:	697b      	ldr	r3, [r7, #20]
 8017758:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	3308      	adds	r3, #8
 801775e:	2206      	movs	r2, #6
 8017760:	6839      	ldr	r1, [r7, #0]
 8017762:	4618      	mov	r0, r3
 8017764:	f002 f81d 	bl	80197a2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017768:	697b      	ldr	r3, [r7, #20]
 801776a:	3312      	adds	r3, #18
 801776c:	2206      	movs	r2, #6
 801776e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017770:	4618      	mov	r0, r3
 8017772:	f002 f816 	bl	80197a2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017776:	697b      	ldr	r3, [r7, #20]
 8017778:	330e      	adds	r3, #14
 801777a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801777c:	6812      	ldr	r2, [r2, #0]
 801777e:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017780:	697b      	ldr	r3, [r7, #20]
 8017782:	3318      	adds	r3, #24
 8017784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017786:	6812      	ldr	r2, [r2, #0]
 8017788:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801778a:	697b      	ldr	r3, [r7, #20]
 801778c:	2200      	movs	r2, #0
 801778e:	701a      	strb	r2, [r3, #0]
 8017790:	2200      	movs	r2, #0
 8017792:	f042 0201 	orr.w	r2, r2, #1
 8017796:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	2200      	movs	r2, #0
 801779c:	f042 0208 	orr.w	r2, r2, #8
 80177a0:	709a      	strb	r2, [r3, #2]
 80177a2:	2200      	movs	r2, #0
 80177a4:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80177a6:	697b      	ldr	r3, [r7, #20]
 80177a8:	2206      	movs	r2, #6
 80177aa:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80177ac:	697b      	ldr	r3, [r7, #20]
 80177ae:	2204      	movs	r2, #4
 80177b0:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80177b2:	f640 0306 	movw	r3, #2054	; 0x806
 80177b6:	9300      	str	r3, [sp, #0]
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	68ba      	ldr	r2, [r7, #8]
 80177bc:	69b9      	ldr	r1, [r7, #24]
 80177be:	68f8      	ldr	r0, [r7, #12]
 80177c0:	f001 fc16 	bl	8018ff0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 80177c4:	4b08      	ldr	r3, [pc, #32]	; (80177e8 <etharp_raw+0xdc>)
 80177c6:	8b1b      	ldrh	r3, [r3, #24]
 80177c8:	3301      	adds	r3, #1
 80177ca:	b29a      	uxth	r2, r3
 80177cc:	4b06      	ldr	r3, [pc, #24]	; (80177e8 <etharp_raw+0xdc>)
 80177ce:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 80177d0:	69b8      	ldr	r0, [r7, #24]
 80177d2:	f7f7 fb33 	bl	800ee3c <pbuf_free>
  p = NULL;
 80177d6:	2300      	movs	r3, #0
 80177d8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80177da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80177de:	4618      	mov	r0, r3
 80177e0:	3720      	adds	r7, #32
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}
 80177e6:	bf00      	nop
 80177e8:	2000770c 	.word	0x2000770c

080177ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b088      	sub	sp, #32
 80177f0:	af04      	add	r7, sp, #16
 80177f2:	60f8      	str	r0, [r7, #12]
 80177f4:	60b9      	str	r1, [r7, #8]
 80177f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017808:	2201      	movs	r2, #1
 801780a:	9203      	str	r2, [sp, #12]
 801780c:	68ba      	ldr	r2, [r7, #8]
 801780e:	9202      	str	r2, [sp, #8]
 8017810:	4a06      	ldr	r2, [pc, #24]	; (801782c <etharp_request_dst+0x40>)
 8017812:	9201      	str	r2, [sp, #4]
 8017814:	9300      	str	r3, [sp, #0]
 8017816:	4603      	mov	r3, r0
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	68f8      	ldr	r0, [r7, #12]
 801781c:	f7ff ff76 	bl	801770c <etharp_raw>
 8017820:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017822:	4618      	mov	r0, r3
 8017824:	3710      	adds	r7, #16
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}
 801782a:	bf00      	nop
 801782c:	0801bb4c 	.word	0x0801bb4c

08017830 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b082      	sub	sp, #8
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
 8017838:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801783a:	4a05      	ldr	r2, [pc, #20]	; (8017850 <etharp_request+0x20>)
 801783c:	6839      	ldr	r1, [r7, #0]
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f7ff ffd4 	bl	80177ec <etharp_request_dst>
 8017844:	4603      	mov	r3, r0
}
 8017846:	4618      	mov	r0, r3
 8017848:	3708      	adds	r7, #8
 801784a:	46bd      	mov	sp, r7
 801784c:	bd80      	pop	{r7, pc}
 801784e:	bf00      	nop
 8017850:	0801bb44 	.word	0x0801bb44

08017854 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b08e      	sub	sp, #56	; 0x38
 8017858:	af04      	add	r7, sp, #16
 801785a:	6078      	str	r0, [r7, #4]
 801785c:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801785e:	4ba5      	ldr	r3, [pc, #660]	; (8017af4 <icmp_input+0x2a0>)
 8017860:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017864:	3301      	adds	r3, #1
 8017866:	b29a      	uxth	r2, r3
 8017868:	4ba2      	ldr	r3, [pc, #648]	; (8017af4 <icmp_input+0x2a0>)
 801786a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801786e:	4ba2      	ldr	r3, [pc, #648]	; (8017af8 <icmp_input+0x2a4>)
 8017870:	689b      	ldr	r3, [r3, #8]
 8017872:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017876:	781b      	ldrb	r3, [r3, #0]
 8017878:	f003 030f 	and.w	r3, r3, #15
 801787c:	b2db      	uxtb	r3, r3
 801787e:	009b      	lsls	r3, r3, #2
 8017880:	b2db      	uxtb	r3, r3
 8017882:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017884:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017886:	2b13      	cmp	r3, #19
 8017888:	f240 810b 	bls.w	8017aa2 <icmp_input+0x24e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	895b      	ldrh	r3, [r3, #10]
 8017890:	2b03      	cmp	r3, #3
 8017892:	f240 8108 	bls.w	8017aa6 <icmp_input+0x252>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	685b      	ldr	r3, [r3, #4]
 801789a:	781b      	ldrb	r3, [r3, #0]
 801789c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	685b      	ldr	r3, [r3, #4]
 80178a4:	785b      	ldrb	r3, [r3, #1]
 80178a6:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80178aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	f000 80f0 	beq.w	8017a94 <icmp_input+0x240>
 80178b4:	2b08      	cmp	r3, #8
 80178b6:	f040 80dc 	bne.w	8017a72 <icmp_input+0x21e>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80178ba:	4b90      	ldr	r3, [pc, #576]	; (8017afc <icmp_input+0x2a8>)
 80178bc:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80178be:	4b8e      	ldr	r3, [pc, #568]	; (8017af8 <icmp_input+0x2a4>)
 80178c0:	695b      	ldr	r3, [r3, #20]
 80178c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80178c6:	2be0      	cmp	r3, #224	; 0xe0
 80178c8:	f000 80fc 	beq.w	8017ac4 <icmp_input+0x270>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80178cc:	4b8a      	ldr	r3, [pc, #552]	; (8017af8 <icmp_input+0x2a4>)
 80178ce:	695b      	ldr	r3, [r3, #20]
 80178d0:	4a89      	ldr	r2, [pc, #548]	; (8017af8 <icmp_input+0x2a4>)
 80178d2:	6812      	ldr	r2, [r2, #0]
 80178d4:	4611      	mov	r1, r2
 80178d6:	4618      	mov	r0, r3
 80178d8:	f000 fd40 	bl	801835c <ip4_addr_isbroadcast_u32>
 80178dc:	4603      	mov	r3, r0
 80178de:	2b00      	cmp	r3, #0
 80178e0:	f040 80f2 	bne.w	8017ac8 <icmp_input+0x274>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	891b      	ldrh	r3, [r3, #8]
 80178e8:	2b07      	cmp	r3, #7
 80178ea:	f240 80de 	bls.w	8017aaa <icmp_input+0x256>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f7f6 fcb0 	bl	800e254 <inet_chksum_pbuf>
 80178f4:	4603      	mov	r3, r0
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d00b      	beq.n	8017912 <icmp_input+0xbe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f7f7 fa9e 	bl	800ee3c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 8017900:	4b7c      	ldr	r3, [pc, #496]	; (8017af4 <icmp_input+0x2a0>)
 8017902:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017906:	3301      	adds	r3, #1
 8017908:	b29a      	uxth	r2, r3
 801790a:	4b7a      	ldr	r3, [pc, #488]	; (8017af4 <icmp_input+0x2a0>)
 801790c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017910:	e0ed      	b.n	8017aee <icmp_input+0x29a>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017912:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017914:	3310      	adds	r3, #16
 8017916:	4619      	mov	r1, r3
 8017918:	6878      	ldr	r0, [r7, #4]
 801791a:	f7f7 fa13 	bl	800ed44 <pbuf_add_header>
 801791e:	4603      	mov	r3, r0
 8017920:	2b00      	cmp	r3, #0
 8017922:	d045      	beq.n	80179b0 <icmp_input+0x15c>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	891a      	ldrh	r2, [r3, #8]
 8017928:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801792a:	4413      	add	r3, r2
 801792c:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	891b      	ldrh	r3, [r3, #8]
 8017932:	8b7a      	ldrh	r2, [r7, #26]
 8017934:	429a      	cmp	r2, r3
 8017936:	f0c0 80c9 	bcc.w	8017acc <icmp_input+0x278>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801793a:	8b7b      	ldrh	r3, [r7, #26]
 801793c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017940:	4619      	mov	r1, r3
 8017942:	2010      	movs	r0, #16
 8017944:	f7f7 f838 	bl	800e9b8 <pbuf_alloc>
 8017948:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801794a:	697b      	ldr	r3, [r7, #20]
 801794c:	2b00      	cmp	r3, #0
 801794e:	f000 80bf 	beq.w	8017ad0 <icmp_input+0x27c>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017952:	697b      	ldr	r3, [r7, #20]
 8017954:	895b      	ldrh	r3, [r3, #10]
 8017956:	461a      	mov	r2, r3
 8017958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801795a:	3308      	adds	r3, #8
 801795c:	429a      	cmp	r2, r3
 801795e:	d203      	bcs.n	8017968 <icmp_input+0x114>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017960:	6978      	ldr	r0, [r7, #20]
 8017962:	f7f7 fa6b 	bl	800ee3c <pbuf_free>
          goto icmperr;
 8017966:	e0b6      	b.n	8017ad6 <icmp_input+0x282>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017968:	697b      	ldr	r3, [r7, #20]
 801796a:	685b      	ldr	r3, [r3, #4]
 801796c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801796e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017970:	4618      	mov	r0, r3
 8017972:	f001 ff16 	bl	80197a2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017976:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017978:	4619      	mov	r1, r3
 801797a:	6978      	ldr	r0, [r7, #20]
 801797c:	f7f7 f9f1 	bl	800ed62 <pbuf_remove_header>
 8017980:	4603      	mov	r3, r0
 8017982:	2b00      	cmp	r3, #0
 8017984:	d003      	beq.n	801798e <icmp_input+0x13a>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
          pbuf_free(r);
 8017986:	6978      	ldr	r0, [r7, #20]
 8017988:	f7f7 fa58 	bl	800ee3c <pbuf_free>
          goto icmperr;
 801798c:	e0a3      	b.n	8017ad6 <icmp_input+0x282>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801798e:	6879      	ldr	r1, [r7, #4]
 8017990:	6978      	ldr	r0, [r7, #20]
 8017992:	f7f7 fb0d 	bl	800efb0 <pbuf_copy>
 8017996:	4603      	mov	r3, r0
 8017998:	2b00      	cmp	r3, #0
 801799a:	d003      	beq.n	80179a4 <icmp_input+0x150>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801799c:	6978      	ldr	r0, [r7, #20]
 801799e:	f7f7 fa4d 	bl	800ee3c <pbuf_free>
          goto icmperr;
 80179a2:	e098      	b.n	8017ad6 <icmp_input+0x282>
        }
        /* free the original p */
        pbuf_free(p);
 80179a4:	6878      	ldr	r0, [r7, #4]
 80179a6:	f7f7 fa49 	bl	800ee3c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	607b      	str	r3, [r7, #4]
 80179ae:	e009      	b.n	80179c4 <icmp_input+0x170>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80179b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179b2:	3310      	adds	r3, #16
 80179b4:	4619      	mov	r1, r3
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7f7 f9d3 	bl	800ed62 <pbuf_remove_header>
 80179bc:	4603      	mov	r3, r0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	f040 8088 	bne.w	8017ad4 <icmp_input+0x280>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	685b      	ldr	r3, [r3, #4]
 80179c8:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80179ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179cc:	4619      	mov	r1, r3
 80179ce:	6878      	ldr	r0, [r7, #4]
 80179d0:	f7f7 f9b8 	bl	800ed44 <pbuf_add_header>
 80179d4:	4603      	mov	r3, r0
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d15e      	bne.n	8017a98 <icmp_input+0x244>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80179e0:	69fb      	ldr	r3, [r7, #28]
 80179e2:	681a      	ldr	r2, [r3, #0]
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80179e8:	4b43      	ldr	r3, [pc, #268]	; (8017af8 <icmp_input+0x2a4>)
 80179ea:	691a      	ldr	r2, [r3, #16]
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80179f0:	693b      	ldr	r3, [r7, #16]
 80179f2:	2200      	movs	r2, #0
 80179f4:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80179f6:	693b      	ldr	r3, [r7, #16]
 80179f8:	885b      	ldrh	r3, [r3, #2]
 80179fa:	b29b      	uxth	r3, r3
 80179fc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017a00:	4293      	cmp	r3, r2
 8017a02:	d907      	bls.n	8017a14 <icmp_input+0x1c0>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017a04:	693b      	ldr	r3, [r7, #16]
 8017a06:	885b      	ldrh	r3, [r3, #2]
 8017a08:	b29b      	uxth	r3, r3
 8017a0a:	3309      	adds	r3, #9
 8017a0c:	b29a      	uxth	r2, r3
 8017a0e:	693b      	ldr	r3, [r7, #16]
 8017a10:	805a      	strh	r2, [r3, #2]
 8017a12:	e006      	b.n	8017a22 <icmp_input+0x1ce>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017a14:	693b      	ldr	r3, [r7, #16]
 8017a16:	885b      	ldrh	r3, [r3, #2]
 8017a18:	b29b      	uxth	r3, r3
 8017a1a:	3308      	adds	r3, #8
 8017a1c:	b29a      	uxth	r2, r3
 8017a1e:	693b      	ldr	r3, [r7, #16]
 8017a20:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	22ff      	movs	r2, #255	; 0xff
 8017a26:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	729a      	strb	r2, [r3, #10]
 8017a2e:	2200      	movs	r2, #0
 8017a30:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8017a32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a34:	4619      	mov	r1, r3
 8017a36:	68f8      	ldr	r0, [r7, #12]
 8017a38:	f7f6 fbfa 	bl	800e230 <inet_chksum>
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	461a      	mov	r2, r3
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 8017a44:	4b2b      	ldr	r3, [pc, #172]	; (8017af4 <icmp_input+0x2a0>)
 8017a46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017a4a:	3301      	adds	r3, #1
 8017a4c:	b29a      	uxth	r2, r3
 8017a4e:	4b29      	ldr	r3, [pc, #164]	; (8017af4 <icmp_input+0x2a0>)
 8017a50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	9302      	str	r3, [sp, #8]
 8017a58:	2301      	movs	r3, #1
 8017a5a:	9301      	str	r3, [sp, #4]
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	9300      	str	r3, [sp, #0]
 8017a60:	23ff      	movs	r3, #255	; 0xff
 8017a62:	2200      	movs	r2, #0
 8017a64:	69f9      	ldr	r1, [r7, #28]
 8017a66:	6878      	ldr	r0, [r7, #4]
 8017a68:	f000 fb3e 	bl	80180e8 <ip4_output_if>
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017a70:	e012      	b.n	8017a98 <icmp_input+0x244>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8017a72:	4b20      	ldr	r3, [pc, #128]	; (8017af4 <icmp_input+0x2a0>)
 8017a74:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8017a78:	3301      	adds	r3, #1
 8017a7a:	b29a      	uxth	r2, r3
 8017a7c:	4b1d      	ldr	r3, [pc, #116]	; (8017af4 <icmp_input+0x2a0>)
 8017a7e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8017a82:	4b1c      	ldr	r3, [pc, #112]	; (8017af4 <icmp_input+0x2a0>)
 8017a84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017a88:	3301      	adds	r3, #1
 8017a8a:	b29a      	uxth	r2, r3
 8017a8c:	4b19      	ldr	r3, [pc, #100]	; (8017af4 <icmp_input+0x2a0>)
 8017a8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8017a92:	e002      	b.n	8017a9a <icmp_input+0x246>
      break;
 8017a94:	bf00      	nop
 8017a96:	e000      	b.n	8017a9a <icmp_input+0x246>
      break;
 8017a98:	bf00      	nop
  }
  pbuf_free(p);
 8017a9a:	6878      	ldr	r0, [r7, #4]
 8017a9c:	f7f7 f9ce 	bl	800ee3c <pbuf_free>
  return;
 8017aa0:	e025      	b.n	8017aee <icmp_input+0x29a>
    goto lenerr;
 8017aa2:	bf00      	nop
 8017aa4:	e002      	b.n	8017aac <icmp_input+0x258>
    goto lenerr;
 8017aa6:	bf00      	nop
 8017aa8:	e000      	b.n	8017aac <icmp_input+0x258>
        goto lenerr;
 8017aaa:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017aac:	6878      	ldr	r0, [r7, #4]
 8017aae:	f7f7 f9c5 	bl	800ee3c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8017ab2:	4b10      	ldr	r3, [pc, #64]	; (8017af4 <icmp_input+0x2a0>)
 8017ab4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017ab8:	3301      	adds	r3, #1
 8017aba:	b29a      	uxth	r2, r3
 8017abc:	4b0d      	ldr	r3, [pc, #52]	; (8017af4 <icmp_input+0x2a0>)
 8017abe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017ac2:	e014      	b.n	8017aee <icmp_input+0x29a>
        goto icmperr;
 8017ac4:	bf00      	nop
 8017ac6:	e006      	b.n	8017ad6 <icmp_input+0x282>
        goto icmperr;
 8017ac8:	bf00      	nop
 8017aca:	e004      	b.n	8017ad6 <icmp_input+0x282>
          goto icmperr;
 8017acc:	bf00      	nop
 8017ace:	e002      	b.n	8017ad6 <icmp_input+0x282>
          goto icmperr;
 8017ad0:	bf00      	nop
 8017ad2:	e000      	b.n	8017ad6 <icmp_input+0x282>
          goto icmperr;
 8017ad4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f7f7 f9b0 	bl	800ee3c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8017adc:	4b05      	ldr	r3, [pc, #20]	; (8017af4 <icmp_input+0x2a0>)
 8017ade:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8017ae2:	3301      	adds	r3, #1
 8017ae4:	b29a      	uxth	r2, r3
 8017ae6:	4b03      	ldr	r3, [pc, #12]	; (8017af4 <icmp_input+0x2a0>)
 8017ae8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017aec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017aee:	3728      	adds	r7, #40	; 0x28
 8017af0:	46bd      	mov	sp, r7
 8017af2:	bd80      	pop	{r7, pc}
 8017af4:	2000770c 	.word	0x2000770c
 8017af8:	200076e8 	.word	0x200076e8
 8017afc:	200076fc 	.word	0x200076fc

08017b00 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b082      	sub	sp, #8
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
 8017b08:	460b      	mov	r3, r1
 8017b0a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017b0c:	78fb      	ldrb	r3, [r7, #3]
 8017b0e:	461a      	mov	r2, r3
 8017b10:	2103      	movs	r1, #3
 8017b12:	6878      	ldr	r0, [r7, #4]
 8017b14:	f000 f814 	bl	8017b40 <icmp_send_response>
}
 8017b18:	bf00      	nop
 8017b1a:	3708      	adds	r7, #8
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}

08017b20 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	b082      	sub	sp, #8
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	460b      	mov	r3, r1
 8017b2a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017b2c:	78fb      	ldrb	r3, [r7, #3]
 8017b2e:	461a      	mov	r2, r3
 8017b30:	210b      	movs	r1, #11
 8017b32:	6878      	ldr	r0, [r7, #4]
 8017b34:	f000 f804 	bl	8017b40 <icmp_send_response>
}
 8017b38:	bf00      	nop
 8017b3a:	3708      	adds	r7, #8
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}

08017b40 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b08c      	sub	sp, #48	; 0x30
 8017b44:	af04      	add	r7, sp, #16
 8017b46:	6078      	str	r0, [r7, #4]
 8017b48:	460b      	mov	r3, r1
 8017b4a:	70fb      	strb	r3, [r7, #3]
 8017b4c:	4613      	mov	r3, r2
 8017b4e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017b50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b54:	2124      	movs	r1, #36	; 0x24
 8017b56:	2024      	movs	r0, #36	; 0x24
 8017b58:	f7f6 ff2e 	bl	800e9b8 <pbuf_alloc>
 8017b5c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 8017b5e:	69bb      	ldr	r3, [r7, #24]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d053      	beq.n	8017c0c <icmp_send_response+0xcc>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	685b      	ldr	r3, [r3, #4]
 8017b68:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017b6a:	69bb      	ldr	r3, [r7, #24]
 8017b6c:	685b      	ldr	r3, [r3, #4]
 8017b6e:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8017b70:	693b      	ldr	r3, [r7, #16]
 8017b72:	78fa      	ldrb	r2, [r7, #3]
 8017b74:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	78ba      	ldrb	r2, [r7, #2]
 8017b7a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017b7c:	693b      	ldr	r3, [r7, #16]
 8017b7e:	2200      	movs	r2, #0
 8017b80:	711a      	strb	r2, [r3, #4]
 8017b82:	2200      	movs	r2, #0
 8017b84:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017b86:	693b      	ldr	r3, [r7, #16]
 8017b88:	2200      	movs	r2, #0
 8017b8a:	719a      	strb	r2, [r3, #6]
 8017b8c:	2200      	movs	r2, #0
 8017b8e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017b90:	69bb      	ldr	r3, [r7, #24]
 8017b92:	685b      	ldr	r3, [r3, #4]
 8017b94:	f103 0008 	add.w	r0, r3, #8
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	685b      	ldr	r3, [r3, #4]
 8017b9c:	221c      	movs	r2, #28
 8017b9e:	4619      	mov	r1, r3
 8017ba0:	f001 fdff 	bl	80197a2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	68db      	ldr	r3, [r3, #12]
 8017ba8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017baa:	f107 030c 	add.w	r3, r7, #12
 8017bae:	4618      	mov	r0, r3
 8017bb0:	f000 f832 	bl	8017c18 <ip4_route>
 8017bb4:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 8017bb6:	69fb      	ldr	r3, [r7, #28]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d023      	beq.n	8017c04 <icmp_send_response+0xc4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017bbc:	693b      	ldr	r3, [r7, #16]
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	709a      	strb	r2, [r3, #2]
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017bc6:	69bb      	ldr	r3, [r7, #24]
 8017bc8:	895b      	ldrh	r3, [r3, #10]
 8017bca:	4619      	mov	r1, r3
 8017bcc:	6938      	ldr	r0, [r7, #16]
 8017bce:	f7f6 fb2f 	bl	800e230 <inet_chksum>
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	461a      	mov	r2, r3
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8017bda:	4b0e      	ldr	r3, [pc, #56]	; (8017c14 <icmp_send_response+0xd4>)
 8017bdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017be0:	3301      	adds	r3, #1
 8017be2:	b29a      	uxth	r2, r3
 8017be4:	4b0b      	ldr	r3, [pc, #44]	; (8017c14 <icmp_send_response+0xd4>)
 8017be6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017bea:	f107 020c 	add.w	r2, r7, #12
 8017bee:	69fb      	ldr	r3, [r7, #28]
 8017bf0:	9302      	str	r3, [sp, #8]
 8017bf2:	2301      	movs	r3, #1
 8017bf4:	9301      	str	r3, [sp, #4]
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	9300      	str	r3, [sp, #0]
 8017bfa:	23ff      	movs	r3, #255	; 0xff
 8017bfc:	2100      	movs	r1, #0
 8017bfe:	69b8      	ldr	r0, [r7, #24]
 8017c00:	f000 fa72 	bl	80180e8 <ip4_output_if>
  }
  pbuf_free(q);
 8017c04:	69b8      	ldr	r0, [r7, #24]
 8017c06:	f7f7 f919 	bl	800ee3c <pbuf_free>
 8017c0a:	e000      	b.n	8017c0e <icmp_send_response+0xce>
    return;
 8017c0c:	bf00      	nop
}
 8017c0e:	3720      	adds	r7, #32
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}
 8017c14:	2000770c 	.word	0x2000770c

08017c18 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017c18:	b480      	push	{r7}
 8017c1a:	b085      	sub	sp, #20
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017c20:	4b37      	ldr	r3, [pc, #220]	; (8017d00 <ip4_route+0xe8>)
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	60fb      	str	r3, [r7, #12]
 8017c26:	e036      	b.n	8017c96 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017c2e:	f003 0301 	and.w	r3, r3, #1
 8017c32:	b2db      	uxtb	r3, r3
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d02b      	beq.n	8017c90 <ip4_route+0x78>
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017c3e:	089b      	lsrs	r3, r3, #2
 8017c40:	f003 0301 	and.w	r3, r3, #1
 8017c44:	b2db      	uxtb	r3, r3
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d022      	beq.n	8017c90 <ip4_route+0x78>
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	3304      	adds	r3, #4
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d01d      	beq.n	8017c90 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	681a      	ldr	r2, [r3, #0]
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	3304      	adds	r3, #4
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	405a      	eors	r2, r3
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	3308      	adds	r3, #8
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	4013      	ands	r3, r2
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d101      	bne.n	8017c70 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	e040      	b.n	8017cf2 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017c76:	f003 0302 	and.w	r3, r3, #2
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d108      	bne.n	8017c90 <ip4_route+0x78>
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	681a      	ldr	r2, [r3, #0]
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	330c      	adds	r3, #12
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	429a      	cmp	r2, r3
 8017c8a:	d101      	bne.n	8017c90 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	e030      	b.n	8017cf2 <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	60fb      	str	r3, [r7, #12]
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d1c5      	bne.n	8017c28 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017c9c:	4b19      	ldr	r3, [pc, #100]	; (8017d04 <ip4_route+0xec>)
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d01a      	beq.n	8017cda <ip4_route+0xc2>
 8017ca4:	4b17      	ldr	r3, [pc, #92]	; (8017d04 <ip4_route+0xec>)
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017cac:	f003 0301 	and.w	r3, r3, #1
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d012      	beq.n	8017cda <ip4_route+0xc2>
 8017cb4:	4b13      	ldr	r3, [pc, #76]	; (8017d04 <ip4_route+0xec>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017cbc:	f003 0304 	and.w	r3, r3, #4
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d00a      	beq.n	8017cda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017cc4:	4b0f      	ldr	r3, [pc, #60]	; (8017d04 <ip4_route+0xec>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	3304      	adds	r3, #4
 8017cca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d004      	beq.n	8017cda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	b2db      	uxtb	r3, r3
 8017cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8017cd8:	d109      	bne.n	8017cee <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8017cda:	4b0b      	ldr	r3, [pc, #44]	; (8017d08 <ip4_route+0xf0>)
 8017cdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017ce0:	3301      	adds	r3, #1
 8017ce2:	b29a      	uxth	r2, r3
 8017ce4:	4b08      	ldr	r3, [pc, #32]	; (8017d08 <ip4_route+0xf0>)
 8017ce6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017cea:	2300      	movs	r3, #0
 8017cec:	e001      	b.n	8017cf2 <ip4_route+0xda>
  }

  return netif_default;
 8017cee:	4b05      	ldr	r3, [pc, #20]	; (8017d04 <ip4_route+0xec>)
 8017cf0:	681b      	ldr	r3, [r3, #0]
}
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	3714      	adds	r7, #20
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cfc:	4770      	bx	lr
 8017cfe:	bf00      	nop
 8017d00:	20007700 	.word	0x20007700
 8017d04:	20007704 	.word	0x20007704
 8017d08:	2000770c 	.word	0x2000770c

08017d0c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b082      	sub	sp, #8
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017d1a:	f003 0301 	and.w	r3, r3, #1
 8017d1e:	b2db      	uxtb	r3, r3
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d016      	beq.n	8017d52 <ip4_input_accept+0x46>
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	3304      	adds	r3, #4
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d011      	beq.n	8017d52 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017d2e:	4b0b      	ldr	r3, [pc, #44]	; (8017d5c <ip4_input_accept+0x50>)
 8017d30:	695a      	ldr	r2, [r3, #20]
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	3304      	adds	r3, #4
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	429a      	cmp	r2, r3
 8017d3a:	d008      	beq.n	8017d4e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017d3c:	4b07      	ldr	r3, [pc, #28]	; (8017d5c <ip4_input_accept+0x50>)
 8017d3e:	695b      	ldr	r3, [r3, #20]
 8017d40:	6879      	ldr	r1, [r7, #4]
 8017d42:	4618      	mov	r0, r3
 8017d44:	f000 fb0a 	bl	801835c <ip4_addr_isbroadcast_u32>
 8017d48:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d001      	beq.n	8017d52 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017d4e:	2301      	movs	r3, #1
 8017d50:	e000      	b.n	8017d54 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017d52:	2300      	movs	r3, #0
}
 8017d54:	4618      	mov	r0, r3
 8017d56:	3708      	adds	r7, #8
 8017d58:	46bd      	mov	sp, r7
 8017d5a:	bd80      	pop	{r7, pc}
 8017d5c:	200076e8 	.word	0x200076e8

08017d60 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b088      	sub	sp, #32
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
 8017d68:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017d6a:	2301      	movs	r3, #1
 8017d6c:	613b      	str	r3, [r7, #16]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8017d6e:	4b9e      	ldr	r3, [pc, #632]	; (8017fe8 <ip4_input+0x288>)
 8017d70:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017d74:	3301      	adds	r3, #1
 8017d76:	b29a      	uxth	r2, r3
 8017d78:	4b9b      	ldr	r3, [pc, #620]	; (8017fe8 <ip4_input+0x288>)
 8017d7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	60fb      	str	r3, [r7, #12]
  if (IPH_V(iphdr) != 4) {
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	781b      	ldrb	r3, [r3, #0]
 8017d88:	091b      	lsrs	r3, r3, #4
 8017d8a:	b2db      	uxtb	r3, r3
 8017d8c:	2b04      	cmp	r3, #4
 8017d8e:	d014      	beq.n	8017dba <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017d90:	6878      	ldr	r0, [r7, #4]
 8017d92:	f7f7 f853 	bl	800ee3c <pbuf_free>
    IP_STATS_INC(ip.err);
 8017d96:	4b94      	ldr	r3, [pc, #592]	; (8017fe8 <ip4_input+0x288>)
 8017d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	b29a      	uxth	r2, r3
 8017da0:	4b91      	ldr	r3, [pc, #580]	; (8017fe8 <ip4_input+0x288>)
 8017da2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 8017da6:	4b90      	ldr	r3, [pc, #576]	; (8017fe8 <ip4_input+0x288>)
 8017da8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017dac:	3301      	adds	r3, #1
 8017dae:	b29a      	uxth	r2, r3
 8017db0:	4b8d      	ldr	r3, [pc, #564]	; (8017fe8 <ip4_input+0x288>)
 8017db2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017db6:	2300      	movs	r3, #0
 8017db8:	e18e      	b.n	80180d8 <ip4_input+0x378>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	781b      	ldrb	r3, [r3, #0]
 8017dbe:	f003 030f 	and.w	r3, r3, #15
 8017dc2:	b2db      	uxtb	r3, r3
 8017dc4:	009b      	lsls	r3, r3, #2
 8017dc6:	b2db      	uxtb	r3, r3
 8017dc8:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	885b      	ldrh	r3, [r3, #2]
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f7f6 f83b 	bl	800de4c <lwip_htons>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	82fb      	strh	r3, [r7, #22]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	891b      	ldrh	r3, [r3, #8]
 8017dde:	8afa      	ldrh	r2, [r7, #22]
 8017de0:	429a      	cmp	r2, r3
 8017de2:	d204      	bcs.n	8017dee <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 8017de4:	8afb      	ldrh	r3, [r7, #22]
 8017de6:	4619      	mov	r1, r3
 8017de8:	6878      	ldr	r0, [r7, #4]
 8017dea:	f7f6 fef4 	bl	800ebd6 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	895b      	ldrh	r3, [r3, #10]
 8017df2:	897a      	ldrh	r2, [r7, #10]
 8017df4:	429a      	cmp	r2, r3
 8017df6:	d807      	bhi.n	8017e08 <ip4_input+0xa8>
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	891b      	ldrh	r3, [r3, #8]
 8017dfc:	8afa      	ldrh	r2, [r7, #22]
 8017dfe:	429a      	cmp	r2, r3
 8017e00:	d802      	bhi.n	8017e08 <ip4_input+0xa8>
 8017e02:	897b      	ldrh	r3, [r7, #10]
 8017e04:	2b13      	cmp	r3, #19
 8017e06:	d814      	bhi.n	8017e32 <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017e08:	6878      	ldr	r0, [r7, #4]
 8017e0a:	f7f7 f817 	bl	800ee3c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8017e0e:	4b76      	ldr	r3, [pc, #472]	; (8017fe8 <ip4_input+0x288>)
 8017e10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8017e14:	3301      	adds	r3, #1
 8017e16:	b29a      	uxth	r2, r3
 8017e18:	4b73      	ldr	r3, [pc, #460]	; (8017fe8 <ip4_input+0x288>)
 8017e1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 8017e1e:	4b72      	ldr	r3, [pc, #456]	; (8017fe8 <ip4_input+0x288>)
 8017e20:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017e24:	3301      	adds	r3, #1
 8017e26:	b29a      	uxth	r2, r3
 8017e28:	4b6f      	ldr	r3, [pc, #444]	; (8017fe8 <ip4_input+0x288>)
 8017e2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017e2e:	2300      	movs	r3, #0
 8017e30:	e152      	b.n	80180d8 <ip4_input+0x378>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8017e32:	897b      	ldrh	r3, [r7, #10]
 8017e34:	4619      	mov	r1, r3
 8017e36:	68f8      	ldr	r0, [r7, #12]
 8017e38:	f7f6 f9fa 	bl	800e230 <inet_chksum>
 8017e3c:	4603      	mov	r3, r0
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d014      	beq.n	8017e6c <ip4_input+0x10c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8017e42:	6878      	ldr	r0, [r7, #4]
 8017e44:	f7f6 fffa 	bl	800ee3c <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 8017e48:	4b67      	ldr	r3, [pc, #412]	; (8017fe8 <ip4_input+0x288>)
 8017e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8017e4e:	3301      	adds	r3, #1
 8017e50:	b29a      	uxth	r2, r3
 8017e52:	4b65      	ldr	r3, [pc, #404]	; (8017fe8 <ip4_input+0x288>)
 8017e54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
 8017e58:	4b63      	ldr	r3, [pc, #396]	; (8017fe8 <ip4_input+0x288>)
 8017e5a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017e5e:	3301      	adds	r3, #1
 8017e60:	b29a      	uxth	r2, r3
 8017e62:	4b61      	ldr	r3, [pc, #388]	; (8017fe8 <ip4_input+0x288>)
 8017e64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	e135      	b.n	80180d8 <ip4_input+0x378>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	691b      	ldr	r3, [r3, #16]
 8017e70:	4a5e      	ldr	r2, [pc, #376]	; (8017fec <ip4_input+0x28c>)
 8017e72:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	68db      	ldr	r3, [r3, #12]
 8017e78:	4a5c      	ldr	r2, [pc, #368]	; (8017fec <ip4_input+0x28c>)
 8017e7a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017e7c:	4b5b      	ldr	r3, [pc, #364]	; (8017fec <ip4_input+0x28c>)
 8017e7e:	695b      	ldr	r3, [r3, #20]
 8017e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017e84:	2be0      	cmp	r3, #224	; 0xe0
 8017e86:	d112      	bne.n	8017eae <ip4_input+0x14e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017e88:	683b      	ldr	r3, [r7, #0]
 8017e8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017e8e:	f003 0301 	and.w	r3, r3, #1
 8017e92:	b2db      	uxtb	r3, r3
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d007      	beq.n	8017ea8 <ip4_input+0x148>
 8017e98:	683b      	ldr	r3, [r7, #0]
 8017e9a:	3304      	adds	r3, #4
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d002      	beq.n	8017ea8 <ip4_input+0x148>
      netif = inp;
 8017ea2:	683b      	ldr	r3, [r7, #0]
 8017ea4:	61fb      	str	r3, [r7, #28]
 8017ea6:	e02a      	b.n	8017efe <ip4_input+0x19e>
    } else {
      netif = NULL;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	61fb      	str	r3, [r7, #28]
 8017eac:	e027      	b.n	8017efe <ip4_input+0x19e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017eae:	6838      	ldr	r0, [r7, #0]
 8017eb0:	f7ff ff2c 	bl	8017d0c <ip4_input_accept>
 8017eb4:	4603      	mov	r3, r0
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d002      	beq.n	8017ec0 <ip4_input+0x160>
      netif = inp;
 8017eba:	683b      	ldr	r3, [r7, #0]
 8017ebc:	61fb      	str	r3, [r7, #28]
 8017ebe:	e01e      	b.n	8017efe <ip4_input+0x19e>
    } else {
      netif = NULL;
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017ec4:	4b49      	ldr	r3, [pc, #292]	; (8017fec <ip4_input+0x28c>)
 8017ec6:	695b      	ldr	r3, [r3, #20]
 8017ec8:	b2db      	uxtb	r3, r3
 8017eca:	2b7f      	cmp	r3, #127	; 0x7f
 8017ecc:	d017      	beq.n	8017efe <ip4_input+0x19e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017ece:	4b48      	ldr	r3, [pc, #288]	; (8017ff0 <ip4_input+0x290>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	61fb      	str	r3, [r7, #28]
 8017ed4:	e00e      	b.n	8017ef4 <ip4_input+0x194>
          if (netif == inp) {
 8017ed6:	69fa      	ldr	r2, [r7, #28]
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d006      	beq.n	8017eec <ip4_input+0x18c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017ede:	69f8      	ldr	r0, [r7, #28]
 8017ee0:	f7ff ff14 	bl	8017d0c <ip4_input_accept>
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d108      	bne.n	8017efc <ip4_input+0x19c>
 8017eea:	e000      	b.n	8017eee <ip4_input+0x18e>
            continue;
 8017eec:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017eee:	69fb      	ldr	r3, [r7, #28]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	61fb      	str	r3, [r7, #28]
 8017ef4:	69fb      	ldr	r3, [r7, #28]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d1ed      	bne.n	8017ed6 <ip4_input+0x176>
 8017efa:	e000      	b.n	8017efe <ip4_input+0x19e>
            break;
 8017efc:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d111      	bne.n	8017f28 <ip4_input+0x1c8>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	7a5b      	ldrb	r3, [r3, #9]
 8017f08:	2b11      	cmp	r3, #17
 8017f0a:	d10d      	bne.n	8017f28 <ip4_input+0x1c8>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017f0c:	897b      	ldrh	r3, [r7, #10]
 8017f0e:	68fa      	ldr	r2, [r7, #12]
 8017f10:	4413      	add	r3, r2
 8017f12:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017f14:	69bb      	ldr	r3, [r7, #24]
 8017f16:	885b      	ldrh	r3, [r3, #2]
 8017f18:	b29b      	uxth	r3, r3
 8017f1a:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017f1e:	d103      	bne.n	8017f28 <ip4_input+0x1c8>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8017f24:	2300      	movs	r3, #0
 8017f26:	613b      	str	r3, [r7, #16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017f28:	693b      	ldr	r3, [r7, #16]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d01f      	beq.n	8017f6e <ip4_input+0x20e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017f2e:	4b2f      	ldr	r3, [pc, #188]	; (8017fec <ip4_input+0x28c>)
 8017f30:	691b      	ldr	r3, [r3, #16]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d01b      	beq.n	8017f6e <ip4_input+0x20e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017f36:	4b2d      	ldr	r3, [pc, #180]	; (8017fec <ip4_input+0x28c>)
 8017f38:	691b      	ldr	r3, [r3, #16]
 8017f3a:	6839      	ldr	r1, [r7, #0]
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f000 fa0d 	bl	801835c <ip4_addr_isbroadcast_u32>
 8017f42:	4603      	mov	r3, r0
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d105      	bne.n	8017f54 <ip4_input+0x1f4>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017f48:	4b28      	ldr	r3, [pc, #160]	; (8017fec <ip4_input+0x28c>)
 8017f4a:	691b      	ldr	r3, [r3, #16]
 8017f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017f50:	2be0      	cmp	r3, #224	; 0xe0
 8017f52:	d10c      	bne.n	8017f6e <ip4_input+0x20e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f7f6 ff71 	bl	800ee3c <pbuf_free>
      IP_STATS_INC(ip.drop);
 8017f5a:	4b23      	ldr	r3, [pc, #140]	; (8017fe8 <ip4_input+0x288>)
 8017f5c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017f60:	3301      	adds	r3, #1
 8017f62:	b29a      	uxth	r2, r3
 8017f64:	4b20      	ldr	r3, [pc, #128]	; (8017fe8 <ip4_input+0x288>)
 8017f66:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	e0b4      	b.n	80180d8 <ip4_input+0x378>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017f6e:	69fb      	ldr	r3, [r7, #28]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d10c      	bne.n	8017f8e <ip4_input+0x22e>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 8017f74:	4b1c      	ldr	r3, [pc, #112]	; (8017fe8 <ip4_input+0x288>)
 8017f76:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017f7a:	3301      	adds	r3, #1
 8017f7c:	b29a      	uxth	r2, r3
 8017f7e:	4b1a      	ldr	r3, [pc, #104]	; (8017fe8 <ip4_input+0x288>)
 8017f80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017f84:	6878      	ldr	r0, [r7, #4]
 8017f86:	f7f6 ff59 	bl	800ee3c <pbuf_free>
    return ERR_OK;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	e0a4      	b.n	80180d8 <ip4_input+0x378>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	88db      	ldrh	r3, [r3, #6]
 8017f92:	b29b      	uxth	r3, r3
 8017f94:	461a      	mov	r2, r3
 8017f96:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017f9a:	4013      	ands	r3, r2
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d00b      	beq.n	8017fb8 <ip4_input+0x258>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f000 fc85 	bl	80188b0 <ip4_reass>
 8017fa6:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d101      	bne.n	8017fb2 <ip4_input+0x252>
      return ERR_OK;
 8017fae:	2300      	movs	r3, #0
 8017fb0:	e092      	b.n	80180d8 <ip4_input+0x378>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	685b      	ldr	r3, [r3, #4]
 8017fb6:	60fb      	str	r3, [r7, #12]

#if LWIP_IGMP
  /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
  if ((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
#else
  if (iphdr_hlen > IP_HLEN) {
 8017fb8:	897b      	ldrh	r3, [r7, #10]
 8017fba:	2b14      	cmp	r3, #20
 8017fbc:	d91a      	bls.n	8017ff4 <ip4_input+0x294>
#endif /* LWIP_IGMP */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
    pbuf_free(p);
 8017fbe:	6878      	ldr	r0, [r7, #4]
 8017fc0:	f7f6 ff3c 	bl	800ee3c <pbuf_free>
    IP_STATS_INC(ip.opterr);
 8017fc4:	4b08      	ldr	r3, [pc, #32]	; (8017fe8 <ip4_input+0x288>)
 8017fc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8017fca:	3301      	adds	r3, #1
 8017fcc:	b29a      	uxth	r2, r3
 8017fce:	4b06      	ldr	r3, [pc, #24]	; (8017fe8 <ip4_input+0x288>)
 8017fd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    IP_STATS_INC(ip.drop);
 8017fd4:	4b04      	ldr	r3, [pc, #16]	; (8017fe8 <ip4_input+0x288>)
 8017fd6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017fda:	3301      	adds	r3, #1
 8017fdc:	b29a      	uxth	r2, r3
 8017fde:	4b02      	ldr	r3, [pc, #8]	; (8017fe8 <ip4_input+0x288>)
 8017fe0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    /* unsupported protocol feature */
    MIB2_STATS_INC(mib2.ipinunknownprotos);
    return ERR_OK;
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	e077      	b.n	80180d8 <ip4_input+0x378>
 8017fe8:	2000770c 	.word	0x2000770c
 8017fec:	200076e8 	.word	0x200076e8
 8017ff0:	20007700 	.word	0x20007700
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017ff4:	4a3a      	ldr	r2, [pc, #232]	; (80180e0 <ip4_input+0x380>)
 8017ff6:	69fb      	ldr	r3, [r7, #28]
 8017ff8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017ffa:	4a39      	ldr	r2, [pc, #228]	; (80180e0 <ip4_input+0x380>)
 8017ffc:	683b      	ldr	r3, [r7, #0]
 8017ffe:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018000:	4a37      	ldr	r2, [pc, #220]	; (80180e0 <ip4_input+0x380>)
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	781b      	ldrb	r3, [r3, #0]
 801800a:	f003 030f 	and.w	r3, r3, #15
 801800e:	b2db      	uxtb	r3, r3
 8018010:	009b      	lsls	r3, r3, #2
 8018012:	b2db      	uxtb	r3, r3
 8018014:	b29a      	uxth	r2, r3
 8018016:	4b32      	ldr	r3, [pc, #200]	; (80180e0 <ip4_input+0x380>)
 8018018:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801801a:	897b      	ldrh	r3, [r7, #10]
 801801c:	4619      	mov	r1, r3
 801801e:	6878      	ldr	r0, [r7, #4]
 8018020:	f7f6 fe9f 	bl	800ed62 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	7a5b      	ldrb	r3, [r3, #9]
 8018028:	2b11      	cmp	r3, #17
 801802a:	d006      	beq.n	801803a <ip4_input+0x2da>
 801802c:	2b11      	cmp	r3, #17
 801802e:	dc13      	bgt.n	8018058 <ip4_input+0x2f8>
 8018030:	2b01      	cmp	r3, #1
 8018032:	d00c      	beq.n	801804e <ip4_input+0x2ee>
 8018034:	2b06      	cmp	r3, #6
 8018036:	d005      	beq.n	8018044 <ip4_input+0x2e4>
 8018038:	e00e      	b.n	8018058 <ip4_input+0x2f8>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801803a:	6839      	ldr	r1, [r7, #0]
 801803c:	6878      	ldr	r0, [r7, #4]
 801803e:	f7fc fbc1 	bl	80147c4 <udp_input>
        break;
 8018042:	e036      	b.n	80180b2 <ip4_input+0x352>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018044:	6839      	ldr	r1, [r7, #0]
 8018046:	6878      	ldr	r0, [r7, #4]
 8018048:	f7f8 fc4c 	bl	80108e4 <tcp_input>
        break;
 801804c:	e031      	b.n	80180b2 <ip4_input+0x352>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801804e:	6839      	ldr	r1, [r7, #0]
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f7ff fbff 	bl	8017854 <icmp_input>
        break;
 8018056:	e02c      	b.n	80180b2 <ip4_input+0x352>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018058:	4b21      	ldr	r3, [pc, #132]	; (80180e0 <ip4_input+0x380>)
 801805a:	695b      	ldr	r3, [r3, #20]
 801805c:	69f9      	ldr	r1, [r7, #28]
 801805e:	4618      	mov	r0, r3
 8018060:	f000 f97c 	bl	801835c <ip4_addr_isbroadcast_u32>
 8018064:	4603      	mov	r3, r0
 8018066:	2b00      	cmp	r3, #0
 8018068:	d10f      	bne.n	801808a <ip4_input+0x32a>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801806a:	4b1d      	ldr	r3, [pc, #116]	; (80180e0 <ip4_input+0x380>)
 801806c:	695b      	ldr	r3, [r3, #20]
 801806e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018072:	2be0      	cmp	r3, #224	; 0xe0
 8018074:	d009      	beq.n	801808a <ip4_input+0x32a>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018076:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801807a:	4619      	mov	r1, r3
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7f6 fecb 	bl	800ee18 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018082:	2102      	movs	r1, #2
 8018084:	6878      	ldr	r0, [r7, #4]
 8018086:	f7ff fd3b 	bl	8017b00 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801808a:	4b16      	ldr	r3, [pc, #88]	; (80180e4 <ip4_input+0x384>)
 801808c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8018090:	3301      	adds	r3, #1
 8018092:	b29a      	uxth	r2, r3
 8018094:	4b13      	ldr	r3, [pc, #76]	; (80180e4 <ip4_input+0x384>)
 8018096:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801809a:	4b12      	ldr	r3, [pc, #72]	; (80180e4 <ip4_input+0x384>)
 801809c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80180a0:	3301      	adds	r3, #1
 80180a2:	b29a      	uxth	r2, r3
 80180a4:	4b0f      	ldr	r3, [pc, #60]	; (80180e4 <ip4_input+0x384>)
 80180a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80180aa:	6878      	ldr	r0, [r7, #4]
 80180ac:	f7f6 fec6 	bl	800ee3c <pbuf_free>
        break;
 80180b0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80180b2:	4b0b      	ldr	r3, [pc, #44]	; (80180e0 <ip4_input+0x380>)
 80180b4:	2200      	movs	r2, #0
 80180b6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80180b8:	4b09      	ldr	r3, [pc, #36]	; (80180e0 <ip4_input+0x380>)
 80180ba:	2200      	movs	r2, #0
 80180bc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80180be:	4b08      	ldr	r3, [pc, #32]	; (80180e0 <ip4_input+0x380>)
 80180c0:	2200      	movs	r2, #0
 80180c2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80180c4:	4b06      	ldr	r3, [pc, #24]	; (80180e0 <ip4_input+0x380>)
 80180c6:	2200      	movs	r2, #0
 80180c8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80180ca:	4b05      	ldr	r3, [pc, #20]	; (80180e0 <ip4_input+0x380>)
 80180cc:	2200      	movs	r2, #0
 80180ce:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80180d0:	4b03      	ldr	r3, [pc, #12]	; (80180e0 <ip4_input+0x380>)
 80180d2:	2200      	movs	r2, #0
 80180d4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80180d6:	2300      	movs	r3, #0
}
 80180d8:	4618      	mov	r0, r3
 80180da:	3720      	adds	r7, #32
 80180dc:	46bd      	mov	sp, r7
 80180de:	bd80      	pop	{r7, pc}
 80180e0:	200076e8 	.word	0x200076e8
 80180e4:	2000770c 	.word	0x2000770c

080180e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b08a      	sub	sp, #40	; 0x28
 80180ec:	af04      	add	r7, sp, #16
 80180ee:	60f8      	str	r0, [r7, #12]
 80180f0:	60b9      	str	r1, [r7, #8]
 80180f2:	607a      	str	r2, [r7, #4]
 80180f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80180f6:	68bb      	ldr	r3, [r7, #8]
 80180f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d009      	beq.n	8018114 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d003      	beq.n	801810e <ip4_output_if+0x26>
 8018106:	68bb      	ldr	r3, [r7, #8]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d102      	bne.n	8018114 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018110:	3304      	adds	r3, #4
 8018112:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018114:	78fa      	ldrb	r2, [r7, #3]
 8018116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018118:	9302      	str	r3, [sp, #8]
 801811a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801811e:	9301      	str	r3, [sp, #4]
 8018120:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018124:	9300      	str	r3, [sp, #0]
 8018126:	4613      	mov	r3, r2
 8018128:	687a      	ldr	r2, [r7, #4]
 801812a:	6979      	ldr	r1, [r7, #20]
 801812c:	68f8      	ldr	r0, [r7, #12]
 801812e:	f000 f805 	bl	801813c <ip4_output_if_src>
 8018132:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018134:	4618      	mov	r0, r3
 8018136:	3718      	adds	r7, #24
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}

0801813c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b088      	sub	sp, #32
 8018140:	af00      	add	r7, sp, #0
 8018142:	60f8      	str	r0, [r7, #12]
 8018144:	60b9      	str	r1, [r7, #8]
 8018146:	607a      	str	r2, [r7, #4]
 8018148:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 801814a:	2300      	movs	r3, #0
 801814c:	61fb      	str	r3, [r7, #28]
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	2b00      	cmp	r3, #0
 8018152:	f000 80c1 	beq.w	80182d8 <ip4_output_if_src+0x19c>
    u16_t ip_hlen = IP_HLEN;
 8018156:	2314      	movs	r3, #20
 8018158:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801815a:	2114      	movs	r1, #20
 801815c:	68f8      	ldr	r0, [r7, #12]
 801815e:	f7f6 fdf1 	bl	800ed44 <pbuf_add_header>
 8018162:	4603      	mov	r3, r0
 8018164:	2b00      	cmp	r3, #0
 8018166:	d00a      	beq.n	801817e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 8018168:	4b79      	ldr	r3, [pc, #484]	; (8018350 <ip4_output_if_src+0x214>)
 801816a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801816e:	3301      	adds	r3, #1
 8018170:	b29a      	uxth	r2, r3
 8018172:	4b77      	ldr	r3, [pc, #476]	; (8018350 <ip4_output_if_src+0x214>)
 8018174:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018178:	f06f 0301 	mvn.w	r3, #1
 801817c:	e0e4      	b.n	8018348 <ip4_output_if_src+0x20c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	685b      	ldr	r3, [r3, #4]
 8018182:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018184:	69bb      	ldr	r3, [r7, #24]
 8018186:	78fa      	ldrb	r2, [r7, #3]
 8018188:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801818a:	69bb      	ldr	r3, [r7, #24]
 801818c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018190:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8018192:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018196:	78fb      	ldrb	r3, [r7, #3]
 8018198:	021b      	lsls	r3, r3, #8
 801819a:	4313      	orrs	r3, r2
 801819c:	021b      	lsls	r3, r3, #8
 801819e:	b21a      	sxth	r2, r3
 80181a0:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80181a4:	78fb      	ldrb	r3, [r7, #3]
 80181a6:	021b      	lsls	r3, r3, #8
 80181a8:	430b      	orrs	r3, r1
 80181aa:	121b      	asrs	r3, r3, #8
 80181ac:	b21b      	sxth	r3, r3
 80181ae:	b2db      	uxtb	r3, r3
 80181b0:	b21b      	sxth	r3, r3
 80181b2:	4313      	orrs	r3, r2
 80181b4:	b21b      	sxth	r3, r3
 80181b6:	b29b      	uxth	r3, r3
 80181b8:	461a      	mov	r2, r3
 80181ba:	69fb      	ldr	r3, [r7, #28]
 80181bc:	4413      	add	r3, r2
 80181be:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681a      	ldr	r2, [r3, #0]
 80181c4:	69bb      	ldr	r3, [r7, #24]
 80181c6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80181c8:	69bb      	ldr	r3, [r7, #24]
 80181ca:	691b      	ldr	r3, [r3, #16]
 80181cc:	b29b      	uxth	r3, r3
 80181ce:	69fa      	ldr	r2, [r7, #28]
 80181d0:	4413      	add	r3, r2
 80181d2:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80181d4:	69bb      	ldr	r3, [r7, #24]
 80181d6:	691b      	ldr	r3, [r3, #16]
 80181d8:	0c1b      	lsrs	r3, r3, #16
 80181da:	69fa      	ldr	r2, [r7, #28]
 80181dc:	4413      	add	r3, r2
 80181de:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80181e0:	8afb      	ldrh	r3, [r7, #22]
 80181e2:	089b      	lsrs	r3, r3, #2
 80181e4:	b29b      	uxth	r3, r3
 80181e6:	b2db      	uxtb	r3, r3
 80181e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181ec:	b2da      	uxtb	r2, r3
 80181ee:	69bb      	ldr	r3, [r7, #24]
 80181f0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80181f2:	69bb      	ldr	r3, [r7, #24]
 80181f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80181f8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80181fa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80181fe:	69bb      	ldr	r3, [r7, #24]
 8018200:	781b      	ldrb	r3, [r3, #0]
 8018202:	021b      	lsls	r3, r3, #8
 8018204:	4313      	orrs	r3, r2
 8018206:	021b      	lsls	r3, r3, #8
 8018208:	b21a      	sxth	r2, r3
 801820a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 801820e:	69bb      	ldr	r3, [r7, #24]
 8018210:	781b      	ldrb	r3, [r3, #0]
 8018212:	021b      	lsls	r3, r3, #8
 8018214:	430b      	orrs	r3, r1
 8018216:	121b      	asrs	r3, r3, #8
 8018218:	b21b      	sxth	r3, r3
 801821a:	b2db      	uxtb	r3, r3
 801821c:	b21b      	sxth	r3, r3
 801821e:	4313      	orrs	r3, r2
 8018220:	b21b      	sxth	r3, r3
 8018222:	b29b      	uxth	r3, r3
 8018224:	461a      	mov	r2, r3
 8018226:	69fb      	ldr	r3, [r7, #28]
 8018228:	4413      	add	r3, r2
 801822a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	891b      	ldrh	r3, [r3, #8]
 8018230:	4618      	mov	r0, r3
 8018232:	f7f5 fe0b 	bl	800de4c <lwip_htons>
 8018236:	4603      	mov	r3, r0
 8018238:	461a      	mov	r2, r3
 801823a:	69bb      	ldr	r3, [r7, #24]
 801823c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 801823e:	69bb      	ldr	r3, [r7, #24]
 8018240:	885b      	ldrh	r3, [r3, #2]
 8018242:	b29b      	uxth	r3, r3
 8018244:	461a      	mov	r2, r3
 8018246:	69fb      	ldr	r3, [r7, #28]
 8018248:	4413      	add	r3, r2
 801824a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801824c:	69bb      	ldr	r3, [r7, #24]
 801824e:	2200      	movs	r2, #0
 8018250:	719a      	strb	r2, [r3, #6]
 8018252:	2200      	movs	r2, #0
 8018254:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018256:	4b3f      	ldr	r3, [pc, #252]	; (8018354 <ip4_output_if_src+0x218>)
 8018258:	881b      	ldrh	r3, [r3, #0]
 801825a:	4618      	mov	r0, r3
 801825c:	f7f5 fdf6 	bl	800de4c <lwip_htons>
 8018260:	4603      	mov	r3, r0
 8018262:	461a      	mov	r2, r3
 8018264:	69bb      	ldr	r3, [r7, #24]
 8018266:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8018268:	69bb      	ldr	r3, [r7, #24]
 801826a:	889b      	ldrh	r3, [r3, #4]
 801826c:	b29b      	uxth	r3, r3
 801826e:	461a      	mov	r2, r3
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	4413      	add	r3, r2
 8018274:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018276:	4b37      	ldr	r3, [pc, #220]	; (8018354 <ip4_output_if_src+0x218>)
 8018278:	881b      	ldrh	r3, [r3, #0]
 801827a:	3301      	adds	r3, #1
 801827c:	b29a      	uxth	r2, r3
 801827e:	4b35      	ldr	r3, [pc, #212]	; (8018354 <ip4_output_if_src+0x218>)
 8018280:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018282:	68bb      	ldr	r3, [r7, #8]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d104      	bne.n	8018292 <ip4_output_if_src+0x156>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018288:	4b33      	ldr	r3, [pc, #204]	; (8018358 <ip4_output_if_src+0x21c>)
 801828a:	681a      	ldr	r2, [r3, #0]
 801828c:	69bb      	ldr	r3, [r7, #24]
 801828e:	60da      	str	r2, [r3, #12]
 8018290:	e003      	b.n	801829a <ip4_output_if_src+0x15e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018292:	68bb      	ldr	r3, [r7, #8]
 8018294:	681a      	ldr	r2, [r3, #0]
 8018296:	69bb      	ldr	r3, [r7, #24]
 8018298:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 801829a:	69bb      	ldr	r3, [r7, #24]
 801829c:	68db      	ldr	r3, [r3, #12]
 801829e:	b29b      	uxth	r3, r3
 80182a0:	69fa      	ldr	r2, [r7, #28]
 80182a2:	4413      	add	r3, r2
 80182a4:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 80182a6:	69bb      	ldr	r3, [r7, #24]
 80182a8:	68db      	ldr	r3, [r3, #12]
 80182aa:	0c1b      	lsrs	r3, r3, #16
 80182ac:	69fa      	ldr	r2, [r7, #28]
 80182ae:	4413      	add	r3, r2
 80182b0:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80182b2:	69fb      	ldr	r3, [r7, #28]
 80182b4:	0c1a      	lsrs	r2, r3, #16
 80182b6:	69fb      	ldr	r3, [r7, #28]
 80182b8:	b29b      	uxth	r3, r3
 80182ba:	4413      	add	r3, r2
 80182bc:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 80182be:	69fb      	ldr	r3, [r7, #28]
 80182c0:	0c1b      	lsrs	r3, r3, #16
 80182c2:	69fa      	ldr	r2, [r7, #28]
 80182c4:	4413      	add	r3, r2
 80182c6:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 80182c8:	69fb      	ldr	r3, [r7, #28]
 80182ca:	43db      	mvns	r3, r3
 80182cc:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80182ce:	69fb      	ldr	r3, [r7, #28]
 80182d0:	b29a      	uxth	r2, r3
 80182d2:	69bb      	ldr	r3, [r7, #24]
 80182d4:	815a      	strh	r2, [r3, #10]
 80182d6:	e017      	b.n	8018308 <ip4_output_if_src+0x1cc>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	895b      	ldrh	r3, [r3, #10]
 80182dc:	2b13      	cmp	r3, #19
 80182de:	d80a      	bhi.n	80182f6 <ip4_output_if_src+0x1ba>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 80182e0:	4b1b      	ldr	r3, [pc, #108]	; (8018350 <ip4_output_if_src+0x214>)
 80182e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80182e6:	3301      	adds	r3, #1
 80182e8:	b29a      	uxth	r2, r3
 80182ea:	4b19      	ldr	r3, [pc, #100]	; (8018350 <ip4_output_if_src+0x214>)
 80182ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80182f0:	f06f 0301 	mvn.w	r3, #1
 80182f4:	e028      	b.n	8018348 <ip4_output_if_src+0x20c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	685b      	ldr	r3, [r3, #4]
 80182fa:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80182fc:	69bb      	ldr	r3, [r7, #24]
 80182fe:	691b      	ldr	r3, [r3, #16]
 8018300:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8018302:	f107 0310 	add.w	r3, r7, #16
 8018306:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 8018308:	4b11      	ldr	r3, [pc, #68]	; (8018350 <ip4_output_if_src+0x214>)
 801830a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801830e:	3301      	adds	r3, #1
 8018310:	b29a      	uxth	r2, r3
 8018312:	4b0f      	ldr	r3, [pc, #60]	; (8018350 <ip4_output_if_src+0x214>)
 8018314:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801831a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801831c:	2b00      	cmp	r3, #0
 801831e:	d00c      	beq.n	801833a <ip4_output_if_src+0x1fe>
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	891a      	ldrh	r2, [r3, #8]
 8018324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018328:	429a      	cmp	r2, r3
 801832a:	d906      	bls.n	801833a <ip4_output_if_src+0x1fe>
    return ip4_frag(p, netif, dest);
 801832c:	687a      	ldr	r2, [r7, #4]
 801832e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018330:	68f8      	ldr	r0, [r7, #12]
 8018332:	f000 fc7d 	bl	8018c30 <ip4_frag>
 8018336:	4603      	mov	r3, r0
 8018338:	e006      	b.n	8018348 <ip4_output_if_src+0x20c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801833c:	695b      	ldr	r3, [r3, #20]
 801833e:	687a      	ldr	r2, [r7, #4]
 8018340:	68f9      	ldr	r1, [r7, #12]
 8018342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018344:	4798      	blx	r3
 8018346:	4603      	mov	r3, r0
}
 8018348:	4618      	mov	r0, r3
 801834a:	3720      	adds	r7, #32
 801834c:	46bd      	mov	sp, r7
 801834e:	bd80      	pop	{r7, pc}
 8018350:	2000770c 	.word	0x2000770c
 8018354:	2000793e 	.word	0x2000793e
 8018358:	0801bb3c 	.word	0x0801bb3c

0801835c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801835c:	b480      	push	{r7}
 801835e:	b085      	sub	sp, #20
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
 8018364:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018370:	d002      	beq.n	8018378 <ip4_addr_isbroadcast_u32+0x1c>
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d101      	bne.n	801837c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018378:	2301      	movs	r3, #1
 801837a:	e02a      	b.n	80183d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018382:	f003 0302 	and.w	r3, r3, #2
 8018386:	2b00      	cmp	r3, #0
 8018388:	d101      	bne.n	801838e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801838a:	2300      	movs	r3, #0
 801838c:	e021      	b.n	80183d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801838e:	683b      	ldr	r3, [r7, #0]
 8018390:	3304      	adds	r3, #4
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	687a      	ldr	r2, [r7, #4]
 8018396:	429a      	cmp	r2, r3
 8018398:	d101      	bne.n	801839e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801839a:	2300      	movs	r3, #0
 801839c:	e019      	b.n	80183d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801839e:	68fa      	ldr	r2, [r7, #12]
 80183a0:	683b      	ldr	r3, [r7, #0]
 80183a2:	3304      	adds	r3, #4
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	405a      	eors	r2, r3
 80183a8:	683b      	ldr	r3, [r7, #0]
 80183aa:	3308      	adds	r3, #8
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	4013      	ands	r3, r2
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d10d      	bne.n	80183d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80183b4:	683b      	ldr	r3, [r7, #0]
 80183b6:	3308      	adds	r3, #8
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	43da      	mvns	r2, r3
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	3308      	adds	r3, #8
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80183c8:	429a      	cmp	r2, r3
 80183ca:	d101      	bne.n	80183d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80183cc:	2301      	movs	r3, #1
 80183ce:	e000      	b.n	80183d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80183d0:	2300      	movs	r3, #0
  }
}
 80183d2:	4618      	mov	r0, r3
 80183d4:	3714      	adds	r7, #20
 80183d6:	46bd      	mov	sp, r7
 80183d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183dc:	4770      	bx	lr
	...

080183e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b084      	sub	sp, #16
 80183e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80183e6:	2300      	movs	r3, #0
 80183e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80183ea:	4b12      	ldr	r3, [pc, #72]	; (8018434 <ip_reass_tmr+0x54>)
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80183f0:	e018      	b.n	8018424 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	7fdb      	ldrb	r3, [r3, #31]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d00b      	beq.n	8018412 <ip_reass_tmr+0x32>
      r->timer--;
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	7fdb      	ldrb	r3, [r3, #31]
 80183fe:	3b01      	subs	r3, #1
 8018400:	b2da      	uxtb	r2, r3
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	60fb      	str	r3, [r7, #12]
 8018410:	e008      	b.n	8018424 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801841c:	68b9      	ldr	r1, [r7, #8]
 801841e:	6878      	ldr	r0, [r7, #4]
 8018420:	f000 f80a 	bl	8018438 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d1e3      	bne.n	80183f2 <ip_reass_tmr+0x12>
    }
  }
}
 801842a:	bf00      	nop
 801842c:	bf00      	nop
 801842e:	3710      	adds	r7, #16
 8018430:	46bd      	mov	sp, r7
 8018432:	bd80      	pop	{r7, pc}
 8018434:	20007940 	.word	0x20007940

08018438 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b088      	sub	sp, #32
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018442:	2300      	movs	r3, #0
 8018444:	83fb      	strh	r3, [r7, #30]
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	685b      	ldr	r3, [r3, #4]
 801844a:	685b      	ldr	r3, [r3, #4]
 801844c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801844e:	697b      	ldr	r3, [r7, #20]
 8018450:	889b      	ldrh	r3, [r3, #4]
 8018452:	b29b      	uxth	r3, r3
 8018454:	2b00      	cmp	r3, #0
 8018456:	d11e      	bne.n	8018496 <ip_reass_free_complete_datagram+0x5e>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	685b      	ldr	r3, [r3, #4]
 801845c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801845e:	697b      	ldr	r3, [r7, #20]
 8018460:	681a      	ldr	r2, [r3, #0]
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018466:	69bb      	ldr	r3, [r7, #24]
 8018468:	6858      	ldr	r0, [r3, #4]
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	3308      	adds	r3, #8
 801846e:	2214      	movs	r2, #20
 8018470:	4619      	mov	r1, r3
 8018472:	f001 f996 	bl	80197a2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018476:	2101      	movs	r1, #1
 8018478:	69b8      	ldr	r0, [r7, #24]
 801847a:	f7ff fb51 	bl	8017b20 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801847e:	69b8      	ldr	r0, [r7, #24]
 8018480:	f7f6 fd2f 	bl	800eee2 <pbuf_clen>
 8018484:	4603      	mov	r3, r0
 8018486:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018488:	8bfa      	ldrh	r2, [r7, #30]
 801848a:	8a7b      	ldrh	r3, [r7, #18]
 801848c:	4413      	add	r3, r2
 801848e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018490:	69b8      	ldr	r0, [r7, #24]
 8018492:	f7f6 fcd3 	bl	800ee3c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	685b      	ldr	r3, [r3, #4]
 801849a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801849c:	e013      	b.n	80184c6 <ip_reass_free_complete_datagram+0x8e>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801849e:	69bb      	ldr	r3, [r7, #24]
 80184a0:	685b      	ldr	r3, [r3, #4]
 80184a2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80184a4:	69bb      	ldr	r3, [r7, #24]
 80184a6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80184a8:	697b      	ldr	r3, [r7, #20]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80184ae:	68f8      	ldr	r0, [r7, #12]
 80184b0:	f7f6 fd17 	bl	800eee2 <pbuf_clen>
 80184b4:	4603      	mov	r3, r0
 80184b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80184b8:	8bfa      	ldrh	r2, [r7, #30]
 80184ba:	8a7b      	ldrh	r3, [r7, #18]
 80184bc:	4413      	add	r3, r2
 80184be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80184c0:	68f8      	ldr	r0, [r7, #12]
 80184c2:	f7f6 fcbb 	bl	800ee3c <pbuf_free>
  while (p != NULL) {
 80184c6:	69bb      	ldr	r3, [r7, #24]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d1e8      	bne.n	801849e <ip_reass_free_complete_datagram+0x66>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80184cc:	6839      	ldr	r1, [r7, #0]
 80184ce:	6878      	ldr	r0, [r7, #4]
 80184d0:	f000 f8b2 	bl	8018638 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80184d4:	4b05      	ldr	r3, [pc, #20]	; (80184ec <ip_reass_free_complete_datagram+0xb4>)
 80184d6:	881a      	ldrh	r2, [r3, #0]
 80184d8:	8bfb      	ldrh	r3, [r7, #30]
 80184da:	1ad3      	subs	r3, r2, r3
 80184dc:	b29a      	uxth	r2, r3
 80184de:	4b03      	ldr	r3, [pc, #12]	; (80184ec <ip_reass_free_complete_datagram+0xb4>)
 80184e0:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80184e2:	8bfb      	ldrh	r3, [r7, #30]
}
 80184e4:	4618      	mov	r0, r3
 80184e6:	3720      	adds	r7, #32
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bd80      	pop	{r7, pc}
 80184ec:	20007944 	.word	0x20007944

080184f0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b08a      	sub	sp, #40	; 0x28
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
 80184f8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80184fa:	2300      	movs	r3, #0
 80184fc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80184fe:	2300      	movs	r3, #0
 8018500:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018502:	2300      	movs	r3, #0
 8018504:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018506:	2300      	movs	r3, #0
 8018508:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801850a:	2300      	movs	r3, #0
 801850c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801850e:	4b28      	ldr	r3, [pc, #160]	; (80185b0 <ip_reass_remove_oldest_datagram+0xc0>)
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018514:	e030      	b.n	8018578 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018518:	695a      	ldr	r2, [r3, #20]
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	68db      	ldr	r3, [r3, #12]
 801851e:	429a      	cmp	r2, r3
 8018520:	d10c      	bne.n	801853c <ip_reass_remove_oldest_datagram+0x4c>
 8018522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018524:	699a      	ldr	r2, [r3, #24]
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	691b      	ldr	r3, [r3, #16]
 801852a:	429a      	cmp	r2, r3
 801852c:	d106      	bne.n	801853c <ip_reass_remove_oldest_datagram+0x4c>
 801852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018530:	899a      	ldrh	r2, [r3, #12]
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	889b      	ldrh	r3, [r3, #4]
 8018536:	b29b      	uxth	r3, r3
 8018538:	429a      	cmp	r2, r3
 801853a:	d014      	beq.n	8018566 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801853c:	693b      	ldr	r3, [r7, #16]
 801853e:	3301      	adds	r3, #1
 8018540:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018542:	6a3b      	ldr	r3, [r7, #32]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d104      	bne.n	8018552 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801854a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801854c:	69fb      	ldr	r3, [r7, #28]
 801854e:	61bb      	str	r3, [r7, #24]
 8018550:	e009      	b.n	8018566 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018554:	7fda      	ldrb	r2, [r3, #31]
 8018556:	6a3b      	ldr	r3, [r7, #32]
 8018558:	7fdb      	ldrb	r3, [r3, #31]
 801855a:	429a      	cmp	r2, r3
 801855c:	d803      	bhi.n	8018566 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018560:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018562:	69fb      	ldr	r3, [r7, #28]
 8018564:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d001      	beq.n	8018572 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018570:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801857a:	2b00      	cmp	r3, #0
 801857c:	d1cb      	bne.n	8018516 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801857e:	6a3b      	ldr	r3, [r7, #32]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d008      	beq.n	8018596 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018584:	69b9      	ldr	r1, [r7, #24]
 8018586:	6a38      	ldr	r0, [r7, #32]
 8018588:	f7ff ff56 	bl	8018438 <ip_reass_free_complete_datagram>
 801858c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801858e:	697a      	ldr	r2, [r7, #20]
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	4413      	add	r3, r2
 8018594:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018596:	697a      	ldr	r2, [r7, #20]
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	429a      	cmp	r2, r3
 801859c:	da02      	bge.n	80185a4 <ip_reass_remove_oldest_datagram+0xb4>
 801859e:	693b      	ldr	r3, [r7, #16]
 80185a0:	2b01      	cmp	r3, #1
 80185a2:	dcac      	bgt.n	80184fe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80185a4:	697b      	ldr	r3, [r7, #20]
}
 80185a6:	4618      	mov	r0, r3
 80185a8:	3728      	adds	r7, #40	; 0x28
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	bf00      	nop
 80185b0:	20007940 	.word	0x20007940

080185b4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b084      	sub	sp, #16
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
 80185bc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80185be:	2004      	movs	r0, #4
 80185c0:	f7f5 ff24 	bl	800e40c <memp_malloc>
 80185c4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d116      	bne.n	80185fa <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80185cc:	6839      	ldr	r1, [r7, #0]
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f7ff ff8e 	bl	80184f0 <ip_reass_remove_oldest_datagram>
 80185d4:	4602      	mov	r2, r0
 80185d6:	683b      	ldr	r3, [r7, #0]
 80185d8:	4293      	cmp	r3, r2
 80185da:	dc03      	bgt.n	80185e4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80185dc:	2004      	movs	r0, #4
 80185de:	f7f5 ff15 	bl	800e40c <memp_malloc>
 80185e2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d107      	bne.n	80185fa <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 80185ea:	4b11      	ldr	r3, [pc, #68]	; (8018630 <ip_reass_enqueue_new_datagram+0x7c>)
 80185ec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80185ee:	3301      	adds	r3, #1
 80185f0:	b29a      	uxth	r2, r3
 80185f2:	4b0f      	ldr	r3, [pc, #60]	; (8018630 <ip_reass_enqueue_new_datagram+0x7c>)
 80185f4:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80185f6:	2300      	movs	r3, #0
 80185f8:	e016      	b.n	8018628 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80185fa:	2220      	movs	r2, #32
 80185fc:	2100      	movs	r1, #0
 80185fe:	68f8      	ldr	r0, [r7, #12]
 8018600:	f001 f824 	bl	801964c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	220f      	movs	r2, #15
 8018608:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801860a:	4b0a      	ldr	r3, [pc, #40]	; (8018634 <ip_reass_enqueue_new_datagram+0x80>)
 801860c:	681a      	ldr	r2, [r3, #0]
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018612:	4a08      	ldr	r2, [pc, #32]	; (8018634 <ip_reass_enqueue_new_datagram+0x80>)
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	3308      	adds	r3, #8
 801861c:	2214      	movs	r2, #20
 801861e:	6879      	ldr	r1, [r7, #4]
 8018620:	4618      	mov	r0, r3
 8018622:	f001 f8be 	bl	80197a2 <memcpy>
  return ipr;
 8018626:	68fb      	ldr	r3, [r7, #12]
}
 8018628:	4618      	mov	r0, r3
 801862a:	3710      	adds	r7, #16
 801862c:	46bd      	mov	sp, r7
 801862e:	bd80      	pop	{r7, pc}
 8018630:	2000770c 	.word	0x2000770c
 8018634:	20007940 	.word	0x20007940

08018638 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b082      	sub	sp, #8
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018642:	4b0b      	ldr	r3, [pc, #44]	; (8018670 <ip_reass_dequeue_datagram+0x38>)
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	687a      	ldr	r2, [r7, #4]
 8018648:	429a      	cmp	r2, r3
 801864a:	d104      	bne.n	8018656 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	4a07      	ldr	r2, [pc, #28]	; (8018670 <ip_reass_dequeue_datagram+0x38>)
 8018652:	6013      	str	r3, [r2, #0]
 8018654:	e003      	b.n	801865e <ip_reass_dequeue_datagram+0x26>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	681a      	ldr	r2, [r3, #0]
 801865a:	683b      	ldr	r3, [r7, #0]
 801865c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801865e:	6879      	ldr	r1, [r7, #4]
 8018660:	2004      	movs	r0, #4
 8018662:	f7f5 ff0f 	bl	800e484 <memp_free>
}
 8018666:	bf00      	nop
 8018668:	3708      	adds	r7, #8
 801866a:	46bd      	mov	sp, r7
 801866c:	bd80      	pop	{r7, pc}
 801866e:	bf00      	nop
 8018670:	20007940 	.word	0x20007940

08018674 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b08c      	sub	sp, #48	; 0x30
 8018678:	af00      	add	r7, sp, #0
 801867a:	60f8      	str	r0, [r7, #12]
 801867c:	60b9      	str	r1, [r7, #8]
 801867e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018680:	2300      	movs	r3, #0
 8018682:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018684:	2301      	movs	r3, #1
 8018686:	627b      	str	r3, [r7, #36]	; 0x24

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	685b      	ldr	r3, [r3, #4]
 801868c:	623b      	str	r3, [r7, #32]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801868e:	6a3b      	ldr	r3, [r7, #32]
 8018690:	885b      	ldrh	r3, [r3, #2]
 8018692:	b29b      	uxth	r3, r3
 8018694:	4618      	mov	r0, r3
 8018696:	f7f5 fbd9 	bl	800de4c <lwip_htons>
 801869a:	4603      	mov	r3, r0
 801869c:	83fb      	strh	r3, [r7, #30]
  hlen = IPH_HL_BYTES(fraghdr);
 801869e:	6a3b      	ldr	r3, [r7, #32]
 80186a0:	781b      	ldrb	r3, [r3, #0]
 80186a2:	f003 030f 	and.w	r3, r3, #15
 80186a6:	b2db      	uxtb	r3, r3
 80186a8:	009b      	lsls	r3, r3, #2
 80186aa:	777b      	strb	r3, [r7, #29]
  if (hlen > len) {
 80186ac:	7f7b      	ldrb	r3, [r7, #29]
 80186ae:	b29b      	uxth	r3, r3
 80186b0:	8bfa      	ldrh	r2, [r7, #30]
 80186b2:	429a      	cmp	r2, r3
 80186b4:	d202      	bcs.n	80186bc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80186b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80186ba:	e0f5      	b.n	80188a8 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
  }
  len = (u16_t)(len - hlen);
 80186bc:	7f7b      	ldrb	r3, [r7, #29]
 80186be:	b29b      	uxth	r3, r3
 80186c0:	8bfa      	ldrh	r2, [r7, #30]
 80186c2:	1ad3      	subs	r3, r2, r3
 80186c4:	83fb      	strh	r3, [r7, #30]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80186c6:	6a3b      	ldr	r3, [r7, #32]
 80186c8:	88db      	ldrh	r3, [r3, #6]
 80186ca:	b29b      	uxth	r3, r3
 80186cc:	4618      	mov	r0, r3
 80186ce:	f7f5 fbbd 	bl	800de4c <lwip_htons>
 80186d2:	4603      	mov	r3, r0
 80186d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186d8:	b29b      	uxth	r3, r3
 80186da:	00db      	lsls	r3, r3, #3
 80186dc:	837b      	strh	r3, [r7, #26]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80186de:	68bb      	ldr	r3, [r7, #8]
 80186e0:	685b      	ldr	r3, [r3, #4]
 80186e2:	617b      	str	r3, [r7, #20]
  iprh->next_pbuf = NULL;
 80186e4:	697b      	ldr	r3, [r7, #20]
 80186e6:	2200      	movs	r2, #0
 80186e8:	701a      	strb	r2, [r3, #0]
 80186ea:	2200      	movs	r2, #0
 80186ec:	705a      	strb	r2, [r3, #1]
 80186ee:	2200      	movs	r2, #0
 80186f0:	709a      	strb	r2, [r3, #2]
 80186f2:	2200      	movs	r2, #0
 80186f4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80186f6:	697b      	ldr	r3, [r7, #20]
 80186f8:	8b7a      	ldrh	r2, [r7, #26]
 80186fa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80186fc:	8b7a      	ldrh	r2, [r7, #26]
 80186fe:	8bfb      	ldrh	r3, [r7, #30]
 8018700:	4413      	add	r3, r2
 8018702:	b29a      	uxth	r2, r3
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018708:	697b      	ldr	r3, [r7, #20]
 801870a:	88db      	ldrh	r3, [r3, #6]
 801870c:	b29b      	uxth	r3, r3
 801870e:	8b7a      	ldrh	r2, [r7, #26]
 8018710:	429a      	cmp	r2, r3
 8018712:	d902      	bls.n	801871a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018718:	e0c6      	b.n	80188a8 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	685b      	ldr	r3, [r3, #4]
 801871e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018720:	e068      	b.n	80187f4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018724:	685b      	ldr	r3, [r3, #4]
 8018726:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	889b      	ldrh	r3, [r3, #4]
 801872c:	b29a      	uxth	r2, r3
 801872e:	693b      	ldr	r3, [r7, #16]
 8018730:	889b      	ldrh	r3, [r3, #4]
 8018732:	b29b      	uxth	r3, r3
 8018734:	429a      	cmp	r2, r3
 8018736:	d235      	bcs.n	80187a4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018738:	697b      	ldr	r3, [r7, #20]
 801873a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801873c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018740:	2b00      	cmp	r3, #0
 8018742:	d020      	beq.n	8018786 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018744:	697b      	ldr	r3, [r7, #20]
 8018746:	889b      	ldrh	r3, [r3, #4]
 8018748:	b29a      	uxth	r2, r3
 801874a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801874c:	88db      	ldrh	r3, [r3, #6]
 801874e:	b29b      	uxth	r3, r3
 8018750:	429a      	cmp	r2, r3
 8018752:	d307      	bcc.n	8018764 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018754:	697b      	ldr	r3, [r7, #20]
 8018756:	88db      	ldrh	r3, [r3, #6]
 8018758:	b29a      	uxth	r2, r3
 801875a:	693b      	ldr	r3, [r7, #16]
 801875c:	889b      	ldrh	r3, [r3, #4]
 801875e:	b29b      	uxth	r3, r3
 8018760:	429a      	cmp	r2, r3
 8018762:	d902      	bls.n	801876a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018768:	e09e      	b.n	80188a8 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801876c:	68ba      	ldr	r2, [r7, #8]
 801876e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018772:	88db      	ldrh	r3, [r3, #6]
 8018774:	b29a      	uxth	r2, r3
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	889b      	ldrh	r3, [r3, #4]
 801877a:	b29b      	uxth	r3, r3
 801877c:	429a      	cmp	r2, r3
 801877e:	d03d      	beq.n	80187fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018780:	2300      	movs	r3, #0
 8018782:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018784:	e03a      	b.n	80187fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018786:	697b      	ldr	r3, [r7, #20]
 8018788:	88db      	ldrh	r3, [r3, #6]
 801878a:	b29a      	uxth	r2, r3
 801878c:	693b      	ldr	r3, [r7, #16]
 801878e:	889b      	ldrh	r3, [r3, #4]
 8018790:	b29b      	uxth	r3, r3
 8018792:	429a      	cmp	r2, r3
 8018794:	d902      	bls.n	801879c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801879a:	e085      	b.n	80188a8 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	68ba      	ldr	r2, [r7, #8]
 80187a0:	605a      	str	r2, [r3, #4]
      break;
 80187a2:	e02b      	b.n	80187fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80187a4:	697b      	ldr	r3, [r7, #20]
 80187a6:	889b      	ldrh	r3, [r3, #4]
 80187a8:	b29a      	uxth	r2, r3
 80187aa:	693b      	ldr	r3, [r7, #16]
 80187ac:	889b      	ldrh	r3, [r3, #4]
 80187ae:	b29b      	uxth	r3, r3
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d102      	bne.n	80187ba <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80187b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80187b8:	e076      	b.n	80188a8 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80187ba:	697b      	ldr	r3, [r7, #20]
 80187bc:	889b      	ldrh	r3, [r3, #4]
 80187be:	b29a      	uxth	r2, r3
 80187c0:	693b      	ldr	r3, [r7, #16]
 80187c2:	88db      	ldrh	r3, [r3, #6]
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	429a      	cmp	r2, r3
 80187c8:	d202      	bcs.n	80187d0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80187ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80187ce:	e06b      	b.n	80188a8 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80187d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d009      	beq.n	80187ea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80187d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d8:	88db      	ldrh	r3, [r3, #6]
 80187da:	b29a      	uxth	r2, r3
 80187dc:	693b      	ldr	r3, [r7, #16]
 80187de:	889b      	ldrh	r3, [r3, #4]
 80187e0:	b29b      	uxth	r3, r3
 80187e2:	429a      	cmp	r2, r3
 80187e4:	d001      	beq.n	80187ea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80187e6:	2300      	movs	r3, #0
 80187e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80187ea:	693b      	ldr	r3, [r7, #16]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	62bb      	str	r3, [r7, #40]	; 0x28
    iprh_prev = iprh_tmp;
 80187f0:	693b      	ldr	r3, [r7, #16]
 80187f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (q = ipr->p; q != NULL;) {
 80187f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d193      	bne.n	8018722 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80187fa:	e000      	b.n	80187fe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80187fc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80187fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018800:	2b00      	cmp	r3, #0
 8018802:	d113      	bne.n	801882c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8018804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018806:	2b00      	cmp	r3, #0
 8018808:	d00d      	beq.n	8018826 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801880c:	68ba      	ldr	r2, [r7, #8]
 801880e:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018812:	88db      	ldrh	r3, [r3, #6]
 8018814:	b29a      	uxth	r2, r3
 8018816:	697b      	ldr	r3, [r7, #20]
 8018818:	889b      	ldrh	r3, [r3, #4]
 801881a:	b29b      	uxth	r3, r3
 801881c:	429a      	cmp	r2, r3
 801881e:	d005      	beq.n	801882c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8018820:	2300      	movs	r3, #0
 8018822:	627b      	str	r3, [r7, #36]	; 0x24
 8018824:	e002      	b.n	801882c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	68ba      	ldr	r2, [r7, #8]
 801882a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d105      	bne.n	801883e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	7f9b      	ldrb	r3, [r3, #30]
 8018836:	f003 0301 	and.w	r3, r3, #1
 801883a:	2b00      	cmp	r3, #0
 801883c:	d033      	beq.n	80188a6 <ip_reass_chain_frag_into_datagram_and_validate+0x232>
    /* and had no holes so far */
    if (valid) {
 801883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018840:	2b00      	cmp	r3, #0
 8018842:	d029      	beq.n	8018898 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	685b      	ldr	r3, [r3, #4]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d006      	beq.n	801885a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	685b      	ldr	r3, [r3, #4]
 8018850:	685b      	ldr	r3, [r3, #4]
 8018852:	889b      	ldrh	r3, [r3, #4]
 8018854:	b29b      	uxth	r3, r3
 8018856:	2b00      	cmp	r3, #0
 8018858:	d002      	beq.n	8018860 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801885a:	2300      	movs	r3, #0
 801885c:	627b      	str	r3, [r7, #36]	; 0x24
 801885e:	e01b      	b.n	8018898 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018860:	697b      	ldr	r3, [r7, #20]
 8018862:	62fb      	str	r3, [r7, #44]	; 0x2c
        q = iprh->next_pbuf;
 8018864:	697b      	ldr	r3, [r7, #20]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	62bb      	str	r3, [r7, #40]	; 0x28
        while (q != NULL) {
 801886a:	e012      	b.n	8018892 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper *)q->payload;
 801886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801886e:	685b      	ldr	r3, [r3, #4]
 8018870:	617b      	str	r3, [r7, #20]
          if (iprh_prev->end != iprh->start) {
 8018872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018874:	88db      	ldrh	r3, [r3, #6]
 8018876:	b29a      	uxth	r2, r3
 8018878:	697b      	ldr	r3, [r7, #20]
 801887a:	889b      	ldrh	r3, [r3, #4]
 801887c:	b29b      	uxth	r3, r3
 801887e:	429a      	cmp	r2, r3
 8018880:	d002      	beq.n	8018888 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8018882:	2300      	movs	r3, #0
 8018884:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8018886:	e007      	b.n	8018898 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8018888:	697b      	ldr	r3, [r7, #20]
 801888a:	62fb      	str	r3, [r7, #44]	; 0x2c
          q = iprh->next_pbuf;
 801888c:	697b      	ldr	r3, [r7, #20]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	62bb      	str	r3, [r7, #40]	; 0x28
        while (q != NULL) {
 8018892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018894:	2b00      	cmp	r3, #0
 8018896:	d1e9      	bne.n	801886c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801889a:	2b00      	cmp	r3, #0
 801889c:	bf14      	ite	ne
 801889e:	2301      	movne	r3, #1
 80188a0:	2300      	moveq	r3, #0
 80188a2:	b2db      	uxtb	r3, r3
 80188a4:	e000      	b.n	80188a8 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80188a6:	2300      	movs	r3, #0
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3730      	adds	r7, #48	; 0x30
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}

080188b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b08e      	sub	sp, #56	; 0x38
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 80188b8:	4b94      	ldr	r3, [pc, #592]	; (8018b0c <ip4_reass+0x25c>)
 80188ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80188bc:	3301      	adds	r3, #1
 80188be:	b29a      	uxth	r2, r3
 80188c0:	4b92      	ldr	r3, [pc, #584]	; (8018b0c <ip4_reass+0x25c>)
 80188c2:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	685b      	ldr	r3, [r3, #4]
 80188c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80188ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188cc:	781b      	ldrb	r3, [r3, #0]
 80188ce:	f003 030f 	and.w	r3, r3, #15
 80188d2:	b2db      	uxtb	r3, r3
 80188d4:	009b      	lsls	r3, r3, #2
 80188d6:	b2db      	uxtb	r3, r3
 80188d8:	2b14      	cmp	r3, #20
 80188da:	d008      	beq.n	80188ee <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 80188dc:	4b8b      	ldr	r3, [pc, #556]	; (8018b0c <ip4_reass+0x25c>)
 80188de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80188e2:	3301      	adds	r3, #1
 80188e4:	b29a      	uxth	r2, r3
 80188e6:	4b89      	ldr	r3, [pc, #548]	; (8018b0c <ip4_reass+0x25c>)
 80188e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 80188ec:	e161      	b.n	8018bb2 <ip4_reass+0x302>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80188ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188f0:	88db      	ldrh	r3, [r3, #6]
 80188f2:	b29b      	uxth	r3, r3
 80188f4:	4618      	mov	r0, r3
 80188f6:	f7f5 faa9 	bl	800de4c <lwip_htons>
 80188fa:	4603      	mov	r3, r0
 80188fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018900:	b29b      	uxth	r3, r3
 8018902:	00db      	lsls	r3, r3, #3
 8018904:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018908:	885b      	ldrh	r3, [r3, #2]
 801890a:	b29b      	uxth	r3, r3
 801890c:	4618      	mov	r0, r3
 801890e:	f7f5 fa9d 	bl	800de4c <lwip_htons>
 8018912:	4603      	mov	r3, r0
 8018914:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018918:	781b      	ldrb	r3, [r3, #0]
 801891a:	f003 030f 	and.w	r3, r3, #15
 801891e:	b2db      	uxtb	r3, r3
 8018920:	009b      	lsls	r3, r3, #2
 8018922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801892a:	b29b      	uxth	r3, r3
 801892c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801892e:	429a      	cmp	r2, r3
 8018930:	f0c0 813c 	bcc.w	8018bac <ip4_reass+0x2fc>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018938:	b29b      	uxth	r3, r3
 801893a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801893c:	1ad3      	subs	r3, r2, r3
 801893e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018940:	6878      	ldr	r0, [r7, #4]
 8018942:	f7f6 face 	bl	800eee2 <pbuf_clen>
 8018946:	4603      	mov	r3, r0
 8018948:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801894a:	4b71      	ldr	r3, [pc, #452]	; (8018b10 <ip4_reass+0x260>)
 801894c:	881b      	ldrh	r3, [r3, #0]
 801894e:	461a      	mov	r2, r3
 8018950:	8c3b      	ldrh	r3, [r7, #32]
 8018952:	4413      	add	r3, r2
 8018954:	2b80      	cmp	r3, #128	; 0x80
 8018956:	dd15      	ble.n	8018984 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018958:	8c3b      	ldrh	r3, [r7, #32]
 801895a:	4619      	mov	r1, r3
 801895c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801895e:	f7ff fdc7 	bl	80184f0 <ip_reass_remove_oldest_datagram>
 8018962:	4603      	mov	r3, r0
 8018964:	2b00      	cmp	r3, #0
 8018966:	d006      	beq.n	8018976 <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018968:	4b69      	ldr	r3, [pc, #420]	; (8018b10 <ip4_reass+0x260>)
 801896a:	881b      	ldrh	r3, [r3, #0]
 801896c:	461a      	mov	r2, r3
 801896e:	8c3b      	ldrh	r3, [r7, #32]
 8018970:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018972:	2b80      	cmp	r3, #128	; 0x80
 8018974:	dd06      	ble.n	8018984 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 8018976:	4b65      	ldr	r3, [pc, #404]	; (8018b0c <ip4_reass+0x25c>)
 8018978:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801897a:	3301      	adds	r3, #1
 801897c:	b29a      	uxth	r2, r3
 801897e:	4b63      	ldr	r3, [pc, #396]	; (8018b0c <ip4_reass+0x25c>)
 8018980:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8018982:	e116      	b.n	8018bb2 <ip4_reass+0x302>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018984:	4b63      	ldr	r3, [pc, #396]	; (8018b14 <ip4_reass+0x264>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	633b      	str	r3, [r7, #48]	; 0x30
 801898a:	e01e      	b.n	80189ca <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801898e:	695a      	ldr	r2, [r3, #20]
 8018990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018992:	68db      	ldr	r3, [r3, #12]
 8018994:	429a      	cmp	r2, r3
 8018996:	d115      	bne.n	80189c4 <ip4_reass+0x114>
 8018998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801899a:	699a      	ldr	r2, [r3, #24]
 801899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801899e:	691b      	ldr	r3, [r3, #16]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d10f      	bne.n	80189c4 <ip4_reass+0x114>
 80189a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189a6:	899a      	ldrh	r2, [r3, #12]
 80189a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189aa:	889b      	ldrh	r3, [r3, #4]
 80189ac:	b29b      	uxth	r3, r3
 80189ae:	429a      	cmp	r2, r3
 80189b0:	d108      	bne.n	80189c4 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 80189b2:	4b56      	ldr	r3, [pc, #344]	; (8018b0c <ip4_reass+0x25c>)
 80189b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80189b8:	3301      	adds	r3, #1
 80189ba:	b29a      	uxth	r2, r3
 80189bc:	4b53      	ldr	r3, [pc, #332]	; (8018b0c <ip4_reass+0x25c>)
 80189be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 80189c2:	e005      	b.n	80189d0 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80189c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	633b      	str	r3, [r7, #48]	; 0x30
 80189ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d1dd      	bne.n	801898c <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 80189d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d109      	bne.n	80189ea <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80189d6:	8c3b      	ldrh	r3, [r7, #32]
 80189d8:	4619      	mov	r1, r3
 80189da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189dc:	f7ff fdea 	bl	80185b4 <ip_reass_enqueue_new_datagram>
 80189e0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80189e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d11c      	bne.n	8018a22 <ip4_reass+0x172>
      goto nullreturn;
 80189e8:	e0e3      	b.n	8018bb2 <ip4_reass+0x302>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80189ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ec:	88db      	ldrh	r3, [r3, #6]
 80189ee:	b29b      	uxth	r3, r3
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7f5 fa2b 	bl	800de4c <lwip_htons>
 80189f6:	4603      	mov	r3, r0
 80189f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d110      	bne.n	8018a22 <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a02:	89db      	ldrh	r3, [r3, #14]
 8018a04:	4618      	mov	r0, r3
 8018a06:	f7f5 fa21 	bl	800de4c <lwip_htons>
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d006      	beq.n	8018a22 <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a16:	3308      	adds	r3, #8
 8018a18:	2214      	movs	r2, #20
 8018a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f000 fec0 	bl	80197a2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a24:	88db      	ldrh	r3, [r3, #6]
 8018a26:	b29b      	uxth	r3, r3
 8018a28:	f003 0320 	and.w	r3, r3, #32
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	bf0c      	ite	eq
 8018a30:	2301      	moveq	r3, #1
 8018a32:	2300      	movne	r3, #0
 8018a34:	b2db      	uxtb	r3, r3
 8018a36:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018a38:	69fb      	ldr	r3, [r7, #28]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d00e      	beq.n	8018a5c <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 8018a3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a42:	4413      	add	r3, r2
 8018a44:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018a46:	8b7a      	ldrh	r2, [r7, #26]
 8018a48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018a4a:	429a      	cmp	r2, r3
 8018a4c:	f0c0 80a2 	bcc.w	8018b94 <ip4_reass+0x2e4>
 8018a50:	8b7b      	ldrh	r3, [r7, #26]
 8018a52:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018a56:	4293      	cmp	r3, r2
 8018a58:	f200 809c 	bhi.w	8018b94 <ip4_reass+0x2e4>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018a5c:	69fa      	ldr	r2, [r7, #28]
 8018a5e:	6879      	ldr	r1, [r7, #4]
 8018a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a62:	f7ff fe07 	bl	8018674 <ip_reass_chain_frag_into_datagram_and_validate>
 8018a66:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018a68:	697b      	ldr	r3, [r7, #20]
 8018a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018a6e:	f000 8093 	beq.w	8018b98 <ip4_reass+0x2e8>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018a72:	4b27      	ldr	r3, [pc, #156]	; (8018b10 <ip4_reass+0x260>)
 8018a74:	881a      	ldrh	r2, [r3, #0]
 8018a76:	8c3b      	ldrh	r3, [r7, #32]
 8018a78:	4413      	add	r3, r2
 8018a7a:	b29a      	uxth	r2, r3
 8018a7c:	4b24      	ldr	r3, [pc, #144]	; (8018b10 <ip4_reass+0x260>)
 8018a7e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018a80:	69fb      	ldr	r3, [r7, #28]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d00d      	beq.n	8018aa2 <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 8018a86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a8a:	4413      	add	r3, r2
 8018a8c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a90:	8a7a      	ldrh	r2, [r7, #18]
 8018a92:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a96:	7f9b      	ldrb	r3, [r3, #30]
 8018a98:	f043 0301 	orr.w	r3, r3, #1
 8018a9c:	b2da      	uxtb	r2, r3
 8018a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018aa2:	697b      	ldr	r3, [r7, #20]
 8018aa4:	2b01      	cmp	r3, #1
 8018aa6:	d173      	bne.n	8018b90 <ip4_reass+0x2e0>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aaa:	8b9b      	ldrh	r3, [r3, #28]
 8018aac:	3314      	adds	r3, #20
 8018aae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ab2:	685b      	ldr	r3, [r3, #4]
 8018ab4:	685b      	ldr	r3, [r3, #4]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018abc:	685b      	ldr	r3, [r3, #4]
 8018abe:	685b      	ldr	r3, [r3, #4]
 8018ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ac4:	3308      	adds	r3, #8
 8018ac6:	2214      	movs	r2, #20
 8018ac8:	4619      	mov	r1, r3
 8018aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018acc:	f000 fe69 	bl	80197a2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018ad0:	8a3b      	ldrh	r3, [r7, #16]
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f7f5 f9ba 	bl	800de4c <lwip_htons>
 8018ad8:	4603      	mov	r3, r0
 8018ada:	461a      	mov	r2, r3
 8018adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ade:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	719a      	strb	r2, [r3, #6]
 8018ae6:	2200      	movs	r2, #0
 8018ae8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aec:	2200      	movs	r2, #0
 8018aee:	729a      	strb	r2, [r3, #10]
 8018af0:	2200      	movs	r2, #0
 8018af2:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8018af4:	2114      	movs	r1, #20
 8018af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018af8:	f7f5 fb9a 	bl	800e230 <inet_chksum>
 8018afc:	4603      	mov	r3, r0
 8018afe:	461a      	mov	r2, r3
 8018b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b02:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b06:	685b      	ldr	r3, [r3, #4]
 8018b08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018b0a:	e013      	b.n	8018b34 <ip4_reass+0x284>
 8018b0c:	2000770c 	.word	0x2000770c
 8018b10:	20007944 	.word	0x20007944
 8018b14:	20007940 	.word	0x20007940
      iprh = (struct ip_reass_helper *)r->payload;
 8018b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b1a:	685b      	ldr	r3, [r3, #4]
 8018b1c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018b1e:	2114      	movs	r1, #20
 8018b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018b22:	f7f6 f91e 	bl	800ed62 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f7f6 fa04 	bl	800ef36 <pbuf_cat>
      r = iprh->next_pbuf;
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 8018b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d1ee      	bne.n	8018b18 <ip4_reass+0x268>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018b3a:	4b25      	ldr	r3, [pc, #148]	; (8018bd0 <ip4_reass+0x320>)
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b40:	429a      	cmp	r2, r3
 8018b42:	d102      	bne.n	8018b4a <ip4_reass+0x29a>
      ipr_prev = NULL;
 8018b44:	2300      	movs	r3, #0
 8018b46:	637b      	str	r3, [r7, #52]	; 0x34
 8018b48:	e010      	b.n	8018b6c <ip4_reass+0x2bc>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018b4a:	4b21      	ldr	r3, [pc, #132]	; (8018bd0 <ip4_reass+0x320>)
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8018b50:	e007      	b.n	8018b62 <ip4_reass+0x2b2>
        if (ipr_prev->next == ipr) {
 8018b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	d006      	beq.n	8018b6a <ip4_reass+0x2ba>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	637b      	str	r3, [r7, #52]	; 0x34
 8018b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d1f4      	bne.n	8018b52 <ip4_reass+0x2a2>
 8018b68:	e000      	b.n	8018b6c <ip4_reass+0x2bc>
          break;
 8018b6a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018b6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b70:	f7ff fd62 	bl	8018638 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018b74:	6878      	ldr	r0, [r7, #4]
 8018b76:	f7f6 f9b4 	bl	800eee2 <pbuf_clen>
 8018b7a:	4603      	mov	r3, r0
 8018b7c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018b7e:	4b15      	ldr	r3, [pc, #84]	; (8018bd4 <ip4_reass+0x324>)
 8018b80:	881a      	ldrh	r2, [r3, #0]
 8018b82:	8c3b      	ldrh	r3, [r7, #32]
 8018b84:	1ad3      	subs	r3, r2, r3
 8018b86:	b29a      	uxth	r2, r3
 8018b88:	4b12      	ldr	r3, [pc, #72]	; (8018bd4 <ip4_reass+0x324>)
 8018b8a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	e01a      	b.n	8018bc6 <ip4_reass+0x316>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018b90:	2300      	movs	r3, #0
 8018b92:	e018      	b.n	8018bc6 <ip4_reass+0x316>
      goto nullreturn_ipr;
 8018b94:	bf00      	nop
 8018b96:	e000      	b.n	8018b9a <ip4_reass+0x2ea>
    goto nullreturn_ipr;
 8018b98:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
  if (ipr->p == NULL) {
 8018b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b9c:	685b      	ldr	r3, [r3, #4]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d106      	bne.n	8018bb0 <ip4_reass+0x300>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
    ip_reass_dequeue_datagram(ipr, NULL);
 8018ba2:	2100      	movs	r1, #0
 8018ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ba6:	f7ff fd47 	bl	8018638 <ip_reass_dequeue_datagram>
 8018baa:	e002      	b.n	8018bb2 <ip4_reass+0x302>
    goto nullreturn;
 8018bac:	bf00      	nop
 8018bae:	e000      	b.n	8018bb2 <ip4_reass+0x302>
  }

nullreturn:
 8018bb0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8018bb2:	4b09      	ldr	r3, [pc, #36]	; (8018bd8 <ip4_reass+0x328>)
 8018bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8018bb6:	3301      	adds	r3, #1
 8018bb8:	b29a      	uxth	r2, r3
 8018bba:	4b07      	ldr	r3, [pc, #28]	; (8018bd8 <ip4_reass+0x328>)
 8018bbc:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 8018bbe:	6878      	ldr	r0, [r7, #4]
 8018bc0:	f7f6 f93c 	bl	800ee3c <pbuf_free>
  return NULL;
 8018bc4:	2300      	movs	r3, #0
}
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	3738      	adds	r7, #56	; 0x38
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	bd80      	pop	{r7, pc}
 8018bce:	bf00      	nop
 8018bd0:	20007940 	.word	0x20007940
 8018bd4:	20007944 	.word	0x20007944
 8018bd8:	2000770c 	.word	0x2000770c

08018bdc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018be0:	2005      	movs	r0, #5
 8018be2:	f7f5 fc13 	bl	800e40c <memp_malloc>
 8018be6:	4603      	mov	r3, r0
}
 8018be8:	4618      	mov	r0, r3
 8018bea:	bd80      	pop	{r7, pc}

08018bec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b082      	sub	sp, #8
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 8018bf4:	6879      	ldr	r1, [r7, #4]
 8018bf6:	2005      	movs	r0, #5
 8018bf8:	f7f5 fc44 	bl	800e484 <memp_free>
}
 8018bfc:	bf00      	nop
 8018bfe:	3708      	adds	r7, #8
 8018c00:	46bd      	mov	sp, r7
 8018c02:	bd80      	pop	{r7, pc}

08018c04 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b084      	sub	sp, #16
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	695b      	ldr	r3, [r3, #20]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d004      	beq.n	8018c22 <ipfrag_free_pbuf_custom+0x1e>
    pbuf_free(pcr->original);
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	695b      	ldr	r3, [r3, #20]
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	f7f6 f90d 	bl	800ee3c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018c22:	68f8      	ldr	r0, [r7, #12]
 8018c24:	f7ff ffe2 	bl	8018bec <ip_frag_free_pbuf_custom_ref>
}
 8018c28:	bf00      	nop
 8018c2a:	3710      	adds	r7, #16
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	bd80      	pop	{r7, pc}

08018c30 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	b094      	sub	sp, #80	; 0x50
 8018c34:	af02      	add	r7, sp, #8
 8018c36:	60f8      	str	r0, [r7, #12]
 8018c38:	60b9      	str	r1, [r7, #8]
 8018c3a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018c42:	68bb      	ldr	r3, [r7, #8]
 8018c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c46:	3b14      	subs	r3, #20
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	da00      	bge.n	8018c4e <ip4_frag+0x1e>
 8018c4c:	3307      	adds	r3, #7
 8018c4e:	10db      	asrs	r3, r3, #3
 8018c50:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018c52:	2314      	movs	r3, #20
 8018c54:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	685b      	ldr	r3, [r3, #4]
 8018c5a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c62:	781b      	ldrb	r3, [r3, #0]
 8018c64:	f003 030f 	and.w	r3, r3, #15
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	009b      	lsls	r3, r3, #2
 8018c6c:	b2db      	uxtb	r3, r3
 8018c6e:	2b14      	cmp	r3, #20
 8018c70:	d002      	beq.n	8018c78 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018c72:	f06f 0305 	mvn.w	r3, #5
 8018c76:	e100      	b.n	8018e7a <ip4_frag+0x24a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	895b      	ldrh	r3, [r3, #10]
 8018c7c:	2b13      	cmp	r3, #19
 8018c7e:	d802      	bhi.n	8018c86 <ip4_frag+0x56>
 8018c80:	f06f 0305 	mvn.w	r3, #5
 8018c84:	e0f9      	b.n	8018e7a <ip4_frag+0x24a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c88:	88db      	ldrh	r3, [r3, #6]
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f7f5 f8dd 	bl	800de4c <lwip_htons>
 8018c92:	4603      	mov	r3, r0
 8018c94:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018c96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018ca0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	891b      	ldrh	r3, [r3, #8]
 8018cac:	3b14      	subs	r3, #20
 8018cae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018cb2:	e0d8      	b.n	8018e66 <ip4_frag+0x236>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018cb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018cb6:	00db      	lsls	r3, r3, #3
 8018cb8:	b29b      	uxth	r3, r3
 8018cba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018cbe:	4293      	cmp	r3, r2
 8018cc0:	bf28      	it	cs
 8018cc2:	4613      	movcs	r3, r2
 8018cc4:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018cc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018cca:	2114      	movs	r1, #20
 8018ccc:	2010      	movs	r0, #16
 8018cce:	f7f5 fe73 	bl	800e9b8 <pbuf_alloc>
 8018cd2:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	f000 80cc 	beq.w	8018e74 <ip4_frag+0x244>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cde:	685b      	ldr	r3, [r3, #4]
 8018ce0:	2214      	movs	r2, #20
 8018ce2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f000 fd5c 	bl	80197a2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cec:	685b      	ldr	r3, [r3, #4]
 8018cee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018cf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018cf2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018cf6:	e058      	b.n	8018daa <ip4_frag+0x17a>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	895a      	ldrh	r2, [r3, #10]
 8018cfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018cfe:	1ad3      	subs	r3, r2, r3
 8018d00:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018d02:	8bfa      	ldrh	r2, [r7, #30]
 8018d04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018d08:	4293      	cmp	r3, r2
 8018d0a:	bf28      	it	cs
 8018d0c:	4613      	movcs	r3, r2
 8018d0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018d12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d105      	bne.n	8018d26 <ip4_frag+0xf6>
        poff = 0;
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	60fb      	str	r3, [r7, #12]
        continue;
 8018d24:	e041      	b.n	8018daa <ip4_frag+0x17a>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018d26:	f7ff ff59 	bl	8018bdc <ip_frag_alloc_pbuf_custom_ref>
 8018d2a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018d2c:	69bb      	ldr	r3, [r7, #24]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d103      	bne.n	8018d3a <ip4_frag+0x10a>
        pbuf_free(rambuf);
 8018d32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d34:	f7f6 f882 	bl	800ee3c <pbuf_free>
        goto memerr;
 8018d38:	e09d      	b.n	8018e76 <ip4_frag+0x246>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018d3a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018d40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d42:	4413      	add	r3, r2
 8018d44:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018d48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018d4c:	9201      	str	r2, [sp, #4]
 8018d4e:	9300      	str	r3, [sp, #0]
 8018d50:	4603      	mov	r3, r0
 8018d52:	2241      	movs	r2, #65	; 0x41
 8018d54:	2000      	movs	r0, #0
 8018d56:	f7f5 ff0a 	bl	800eb6e <pbuf_alloced_custom>
 8018d5a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018d5c:	697b      	ldr	r3, [r7, #20]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d106      	bne.n	8018d70 <ip4_frag+0x140>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018d62:	69b8      	ldr	r0, [r7, #24]
 8018d64:	f7ff ff42 	bl	8018bec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018d68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d6a:	f7f6 f867 	bl	800ee3c <pbuf_free>
        goto memerr;
 8018d6e:	e082      	b.n	8018e76 <ip4_frag+0x246>
      }
      pbuf_ref(p);
 8018d70:	68f8      	ldr	r0, [r7, #12]
 8018d72:	f7f6 f8cd 	bl	800ef10 <pbuf_ref>
      pcr->original = p;
 8018d76:	69bb      	ldr	r3, [r7, #24]
 8018d78:	68fa      	ldr	r2, [r7, #12]
 8018d7a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018d7c:	69bb      	ldr	r3, [r7, #24]
 8018d7e:	4a41      	ldr	r2, [pc, #260]	; (8018e84 <ip4_frag+0x254>)
 8018d80:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018d82:	6979      	ldr	r1, [r7, #20]
 8018d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018d86:	f7f6 f8d6 	bl	800ef36 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018d8a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018d8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018d92:	1ad3      	subs	r3, r2, r3
 8018d94:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018d98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d004      	beq.n	8018daa <ip4_frag+0x17a>
        poff = 0;
 8018da0:	2300      	movs	r3, #0
 8018da2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018daa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d1a2      	bne.n	8018cf8 <ip4_frag+0xc8>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018db2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018db4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018db8:	4413      	add	r3, r2
 8018dba:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018dbc:	68bb      	ldr	r3, [r7, #8]
 8018dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018dc0:	f1a3 0213 	sub.w	r2, r3, #19
 8018dc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018dc8:	429a      	cmp	r2, r3
 8018dca:	bfcc      	ite	gt
 8018dcc:	2301      	movgt	r3, #1
 8018dce:	2300      	movle	r3, #0
 8018dd0:	b2db      	uxtb	r3, r3
 8018dd2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018dd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ddc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018dde:	6a3b      	ldr	r3, [r7, #32]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d002      	beq.n	8018dea <ip4_frag+0x1ba>
 8018de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d003      	beq.n	8018df2 <ip4_frag+0x1c2>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018dea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018dec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018df0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018df2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018df4:	4618      	mov	r0, r3
 8018df6:	f7f5 f829 	bl	800de4c <lwip_htons>
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	461a      	mov	r2, r3
 8018dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e00:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018e02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018e04:	3314      	adds	r3, #20
 8018e06:	b29b      	uxth	r3, r3
 8018e08:	4618      	mov	r0, r3
 8018e0a:	f7f5 f81f 	bl	800de4c <lwip_htons>
 8018e0e:	4603      	mov	r3, r0
 8018e10:	461a      	mov	r2, r3
 8018e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e14:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e18:	2200      	movs	r2, #0
 8018e1a:	729a      	strb	r2, [r3, #10]
 8018e1c:	2200      	movs	r2, #0
 8018e1e:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8018e20:	2114      	movs	r1, #20
 8018e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e24:	f7f5 fa04 	bl	800e230 <inet_chksum>
 8018e28:	4603      	mov	r3, r0
 8018e2a:	461a      	mov	r2, r3
 8018e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e2e:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018e30:	68bb      	ldr	r3, [r7, #8]
 8018e32:	695b      	ldr	r3, [r3, #20]
 8018e34:	687a      	ldr	r2, [r7, #4]
 8018e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018e38:	68b8      	ldr	r0, [r7, #8]
 8018e3a:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8018e3c:	4b12      	ldr	r3, [pc, #72]	; (8018e88 <ip4_frag+0x258>)
 8018e3e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8018e40:	3301      	adds	r3, #1
 8018e42:	b29a      	uxth	r2, r3
 8018e44:	4b10      	ldr	r3, [pc, #64]	; (8018e88 <ip4_frag+0x258>)
 8018e46:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e4a:	f7f5 fff7 	bl	800ee3c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018e4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018e52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018e54:	1ad3      	subs	r3, r2, r3
 8018e56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018e5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018e5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018e60:	4413      	add	r3, r2
 8018e62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018e66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	f47f af22 	bne.w	8018cb4 <ip4_frag+0x84>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018e70:	2300      	movs	r3, #0
 8018e72:	e002      	b.n	8018e7a <ip4_frag+0x24a>
      goto memerr;
 8018e74:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	3748      	adds	r7, #72	; 0x48
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}
 8018e82:	bf00      	nop
 8018e84:	08018c05 	.word	0x08018c05
 8018e88:	2000770c 	.word	0x2000770c

08018e8c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b086      	sub	sp, #24
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
 8018e94:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018e96:	230e      	movs	r3, #14
 8018e98:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	895b      	ldrh	r3, [r3, #10]
 8018e9e:	2b0e      	cmp	r3, #14
 8018ea0:	d80c      	bhi.n	8018ebc <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 8018ea2:	4b51      	ldr	r3, [pc, #324]	; (8018fe8 <ethernet_input+0x15c>)
 8018ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018ea6:	3301      	adds	r3, #1
 8018ea8:	b29a      	uxth	r2, r3
 8018eaa:	4b4f      	ldr	r3, [pc, #316]	; (8018fe8 <ethernet_input+0x15c>)
 8018eac:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8018eae:	4b4e      	ldr	r3, [pc, #312]	; (8018fe8 <ethernet_input+0x15c>)
 8018eb0:	8bdb      	ldrh	r3, [r3, #30]
 8018eb2:	3301      	adds	r3, #1
 8018eb4:	b29a      	uxth	r2, r3
 8018eb6:	4b4c      	ldr	r3, [pc, #304]	; (8018fe8 <ethernet_input+0x15c>)
 8018eb8:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 8018eba:	e08d      	b.n	8018fd8 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	7bdb      	ldrb	r3, [r3, #15]
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d106      	bne.n	8018ed2 <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 8018ec4:	683b      	ldr	r3, [r7, #0]
 8018ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018eca:	3301      	adds	r3, #1
 8018ecc:	b2da      	uxtb	r2, r3
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	685b      	ldr	r3, [r3, #4]
 8018ed6:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018ed8:	693b      	ldr	r3, [r7, #16]
 8018eda:	7b1a      	ldrb	r2, [r3, #12]
 8018edc:	7b5b      	ldrb	r3, [r3, #13]
 8018ede:	021b      	lsls	r3, r3, #8
 8018ee0:	4313      	orrs	r3, r2
 8018ee2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018ee4:	693b      	ldr	r3, [r7, #16]
 8018ee6:	781b      	ldrb	r3, [r3, #0]
 8018ee8:	f003 0301 	and.w	r3, r3, #1
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d023      	beq.n	8018f38 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018ef0:	693b      	ldr	r3, [r7, #16]
 8018ef2:	781b      	ldrb	r3, [r3, #0]
 8018ef4:	2b01      	cmp	r3, #1
 8018ef6:	d10f      	bne.n	8018f18 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018ef8:	693b      	ldr	r3, [r7, #16]
 8018efa:	785b      	ldrb	r3, [r3, #1]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d11b      	bne.n	8018f38 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018f00:	693b      	ldr	r3, [r7, #16]
 8018f02:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018f04:	2b5e      	cmp	r3, #94	; 0x5e
 8018f06:	d117      	bne.n	8018f38 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	7b5b      	ldrb	r3, [r3, #13]
 8018f0c:	f043 0310 	orr.w	r3, r3, #16
 8018f10:	b2da      	uxtb	r2, r3
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	735a      	strb	r2, [r3, #13]
 8018f16:	e00f      	b.n	8018f38 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018f18:	693b      	ldr	r3, [r7, #16]
 8018f1a:	2206      	movs	r2, #6
 8018f1c:	4933      	ldr	r1, [pc, #204]	; (8018fec <ethernet_input+0x160>)
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f000 fb6a 	bl	80195f8 <memcmp>
 8018f24:	4603      	mov	r3, r0
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d106      	bne.n	8018f38 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	7b5b      	ldrb	r3, [r3, #13]
 8018f2e:	f043 0308 	orr.w	r3, r3, #8
 8018f32:	b2da      	uxtb	r2, r3
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018f38:	89fb      	ldrh	r3, [r7, #14]
 8018f3a:	2b08      	cmp	r3, #8
 8018f3c:	d003      	beq.n	8018f46 <ethernet_input+0xba>
 8018f3e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018f42:	d014      	beq.n	8018f6e <ethernet_input+0xe2>
 8018f44:	e034      	b.n	8018fb0 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f46:	683b      	ldr	r3, [r7, #0]
 8018f48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f4c:	f003 0308 	and.w	r3, r3, #8
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d03c      	beq.n	8018fce <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018f54:	8afb      	ldrh	r3, [r7, #22]
 8018f56:	4619      	mov	r1, r3
 8018f58:	6878      	ldr	r0, [r7, #4]
 8018f5a:	f7f5 ff02 	bl	800ed62 <pbuf_remove_header>
 8018f5e:	4603      	mov	r3, r0
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d136      	bne.n	8018fd2 <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8018f64:	6839      	ldr	r1, [r7, #0]
 8018f66:	6878      	ldr	r0, [r7, #4]
 8018f68:	f7fe fefa 	bl	8017d60 <ip4_input>
      }
      break;
 8018f6c:	e02d      	b.n	8018fca <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f6e:	683b      	ldr	r3, [r7, #0]
 8018f70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f74:	f003 0308 	and.w	r3, r3, #8
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d02c      	beq.n	8018fd6 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018f7c:	8afb      	ldrh	r3, [r7, #22]
 8018f7e:	4619      	mov	r1, r3
 8018f80:	6878      	ldr	r0, [r7, #4]
 8018f82:	f7f5 feee 	bl	800ed62 <pbuf_remove_header>
 8018f86:	4603      	mov	r3, r0
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d00c      	beq.n	8018fa6 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8018f8c:	4b16      	ldr	r3, [pc, #88]	; (8018fe8 <ethernet_input+0x15c>)
 8018f8e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018f90:	3301      	adds	r3, #1
 8018f92:	b29a      	uxth	r2, r3
 8018f94:	4b14      	ldr	r3, [pc, #80]	; (8018fe8 <ethernet_input+0x15c>)
 8018f96:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8018f98:	4b13      	ldr	r3, [pc, #76]	; (8018fe8 <ethernet_input+0x15c>)
 8018f9a:	8bdb      	ldrh	r3, [r3, #30]
 8018f9c:	3301      	adds	r3, #1
 8018f9e:	b29a      	uxth	r2, r3
 8018fa0:	4b11      	ldr	r3, [pc, #68]	; (8018fe8 <ethernet_input+0x15c>)
 8018fa2:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8018fa4:	e018      	b.n	8018fd8 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 8018fa6:	6839      	ldr	r1, [r7, #0]
 8018fa8:	6878      	ldr	r0, [r7, #4]
 8018faa:	f7fe f861 	bl	8017070 <etharp_input>
      }
      break;
 8018fae:	e00c      	b.n	8018fca <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8018fb0:	4b0d      	ldr	r3, [pc, #52]	; (8018fe8 <ethernet_input+0x15c>)
 8018fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018fb4:	3301      	adds	r3, #1
 8018fb6:	b29a      	uxth	r2, r3
 8018fb8:	4b0b      	ldr	r3, [pc, #44]	; (8018fe8 <ethernet_input+0x15c>)
 8018fba:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8018fbc:	4b0a      	ldr	r3, [pc, #40]	; (8018fe8 <ethernet_input+0x15c>)
 8018fbe:	8bdb      	ldrh	r3, [r3, #30]
 8018fc0:	3301      	adds	r3, #1
 8018fc2:	b29a      	uxth	r2, r3
 8018fc4:	4b08      	ldr	r3, [pc, #32]	; (8018fe8 <ethernet_input+0x15c>)
 8018fc6:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018fc8:	e006      	b.n	8018fd8 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018fca:	2300      	movs	r3, #0
 8018fcc:	e008      	b.n	8018fe0 <ethernet_input+0x154>
        goto free_and_return;
 8018fce:	bf00      	nop
 8018fd0:	e002      	b.n	8018fd8 <ethernet_input+0x14c>
        goto free_and_return;
 8018fd2:	bf00      	nop
 8018fd4:	e000      	b.n	8018fd8 <ethernet_input+0x14c>
        goto free_and_return;
 8018fd6:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018fd8:	6878      	ldr	r0, [r7, #4]
 8018fda:	f7f5 ff2f 	bl	800ee3c <pbuf_free>
  return ERR_OK;
 8018fde:	2300      	movs	r3, #0
}
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	3718      	adds	r7, #24
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	bd80      	pop	{r7, pc}
 8018fe8:	2000770c 	.word	0x2000770c
 8018fec:	0801bb44 	.word	0x0801bb44

08018ff0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b086      	sub	sp, #24
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	60f8      	str	r0, [r7, #12]
 8018ff8:	60b9      	str	r1, [r7, #8]
 8018ffa:	607a      	str	r2, [r7, #4]
 8018ffc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018ffe:	8c3b      	ldrh	r3, [r7, #32]
 8019000:	4618      	mov	r0, r3
 8019002:	f7f4 ff23 	bl	800de4c <lwip_htons>
 8019006:	4603      	mov	r3, r0
 8019008:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801900a:	210e      	movs	r1, #14
 801900c:	68b8      	ldr	r0, [r7, #8]
 801900e:	f7f5 fe99 	bl	800ed44 <pbuf_add_header>
 8019012:	4603      	mov	r3, r0
 8019014:	2b00      	cmp	r3, #0
 8019016:	d119      	bne.n	801904c <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019018:	68bb      	ldr	r3, [r7, #8]
 801901a:	685b      	ldr	r3, [r3, #4]
 801901c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801901e:	693b      	ldr	r3, [r7, #16]
 8019020:	8afa      	ldrh	r2, [r7, #22]
 8019022:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019024:	693b      	ldr	r3, [r7, #16]
 8019026:	2206      	movs	r2, #6
 8019028:	6839      	ldr	r1, [r7, #0]
 801902a:	4618      	mov	r0, r3
 801902c:	f000 fbb9 	bl	80197a2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019030:	693b      	ldr	r3, [r7, #16]
 8019032:	3306      	adds	r3, #6
 8019034:	2206      	movs	r2, #6
 8019036:	6879      	ldr	r1, [r7, #4]
 8019038:	4618      	mov	r0, r3
 801903a:	f000 fbb2 	bl	80197a2 <memcpy>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	699b      	ldr	r3, [r3, #24]
 8019042:	68b9      	ldr	r1, [r7, #8]
 8019044:	68f8      	ldr	r0, [r7, #12]
 8019046:	4798      	blx	r3
 8019048:	4603      	mov	r3, r0
 801904a:	e008      	b.n	801905e <ethernet_output+0x6e>
      goto pbuf_header_failed;
 801904c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801904e:	4b06      	ldr	r3, [pc, #24]	; (8019068 <ethernet_output+0x78>)
 8019050:	895b      	ldrh	r3, [r3, #10]
 8019052:	3301      	adds	r3, #1
 8019054:	b29a      	uxth	r2, r3
 8019056:	4b04      	ldr	r3, [pc, #16]	; (8019068 <ethernet_output+0x78>)
 8019058:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801905a:	f06f 0301 	mvn.w	r3, #1
}
 801905e:	4618      	mov	r0, r3
 8019060:	3718      	adds	r7, #24
 8019062:	46bd      	mov	sp, r7
 8019064:	bd80      	pop	{r7, pc}
 8019066:	bf00      	nop
 8019068:	2000770c 	.word	0x2000770c

0801906c <exit>:
 801906c:	b508      	push	{r3, lr}
 801906e:	4b06      	ldr	r3, [pc, #24]	; (8019088 <exit+0x1c>)
 8019070:	4604      	mov	r4, r0
 8019072:	b113      	cbz	r3, 801907a <exit+0xe>
 8019074:	2100      	movs	r1, #0
 8019076:	f3af 8000 	nop.w
 801907a:	4b04      	ldr	r3, [pc, #16]	; (801908c <exit+0x20>)
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	b103      	cbz	r3, 8019082 <exit+0x16>
 8019080:	4798      	blx	r3
 8019082:	4620      	mov	r0, r4
 8019084:	f7ee faf4 	bl	8007670 <_exit>
 8019088:	00000000 	.word	0x00000000
 801908c:	20007a88 	.word	0x20007a88

08019090 <malloc>:
 8019090:	4b02      	ldr	r3, [pc, #8]	; (801909c <malloc+0xc>)
 8019092:	4601      	mov	r1, r0
 8019094:	6818      	ldr	r0, [r3, #0]
 8019096:	f000 b82b 	b.w	80190f0 <_malloc_r>
 801909a:	bf00      	nop
 801909c:	2000019c 	.word	0x2000019c

080190a0 <free>:
 80190a0:	4b02      	ldr	r3, [pc, #8]	; (80190ac <free+0xc>)
 80190a2:	4601      	mov	r1, r0
 80190a4:	6818      	ldr	r0, [r3, #0]
 80190a6:	f000 bba9 	b.w	80197fc <_free_r>
 80190aa:	bf00      	nop
 80190ac:	2000019c 	.word	0x2000019c

080190b0 <sbrk_aligned>:
 80190b0:	b570      	push	{r4, r5, r6, lr}
 80190b2:	4e0e      	ldr	r6, [pc, #56]	; (80190ec <sbrk_aligned+0x3c>)
 80190b4:	460c      	mov	r4, r1
 80190b6:	6831      	ldr	r1, [r6, #0]
 80190b8:	4605      	mov	r5, r0
 80190ba:	b911      	cbnz	r1, 80190c2 <sbrk_aligned+0x12>
 80190bc:	f000 fb22 	bl	8019704 <_sbrk_r>
 80190c0:	6030      	str	r0, [r6, #0]
 80190c2:	4621      	mov	r1, r4
 80190c4:	4628      	mov	r0, r5
 80190c6:	f000 fb1d 	bl	8019704 <_sbrk_r>
 80190ca:	1c43      	adds	r3, r0, #1
 80190cc:	d00a      	beq.n	80190e4 <sbrk_aligned+0x34>
 80190ce:	1cc4      	adds	r4, r0, #3
 80190d0:	f024 0403 	bic.w	r4, r4, #3
 80190d4:	42a0      	cmp	r0, r4
 80190d6:	d007      	beq.n	80190e8 <sbrk_aligned+0x38>
 80190d8:	1a21      	subs	r1, r4, r0
 80190da:	4628      	mov	r0, r5
 80190dc:	f000 fb12 	bl	8019704 <_sbrk_r>
 80190e0:	3001      	adds	r0, #1
 80190e2:	d101      	bne.n	80190e8 <sbrk_aligned+0x38>
 80190e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80190e8:	4620      	mov	r0, r4
 80190ea:	bd70      	pop	{r4, r5, r6, pc}
 80190ec:	2000794c 	.word	0x2000794c

080190f0 <_malloc_r>:
 80190f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190f4:	1ccd      	adds	r5, r1, #3
 80190f6:	f025 0503 	bic.w	r5, r5, #3
 80190fa:	3508      	adds	r5, #8
 80190fc:	2d0c      	cmp	r5, #12
 80190fe:	bf38      	it	cc
 8019100:	250c      	movcc	r5, #12
 8019102:	2d00      	cmp	r5, #0
 8019104:	4607      	mov	r7, r0
 8019106:	db01      	blt.n	801910c <_malloc_r+0x1c>
 8019108:	42a9      	cmp	r1, r5
 801910a:	d905      	bls.n	8019118 <_malloc_r+0x28>
 801910c:	230c      	movs	r3, #12
 801910e:	603b      	str	r3, [r7, #0]
 8019110:	2600      	movs	r6, #0
 8019112:	4630      	mov	r0, r6
 8019114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019118:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80191ec <_malloc_r+0xfc>
 801911c:	f000 f868 	bl	80191f0 <__malloc_lock>
 8019120:	f8d8 3000 	ldr.w	r3, [r8]
 8019124:	461c      	mov	r4, r3
 8019126:	bb5c      	cbnz	r4, 8019180 <_malloc_r+0x90>
 8019128:	4629      	mov	r1, r5
 801912a:	4638      	mov	r0, r7
 801912c:	f7ff ffc0 	bl	80190b0 <sbrk_aligned>
 8019130:	1c43      	adds	r3, r0, #1
 8019132:	4604      	mov	r4, r0
 8019134:	d155      	bne.n	80191e2 <_malloc_r+0xf2>
 8019136:	f8d8 4000 	ldr.w	r4, [r8]
 801913a:	4626      	mov	r6, r4
 801913c:	2e00      	cmp	r6, #0
 801913e:	d145      	bne.n	80191cc <_malloc_r+0xdc>
 8019140:	2c00      	cmp	r4, #0
 8019142:	d048      	beq.n	80191d6 <_malloc_r+0xe6>
 8019144:	6823      	ldr	r3, [r4, #0]
 8019146:	4631      	mov	r1, r6
 8019148:	4638      	mov	r0, r7
 801914a:	eb04 0903 	add.w	r9, r4, r3
 801914e:	f000 fad9 	bl	8019704 <_sbrk_r>
 8019152:	4581      	cmp	r9, r0
 8019154:	d13f      	bne.n	80191d6 <_malloc_r+0xe6>
 8019156:	6821      	ldr	r1, [r4, #0]
 8019158:	1a6d      	subs	r5, r5, r1
 801915a:	4629      	mov	r1, r5
 801915c:	4638      	mov	r0, r7
 801915e:	f7ff ffa7 	bl	80190b0 <sbrk_aligned>
 8019162:	3001      	adds	r0, #1
 8019164:	d037      	beq.n	80191d6 <_malloc_r+0xe6>
 8019166:	6823      	ldr	r3, [r4, #0]
 8019168:	442b      	add	r3, r5
 801916a:	6023      	str	r3, [r4, #0]
 801916c:	f8d8 3000 	ldr.w	r3, [r8]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d038      	beq.n	80191e6 <_malloc_r+0xf6>
 8019174:	685a      	ldr	r2, [r3, #4]
 8019176:	42a2      	cmp	r2, r4
 8019178:	d12b      	bne.n	80191d2 <_malloc_r+0xe2>
 801917a:	2200      	movs	r2, #0
 801917c:	605a      	str	r2, [r3, #4]
 801917e:	e00f      	b.n	80191a0 <_malloc_r+0xb0>
 8019180:	6822      	ldr	r2, [r4, #0]
 8019182:	1b52      	subs	r2, r2, r5
 8019184:	d41f      	bmi.n	80191c6 <_malloc_r+0xd6>
 8019186:	2a0b      	cmp	r2, #11
 8019188:	d917      	bls.n	80191ba <_malloc_r+0xca>
 801918a:	1961      	adds	r1, r4, r5
 801918c:	42a3      	cmp	r3, r4
 801918e:	6025      	str	r5, [r4, #0]
 8019190:	bf18      	it	ne
 8019192:	6059      	strne	r1, [r3, #4]
 8019194:	6863      	ldr	r3, [r4, #4]
 8019196:	bf08      	it	eq
 8019198:	f8c8 1000 	streq.w	r1, [r8]
 801919c:	5162      	str	r2, [r4, r5]
 801919e:	604b      	str	r3, [r1, #4]
 80191a0:	4638      	mov	r0, r7
 80191a2:	f104 060b 	add.w	r6, r4, #11
 80191a6:	f000 f829 	bl	80191fc <__malloc_unlock>
 80191aa:	f026 0607 	bic.w	r6, r6, #7
 80191ae:	1d23      	adds	r3, r4, #4
 80191b0:	1af2      	subs	r2, r6, r3
 80191b2:	d0ae      	beq.n	8019112 <_malloc_r+0x22>
 80191b4:	1b9b      	subs	r3, r3, r6
 80191b6:	50a3      	str	r3, [r4, r2]
 80191b8:	e7ab      	b.n	8019112 <_malloc_r+0x22>
 80191ba:	42a3      	cmp	r3, r4
 80191bc:	6862      	ldr	r2, [r4, #4]
 80191be:	d1dd      	bne.n	801917c <_malloc_r+0x8c>
 80191c0:	f8c8 2000 	str.w	r2, [r8]
 80191c4:	e7ec      	b.n	80191a0 <_malloc_r+0xb0>
 80191c6:	4623      	mov	r3, r4
 80191c8:	6864      	ldr	r4, [r4, #4]
 80191ca:	e7ac      	b.n	8019126 <_malloc_r+0x36>
 80191cc:	4634      	mov	r4, r6
 80191ce:	6876      	ldr	r6, [r6, #4]
 80191d0:	e7b4      	b.n	801913c <_malloc_r+0x4c>
 80191d2:	4613      	mov	r3, r2
 80191d4:	e7cc      	b.n	8019170 <_malloc_r+0x80>
 80191d6:	230c      	movs	r3, #12
 80191d8:	603b      	str	r3, [r7, #0]
 80191da:	4638      	mov	r0, r7
 80191dc:	f000 f80e 	bl	80191fc <__malloc_unlock>
 80191e0:	e797      	b.n	8019112 <_malloc_r+0x22>
 80191e2:	6025      	str	r5, [r4, #0]
 80191e4:	e7dc      	b.n	80191a0 <_malloc_r+0xb0>
 80191e6:	605b      	str	r3, [r3, #4]
 80191e8:	deff      	udf	#255	; 0xff
 80191ea:	bf00      	nop
 80191ec:	20007948 	.word	0x20007948

080191f0 <__malloc_lock>:
 80191f0:	4801      	ldr	r0, [pc, #4]	; (80191f8 <__malloc_lock+0x8>)
 80191f2:	f000 bad4 	b.w	801979e <__retarget_lock_acquire_recursive>
 80191f6:	bf00      	nop
 80191f8:	20007a90 	.word	0x20007a90

080191fc <__malloc_unlock>:
 80191fc:	4801      	ldr	r0, [pc, #4]	; (8019204 <__malloc_unlock+0x8>)
 80191fe:	f000 bacf 	b.w	80197a0 <__retarget_lock_release_recursive>
 8019202:	bf00      	nop
 8019204:	20007a90 	.word	0x20007a90

08019208 <rand>:
 8019208:	4b16      	ldr	r3, [pc, #88]	; (8019264 <rand+0x5c>)
 801920a:	b510      	push	{r4, lr}
 801920c:	681c      	ldr	r4, [r3, #0]
 801920e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019210:	b9b3      	cbnz	r3, 8019240 <rand+0x38>
 8019212:	2018      	movs	r0, #24
 8019214:	f7ff ff3c 	bl	8019090 <malloc>
 8019218:	4602      	mov	r2, r0
 801921a:	6320      	str	r0, [r4, #48]	; 0x30
 801921c:	b920      	cbnz	r0, 8019228 <rand+0x20>
 801921e:	4b12      	ldr	r3, [pc, #72]	; (8019268 <rand+0x60>)
 8019220:	4812      	ldr	r0, [pc, #72]	; (801926c <rand+0x64>)
 8019222:	2152      	movs	r1, #82	; 0x52
 8019224:	f000 facc 	bl	80197c0 <__assert_func>
 8019228:	4911      	ldr	r1, [pc, #68]	; (8019270 <rand+0x68>)
 801922a:	4b12      	ldr	r3, [pc, #72]	; (8019274 <rand+0x6c>)
 801922c:	e9c0 1300 	strd	r1, r3, [r0]
 8019230:	4b11      	ldr	r3, [pc, #68]	; (8019278 <rand+0x70>)
 8019232:	6083      	str	r3, [r0, #8]
 8019234:	230b      	movs	r3, #11
 8019236:	8183      	strh	r3, [r0, #12]
 8019238:	2100      	movs	r1, #0
 801923a:	2001      	movs	r0, #1
 801923c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019240:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019242:	480e      	ldr	r0, [pc, #56]	; (801927c <rand+0x74>)
 8019244:	690b      	ldr	r3, [r1, #16]
 8019246:	694c      	ldr	r4, [r1, #20]
 8019248:	4a0d      	ldr	r2, [pc, #52]	; (8019280 <rand+0x78>)
 801924a:	4358      	muls	r0, r3
 801924c:	fb02 0004 	mla	r0, r2, r4, r0
 8019250:	fba3 3202 	umull	r3, r2, r3, r2
 8019254:	3301      	adds	r3, #1
 8019256:	eb40 0002 	adc.w	r0, r0, r2
 801925a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801925e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019262:	bd10      	pop	{r4, pc}
 8019264:	2000019c 	.word	0x2000019c
 8019268:	0801bb52 	.word	0x0801bb52
 801926c:	0801bb69 	.word	0x0801bb69
 8019270:	abcd330e 	.word	0xabcd330e
 8019274:	e66d1234 	.word	0xe66d1234
 8019278:	0005deec 	.word	0x0005deec
 801927c:	5851f42d 	.word	0x5851f42d
 8019280:	4c957f2d 	.word	0x4c957f2d

08019284 <std>:
 8019284:	2300      	movs	r3, #0
 8019286:	b510      	push	{r4, lr}
 8019288:	4604      	mov	r4, r0
 801928a:	e9c0 3300 	strd	r3, r3, [r0]
 801928e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019292:	6083      	str	r3, [r0, #8]
 8019294:	8181      	strh	r1, [r0, #12]
 8019296:	6643      	str	r3, [r0, #100]	; 0x64
 8019298:	81c2      	strh	r2, [r0, #14]
 801929a:	6183      	str	r3, [r0, #24]
 801929c:	4619      	mov	r1, r3
 801929e:	2208      	movs	r2, #8
 80192a0:	305c      	adds	r0, #92	; 0x5c
 80192a2:	f000 f9d3 	bl	801964c <memset>
 80192a6:	4b0d      	ldr	r3, [pc, #52]	; (80192dc <std+0x58>)
 80192a8:	6263      	str	r3, [r4, #36]	; 0x24
 80192aa:	4b0d      	ldr	r3, [pc, #52]	; (80192e0 <std+0x5c>)
 80192ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80192ae:	4b0d      	ldr	r3, [pc, #52]	; (80192e4 <std+0x60>)
 80192b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80192b2:	4b0d      	ldr	r3, [pc, #52]	; (80192e8 <std+0x64>)
 80192b4:	6323      	str	r3, [r4, #48]	; 0x30
 80192b6:	4b0d      	ldr	r3, [pc, #52]	; (80192ec <std+0x68>)
 80192b8:	6224      	str	r4, [r4, #32]
 80192ba:	429c      	cmp	r4, r3
 80192bc:	d006      	beq.n	80192cc <std+0x48>
 80192be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80192c2:	4294      	cmp	r4, r2
 80192c4:	d002      	beq.n	80192cc <std+0x48>
 80192c6:	33d0      	adds	r3, #208	; 0xd0
 80192c8:	429c      	cmp	r4, r3
 80192ca:	d105      	bne.n	80192d8 <std+0x54>
 80192cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80192d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192d4:	f000 ba62 	b.w	801979c <__retarget_lock_init_recursive>
 80192d8:	bd10      	pop	{r4, pc}
 80192da:	bf00      	nop
 80192dc:	08019449 	.word	0x08019449
 80192e0:	0801946b 	.word	0x0801946b
 80192e4:	080194a3 	.word	0x080194a3
 80192e8:	080194c7 	.word	0x080194c7
 80192ec:	20007950 	.word	0x20007950

080192f0 <stdio_exit_handler>:
 80192f0:	4a02      	ldr	r2, [pc, #8]	; (80192fc <stdio_exit_handler+0xc>)
 80192f2:	4903      	ldr	r1, [pc, #12]	; (8019300 <stdio_exit_handler+0x10>)
 80192f4:	4803      	ldr	r0, [pc, #12]	; (8019304 <stdio_exit_handler+0x14>)
 80192f6:	f000 b869 	b.w	80193cc <_fwalk_sglue>
 80192fa:	bf00      	nop
 80192fc:	20000144 	.word	0x20000144
 8019300:	0801a1f9 	.word	0x0801a1f9
 8019304:	20000150 	.word	0x20000150

08019308 <cleanup_stdio>:
 8019308:	6841      	ldr	r1, [r0, #4]
 801930a:	4b0c      	ldr	r3, [pc, #48]	; (801933c <cleanup_stdio+0x34>)
 801930c:	4299      	cmp	r1, r3
 801930e:	b510      	push	{r4, lr}
 8019310:	4604      	mov	r4, r0
 8019312:	d001      	beq.n	8019318 <cleanup_stdio+0x10>
 8019314:	f000 ff70 	bl	801a1f8 <_fflush_r>
 8019318:	68a1      	ldr	r1, [r4, #8]
 801931a:	4b09      	ldr	r3, [pc, #36]	; (8019340 <cleanup_stdio+0x38>)
 801931c:	4299      	cmp	r1, r3
 801931e:	d002      	beq.n	8019326 <cleanup_stdio+0x1e>
 8019320:	4620      	mov	r0, r4
 8019322:	f000 ff69 	bl	801a1f8 <_fflush_r>
 8019326:	68e1      	ldr	r1, [r4, #12]
 8019328:	4b06      	ldr	r3, [pc, #24]	; (8019344 <cleanup_stdio+0x3c>)
 801932a:	4299      	cmp	r1, r3
 801932c:	d004      	beq.n	8019338 <cleanup_stdio+0x30>
 801932e:	4620      	mov	r0, r4
 8019330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019334:	f000 bf60 	b.w	801a1f8 <_fflush_r>
 8019338:	bd10      	pop	{r4, pc}
 801933a:	bf00      	nop
 801933c:	20007950 	.word	0x20007950
 8019340:	200079b8 	.word	0x200079b8
 8019344:	20007a20 	.word	0x20007a20

08019348 <global_stdio_init.part.0>:
 8019348:	b510      	push	{r4, lr}
 801934a:	4b0b      	ldr	r3, [pc, #44]	; (8019378 <global_stdio_init.part.0+0x30>)
 801934c:	4c0b      	ldr	r4, [pc, #44]	; (801937c <global_stdio_init.part.0+0x34>)
 801934e:	4a0c      	ldr	r2, [pc, #48]	; (8019380 <global_stdio_init.part.0+0x38>)
 8019350:	601a      	str	r2, [r3, #0]
 8019352:	4620      	mov	r0, r4
 8019354:	2200      	movs	r2, #0
 8019356:	2104      	movs	r1, #4
 8019358:	f7ff ff94 	bl	8019284 <std>
 801935c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019360:	2201      	movs	r2, #1
 8019362:	2109      	movs	r1, #9
 8019364:	f7ff ff8e 	bl	8019284 <std>
 8019368:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801936c:	2202      	movs	r2, #2
 801936e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019372:	2112      	movs	r1, #18
 8019374:	f7ff bf86 	b.w	8019284 <std>
 8019378:	20007a88 	.word	0x20007a88
 801937c:	20007950 	.word	0x20007950
 8019380:	080192f1 	.word	0x080192f1

08019384 <__sfp_lock_acquire>:
 8019384:	4801      	ldr	r0, [pc, #4]	; (801938c <__sfp_lock_acquire+0x8>)
 8019386:	f000 ba0a 	b.w	801979e <__retarget_lock_acquire_recursive>
 801938a:	bf00      	nop
 801938c:	20007a91 	.word	0x20007a91

08019390 <__sfp_lock_release>:
 8019390:	4801      	ldr	r0, [pc, #4]	; (8019398 <__sfp_lock_release+0x8>)
 8019392:	f000 ba05 	b.w	80197a0 <__retarget_lock_release_recursive>
 8019396:	bf00      	nop
 8019398:	20007a91 	.word	0x20007a91

0801939c <__sinit>:
 801939c:	b510      	push	{r4, lr}
 801939e:	4604      	mov	r4, r0
 80193a0:	f7ff fff0 	bl	8019384 <__sfp_lock_acquire>
 80193a4:	6a23      	ldr	r3, [r4, #32]
 80193a6:	b11b      	cbz	r3, 80193b0 <__sinit+0x14>
 80193a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193ac:	f7ff bff0 	b.w	8019390 <__sfp_lock_release>
 80193b0:	4b04      	ldr	r3, [pc, #16]	; (80193c4 <__sinit+0x28>)
 80193b2:	6223      	str	r3, [r4, #32]
 80193b4:	4b04      	ldr	r3, [pc, #16]	; (80193c8 <__sinit+0x2c>)
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d1f5      	bne.n	80193a8 <__sinit+0xc>
 80193bc:	f7ff ffc4 	bl	8019348 <global_stdio_init.part.0>
 80193c0:	e7f2      	b.n	80193a8 <__sinit+0xc>
 80193c2:	bf00      	nop
 80193c4:	08019309 	.word	0x08019309
 80193c8:	20007a88 	.word	0x20007a88

080193cc <_fwalk_sglue>:
 80193cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193d0:	4607      	mov	r7, r0
 80193d2:	4688      	mov	r8, r1
 80193d4:	4614      	mov	r4, r2
 80193d6:	2600      	movs	r6, #0
 80193d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80193dc:	f1b9 0901 	subs.w	r9, r9, #1
 80193e0:	d505      	bpl.n	80193ee <_fwalk_sglue+0x22>
 80193e2:	6824      	ldr	r4, [r4, #0]
 80193e4:	2c00      	cmp	r4, #0
 80193e6:	d1f7      	bne.n	80193d8 <_fwalk_sglue+0xc>
 80193e8:	4630      	mov	r0, r6
 80193ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193ee:	89ab      	ldrh	r3, [r5, #12]
 80193f0:	2b01      	cmp	r3, #1
 80193f2:	d907      	bls.n	8019404 <_fwalk_sglue+0x38>
 80193f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80193f8:	3301      	adds	r3, #1
 80193fa:	d003      	beq.n	8019404 <_fwalk_sglue+0x38>
 80193fc:	4629      	mov	r1, r5
 80193fe:	4638      	mov	r0, r7
 8019400:	47c0      	blx	r8
 8019402:	4306      	orrs	r6, r0
 8019404:	3568      	adds	r5, #104	; 0x68
 8019406:	e7e9      	b.n	80193dc <_fwalk_sglue+0x10>

08019408 <siprintf>:
 8019408:	b40e      	push	{r1, r2, r3}
 801940a:	b500      	push	{lr}
 801940c:	b09c      	sub	sp, #112	; 0x70
 801940e:	ab1d      	add	r3, sp, #116	; 0x74
 8019410:	9002      	str	r0, [sp, #8]
 8019412:	9006      	str	r0, [sp, #24]
 8019414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019418:	4809      	ldr	r0, [pc, #36]	; (8019440 <siprintf+0x38>)
 801941a:	9107      	str	r1, [sp, #28]
 801941c:	9104      	str	r1, [sp, #16]
 801941e:	4909      	ldr	r1, [pc, #36]	; (8019444 <siprintf+0x3c>)
 8019420:	f853 2b04 	ldr.w	r2, [r3], #4
 8019424:	9105      	str	r1, [sp, #20]
 8019426:	6800      	ldr	r0, [r0, #0]
 8019428:	9301      	str	r3, [sp, #4]
 801942a:	a902      	add	r1, sp, #8
 801942c:	f000 fa8c 	bl	8019948 <_svfiprintf_r>
 8019430:	9b02      	ldr	r3, [sp, #8]
 8019432:	2200      	movs	r2, #0
 8019434:	701a      	strb	r2, [r3, #0]
 8019436:	b01c      	add	sp, #112	; 0x70
 8019438:	f85d eb04 	ldr.w	lr, [sp], #4
 801943c:	b003      	add	sp, #12
 801943e:	4770      	bx	lr
 8019440:	2000019c 	.word	0x2000019c
 8019444:	ffff0208 	.word	0xffff0208

08019448 <__sread>:
 8019448:	b510      	push	{r4, lr}
 801944a:	460c      	mov	r4, r1
 801944c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019450:	f000 f946 	bl	80196e0 <_read_r>
 8019454:	2800      	cmp	r0, #0
 8019456:	bfab      	itete	ge
 8019458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801945a:	89a3      	ldrhlt	r3, [r4, #12]
 801945c:	181b      	addge	r3, r3, r0
 801945e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019462:	bfac      	ite	ge
 8019464:	6563      	strge	r3, [r4, #84]	; 0x54
 8019466:	81a3      	strhlt	r3, [r4, #12]
 8019468:	bd10      	pop	{r4, pc}

0801946a <__swrite>:
 801946a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801946e:	461f      	mov	r7, r3
 8019470:	898b      	ldrh	r3, [r1, #12]
 8019472:	05db      	lsls	r3, r3, #23
 8019474:	4605      	mov	r5, r0
 8019476:	460c      	mov	r4, r1
 8019478:	4616      	mov	r6, r2
 801947a:	d505      	bpl.n	8019488 <__swrite+0x1e>
 801947c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019480:	2302      	movs	r3, #2
 8019482:	2200      	movs	r2, #0
 8019484:	f000 f91a 	bl	80196bc <_lseek_r>
 8019488:	89a3      	ldrh	r3, [r4, #12]
 801948a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801948e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019492:	81a3      	strh	r3, [r4, #12]
 8019494:	4632      	mov	r2, r6
 8019496:	463b      	mov	r3, r7
 8019498:	4628      	mov	r0, r5
 801949a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801949e:	f000 b941 	b.w	8019724 <_write_r>

080194a2 <__sseek>:
 80194a2:	b510      	push	{r4, lr}
 80194a4:	460c      	mov	r4, r1
 80194a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194aa:	f000 f907 	bl	80196bc <_lseek_r>
 80194ae:	1c43      	adds	r3, r0, #1
 80194b0:	89a3      	ldrh	r3, [r4, #12]
 80194b2:	bf15      	itete	ne
 80194b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80194b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80194ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80194be:	81a3      	strheq	r3, [r4, #12]
 80194c0:	bf18      	it	ne
 80194c2:	81a3      	strhne	r3, [r4, #12]
 80194c4:	bd10      	pop	{r4, pc}

080194c6 <__sclose>:
 80194c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194ca:	f000 b8e7 	b.w	801969c <_close_r>

080194ce <__swbuf_r>:
 80194ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194d0:	460e      	mov	r6, r1
 80194d2:	4614      	mov	r4, r2
 80194d4:	4605      	mov	r5, r0
 80194d6:	b118      	cbz	r0, 80194e0 <__swbuf_r+0x12>
 80194d8:	6a03      	ldr	r3, [r0, #32]
 80194da:	b90b      	cbnz	r3, 80194e0 <__swbuf_r+0x12>
 80194dc:	f7ff ff5e 	bl	801939c <__sinit>
 80194e0:	69a3      	ldr	r3, [r4, #24]
 80194e2:	60a3      	str	r3, [r4, #8]
 80194e4:	89a3      	ldrh	r3, [r4, #12]
 80194e6:	071a      	lsls	r2, r3, #28
 80194e8:	d525      	bpl.n	8019536 <__swbuf_r+0x68>
 80194ea:	6923      	ldr	r3, [r4, #16]
 80194ec:	b31b      	cbz	r3, 8019536 <__swbuf_r+0x68>
 80194ee:	6823      	ldr	r3, [r4, #0]
 80194f0:	6922      	ldr	r2, [r4, #16]
 80194f2:	1a98      	subs	r0, r3, r2
 80194f4:	6963      	ldr	r3, [r4, #20]
 80194f6:	b2f6      	uxtb	r6, r6
 80194f8:	4283      	cmp	r3, r0
 80194fa:	4637      	mov	r7, r6
 80194fc:	dc04      	bgt.n	8019508 <__swbuf_r+0x3a>
 80194fe:	4621      	mov	r1, r4
 8019500:	4628      	mov	r0, r5
 8019502:	f000 fe79 	bl	801a1f8 <_fflush_r>
 8019506:	b9e0      	cbnz	r0, 8019542 <__swbuf_r+0x74>
 8019508:	68a3      	ldr	r3, [r4, #8]
 801950a:	3b01      	subs	r3, #1
 801950c:	60a3      	str	r3, [r4, #8]
 801950e:	6823      	ldr	r3, [r4, #0]
 8019510:	1c5a      	adds	r2, r3, #1
 8019512:	6022      	str	r2, [r4, #0]
 8019514:	701e      	strb	r6, [r3, #0]
 8019516:	6962      	ldr	r2, [r4, #20]
 8019518:	1c43      	adds	r3, r0, #1
 801951a:	429a      	cmp	r2, r3
 801951c:	d004      	beq.n	8019528 <__swbuf_r+0x5a>
 801951e:	89a3      	ldrh	r3, [r4, #12]
 8019520:	07db      	lsls	r3, r3, #31
 8019522:	d506      	bpl.n	8019532 <__swbuf_r+0x64>
 8019524:	2e0a      	cmp	r6, #10
 8019526:	d104      	bne.n	8019532 <__swbuf_r+0x64>
 8019528:	4621      	mov	r1, r4
 801952a:	4628      	mov	r0, r5
 801952c:	f000 fe64 	bl	801a1f8 <_fflush_r>
 8019530:	b938      	cbnz	r0, 8019542 <__swbuf_r+0x74>
 8019532:	4638      	mov	r0, r7
 8019534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019536:	4621      	mov	r1, r4
 8019538:	4628      	mov	r0, r5
 801953a:	f000 f805 	bl	8019548 <__swsetup_r>
 801953e:	2800      	cmp	r0, #0
 8019540:	d0d5      	beq.n	80194ee <__swbuf_r+0x20>
 8019542:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019546:	e7f4      	b.n	8019532 <__swbuf_r+0x64>

08019548 <__swsetup_r>:
 8019548:	b538      	push	{r3, r4, r5, lr}
 801954a:	4b2a      	ldr	r3, [pc, #168]	; (80195f4 <__swsetup_r+0xac>)
 801954c:	4605      	mov	r5, r0
 801954e:	6818      	ldr	r0, [r3, #0]
 8019550:	460c      	mov	r4, r1
 8019552:	b118      	cbz	r0, 801955c <__swsetup_r+0x14>
 8019554:	6a03      	ldr	r3, [r0, #32]
 8019556:	b90b      	cbnz	r3, 801955c <__swsetup_r+0x14>
 8019558:	f7ff ff20 	bl	801939c <__sinit>
 801955c:	89a3      	ldrh	r3, [r4, #12]
 801955e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019562:	0718      	lsls	r0, r3, #28
 8019564:	d422      	bmi.n	80195ac <__swsetup_r+0x64>
 8019566:	06d9      	lsls	r1, r3, #27
 8019568:	d407      	bmi.n	801957a <__swsetup_r+0x32>
 801956a:	2309      	movs	r3, #9
 801956c:	602b      	str	r3, [r5, #0]
 801956e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019572:	81a3      	strh	r3, [r4, #12]
 8019574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019578:	e034      	b.n	80195e4 <__swsetup_r+0x9c>
 801957a:	0758      	lsls	r0, r3, #29
 801957c:	d512      	bpl.n	80195a4 <__swsetup_r+0x5c>
 801957e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019580:	b141      	cbz	r1, 8019594 <__swsetup_r+0x4c>
 8019582:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019586:	4299      	cmp	r1, r3
 8019588:	d002      	beq.n	8019590 <__swsetup_r+0x48>
 801958a:	4628      	mov	r0, r5
 801958c:	f000 f936 	bl	80197fc <_free_r>
 8019590:	2300      	movs	r3, #0
 8019592:	6363      	str	r3, [r4, #52]	; 0x34
 8019594:	89a3      	ldrh	r3, [r4, #12]
 8019596:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801959a:	81a3      	strh	r3, [r4, #12]
 801959c:	2300      	movs	r3, #0
 801959e:	6063      	str	r3, [r4, #4]
 80195a0:	6923      	ldr	r3, [r4, #16]
 80195a2:	6023      	str	r3, [r4, #0]
 80195a4:	89a3      	ldrh	r3, [r4, #12]
 80195a6:	f043 0308 	orr.w	r3, r3, #8
 80195aa:	81a3      	strh	r3, [r4, #12]
 80195ac:	6923      	ldr	r3, [r4, #16]
 80195ae:	b94b      	cbnz	r3, 80195c4 <__swsetup_r+0x7c>
 80195b0:	89a3      	ldrh	r3, [r4, #12]
 80195b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80195b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80195ba:	d003      	beq.n	80195c4 <__swsetup_r+0x7c>
 80195bc:	4621      	mov	r1, r4
 80195be:	4628      	mov	r0, r5
 80195c0:	f000 fe7a 	bl	801a2b8 <__smakebuf_r>
 80195c4:	89a0      	ldrh	r0, [r4, #12]
 80195c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80195ca:	f010 0301 	ands.w	r3, r0, #1
 80195ce:	d00a      	beq.n	80195e6 <__swsetup_r+0x9e>
 80195d0:	2300      	movs	r3, #0
 80195d2:	60a3      	str	r3, [r4, #8]
 80195d4:	6963      	ldr	r3, [r4, #20]
 80195d6:	425b      	negs	r3, r3
 80195d8:	61a3      	str	r3, [r4, #24]
 80195da:	6923      	ldr	r3, [r4, #16]
 80195dc:	b943      	cbnz	r3, 80195f0 <__swsetup_r+0xa8>
 80195de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80195e2:	d1c4      	bne.n	801956e <__swsetup_r+0x26>
 80195e4:	bd38      	pop	{r3, r4, r5, pc}
 80195e6:	0781      	lsls	r1, r0, #30
 80195e8:	bf58      	it	pl
 80195ea:	6963      	ldrpl	r3, [r4, #20]
 80195ec:	60a3      	str	r3, [r4, #8]
 80195ee:	e7f4      	b.n	80195da <__swsetup_r+0x92>
 80195f0:	2000      	movs	r0, #0
 80195f2:	e7f7      	b.n	80195e4 <__swsetup_r+0x9c>
 80195f4:	2000019c 	.word	0x2000019c

080195f8 <memcmp>:
 80195f8:	b510      	push	{r4, lr}
 80195fa:	3901      	subs	r1, #1
 80195fc:	4402      	add	r2, r0
 80195fe:	4290      	cmp	r0, r2
 8019600:	d101      	bne.n	8019606 <memcmp+0xe>
 8019602:	2000      	movs	r0, #0
 8019604:	e005      	b.n	8019612 <memcmp+0x1a>
 8019606:	7803      	ldrb	r3, [r0, #0]
 8019608:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801960c:	42a3      	cmp	r3, r4
 801960e:	d001      	beq.n	8019614 <memcmp+0x1c>
 8019610:	1b18      	subs	r0, r3, r4
 8019612:	bd10      	pop	{r4, pc}
 8019614:	3001      	adds	r0, #1
 8019616:	e7f2      	b.n	80195fe <memcmp+0x6>

08019618 <memmove>:
 8019618:	4288      	cmp	r0, r1
 801961a:	b510      	push	{r4, lr}
 801961c:	eb01 0402 	add.w	r4, r1, r2
 8019620:	d902      	bls.n	8019628 <memmove+0x10>
 8019622:	4284      	cmp	r4, r0
 8019624:	4623      	mov	r3, r4
 8019626:	d807      	bhi.n	8019638 <memmove+0x20>
 8019628:	1e43      	subs	r3, r0, #1
 801962a:	42a1      	cmp	r1, r4
 801962c:	d008      	beq.n	8019640 <memmove+0x28>
 801962e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019636:	e7f8      	b.n	801962a <memmove+0x12>
 8019638:	4402      	add	r2, r0
 801963a:	4601      	mov	r1, r0
 801963c:	428a      	cmp	r2, r1
 801963e:	d100      	bne.n	8019642 <memmove+0x2a>
 8019640:	bd10      	pop	{r4, pc}
 8019642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801964a:	e7f7      	b.n	801963c <memmove+0x24>

0801964c <memset>:
 801964c:	4402      	add	r2, r0
 801964e:	4603      	mov	r3, r0
 8019650:	4293      	cmp	r3, r2
 8019652:	d100      	bne.n	8019656 <memset+0xa>
 8019654:	4770      	bx	lr
 8019656:	f803 1b01 	strb.w	r1, [r3], #1
 801965a:	e7f9      	b.n	8019650 <memset+0x4>

0801965c <strchr>:
 801965c:	b2c9      	uxtb	r1, r1
 801965e:	4603      	mov	r3, r0
 8019660:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019664:	b11a      	cbz	r2, 801966e <strchr+0x12>
 8019666:	428a      	cmp	r2, r1
 8019668:	d1f9      	bne.n	801965e <strchr+0x2>
 801966a:	4618      	mov	r0, r3
 801966c:	4770      	bx	lr
 801966e:	2900      	cmp	r1, #0
 8019670:	bf18      	it	ne
 8019672:	2300      	movne	r3, #0
 8019674:	e7f9      	b.n	801966a <strchr+0xe>

08019676 <strncmp>:
 8019676:	b510      	push	{r4, lr}
 8019678:	b16a      	cbz	r2, 8019696 <strncmp+0x20>
 801967a:	3901      	subs	r1, #1
 801967c:	1884      	adds	r4, r0, r2
 801967e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019682:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019686:	429a      	cmp	r2, r3
 8019688:	d103      	bne.n	8019692 <strncmp+0x1c>
 801968a:	42a0      	cmp	r0, r4
 801968c:	d001      	beq.n	8019692 <strncmp+0x1c>
 801968e:	2a00      	cmp	r2, #0
 8019690:	d1f5      	bne.n	801967e <strncmp+0x8>
 8019692:	1ad0      	subs	r0, r2, r3
 8019694:	bd10      	pop	{r4, pc}
 8019696:	4610      	mov	r0, r2
 8019698:	e7fc      	b.n	8019694 <strncmp+0x1e>
	...

0801969c <_close_r>:
 801969c:	b538      	push	{r3, r4, r5, lr}
 801969e:	4d06      	ldr	r5, [pc, #24]	; (80196b8 <_close_r+0x1c>)
 80196a0:	2300      	movs	r3, #0
 80196a2:	4604      	mov	r4, r0
 80196a4:	4608      	mov	r0, r1
 80196a6:	602b      	str	r3, [r5, #0]
 80196a8:	f7ee f825 	bl	80076f6 <_close>
 80196ac:	1c43      	adds	r3, r0, #1
 80196ae:	d102      	bne.n	80196b6 <_close_r+0x1a>
 80196b0:	682b      	ldr	r3, [r5, #0]
 80196b2:	b103      	cbz	r3, 80196b6 <_close_r+0x1a>
 80196b4:	6023      	str	r3, [r4, #0]
 80196b6:	bd38      	pop	{r3, r4, r5, pc}
 80196b8:	20007a8c 	.word	0x20007a8c

080196bc <_lseek_r>:
 80196bc:	b538      	push	{r3, r4, r5, lr}
 80196be:	4d07      	ldr	r5, [pc, #28]	; (80196dc <_lseek_r+0x20>)
 80196c0:	4604      	mov	r4, r0
 80196c2:	4608      	mov	r0, r1
 80196c4:	4611      	mov	r1, r2
 80196c6:	2200      	movs	r2, #0
 80196c8:	602a      	str	r2, [r5, #0]
 80196ca:	461a      	mov	r2, r3
 80196cc:	f7ee f83a 	bl	8007744 <_lseek>
 80196d0:	1c43      	adds	r3, r0, #1
 80196d2:	d102      	bne.n	80196da <_lseek_r+0x1e>
 80196d4:	682b      	ldr	r3, [r5, #0]
 80196d6:	b103      	cbz	r3, 80196da <_lseek_r+0x1e>
 80196d8:	6023      	str	r3, [r4, #0]
 80196da:	bd38      	pop	{r3, r4, r5, pc}
 80196dc:	20007a8c 	.word	0x20007a8c

080196e0 <_read_r>:
 80196e0:	b538      	push	{r3, r4, r5, lr}
 80196e2:	4d07      	ldr	r5, [pc, #28]	; (8019700 <_read_r+0x20>)
 80196e4:	4604      	mov	r4, r0
 80196e6:	4608      	mov	r0, r1
 80196e8:	4611      	mov	r1, r2
 80196ea:	2200      	movs	r2, #0
 80196ec:	602a      	str	r2, [r5, #0]
 80196ee:	461a      	mov	r2, r3
 80196f0:	f7ed ffc8 	bl	8007684 <_read>
 80196f4:	1c43      	adds	r3, r0, #1
 80196f6:	d102      	bne.n	80196fe <_read_r+0x1e>
 80196f8:	682b      	ldr	r3, [r5, #0]
 80196fa:	b103      	cbz	r3, 80196fe <_read_r+0x1e>
 80196fc:	6023      	str	r3, [r4, #0]
 80196fe:	bd38      	pop	{r3, r4, r5, pc}
 8019700:	20007a8c 	.word	0x20007a8c

08019704 <_sbrk_r>:
 8019704:	b538      	push	{r3, r4, r5, lr}
 8019706:	4d06      	ldr	r5, [pc, #24]	; (8019720 <_sbrk_r+0x1c>)
 8019708:	2300      	movs	r3, #0
 801970a:	4604      	mov	r4, r0
 801970c:	4608      	mov	r0, r1
 801970e:	602b      	str	r3, [r5, #0]
 8019710:	f7ee f8b2 	bl	8007878 <_sbrk>
 8019714:	1c43      	adds	r3, r0, #1
 8019716:	d102      	bne.n	801971e <_sbrk_r+0x1a>
 8019718:	682b      	ldr	r3, [r5, #0]
 801971a:	b103      	cbz	r3, 801971e <_sbrk_r+0x1a>
 801971c:	6023      	str	r3, [r4, #0]
 801971e:	bd38      	pop	{r3, r4, r5, pc}
 8019720:	20007a8c 	.word	0x20007a8c

08019724 <_write_r>:
 8019724:	b538      	push	{r3, r4, r5, lr}
 8019726:	4d07      	ldr	r5, [pc, #28]	; (8019744 <_write_r+0x20>)
 8019728:	4604      	mov	r4, r0
 801972a:	4608      	mov	r0, r1
 801972c:	4611      	mov	r1, r2
 801972e:	2200      	movs	r2, #0
 8019730:	602a      	str	r2, [r5, #0]
 8019732:	461a      	mov	r2, r3
 8019734:	f7ed ffc3 	bl	80076be <_write>
 8019738:	1c43      	adds	r3, r0, #1
 801973a:	d102      	bne.n	8019742 <_write_r+0x1e>
 801973c:	682b      	ldr	r3, [r5, #0]
 801973e:	b103      	cbz	r3, 8019742 <_write_r+0x1e>
 8019740:	6023      	str	r3, [r4, #0]
 8019742:	bd38      	pop	{r3, r4, r5, pc}
 8019744:	20007a8c 	.word	0x20007a8c

08019748 <__errno>:
 8019748:	4b01      	ldr	r3, [pc, #4]	; (8019750 <__errno+0x8>)
 801974a:	6818      	ldr	r0, [r3, #0]
 801974c:	4770      	bx	lr
 801974e:	bf00      	nop
 8019750:	2000019c 	.word	0x2000019c

08019754 <__libc_init_array>:
 8019754:	b570      	push	{r4, r5, r6, lr}
 8019756:	4d0d      	ldr	r5, [pc, #52]	; (801978c <__libc_init_array+0x38>)
 8019758:	4c0d      	ldr	r4, [pc, #52]	; (8019790 <__libc_init_array+0x3c>)
 801975a:	1b64      	subs	r4, r4, r5
 801975c:	10a4      	asrs	r4, r4, #2
 801975e:	2600      	movs	r6, #0
 8019760:	42a6      	cmp	r6, r4
 8019762:	d109      	bne.n	8019778 <__libc_init_array+0x24>
 8019764:	4d0b      	ldr	r5, [pc, #44]	; (8019794 <__libc_init_array+0x40>)
 8019766:	4c0c      	ldr	r4, [pc, #48]	; (8019798 <__libc_init_array+0x44>)
 8019768:	f000 fe86 	bl	801a478 <_init>
 801976c:	1b64      	subs	r4, r4, r5
 801976e:	10a4      	asrs	r4, r4, #2
 8019770:	2600      	movs	r6, #0
 8019772:	42a6      	cmp	r6, r4
 8019774:	d105      	bne.n	8019782 <__libc_init_array+0x2e>
 8019776:	bd70      	pop	{r4, r5, r6, pc}
 8019778:	f855 3b04 	ldr.w	r3, [r5], #4
 801977c:	4798      	blx	r3
 801977e:	3601      	adds	r6, #1
 8019780:	e7ee      	b.n	8019760 <__libc_init_array+0xc>
 8019782:	f855 3b04 	ldr.w	r3, [r5], #4
 8019786:	4798      	blx	r3
 8019788:	3601      	adds	r6, #1
 801978a:	e7f2      	b.n	8019772 <__libc_init_array+0x1e>
 801978c:	0801bc38 	.word	0x0801bc38
 8019790:	0801bc38 	.word	0x0801bc38
 8019794:	0801bc38 	.word	0x0801bc38
 8019798:	0801bc3c 	.word	0x0801bc3c

0801979c <__retarget_lock_init_recursive>:
 801979c:	4770      	bx	lr

0801979e <__retarget_lock_acquire_recursive>:
 801979e:	4770      	bx	lr

080197a0 <__retarget_lock_release_recursive>:
 80197a0:	4770      	bx	lr

080197a2 <memcpy>:
 80197a2:	440a      	add	r2, r1
 80197a4:	4291      	cmp	r1, r2
 80197a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80197aa:	d100      	bne.n	80197ae <memcpy+0xc>
 80197ac:	4770      	bx	lr
 80197ae:	b510      	push	{r4, lr}
 80197b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80197b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80197b8:	4291      	cmp	r1, r2
 80197ba:	d1f9      	bne.n	80197b0 <memcpy+0xe>
 80197bc:	bd10      	pop	{r4, pc}
	...

080197c0 <__assert_func>:
 80197c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80197c2:	4614      	mov	r4, r2
 80197c4:	461a      	mov	r2, r3
 80197c6:	4b09      	ldr	r3, [pc, #36]	; (80197ec <__assert_func+0x2c>)
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	4605      	mov	r5, r0
 80197cc:	68d8      	ldr	r0, [r3, #12]
 80197ce:	b14c      	cbz	r4, 80197e4 <__assert_func+0x24>
 80197d0:	4b07      	ldr	r3, [pc, #28]	; (80197f0 <__assert_func+0x30>)
 80197d2:	9100      	str	r1, [sp, #0]
 80197d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80197d8:	4906      	ldr	r1, [pc, #24]	; (80197f4 <__assert_func+0x34>)
 80197da:	462b      	mov	r3, r5
 80197dc:	f000 fd34 	bl	801a248 <fiprintf>
 80197e0:	f000 fdc8 	bl	801a374 <abort>
 80197e4:	4b04      	ldr	r3, [pc, #16]	; (80197f8 <__assert_func+0x38>)
 80197e6:	461c      	mov	r4, r3
 80197e8:	e7f3      	b.n	80197d2 <__assert_func+0x12>
 80197ea:	bf00      	nop
 80197ec:	2000019c 	.word	0x2000019c
 80197f0:	0801bbc1 	.word	0x0801bbc1
 80197f4:	0801bbce 	.word	0x0801bbce
 80197f8:	0801bbfc 	.word	0x0801bbfc

080197fc <_free_r>:
 80197fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197fe:	2900      	cmp	r1, #0
 8019800:	d044      	beq.n	801988c <_free_r+0x90>
 8019802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019806:	9001      	str	r0, [sp, #4]
 8019808:	2b00      	cmp	r3, #0
 801980a:	f1a1 0404 	sub.w	r4, r1, #4
 801980e:	bfb8      	it	lt
 8019810:	18e4      	addlt	r4, r4, r3
 8019812:	f7ff fced 	bl	80191f0 <__malloc_lock>
 8019816:	4a1e      	ldr	r2, [pc, #120]	; (8019890 <_free_r+0x94>)
 8019818:	9801      	ldr	r0, [sp, #4]
 801981a:	6813      	ldr	r3, [r2, #0]
 801981c:	b933      	cbnz	r3, 801982c <_free_r+0x30>
 801981e:	6063      	str	r3, [r4, #4]
 8019820:	6014      	str	r4, [r2, #0]
 8019822:	b003      	add	sp, #12
 8019824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019828:	f7ff bce8 	b.w	80191fc <__malloc_unlock>
 801982c:	42a3      	cmp	r3, r4
 801982e:	d908      	bls.n	8019842 <_free_r+0x46>
 8019830:	6825      	ldr	r5, [r4, #0]
 8019832:	1961      	adds	r1, r4, r5
 8019834:	428b      	cmp	r3, r1
 8019836:	bf01      	itttt	eq
 8019838:	6819      	ldreq	r1, [r3, #0]
 801983a:	685b      	ldreq	r3, [r3, #4]
 801983c:	1949      	addeq	r1, r1, r5
 801983e:	6021      	streq	r1, [r4, #0]
 8019840:	e7ed      	b.n	801981e <_free_r+0x22>
 8019842:	461a      	mov	r2, r3
 8019844:	685b      	ldr	r3, [r3, #4]
 8019846:	b10b      	cbz	r3, 801984c <_free_r+0x50>
 8019848:	42a3      	cmp	r3, r4
 801984a:	d9fa      	bls.n	8019842 <_free_r+0x46>
 801984c:	6811      	ldr	r1, [r2, #0]
 801984e:	1855      	adds	r5, r2, r1
 8019850:	42a5      	cmp	r5, r4
 8019852:	d10b      	bne.n	801986c <_free_r+0x70>
 8019854:	6824      	ldr	r4, [r4, #0]
 8019856:	4421      	add	r1, r4
 8019858:	1854      	adds	r4, r2, r1
 801985a:	42a3      	cmp	r3, r4
 801985c:	6011      	str	r1, [r2, #0]
 801985e:	d1e0      	bne.n	8019822 <_free_r+0x26>
 8019860:	681c      	ldr	r4, [r3, #0]
 8019862:	685b      	ldr	r3, [r3, #4]
 8019864:	6053      	str	r3, [r2, #4]
 8019866:	440c      	add	r4, r1
 8019868:	6014      	str	r4, [r2, #0]
 801986a:	e7da      	b.n	8019822 <_free_r+0x26>
 801986c:	d902      	bls.n	8019874 <_free_r+0x78>
 801986e:	230c      	movs	r3, #12
 8019870:	6003      	str	r3, [r0, #0]
 8019872:	e7d6      	b.n	8019822 <_free_r+0x26>
 8019874:	6825      	ldr	r5, [r4, #0]
 8019876:	1961      	adds	r1, r4, r5
 8019878:	428b      	cmp	r3, r1
 801987a:	bf04      	itt	eq
 801987c:	6819      	ldreq	r1, [r3, #0]
 801987e:	685b      	ldreq	r3, [r3, #4]
 8019880:	6063      	str	r3, [r4, #4]
 8019882:	bf04      	itt	eq
 8019884:	1949      	addeq	r1, r1, r5
 8019886:	6021      	streq	r1, [r4, #0]
 8019888:	6054      	str	r4, [r2, #4]
 801988a:	e7ca      	b.n	8019822 <_free_r+0x26>
 801988c:	b003      	add	sp, #12
 801988e:	bd30      	pop	{r4, r5, pc}
 8019890:	20007948 	.word	0x20007948

08019894 <__ssputs_r>:
 8019894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019898:	688e      	ldr	r6, [r1, #8]
 801989a:	461f      	mov	r7, r3
 801989c:	42be      	cmp	r6, r7
 801989e:	680b      	ldr	r3, [r1, #0]
 80198a0:	4682      	mov	sl, r0
 80198a2:	460c      	mov	r4, r1
 80198a4:	4690      	mov	r8, r2
 80198a6:	d82c      	bhi.n	8019902 <__ssputs_r+0x6e>
 80198a8:	898a      	ldrh	r2, [r1, #12]
 80198aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80198ae:	d026      	beq.n	80198fe <__ssputs_r+0x6a>
 80198b0:	6965      	ldr	r5, [r4, #20]
 80198b2:	6909      	ldr	r1, [r1, #16]
 80198b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80198b8:	eba3 0901 	sub.w	r9, r3, r1
 80198bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80198c0:	1c7b      	adds	r3, r7, #1
 80198c2:	444b      	add	r3, r9
 80198c4:	106d      	asrs	r5, r5, #1
 80198c6:	429d      	cmp	r5, r3
 80198c8:	bf38      	it	cc
 80198ca:	461d      	movcc	r5, r3
 80198cc:	0553      	lsls	r3, r2, #21
 80198ce:	d527      	bpl.n	8019920 <__ssputs_r+0x8c>
 80198d0:	4629      	mov	r1, r5
 80198d2:	f7ff fc0d 	bl	80190f0 <_malloc_r>
 80198d6:	4606      	mov	r6, r0
 80198d8:	b360      	cbz	r0, 8019934 <__ssputs_r+0xa0>
 80198da:	6921      	ldr	r1, [r4, #16]
 80198dc:	464a      	mov	r2, r9
 80198de:	f7ff ff60 	bl	80197a2 <memcpy>
 80198e2:	89a3      	ldrh	r3, [r4, #12]
 80198e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80198e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198ec:	81a3      	strh	r3, [r4, #12]
 80198ee:	6126      	str	r6, [r4, #16]
 80198f0:	6165      	str	r5, [r4, #20]
 80198f2:	444e      	add	r6, r9
 80198f4:	eba5 0509 	sub.w	r5, r5, r9
 80198f8:	6026      	str	r6, [r4, #0]
 80198fa:	60a5      	str	r5, [r4, #8]
 80198fc:	463e      	mov	r6, r7
 80198fe:	42be      	cmp	r6, r7
 8019900:	d900      	bls.n	8019904 <__ssputs_r+0x70>
 8019902:	463e      	mov	r6, r7
 8019904:	6820      	ldr	r0, [r4, #0]
 8019906:	4632      	mov	r2, r6
 8019908:	4641      	mov	r1, r8
 801990a:	f7ff fe85 	bl	8019618 <memmove>
 801990e:	68a3      	ldr	r3, [r4, #8]
 8019910:	1b9b      	subs	r3, r3, r6
 8019912:	60a3      	str	r3, [r4, #8]
 8019914:	6823      	ldr	r3, [r4, #0]
 8019916:	4433      	add	r3, r6
 8019918:	6023      	str	r3, [r4, #0]
 801991a:	2000      	movs	r0, #0
 801991c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019920:	462a      	mov	r2, r5
 8019922:	f000 fd2e 	bl	801a382 <_realloc_r>
 8019926:	4606      	mov	r6, r0
 8019928:	2800      	cmp	r0, #0
 801992a:	d1e0      	bne.n	80198ee <__ssputs_r+0x5a>
 801992c:	6921      	ldr	r1, [r4, #16]
 801992e:	4650      	mov	r0, sl
 8019930:	f7ff ff64 	bl	80197fc <_free_r>
 8019934:	230c      	movs	r3, #12
 8019936:	f8ca 3000 	str.w	r3, [sl]
 801993a:	89a3      	ldrh	r3, [r4, #12]
 801993c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019940:	81a3      	strh	r3, [r4, #12]
 8019942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019946:	e7e9      	b.n	801991c <__ssputs_r+0x88>

08019948 <_svfiprintf_r>:
 8019948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801994c:	4698      	mov	r8, r3
 801994e:	898b      	ldrh	r3, [r1, #12]
 8019950:	061b      	lsls	r3, r3, #24
 8019952:	b09d      	sub	sp, #116	; 0x74
 8019954:	4607      	mov	r7, r0
 8019956:	460d      	mov	r5, r1
 8019958:	4614      	mov	r4, r2
 801995a:	d50e      	bpl.n	801997a <_svfiprintf_r+0x32>
 801995c:	690b      	ldr	r3, [r1, #16]
 801995e:	b963      	cbnz	r3, 801997a <_svfiprintf_r+0x32>
 8019960:	2140      	movs	r1, #64	; 0x40
 8019962:	f7ff fbc5 	bl	80190f0 <_malloc_r>
 8019966:	6028      	str	r0, [r5, #0]
 8019968:	6128      	str	r0, [r5, #16]
 801996a:	b920      	cbnz	r0, 8019976 <_svfiprintf_r+0x2e>
 801996c:	230c      	movs	r3, #12
 801996e:	603b      	str	r3, [r7, #0]
 8019970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019974:	e0d0      	b.n	8019b18 <_svfiprintf_r+0x1d0>
 8019976:	2340      	movs	r3, #64	; 0x40
 8019978:	616b      	str	r3, [r5, #20]
 801997a:	2300      	movs	r3, #0
 801997c:	9309      	str	r3, [sp, #36]	; 0x24
 801997e:	2320      	movs	r3, #32
 8019980:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019984:	f8cd 800c 	str.w	r8, [sp, #12]
 8019988:	2330      	movs	r3, #48	; 0x30
 801998a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019b30 <_svfiprintf_r+0x1e8>
 801998e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019992:	f04f 0901 	mov.w	r9, #1
 8019996:	4623      	mov	r3, r4
 8019998:	469a      	mov	sl, r3
 801999a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801999e:	b10a      	cbz	r2, 80199a4 <_svfiprintf_r+0x5c>
 80199a0:	2a25      	cmp	r2, #37	; 0x25
 80199a2:	d1f9      	bne.n	8019998 <_svfiprintf_r+0x50>
 80199a4:	ebba 0b04 	subs.w	fp, sl, r4
 80199a8:	d00b      	beq.n	80199c2 <_svfiprintf_r+0x7a>
 80199aa:	465b      	mov	r3, fp
 80199ac:	4622      	mov	r2, r4
 80199ae:	4629      	mov	r1, r5
 80199b0:	4638      	mov	r0, r7
 80199b2:	f7ff ff6f 	bl	8019894 <__ssputs_r>
 80199b6:	3001      	adds	r0, #1
 80199b8:	f000 80a9 	beq.w	8019b0e <_svfiprintf_r+0x1c6>
 80199bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80199be:	445a      	add	r2, fp
 80199c0:	9209      	str	r2, [sp, #36]	; 0x24
 80199c2:	f89a 3000 	ldrb.w	r3, [sl]
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	f000 80a1 	beq.w	8019b0e <_svfiprintf_r+0x1c6>
 80199cc:	2300      	movs	r3, #0
 80199ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80199d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80199d6:	f10a 0a01 	add.w	sl, sl, #1
 80199da:	9304      	str	r3, [sp, #16]
 80199dc:	9307      	str	r3, [sp, #28]
 80199de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80199e2:	931a      	str	r3, [sp, #104]	; 0x68
 80199e4:	4654      	mov	r4, sl
 80199e6:	2205      	movs	r2, #5
 80199e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199ec:	4850      	ldr	r0, [pc, #320]	; (8019b30 <_svfiprintf_r+0x1e8>)
 80199ee:	f7e6 fc1f 	bl	8000230 <memchr>
 80199f2:	9a04      	ldr	r2, [sp, #16]
 80199f4:	b9d8      	cbnz	r0, 8019a2e <_svfiprintf_r+0xe6>
 80199f6:	06d0      	lsls	r0, r2, #27
 80199f8:	bf44      	itt	mi
 80199fa:	2320      	movmi	r3, #32
 80199fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a00:	0711      	lsls	r1, r2, #28
 8019a02:	bf44      	itt	mi
 8019a04:	232b      	movmi	r3, #43	; 0x2b
 8019a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8019a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8019a10:	d015      	beq.n	8019a3e <_svfiprintf_r+0xf6>
 8019a12:	9a07      	ldr	r2, [sp, #28]
 8019a14:	4654      	mov	r4, sl
 8019a16:	2000      	movs	r0, #0
 8019a18:	f04f 0c0a 	mov.w	ip, #10
 8019a1c:	4621      	mov	r1, r4
 8019a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019a22:	3b30      	subs	r3, #48	; 0x30
 8019a24:	2b09      	cmp	r3, #9
 8019a26:	d94d      	bls.n	8019ac4 <_svfiprintf_r+0x17c>
 8019a28:	b1b0      	cbz	r0, 8019a58 <_svfiprintf_r+0x110>
 8019a2a:	9207      	str	r2, [sp, #28]
 8019a2c:	e014      	b.n	8019a58 <_svfiprintf_r+0x110>
 8019a2e:	eba0 0308 	sub.w	r3, r0, r8
 8019a32:	fa09 f303 	lsl.w	r3, r9, r3
 8019a36:	4313      	orrs	r3, r2
 8019a38:	9304      	str	r3, [sp, #16]
 8019a3a:	46a2      	mov	sl, r4
 8019a3c:	e7d2      	b.n	80199e4 <_svfiprintf_r+0x9c>
 8019a3e:	9b03      	ldr	r3, [sp, #12]
 8019a40:	1d19      	adds	r1, r3, #4
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	9103      	str	r1, [sp, #12]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	bfbb      	ittet	lt
 8019a4a:	425b      	neglt	r3, r3
 8019a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8019a50:	9307      	strge	r3, [sp, #28]
 8019a52:	9307      	strlt	r3, [sp, #28]
 8019a54:	bfb8      	it	lt
 8019a56:	9204      	strlt	r2, [sp, #16]
 8019a58:	7823      	ldrb	r3, [r4, #0]
 8019a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8019a5c:	d10c      	bne.n	8019a78 <_svfiprintf_r+0x130>
 8019a5e:	7863      	ldrb	r3, [r4, #1]
 8019a60:	2b2a      	cmp	r3, #42	; 0x2a
 8019a62:	d134      	bne.n	8019ace <_svfiprintf_r+0x186>
 8019a64:	9b03      	ldr	r3, [sp, #12]
 8019a66:	1d1a      	adds	r2, r3, #4
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	9203      	str	r2, [sp, #12]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	bfb8      	it	lt
 8019a70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019a74:	3402      	adds	r4, #2
 8019a76:	9305      	str	r3, [sp, #20]
 8019a78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019b40 <_svfiprintf_r+0x1f8>
 8019a7c:	7821      	ldrb	r1, [r4, #0]
 8019a7e:	2203      	movs	r2, #3
 8019a80:	4650      	mov	r0, sl
 8019a82:	f7e6 fbd5 	bl	8000230 <memchr>
 8019a86:	b138      	cbz	r0, 8019a98 <_svfiprintf_r+0x150>
 8019a88:	9b04      	ldr	r3, [sp, #16]
 8019a8a:	eba0 000a 	sub.w	r0, r0, sl
 8019a8e:	2240      	movs	r2, #64	; 0x40
 8019a90:	4082      	lsls	r2, r0
 8019a92:	4313      	orrs	r3, r2
 8019a94:	3401      	adds	r4, #1
 8019a96:	9304      	str	r3, [sp, #16]
 8019a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a9c:	4825      	ldr	r0, [pc, #148]	; (8019b34 <_svfiprintf_r+0x1ec>)
 8019a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019aa2:	2206      	movs	r2, #6
 8019aa4:	f7e6 fbc4 	bl	8000230 <memchr>
 8019aa8:	2800      	cmp	r0, #0
 8019aaa:	d038      	beq.n	8019b1e <_svfiprintf_r+0x1d6>
 8019aac:	4b22      	ldr	r3, [pc, #136]	; (8019b38 <_svfiprintf_r+0x1f0>)
 8019aae:	bb1b      	cbnz	r3, 8019af8 <_svfiprintf_r+0x1b0>
 8019ab0:	9b03      	ldr	r3, [sp, #12]
 8019ab2:	3307      	adds	r3, #7
 8019ab4:	f023 0307 	bic.w	r3, r3, #7
 8019ab8:	3308      	adds	r3, #8
 8019aba:	9303      	str	r3, [sp, #12]
 8019abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019abe:	4433      	add	r3, r6
 8019ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8019ac2:	e768      	b.n	8019996 <_svfiprintf_r+0x4e>
 8019ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8019ac8:	460c      	mov	r4, r1
 8019aca:	2001      	movs	r0, #1
 8019acc:	e7a6      	b.n	8019a1c <_svfiprintf_r+0xd4>
 8019ace:	2300      	movs	r3, #0
 8019ad0:	3401      	adds	r4, #1
 8019ad2:	9305      	str	r3, [sp, #20]
 8019ad4:	4619      	mov	r1, r3
 8019ad6:	f04f 0c0a 	mov.w	ip, #10
 8019ada:	4620      	mov	r0, r4
 8019adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ae0:	3a30      	subs	r2, #48	; 0x30
 8019ae2:	2a09      	cmp	r2, #9
 8019ae4:	d903      	bls.n	8019aee <_svfiprintf_r+0x1a6>
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d0c6      	beq.n	8019a78 <_svfiprintf_r+0x130>
 8019aea:	9105      	str	r1, [sp, #20]
 8019aec:	e7c4      	b.n	8019a78 <_svfiprintf_r+0x130>
 8019aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8019af2:	4604      	mov	r4, r0
 8019af4:	2301      	movs	r3, #1
 8019af6:	e7f0      	b.n	8019ada <_svfiprintf_r+0x192>
 8019af8:	ab03      	add	r3, sp, #12
 8019afa:	9300      	str	r3, [sp, #0]
 8019afc:	462a      	mov	r2, r5
 8019afe:	4b0f      	ldr	r3, [pc, #60]	; (8019b3c <_svfiprintf_r+0x1f4>)
 8019b00:	a904      	add	r1, sp, #16
 8019b02:	4638      	mov	r0, r7
 8019b04:	f3af 8000 	nop.w
 8019b08:	1c42      	adds	r2, r0, #1
 8019b0a:	4606      	mov	r6, r0
 8019b0c:	d1d6      	bne.n	8019abc <_svfiprintf_r+0x174>
 8019b0e:	89ab      	ldrh	r3, [r5, #12]
 8019b10:	065b      	lsls	r3, r3, #25
 8019b12:	f53f af2d 	bmi.w	8019970 <_svfiprintf_r+0x28>
 8019b16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019b18:	b01d      	add	sp, #116	; 0x74
 8019b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b1e:	ab03      	add	r3, sp, #12
 8019b20:	9300      	str	r3, [sp, #0]
 8019b22:	462a      	mov	r2, r5
 8019b24:	4b05      	ldr	r3, [pc, #20]	; (8019b3c <_svfiprintf_r+0x1f4>)
 8019b26:	a904      	add	r1, sp, #16
 8019b28:	4638      	mov	r0, r7
 8019b2a:	f000 f9bd 	bl	8019ea8 <_printf_i>
 8019b2e:	e7eb      	b.n	8019b08 <_svfiprintf_r+0x1c0>
 8019b30:	0801bbfd 	.word	0x0801bbfd
 8019b34:	0801bc07 	.word	0x0801bc07
 8019b38:	00000000 	.word	0x00000000
 8019b3c:	08019895 	.word	0x08019895
 8019b40:	0801bc03 	.word	0x0801bc03

08019b44 <__sfputc_r>:
 8019b44:	6893      	ldr	r3, [r2, #8]
 8019b46:	3b01      	subs	r3, #1
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	b410      	push	{r4}
 8019b4c:	6093      	str	r3, [r2, #8]
 8019b4e:	da08      	bge.n	8019b62 <__sfputc_r+0x1e>
 8019b50:	6994      	ldr	r4, [r2, #24]
 8019b52:	42a3      	cmp	r3, r4
 8019b54:	db01      	blt.n	8019b5a <__sfputc_r+0x16>
 8019b56:	290a      	cmp	r1, #10
 8019b58:	d103      	bne.n	8019b62 <__sfputc_r+0x1e>
 8019b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b5e:	f7ff bcb6 	b.w	80194ce <__swbuf_r>
 8019b62:	6813      	ldr	r3, [r2, #0]
 8019b64:	1c58      	adds	r0, r3, #1
 8019b66:	6010      	str	r0, [r2, #0]
 8019b68:	7019      	strb	r1, [r3, #0]
 8019b6a:	4608      	mov	r0, r1
 8019b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b70:	4770      	bx	lr

08019b72 <__sfputs_r>:
 8019b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b74:	4606      	mov	r6, r0
 8019b76:	460f      	mov	r7, r1
 8019b78:	4614      	mov	r4, r2
 8019b7a:	18d5      	adds	r5, r2, r3
 8019b7c:	42ac      	cmp	r4, r5
 8019b7e:	d101      	bne.n	8019b84 <__sfputs_r+0x12>
 8019b80:	2000      	movs	r0, #0
 8019b82:	e007      	b.n	8019b94 <__sfputs_r+0x22>
 8019b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b88:	463a      	mov	r2, r7
 8019b8a:	4630      	mov	r0, r6
 8019b8c:	f7ff ffda 	bl	8019b44 <__sfputc_r>
 8019b90:	1c43      	adds	r3, r0, #1
 8019b92:	d1f3      	bne.n	8019b7c <__sfputs_r+0xa>
 8019b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019b98 <_vfiprintf_r>:
 8019b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b9c:	460d      	mov	r5, r1
 8019b9e:	b09d      	sub	sp, #116	; 0x74
 8019ba0:	4614      	mov	r4, r2
 8019ba2:	4698      	mov	r8, r3
 8019ba4:	4606      	mov	r6, r0
 8019ba6:	b118      	cbz	r0, 8019bb0 <_vfiprintf_r+0x18>
 8019ba8:	6a03      	ldr	r3, [r0, #32]
 8019baa:	b90b      	cbnz	r3, 8019bb0 <_vfiprintf_r+0x18>
 8019bac:	f7ff fbf6 	bl	801939c <__sinit>
 8019bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bb2:	07d9      	lsls	r1, r3, #31
 8019bb4:	d405      	bmi.n	8019bc2 <_vfiprintf_r+0x2a>
 8019bb6:	89ab      	ldrh	r3, [r5, #12]
 8019bb8:	059a      	lsls	r2, r3, #22
 8019bba:	d402      	bmi.n	8019bc2 <_vfiprintf_r+0x2a>
 8019bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bbe:	f7ff fdee 	bl	801979e <__retarget_lock_acquire_recursive>
 8019bc2:	89ab      	ldrh	r3, [r5, #12]
 8019bc4:	071b      	lsls	r3, r3, #28
 8019bc6:	d501      	bpl.n	8019bcc <_vfiprintf_r+0x34>
 8019bc8:	692b      	ldr	r3, [r5, #16]
 8019bca:	b99b      	cbnz	r3, 8019bf4 <_vfiprintf_r+0x5c>
 8019bcc:	4629      	mov	r1, r5
 8019bce:	4630      	mov	r0, r6
 8019bd0:	f7ff fcba 	bl	8019548 <__swsetup_r>
 8019bd4:	b170      	cbz	r0, 8019bf4 <_vfiprintf_r+0x5c>
 8019bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bd8:	07dc      	lsls	r4, r3, #31
 8019bda:	d504      	bpl.n	8019be6 <_vfiprintf_r+0x4e>
 8019bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019be0:	b01d      	add	sp, #116	; 0x74
 8019be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019be6:	89ab      	ldrh	r3, [r5, #12]
 8019be8:	0598      	lsls	r0, r3, #22
 8019bea:	d4f7      	bmi.n	8019bdc <_vfiprintf_r+0x44>
 8019bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bee:	f7ff fdd7 	bl	80197a0 <__retarget_lock_release_recursive>
 8019bf2:	e7f3      	b.n	8019bdc <_vfiprintf_r+0x44>
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8019bf8:	2320      	movs	r3, #32
 8019bfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8019c02:	2330      	movs	r3, #48	; 0x30
 8019c04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019db8 <_vfiprintf_r+0x220>
 8019c08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019c0c:	f04f 0901 	mov.w	r9, #1
 8019c10:	4623      	mov	r3, r4
 8019c12:	469a      	mov	sl, r3
 8019c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c18:	b10a      	cbz	r2, 8019c1e <_vfiprintf_r+0x86>
 8019c1a:	2a25      	cmp	r2, #37	; 0x25
 8019c1c:	d1f9      	bne.n	8019c12 <_vfiprintf_r+0x7a>
 8019c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8019c22:	d00b      	beq.n	8019c3c <_vfiprintf_r+0xa4>
 8019c24:	465b      	mov	r3, fp
 8019c26:	4622      	mov	r2, r4
 8019c28:	4629      	mov	r1, r5
 8019c2a:	4630      	mov	r0, r6
 8019c2c:	f7ff ffa1 	bl	8019b72 <__sfputs_r>
 8019c30:	3001      	adds	r0, #1
 8019c32:	f000 80a9 	beq.w	8019d88 <_vfiprintf_r+0x1f0>
 8019c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c38:	445a      	add	r2, fp
 8019c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8019c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	f000 80a1 	beq.w	8019d88 <_vfiprintf_r+0x1f0>
 8019c46:	2300      	movs	r3, #0
 8019c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c50:	f10a 0a01 	add.w	sl, sl, #1
 8019c54:	9304      	str	r3, [sp, #16]
 8019c56:	9307      	str	r3, [sp, #28]
 8019c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c5c:	931a      	str	r3, [sp, #104]	; 0x68
 8019c5e:	4654      	mov	r4, sl
 8019c60:	2205      	movs	r2, #5
 8019c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c66:	4854      	ldr	r0, [pc, #336]	; (8019db8 <_vfiprintf_r+0x220>)
 8019c68:	f7e6 fae2 	bl	8000230 <memchr>
 8019c6c:	9a04      	ldr	r2, [sp, #16]
 8019c6e:	b9d8      	cbnz	r0, 8019ca8 <_vfiprintf_r+0x110>
 8019c70:	06d1      	lsls	r1, r2, #27
 8019c72:	bf44      	itt	mi
 8019c74:	2320      	movmi	r3, #32
 8019c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c7a:	0713      	lsls	r3, r2, #28
 8019c7c:	bf44      	itt	mi
 8019c7e:	232b      	movmi	r3, #43	; 0x2b
 8019c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c84:	f89a 3000 	ldrb.w	r3, [sl]
 8019c88:	2b2a      	cmp	r3, #42	; 0x2a
 8019c8a:	d015      	beq.n	8019cb8 <_vfiprintf_r+0x120>
 8019c8c:	9a07      	ldr	r2, [sp, #28]
 8019c8e:	4654      	mov	r4, sl
 8019c90:	2000      	movs	r0, #0
 8019c92:	f04f 0c0a 	mov.w	ip, #10
 8019c96:	4621      	mov	r1, r4
 8019c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c9c:	3b30      	subs	r3, #48	; 0x30
 8019c9e:	2b09      	cmp	r3, #9
 8019ca0:	d94d      	bls.n	8019d3e <_vfiprintf_r+0x1a6>
 8019ca2:	b1b0      	cbz	r0, 8019cd2 <_vfiprintf_r+0x13a>
 8019ca4:	9207      	str	r2, [sp, #28]
 8019ca6:	e014      	b.n	8019cd2 <_vfiprintf_r+0x13a>
 8019ca8:	eba0 0308 	sub.w	r3, r0, r8
 8019cac:	fa09 f303 	lsl.w	r3, r9, r3
 8019cb0:	4313      	orrs	r3, r2
 8019cb2:	9304      	str	r3, [sp, #16]
 8019cb4:	46a2      	mov	sl, r4
 8019cb6:	e7d2      	b.n	8019c5e <_vfiprintf_r+0xc6>
 8019cb8:	9b03      	ldr	r3, [sp, #12]
 8019cba:	1d19      	adds	r1, r3, #4
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	9103      	str	r1, [sp, #12]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	bfbb      	ittet	lt
 8019cc4:	425b      	neglt	r3, r3
 8019cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8019cca:	9307      	strge	r3, [sp, #28]
 8019ccc:	9307      	strlt	r3, [sp, #28]
 8019cce:	bfb8      	it	lt
 8019cd0:	9204      	strlt	r2, [sp, #16]
 8019cd2:	7823      	ldrb	r3, [r4, #0]
 8019cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8019cd6:	d10c      	bne.n	8019cf2 <_vfiprintf_r+0x15a>
 8019cd8:	7863      	ldrb	r3, [r4, #1]
 8019cda:	2b2a      	cmp	r3, #42	; 0x2a
 8019cdc:	d134      	bne.n	8019d48 <_vfiprintf_r+0x1b0>
 8019cde:	9b03      	ldr	r3, [sp, #12]
 8019ce0:	1d1a      	adds	r2, r3, #4
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	9203      	str	r2, [sp, #12]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	bfb8      	it	lt
 8019cea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019cee:	3402      	adds	r4, #2
 8019cf0:	9305      	str	r3, [sp, #20]
 8019cf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019dc8 <_vfiprintf_r+0x230>
 8019cf6:	7821      	ldrb	r1, [r4, #0]
 8019cf8:	2203      	movs	r2, #3
 8019cfa:	4650      	mov	r0, sl
 8019cfc:	f7e6 fa98 	bl	8000230 <memchr>
 8019d00:	b138      	cbz	r0, 8019d12 <_vfiprintf_r+0x17a>
 8019d02:	9b04      	ldr	r3, [sp, #16]
 8019d04:	eba0 000a 	sub.w	r0, r0, sl
 8019d08:	2240      	movs	r2, #64	; 0x40
 8019d0a:	4082      	lsls	r2, r0
 8019d0c:	4313      	orrs	r3, r2
 8019d0e:	3401      	adds	r4, #1
 8019d10:	9304      	str	r3, [sp, #16]
 8019d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d16:	4829      	ldr	r0, [pc, #164]	; (8019dbc <_vfiprintf_r+0x224>)
 8019d18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d1c:	2206      	movs	r2, #6
 8019d1e:	f7e6 fa87 	bl	8000230 <memchr>
 8019d22:	2800      	cmp	r0, #0
 8019d24:	d03f      	beq.n	8019da6 <_vfiprintf_r+0x20e>
 8019d26:	4b26      	ldr	r3, [pc, #152]	; (8019dc0 <_vfiprintf_r+0x228>)
 8019d28:	bb1b      	cbnz	r3, 8019d72 <_vfiprintf_r+0x1da>
 8019d2a:	9b03      	ldr	r3, [sp, #12]
 8019d2c:	3307      	adds	r3, #7
 8019d2e:	f023 0307 	bic.w	r3, r3, #7
 8019d32:	3308      	adds	r3, #8
 8019d34:	9303      	str	r3, [sp, #12]
 8019d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d38:	443b      	add	r3, r7
 8019d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8019d3c:	e768      	b.n	8019c10 <_vfiprintf_r+0x78>
 8019d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d42:	460c      	mov	r4, r1
 8019d44:	2001      	movs	r0, #1
 8019d46:	e7a6      	b.n	8019c96 <_vfiprintf_r+0xfe>
 8019d48:	2300      	movs	r3, #0
 8019d4a:	3401      	adds	r4, #1
 8019d4c:	9305      	str	r3, [sp, #20]
 8019d4e:	4619      	mov	r1, r3
 8019d50:	f04f 0c0a 	mov.w	ip, #10
 8019d54:	4620      	mov	r0, r4
 8019d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d5a:	3a30      	subs	r2, #48	; 0x30
 8019d5c:	2a09      	cmp	r2, #9
 8019d5e:	d903      	bls.n	8019d68 <_vfiprintf_r+0x1d0>
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d0c6      	beq.n	8019cf2 <_vfiprintf_r+0x15a>
 8019d64:	9105      	str	r1, [sp, #20]
 8019d66:	e7c4      	b.n	8019cf2 <_vfiprintf_r+0x15a>
 8019d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d6c:	4604      	mov	r4, r0
 8019d6e:	2301      	movs	r3, #1
 8019d70:	e7f0      	b.n	8019d54 <_vfiprintf_r+0x1bc>
 8019d72:	ab03      	add	r3, sp, #12
 8019d74:	9300      	str	r3, [sp, #0]
 8019d76:	462a      	mov	r2, r5
 8019d78:	4b12      	ldr	r3, [pc, #72]	; (8019dc4 <_vfiprintf_r+0x22c>)
 8019d7a:	a904      	add	r1, sp, #16
 8019d7c:	4630      	mov	r0, r6
 8019d7e:	f3af 8000 	nop.w
 8019d82:	4607      	mov	r7, r0
 8019d84:	1c78      	adds	r0, r7, #1
 8019d86:	d1d6      	bne.n	8019d36 <_vfiprintf_r+0x19e>
 8019d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019d8a:	07d9      	lsls	r1, r3, #31
 8019d8c:	d405      	bmi.n	8019d9a <_vfiprintf_r+0x202>
 8019d8e:	89ab      	ldrh	r3, [r5, #12]
 8019d90:	059a      	lsls	r2, r3, #22
 8019d92:	d402      	bmi.n	8019d9a <_vfiprintf_r+0x202>
 8019d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019d96:	f7ff fd03 	bl	80197a0 <__retarget_lock_release_recursive>
 8019d9a:	89ab      	ldrh	r3, [r5, #12]
 8019d9c:	065b      	lsls	r3, r3, #25
 8019d9e:	f53f af1d 	bmi.w	8019bdc <_vfiprintf_r+0x44>
 8019da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019da4:	e71c      	b.n	8019be0 <_vfiprintf_r+0x48>
 8019da6:	ab03      	add	r3, sp, #12
 8019da8:	9300      	str	r3, [sp, #0]
 8019daa:	462a      	mov	r2, r5
 8019dac:	4b05      	ldr	r3, [pc, #20]	; (8019dc4 <_vfiprintf_r+0x22c>)
 8019dae:	a904      	add	r1, sp, #16
 8019db0:	4630      	mov	r0, r6
 8019db2:	f000 f879 	bl	8019ea8 <_printf_i>
 8019db6:	e7e4      	b.n	8019d82 <_vfiprintf_r+0x1ea>
 8019db8:	0801bbfd 	.word	0x0801bbfd
 8019dbc:	0801bc07 	.word	0x0801bc07
 8019dc0:	00000000 	.word	0x00000000
 8019dc4:	08019b73 	.word	0x08019b73
 8019dc8:	0801bc03 	.word	0x0801bc03

08019dcc <_printf_common>:
 8019dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dd0:	4616      	mov	r6, r2
 8019dd2:	4699      	mov	r9, r3
 8019dd4:	688a      	ldr	r2, [r1, #8]
 8019dd6:	690b      	ldr	r3, [r1, #16]
 8019dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019ddc:	4293      	cmp	r3, r2
 8019dde:	bfb8      	it	lt
 8019de0:	4613      	movlt	r3, r2
 8019de2:	6033      	str	r3, [r6, #0]
 8019de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019de8:	4607      	mov	r7, r0
 8019dea:	460c      	mov	r4, r1
 8019dec:	b10a      	cbz	r2, 8019df2 <_printf_common+0x26>
 8019dee:	3301      	adds	r3, #1
 8019df0:	6033      	str	r3, [r6, #0]
 8019df2:	6823      	ldr	r3, [r4, #0]
 8019df4:	0699      	lsls	r1, r3, #26
 8019df6:	bf42      	ittt	mi
 8019df8:	6833      	ldrmi	r3, [r6, #0]
 8019dfa:	3302      	addmi	r3, #2
 8019dfc:	6033      	strmi	r3, [r6, #0]
 8019dfe:	6825      	ldr	r5, [r4, #0]
 8019e00:	f015 0506 	ands.w	r5, r5, #6
 8019e04:	d106      	bne.n	8019e14 <_printf_common+0x48>
 8019e06:	f104 0a19 	add.w	sl, r4, #25
 8019e0a:	68e3      	ldr	r3, [r4, #12]
 8019e0c:	6832      	ldr	r2, [r6, #0]
 8019e0e:	1a9b      	subs	r3, r3, r2
 8019e10:	42ab      	cmp	r3, r5
 8019e12:	dc26      	bgt.n	8019e62 <_printf_common+0x96>
 8019e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019e18:	1e13      	subs	r3, r2, #0
 8019e1a:	6822      	ldr	r2, [r4, #0]
 8019e1c:	bf18      	it	ne
 8019e1e:	2301      	movne	r3, #1
 8019e20:	0692      	lsls	r2, r2, #26
 8019e22:	d42b      	bmi.n	8019e7c <_printf_common+0xb0>
 8019e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019e28:	4649      	mov	r1, r9
 8019e2a:	4638      	mov	r0, r7
 8019e2c:	47c0      	blx	r8
 8019e2e:	3001      	adds	r0, #1
 8019e30:	d01e      	beq.n	8019e70 <_printf_common+0xa4>
 8019e32:	6823      	ldr	r3, [r4, #0]
 8019e34:	6922      	ldr	r2, [r4, #16]
 8019e36:	f003 0306 	and.w	r3, r3, #6
 8019e3a:	2b04      	cmp	r3, #4
 8019e3c:	bf02      	ittt	eq
 8019e3e:	68e5      	ldreq	r5, [r4, #12]
 8019e40:	6833      	ldreq	r3, [r6, #0]
 8019e42:	1aed      	subeq	r5, r5, r3
 8019e44:	68a3      	ldr	r3, [r4, #8]
 8019e46:	bf0c      	ite	eq
 8019e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e4c:	2500      	movne	r5, #0
 8019e4e:	4293      	cmp	r3, r2
 8019e50:	bfc4      	itt	gt
 8019e52:	1a9b      	subgt	r3, r3, r2
 8019e54:	18ed      	addgt	r5, r5, r3
 8019e56:	2600      	movs	r6, #0
 8019e58:	341a      	adds	r4, #26
 8019e5a:	42b5      	cmp	r5, r6
 8019e5c:	d11a      	bne.n	8019e94 <_printf_common+0xc8>
 8019e5e:	2000      	movs	r0, #0
 8019e60:	e008      	b.n	8019e74 <_printf_common+0xa8>
 8019e62:	2301      	movs	r3, #1
 8019e64:	4652      	mov	r2, sl
 8019e66:	4649      	mov	r1, r9
 8019e68:	4638      	mov	r0, r7
 8019e6a:	47c0      	blx	r8
 8019e6c:	3001      	adds	r0, #1
 8019e6e:	d103      	bne.n	8019e78 <_printf_common+0xac>
 8019e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e78:	3501      	adds	r5, #1
 8019e7a:	e7c6      	b.n	8019e0a <_printf_common+0x3e>
 8019e7c:	18e1      	adds	r1, r4, r3
 8019e7e:	1c5a      	adds	r2, r3, #1
 8019e80:	2030      	movs	r0, #48	; 0x30
 8019e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019e86:	4422      	add	r2, r4
 8019e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019e90:	3302      	adds	r3, #2
 8019e92:	e7c7      	b.n	8019e24 <_printf_common+0x58>
 8019e94:	2301      	movs	r3, #1
 8019e96:	4622      	mov	r2, r4
 8019e98:	4649      	mov	r1, r9
 8019e9a:	4638      	mov	r0, r7
 8019e9c:	47c0      	blx	r8
 8019e9e:	3001      	adds	r0, #1
 8019ea0:	d0e6      	beq.n	8019e70 <_printf_common+0xa4>
 8019ea2:	3601      	adds	r6, #1
 8019ea4:	e7d9      	b.n	8019e5a <_printf_common+0x8e>
	...

08019ea8 <_printf_i>:
 8019ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019eac:	7e0f      	ldrb	r7, [r1, #24]
 8019eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019eb0:	2f78      	cmp	r7, #120	; 0x78
 8019eb2:	4691      	mov	r9, r2
 8019eb4:	4680      	mov	r8, r0
 8019eb6:	460c      	mov	r4, r1
 8019eb8:	469a      	mov	sl, r3
 8019eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019ebe:	d807      	bhi.n	8019ed0 <_printf_i+0x28>
 8019ec0:	2f62      	cmp	r7, #98	; 0x62
 8019ec2:	d80a      	bhi.n	8019eda <_printf_i+0x32>
 8019ec4:	2f00      	cmp	r7, #0
 8019ec6:	f000 80d4 	beq.w	801a072 <_printf_i+0x1ca>
 8019eca:	2f58      	cmp	r7, #88	; 0x58
 8019ecc:	f000 80c0 	beq.w	801a050 <_printf_i+0x1a8>
 8019ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019ed8:	e03a      	b.n	8019f50 <_printf_i+0xa8>
 8019eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019ede:	2b15      	cmp	r3, #21
 8019ee0:	d8f6      	bhi.n	8019ed0 <_printf_i+0x28>
 8019ee2:	a101      	add	r1, pc, #4	; (adr r1, 8019ee8 <_printf_i+0x40>)
 8019ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019ee8:	08019f41 	.word	0x08019f41
 8019eec:	08019f55 	.word	0x08019f55
 8019ef0:	08019ed1 	.word	0x08019ed1
 8019ef4:	08019ed1 	.word	0x08019ed1
 8019ef8:	08019ed1 	.word	0x08019ed1
 8019efc:	08019ed1 	.word	0x08019ed1
 8019f00:	08019f55 	.word	0x08019f55
 8019f04:	08019ed1 	.word	0x08019ed1
 8019f08:	08019ed1 	.word	0x08019ed1
 8019f0c:	08019ed1 	.word	0x08019ed1
 8019f10:	08019ed1 	.word	0x08019ed1
 8019f14:	0801a059 	.word	0x0801a059
 8019f18:	08019f81 	.word	0x08019f81
 8019f1c:	0801a013 	.word	0x0801a013
 8019f20:	08019ed1 	.word	0x08019ed1
 8019f24:	08019ed1 	.word	0x08019ed1
 8019f28:	0801a07b 	.word	0x0801a07b
 8019f2c:	08019ed1 	.word	0x08019ed1
 8019f30:	08019f81 	.word	0x08019f81
 8019f34:	08019ed1 	.word	0x08019ed1
 8019f38:	08019ed1 	.word	0x08019ed1
 8019f3c:	0801a01b 	.word	0x0801a01b
 8019f40:	682b      	ldr	r3, [r5, #0]
 8019f42:	1d1a      	adds	r2, r3, #4
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	602a      	str	r2, [r5, #0]
 8019f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019f50:	2301      	movs	r3, #1
 8019f52:	e09f      	b.n	801a094 <_printf_i+0x1ec>
 8019f54:	6820      	ldr	r0, [r4, #0]
 8019f56:	682b      	ldr	r3, [r5, #0]
 8019f58:	0607      	lsls	r7, r0, #24
 8019f5a:	f103 0104 	add.w	r1, r3, #4
 8019f5e:	6029      	str	r1, [r5, #0]
 8019f60:	d501      	bpl.n	8019f66 <_printf_i+0xbe>
 8019f62:	681e      	ldr	r6, [r3, #0]
 8019f64:	e003      	b.n	8019f6e <_printf_i+0xc6>
 8019f66:	0646      	lsls	r6, r0, #25
 8019f68:	d5fb      	bpl.n	8019f62 <_printf_i+0xba>
 8019f6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019f6e:	2e00      	cmp	r6, #0
 8019f70:	da03      	bge.n	8019f7a <_printf_i+0xd2>
 8019f72:	232d      	movs	r3, #45	; 0x2d
 8019f74:	4276      	negs	r6, r6
 8019f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f7a:	485a      	ldr	r0, [pc, #360]	; (801a0e4 <_printf_i+0x23c>)
 8019f7c:	230a      	movs	r3, #10
 8019f7e:	e012      	b.n	8019fa6 <_printf_i+0xfe>
 8019f80:	682b      	ldr	r3, [r5, #0]
 8019f82:	6820      	ldr	r0, [r4, #0]
 8019f84:	1d19      	adds	r1, r3, #4
 8019f86:	6029      	str	r1, [r5, #0]
 8019f88:	0605      	lsls	r5, r0, #24
 8019f8a:	d501      	bpl.n	8019f90 <_printf_i+0xe8>
 8019f8c:	681e      	ldr	r6, [r3, #0]
 8019f8e:	e002      	b.n	8019f96 <_printf_i+0xee>
 8019f90:	0641      	lsls	r1, r0, #25
 8019f92:	d5fb      	bpl.n	8019f8c <_printf_i+0xe4>
 8019f94:	881e      	ldrh	r6, [r3, #0]
 8019f96:	4853      	ldr	r0, [pc, #332]	; (801a0e4 <_printf_i+0x23c>)
 8019f98:	2f6f      	cmp	r7, #111	; 0x6f
 8019f9a:	bf0c      	ite	eq
 8019f9c:	2308      	moveq	r3, #8
 8019f9e:	230a      	movne	r3, #10
 8019fa0:	2100      	movs	r1, #0
 8019fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019fa6:	6865      	ldr	r5, [r4, #4]
 8019fa8:	60a5      	str	r5, [r4, #8]
 8019faa:	2d00      	cmp	r5, #0
 8019fac:	bfa2      	ittt	ge
 8019fae:	6821      	ldrge	r1, [r4, #0]
 8019fb0:	f021 0104 	bicge.w	r1, r1, #4
 8019fb4:	6021      	strge	r1, [r4, #0]
 8019fb6:	b90e      	cbnz	r6, 8019fbc <_printf_i+0x114>
 8019fb8:	2d00      	cmp	r5, #0
 8019fba:	d04b      	beq.n	801a054 <_printf_i+0x1ac>
 8019fbc:	4615      	mov	r5, r2
 8019fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8019fc2:	fb03 6711 	mls	r7, r3, r1, r6
 8019fc6:	5dc7      	ldrb	r7, [r0, r7]
 8019fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019fcc:	4637      	mov	r7, r6
 8019fce:	42bb      	cmp	r3, r7
 8019fd0:	460e      	mov	r6, r1
 8019fd2:	d9f4      	bls.n	8019fbe <_printf_i+0x116>
 8019fd4:	2b08      	cmp	r3, #8
 8019fd6:	d10b      	bne.n	8019ff0 <_printf_i+0x148>
 8019fd8:	6823      	ldr	r3, [r4, #0]
 8019fda:	07de      	lsls	r6, r3, #31
 8019fdc:	d508      	bpl.n	8019ff0 <_printf_i+0x148>
 8019fde:	6923      	ldr	r3, [r4, #16]
 8019fe0:	6861      	ldr	r1, [r4, #4]
 8019fe2:	4299      	cmp	r1, r3
 8019fe4:	bfde      	ittt	le
 8019fe6:	2330      	movle	r3, #48	; 0x30
 8019fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019fec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019ff0:	1b52      	subs	r2, r2, r5
 8019ff2:	6122      	str	r2, [r4, #16]
 8019ff4:	f8cd a000 	str.w	sl, [sp]
 8019ff8:	464b      	mov	r3, r9
 8019ffa:	aa03      	add	r2, sp, #12
 8019ffc:	4621      	mov	r1, r4
 8019ffe:	4640      	mov	r0, r8
 801a000:	f7ff fee4 	bl	8019dcc <_printf_common>
 801a004:	3001      	adds	r0, #1
 801a006:	d14a      	bne.n	801a09e <_printf_i+0x1f6>
 801a008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a00c:	b004      	add	sp, #16
 801a00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a012:	6823      	ldr	r3, [r4, #0]
 801a014:	f043 0320 	orr.w	r3, r3, #32
 801a018:	6023      	str	r3, [r4, #0]
 801a01a:	4833      	ldr	r0, [pc, #204]	; (801a0e8 <_printf_i+0x240>)
 801a01c:	2778      	movs	r7, #120	; 0x78
 801a01e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a022:	6823      	ldr	r3, [r4, #0]
 801a024:	6829      	ldr	r1, [r5, #0]
 801a026:	061f      	lsls	r7, r3, #24
 801a028:	f851 6b04 	ldr.w	r6, [r1], #4
 801a02c:	d402      	bmi.n	801a034 <_printf_i+0x18c>
 801a02e:	065f      	lsls	r7, r3, #25
 801a030:	bf48      	it	mi
 801a032:	b2b6      	uxthmi	r6, r6
 801a034:	07df      	lsls	r7, r3, #31
 801a036:	bf48      	it	mi
 801a038:	f043 0320 	orrmi.w	r3, r3, #32
 801a03c:	6029      	str	r1, [r5, #0]
 801a03e:	bf48      	it	mi
 801a040:	6023      	strmi	r3, [r4, #0]
 801a042:	b91e      	cbnz	r6, 801a04c <_printf_i+0x1a4>
 801a044:	6823      	ldr	r3, [r4, #0]
 801a046:	f023 0320 	bic.w	r3, r3, #32
 801a04a:	6023      	str	r3, [r4, #0]
 801a04c:	2310      	movs	r3, #16
 801a04e:	e7a7      	b.n	8019fa0 <_printf_i+0xf8>
 801a050:	4824      	ldr	r0, [pc, #144]	; (801a0e4 <_printf_i+0x23c>)
 801a052:	e7e4      	b.n	801a01e <_printf_i+0x176>
 801a054:	4615      	mov	r5, r2
 801a056:	e7bd      	b.n	8019fd4 <_printf_i+0x12c>
 801a058:	682b      	ldr	r3, [r5, #0]
 801a05a:	6826      	ldr	r6, [r4, #0]
 801a05c:	6961      	ldr	r1, [r4, #20]
 801a05e:	1d18      	adds	r0, r3, #4
 801a060:	6028      	str	r0, [r5, #0]
 801a062:	0635      	lsls	r5, r6, #24
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	d501      	bpl.n	801a06c <_printf_i+0x1c4>
 801a068:	6019      	str	r1, [r3, #0]
 801a06a:	e002      	b.n	801a072 <_printf_i+0x1ca>
 801a06c:	0670      	lsls	r0, r6, #25
 801a06e:	d5fb      	bpl.n	801a068 <_printf_i+0x1c0>
 801a070:	8019      	strh	r1, [r3, #0]
 801a072:	2300      	movs	r3, #0
 801a074:	6123      	str	r3, [r4, #16]
 801a076:	4615      	mov	r5, r2
 801a078:	e7bc      	b.n	8019ff4 <_printf_i+0x14c>
 801a07a:	682b      	ldr	r3, [r5, #0]
 801a07c:	1d1a      	adds	r2, r3, #4
 801a07e:	602a      	str	r2, [r5, #0]
 801a080:	681d      	ldr	r5, [r3, #0]
 801a082:	6862      	ldr	r2, [r4, #4]
 801a084:	2100      	movs	r1, #0
 801a086:	4628      	mov	r0, r5
 801a088:	f7e6 f8d2 	bl	8000230 <memchr>
 801a08c:	b108      	cbz	r0, 801a092 <_printf_i+0x1ea>
 801a08e:	1b40      	subs	r0, r0, r5
 801a090:	6060      	str	r0, [r4, #4]
 801a092:	6863      	ldr	r3, [r4, #4]
 801a094:	6123      	str	r3, [r4, #16]
 801a096:	2300      	movs	r3, #0
 801a098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a09c:	e7aa      	b.n	8019ff4 <_printf_i+0x14c>
 801a09e:	6923      	ldr	r3, [r4, #16]
 801a0a0:	462a      	mov	r2, r5
 801a0a2:	4649      	mov	r1, r9
 801a0a4:	4640      	mov	r0, r8
 801a0a6:	47d0      	blx	sl
 801a0a8:	3001      	adds	r0, #1
 801a0aa:	d0ad      	beq.n	801a008 <_printf_i+0x160>
 801a0ac:	6823      	ldr	r3, [r4, #0]
 801a0ae:	079b      	lsls	r3, r3, #30
 801a0b0:	d413      	bmi.n	801a0da <_printf_i+0x232>
 801a0b2:	68e0      	ldr	r0, [r4, #12]
 801a0b4:	9b03      	ldr	r3, [sp, #12]
 801a0b6:	4298      	cmp	r0, r3
 801a0b8:	bfb8      	it	lt
 801a0ba:	4618      	movlt	r0, r3
 801a0bc:	e7a6      	b.n	801a00c <_printf_i+0x164>
 801a0be:	2301      	movs	r3, #1
 801a0c0:	4632      	mov	r2, r6
 801a0c2:	4649      	mov	r1, r9
 801a0c4:	4640      	mov	r0, r8
 801a0c6:	47d0      	blx	sl
 801a0c8:	3001      	adds	r0, #1
 801a0ca:	d09d      	beq.n	801a008 <_printf_i+0x160>
 801a0cc:	3501      	adds	r5, #1
 801a0ce:	68e3      	ldr	r3, [r4, #12]
 801a0d0:	9903      	ldr	r1, [sp, #12]
 801a0d2:	1a5b      	subs	r3, r3, r1
 801a0d4:	42ab      	cmp	r3, r5
 801a0d6:	dcf2      	bgt.n	801a0be <_printf_i+0x216>
 801a0d8:	e7eb      	b.n	801a0b2 <_printf_i+0x20a>
 801a0da:	2500      	movs	r5, #0
 801a0dc:	f104 0619 	add.w	r6, r4, #25
 801a0e0:	e7f5      	b.n	801a0ce <_printf_i+0x226>
 801a0e2:	bf00      	nop
 801a0e4:	0801bc0e 	.word	0x0801bc0e
 801a0e8:	0801bc1f 	.word	0x0801bc1f

0801a0ec <__sflush_r>:
 801a0ec:	898a      	ldrh	r2, [r1, #12]
 801a0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0f2:	4605      	mov	r5, r0
 801a0f4:	0710      	lsls	r0, r2, #28
 801a0f6:	460c      	mov	r4, r1
 801a0f8:	d458      	bmi.n	801a1ac <__sflush_r+0xc0>
 801a0fa:	684b      	ldr	r3, [r1, #4]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	dc05      	bgt.n	801a10c <__sflush_r+0x20>
 801a100:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a102:	2b00      	cmp	r3, #0
 801a104:	dc02      	bgt.n	801a10c <__sflush_r+0x20>
 801a106:	2000      	movs	r0, #0
 801a108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a10c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a10e:	2e00      	cmp	r6, #0
 801a110:	d0f9      	beq.n	801a106 <__sflush_r+0x1a>
 801a112:	2300      	movs	r3, #0
 801a114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a118:	682f      	ldr	r7, [r5, #0]
 801a11a:	6a21      	ldr	r1, [r4, #32]
 801a11c:	602b      	str	r3, [r5, #0]
 801a11e:	d032      	beq.n	801a186 <__sflush_r+0x9a>
 801a120:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a122:	89a3      	ldrh	r3, [r4, #12]
 801a124:	075a      	lsls	r2, r3, #29
 801a126:	d505      	bpl.n	801a134 <__sflush_r+0x48>
 801a128:	6863      	ldr	r3, [r4, #4]
 801a12a:	1ac0      	subs	r0, r0, r3
 801a12c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a12e:	b10b      	cbz	r3, 801a134 <__sflush_r+0x48>
 801a130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a132:	1ac0      	subs	r0, r0, r3
 801a134:	2300      	movs	r3, #0
 801a136:	4602      	mov	r2, r0
 801a138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a13a:	6a21      	ldr	r1, [r4, #32]
 801a13c:	4628      	mov	r0, r5
 801a13e:	47b0      	blx	r6
 801a140:	1c43      	adds	r3, r0, #1
 801a142:	89a3      	ldrh	r3, [r4, #12]
 801a144:	d106      	bne.n	801a154 <__sflush_r+0x68>
 801a146:	6829      	ldr	r1, [r5, #0]
 801a148:	291d      	cmp	r1, #29
 801a14a:	d82b      	bhi.n	801a1a4 <__sflush_r+0xb8>
 801a14c:	4a29      	ldr	r2, [pc, #164]	; (801a1f4 <__sflush_r+0x108>)
 801a14e:	410a      	asrs	r2, r1
 801a150:	07d6      	lsls	r6, r2, #31
 801a152:	d427      	bmi.n	801a1a4 <__sflush_r+0xb8>
 801a154:	2200      	movs	r2, #0
 801a156:	6062      	str	r2, [r4, #4]
 801a158:	04d9      	lsls	r1, r3, #19
 801a15a:	6922      	ldr	r2, [r4, #16]
 801a15c:	6022      	str	r2, [r4, #0]
 801a15e:	d504      	bpl.n	801a16a <__sflush_r+0x7e>
 801a160:	1c42      	adds	r2, r0, #1
 801a162:	d101      	bne.n	801a168 <__sflush_r+0x7c>
 801a164:	682b      	ldr	r3, [r5, #0]
 801a166:	b903      	cbnz	r3, 801a16a <__sflush_r+0x7e>
 801a168:	6560      	str	r0, [r4, #84]	; 0x54
 801a16a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a16c:	602f      	str	r7, [r5, #0]
 801a16e:	2900      	cmp	r1, #0
 801a170:	d0c9      	beq.n	801a106 <__sflush_r+0x1a>
 801a172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a176:	4299      	cmp	r1, r3
 801a178:	d002      	beq.n	801a180 <__sflush_r+0x94>
 801a17a:	4628      	mov	r0, r5
 801a17c:	f7ff fb3e 	bl	80197fc <_free_r>
 801a180:	2000      	movs	r0, #0
 801a182:	6360      	str	r0, [r4, #52]	; 0x34
 801a184:	e7c0      	b.n	801a108 <__sflush_r+0x1c>
 801a186:	2301      	movs	r3, #1
 801a188:	4628      	mov	r0, r5
 801a18a:	47b0      	blx	r6
 801a18c:	1c41      	adds	r1, r0, #1
 801a18e:	d1c8      	bne.n	801a122 <__sflush_r+0x36>
 801a190:	682b      	ldr	r3, [r5, #0]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d0c5      	beq.n	801a122 <__sflush_r+0x36>
 801a196:	2b1d      	cmp	r3, #29
 801a198:	d001      	beq.n	801a19e <__sflush_r+0xb2>
 801a19a:	2b16      	cmp	r3, #22
 801a19c:	d101      	bne.n	801a1a2 <__sflush_r+0xb6>
 801a19e:	602f      	str	r7, [r5, #0]
 801a1a0:	e7b1      	b.n	801a106 <__sflush_r+0x1a>
 801a1a2:	89a3      	ldrh	r3, [r4, #12]
 801a1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1a8:	81a3      	strh	r3, [r4, #12]
 801a1aa:	e7ad      	b.n	801a108 <__sflush_r+0x1c>
 801a1ac:	690f      	ldr	r7, [r1, #16]
 801a1ae:	2f00      	cmp	r7, #0
 801a1b0:	d0a9      	beq.n	801a106 <__sflush_r+0x1a>
 801a1b2:	0793      	lsls	r3, r2, #30
 801a1b4:	680e      	ldr	r6, [r1, #0]
 801a1b6:	bf08      	it	eq
 801a1b8:	694b      	ldreq	r3, [r1, #20]
 801a1ba:	600f      	str	r7, [r1, #0]
 801a1bc:	bf18      	it	ne
 801a1be:	2300      	movne	r3, #0
 801a1c0:	eba6 0807 	sub.w	r8, r6, r7
 801a1c4:	608b      	str	r3, [r1, #8]
 801a1c6:	f1b8 0f00 	cmp.w	r8, #0
 801a1ca:	dd9c      	ble.n	801a106 <__sflush_r+0x1a>
 801a1cc:	6a21      	ldr	r1, [r4, #32]
 801a1ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a1d0:	4643      	mov	r3, r8
 801a1d2:	463a      	mov	r2, r7
 801a1d4:	4628      	mov	r0, r5
 801a1d6:	47b0      	blx	r6
 801a1d8:	2800      	cmp	r0, #0
 801a1da:	dc06      	bgt.n	801a1ea <__sflush_r+0xfe>
 801a1dc:	89a3      	ldrh	r3, [r4, #12]
 801a1de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1e2:	81a3      	strh	r3, [r4, #12]
 801a1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a1e8:	e78e      	b.n	801a108 <__sflush_r+0x1c>
 801a1ea:	4407      	add	r7, r0
 801a1ec:	eba8 0800 	sub.w	r8, r8, r0
 801a1f0:	e7e9      	b.n	801a1c6 <__sflush_r+0xda>
 801a1f2:	bf00      	nop
 801a1f4:	dfbffffe 	.word	0xdfbffffe

0801a1f8 <_fflush_r>:
 801a1f8:	b538      	push	{r3, r4, r5, lr}
 801a1fa:	690b      	ldr	r3, [r1, #16]
 801a1fc:	4605      	mov	r5, r0
 801a1fe:	460c      	mov	r4, r1
 801a200:	b913      	cbnz	r3, 801a208 <_fflush_r+0x10>
 801a202:	2500      	movs	r5, #0
 801a204:	4628      	mov	r0, r5
 801a206:	bd38      	pop	{r3, r4, r5, pc}
 801a208:	b118      	cbz	r0, 801a212 <_fflush_r+0x1a>
 801a20a:	6a03      	ldr	r3, [r0, #32]
 801a20c:	b90b      	cbnz	r3, 801a212 <_fflush_r+0x1a>
 801a20e:	f7ff f8c5 	bl	801939c <__sinit>
 801a212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a216:	2b00      	cmp	r3, #0
 801a218:	d0f3      	beq.n	801a202 <_fflush_r+0xa>
 801a21a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a21c:	07d0      	lsls	r0, r2, #31
 801a21e:	d404      	bmi.n	801a22a <_fflush_r+0x32>
 801a220:	0599      	lsls	r1, r3, #22
 801a222:	d402      	bmi.n	801a22a <_fflush_r+0x32>
 801a224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a226:	f7ff faba 	bl	801979e <__retarget_lock_acquire_recursive>
 801a22a:	4628      	mov	r0, r5
 801a22c:	4621      	mov	r1, r4
 801a22e:	f7ff ff5d 	bl	801a0ec <__sflush_r>
 801a232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a234:	07da      	lsls	r2, r3, #31
 801a236:	4605      	mov	r5, r0
 801a238:	d4e4      	bmi.n	801a204 <_fflush_r+0xc>
 801a23a:	89a3      	ldrh	r3, [r4, #12]
 801a23c:	059b      	lsls	r3, r3, #22
 801a23e:	d4e1      	bmi.n	801a204 <_fflush_r+0xc>
 801a240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a242:	f7ff faad 	bl	80197a0 <__retarget_lock_release_recursive>
 801a246:	e7dd      	b.n	801a204 <_fflush_r+0xc>

0801a248 <fiprintf>:
 801a248:	b40e      	push	{r1, r2, r3}
 801a24a:	b503      	push	{r0, r1, lr}
 801a24c:	4601      	mov	r1, r0
 801a24e:	ab03      	add	r3, sp, #12
 801a250:	4805      	ldr	r0, [pc, #20]	; (801a268 <fiprintf+0x20>)
 801a252:	f853 2b04 	ldr.w	r2, [r3], #4
 801a256:	6800      	ldr	r0, [r0, #0]
 801a258:	9301      	str	r3, [sp, #4]
 801a25a:	f7ff fc9d 	bl	8019b98 <_vfiprintf_r>
 801a25e:	b002      	add	sp, #8
 801a260:	f85d eb04 	ldr.w	lr, [sp], #4
 801a264:	b003      	add	sp, #12
 801a266:	4770      	bx	lr
 801a268:	2000019c 	.word	0x2000019c

0801a26c <__swhatbuf_r>:
 801a26c:	b570      	push	{r4, r5, r6, lr}
 801a26e:	460c      	mov	r4, r1
 801a270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a274:	2900      	cmp	r1, #0
 801a276:	b096      	sub	sp, #88	; 0x58
 801a278:	4615      	mov	r5, r2
 801a27a:	461e      	mov	r6, r3
 801a27c:	da0d      	bge.n	801a29a <__swhatbuf_r+0x2e>
 801a27e:	89a3      	ldrh	r3, [r4, #12]
 801a280:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a284:	f04f 0100 	mov.w	r1, #0
 801a288:	bf0c      	ite	eq
 801a28a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a28e:	2340      	movne	r3, #64	; 0x40
 801a290:	2000      	movs	r0, #0
 801a292:	6031      	str	r1, [r6, #0]
 801a294:	602b      	str	r3, [r5, #0]
 801a296:	b016      	add	sp, #88	; 0x58
 801a298:	bd70      	pop	{r4, r5, r6, pc}
 801a29a:	466a      	mov	r2, sp
 801a29c:	f000 f848 	bl	801a330 <_fstat_r>
 801a2a0:	2800      	cmp	r0, #0
 801a2a2:	dbec      	blt.n	801a27e <__swhatbuf_r+0x12>
 801a2a4:	9901      	ldr	r1, [sp, #4]
 801a2a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a2aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a2ae:	4259      	negs	r1, r3
 801a2b0:	4159      	adcs	r1, r3
 801a2b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a2b6:	e7eb      	b.n	801a290 <__swhatbuf_r+0x24>

0801a2b8 <__smakebuf_r>:
 801a2b8:	898b      	ldrh	r3, [r1, #12]
 801a2ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a2bc:	079d      	lsls	r5, r3, #30
 801a2be:	4606      	mov	r6, r0
 801a2c0:	460c      	mov	r4, r1
 801a2c2:	d507      	bpl.n	801a2d4 <__smakebuf_r+0x1c>
 801a2c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a2c8:	6023      	str	r3, [r4, #0]
 801a2ca:	6123      	str	r3, [r4, #16]
 801a2cc:	2301      	movs	r3, #1
 801a2ce:	6163      	str	r3, [r4, #20]
 801a2d0:	b002      	add	sp, #8
 801a2d2:	bd70      	pop	{r4, r5, r6, pc}
 801a2d4:	ab01      	add	r3, sp, #4
 801a2d6:	466a      	mov	r2, sp
 801a2d8:	f7ff ffc8 	bl	801a26c <__swhatbuf_r>
 801a2dc:	9900      	ldr	r1, [sp, #0]
 801a2de:	4605      	mov	r5, r0
 801a2e0:	4630      	mov	r0, r6
 801a2e2:	f7fe ff05 	bl	80190f0 <_malloc_r>
 801a2e6:	b948      	cbnz	r0, 801a2fc <__smakebuf_r+0x44>
 801a2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a2ec:	059a      	lsls	r2, r3, #22
 801a2ee:	d4ef      	bmi.n	801a2d0 <__smakebuf_r+0x18>
 801a2f0:	f023 0303 	bic.w	r3, r3, #3
 801a2f4:	f043 0302 	orr.w	r3, r3, #2
 801a2f8:	81a3      	strh	r3, [r4, #12]
 801a2fa:	e7e3      	b.n	801a2c4 <__smakebuf_r+0xc>
 801a2fc:	89a3      	ldrh	r3, [r4, #12]
 801a2fe:	6020      	str	r0, [r4, #0]
 801a300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a304:	81a3      	strh	r3, [r4, #12]
 801a306:	9b00      	ldr	r3, [sp, #0]
 801a308:	6163      	str	r3, [r4, #20]
 801a30a:	9b01      	ldr	r3, [sp, #4]
 801a30c:	6120      	str	r0, [r4, #16]
 801a30e:	b15b      	cbz	r3, 801a328 <__smakebuf_r+0x70>
 801a310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a314:	4630      	mov	r0, r6
 801a316:	f000 f81d 	bl	801a354 <_isatty_r>
 801a31a:	b128      	cbz	r0, 801a328 <__smakebuf_r+0x70>
 801a31c:	89a3      	ldrh	r3, [r4, #12]
 801a31e:	f023 0303 	bic.w	r3, r3, #3
 801a322:	f043 0301 	orr.w	r3, r3, #1
 801a326:	81a3      	strh	r3, [r4, #12]
 801a328:	89a3      	ldrh	r3, [r4, #12]
 801a32a:	431d      	orrs	r5, r3
 801a32c:	81a5      	strh	r5, [r4, #12]
 801a32e:	e7cf      	b.n	801a2d0 <__smakebuf_r+0x18>

0801a330 <_fstat_r>:
 801a330:	b538      	push	{r3, r4, r5, lr}
 801a332:	4d07      	ldr	r5, [pc, #28]	; (801a350 <_fstat_r+0x20>)
 801a334:	2300      	movs	r3, #0
 801a336:	4604      	mov	r4, r0
 801a338:	4608      	mov	r0, r1
 801a33a:	4611      	mov	r1, r2
 801a33c:	602b      	str	r3, [r5, #0]
 801a33e:	f7ed f9e6 	bl	800770e <_fstat>
 801a342:	1c43      	adds	r3, r0, #1
 801a344:	d102      	bne.n	801a34c <_fstat_r+0x1c>
 801a346:	682b      	ldr	r3, [r5, #0]
 801a348:	b103      	cbz	r3, 801a34c <_fstat_r+0x1c>
 801a34a:	6023      	str	r3, [r4, #0]
 801a34c:	bd38      	pop	{r3, r4, r5, pc}
 801a34e:	bf00      	nop
 801a350:	20007a8c 	.word	0x20007a8c

0801a354 <_isatty_r>:
 801a354:	b538      	push	{r3, r4, r5, lr}
 801a356:	4d06      	ldr	r5, [pc, #24]	; (801a370 <_isatty_r+0x1c>)
 801a358:	2300      	movs	r3, #0
 801a35a:	4604      	mov	r4, r0
 801a35c:	4608      	mov	r0, r1
 801a35e:	602b      	str	r3, [r5, #0]
 801a360:	f7ed f9e5 	bl	800772e <_isatty>
 801a364:	1c43      	adds	r3, r0, #1
 801a366:	d102      	bne.n	801a36e <_isatty_r+0x1a>
 801a368:	682b      	ldr	r3, [r5, #0]
 801a36a:	b103      	cbz	r3, 801a36e <_isatty_r+0x1a>
 801a36c:	6023      	str	r3, [r4, #0]
 801a36e:	bd38      	pop	{r3, r4, r5, pc}
 801a370:	20007a8c 	.word	0x20007a8c

0801a374 <abort>:
 801a374:	b508      	push	{r3, lr}
 801a376:	2006      	movs	r0, #6
 801a378:	f000 f85a 	bl	801a430 <raise>
 801a37c:	2001      	movs	r0, #1
 801a37e:	f7ed f977 	bl	8007670 <_exit>

0801a382 <_realloc_r>:
 801a382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a386:	4680      	mov	r8, r0
 801a388:	4614      	mov	r4, r2
 801a38a:	460e      	mov	r6, r1
 801a38c:	b921      	cbnz	r1, 801a398 <_realloc_r+0x16>
 801a38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a392:	4611      	mov	r1, r2
 801a394:	f7fe beac 	b.w	80190f0 <_malloc_r>
 801a398:	b92a      	cbnz	r2, 801a3a6 <_realloc_r+0x24>
 801a39a:	f7ff fa2f 	bl	80197fc <_free_r>
 801a39e:	4625      	mov	r5, r4
 801a3a0:	4628      	mov	r0, r5
 801a3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3a6:	f000 f85f 	bl	801a468 <_malloc_usable_size_r>
 801a3aa:	4284      	cmp	r4, r0
 801a3ac:	4607      	mov	r7, r0
 801a3ae:	d802      	bhi.n	801a3b6 <_realloc_r+0x34>
 801a3b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a3b4:	d812      	bhi.n	801a3dc <_realloc_r+0x5a>
 801a3b6:	4621      	mov	r1, r4
 801a3b8:	4640      	mov	r0, r8
 801a3ba:	f7fe fe99 	bl	80190f0 <_malloc_r>
 801a3be:	4605      	mov	r5, r0
 801a3c0:	2800      	cmp	r0, #0
 801a3c2:	d0ed      	beq.n	801a3a0 <_realloc_r+0x1e>
 801a3c4:	42bc      	cmp	r4, r7
 801a3c6:	4622      	mov	r2, r4
 801a3c8:	4631      	mov	r1, r6
 801a3ca:	bf28      	it	cs
 801a3cc:	463a      	movcs	r2, r7
 801a3ce:	f7ff f9e8 	bl	80197a2 <memcpy>
 801a3d2:	4631      	mov	r1, r6
 801a3d4:	4640      	mov	r0, r8
 801a3d6:	f7ff fa11 	bl	80197fc <_free_r>
 801a3da:	e7e1      	b.n	801a3a0 <_realloc_r+0x1e>
 801a3dc:	4635      	mov	r5, r6
 801a3de:	e7df      	b.n	801a3a0 <_realloc_r+0x1e>

0801a3e0 <_raise_r>:
 801a3e0:	291f      	cmp	r1, #31
 801a3e2:	b538      	push	{r3, r4, r5, lr}
 801a3e4:	4604      	mov	r4, r0
 801a3e6:	460d      	mov	r5, r1
 801a3e8:	d904      	bls.n	801a3f4 <_raise_r+0x14>
 801a3ea:	2316      	movs	r3, #22
 801a3ec:	6003      	str	r3, [r0, #0]
 801a3ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3f2:	bd38      	pop	{r3, r4, r5, pc}
 801a3f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a3f6:	b112      	cbz	r2, 801a3fe <_raise_r+0x1e>
 801a3f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a3fc:	b94b      	cbnz	r3, 801a412 <_raise_r+0x32>
 801a3fe:	4620      	mov	r0, r4
 801a400:	f000 f830 	bl	801a464 <_getpid_r>
 801a404:	462a      	mov	r2, r5
 801a406:	4601      	mov	r1, r0
 801a408:	4620      	mov	r0, r4
 801a40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a40e:	f000 b817 	b.w	801a440 <_kill_r>
 801a412:	2b01      	cmp	r3, #1
 801a414:	d00a      	beq.n	801a42c <_raise_r+0x4c>
 801a416:	1c59      	adds	r1, r3, #1
 801a418:	d103      	bne.n	801a422 <_raise_r+0x42>
 801a41a:	2316      	movs	r3, #22
 801a41c:	6003      	str	r3, [r0, #0]
 801a41e:	2001      	movs	r0, #1
 801a420:	e7e7      	b.n	801a3f2 <_raise_r+0x12>
 801a422:	2400      	movs	r4, #0
 801a424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a428:	4628      	mov	r0, r5
 801a42a:	4798      	blx	r3
 801a42c:	2000      	movs	r0, #0
 801a42e:	e7e0      	b.n	801a3f2 <_raise_r+0x12>

0801a430 <raise>:
 801a430:	4b02      	ldr	r3, [pc, #8]	; (801a43c <raise+0xc>)
 801a432:	4601      	mov	r1, r0
 801a434:	6818      	ldr	r0, [r3, #0]
 801a436:	f7ff bfd3 	b.w	801a3e0 <_raise_r>
 801a43a:	bf00      	nop
 801a43c:	2000019c 	.word	0x2000019c

0801a440 <_kill_r>:
 801a440:	b538      	push	{r3, r4, r5, lr}
 801a442:	4d07      	ldr	r5, [pc, #28]	; (801a460 <_kill_r+0x20>)
 801a444:	2300      	movs	r3, #0
 801a446:	4604      	mov	r4, r0
 801a448:	4608      	mov	r0, r1
 801a44a:	4611      	mov	r1, r2
 801a44c:	602b      	str	r3, [r5, #0]
 801a44e:	f7ed f8ff 	bl	8007650 <_kill>
 801a452:	1c43      	adds	r3, r0, #1
 801a454:	d102      	bne.n	801a45c <_kill_r+0x1c>
 801a456:	682b      	ldr	r3, [r5, #0]
 801a458:	b103      	cbz	r3, 801a45c <_kill_r+0x1c>
 801a45a:	6023      	str	r3, [r4, #0]
 801a45c:	bd38      	pop	{r3, r4, r5, pc}
 801a45e:	bf00      	nop
 801a460:	20007a8c 	.word	0x20007a8c

0801a464 <_getpid_r>:
 801a464:	f7ed b8ec 	b.w	8007640 <_getpid>

0801a468 <_malloc_usable_size_r>:
 801a468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a46c:	1f18      	subs	r0, r3, #4
 801a46e:	2b00      	cmp	r3, #0
 801a470:	bfbc      	itt	lt
 801a472:	580b      	ldrlt	r3, [r1, r0]
 801a474:	18c0      	addlt	r0, r0, r3
 801a476:	4770      	bx	lr

0801a478 <_init>:
 801a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a47a:	bf00      	nop
 801a47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a47e:	bc08      	pop	{r3}
 801a480:	469e      	mov	lr, r3
 801a482:	4770      	bx	lr

0801a484 <_fini>:
 801a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a486:	bf00      	nop
 801a488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a48a:	bc08      	pop	{r3}
 801a48c:	469e      	mov	lr, r3
 801a48e:	4770      	bx	lr
